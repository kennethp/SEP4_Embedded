
app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000610  00800200  000054d2  00005566  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000054d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000284  00800810  00800810  00005b76  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005b76  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005bd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b28  00000000  00000000  00005c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e131  00000000  00000000  0000673c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b38  00000000  00000000  0001486d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006c17  00000000  00000000  000183a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000023a0  00000000  00000000  0001efbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004693  00000000  00000000  0002135c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c08d  00000000  00000000  000259ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b00  00000000  00000000  00031a7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	06 c2       	rjmp	.+1036   	; 0x40e <__ctors_end>
       2:	00 00       	nop
       4:	24 c2       	rjmp	.+1096   	; 0x44e <__bad_interrupt>
       6:	00 00       	nop
       8:	22 c2       	rjmp	.+1092   	; 0x44e <__bad_interrupt>
       a:	00 00       	nop
       c:	20 c2       	rjmp	.+1088   	; 0x44e <__bad_interrupt>
       e:	00 00       	nop
      10:	1e c2       	rjmp	.+1084   	; 0x44e <__bad_interrupt>
      12:	00 00       	nop
      14:	1c c2       	rjmp	.+1080   	; 0x44e <__bad_interrupt>
      16:	00 00       	nop
      18:	1a c2       	rjmp	.+1076   	; 0x44e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	18 c2       	rjmp	.+1072   	; 0x44e <__bad_interrupt>
      1e:	00 00       	nop
      20:	16 c2       	rjmp	.+1068   	; 0x44e <__bad_interrupt>
      22:	00 00       	nop
      24:	14 c2       	rjmp	.+1064   	; 0x44e <__bad_interrupt>
      26:	00 00       	nop
      28:	12 c2       	rjmp	.+1060   	; 0x44e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	10 c2       	rjmp	.+1056   	; 0x44e <__bad_interrupt>
      2e:	00 00       	nop
      30:	2e c7       	rjmp	.+3676   	; 0xe8e <__vector_12>
      32:	00 00       	nop
      34:	0c c2       	rjmp	.+1048   	; 0x44e <__bad_interrupt>
      36:	00 00       	nop
      38:	0a c2       	rjmp	.+1044   	; 0x44e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	08 c2       	rjmp	.+1040   	; 0x44e <__bad_interrupt>
      3e:	00 00       	nop
      40:	06 c2       	rjmp	.+1036   	; 0x44e <__bad_interrupt>
      42:	00 00       	nop
      44:	04 c2       	rjmp	.+1032   	; 0x44e <__bad_interrupt>
      46:	00 00       	nop
      48:	02 c2       	rjmp	.+1028   	; 0x44e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	00 c2       	rjmp	.+1024   	; 0x44e <__bad_interrupt>
      4e:	00 00       	nop
      50:	fe c1       	rjmp	.+1020   	; 0x44e <__bad_interrupt>
      52:	00 00       	nop
      54:	fc c1       	rjmp	.+1016   	; 0x44e <__bad_interrupt>
      56:	00 00       	nop
      58:	fa c1       	rjmp	.+1012   	; 0x44e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f8 c1       	rjmp	.+1008   	; 0x44e <__bad_interrupt>
      5e:	00 00       	nop
      60:	f6 c1       	rjmp	.+1004   	; 0x44e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 45 17 	jmp	0x2e8a	; 0x2e8a <__vector_25>
      68:	0c 94 97 17 	jmp	0x2f2e	; 0x2f2e <__vector_26>
      6c:	f0 c1       	rjmp	.+992    	; 0x44e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ee c1       	rjmp	.+988    	; 0x44e <__bad_interrupt>
      72:	00 00       	nop
      74:	ec c1       	rjmp	.+984    	; 0x44e <__bad_interrupt>
      76:	00 00       	nop
      78:	ea c1       	rjmp	.+980    	; 0x44e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e8 c1       	rjmp	.+976    	; 0x44e <__bad_interrupt>
      7e:	00 00       	nop
      80:	e6 c1       	rjmp	.+972    	; 0x44e <__bad_interrupt>
      82:	00 00       	nop
      84:	e4 c1       	rjmp	.+968    	; 0x44e <__bad_interrupt>
      86:	00 00       	nop
      88:	e2 c1       	rjmp	.+964    	; 0x44e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e0 c1       	rjmp	.+960    	; 0x44e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 db 17 	jmp	0x2fb6	; 0x2fb6 <__vector_36>
      94:	0c 94 2d 18 	jmp	0x305a	; 0x305a <__vector_37>
      98:	da c1       	rjmp	.+948    	; 0x44e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 24 23 	jmp	0x4648	; 0x4648 <__vector_39>
      a0:	d6 c1       	rjmp	.+940    	; 0x44e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d4 c1       	rjmp	.+936    	; 0x44e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d2 c1       	rjmp	.+932    	; 0x44e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d0 c1       	rjmp	.+928    	; 0x44e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ce c1       	rjmp	.+924    	; 0x44e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cc c1       	rjmp	.+920    	; 0x44e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ca c1       	rjmp	.+916    	; 0x44e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c8 c1       	rjmp	.+912    	; 0x44e <__bad_interrupt>
      be:	00 00       	nop
      c0:	c6 c1       	rjmp	.+908    	; 0x44e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c4 c1       	rjmp	.+904    	; 0x44e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c2 c1       	rjmp	.+900    	; 0x44e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 71 18 	jmp	0x30e2	; 0x30e2 <__vector_51>
      d0:	0c 94 c3 18 	jmp	0x3186	; 0x3186 <__vector_52>
      d4:	bc c1       	rjmp	.+888    	; 0x44e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 07 19 	jmp	0x320e	; 0x320e <__vector_54>
      dc:	0c 94 59 19 	jmp	0x32b2	; 0x32b2 <__vector_55>
      e0:	b6 c1       	rjmp	.+876    	; 0x44e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	96 01       	movw	r18, r12
      e6:	96 01       	movw	r18, r12
      e8:	96 01       	movw	r18, r12
      ea:	c5 01       	movw	r24, r10
      ec:	cd 01       	movw	r24, r26
      ee:	dc 01       	movw	r26, r24
      f0:	96 01       	movw	r18, r12
      f2:	96 01       	movw	r18, r12
      f4:	c5 01       	movw	r24, r10
      f6:	cd 01       	movw	r24, r26
      f8:	46 23       	and	r20, r22
      fa:	b6 23       	and	r27, r22
      fc:	b6 23       	and	r27, r22
      fe:	b6 23       	and	r27, r22
     100:	b6 23       	and	r27, r22
     102:	b6 23       	and	r27, r22
     104:	b6 23       	and	r27, r22
     106:	b6 23       	and	r27, r22
     108:	46 23       	and	r20, r22
     10a:	b6 23       	and	r27, r22
     10c:	b6 23       	and	r27, r22
     10e:	b6 23       	and	r27, r22
     110:	b6 23       	and	r27, r22
     112:	b6 23       	and	r27, r22
     114:	b6 23       	and	r27, r22
     116:	b6 23       	and	r27, r22
     118:	48 23       	and	r20, r24
     11a:	b6 23       	and	r27, r22
     11c:	b6 23       	and	r27, r22
     11e:	b6 23       	and	r27, r22
     120:	b6 23       	and	r27, r22
     122:	b6 23       	and	r27, r22
     124:	b6 23       	and	r27, r22
     126:	b6 23       	and	r27, r22
     128:	b6 23       	and	r27, r22
     12a:	b6 23       	and	r27, r22
     12c:	b6 23       	and	r27, r22
     12e:	b6 23       	and	r27, r22
     130:	b6 23       	and	r27, r22
     132:	b6 23       	and	r27, r22
     134:	b6 23       	and	r27, r22
     136:	b6 23       	and	r27, r22
     138:	48 23       	and	r20, r24
     13a:	b6 23       	and	r27, r22
     13c:	b6 23       	and	r27, r22
     13e:	b6 23       	and	r27, r22
     140:	b6 23       	and	r27, r22
     142:	b6 23       	and	r27, r22
     144:	b6 23       	and	r27, r22
     146:	b6 23       	and	r27, r22
     148:	b6 23       	and	r27, r22
     14a:	b6 23       	and	r27, r22
     14c:	b6 23       	and	r27, r22
     14e:	b6 23       	and	r27, r22
     150:	b6 23       	and	r27, r22
     152:	b6 23       	and	r27, r22
     154:	b6 23       	and	r27, r22
     156:	b6 23       	and	r27, r22
     158:	b2 23       	and	r27, r18
     15a:	b6 23       	and	r27, r22
     15c:	b6 23       	and	r27, r22
     15e:	b6 23       	and	r27, r22
     160:	b6 23       	and	r27, r22
     162:	b6 23       	and	r27, r22
     164:	b6 23       	and	r27, r22
     166:	b6 23       	and	r27, r22
     168:	7d 23       	and	r23, r29
     16a:	b6 23       	and	r27, r22
     16c:	b6 23       	and	r27, r22
     16e:	b6 23       	and	r27, r22
     170:	b6 23       	and	r27, r22
     172:	b6 23       	and	r27, r22
     174:	b6 23       	and	r27, r22
     176:	b6 23       	and	r27, r22
     178:	b6 23       	and	r27, r22
     17a:	b6 23       	and	r27, r22
     17c:	b6 23       	and	r27, r22
     17e:	b6 23       	and	r27, r22
     180:	b6 23       	and	r27, r22
     182:	b6 23       	and	r27, r22
     184:	b6 23       	and	r27, r22
     186:	b6 23       	and	r27, r22
     188:	71 23       	and	r23, r17
     18a:	b6 23       	and	r27, r22
     18c:	b6 23       	and	r27, r22
     18e:	b6 23       	and	r27, r22
     190:	b6 23       	and	r27, r22
     192:	b6 23       	and	r27, r22
     194:	b6 23       	and	r27, r22
     196:	b6 23       	and	r27, r22
     198:	95 23       	and	r25, r21

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	02 e3       	ldi	r16, 0x32	; 50
     19c:	18 e0       	ldi	r17, 0x08	; 8
     19e:	0f 2e       	mov	r0, r31
     1a0:	fa e5       	ldi	r31, 0x5A	; 90
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f8 e0       	ldi	r31, 0x08	; 8
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 31 08 	lds	r24, 0x0831	; 0x800831 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	15 96       	adiw	r26, 0x05	; 5
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	16 97       	sbiw	r26, 0x06	; 6
     1c2:	c6 81       	ldd	r28, Z+6	; 0x06
     1c4:	d7 81       	ldd	r29, Z+7	; 0x07
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	c7 d4       	rcall	.+2446   	; 0xb5a <uxListRemove>
     1cc:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 27 08 	sts	0x0827, r24	; 0x800827 <uxCurrentNumberOfTasks>
     1d6:	80 91 31 08 	lds	r24, 0x0831	; 0x800831 <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 31 08 	sts	0x0831, r24	; 0x800831 <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8f 89       	ldd	r24, Y+23	; 0x17
     1e6:	98 8d       	ldd	r25, Y+24	; 0x18
     1e8:	45 d4       	rcall	.+2186   	; 0xa74 <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	43 d4       	rcall	.+2182   	; 0xa74 <vPortFree>
     1ee:	80 91 31 08 	lds	r24, 0x0831	; 0x800831 <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	08 f0       	brcs	.+2      	; 0x200 <prvIdleTask+0x66>
     1fe:	82 d5       	rcall	.+2820   	; 0xd04 <vPortYield>
     200:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <vApplicationIdleHook>
     204:	d2 cf       	rjmp	.-92     	; 0x1aa <prvIdleTask+0x10>

00000206 <prvTimerTask>:
     206:	cf 93       	push	r28
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     208:	df 93       	push	r29
     20a:	00 d0       	rcall	.+0      	; 0x20c <prvTimerTask+0x6>
     20c:	00 d0       	rcall	.+0      	; 0x20e <prvTimerTask+0x8>
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
     212:	ce 01       	movw	r24, r28
     214:	01 96       	adiw	r24, 0x01	; 1
     216:	4c 01       	movw	r8, r24
     218:	44 24       	eor	r4, r4
     21a:	43 94       	inc	r4
     21c:	e1 2c       	mov	r14, r1
     21e:	f1 2c       	mov	r15, r1
     220:	51 2c       	mov	r5, r1
     222:	c8 2e       	mov	r12, r24
     224:	d9 2c       	mov	r13, r9
     226:	e0 91 88 08 	lds	r30, 0x0888	; 0x800888 <pxCurrentTimerList>
     22a:	f0 91 89 08 	lds	r31, 0x0889	; 0x800889 <pxCurrentTimerList+0x1>
     22e:	80 81       	ld	r24, Z
     230:	88 23       	and	r24, r24
     232:	09 f4       	brne	.+2      	; 0x236 <prvTimerTask+0x30>
     234:	d8 c0       	rjmp	.+432    	; 0x3e6 <prvTimerTask+0x1e0>
     236:	05 80       	ldd	r0, Z+5	; 0x05
     238:	f6 81       	ldd	r31, Z+6	; 0x06
     23a:	e0 2d       	mov	r30, r0
     23c:	a0 80       	ld	r10, Z
     23e:	b1 80       	ldd	r11, Z+1	; 0x01
     240:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <vTaskSuspendAll>
     244:	c4 01       	movw	r24, r8
     246:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <prvSampleTimeNow>
     24a:	8c 01       	movw	r16, r24
     24c:	89 81       	ldd	r24, Y+1	; 0x01
     24e:	81 11       	cpse	r24, r1
     250:	49 c0       	rjmp	.+146    	; 0x2e4 <prvTimerTask+0xde>
     252:	0a 15       	cp	r16, r10
     254:	1b 05       	cpc	r17, r11
     256:	b0 f1       	brcs	.+108    	; 0x2c4 <prvTimerTask+0xbe>
     258:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <xTaskResumeAll>
     25c:	e0 91 88 08 	lds	r30, 0x0888	; 0x800888 <pxCurrentTimerList>
     260:	f0 91 89 08 	lds	r31, 0x0889	; 0x800889 <pxCurrentTimerList+0x1>
     264:	05 80       	ldd	r0, Z+5	; 0x05
     266:	f6 81       	ldd	r31, Z+6	; 0x06
     268:	e0 2d       	mov	r30, r0
     26a:	66 80       	ldd	r6, Z+6	; 0x06
     26c:	77 80       	ldd	r7, Z+7	; 0x07
     26e:	c3 01       	movw	r24, r6
     270:	02 96       	adiw	r24, 0x02	; 2
     272:	73 d4       	rcall	.+2278   	; 0xb5a <uxListRemove>
     274:	d3 01       	movw	r26, r6
     276:	53 96       	adiw	r26, 0x13	; 19
     278:	8c 91       	ld	r24, X
     27a:	53 97       	sbiw	r26, 0x13	; 19
     27c:	82 ff       	sbrs	r24, 2
     27e:	17 c0       	rjmp	.+46     	; 0x2ae <prvTimerTask+0xa8>
     280:	1c 96       	adiw	r26, 0x0c	; 12
     282:	6d 91       	ld	r22, X+
     284:	7c 91       	ld	r23, X
     286:	1d 97       	sbiw	r26, 0x0d	; 13
     288:	6a 0d       	add	r22, r10
     28a:	7b 1d       	adc	r23, r11
     28c:	95 01       	movw	r18, r10
     28e:	a8 01       	movw	r20, r16
     290:	c3 01       	movw	r24, r6
     292:	0e 94 2c 14 	call	0x2858	; 0x2858 <prvInsertTimerInActiveList>
     296:	88 23       	and	r24, r24
     298:	69 f0       	breq	.+26     	; 0x2b4 <prvTimerTask+0xae>
     29a:	0e 2d       	mov	r16, r14
     29c:	1f 2d       	mov	r17, r15
     29e:	2e 2d       	mov	r18, r14
     2a0:	3f 2d       	mov	r19, r15
     2a2:	a5 01       	movw	r20, r10
     2a4:	65 2d       	mov	r22, r5
     2a6:	c3 01       	movw	r24, r6
     2a8:	0e 94 a4 14 	call	0x2948	; 0x2948 <xTimerGenericCommand>
     2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <prvTimerTask+0xae>
     2ae:	8e 7f       	andi	r24, 0xFE	; 254
     2b0:	f3 01       	movw	r30, r6
     2b2:	83 8b       	std	Z+19, r24	; 0x13
     2b4:	d3 01       	movw	r26, r6
     2b6:	50 96       	adiw	r26, 0x10	; 16
     2b8:	ed 91       	ld	r30, X+
     2ba:	fc 91       	ld	r31, X
     2bc:	51 97       	sbiw	r26, 0x11	; 17
     2be:	c3 01       	movw	r24, r6
     2c0:	19 95       	eicall
     2c2:	85 c0       	rjmp	.+266    	; 0x3ce <prvTimerTask+0x1c8>
     2c4:	45 2d       	mov	r20, r5
     2c6:	b5 01       	movw	r22, r10
     2c8:	60 1b       	sub	r22, r16
     2ca:	71 0b       	sbc	r23, r17
     2cc:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <xTimerQueue>
     2d0:	90 91 85 08 	lds	r25, 0x0885	; 0x800885 <xTimerQueue+0x1>
     2d4:	0e 94 b5 0a 	call	0x156a	; 0x156a <vQueueWaitForMessageRestricted>
     2d8:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <xTaskResumeAll>
     2dc:	81 11       	cpse	r24, r1
     2de:	77 c0       	rjmp	.+238    	; 0x3ce <prvTimerTask+0x1c8>
     2e0:	11 d5       	rcall	.+2594   	; 0xd04 <vPortYield>
     2e2:	75 c0       	rjmp	.+234    	; 0x3ce <prvTimerTask+0x1c8>
     2e4:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <xTaskResumeAll>
     2e8:	72 c0       	rjmp	.+228    	; 0x3ce <prvTimerTask+0x1c8>
     2ea:	89 81       	ldd	r24, Y+1	; 0x01
     2ec:	88 23       	and	r24, r24
     2ee:	0c f4       	brge	.+2      	; 0x2f2 <prvTimerTask+0xec>
     2f0:	6e c0       	rjmp	.+220    	; 0x3ce <prvTimerTask+0x1c8>
     2f2:	ac 80       	ldd	r10, Y+4	; 0x04
     2f4:	bd 80       	ldd	r11, Y+5	; 0x05
     2f6:	f5 01       	movw	r30, r10
     2f8:	82 85       	ldd	r24, Z+10	; 0x0a
     2fa:	93 85       	ldd	r25, Z+11	; 0x0b
     2fc:	89 2b       	or	r24, r25
     2fe:	19 f0       	breq	.+6      	; 0x306 <prvTimerTask+0x100>
     300:	c5 01       	movw	r24, r10
     302:	02 96       	adiw	r24, 0x02	; 2
     304:	2a d4       	rcall	.+2132   	; 0xb5a <uxListRemove>
     306:	ce 01       	movw	r24, r28
     308:	06 96       	adiw	r24, 0x06	; 6
     30a:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <prvSampleTimeNow>
     30e:	ac 01       	movw	r20, r24
     310:	e9 81       	ldd	r30, Y+1	; 0x01
     312:	0e 2e       	mov	r0, r30
     314:	00 0c       	add	r0, r0
     316:	ff 0b       	sbc	r31, r31
     318:	ea 30       	cpi	r30, 0x0A	; 10
     31a:	f1 05       	cpc	r31, r1
     31c:	08 f0       	brcs	.+2      	; 0x320 <prvTimerTask+0x11a>
     31e:	57 c0       	rjmp	.+174    	; 0x3ce <prvTimerTask+0x1c8>
     320:	88 27       	eor	r24, r24
     322:	ee 58       	subi	r30, 0x8E	; 142
     324:	ff 4f       	sbci	r31, 0xFF	; 255
     326:	8f 4f       	sbci	r24, 0xFF	; 255
     328:	0c 94 c8 25 	jmp	0x4b90	; 0x4b90 <__tablejump2__>
     32c:	d5 01       	movw	r26, r10
     32e:	53 96       	adiw	r26, 0x13	; 19
     330:	8c 91       	ld	r24, X
     332:	53 97       	sbiw	r26, 0x13	; 19
     334:	81 60       	ori	r24, 0x01	; 1
     336:	53 96       	adiw	r26, 0x13	; 19
     338:	8c 93       	st	X, r24
     33a:	53 97       	sbiw	r26, 0x13	; 19
     33c:	2a 81       	ldd	r18, Y+2	; 0x02
     33e:	3b 81       	ldd	r19, Y+3	; 0x03
     340:	1c 96       	adiw	r26, 0x0c	; 12
     342:	6d 91       	ld	r22, X+
     344:	7c 91       	ld	r23, X
     346:	1d 97       	sbiw	r26, 0x0d	; 13
     348:	62 0f       	add	r22, r18
     34a:	73 1f       	adc	r23, r19
     34c:	c5 01       	movw	r24, r10
     34e:	0e 94 2c 14 	call	0x2858	; 0x2858 <prvInsertTimerInActiveList>
     352:	88 23       	and	r24, r24
     354:	e1 f1       	breq	.+120    	; 0x3ce <prvTimerTask+0x1c8>
     356:	d5 01       	movw	r26, r10
     358:	50 96       	adiw	r26, 0x10	; 16
     35a:	ed 91       	ld	r30, X+
     35c:	fc 91       	ld	r31, X
     35e:	51 97       	sbiw	r26, 0x11	; 17
     360:	c5 01       	movw	r24, r10
     362:	19 95       	eicall
     364:	f5 01       	movw	r30, r10
     366:	83 89       	ldd	r24, Z+19	; 0x13
     368:	82 ff       	sbrs	r24, 2
     36a:	31 c0       	rjmp	.+98     	; 0x3ce <prvTimerTask+0x1c8>
     36c:	4a 81       	ldd	r20, Y+2	; 0x02
     36e:	5b 81       	ldd	r21, Y+3	; 0x03
     370:	84 85       	ldd	r24, Z+12	; 0x0c
     372:	95 85       	ldd	r25, Z+13	; 0x0d
     374:	48 0f       	add	r20, r24
     376:	59 1f       	adc	r21, r25
     378:	0e 2d       	mov	r16, r14
     37a:	1f 2d       	mov	r17, r15
     37c:	2e 2d       	mov	r18, r14
     37e:	3f 2d       	mov	r19, r15
     380:	65 2d       	mov	r22, r5
     382:	c5 01       	movw	r24, r10
     384:	0e 94 a4 14 	call	0x2948	; 0x2948 <xTimerGenericCommand>
     388:	22 c0       	rjmp	.+68     	; 0x3ce <prvTimerTask+0x1c8>
     38a:	d5 01       	movw	r26, r10
     38c:	53 96       	adiw	r26, 0x13	; 19
     38e:	8c 91       	ld	r24, X
     390:	53 97       	sbiw	r26, 0x13	; 19
     392:	8e 7f       	andi	r24, 0xFE	; 254
     394:	53 96       	adiw	r26, 0x13	; 19
     396:	8c 93       	st	X, r24
     398:	1a c0       	rjmp	.+52     	; 0x3ce <prvTimerTask+0x1c8>
     39a:	f5 01       	movw	r30, r10
     39c:	83 89       	ldd	r24, Z+19	; 0x13
     39e:	81 60       	ori	r24, 0x01	; 1
     3a0:	83 8b       	std	Z+19, r24	; 0x13
     3a2:	6a 81       	ldd	r22, Y+2	; 0x02
     3a4:	7b 81       	ldd	r23, Y+3	; 0x03
     3a6:	75 87       	std	Z+13, r23	; 0x0d
     3a8:	64 87       	std	Z+12, r22	; 0x0c
     3aa:	64 0f       	add	r22, r20
     3ac:	75 1f       	adc	r23, r21
     3ae:	9a 01       	movw	r18, r20
     3b0:	c5 01       	movw	r24, r10
     3b2:	0e 94 2c 14 	call	0x2858	; 0x2858 <prvInsertTimerInActiveList>
     3b6:	0b c0       	rjmp	.+22     	; 0x3ce <prvTimerTask+0x1c8>
     3b8:	d5 01       	movw	r26, r10
     3ba:	53 96       	adiw	r26, 0x13	; 19
     3bc:	8c 91       	ld	r24, X
     3be:	81 fd       	sbrc	r24, 1
     3c0:	03 c0       	rjmp	.+6      	; 0x3c8 <prvTimerTask+0x1c2>
     3c2:	c5 01       	movw	r24, r10
     3c4:	57 d3       	rcall	.+1710   	; 0xa74 <vPortFree>
     3c6:	03 c0       	rjmp	.+6      	; 0x3ce <prvTimerTask+0x1c8>
     3c8:	8e 7f       	andi	r24, 0xFE	; 254
     3ca:	f5 01       	movw	r30, r10
     3cc:	83 8b       	std	Z+19, r24	; 0x13
     3ce:	4e 2d       	mov	r20, r14
     3d0:	5f 2d       	mov	r21, r15
     3d2:	6c 2d       	mov	r22, r12
     3d4:	7d 2d       	mov	r23, r13
     3d6:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <xTimerQueue>
     3da:	90 91 85 08 	lds	r25, 0x0885	; 0x800885 <xTimerQueue+0x1>
     3de:	80 d7       	rcall	.+3840   	; 0x12e0 <xQueueReceive>
     3e0:	81 11       	cpse	r24, r1
     3e2:	83 cf       	rjmp	.-250    	; 0x2ea <prvTimerTask+0xe4>
     3e4:	20 cf       	rjmp	.-448    	; 0x226 <prvTimerTask+0x20>
     3e6:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <vTaskSuspendAll>
     3ea:	c4 01       	movw	r24, r8
     3ec:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <prvSampleTimeNow>
     3f0:	8c 01       	movw	r16, r24
     3f2:	89 81       	ldd	r24, Y+1	; 0x01
     3f4:	81 11       	cpse	r24, r1
     3f6:	76 cf       	rjmp	.-276    	; 0x2e4 <prvTimerTask+0xde>
     3f8:	e0 91 86 08 	lds	r30, 0x0886	; 0x800886 <pxOverflowTimerList>
     3fc:	f0 91 87 08 	lds	r31, 0x0887	; 0x800887 <pxOverflowTimerList+0x1>
     400:	80 81       	ld	r24, Z
     402:	44 2d       	mov	r20, r4
     404:	81 11       	cpse	r24, r1
     406:	45 2d       	mov	r20, r5
     408:	ae 2c       	mov	r10, r14
     40a:	bf 2c       	mov	r11, r15
     40c:	5c cf       	rjmp	.-328    	; 0x2c6 <prvTimerTask+0xc0>

0000040e <__ctors_end>:
     40e:	11 24       	eor	r1, r1
     410:	1f be       	out	0x3f, r1	; 63
     412:	cf ef       	ldi	r28, 0xFF	; 255
     414:	d1 e2       	ldi	r29, 0x21	; 33
     416:	de bf       	out	0x3e, r29	; 62
     418:	cd bf       	out	0x3d, r28	; 61
     41a:	00 e0       	ldi	r16, 0x00	; 0
     41c:	0c bf       	out	0x3c, r16	; 60

0000041e <__do_copy_data>:
     41e:	18 e0       	ldi	r17, 0x08	; 8
     420:	a0 e0       	ldi	r26, 0x00	; 0
     422:	b2 e0       	ldi	r27, 0x02	; 2
     424:	e2 ed       	ldi	r30, 0xD2	; 210
     426:	f4 e5       	ldi	r31, 0x54	; 84
     428:	00 e0       	ldi	r16, 0x00	; 0
     42a:	0b bf       	out	0x3b, r16	; 59
     42c:	02 c0       	rjmp	.+4      	; 0x432 <__do_copy_data+0x14>
     42e:	07 90       	elpm	r0, Z+
     430:	0d 92       	st	X+, r0
     432:	a0 31       	cpi	r26, 0x10	; 16
     434:	b1 07       	cpc	r27, r17
     436:	d9 f7       	brne	.-10     	; 0x42e <__do_copy_data+0x10>

00000438 <__do_clear_bss>:
     438:	2a e0       	ldi	r18, 0x0A	; 10
     43a:	a0 e1       	ldi	r26, 0x10	; 16
     43c:	b8 e0       	ldi	r27, 0x08	; 8
     43e:	01 c0       	rjmp	.+2      	; 0x442 <.do_clear_bss_start>

00000440 <.do_clear_bss_loop>:
     440:	1d 92       	st	X+, r1

00000442 <.do_clear_bss_start>:
     442:	a4 39       	cpi	r26, 0x94	; 148
     444:	b2 07       	cpc	r27, r18
     446:	e1 f7       	brne	.-8      	; 0x440 <.do_clear_bss_loop>
     448:	03 d0       	rcall	.+6      	; 0x450 <main>
     44a:	0c 94 67 2a 	jmp	0x54ce	; 0x54ce <_exit>

0000044e <__bad_interrupt>:
     44e:	d8 cd       	rjmp	.-1104   	; 0x0 <__vectors>

00000450 <main>:
TaskHandle_t lightSensorHandle = NULL;
TaskHandle_t WaterHandle = NULL;
TaskHandle_t ServoMotorHandle = NULL;
TaskHandle_t loRaWanHandle = NULL;

int main() {
     450:	ef 92       	push	r14
     452:	ff 92       	push	r15
     454:	0f 93       	push	r16
	
	//sets the semaphore to null before program start
	semaphore = NULL;
     456:	10 92 03 0a 	sts	0x0A03, r1	; 0x800a03 <semaphore+0x1>
     45a:	10 92 02 0a 	sts	0x0A02, r1	; 0x800a02 <semaphore>
	
	plantdata.co2 = 0;
     45e:	e4 e0       	ldi	r30, 0x04	; 4
     460:	fa e0       	ldi	r31, 0x0A	; 10
     462:	15 82       	std	Z+5, r1	; 0x05
     464:	14 82       	std	Z+4, r1	; 0x04
	plantdata.humidity = 0;
     466:	13 82       	std	Z+3, r1	; 0x03
     468:	12 82       	std	Z+2, r1	; 0x02
	plantdata.light = 0;
     46a:	17 82       	std	Z+7, r1	; 0x07
     46c:	16 82       	std	Z+6, r1	; 0x06
	plantdata.temperature = 0;
     46e:	11 82       	std	Z+1, r1	; 0x01
     470:	10 82       	st	Z, r1
	plantdata.water = 0;
     472:	11 86       	std	Z+9, r1	; 0x09
     474:	10 86       	std	Z+8, r1	; 0x08
	
	stdioCreate(0);
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <stdioCreate>
	
	//setup for loRaWAN
	hal_create(LED_TASK_PRIORITY);
     47c:	83 e0       	ldi	r24, 0x03	; 3
     47e:	0e 94 bc 19 	call	0x3378	; 0x3378 <hal_create>
	lora_driver_create(ser_USART1);
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	0e 94 91 1c 	call	0x3922	; 0x3922 <lora_driver_create>
	
	//creating tasks
	xTaskCreate(tempSensorTask, "Temperature measurement", configMINIMAL_STACK_SIZE, NULL, TEMP_TASK_PRIORITY, &tempSensorHandle);
     488:	0f 2e       	mov	r0, r31
     48a:	f8 e1       	ldi	r31, 0x18	; 24
     48c:	ef 2e       	mov	r14, r31
     48e:	f8 e0       	ldi	r31, 0x08	; 8
     490:	ff 2e       	mov	r15, r31
     492:	f0 2d       	mov	r31, r0
     494:	01 e0       	ldi	r16, 0x01	; 1
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	40 ec       	ldi	r20, 0xC0	; 192
     49c:	50 e0       	ldi	r21, 0x00	; 0
     49e:	6e e6       	ldi	r22, 0x6E	; 110
     4a0:	72 e0       	ldi	r23, 0x02	; 2
     4a2:	84 e9       	ldi	r24, 0x94	; 148
     4a4:	94 e0       	ldi	r25, 0x04	; 4
     4a6:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <xTaskCreate>
	xTaskCreate(co2SensorTask, "CO2 measurement", configMINIMAL_STACK_SIZE, NULL, CO2_TASK_PRIORITY, &co2SensorHandle);
     4aa:	0f 2e       	mov	r0, r31
     4ac:	f6 e1       	ldi	r31, 0x16	; 22
     4ae:	ef 2e       	mov	r14, r31
     4b0:	f8 e0       	ldi	r31, 0x08	; 8
     4b2:	ff 2e       	mov	r15, r31
     4b4:	f0 2d       	mov	r31, r0
     4b6:	20 e0       	ldi	r18, 0x00	; 0
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	40 ec       	ldi	r20, 0xC0	; 192
     4bc:	50 e0       	ldi	r21, 0x00	; 0
     4be:	66 e8       	ldi	r22, 0x86	; 134
     4c0:	72 e0       	ldi	r23, 0x02	; 2
     4c2:	87 ed       	ldi	r24, 0xD7	; 215
     4c4:	92 e0       	ldi	r25, 0x02	; 2
     4c6:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <xTaskCreate>
	xTaskCreate(lightSensorTask, "Light measurement", configMINIMAL_STACK_SIZE, NULL, LIGHT_TASK_PRIORITY, &lightSensorHandle);
     4ca:	0f 2e       	mov	r0, r31
     4cc:	f4 e1       	ldi	r31, 0x14	; 20
     4ce:	ef 2e       	mov	r14, r31
     4d0:	f8 e0       	ldi	r31, 0x08	; 8
     4d2:	ff 2e       	mov	r15, r31
     4d4:	f0 2d       	mov	r31, r0
     4d6:	20 e0       	ldi	r18, 0x00	; 0
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	40 ec       	ldi	r20, 0xC0	; 192
     4dc:	50 e0       	ldi	r21, 0x00	; 0
     4de:	66 e9       	ldi	r22, 0x96	; 150
     4e0:	72 e0       	ldi	r23, 0x02	; 2
     4e2:	89 e1       	ldi	r24, 0x19	; 25
     4e4:	93 e0       	ldi	r25, 0x03	; 3
     4e6:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <xTaskCreate>
	xTaskCreate(loRaWanTask, "Led", configMINIMAL_STACK_SIZE, NULL,LED_TASK_PRIORITY, &loRaWanHandle);
     4ea:	0f 2e       	mov	r0, r31
     4ec:	f0 e1       	ldi	r31, 0x10	; 16
     4ee:	ef 2e       	mov	r14, r31
     4f0:	f8 e0       	ldi	r31, 0x08	; 8
     4f2:	ff 2e       	mov	r15, r31
     4f4:	f0 2d       	mov	r31, r0
     4f6:	03 e0       	ldi	r16, 0x03	; 3
     4f8:	20 e0       	ldi	r18, 0x00	; 0
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	40 ec       	ldi	r20, 0xC0	; 192
     4fe:	50 e0       	ldi	r21, 0x00	; 0
     500:	68 ea       	ldi	r22, 0xA8	; 168
     502:	72 e0       	ldi	r23, 0x02	; 2
     504:	89 e1       	ldi	r24, 0x19	; 25
     506:	94 e0       	ldi	r25, 0x04	; 4
     508:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <xTaskCreate>
	xTaskCreate(servoMotorTask, "Servo Motor", configMINIMAL_STACK_SIZE, NULL, SERVO_TASK_PRIORITY,&ServoMotorHandle);
     50c:	0f 2e       	mov	r0, r31
     50e:	f2 e1       	ldi	r31, 0x12	; 18
     510:	ef 2e       	mov	r14, r31
     512:	f8 e0       	ldi	r31, 0x08	; 8
     514:	ff 2e       	mov	r15, r31
     516:	f0 2d       	mov	r31, r0
     518:	01 e0       	ldi	r16, 0x01	; 1
     51a:	20 e0       	ldi	r18, 0x00	; 0
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	40 ec       	ldi	r20, 0xC0	; 192
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	6c ea       	ldi	r22, 0xAC	; 172
     524:	72 e0       	ldi	r23, 0x02	; 2
     526:	8b e7       	ldi	r24, 0x7B	; 123
     528:	94 e0       	ldi	r25, 0x04	; 4
     52a:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <xTaskCreate>
	
	semaphore = xSemaphoreCreateMutex();
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	87 d6       	rcall	.+3342   	; 0x1240 <xQueueCreateMutex>
     532:	90 93 03 0a 	sts	0x0A03, r25	; 0x800a03 <semaphore+0x1>
     536:	80 93 02 0a 	sts	0x0A02, r24	; 0x800a02 <semaphore>
	
	//setup temperature/humidity sensor
	if(HIH8120_OK != hih8120Create()) {
     53a:	0e 94 1b 1a 	call	0x3436	; 0x3436 <hih8120Create>
     53e:	81 11       	cpse	r24, r1
     540:	2c c0       	rjmp	.+88     	; 0x59a <main+0x14a>
		printf("Failed to initialize temperature sensor\n");
		return 1;
	}
	//setup servoMotor
	rcServoCreate();
     542:	0e 94 ad 20 	call	0x415a	; 0x415a <rcServoCreate>

	//setup co2 sensor
	mh_z19_create(ser_USART3, co2Callback);
     546:	61 ef       	ldi	r22, 0xF1	; 241
     548:	72 e0       	ldi	r23, 0x02	; 2
     54a:	83 e0       	ldi	r24, 0x03	; 3
     54c:	0e 94 36 20 	call	0x406c	; 0x406c <mh_z19_create>

	//setup light sensor
	int r = tsl2591Create(lightCallback);
     550:	8f e2       	ldi	r24, 0x2F	; 47
     552:	93 e0       	ldi	r25, 0x03	; 3
     554:	0e 94 28 21 	call	0x4250	; 0x4250 <tsl2591Create>
	if(r != TSL2591_OK) {
     558:	88 23       	and	r24, r24
     55a:	61 f0       	breq	.+24     	; 0x574 <main+0x124>
		printf("Failed to initialize light sensor: %d\n", r);
     55c:	1f 92       	push	r1
     55e:	8f 93       	push	r24
     560:	80 ee       	ldi	r24, 0xE0	; 224
     562:	92 e0       	ldi	r25, 0x02	; 2
     564:	9f 93       	push	r25
     566:	8f 93       	push	r24
     568:	0e 94 49 27 	call	0x4e92	; 0x4e92 <printf>
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
	}

	r = tsl2591Enable();
     574:	0e 94 43 21 	call	0x4286	; 0x4286 <tsl2591Enable>
	if(r != TSL2591_OK) {
     578:	88 23       	and	r24, r24
     57a:	61 f0       	breq	.+24     	; 0x594 <main+0x144>
		printf("Failed to enable light sensor %d\n", r);
     57c:	1f 92       	push	r1
     57e:	8f 93       	push	r24
     580:	87 e0       	ldi	r24, 0x07	; 7
     582:	93 e0       	ldi	r25, 0x03	; 3
     584:	9f 93       	push	r25
     586:	8f 93       	push	r24
     588:	0e 94 49 27 	call	0x4e92	; 0x4e92 <printf>
     58c:	0f 90       	pop	r0
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
     592:	0f 90       	pop	r0
	}
	
	vTaskStartScheduler();
     594:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vTaskStartScheduler>
     598:	ff cf       	rjmp	.-2      	; 0x598 <main+0x148>
	
	semaphore = xSemaphoreCreateMutex();
	
	//setup temperature/humidity sensor
	if(HIH8120_OK != hih8120Create()) {
		printf("Failed to initialize temperature sensor\n");
     59a:	88 eb       	ldi	r24, 0xB8	; 184
     59c:	92 e0       	ldi	r25, 0x02	; 2
     59e:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <puts>
	vTaskStartScheduler();
	
	while(1) {
		;
	}
}
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	0f 91       	pop	r16
     5a8:	ff 90       	pop	r15
     5aa:	ef 90       	pop	r14
     5ac:	08 95       	ret

000005ae <co2SensorTask>:
#include "plantdata.h"
#include "mh_z19.h"

void co2SensorTask(void *pvParamters) {
	(void)pvParamters;
	printf("Temp sensor start!!!\n");
     5ae:	89 e2       	ldi	r24, 0x29	; 41
     5b0:	93 e0       	ldi	r25, 0x03	; 3
     5b2:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <puts>

	while(1) {
		vTaskDelay(1000);
		int r = mh_z19_take_meassuring();
		if(r != MHZ19_OK) {
			printf("CO2 sensor: %d", r);			
     5b6:	ce e3       	ldi	r28, 0x3E	; 62
     5b8:	d3 e0       	ldi	r29, 0x03	; 3
void co2SensorTask(void *pvParamters) {
	(void)pvParamters;
	printf("Temp sensor start!!!\n");

	while(1) {
		vTaskDelay(1000);
     5ba:	88 ee       	ldi	r24, 0xE8	; 232
     5bc:	93 e0       	ldi	r25, 0x03	; 3
     5be:	0e 94 0c 10 	call	0x2018	; 0x2018 <vTaskDelay>
		int r = mh_z19_take_meassuring();
     5c2:	0e 94 65 20 	call	0x40ca	; 0x40ca <mh_z19_take_meassuring>
     5c6:	90 e0       	ldi	r25, 0x00	; 0
		if(r != MHZ19_OK) {
     5c8:	00 97       	sbiw	r24, 0x00	; 0
     5ca:	b9 f3       	breq	.-18     	; 0x5ba <co2SensorTask+0xc>
			printf("CO2 sensor: %d", r);			
     5cc:	9f 93       	push	r25
     5ce:	8f 93       	push	r24
     5d0:	df 93       	push	r29
     5d2:	cf 93       	push	r28
     5d4:	0e 94 49 27 	call	0x4e92	; 0x4e92 <printf>
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0
     5e0:	ec cf       	rjmp	.-40     	; 0x5ba <co2SensorTask+0xc>

000005e2 <co2Callback>:
	}

	vTaskDelete(NULL);
}

void co2Callback(uint16_t ppm) {
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	c8 2f       	mov	r28, r24
     5e8:	d9 2f       	mov	r29, r25
	///////////////////semaphore:
	xSemaphoreTake(semaphore, portMAX_DELAY);
     5ea:	6f ef       	ldi	r22, 0xFF	; 255
     5ec:	7f ef       	ldi	r23, 0xFF	; 255
     5ee:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <semaphore>
     5f2:	90 91 03 0a 	lds	r25, 0x0A03	; 0x800a03 <semaphore+0x1>
     5f6:	fd d6       	rcall	.+3578   	; 0x13f2 <xQueueSemaphoreTake>
	plantdata.co2 = ppm;
     5f8:	e4 e0       	ldi	r30, 0x04	; 4
     5fa:	fa e0       	ldi	r31, 0x0A	; 10
     5fc:	c4 83       	std	Z+4, r28	; 0x04
     5fe:	d5 83       	std	Z+5, r29	; 0x05
	printf("CO2 level: %u\n", ppm);
     600:	df 93       	push	r29
     602:	cf 93       	push	r28
     604:	8d e4       	ldi	r24, 0x4D	; 77
     606:	93 e0       	ldi	r25, 0x03	; 3
     608:	9f 93       	push	r25
     60a:	8f 93       	push	r24
     60c:	0e 94 49 27 	call	0x4e92	; 0x4e92 <printf>
	
	xSemaphoreGive(semaphore);
     610:	20 e0       	ldi	r18, 0x00	; 0
     612:	40 e0       	ldi	r20, 0x00	; 0
     614:	50 e0       	ldi	r21, 0x00	; 0
     616:	60 e0       	ldi	r22, 0x00	; 0
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <semaphore>
     61e:	90 91 03 0a 	lds	r25, 0x0A03	; 0x800a03 <semaphore+0x1>
     622:	79 d5       	rcall	.+2802   	; 0x1116 <xQueueGenericSend>
}
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	08 95       	ret

00000632 <lightSensorTask>:

	while(1) {
		vTaskDelay(1000);	
		int r = tsl2591FetchData();
		if(r != TSL2591_OK) {
			printf("Failed to fetch light data: %d\n", r);	
     632:	cc e5       	ldi	r28, 0x5C	; 92
     634:	d3 e0       	ldi	r29, 0x03	; 3

void lightSensorTask(void* pvParameters) {
	(void)pvParameters;

	while(1) {
		vTaskDelay(1000);	
     636:	88 ee       	ldi	r24, 0xE8	; 232
     638:	93 e0       	ldi	r25, 0x03	; 3
     63a:	0e 94 0c 10 	call	0x2018	; 0x2018 <vTaskDelay>
		int r = tsl2591FetchData();
     63e:	0e 94 58 21 	call	0x42b0	; 0x42b0 <tsl2591FetchData>
     642:	90 e0       	ldi	r25, 0x00	; 0
		if(r != TSL2591_OK) {
     644:	00 97       	sbiw	r24, 0x00	; 0
     646:	b9 f3       	breq	.-18     	; 0x636 <lightSensorTask+0x4>
			printf("Failed to fetch light data: %d\n", r);	
     648:	9f 93       	push	r25
     64a:	8f 93       	push	r24
     64c:	df 93       	push	r29
     64e:	cf 93       	push	r28
     650:	0e 94 49 27 	call	0x4e92	; 0x4e92 <printf>
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0
     65c:	ec cf       	rjmp	.-40     	; 0x636 <lightSensorTask+0x4>

0000065e <lightCallback>:
	}

	vTaskDelete(NULL);
}

void lightCallback(tsl2591ReturnCode_t rc) {
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	00 d0       	rcall	.+0      	; 0x664 <lightCallback+0x6>
     664:	1f 92       	push	r1
     666:	cd b7       	in	r28, 0x3d	; 61
     668:	de b7       	in	r29, 0x3e	; 62
	float measure;
	if(rc != TSL2591_DATA_READY) {
     66a:	81 30       	cpi	r24, 0x01	; 1
     66c:	29 f0       	breq	.+10     	; 0x678 <lightCallback+0x1a>
		printf("Light sensor not ready\n");
     66e:	8c e7       	ldi	r24, 0x7C	; 124
     670:	93 e0       	ldi	r25, 0x03	; 3
     672:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <puts>
     676:	32 c0       	rjmp	.+100    	; 0x6dc <lightCallback+0x7e>
		return;
	}
	if(TSL2591_OK == tsl2591GetLux(&measure)) {
     678:	ce 01       	movw	r24, r28
     67a:	01 96       	adiw	r24, 0x01	; 1
     67c:	0e 94 6a 21 	call	0x42d4	; 0x42d4 <tsl2591GetLux>
     680:	81 11       	cpse	r24, r1
     682:	28 c0       	rjmp	.+80     	; 0x6d4 <lightCallback+0x76>
		
		///////////////////semaphore:
		xSemaphoreTake(semaphore, portMAX_DELAY);
     684:	6f ef       	ldi	r22, 0xFF	; 255
     686:	7f ef       	ldi	r23, 0xFF	; 255
     688:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <semaphore>
     68c:	90 91 03 0a 	lds	r25, 0x0A03	; 0x800a03 <semaphore+0x1>
     690:	b0 d6       	rcall	.+3424   	; 0x13f2 <xQueueSemaphoreTake>
		plantdata.light = (uint16_t) measure;
     692:	69 81       	ldd	r22, Y+1	; 0x01
     694:	7a 81       	ldd	r23, Y+2	; 0x02
     696:	8b 81       	ldd	r24, Y+3	; 0x03
     698:	9c 81       	ldd	r25, Y+4	; 0x04
     69a:	0e 94 79 15 	call	0x2af2	; 0x2af2 <__fixunssfsi>
     69e:	e4 e0       	ldi	r30, 0x04	; 4
     6a0:	fa e0       	ldi	r31, 0x0A	; 10
     6a2:	66 83       	std	Z+6, r22	; 0x06
     6a4:	77 83       	std	Z+7, r23	; 0x07
		printf("Light: %d\n", (uint16_t) measure);
     6a6:	7f 93       	push	r23
     6a8:	6f 93       	push	r22
     6aa:	83 e9       	ldi	r24, 0x93	; 147
     6ac:	93 e0       	ldi	r25, 0x03	; 3
     6ae:	9f 93       	push	r25
     6b0:	8f 93       	push	r24
     6b2:	0e 94 49 27 	call	0x4e92	; 0x4e92 <printf>
		xSemaphoreGive(semaphore);
     6b6:	20 e0       	ldi	r18, 0x00	; 0
     6b8:	40 e0       	ldi	r20, 0x00	; 0
     6ba:	50 e0       	ldi	r21, 0x00	; 0
     6bc:	60 e0       	ldi	r22, 0x00	; 0
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <semaphore>
     6c4:	90 91 03 0a 	lds	r25, 0x0A03	; 0x800a03 <semaphore+0x1>
     6c8:	26 d5       	rcall	.+2636   	; 0x1116 <xQueueGenericSend>
     6ca:	0f 90       	pop	r0
     6cc:	0f 90       	pop	r0
     6ce:	0f 90       	pop	r0
     6d0:	0f 90       	pop	r0
     6d2:	04 c0       	rjmp	.+8      	; 0x6dc <lightCallback+0x7e>
	}
	else {
		printf("Lux overflow\n");
     6d4:	8e e9       	ldi	r24, 0x9E	; 158
     6d6:	93 e0       	ldi	r25, 0x03	; 3
     6d8:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <puts>
	}
	
}
     6dc:	0f 90       	pop	r0
     6de:	0f 90       	pop	r0
     6e0:	0f 90       	pop	r0
     6e2:	0f 90       	pop	r0
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	08 95       	ret

000006ea <_loRa_setup>:
#define LORA_appEUI "c53e8f9f10801fc4"
#define LORA_appKEY "018cc25f724a8517cbfd763dc1126614"

char _out_buff[100];

void _loRa_setup(void){
     6ea:	ef 92       	push	r14
     6ec:	ff 92       	push	r15
     6ee:	1f 93       	push	r17
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
	
	e_LoRa_return_code_t rc;
	
	
	//For factory reset.
	printf("FactoryRest >%s<\n",
     6f4:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <lora_driver_rn2483_factory_reset>
     6f8:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <lora_driver_map_return_code_to_text>
     6fc:	9f 93       	push	r25
     6fe:	8f 93       	push	r24
     700:	8b ea       	ldi	r24, 0xAB	; 171
     702:	93 e0       	ldi	r25, 0x03	; 3
     704:	9f 93       	push	r25
     706:	8f 93       	push	r24
     708:	0e 94 49 27 	call	0x4e92	; 0x4e92 <printf>
	lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
	
	//Configure to EU868 LoRaWAN standards.
	printf("Configure to EU868 >%s<\n",
     70c:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <lora_driver_configure_to_eu868>
     710:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <lora_driver_map_return_code_to_text>
     714:	9f 93       	push	r25
     716:	8f 93       	push	r24
     718:	8d eb       	ldi	r24, 0xBD	; 189
     71a:	93 e0       	ldi	r25, 0x03	; 3
     71c:	9f 93       	push	r25
     71e:	8f 93       	push	r24
     720:	0e 94 49 27 	call	0x4e92	; 0x4e92 <printf>
	lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
	
	//Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buff);
     724:	80 e1       	ldi	r24, 0x10	; 16
     726:	9a e0       	ldi	r25, 0x0A	; 10
     728:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI: %s >%s< \n", lora_driver_map_return_code_to_text(rc), _out_buff );
     72c:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <lora_driver_map_return_code_to_text>
     730:	c0 e1       	ldi	r28, 0x10	; 16
     732:	da e0       	ldi	r29, 0x0A	; 10
     734:	df 93       	push	r29
     736:	cf 93       	push	r28
     738:	9f 93       	push	r25
     73a:	8f 93       	push	r24
     73c:	86 ed       	ldi	r24, 0xD6	; 214
     73e:	93 e0       	ldi	r25, 0x03	; 3
     740:	9f 93       	push	r25
     742:	8f 93       	push	r24
     744:	0e 94 49 27 	call	0x4e92	; 0x4e92 <printf>
	
	
	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buff, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buff)));
     748:	ce 01       	movw	r24, r28
     74a:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <lora_driver_set_device_identifier>
     74e:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <lora_driver_map_return_code_to_text>
     752:	9f 93       	push	r25
     754:	8f 93       	push	r24
     756:	df 93       	push	r29
     758:	cf 93       	push	r28
     75a:	8b ee       	ldi	r24, 0xEB	; 235
     75c:	93 e0       	ldi	r25, 0x03	; 3
     75e:	9f 93       	push	r25
     760:	8f 93       	push	r24
     762:	0e 94 49 27 	call	0x4e92	; 0x4e92 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buff, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buff)));
     766:	ae 01       	movw	r20, r28
     768:	60 e0       	ldi	r22, 0x00	; 0
     76a:	74 e0       	ldi	r23, 0x04	; 4
     76c:	81 e2       	ldi	r24, 0x21	; 33
     76e:	94 e0       	ldi	r25, 0x04	; 4
     770:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <lora_driver_set_otaa_identity>
     774:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <lora_driver_map_return_code_to_text>
     778:	9f 93       	push	r25
     77a:	8f 93       	push	r24
     77c:	df 93       	push	r29
     77e:	cf 93       	push	r28
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	94 e0       	ldi	r25, 0x04	; 4
     784:	9f 93       	push	r25
     786:	8f 93       	push	r24
     788:	81 e2       	ldi	r24, 0x21	; 33
     78a:	94 e0       	ldi	r25, 0x04	; 4
     78c:	9f 93       	push	r25
     78e:	8f 93       	push	r24
     790:	82 e3       	ldi	r24, 0x32	; 50
     792:	94 e0       	ldi	r25, 0x04	; 4
     794:	9f 93       	push	r25
     796:	8f 93       	push	r24
     798:	0e 94 49 27 	call	0x4e92	; 0x4e92 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
     79c:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <lora_driver_save_mac>
     7a0:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <lora_driver_map_return_code_to_text>
     7a4:	9f 93       	push	r25
     7a6:	8f 93       	push	r24
     7a8:	88 e6       	ldi	r24, 0x68	; 104
     7aa:	94 e0       	ldi	r25, 0x04	; 4
     7ac:	9f 93       	push	r25
     7ae:	8f 93       	push	r24
     7b0:	0e 94 49 27 	call	0x4e92	; 0x4e92 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
     7b4:	8d b7       	in	r24, 0x3d	; 61
     7b6:	9e b7       	in	r25, 0x3e	; 62
     7b8:	82 96       	adiw	r24, 0x22	; 34
     7ba:	0f b6       	in	r0, 0x3f	; 63
     7bc:	f8 94       	cli
     7be:	9e bf       	out	0x3e, r25	; 62
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	8d bf       	out	0x3d, r24	; 61
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <lora_driver_set_adaptive_data_rate>
     7ca:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <lora_driver_map_return_code_to_text>
     7ce:	9f 93       	push	r25
     7d0:	8f 93       	push	r24
     7d2:	87 e7       	ldi	r24, 0x77	; 119
     7d4:	94 e0       	ldi	r25, 0x04	; 4
     7d6:	9f 93       	push	r25
     7d8:	8f 93       	push	r24
     7da:	0e 94 49 27 	call	0x4e92	; 0x4e92 <printf>
     7de:	0f 90       	pop	r0
     7e0:	0f 90       	pop	r0
     7e2:	0f 90       	pop	r0
     7e4:	0f 90       	pop	r0
     7e6:	c5 e0       	ldi	r28, 0x05	; 5
     7e8:	d0 e0       	ldi	r29, 0x00	; 0

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 5;
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     7ea:	0f 2e       	mov	r0, r31
     7ec:	f8 e9       	ldi	r31, 0x98	; 152
     7ee:	ef 2e       	mov	r14, r31
     7f0:	f4 e0       	ldi	r31, 0x04	; 4
     7f2:	ff 2e       	mov	r15, r31
     7f4:	f0 2d       	mov	r31, r0
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 5;
	do {
		rc = lora_driver_join(LoRa_OTAA);
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <lora_driver_join>
     7fc:	18 2f       	mov	r17, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     7fe:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <lora_driver_map_return_code_to_text>
     802:	9f 93       	push	r25
     804:	8f 93       	push	r24
     806:	df 93       	push	r29
     808:	cf 93       	push	r28
     80a:	ff 92       	push	r15
     80c:	ef 92       	push	r14
     80e:	0e 94 49 27 	call	0x4e92	; 0x4e92 <printf>
		if ( rc == LoRa_ACCEPTED){
     812:	0f 90       	pop	r0
     814:	0f 90       	pop	r0
     816:	0f 90       	pop	r0
     818:	0f 90       	pop	r0
     81a:	0f 90       	pop	r0
     81c:	0f 90       	pop	r0
     81e:	18 30       	cpi	r17, 0x08	; 8
     820:	11 f0       	breq	.+4      	; 0x826 <_loRa_setup+0x13c>
     822:	21 97       	sbiw	r28, 0x01	; 1
			break;
		}

	} while (--maxJoinTriesLeft);
     824:	41 f7       	brne	.-48     	; 0x7f6 <_loRa_setup+0x10c>

}
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	1f 91       	pop	r17
     82c:	ff 90       	pop	r15
     82e:	ef 90       	pop	r14
     830:	08 95       	ret

00000832 <loRaWanTask>:

void loRaWanTask(void* pvParamters){
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
     836:	cd b7       	in	r28, 0x3d	; 61
     838:	de b7       	in	r29, 0x3e	; 62
     83a:	66 97       	sbiw	r28, 0x16	; 22
     83c:	0f b6       	in	r0, 0x3f	; 63
     83e:	f8 94       	cli
     840:	de bf       	out	0x3e, r29	; 62
     842:	0f be       	out	0x3f, r0	; 63
     844:	cd bf       	out	0x3d, r28	; 61
	(void)pvParamters;

	//for resetting the LoRaWAN hardware.
	lora_driver_reset_rn2483(1);
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	0e 94 cd 1c 	call	0x399a	; 0x399a <lora_driver_reset_rn2483>
	vTaskDelay(150);
     84c:	86 e9       	ldi	r24, 0x96	; 150
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	0e 94 0c 10 	call	0x2018	; 0x2018 <vTaskDelay>
	lora_driver_reset_rn2483(0);
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	0e 94 cd 1c 	call	0x399a	; 0x399a <lora_driver_reset_rn2483>
	vTaskDelay(150);
     85a:	86 e9       	ldi	r24, 0x96	; 150
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	0e 94 0c 10 	call	0x2018	; 0x2018 <vTaskDelay>
	lora_driver_flush_buffers();
     862:	0e 94 8a 1c 	call	0x3914	; 0x3914 <lora_driver_flush_buffers>
	
	_loRa_setup();
     866:	41 df       	rcall	.-382    	; 0x6ea <_loRa_setup>
	vTaskDelay(200);
     868:	88 ec       	ldi	r24, 0xC8	; 200
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	0e 94 0c 10 	call	0x2018	; 0x2018 <vTaskDelay>
	
	lora_payload_t _uplink_payload;
	
	_uplink_payload.len = 7;
     870:	87 e0       	ldi	r24, 0x07	; 7
     872:	8a 83       	std	Y+2, r24	; 0x02
	_uplink_payload.port_no = 2;
     874:	82 e0       	ldi	r24, 0x02	; 2
     876:	89 83       	std	Y+1, r24	; 0x01
	
	while(1){
		
		///////////////////semaphore:
		xSemaphoreTake(semaphore, portMAX_DELAY);
		_uplink_payload.bytes[0] = plantdata.humidity;
     878:	04 e0       	ldi	r16, 0x04	; 4
     87a:	1a e0       	ldi	r17, 0x0A	; 10
		_uplink_payload.bytes[3] = plantdata.co2 & 0xFF;
		_uplink_payload.bytes[4] = plantdata.light >> 8;
		_uplink_payload.bytes[5] = plantdata.light& 0xFF;
		_uplink_payload.bytes[6] = plantdata.water;
		
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
     87c:	0f 2e       	mov	r0, r31
     87e:	f8 eb       	ldi	r31, 0xB8	; 184
     880:	ef 2e       	mov	r14, r31
     882:	f4 e0       	ldi	r31, 0x04	; 4
     884:	ff 2e       	mov	r15, r31
     886:	f0 2d       	mov	r31, r0
	
	
	while(1){
		
		///////////////////semaphore:
		xSemaphoreTake(semaphore, portMAX_DELAY);
     888:	6f ef       	ldi	r22, 0xFF	; 255
     88a:	7f ef       	ldi	r23, 0xFF	; 255
     88c:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <semaphore>
     890:	90 91 03 0a 	lds	r25, 0x0A03	; 0x800a03 <semaphore+0x1>
     894:	ae d5       	rcall	.+2908   	; 0x13f2 <xQueueSemaphoreTake>
		_uplink_payload.bytes[0] = plantdata.humidity;
     896:	f8 01       	movw	r30, r16
     898:	82 81       	ldd	r24, Z+2	; 0x02
     89a:	8b 83       	std	Y+3, r24	; 0x03
		_uplink_payload.bytes[1] = plantdata.temperature;
     89c:	80 81       	ld	r24, Z
     89e:	8c 83       	std	Y+4, r24	; 0x04
		_uplink_payload.bytes[2] = plantdata.co2 >> 8;
     8a0:	84 81       	ldd	r24, Z+4	; 0x04
     8a2:	95 81       	ldd	r25, Z+5	; 0x05
     8a4:	9d 83       	std	Y+5, r25	; 0x05
		_uplink_payload.bytes[3] = plantdata.co2 & 0xFF;
     8a6:	8e 83       	std	Y+6, r24	; 0x06
		_uplink_payload.bytes[4] = plantdata.light >> 8;
     8a8:	86 81       	ldd	r24, Z+6	; 0x06
     8aa:	97 81       	ldd	r25, Z+7	; 0x07
     8ac:	9f 83       	std	Y+7, r25	; 0x07
		_uplink_payload.bytes[5] = plantdata.light& 0xFF;
     8ae:	88 87       	std	Y+8, r24	; 0x08
		_uplink_payload.bytes[6] = plantdata.water;
     8b0:	80 85       	ldd	r24, Z+8	; 0x08
     8b2:	89 87       	std	Y+9, r24	; 0x09
		
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
     8b4:	be 01       	movw	r22, r28
     8b6:	6f 5f       	subi	r22, 0xFF	; 255
     8b8:	7f 4f       	sbci	r23, 0xFF	; 255
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <lora_driver_sent_upload_message>
     8c0:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <lora_driver_map_return_code_to_text>
     8c4:	9f 93       	push	r25
     8c6:	8f 93       	push	r24
     8c8:	ff 92       	push	r15
     8ca:	ef 92       	push	r14
     8cc:	0e 94 49 27 	call	0x4e92	; 0x4e92 <printf>
		xSemaphoreGive(semaphore);
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	40 e0       	ldi	r20, 0x00	; 0
     8d4:	50 e0       	ldi	r21, 0x00	; 0
     8d6:	60 e0       	ldi	r22, 0x00	; 0
     8d8:	70 e0       	ldi	r23, 0x00	; 0
     8da:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <semaphore>
     8de:	90 91 03 0a 	lds	r25, 0x0A03	; 0x800a03 <semaphore+0x1>
     8e2:	19 d4       	rcall	.+2098   	; 0x1116 <xQueueGenericSend>
		vTaskDelay(1000);
     8e4:	88 ee       	ldi	r24, 0xE8	; 232
     8e6:	93 e0       	ldi	r25, 0x03	; 3
     8e8:	0e 94 0c 10 	call	0x2018	; 0x2018 <vTaskDelay>
     8ec:	0f 90       	pop	r0
     8ee:	0f 90       	pop	r0
     8f0:	0f 90       	pop	r0
     8f2:	0f 90       	pop	r0
     8f4:	c9 cf       	rjmp	.-110    	; 0x888 <loRaWanTask+0x56>

000008f6 <servoMotorTask>:
	
	while(1){
		vTaskDelay(1000);
			rcServoSet(0,100);
			lastWateringTime = xTaskGetTickCount();
			plantdata.water = xTaskGetTickCount();
     8f6:	c4 e0       	ldi	r28, 0x04	; 4
     8f8:	da e0       	ldi	r29, 0x0A	; 10
void servoMotorTask(void* pvParamters){
	(void)pvParamters;
	TickType_t waterInterval = (lastWateringTime + 1000);
	
	while(1){
		vTaskDelay(1000);
     8fa:	88 ee       	ldi	r24, 0xE8	; 232
     8fc:	93 e0       	ldi	r25, 0x03	; 3
     8fe:	0e 94 0c 10 	call	0x2018	; 0x2018 <vTaskDelay>
			rcServoSet(0,100);
     902:	64 e6       	ldi	r22, 0x64	; 100
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	0e 94 95 20 	call	0x412a	; 0x412a <rcServoSet>
			lastWateringTime = xTaskGetTickCount();
     90a:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <xTaskGetTickCount>
     90e:	90 93 0f 0a 	sts	0x0A0F, r25	; 0x800a0f <lastWateringTime+0x1>
     912:	80 93 0e 0a 	sts	0x0A0E, r24	; 0x800a0e <lastWateringTime>
			plantdata.water = xTaskGetTickCount();
     916:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <xTaskGetTickCount>
     91a:	99 87       	std	Y+9, r25	; 0x09
     91c:	88 87       	std	Y+8, r24	; 0x08
			printf("Plant has been watered!!!!\n");
     91e:	8d ec       	ldi	r24, 0xCD	; 205
     920:	94 e0       	ldi	r25, 0x04	; 4
     922:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <puts>
     926:	e9 cf       	rjmp	.-46     	; 0x8fa <servoMotorTask+0x4>

00000928 <tempSensorTask>:
#include "hih8120.h"
#include "plantdata.h"

void tempSensorTask(void* pvParameters) {
	(void)pvParameters;
	printf("Temp sensor start!!!\n");
     928:	89 e2       	ldi	r24, 0x29	; 41
     92a:	93 e0       	ldi	r25, 0x03	; 3
     92c:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <puts>
	printf("tick %d", configTICK_RATE_HZ);
     930:	1f 92       	push	r1
     932:	8e e3       	ldi	r24, 0x3E	; 62
     934:	8f 93       	push	r24
     936:	88 ee       	ldi	r24, 0xE8	; 232
     938:	94 e0       	ldi	r25, 0x04	; 4
     93a:	9f 93       	push	r25
     93c:	8f 93       	push	r24
     93e:	0e 94 49 27 	call	0x4e92	; 0x4e92 <printf>
     942:	0f 90       	pop	r0
     944:	0f 90       	pop	r0
     946:	0f 90       	pop	r0
     948:	0f 90       	pop	r0
	while(1) {
		vTaskDelay(1000);
		
		int r = hih8120Wakeup();
		if(r != HIH8120_OK && r != HIH8120_TWI_BUSY) {
			printf("temp-wake error: %d\n", r);
     94a:	0f 2e       	mov	r0, r31
     94c:	f0 ef       	ldi	r31, 0xF0	; 240
     94e:	cf 2e       	mov	r12, r31
     950:	f4 e0       	ldi	r31, 0x04	; 4
     952:	df 2e       	mov	r13, r31
     954:	f0 2d       	mov	r31, r0
		}
		
		vTaskDelay(100);
		r = hih8120Meassure();
		if(r != HIH8120_OK && r != HIH8120_TWI_BUSY) {
			printf("Temp-read error: %d\n", r);
     956:	0f 2e       	mov	r0, r31
     958:	f5 e0       	ldi	r31, 0x05	; 5
     95a:	ef 2e       	mov	r14, r31
     95c:	f5 e0       	ldi	r31, 0x05	; 5
     95e:	ff 2e       	mov	r15, r31
     960:	f0 2d       	mov	r31, r0
		}
		vTaskDelay(100);
		///////////////////semaphore:
		xSemaphoreTake(semaphore, portMAX_DELAY);
		plantdata.humidity = hih8120GetHumidity();
     962:	c4 e0       	ldi	r28, 0x04	; 4
     964:	da e0       	ldi	r29, 0x0A	; 10
		plantdata.temperature = hih8120GetTemperature();
		printf("Hum: %d  Temp: %d\n", plantdata.humidity, plantdata.temperature);
     966:	0a e1       	ldi	r16, 0x1A	; 26
     968:	15 e0       	ldi	r17, 0x05	; 5
	printf("Temp sensor start!!!\n");
	printf("tick %d", configTICK_RATE_HZ);
	
	//Do temperature measurement
	while(1) {
		vTaskDelay(1000);
     96a:	88 ee       	ldi	r24, 0xE8	; 232
     96c:	93 e0       	ldi	r25, 0x03	; 3
     96e:	0e 94 0c 10 	call	0x2018	; 0x2018 <vTaskDelay>
		
		int r = hih8120Wakeup();
     972:	0e 94 33 1a 	call	0x3466	; 0x3466 <hih8120Wakeup>
     976:	28 2f       	mov	r18, r24
     978:	30 e0       	ldi	r19, 0x00	; 0
		if(r != HIH8120_OK && r != HIH8120_TWI_BUSY) {
     97a:	21 15       	cp	r18, r1
     97c:	31 05       	cpc	r19, r1
     97e:	69 f0       	breq	.+26     	; 0x99a <tempSensorTask+0x72>
     980:	23 30       	cpi	r18, 0x03	; 3
     982:	31 05       	cpc	r19, r1
     984:	51 f0       	breq	.+20     	; 0x99a <tempSensorTask+0x72>
			printf("temp-wake error: %d\n", r);
     986:	1f 92       	push	r1
     988:	8f 93       	push	r24
     98a:	df 92       	push	r13
     98c:	cf 92       	push	r12
     98e:	0e 94 49 27 	call	0x4e92	; 0x4e92 <printf>
     992:	0f 90       	pop	r0
     994:	0f 90       	pop	r0
     996:	0f 90       	pop	r0
     998:	0f 90       	pop	r0
		}
		
		vTaskDelay(100);
     99a:	84 e6       	ldi	r24, 0x64	; 100
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	0e 94 0c 10 	call	0x2018	; 0x2018 <vTaskDelay>
		r = hih8120Meassure();
     9a2:	0e 94 48 1a 	call	0x3490	; 0x3490 <hih8120Meassure>
     9a6:	28 2f       	mov	r18, r24
     9a8:	30 e0       	ldi	r19, 0x00	; 0
		if(r != HIH8120_OK && r != HIH8120_TWI_BUSY) {
     9aa:	21 15       	cp	r18, r1
     9ac:	31 05       	cpc	r19, r1
     9ae:	69 f0       	breq	.+26     	; 0x9ca <tempSensorTask+0xa2>
     9b0:	23 30       	cpi	r18, 0x03	; 3
     9b2:	31 05       	cpc	r19, r1
     9b4:	51 f0       	breq	.+20     	; 0x9ca <tempSensorTask+0xa2>
			printf("Temp-read error: %d\n", r);
     9b6:	1f 92       	push	r1
     9b8:	8f 93       	push	r24
     9ba:	ff 92       	push	r15
     9bc:	ef 92       	push	r14
     9be:	0e 94 49 27 	call	0x4e92	; 0x4e92 <printf>
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
     9c6:	0f 90       	pop	r0
     9c8:	0f 90       	pop	r0
		}
		vTaskDelay(100);
     9ca:	84 e6       	ldi	r24, 0x64	; 100
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	0e 94 0c 10 	call	0x2018	; 0x2018 <vTaskDelay>
		///////////////////semaphore:
		xSemaphoreTake(semaphore, portMAX_DELAY);
     9d2:	6f ef       	ldi	r22, 0xFF	; 255
     9d4:	7f ef       	ldi	r23, 0xFF	; 255
     9d6:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <semaphore>
     9da:	90 91 03 0a 	lds	r25, 0x0A03	; 0x800a03 <semaphore+0x1>
     9de:	09 d5       	rcall	.+2578   	; 0x13f2 <xQueueSemaphoreTake>
		plantdata.humidity = hih8120GetHumidity();
     9e0:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <hih8120GetHumidity>
     9e4:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <__fixsfsi>
     9e8:	7b 83       	std	Y+3, r23	; 0x03
     9ea:	6a 83       	std	Y+2, r22	; 0x02
		plantdata.temperature = hih8120GetTemperature();
     9ec:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <hih8120GetTemperature>
     9f0:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <__fixsfsi>
     9f4:	68 83       	st	Y, r22
     9f6:	79 83       	std	Y+1, r23	; 0x01
		printf("Hum: %d  Temp: %d\n", plantdata.humidity, plantdata.temperature);
     9f8:	7f 93       	push	r23
     9fa:	6f 93       	push	r22
     9fc:	8b 81       	ldd	r24, Y+3	; 0x03
     9fe:	8f 93       	push	r24
     a00:	8a 81       	ldd	r24, Y+2	; 0x02
     a02:	8f 93       	push	r24
     a04:	1f 93       	push	r17
     a06:	0f 93       	push	r16
     a08:	0e 94 49 27 	call	0x4e92	; 0x4e92 <printf>
		
		xSemaphoreGive(semaphore);
     a0c:	20 e0       	ldi	r18, 0x00	; 0
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	50 e0       	ldi	r21, 0x00	; 0
     a12:	60 e0       	ldi	r22, 0x00	; 0
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <semaphore>
     a1a:	90 91 03 0a 	lds	r25, 0x0A03	; 0x800a03 <semaphore+0x1>
     a1e:	7b d3       	rcall	.+1782   	; 0x1116 <xQueueGenericSend>

	}
     a20:	0f 90       	pop	r0
     a22:	0f 90       	pop	r0
     a24:	0f 90       	pop	r0
     a26:	0f 90       	pop	r0
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
     a2c:	9e cf       	rjmp	.-196    	; 0x96a <tempSensorTask+0x42>

00000a2e <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     a2e:	e8 e0       	ldi	r30, 0x08	; 8
     a30:	f1 e0       	ldi	r31, 0x01	; 1
     a32:	90 81       	ld	r25, Z
     a34:	90 7f       	andi	r25, 0xF0	; 240
     a36:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     a38:	90 81       	ld	r25, Z
     a3a:	8f 70       	andi	r24, 0x0F	; 15
     a3c:	98 2b       	or	r25, r24
     a3e:	90 83       	st	Z, r25
     a40:	08 95       	ret

00000a42 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     a42:	e8 e0       	ldi	r30, 0x08	; 8
     a44:	f1 e0       	ldi	r31, 0x01	; 1
     a46:	80 81       	ld	r24, Z
     a48:	80 7f       	andi	r24, 0xF0	; 240
     a4a:	80 83       	st	Z, r24
     a4c:	08 95       	ret

00000a4e <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
     a54:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     a58:	ce 01       	movw	r24, r28
     a5a:	0e 94 ea 25 	call	0x4bd4	; 0x4bd4 <malloc>
     a5e:	ec 01       	movw	r28, r24
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     a60:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
     a64:	20 97       	sbiw	r28, 0x00	; 0
     a66:	11 f4       	brne	.+4      	; 0xa6c <pvPortMalloc+0x1e>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
     a68:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
     a6c:	ce 01       	movw	r24, r28
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	08 95       	ret

00000a74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
    if( pv )
     a78:	00 97       	sbiw	r24, 0x00	; 0
     a7a:	41 f0       	breq	.+16     	; 0xa8c <vPortFree+0x18>
     a7c:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
     a7e:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <vTaskSuspendAll>
        {
            free( pv );
     a82:	ce 01       	movw	r24, r28
     a84:	0e 94 82 26 	call	0x4d04	; 0x4d04 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
     a88:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <xTaskResumeAll>
    }
}
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	08 95       	ret

00000a92 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     a92:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a94:	03 96       	adiw	r24, 0x03	; 3
     a96:	92 83       	std	Z+2, r25	; 0x02
     a98:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     a9a:	2f ef       	ldi	r18, 0xFF	; 255
     a9c:	3f ef       	ldi	r19, 0xFF	; 255
     a9e:	34 83       	std	Z+4, r19	; 0x04
     aa0:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     aa2:	96 83       	std	Z+6, r25	; 0x06
     aa4:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     aa6:	90 87       	std	Z+8, r25	; 0x08
     aa8:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     aaa:	10 82       	st	Z, r1
     aac:	08 95       	ret

00000aae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     aae:	fc 01       	movw	r30, r24
     ab0:	11 86       	std	Z+9, r1	; 0x09
     ab2:	10 86       	std	Z+8, r1	; 0x08
     ab4:	08 95       	ret

00000ab6 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	9c 01       	movw	r18, r24
     abc:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     abe:	dc 01       	movw	r26, r24
     ac0:	11 96       	adiw	r26, 0x01	; 1
     ac2:	cd 91       	ld	r28, X+
     ac4:	dc 91       	ld	r29, X
     ac6:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     ac8:	d3 83       	std	Z+3, r29	; 0x03
     aca:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     acc:	8c 81       	ldd	r24, Y+4	; 0x04
     ace:	9d 81       	ldd	r25, Y+5	; 0x05
     ad0:	95 83       	std	Z+5, r25	; 0x05
     ad2:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     ad4:	8c 81       	ldd	r24, Y+4	; 0x04
     ad6:	9d 81       	ldd	r25, Y+5	; 0x05
     ad8:	dc 01       	movw	r26, r24
     ada:	13 96       	adiw	r26, 0x03	; 3
     adc:	7c 93       	st	X, r23
     ade:	6e 93       	st	-X, r22
     ae0:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     ae2:	7d 83       	std	Y+5, r23	; 0x05
     ae4:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     ae6:	31 87       	std	Z+9, r19	; 0x09
     ae8:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     aea:	f9 01       	movw	r30, r18
     aec:	80 81       	ld	r24, Z
     aee:	8f 5f       	subi	r24, 0xFF	; 255
     af0:	80 83       	st	Z, r24
}
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	08 95       	ret

00000af8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     afe:	48 81       	ld	r20, Y
     b00:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     b02:	4f 3f       	cpi	r20, 0xFF	; 255
     b04:	2f ef       	ldi	r18, 0xFF	; 255
     b06:	52 07       	cpc	r21, r18
     b08:	21 f4       	brne	.+8      	; 0xb12 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     b0a:	fc 01       	movw	r30, r24
     b0c:	a7 81       	ldd	r26, Z+7	; 0x07
     b0e:	b0 85       	ldd	r27, Z+8	; 0x08
     b10:	0d c0       	rjmp	.+26     	; 0xb2c <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     b12:	dc 01       	movw	r26, r24
     b14:	13 96       	adiw	r26, 0x03	; 3
     b16:	01 c0       	rjmp	.+2      	; 0xb1a <vListInsert+0x22>
     b18:	df 01       	movw	r26, r30
     b1a:	12 96       	adiw	r26, 0x02	; 2
     b1c:	ed 91       	ld	r30, X+
     b1e:	fc 91       	ld	r31, X
     b20:	13 97       	sbiw	r26, 0x03	; 3
     b22:	20 81       	ld	r18, Z
     b24:	31 81       	ldd	r19, Z+1	; 0x01
     b26:	42 17       	cp	r20, r18
     b28:	53 07       	cpc	r21, r19
     b2a:	b0 f7       	brcc	.-20     	; 0xb18 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     b2c:	12 96       	adiw	r26, 0x02	; 2
     b2e:	ed 91       	ld	r30, X+
     b30:	fc 91       	ld	r31, X
     b32:	13 97       	sbiw	r26, 0x03	; 3
     b34:	fb 83       	std	Y+3, r31	; 0x03
     b36:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     b38:	d5 83       	std	Z+5, r29	; 0x05
     b3a:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     b3c:	bd 83       	std	Y+5, r27	; 0x05
     b3e:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     b40:	13 96       	adiw	r26, 0x03	; 3
     b42:	dc 93       	st	X, r29
     b44:	ce 93       	st	-X, r28
     b46:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     b48:	99 87       	std	Y+9, r25	; 0x09
     b4a:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     b4c:	fc 01       	movw	r30, r24
     b4e:	20 81       	ld	r18, Z
     b50:	2f 5f       	subi	r18, 0xFF	; 255
     b52:	20 83       	st	Z, r18
}
     b54:	df 91       	pop	r29
     b56:	cf 91       	pop	r28
     b58:	08 95       	ret

00000b5a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
     b5e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     b60:	a0 85       	ldd	r26, Z+8	; 0x08
     b62:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     b64:	c2 81       	ldd	r28, Z+2	; 0x02
     b66:	d3 81       	ldd	r29, Z+3	; 0x03
     b68:	84 81       	ldd	r24, Z+4	; 0x04
     b6a:	95 81       	ldd	r25, Z+5	; 0x05
     b6c:	9d 83       	std	Y+5, r25	; 0x05
     b6e:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     b70:	c4 81       	ldd	r28, Z+4	; 0x04
     b72:	d5 81       	ldd	r29, Z+5	; 0x05
     b74:	82 81       	ldd	r24, Z+2	; 0x02
     b76:	93 81       	ldd	r25, Z+3	; 0x03
     b78:	9b 83       	std	Y+3, r25	; 0x03
     b7a:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     b7c:	11 96       	adiw	r26, 0x01	; 1
     b7e:	8d 91       	ld	r24, X+
     b80:	9c 91       	ld	r25, X
     b82:	12 97       	sbiw	r26, 0x02	; 2
     b84:	e8 17       	cp	r30, r24
     b86:	f9 07       	cpc	r31, r25
     b88:	31 f4       	brne	.+12     	; 0xb96 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     b8a:	84 81       	ldd	r24, Z+4	; 0x04
     b8c:	95 81       	ldd	r25, Z+5	; 0x05
     b8e:	12 96       	adiw	r26, 0x02	; 2
     b90:	9c 93       	st	X, r25
     b92:	8e 93       	st	-X, r24
     b94:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     b96:	11 86       	std	Z+9, r1	; 0x09
     b98:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     b9a:	8c 91       	ld	r24, X
     b9c:	81 50       	subi	r24, 0x01	; 1
     b9e:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     ba0:	8c 91       	ld	r24, X
}
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	08 95       	ret

00000ba8 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     ba8:	31 e1       	ldi	r19, 0x11	; 17
     baa:	fc 01       	movw	r30, r24
     bac:	30 83       	st	Z, r19
     bae:	31 97       	sbiw	r30, 0x01	; 1
     bb0:	22 e2       	ldi	r18, 0x22	; 34
     bb2:	20 83       	st	Z, r18
     bb4:	31 97       	sbiw	r30, 0x01	; 1
     bb6:	a3 e3       	ldi	r26, 0x33	; 51
     bb8:	a0 83       	st	Z, r26
     bba:	31 97       	sbiw	r30, 0x01	; 1
     bbc:	60 83       	st	Z, r22
     bbe:	31 97       	sbiw	r30, 0x01	; 1
     bc0:	70 83       	st	Z, r23
     bc2:	31 97       	sbiw	r30, 0x01	; 1
     bc4:	10 82       	st	Z, r1
     bc6:	31 97       	sbiw	r30, 0x01	; 1
     bc8:	10 82       	st	Z, r1
     bca:	31 97       	sbiw	r30, 0x01	; 1
     bcc:	60 e8       	ldi	r22, 0x80	; 128
     bce:	60 83       	st	Z, r22
     bd0:	31 97       	sbiw	r30, 0x01	; 1
     bd2:	10 82       	st	Z, r1
     bd4:	31 97       	sbiw	r30, 0x01	; 1
     bd6:	10 82       	st	Z, r1
     bd8:	31 97       	sbiw	r30, 0x01	; 1
     bda:	10 82       	st	Z, r1
     bdc:	31 97       	sbiw	r30, 0x01	; 1
     bde:	62 e0       	ldi	r22, 0x02	; 2
     be0:	60 83       	st	Z, r22
     be2:	31 97       	sbiw	r30, 0x01	; 1
     be4:	63 e0       	ldi	r22, 0x03	; 3
     be6:	60 83       	st	Z, r22
     be8:	31 97       	sbiw	r30, 0x01	; 1
     bea:	64 e0       	ldi	r22, 0x04	; 4
     bec:	60 83       	st	Z, r22
     bee:	31 97       	sbiw	r30, 0x01	; 1
     bf0:	65 e0       	ldi	r22, 0x05	; 5
     bf2:	60 83       	st	Z, r22
     bf4:	31 97       	sbiw	r30, 0x01	; 1
     bf6:	66 e0       	ldi	r22, 0x06	; 6
     bf8:	60 83       	st	Z, r22
     bfa:	31 97       	sbiw	r30, 0x01	; 1
     bfc:	67 e0       	ldi	r22, 0x07	; 7
     bfe:	60 83       	st	Z, r22
     c00:	31 97       	sbiw	r30, 0x01	; 1
     c02:	68 e0       	ldi	r22, 0x08	; 8
     c04:	60 83       	st	Z, r22
     c06:	31 97       	sbiw	r30, 0x01	; 1
     c08:	69 e0       	ldi	r22, 0x09	; 9
     c0a:	60 83       	st	Z, r22
     c0c:	31 97       	sbiw	r30, 0x01	; 1
     c0e:	60 e1       	ldi	r22, 0x10	; 16
     c10:	60 83       	st	Z, r22
     c12:	31 97       	sbiw	r30, 0x01	; 1
     c14:	30 83       	st	Z, r19
     c16:	31 97       	sbiw	r30, 0x01	; 1
     c18:	32 e1       	ldi	r19, 0x12	; 18
     c1a:	30 83       	st	Z, r19
     c1c:	31 97       	sbiw	r30, 0x01	; 1
     c1e:	33 e1       	ldi	r19, 0x13	; 19
     c20:	30 83       	st	Z, r19
     c22:	31 97       	sbiw	r30, 0x01	; 1
     c24:	34 e1       	ldi	r19, 0x14	; 20
     c26:	30 83       	st	Z, r19
     c28:	31 97       	sbiw	r30, 0x01	; 1
     c2a:	35 e1       	ldi	r19, 0x15	; 21
     c2c:	30 83       	st	Z, r19
     c2e:	31 97       	sbiw	r30, 0x01	; 1
     c30:	36 e1       	ldi	r19, 0x16	; 22
     c32:	30 83       	st	Z, r19
     c34:	31 97       	sbiw	r30, 0x01	; 1
     c36:	37 e1       	ldi	r19, 0x17	; 23
     c38:	30 83       	st	Z, r19
     c3a:	31 97       	sbiw	r30, 0x01	; 1
     c3c:	38 e1       	ldi	r19, 0x18	; 24
     c3e:	30 83       	st	Z, r19
     c40:	31 97       	sbiw	r30, 0x01	; 1
     c42:	39 e1       	ldi	r19, 0x19	; 25
     c44:	30 83       	st	Z, r19
     c46:	31 97       	sbiw	r30, 0x01	; 1
     c48:	30 e2       	ldi	r19, 0x20	; 32
     c4a:	30 83       	st	Z, r19
     c4c:	31 97       	sbiw	r30, 0x01	; 1
     c4e:	31 e2       	ldi	r19, 0x21	; 33
     c50:	30 83       	st	Z, r19
     c52:	31 97       	sbiw	r30, 0x01	; 1
     c54:	20 83       	st	Z, r18
     c56:	31 97       	sbiw	r30, 0x01	; 1
     c58:	23 e2       	ldi	r18, 0x23	; 35
     c5a:	20 83       	st	Z, r18
     c5c:	31 97       	sbiw	r30, 0x01	; 1
     c5e:	40 83       	st	Z, r20
     c60:	31 97       	sbiw	r30, 0x01	; 1
     c62:	50 83       	st	Z, r21
     c64:	31 97       	sbiw	r30, 0x01	; 1
     c66:	26 e2       	ldi	r18, 0x26	; 38
     c68:	20 83       	st	Z, r18
     c6a:	31 97       	sbiw	r30, 0x01	; 1
     c6c:	27 e2       	ldi	r18, 0x27	; 39
     c6e:	20 83       	st	Z, r18
     c70:	31 97       	sbiw	r30, 0x01	; 1
     c72:	28 e2       	ldi	r18, 0x28	; 40
     c74:	20 83       	st	Z, r18
     c76:	31 97       	sbiw	r30, 0x01	; 1
     c78:	29 e2       	ldi	r18, 0x29	; 41
     c7a:	20 83       	st	Z, r18
     c7c:	31 97       	sbiw	r30, 0x01	; 1
     c7e:	20 e3       	ldi	r18, 0x30	; 48
     c80:	20 83       	st	Z, r18
     c82:	31 97       	sbiw	r30, 0x01	; 1
     c84:	21 e3       	ldi	r18, 0x31	; 49
     c86:	20 83       	st	Z, r18
     c88:	89 97       	sbiw	r24, 0x29	; 41
     c8a:	08 95       	ret

00000c8c <xPortStartScheduler>:
     c8c:	a8 95       	wdr
     c8e:	90 ec       	ldi	r25, 0xC0	; 192
     c90:	88 e1       	ldi	r24, 0x18	; 24
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	f8 94       	cli
     c96:	a8 95       	wdr
     c98:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     ca2:	a0 91 7e 08 	lds	r26, 0x087E	; 0x80087e <pxCurrentTCB>
     ca6:	b0 91 7f 08 	lds	r27, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
     caa:	cd 91       	ld	r28, X+
     cac:	cd bf       	out	0x3d, r28	; 61
     cae:	dd 91       	ld	r29, X+
     cb0:	de bf       	out	0x3e, r29	; 62
     cb2:	ff 91       	pop	r31
     cb4:	ef 91       	pop	r30
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	bf 91       	pop	r27
     cbc:	af 91       	pop	r26
     cbe:	9f 91       	pop	r25
     cc0:	8f 91       	pop	r24
     cc2:	7f 91       	pop	r23
     cc4:	6f 91       	pop	r22
     cc6:	5f 91       	pop	r21
     cc8:	4f 91       	pop	r20
     cca:	3f 91       	pop	r19
     ccc:	2f 91       	pop	r18
     cce:	1f 91       	pop	r17
     cd0:	0f 91       	pop	r16
     cd2:	ff 90       	pop	r15
     cd4:	ef 90       	pop	r14
     cd6:	df 90       	pop	r13
     cd8:	cf 90       	pop	r12
     cda:	bf 90       	pop	r11
     cdc:	af 90       	pop	r10
     cde:	9f 90       	pop	r9
     ce0:	8f 90       	pop	r8
     ce2:	7f 90       	pop	r7
     ce4:	6f 90       	pop	r6
     ce6:	5f 90       	pop	r5
     ce8:	4f 90       	pop	r4
     cea:	3f 90       	pop	r3
     cec:	2f 90       	pop	r2
     cee:	1f 90       	pop	r1
     cf0:	0f 90       	pop	r0
     cf2:	0c be       	out	0x3c, r0	; 60
     cf4:	0f 90       	pop	r0
     cf6:	0b be       	out	0x3b, r0	; 59
     cf8:	0f 90       	pop	r0
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	0f 90       	pop	r0
     cfe:	08 95       	ret
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	08 95       	ret

00000d04 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     d04:	0f 92       	push	r0
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	f8 94       	cli
     d0a:	0f 92       	push	r0
     d0c:	0b b6       	in	r0, 0x3b	; 59
     d0e:	0f 92       	push	r0
     d10:	0c b6       	in	r0, 0x3c	; 60
     d12:	0f 92       	push	r0
     d14:	1f 92       	push	r1
     d16:	11 24       	eor	r1, r1
     d18:	2f 92       	push	r2
     d1a:	3f 92       	push	r3
     d1c:	4f 92       	push	r4
     d1e:	5f 92       	push	r5
     d20:	6f 92       	push	r6
     d22:	7f 92       	push	r7
     d24:	8f 92       	push	r8
     d26:	9f 92       	push	r9
     d28:	af 92       	push	r10
     d2a:	bf 92       	push	r11
     d2c:	cf 92       	push	r12
     d2e:	df 92       	push	r13
     d30:	ef 92       	push	r14
     d32:	ff 92       	push	r15
     d34:	0f 93       	push	r16
     d36:	1f 93       	push	r17
     d38:	2f 93       	push	r18
     d3a:	3f 93       	push	r19
     d3c:	4f 93       	push	r20
     d3e:	5f 93       	push	r21
     d40:	6f 93       	push	r22
     d42:	7f 93       	push	r23
     d44:	8f 93       	push	r24
     d46:	9f 93       	push	r25
     d48:	af 93       	push	r26
     d4a:	bf 93       	push	r27
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	ef 93       	push	r30
     d52:	ff 93       	push	r31
     d54:	a0 91 7e 08 	lds	r26, 0x087E	; 0x80087e <pxCurrentTCB>
     d58:	b0 91 7f 08 	lds	r27, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
     d5c:	0d b6       	in	r0, 0x3d	; 61
     d5e:	0d 92       	st	X+, r0
     d60:	0e b6       	in	r0, 0x3e	; 62
     d62:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     d64:	0e 94 1d 10 	call	0x203a	; 0x203a <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     d68:	a0 91 7e 08 	lds	r26, 0x087E	; 0x80087e <pxCurrentTCB>
     d6c:	b0 91 7f 08 	lds	r27, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
     d70:	cd 91       	ld	r28, X+
     d72:	cd bf       	out	0x3d, r28	; 61
     d74:	dd 91       	ld	r29, X+
     d76:	de bf       	out	0x3e, r29	; 62
     d78:	ff 91       	pop	r31
     d7a:	ef 91       	pop	r30
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	bf 91       	pop	r27
     d82:	af 91       	pop	r26
     d84:	9f 91       	pop	r25
     d86:	8f 91       	pop	r24
     d88:	7f 91       	pop	r23
     d8a:	6f 91       	pop	r22
     d8c:	5f 91       	pop	r21
     d8e:	4f 91       	pop	r20
     d90:	3f 91       	pop	r19
     d92:	2f 91       	pop	r18
     d94:	1f 91       	pop	r17
     d96:	0f 91       	pop	r16
     d98:	ff 90       	pop	r15
     d9a:	ef 90       	pop	r14
     d9c:	df 90       	pop	r13
     d9e:	cf 90       	pop	r12
     da0:	bf 90       	pop	r11
     da2:	af 90       	pop	r10
     da4:	9f 90       	pop	r9
     da6:	8f 90       	pop	r8
     da8:	7f 90       	pop	r7
     daa:	6f 90       	pop	r6
     dac:	5f 90       	pop	r5
     dae:	4f 90       	pop	r4
     db0:	3f 90       	pop	r3
     db2:	2f 90       	pop	r2
     db4:	1f 90       	pop	r1
     db6:	0f 90       	pop	r0
     db8:	0c be       	out	0x3c, r0	; 60
     dba:	0f 90       	pop	r0
     dbc:	0b be       	out	0x3b, r0	; 59
     dbe:	0f 90       	pop	r0
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     dc4:	08 95       	ret

00000dc6 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     dc6:	0f 92       	push	r0
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	0f 92       	push	r0
     dce:	0b b6       	in	r0, 0x3b	; 59
     dd0:	0f 92       	push	r0
     dd2:	0c b6       	in	r0, 0x3c	; 60
     dd4:	0f 92       	push	r0
     dd6:	1f 92       	push	r1
     dd8:	11 24       	eor	r1, r1
     dda:	2f 92       	push	r2
     ddc:	3f 92       	push	r3
     dde:	4f 92       	push	r4
     de0:	5f 92       	push	r5
     de2:	6f 92       	push	r6
     de4:	7f 92       	push	r7
     de6:	8f 92       	push	r8
     de8:	9f 92       	push	r9
     dea:	af 92       	push	r10
     dec:	bf 92       	push	r11
     dee:	cf 92       	push	r12
     df0:	df 92       	push	r13
     df2:	ef 92       	push	r14
     df4:	ff 92       	push	r15
     df6:	0f 93       	push	r16
     df8:	1f 93       	push	r17
     dfa:	2f 93       	push	r18
     dfc:	3f 93       	push	r19
     dfe:	4f 93       	push	r20
     e00:	5f 93       	push	r21
     e02:	6f 93       	push	r22
     e04:	7f 93       	push	r23
     e06:	8f 93       	push	r24
     e08:	9f 93       	push	r25
     e0a:	af 93       	push	r26
     e0c:	bf 93       	push	r27
     e0e:	cf 93       	push	r28
     e10:	df 93       	push	r29
     e12:	ef 93       	push	r30
     e14:	ff 93       	push	r31
     e16:	a0 91 7e 08 	lds	r26, 0x087E	; 0x80087e <pxCurrentTCB>
     e1a:	b0 91 7f 08 	lds	r27, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
     e1e:	0d b6       	in	r0, 0x3d	; 61
     e20:	0d 92       	st	X+, r0
     e22:	0e b6       	in	r0, 0x3e	; 62
     e24:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     e26:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     e28:	c0 d7       	rcall	.+3968   	; 0x1daa <xTaskIncrementTick>
     e2a:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     e2c:	0e 94 1d 10 	call	0x203a	; 0x203a <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
     e30:	a0 91 7e 08 	lds	r26, 0x087E	; 0x80087e <pxCurrentTCB>
     e34:	b0 91 7f 08 	lds	r27, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
     e38:	cd 91       	ld	r28, X+
     e3a:	cd bf       	out	0x3d, r28	; 61
     e3c:	dd 91       	ld	r29, X+
     e3e:	de bf       	out	0x3e, r29	; 62
     e40:	ff 91       	pop	r31
     e42:	ef 91       	pop	r30
     e44:	df 91       	pop	r29
     e46:	cf 91       	pop	r28
     e48:	bf 91       	pop	r27
     e4a:	af 91       	pop	r26
     e4c:	9f 91       	pop	r25
     e4e:	8f 91       	pop	r24
     e50:	7f 91       	pop	r23
     e52:	6f 91       	pop	r22
     e54:	5f 91       	pop	r21
     e56:	4f 91       	pop	r20
     e58:	3f 91       	pop	r19
     e5a:	2f 91       	pop	r18
     e5c:	1f 91       	pop	r17
     e5e:	0f 91       	pop	r16
     e60:	ff 90       	pop	r15
     e62:	ef 90       	pop	r14
     e64:	df 90       	pop	r13
     e66:	cf 90       	pop	r12
     e68:	bf 90       	pop	r11
     e6a:	af 90       	pop	r10
     e6c:	9f 90       	pop	r9
     e6e:	8f 90       	pop	r8
     e70:	7f 90       	pop	r7
     e72:	6f 90       	pop	r6
     e74:	5f 90       	pop	r5
     e76:	4f 90       	pop	r4
     e78:	3f 90       	pop	r3
     e7a:	2f 90       	pop	r2
     e7c:	1f 90       	pop	r1
     e7e:	0f 90       	pop	r0
     e80:	0c be       	out	0x3c, r0	; 60
     e82:	0f 90       	pop	r0
     e84:	0b be       	out	0x3b, r0	; 59
     e86:	0f 90       	pop	r0
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     e8c:	08 95       	ret

00000e8e <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     e8e:	9b df       	rcall	.-202    	; 0xdc6 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     e90:	18 95       	reti

00000e92 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     e92:	0f b6       	in	r0, 0x3f	; 63
     e94:	f8 94       	cli
     e96:	0f 92       	push	r0
     e98:	fc 01       	movw	r30, r24
     e9a:	92 8d       	ldd	r25, Z+26	; 0x1a
     e9c:	0f 90       	pop	r0
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	91 11       	cpse	r25, r1
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	08 95       	ret

00000ea8 <prvCopyDataToQueue>:
     ea8:	0f 93       	push	r16
     eaa:	1f 93       	push	r17
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
     eb0:	ec 01       	movw	r28, r24
     eb2:	04 2f       	mov	r16, r20
     eb4:	1a 8d       	ldd	r17, Y+26	; 0x1a
     eb6:	4c 8d       	ldd	r20, Y+28	; 0x1c
     eb8:	41 11       	cpse	r20, r1
     eba:	0c c0       	rjmp	.+24     	; 0xed4 <prvCopyDataToQueue+0x2c>
     ebc:	88 81       	ld	r24, Y
     ebe:	99 81       	ldd	r25, Y+1	; 0x01
     ec0:	89 2b       	or	r24, r25
     ec2:	09 f0       	breq	.+2      	; 0xec6 <prvCopyDataToQueue+0x1e>
     ec4:	42 c0       	rjmp	.+132    	; 0xf4a <prvCopyDataToQueue+0xa2>
     ec6:	8c 81       	ldd	r24, Y+4	; 0x04
     ec8:	9d 81       	ldd	r25, Y+5	; 0x05
     eca:	0e 94 e5 11 	call	0x23ca	; 0x23ca <xTaskPriorityDisinherit>
     ece:	1d 82       	std	Y+5, r1	; 0x05
     ed0:	1c 82       	std	Y+4, r1	; 0x04
     ed2:	42 c0       	rjmp	.+132    	; 0xf58 <prvCopyDataToQueue+0xb0>
     ed4:	01 11       	cpse	r16, r1
     ed6:	17 c0       	rjmp	.+46     	; 0xf06 <prvCopyDataToQueue+0x5e>
     ed8:	50 e0       	ldi	r21, 0x00	; 0
     eda:	8a 81       	ldd	r24, Y+2	; 0x02
     edc:	9b 81       	ldd	r25, Y+3	; 0x03
     ede:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <memcpy>
     ee2:	2c 8d       	ldd	r18, Y+28	; 0x1c
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	9b 81       	ldd	r25, Y+3	; 0x03
     ee8:	82 0f       	add	r24, r18
     eea:	91 1d       	adc	r25, r1
     eec:	9b 83       	std	Y+3, r25	; 0x03
     eee:	8a 83       	std	Y+2, r24	; 0x02
     ef0:	2c 81       	ldd	r18, Y+4	; 0x04
     ef2:	3d 81       	ldd	r19, Y+5	; 0x05
     ef4:	82 17       	cp	r24, r18
     ef6:	93 07       	cpc	r25, r19
     ef8:	50 f1       	brcs	.+84     	; 0xf4e <prvCopyDataToQueue+0xa6>
     efa:	88 81       	ld	r24, Y
     efc:	99 81       	ldd	r25, Y+1	; 0x01
     efe:	9b 83       	std	Y+3, r25	; 0x03
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	29 c0       	rjmp	.+82     	; 0xf58 <prvCopyDataToQueue+0xb0>
     f06:	50 e0       	ldi	r21, 0x00	; 0
     f08:	8e 81       	ldd	r24, Y+6	; 0x06
     f0a:	9f 81       	ldd	r25, Y+7	; 0x07
     f0c:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <memcpy>
     f10:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	91 95       	neg	r25
     f16:	81 95       	neg	r24
     f18:	91 09       	sbc	r25, r1
     f1a:	2e 81       	ldd	r18, Y+6	; 0x06
     f1c:	3f 81       	ldd	r19, Y+7	; 0x07
     f1e:	28 0f       	add	r18, r24
     f20:	39 1f       	adc	r19, r25
     f22:	3f 83       	std	Y+7, r19	; 0x07
     f24:	2e 83       	std	Y+6, r18	; 0x06
     f26:	48 81       	ld	r20, Y
     f28:	59 81       	ldd	r21, Y+1	; 0x01
     f2a:	24 17       	cp	r18, r20
     f2c:	35 07       	cpc	r19, r21
     f2e:	30 f4       	brcc	.+12     	; 0xf3c <prvCopyDataToQueue+0x94>
     f30:	2c 81       	ldd	r18, Y+4	; 0x04
     f32:	3d 81       	ldd	r19, Y+5	; 0x05
     f34:	82 0f       	add	r24, r18
     f36:	93 1f       	adc	r25, r19
     f38:	9f 83       	std	Y+7, r25	; 0x07
     f3a:	8e 83       	std	Y+6, r24	; 0x06
     f3c:	02 30       	cpi	r16, 0x02	; 2
     f3e:	49 f4       	brne	.+18     	; 0xf52 <prvCopyDataToQueue+0xaa>
     f40:	11 23       	and	r17, r17
     f42:	49 f0       	breq	.+18     	; 0xf56 <prvCopyDataToQueue+0xae>
     f44:	11 50       	subi	r17, 0x01	; 1
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	07 c0       	rjmp	.+14     	; 0xf58 <prvCopyDataToQueue+0xb0>
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	05 c0       	rjmp	.+10     	; 0xf58 <prvCopyDataToQueue+0xb0>
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	03 c0       	rjmp	.+6      	; 0xf58 <prvCopyDataToQueue+0xb0>
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	01 c0       	rjmp	.+2      	; 0xf58 <prvCopyDataToQueue+0xb0>
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	1f 5f       	subi	r17, 0xFF	; 255
     f5a:	1a 8f       	std	Y+26, r17	; 0x1a
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	1f 91       	pop	r17
     f62:	0f 91       	pop	r16
     f64:	08 95       	ret

00000f66 <prvCopyDataFromQueue>:
     f66:	fc 01       	movw	r30, r24
     f68:	44 8d       	ldd	r20, Z+28	; 0x1c
     f6a:	44 23       	and	r20, r20
     f6c:	a9 f0       	breq	.+42     	; 0xf98 <prvCopyDataFromQueue+0x32>
     f6e:	50 e0       	ldi	r21, 0x00	; 0
     f70:	26 81       	ldd	r18, Z+6	; 0x06
     f72:	37 81       	ldd	r19, Z+7	; 0x07
     f74:	24 0f       	add	r18, r20
     f76:	35 1f       	adc	r19, r21
     f78:	37 83       	std	Z+7, r19	; 0x07
     f7a:	26 83       	std	Z+6, r18	; 0x06
     f7c:	84 81       	ldd	r24, Z+4	; 0x04
     f7e:	95 81       	ldd	r25, Z+5	; 0x05
     f80:	28 17       	cp	r18, r24
     f82:	39 07       	cpc	r19, r25
     f84:	20 f0       	brcs	.+8      	; 0xf8e <prvCopyDataFromQueue+0x28>
     f86:	80 81       	ld	r24, Z
     f88:	91 81       	ldd	r25, Z+1	; 0x01
     f8a:	97 83       	std	Z+7, r25	; 0x07
     f8c:	86 83       	std	Z+6, r24	; 0x06
     f8e:	cb 01       	movw	r24, r22
     f90:	66 81       	ldd	r22, Z+6	; 0x06
     f92:	77 81       	ldd	r23, Z+7	; 0x07
     f94:	0c 94 0f 27 	jmp	0x4e1e	; 0x4e1e <memcpy>
     f98:	08 95       	ret

00000f9a <prvUnlockQueue>:
     f9a:	ef 92       	push	r14
     f9c:	ff 92       	push	r15
     f9e:	0f 93       	push	r16
     fa0:	1f 93       	push	r17
     fa2:	cf 93       	push	r28
     fa4:	8c 01       	movw	r16, r24
     fa6:	0f b6       	in	r0, 0x3f	; 63
     fa8:	f8 94       	cli
     faa:	0f 92       	push	r0
     fac:	fc 01       	movw	r30, r24
     fae:	c6 8d       	ldd	r28, Z+30	; 0x1e
     fb0:	1c 16       	cp	r1, r28
     fb2:	ac f4       	brge	.+42     	; 0xfde <prvUnlockQueue+0x44>
     fb4:	81 89       	ldd	r24, Z+17	; 0x11
     fb6:	81 11       	cpse	r24, r1
     fb8:	06 c0       	rjmp	.+12     	; 0xfc6 <prvUnlockQueue+0x2c>
     fba:	11 c0       	rjmp	.+34     	; 0xfde <prvUnlockQueue+0x44>
     fbc:	f8 01       	movw	r30, r16
     fbe:	81 89       	ldd	r24, Z+17	; 0x11
     fc0:	81 11       	cpse	r24, r1
     fc2:	05 c0       	rjmp	.+10     	; 0xfce <prvUnlockQueue+0x34>
     fc4:	0c c0       	rjmp	.+24     	; 0xfde <prvUnlockQueue+0x44>
     fc6:	78 01       	movw	r14, r16
     fc8:	f1 e1       	ldi	r31, 0x11	; 17
     fca:	ef 0e       	add	r14, r31
     fcc:	f1 1c       	adc	r15, r1
     fce:	c7 01       	movw	r24, r14
     fd0:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <xTaskRemoveFromEventList>
     fd4:	81 11       	cpse	r24, r1
     fd6:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <vTaskMissedYield>
     fda:	c1 50       	subi	r28, 0x01	; 1
     fdc:	79 f7       	brne	.-34     	; 0xfbc <prvUnlockQueue+0x22>
     fde:	8f ef       	ldi	r24, 0xFF	; 255
     fe0:	f8 01       	movw	r30, r16
     fe2:	86 8f       	std	Z+30, r24	; 0x1e
     fe4:	0f 90       	pop	r0
     fe6:	0f be       	out	0x3f, r0	; 63
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	0f 92       	push	r0
     fee:	c5 8d       	ldd	r28, Z+29	; 0x1d
     ff0:	1c 16       	cp	r1, r28
     ff2:	ac f4       	brge	.+42     	; 0x101e <prvUnlockQueue+0x84>
     ff4:	80 85       	ldd	r24, Z+8	; 0x08
     ff6:	81 11       	cpse	r24, r1
     ff8:	06 c0       	rjmp	.+12     	; 0x1006 <prvUnlockQueue+0x6c>
     ffa:	11 c0       	rjmp	.+34     	; 0x101e <prvUnlockQueue+0x84>
     ffc:	f8 01       	movw	r30, r16
     ffe:	80 85       	ldd	r24, Z+8	; 0x08
    1000:	81 11       	cpse	r24, r1
    1002:	05 c0       	rjmp	.+10     	; 0x100e <prvUnlockQueue+0x74>
    1004:	0c c0       	rjmp	.+24     	; 0x101e <prvUnlockQueue+0x84>
    1006:	78 01       	movw	r14, r16
    1008:	f8 e0       	ldi	r31, 0x08	; 8
    100a:	ef 0e       	add	r14, r31
    100c:	f1 1c       	adc	r15, r1
    100e:	c7 01       	movw	r24, r14
    1010:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <xTaskRemoveFromEventList>
    1014:	81 11       	cpse	r24, r1
    1016:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <vTaskMissedYield>
    101a:	c1 50       	subi	r28, 0x01	; 1
    101c:	79 f7       	brne	.-34     	; 0xffc <prvUnlockQueue+0x62>
    101e:	8f ef       	ldi	r24, 0xFF	; 255
    1020:	f8 01       	movw	r30, r16
    1022:	85 8f       	std	Z+29, r24	; 0x1d
    1024:	0f 90       	pop	r0
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cf 91       	pop	r28
    102a:	1f 91       	pop	r17
    102c:	0f 91       	pop	r16
    102e:	ff 90       	pop	r15
    1030:	ef 90       	pop	r14
    1032:	08 95       	ret

00001034 <xQueueGenericReset>:
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	ec 01       	movw	r28, r24
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	f8 94       	cli
    103e:	0f 92       	push	r0
    1040:	e8 81       	ld	r30, Y
    1042:	f9 81       	ldd	r31, Y+1	; 0x01
    1044:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1046:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	82 9f       	mul	r24, r18
    104e:	a0 01       	movw	r20, r0
    1050:	83 9f       	mul	r24, r19
    1052:	50 0d       	add	r21, r0
    1054:	92 9f       	mul	r25, r18
    1056:	50 0d       	add	r21, r0
    1058:	11 24       	eor	r1, r1
    105a:	4e 0f       	add	r20, r30
    105c:	5f 1f       	adc	r21, r31
    105e:	5d 83       	std	Y+5, r21	; 0x05
    1060:	4c 83       	std	Y+4, r20	; 0x04
    1062:	1a 8e       	std	Y+26, r1	; 0x1a
    1064:	fb 83       	std	Y+3, r31	; 0x03
    1066:	ea 83       	std	Y+2, r30	; 0x02
    1068:	01 97       	sbiw	r24, 0x01	; 1
    106a:	82 9f       	mul	r24, r18
    106c:	a0 01       	movw	r20, r0
    106e:	83 9f       	mul	r24, r19
    1070:	50 0d       	add	r21, r0
    1072:	92 9f       	mul	r25, r18
    1074:	50 0d       	add	r21, r0
    1076:	11 24       	eor	r1, r1
    1078:	cf 01       	movw	r24, r30
    107a:	84 0f       	add	r24, r20
    107c:	95 1f       	adc	r25, r21
    107e:	9f 83       	std	Y+7, r25	; 0x07
    1080:	8e 83       	std	Y+6, r24	; 0x06
    1082:	8f ef       	ldi	r24, 0xFF	; 255
    1084:	8d 8f       	std	Y+29, r24	; 0x1d
    1086:	8e 8f       	std	Y+30, r24	; 0x1e
    1088:	61 11       	cpse	r22, r1
    108a:	0b c0       	rjmp	.+22     	; 0x10a2 <xQueueGenericReset+0x6e>
    108c:	88 85       	ldd	r24, Y+8	; 0x08
    108e:	88 23       	and	r24, r24
    1090:	71 f0       	breq	.+28     	; 0x10ae <xQueueGenericReset+0x7a>
    1092:	ce 01       	movw	r24, r28
    1094:	08 96       	adiw	r24, 0x08	; 8
    1096:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <xTaskRemoveFromEventList>
    109a:	88 23       	and	r24, r24
    109c:	41 f0       	breq	.+16     	; 0x10ae <xQueueGenericReset+0x7a>
    109e:	32 de       	rcall	.-924    	; 0xd04 <vPortYield>
    10a0:	06 c0       	rjmp	.+12     	; 0x10ae <xQueueGenericReset+0x7a>
    10a2:	ce 01       	movw	r24, r28
    10a4:	08 96       	adiw	r24, 0x08	; 8
    10a6:	f5 dc       	rcall	.-1558   	; 0xa92 <vListInitialise>
    10a8:	ce 01       	movw	r24, r28
    10aa:	41 96       	adiw	r24, 0x11	; 17
    10ac:	f2 dc       	rcall	.-1564   	; 0xa92 <vListInitialise>
    10ae:	0f 90       	pop	r0
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	08 95       	ret

000010ba <xQueueGenericCreate>:
    10ba:	ff 92       	push	r15
    10bc:	0f 93       	push	r16
    10be:	1f 93       	push	r17
    10c0:	cf 93       	push	r28
    10c2:	df 93       	push	r29
    10c4:	08 2f       	mov	r16, r24
    10c6:	16 2f       	mov	r17, r22
    10c8:	f4 2e       	mov	r15, r20
    10ca:	66 23       	and	r22, r22
    10cc:	b9 f0       	breq	.+46     	; 0x10fc <xQueueGenericCreate+0x42>
    10ce:	86 9f       	mul	r24, r22
    10d0:	c0 01       	movw	r24, r0
    10d2:	11 24       	eor	r1, r1
    10d4:	81 96       	adiw	r24, 0x21	; 33
    10d6:	bb dc       	rcall	.-1674   	; 0xa4e <pvPortMalloc>
    10d8:	ec 01       	movw	r28, r24
    10da:	00 97       	sbiw	r24, 0x00	; 0
    10dc:	41 f4       	brne	.+16     	; 0x10ee <xQueueGenericCreate+0x34>
    10de:	14 c0       	rjmp	.+40     	; 0x1108 <xQueueGenericCreate+0x4e>
    10e0:	0b 8f       	std	Y+27, r16	; 0x1b
    10e2:	1c 8f       	std	Y+28, r17	; 0x1c
    10e4:	61 e0       	ldi	r22, 0x01	; 1
    10e6:	ce 01       	movw	r24, r28
    10e8:	a5 df       	rcall	.-182    	; 0x1034 <xQueueGenericReset>
    10ea:	f8 a2       	std	Y+32, r15	; 0x20
    10ec:	0d c0       	rjmp	.+26     	; 0x1108 <xQueueGenericCreate+0x4e>
    10ee:	81 96       	adiw	r24, 0x21	; 33
    10f0:	99 83       	std	Y+1, r25	; 0x01
    10f2:	88 83       	st	Y, r24
    10f4:	f5 cf       	rjmp	.-22     	; 0x10e0 <xQueueGenericCreate+0x26>
    10f6:	d9 83       	std	Y+1, r29	; 0x01
    10f8:	c8 83       	st	Y, r28
    10fa:	f2 cf       	rjmp	.-28     	; 0x10e0 <xQueueGenericCreate+0x26>
    10fc:	81 e2       	ldi	r24, 0x21	; 33
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	a6 dc       	rcall	.-1716   	; 0xa4e <pvPortMalloc>
    1102:	ec 01       	movw	r28, r24
    1104:	89 2b       	or	r24, r25
    1106:	b9 f7       	brne	.-18     	; 0x10f6 <xQueueGenericCreate+0x3c>
    1108:	ce 01       	movw	r24, r28
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	ff 90       	pop	r15
    1114:	08 95       	ret

00001116 <xQueueGenericSend>:
    1116:	9f 92       	push	r9
    1118:	af 92       	push	r10
    111a:	bf 92       	push	r11
    111c:	cf 92       	push	r12
    111e:	df 92       	push	r13
    1120:	ef 92       	push	r14
    1122:	ff 92       	push	r15
    1124:	0f 93       	push	r16
    1126:	1f 93       	push	r17
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    112c:	00 d0       	rcall	.+0      	; 0x112e <xQueueGenericSend+0x18>
    112e:	1f 92       	push	r1
    1130:	1f 92       	push	r1
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	8c 01       	movw	r16, r24
    1138:	6b 01       	movw	r12, r22
    113a:	5d 83       	std	Y+5, r21	; 0x05
    113c:	4c 83       	std	Y+4, r20	; 0x04
    113e:	a2 2e       	mov	r10, r18
    1140:	b1 2c       	mov	r11, r1
    1142:	99 24       	eor	r9, r9
    1144:	93 94       	inc	r9
    1146:	7c 01       	movw	r14, r24
    1148:	88 e0       	ldi	r24, 0x08	; 8
    114a:	e8 0e       	add	r14, r24
    114c:	f1 1c       	adc	r15, r1
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	f8 94       	cli
    1152:	0f 92       	push	r0
    1154:	f8 01       	movw	r30, r16
    1156:	92 8d       	ldd	r25, Z+26	; 0x1a
    1158:	83 8d       	ldd	r24, Z+27	; 0x1b
    115a:	98 17       	cp	r25, r24
    115c:	18 f0       	brcs	.+6      	; 0x1164 <xQueueGenericSend+0x4e>
    115e:	f2 e0       	ldi	r31, 0x02	; 2
    1160:	af 12       	cpse	r10, r31
    1162:	16 c0       	rjmp	.+44     	; 0x1190 <xQueueGenericSend+0x7a>
    1164:	4a 2d       	mov	r20, r10
    1166:	b6 01       	movw	r22, r12
    1168:	c8 01       	movw	r24, r16
    116a:	9e de       	rcall	.-708    	; 0xea8 <prvCopyDataToQueue>
    116c:	f8 01       	movw	r30, r16
    116e:	91 89       	ldd	r25, Z+17	; 0x11
    1170:	99 23       	and	r25, r25
    1172:	41 f0       	breq	.+16     	; 0x1184 <xQueueGenericSend+0x6e>
    1174:	c8 01       	movw	r24, r16
    1176:	41 96       	adiw	r24, 0x11	; 17
    1178:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <xTaskRemoveFromEventList>
    117c:	88 23       	and	r24, r24
    117e:	21 f0       	breq	.+8      	; 0x1188 <xQueueGenericSend+0x72>
    1180:	c1 dd       	rcall	.-1150   	; 0xd04 <vPortYield>
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <xQueueGenericSend+0x72>
    1184:	81 11       	cpse	r24, r1
    1186:	be dd       	rcall	.-1156   	; 0xd04 <vPortYield>
    1188:	0f 90       	pop	r0
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	47 c0       	rjmp	.+142    	; 0x121e <xQueueGenericSend+0x108>
    1190:	8c 81       	ldd	r24, Y+4	; 0x04
    1192:	9d 81       	ldd	r25, Y+5	; 0x05
    1194:	89 2b       	or	r24, r25
    1196:	21 f4       	brne	.+8      	; 0x11a0 <xQueueGenericSend+0x8a>
    1198:	0f 90       	pop	r0
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	3f c0       	rjmp	.+126    	; 0x121e <xQueueGenericSend+0x108>
    11a0:	b1 10       	cpse	r11, r1
    11a2:	05 c0       	rjmp	.+10     	; 0x11ae <xQueueGenericSend+0x98>
    11a4:	ce 01       	movw	r24, r28
    11a6:	01 96       	adiw	r24, 0x01	; 1
    11a8:	0e 94 1c 11 	call	0x2238	; 0x2238 <vTaskInternalSetTimeOutState>
    11ac:	b9 2c       	mov	r11, r9
    11ae:	0f 90       	pop	r0
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	eb d5       	rcall	.+3030   	; 0x1d8a <vTaskSuspendAll>
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	f8 94       	cli
    11b8:	0f 92       	push	r0
    11ba:	f8 01       	movw	r30, r16
    11bc:	85 8d       	ldd	r24, Z+29	; 0x1d
    11be:	8f 3f       	cpi	r24, 0xFF	; 255
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <xQueueGenericSend+0xae>
    11c2:	15 8e       	std	Z+29, r1	; 0x1d
    11c4:	f8 01       	movw	r30, r16
    11c6:	86 8d       	ldd	r24, Z+30	; 0x1e
    11c8:	8f 3f       	cpi	r24, 0xFF	; 255
    11ca:	09 f4       	brne	.+2      	; 0x11ce <xQueueGenericSend+0xb8>
    11cc:	16 8e       	std	Z+30, r1	; 0x1e
    11ce:	0f 90       	pop	r0
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	be 01       	movw	r22, r28
    11d4:	6c 5f       	subi	r22, 0xFC	; 252
    11d6:	7f 4f       	sbci	r23, 0xFF	; 255
    11d8:	ce 01       	movw	r24, r28
    11da:	01 96       	adiw	r24, 0x01	; 1
    11dc:	0e 94 27 11 	call	0x224e	; 0x224e <xTaskCheckForTimeOut>
    11e0:	81 11       	cpse	r24, r1
    11e2:	19 c0       	rjmp	.+50     	; 0x1216 <xQueueGenericSend+0x100>
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	f8 94       	cli
    11e8:	0f 92       	push	r0
    11ea:	f8 01       	movw	r30, r16
    11ec:	92 8d       	ldd	r25, Z+26	; 0x1a
    11ee:	83 8d       	ldd	r24, Z+27	; 0x1b
    11f0:	0f 90       	pop	r0
    11f2:	0f be       	out	0x3f, r0	; 63
    11f4:	98 13       	cpse	r25, r24
    11f6:	0b c0       	rjmp	.+22     	; 0x120e <xQueueGenericSend+0xf8>
    11f8:	6c 81       	ldd	r22, Y+4	; 0x04
    11fa:	7d 81       	ldd	r23, Y+5	; 0x05
    11fc:	c7 01       	movw	r24, r14
    11fe:	ab d7       	rcall	.+3926   	; 0x2156 <vTaskPlaceOnEventList>
    1200:	c8 01       	movw	r24, r16
    1202:	cb de       	rcall	.-618    	; 0xf9a <prvUnlockQueue>
    1204:	8c d6       	rcall	.+3352   	; 0x1f1e <xTaskResumeAll>
    1206:	81 11       	cpse	r24, r1
    1208:	a2 cf       	rjmp	.-188    	; 0x114e <xQueueGenericSend+0x38>
    120a:	7c dd       	rcall	.-1288   	; 0xd04 <vPortYield>
    120c:	a0 cf       	rjmp	.-192    	; 0x114e <xQueueGenericSend+0x38>
    120e:	c8 01       	movw	r24, r16
    1210:	c4 de       	rcall	.-632    	; 0xf9a <prvUnlockQueue>
    1212:	85 d6       	rcall	.+3338   	; 0x1f1e <xTaskResumeAll>
    1214:	9c cf       	rjmp	.-200    	; 0x114e <xQueueGenericSend+0x38>
    1216:	c8 01       	movw	r24, r16
    1218:	c0 de       	rcall	.-640    	; 0xf9a <prvUnlockQueue>
    121a:	81 d6       	rcall	.+3330   	; 0x1f1e <xTaskResumeAll>
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	1f 91       	pop	r17
    122e:	0f 91       	pop	r16
    1230:	ff 90       	pop	r15
    1232:	ef 90       	pop	r14
    1234:	df 90       	pop	r13
    1236:	cf 90       	pop	r12
    1238:	bf 90       	pop	r11
    123a:	af 90       	pop	r10
    123c:	9f 90       	pop	r9
    123e:	08 95       	ret

00001240 <xQueueCreateMutex>:
    1240:	cf 93       	push	r28
    1242:	df 93       	push	r29
    1244:	48 2f       	mov	r20, r24
    1246:	60 e0       	ldi	r22, 0x00	; 0
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	37 df       	rcall	.-402    	; 0x10ba <xQueueGenericCreate>
    124c:	ec 01       	movw	r28, r24
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	59 f0       	breq	.+22     	; 0x1268 <xQueueCreateMutex+0x28>
    1252:	1d 82       	std	Y+5, r1	; 0x05
    1254:	1c 82       	std	Y+4, r1	; 0x04
    1256:	19 82       	std	Y+1, r1	; 0x01
    1258:	18 82       	st	Y, r1
    125a:	1e 82       	std	Y+6, r1	; 0x06
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	40 e0       	ldi	r20, 0x00	; 0
    1260:	50 e0       	ldi	r21, 0x00	; 0
    1262:	60 e0       	ldi	r22, 0x00	; 0
    1264:	70 e0       	ldi	r23, 0x00	; 0
    1266:	57 df       	rcall	.-338    	; 0x1116 <xQueueGenericSend>
    1268:	ce 01       	movw	r24, r28
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	08 95       	ret

00001270 <xQueueGenericSendFromISR>:
    1270:	ef 92       	push	r14
    1272:	ff 92       	push	r15
    1274:	0f 93       	push	r16
    1276:	1f 93       	push	r17
    1278:	cf 93       	push	r28
    127a:	df 93       	push	r29
    127c:	8a 01       	movw	r16, r20
    127e:	fc 01       	movw	r30, r24
    1280:	52 8d       	ldd	r21, Z+26	; 0x1a
    1282:	33 8d       	ldd	r19, Z+27	; 0x1b
    1284:	53 17       	cp	r21, r19
    1286:	10 f0       	brcs	.+4      	; 0x128c <xQueueGenericSendFromISR+0x1c>
    1288:	22 30       	cpi	r18, 0x02	; 2
    128a:	e1 f4       	brne	.+56     	; 0x12c4 <xQueueGenericSendFromISR+0x54>
    128c:	42 2f       	mov	r20, r18
    128e:	78 01       	movw	r14, r16
    1290:	ec 01       	movw	r28, r24
    1292:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1294:	09 de       	rcall	.-1006   	; 0xea8 <prvCopyDataToQueue>
    1296:	1f 3f       	cpi	r17, 0xFF	; 255
    1298:	79 f4       	brne	.+30     	; 0x12b8 <xQueueGenericSendFromISR+0x48>
    129a:	89 89       	ldd	r24, Y+17	; 0x11
    129c:	88 23       	and	r24, r24
    129e:	a1 f0       	breq	.+40     	; 0x12c8 <xQueueGenericSendFromISR+0x58>
    12a0:	ce 01       	movw	r24, r28
    12a2:	41 96       	adiw	r24, 0x11	; 17
    12a4:	81 d7       	rcall	.+3842   	; 0x21a8 <xTaskRemoveFromEventList>
    12a6:	88 23       	and	r24, r24
    12a8:	89 f0       	breq	.+34     	; 0x12cc <xQueueGenericSendFromISR+0x5c>
    12aa:	e1 14       	cp	r14, r1
    12ac:	f1 04       	cpc	r15, r1
    12ae:	81 f0       	breq	.+32     	; 0x12d0 <xQueueGenericSendFromISR+0x60>
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	f7 01       	movw	r30, r14
    12b4:	80 83       	st	Z, r24
    12b6:	0d c0       	rjmp	.+26     	; 0x12d2 <xQueueGenericSendFromISR+0x62>
    12b8:	ff 24       	eor	r15, r15
    12ba:	f3 94       	inc	r15
    12bc:	f1 0e       	add	r15, r17
    12be:	fe 8e       	std	Y+30, r15	; 0x1e
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	07 c0       	rjmp	.+14     	; 0x12d2 <xQueueGenericSendFromISR+0x62>
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	05 c0       	rjmp	.+10     	; 0x12d2 <xQueueGenericSendFromISR+0x62>
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	03 c0       	rjmp	.+6      	; 0x12d2 <xQueueGenericSendFromISR+0x62>
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	01 c0       	rjmp	.+2      	; 0x12d2 <xQueueGenericSendFromISR+0x62>
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	df 91       	pop	r29
    12d4:	cf 91       	pop	r28
    12d6:	1f 91       	pop	r17
    12d8:	0f 91       	pop	r16
    12da:	ff 90       	pop	r15
    12dc:	ef 90       	pop	r14
    12de:	08 95       	ret

000012e0 <xQueueReceive>:
    12e0:	9f 92       	push	r9
    12e2:	af 92       	push	r10
    12e4:	bf 92       	push	r11
    12e6:	cf 92       	push	r12
    12e8:	df 92       	push	r13
    12ea:	ef 92       	push	r14
    12ec:	ff 92       	push	r15
    12ee:	0f 93       	push	r16
    12f0:	1f 93       	push	r17
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <xQueueReceive+0x18>
    12f8:	1f 92       	push	r1
    12fa:	1f 92       	push	r1
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	8c 01       	movw	r16, r24
    1302:	5b 01       	movw	r10, r22
    1304:	5d 83       	std	Y+5, r21	; 0x05
    1306:	4c 83       	std	Y+4, r20	; 0x04
    1308:	e1 2c       	mov	r14, r1
    130a:	99 24       	eor	r9, r9
    130c:	93 94       	inc	r9
    130e:	6c 01       	movw	r12, r24
    1310:	81 e1       	ldi	r24, 0x11	; 17
    1312:	c8 0e       	add	r12, r24
    1314:	d1 1c       	adc	r13, r1
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	f8 94       	cli
    131a:	0f 92       	push	r0
    131c:	f8 01       	movw	r30, r16
    131e:	f2 8c       	ldd	r15, Z+26	; 0x1a
    1320:	ff 20       	and	r15, r15
    1322:	91 f0       	breq	.+36     	; 0x1348 <xQueueReceive+0x68>
    1324:	b5 01       	movw	r22, r10
    1326:	c8 01       	movw	r24, r16
    1328:	1e de       	rcall	.-964    	; 0xf66 <prvCopyDataFromQueue>
    132a:	fa 94       	dec	r15
    132c:	f8 01       	movw	r30, r16
    132e:	f2 8e       	std	Z+26, r15	; 0x1a
    1330:	80 85       	ldd	r24, Z+8	; 0x08
    1332:	88 23       	and	r24, r24
    1334:	29 f0       	breq	.+10     	; 0x1340 <xQueueReceive+0x60>
    1336:	c8 01       	movw	r24, r16
    1338:	08 96       	adiw	r24, 0x08	; 8
    133a:	36 d7       	rcall	.+3692   	; 0x21a8 <xTaskRemoveFromEventList>
    133c:	81 11       	cpse	r24, r1
    133e:	e2 dc       	rcall	.-1596   	; 0xd04 <vPortYield>
    1340:	0f 90       	pop	r0
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	44 c0       	rjmp	.+136    	; 0x13d0 <xQueueReceive+0xf0>
    1348:	8c 81       	ldd	r24, Y+4	; 0x04
    134a:	9d 81       	ldd	r25, Y+5	; 0x05
    134c:	89 2b       	or	r24, r25
    134e:	21 f4       	brne	.+8      	; 0x1358 <xQueueReceive+0x78>
    1350:	0f 90       	pop	r0
    1352:	0f be       	out	0x3f, r0	; 63
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	3c c0       	rjmp	.+120    	; 0x13d0 <xQueueReceive+0xf0>
    1358:	e1 10       	cpse	r14, r1
    135a:	04 c0       	rjmp	.+8      	; 0x1364 <xQueueReceive+0x84>
    135c:	ce 01       	movw	r24, r28
    135e:	01 96       	adiw	r24, 0x01	; 1
    1360:	6b d7       	rcall	.+3798   	; 0x2238 <vTaskInternalSetTimeOutState>
    1362:	e9 2c       	mov	r14, r9
    1364:	0f 90       	pop	r0
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	10 d5       	rcall	.+2592   	; 0x1d8a <vTaskSuspendAll>
    136a:	0f b6       	in	r0, 0x3f	; 63
    136c:	f8 94       	cli
    136e:	0f 92       	push	r0
    1370:	f8 01       	movw	r30, r16
    1372:	85 8d       	ldd	r24, Z+29	; 0x1d
    1374:	8f 3f       	cpi	r24, 0xFF	; 255
    1376:	09 f4       	brne	.+2      	; 0x137a <xQueueReceive+0x9a>
    1378:	15 8e       	std	Z+29, r1	; 0x1d
    137a:	f8 01       	movw	r30, r16
    137c:	86 8d       	ldd	r24, Z+30	; 0x1e
    137e:	8f 3f       	cpi	r24, 0xFF	; 255
    1380:	09 f4       	brne	.+2      	; 0x1384 <xQueueReceive+0xa4>
    1382:	16 8e       	std	Z+30, r1	; 0x1e
    1384:	0f 90       	pop	r0
    1386:	0f be       	out	0x3f, r0	; 63
    1388:	be 01       	movw	r22, r28
    138a:	6c 5f       	subi	r22, 0xFC	; 252
    138c:	7f 4f       	sbci	r23, 0xFF	; 255
    138e:	ce 01       	movw	r24, r28
    1390:	01 96       	adiw	r24, 0x01	; 1
    1392:	5d d7       	rcall	.+3770   	; 0x224e <xTaskCheckForTimeOut>
    1394:	81 11       	cpse	r24, r1
    1396:	13 c0       	rjmp	.+38     	; 0x13be <xQueueReceive+0xde>
    1398:	c8 01       	movw	r24, r16
    139a:	7b dd       	rcall	.-1290   	; 0xe92 <prvIsQueueEmpty>
    139c:	88 23       	and	r24, r24
    139e:	59 f0       	breq	.+22     	; 0x13b6 <xQueueReceive+0xd6>
    13a0:	6c 81       	ldd	r22, Y+4	; 0x04
    13a2:	7d 81       	ldd	r23, Y+5	; 0x05
    13a4:	c6 01       	movw	r24, r12
    13a6:	d7 d6       	rcall	.+3502   	; 0x2156 <vTaskPlaceOnEventList>
    13a8:	c8 01       	movw	r24, r16
    13aa:	f7 dd       	rcall	.-1042   	; 0xf9a <prvUnlockQueue>
    13ac:	b8 d5       	rcall	.+2928   	; 0x1f1e <xTaskResumeAll>
    13ae:	81 11       	cpse	r24, r1
    13b0:	b2 cf       	rjmp	.-156    	; 0x1316 <xQueueReceive+0x36>
    13b2:	a8 dc       	rcall	.-1712   	; 0xd04 <vPortYield>
    13b4:	b0 cf       	rjmp	.-160    	; 0x1316 <xQueueReceive+0x36>
    13b6:	c8 01       	movw	r24, r16
    13b8:	f0 dd       	rcall	.-1056   	; 0xf9a <prvUnlockQueue>
    13ba:	b1 d5       	rcall	.+2914   	; 0x1f1e <xTaskResumeAll>
    13bc:	ac cf       	rjmp	.-168    	; 0x1316 <xQueueReceive+0x36>
    13be:	c8 01       	movw	r24, r16
    13c0:	ec dd       	rcall	.-1064   	; 0xf9a <prvUnlockQueue>
    13c2:	ad d5       	rcall	.+2906   	; 0x1f1e <xTaskResumeAll>
    13c4:	c8 01       	movw	r24, r16
    13c6:	65 dd       	rcall	.-1334   	; 0xe92 <prvIsQueueEmpty>
    13c8:	88 23       	and	r24, r24
    13ca:	09 f4       	brne	.+2      	; 0x13ce <xQueueReceive+0xee>
    13cc:	a4 cf       	rjmp	.-184    	; 0x1316 <xQueueReceive+0x36>
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	df 91       	pop	r29
    13dc:	cf 91       	pop	r28
    13de:	1f 91       	pop	r17
    13e0:	0f 91       	pop	r16
    13e2:	ff 90       	pop	r15
    13e4:	ef 90       	pop	r14
    13e6:	df 90       	pop	r13
    13e8:	cf 90       	pop	r12
    13ea:	bf 90       	pop	r11
    13ec:	af 90       	pop	r10
    13ee:	9f 90       	pop	r9
    13f0:	08 95       	ret

000013f2 <xQueueSemaphoreTake>:
    13f2:	bf 92       	push	r11
    13f4:	cf 92       	push	r12
    13f6:	df 92       	push	r13
    13f8:	ef 92       	push	r14
    13fa:	ff 92       	push	r15
    13fc:	0f 93       	push	r16
    13fe:	1f 93       	push	r17
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29
    1404:	00 d0       	rcall	.+0      	; 0x1406 <xQueueSemaphoreTake+0x14>
    1406:	1f 92       	push	r1
    1408:	1f 92       	push	r1
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
    140e:	8c 01       	movw	r16, r24
    1410:	7d 83       	std	Y+5, r23	; 0x05
    1412:	6c 83       	std	Y+4, r22	; 0x04
    1414:	b1 2c       	mov	r11, r1
    1416:	d1 2c       	mov	r13, r1
    1418:	cc 24       	eor	r12, r12
    141a:	c3 94       	inc	r12
    141c:	7c 01       	movw	r14, r24
    141e:	81 e1       	ldi	r24, 0x11	; 17
    1420:	e8 0e       	add	r14, r24
    1422:	f1 1c       	adc	r15, r1
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	f8 94       	cli
    1428:	0f 92       	push	r0
    142a:	d8 01       	movw	r26, r16
    142c:	5a 96       	adiw	r26, 0x1a	; 26
    142e:	8c 91       	ld	r24, X
    1430:	5a 97       	sbiw	r26, 0x1a	; 26
    1432:	88 23       	and	r24, r24
    1434:	d9 f0       	breq	.+54     	; 0x146c <xQueueSemaphoreTake+0x7a>
    1436:	81 50       	subi	r24, 0x01	; 1
    1438:	5a 96       	adiw	r26, 0x1a	; 26
    143a:	8c 93       	st	X, r24
    143c:	5a 97       	sbiw	r26, 0x1a	; 26
    143e:	8d 91       	ld	r24, X+
    1440:	9c 91       	ld	r25, X
    1442:	89 2b       	or	r24, r25
    1444:	29 f4       	brne	.+10     	; 0x1450 <xQueueSemaphoreTake+0x5e>
    1446:	0e 94 75 12 	call	0x24ea	; 0x24ea <pvTaskIncrementMutexHeldCount>
    144a:	f8 01       	movw	r30, r16
    144c:	95 83       	std	Z+5, r25	; 0x05
    144e:	84 83       	std	Z+4, r24	; 0x04
    1450:	d8 01       	movw	r26, r16
    1452:	18 96       	adiw	r26, 0x08	; 8
    1454:	8c 91       	ld	r24, X
    1456:	88 23       	and	r24, r24
    1458:	29 f0       	breq	.+10     	; 0x1464 <xQueueSemaphoreTake+0x72>
    145a:	c8 01       	movw	r24, r16
    145c:	08 96       	adiw	r24, 0x08	; 8
    145e:	a4 d6       	rcall	.+3400   	; 0x21a8 <xTaskRemoveFromEventList>
    1460:	81 11       	cpse	r24, r1
    1462:	50 dc       	rcall	.-1888   	; 0xd04 <vPortYield>
    1464:	0f 90       	pop	r0
    1466:	0f be       	out	0x3f, r0	; 63
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	70 c0       	rjmp	.+224    	; 0x154c <xQueueSemaphoreTake+0x15a>
    146c:	8c 81       	ldd	r24, Y+4	; 0x04
    146e:	9d 81       	ldd	r25, Y+5	; 0x05
    1470:	89 2b       	or	r24, r25
    1472:	21 f4       	brne	.+8      	; 0x147c <xQueueSemaphoreTake+0x8a>
    1474:	0f 90       	pop	r0
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	68 c0       	rjmp	.+208    	; 0x154c <xQueueSemaphoreTake+0x15a>
    147c:	d1 10       	cpse	r13, r1
    147e:	04 c0       	rjmp	.+8      	; 0x1488 <xQueueSemaphoreTake+0x96>
    1480:	ce 01       	movw	r24, r28
    1482:	01 96       	adiw	r24, 0x01	; 1
    1484:	d9 d6       	rcall	.+3506   	; 0x2238 <vTaskInternalSetTimeOutState>
    1486:	dc 2c       	mov	r13, r12
    1488:	0f 90       	pop	r0
    148a:	0f be       	out	0x3f, r0	; 63
    148c:	7e d4       	rcall	.+2300   	; 0x1d8a <vTaskSuspendAll>
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	0f 92       	push	r0
    1494:	f8 01       	movw	r30, r16
    1496:	85 8d       	ldd	r24, Z+29	; 0x1d
    1498:	8f 3f       	cpi	r24, 0xFF	; 255
    149a:	09 f4       	brne	.+2      	; 0x149e <xQueueSemaphoreTake+0xac>
    149c:	15 8e       	std	Z+29, r1	; 0x1d
    149e:	d8 01       	movw	r26, r16
    14a0:	5e 96       	adiw	r26, 0x1e	; 30
    14a2:	8c 91       	ld	r24, X
    14a4:	5e 97       	sbiw	r26, 0x1e	; 30
    14a6:	8f 3f       	cpi	r24, 0xFF	; 255
    14a8:	11 f4       	brne	.+4      	; 0x14ae <xQueueSemaphoreTake+0xbc>
    14aa:	5e 96       	adiw	r26, 0x1e	; 30
    14ac:	1c 92       	st	X, r1
    14ae:	0f 90       	pop	r0
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	be 01       	movw	r22, r28
    14b4:	6c 5f       	subi	r22, 0xFC	; 252
    14b6:	7f 4f       	sbci	r23, 0xFF	; 255
    14b8:	ce 01       	movw	r24, r28
    14ba:	01 96       	adiw	r24, 0x01	; 1
    14bc:	c8 d6       	rcall	.+3472   	; 0x224e <xTaskCheckForTimeOut>
    14be:	81 11       	cpse	r24, r1
    14c0:	21 c0       	rjmp	.+66     	; 0x1504 <xQueueSemaphoreTake+0x112>
    14c2:	c8 01       	movw	r24, r16
    14c4:	e6 dc       	rcall	.-1588   	; 0xe92 <prvIsQueueEmpty>
    14c6:	88 23       	and	r24, r24
    14c8:	c9 f0       	breq	.+50     	; 0x14fc <xQueueSemaphoreTake+0x10a>
    14ca:	f8 01       	movw	r30, r16
    14cc:	80 81       	ld	r24, Z
    14ce:	91 81       	ldd	r25, Z+1	; 0x01
    14d0:	89 2b       	or	r24, r25
    14d2:	49 f4       	brne	.+18     	; 0x14e6 <xQueueSemaphoreTake+0xf4>
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	f8 94       	cli
    14d8:	0f 92       	push	r0
    14da:	84 81       	ldd	r24, Z+4	; 0x04
    14dc:	95 81       	ldd	r25, Z+5	; 0x05
    14de:	03 d7       	rcall	.+3590   	; 0x22e6 <xTaskPriorityInherit>
    14e0:	b8 2e       	mov	r11, r24
    14e2:	0f 90       	pop	r0
    14e4:	0f be       	out	0x3f, r0	; 63
    14e6:	6c 81       	ldd	r22, Y+4	; 0x04
    14e8:	7d 81       	ldd	r23, Y+5	; 0x05
    14ea:	c7 01       	movw	r24, r14
    14ec:	34 d6       	rcall	.+3176   	; 0x2156 <vTaskPlaceOnEventList>
    14ee:	c8 01       	movw	r24, r16
    14f0:	54 dd       	rcall	.-1368   	; 0xf9a <prvUnlockQueue>
    14f2:	15 d5       	rcall	.+2602   	; 0x1f1e <xTaskResumeAll>
    14f4:	81 11       	cpse	r24, r1
    14f6:	96 cf       	rjmp	.-212    	; 0x1424 <xQueueSemaphoreTake+0x32>
    14f8:	05 dc       	rcall	.-2038   	; 0xd04 <vPortYield>
    14fa:	94 cf       	rjmp	.-216    	; 0x1424 <xQueueSemaphoreTake+0x32>
    14fc:	c8 01       	movw	r24, r16
    14fe:	4d dd       	rcall	.-1382   	; 0xf9a <prvUnlockQueue>
    1500:	0e d5       	rcall	.+2588   	; 0x1f1e <xTaskResumeAll>
    1502:	90 cf       	rjmp	.-224    	; 0x1424 <xQueueSemaphoreTake+0x32>
    1504:	c8 01       	movw	r24, r16
    1506:	49 dd       	rcall	.-1390   	; 0xf9a <prvUnlockQueue>
    1508:	0a d5       	rcall	.+2580   	; 0x1f1e <xTaskResumeAll>
    150a:	c8 01       	movw	r24, r16
    150c:	c2 dc       	rcall	.-1660   	; 0xe92 <prvIsQueueEmpty>
    150e:	88 23       	and	r24, r24
    1510:	09 f4       	brne	.+2      	; 0x1514 <xQueueSemaphoreTake+0x122>
    1512:	88 cf       	rjmp	.-240    	; 0x1424 <xQueueSemaphoreTake+0x32>
    1514:	bb 20       	and	r11, r11
    1516:	c9 f0       	breq	.+50     	; 0x154a <xQueueSemaphoreTake+0x158>
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	f8 94       	cli
    151c:	0f 92       	push	r0
    151e:	f8 01       	movw	r30, r16
    1520:	81 89       	ldd	r24, Z+17	; 0x11
    1522:	88 23       	and	r24, r24
    1524:	39 f0       	breq	.+14     	; 0x1534 <xQueueSemaphoreTake+0x142>
    1526:	06 88       	ldd	r0, Z+22	; 0x16
    1528:	f7 89       	ldd	r31, Z+23	; 0x17
    152a:	e0 2d       	mov	r30, r0
    152c:	80 81       	ld	r24, Z
    152e:	64 e0       	ldi	r22, 0x04	; 4
    1530:	68 1b       	sub	r22, r24
    1532:	01 c0       	rjmp	.+2      	; 0x1536 <xQueueSemaphoreTake+0x144>
    1534:	60 e0       	ldi	r22, 0x00	; 0
    1536:	d8 01       	movw	r26, r16
    1538:	14 96       	adiw	r26, 0x04	; 4
    153a:	8d 91       	ld	r24, X+
    153c:	9c 91       	ld	r25, X
    153e:	15 97       	sbiw	r26, 0x05	; 5
    1540:	84 d7       	rcall	.+3848   	; 0x244a <vTaskPriorityDisinheritAfterTimeout>
    1542:	0f 90       	pop	r0
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	80 e0       	ldi	r24, 0x00	; 0
    1548:	01 c0       	rjmp	.+2      	; 0x154c <xQueueSemaphoreTake+0x15a>
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	1f 91       	pop	r17
    155c:	0f 91       	pop	r16
    155e:	ff 90       	pop	r15
    1560:	ef 90       	pop	r14
    1562:	df 90       	pop	r13
    1564:	cf 90       	pop	r12
    1566:	bf 90       	pop	r11
    1568:	08 95       	ret

0000156a <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    156a:	cf 93       	push	r28
    156c:	df 93       	push	r29
    156e:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	f8 94       	cli
    1574:	0f 92       	push	r0
    1576:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1578:	8f 3f       	cpi	r24, 0xFF	; 255
    157a:	09 f4       	brne	.+2      	; 0x157e <vQueueWaitForMessageRestricted+0x14>
    157c:	1d 8e       	std	Y+29, r1	; 0x1d
    157e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1580:	8f 3f       	cpi	r24, 0xFF	; 255
    1582:	09 f4       	brne	.+2      	; 0x1586 <vQueueWaitForMessageRestricted+0x1c>
    1584:	1e 8e       	std	Y+30, r1	; 0x1e
    1586:	0f 90       	pop	r0
    1588:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    158a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    158c:	81 11       	cpse	r24, r1
    158e:	03 c0       	rjmp	.+6      	; 0x1596 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1590:	ce 01       	movw	r24, r28
    1592:	41 96       	adiw	r24, 0x11	; 17
    1594:	f1 d5       	rcall	.+3042   	; 0x2178 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1596:	ce 01       	movw	r24, r28
    1598:	00 dd       	rcall	.-1536   	; 0xf9a <prvUnlockQueue>
    }
    159a:	df 91       	pop	r29
    159c:	cf 91       	pop	r28
    159e:	08 95       	ret

000015a0 <prvBytesInBuffer>:
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    15a0:	fc 01       	movw	r30, r24
    15a2:	44 81       	ldd	r20, Z+4	; 0x04
    15a4:	55 81       	ldd	r21, Z+5	; 0x05
    15a6:	22 81       	ldd	r18, Z+2	; 0x02
    15a8:	33 81       	ldd	r19, Z+3	; 0x03
    15aa:	24 0f       	add	r18, r20
    15ac:	35 1f       	adc	r19, r21
    15ae:	80 81       	ld	r24, Z
    15b0:	91 81       	ldd	r25, Z+1	; 0x01
    15b2:	b9 01       	movw	r22, r18
    15b4:	68 1b       	sub	r22, r24
    15b6:	79 0b       	sbc	r23, r25
    15b8:	cb 01       	movw	r24, r22
    15ba:	64 17       	cp	r22, r20
    15bc:	75 07       	cpc	r23, r21
    15be:	10 f0       	brcs	.+4      	; 0x15c4 <prvBytesInBuffer+0x24>
    15c0:	84 1b       	sub	r24, r20
    15c2:	95 0b       	sbc	r25, r21
    15c4:	08 95       	ret

000015c6 <prvWriteBytesToBuffer>:
    15c6:	af 92       	push	r10
    15c8:	bf 92       	push	r11
    15ca:	cf 92       	push	r12
    15cc:	df 92       	push	r13
    15ce:	ef 92       	push	r14
    15d0:	ff 92       	push	r15
    15d2:	0f 93       	push	r16
    15d4:	1f 93       	push	r17
    15d6:	cf 93       	push	r28
    15d8:	df 93       	push	r29
    15da:	6c 01       	movw	r12, r24
    15dc:	5b 01       	movw	r10, r22
    15de:	7a 01       	movw	r14, r20
    15e0:	fc 01       	movw	r30, r24
    15e2:	c2 81       	ldd	r28, Z+2	; 0x02
    15e4:	d3 81       	ldd	r29, Z+3	; 0x03
    15e6:	04 81       	ldd	r16, Z+4	; 0x04
    15e8:	15 81       	ldd	r17, Z+5	; 0x05
    15ea:	0c 1b       	sub	r16, r28
    15ec:	1d 0b       	sbc	r17, r29
    15ee:	40 17       	cp	r20, r16
    15f0:	51 07       	cpc	r21, r17
    15f2:	08 f4       	brcc	.+2      	; 0x15f6 <prvWriteBytesToBuffer+0x30>
    15f4:	8a 01       	movw	r16, r20
    15f6:	f6 01       	movw	r30, r12
    15f8:	84 85       	ldd	r24, Z+12	; 0x0c
    15fa:	95 85       	ldd	r25, Z+13	; 0x0d
    15fc:	a8 01       	movw	r20, r16
    15fe:	b5 01       	movw	r22, r10
    1600:	8c 0f       	add	r24, r28
    1602:	9d 1f       	adc	r25, r29
    1604:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <memcpy>
    1608:	0e 15       	cp	r16, r14
    160a:	1f 05       	cpc	r17, r15
    160c:	58 f4       	brcc	.+22     	; 0x1624 <prvWriteBytesToBuffer+0x5e>
    160e:	a7 01       	movw	r20, r14
    1610:	40 1b       	sub	r20, r16
    1612:	51 0b       	sbc	r21, r17
    1614:	b5 01       	movw	r22, r10
    1616:	60 0f       	add	r22, r16
    1618:	71 1f       	adc	r23, r17
    161a:	f6 01       	movw	r30, r12
    161c:	84 85       	ldd	r24, Z+12	; 0x0c
    161e:	95 85       	ldd	r25, Z+13	; 0x0d
    1620:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <memcpy>
    1624:	ce 01       	movw	r24, r28
    1626:	8e 0d       	add	r24, r14
    1628:	9f 1d       	adc	r25, r15
    162a:	f6 01       	movw	r30, r12
    162c:	24 81       	ldd	r18, Z+4	; 0x04
    162e:	35 81       	ldd	r19, Z+5	; 0x05
    1630:	82 17       	cp	r24, r18
    1632:	93 07       	cpc	r25, r19
    1634:	10 f0       	brcs	.+4      	; 0x163a <prvWriteBytesToBuffer+0x74>
    1636:	82 1b       	sub	r24, r18
    1638:	93 0b       	sbc	r25, r19
    163a:	f6 01       	movw	r30, r12
    163c:	93 83       	std	Z+3, r25	; 0x03
    163e:	82 83       	std	Z+2, r24	; 0x02
    1640:	c7 01       	movw	r24, r14
    1642:	df 91       	pop	r29
    1644:	cf 91       	pop	r28
    1646:	1f 91       	pop	r17
    1648:	0f 91       	pop	r16
    164a:	ff 90       	pop	r15
    164c:	ef 90       	pop	r14
    164e:	df 90       	pop	r13
    1650:	cf 90       	pop	r12
    1652:	bf 90       	pop	r11
    1654:	af 90       	pop	r10
    1656:	08 95       	ret

00001658 <prvWriteMessageToBuffer>:
    1658:	cf 92       	push	r12
    165a:	df 92       	push	r13
    165c:	ef 92       	push	r14
    165e:	ff 92       	push	r15
    1660:	0f 93       	push	r16
    1662:	1f 93       	push	r17
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
    1668:	1f 92       	push	r1
    166a:	1f 92       	push	r1
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    1670:	5a 83       	std	Y+2, r21	; 0x02
    1672:	49 83       	std	Y+1, r20	; 0x01
    1674:	21 15       	cp	r18, r1
    1676:	31 05       	cpc	r19, r1
    1678:	c9 f0       	breq	.+50     	; 0x16ac <prvWriteMessageToBuffer+0x54>
    167a:	6b 01       	movw	r12, r22
    167c:	7c 01       	movw	r14, r24
    167e:	fc 01       	movw	r30, r24
    1680:	86 85       	ldd	r24, Z+14	; 0x0e
    1682:	80 fd       	sbrc	r24, 0
    1684:	08 c0       	rjmp	.+16     	; 0x1696 <prvWriteMessageToBuffer+0x3e>
    1686:	ca 01       	movw	r24, r20
    1688:	24 17       	cp	r18, r20
    168a:	35 07       	cpc	r19, r21
    168c:	08 f4       	brcc	.+2      	; 0x1690 <prvWriteMessageToBuffer+0x38>
    168e:	c9 01       	movw	r24, r18
    1690:	9a 83       	std	Y+2, r25	; 0x02
    1692:	89 83       	std	Y+1, r24	; 0x01
    1694:	11 c0       	rjmp	.+34     	; 0x16b8 <prvWriteMessageToBuffer+0x60>
    1696:	20 17       	cp	r18, r16
    1698:	31 07       	cpc	r19, r17
    169a:	58 f0       	brcs	.+22     	; 0x16b2 <prvWriteMessageToBuffer+0x5a>
    169c:	42 e0       	ldi	r20, 0x02	; 2
    169e:	50 e0       	ldi	r21, 0x00	; 0
    16a0:	be 01       	movw	r22, r28
    16a2:	6f 5f       	subi	r22, 0xFF	; 255
    16a4:	7f 4f       	sbci	r23, 0xFF	; 255
    16a6:	c7 01       	movw	r24, r14
    16a8:	8e df       	rcall	.-228    	; 0x15c6 <prvWriteBytesToBuffer>
    16aa:	06 c0       	rjmp	.+12     	; 0x16b8 <prvWriteMessageToBuffer+0x60>
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	08 c0       	rjmp	.+16     	; 0x16c2 <prvWriteMessageToBuffer+0x6a>
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	05 c0       	rjmp	.+10     	; 0x16c2 <prvWriteMessageToBuffer+0x6a>
    16b8:	49 81       	ldd	r20, Y+1	; 0x01
    16ba:	5a 81       	ldd	r21, Y+2	; 0x02
    16bc:	b6 01       	movw	r22, r12
    16be:	c7 01       	movw	r24, r14
    16c0:	82 df       	rcall	.-252    	; 0x15c6 <prvWriteBytesToBuffer>
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
    16c6:	df 91       	pop	r29
    16c8:	cf 91       	pop	r28
    16ca:	1f 91       	pop	r17
    16cc:	0f 91       	pop	r16
    16ce:	ff 90       	pop	r15
    16d0:	ef 90       	pop	r14
    16d2:	df 90       	pop	r13
    16d4:	cf 90       	pop	r12
    16d6:	08 95       	ret

000016d8 <prvReadBytesFromBuffer>:
    16d8:	af 92       	push	r10
    16da:	bf 92       	push	r11
    16dc:	cf 92       	push	r12
    16de:	df 92       	push	r13
    16e0:	ef 92       	push	r14
    16e2:	ff 92       	push	r15
    16e4:	0f 93       	push	r16
    16e6:	1f 93       	push	r17
    16e8:	cf 93       	push	r28
    16ea:	df 93       	push	r29
    16ec:	7c 01       	movw	r14, r24
    16ee:	5b 01       	movw	r10, r22
    16f0:	e9 01       	movw	r28, r18
    16f2:	42 17       	cp	r20, r18
    16f4:	53 07       	cpc	r21, r19
    16f6:	08 f4       	brcc	.+2      	; 0x16fa <prvReadBytesFromBuffer+0x22>
    16f8:	ea 01       	movw	r28, r20
    16fa:	20 97       	sbiw	r28, 0x00	; 0
    16fc:	79 f1       	breq	.+94     	; 0x175c <prvReadBytesFromBuffer+0x84>
    16fe:	f7 01       	movw	r30, r14
    1700:	00 81       	ld	r16, Z
    1702:	11 81       	ldd	r17, Z+1	; 0x01
    1704:	c4 80       	ldd	r12, Z+4	; 0x04
    1706:	d5 80       	ldd	r13, Z+5	; 0x05
    1708:	c0 1a       	sub	r12, r16
    170a:	d1 0a       	sbc	r13, r17
    170c:	cc 15       	cp	r28, r12
    170e:	dd 05       	cpc	r29, r13
    1710:	08 f4       	brcc	.+2      	; 0x1714 <prvReadBytesFromBuffer+0x3c>
    1712:	6e 01       	movw	r12, r28
    1714:	f7 01       	movw	r30, r14
    1716:	64 85       	ldd	r22, Z+12	; 0x0c
    1718:	75 85       	ldd	r23, Z+13	; 0x0d
    171a:	60 0f       	add	r22, r16
    171c:	71 1f       	adc	r23, r17
    171e:	a6 01       	movw	r20, r12
    1720:	c5 01       	movw	r24, r10
    1722:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <memcpy>
    1726:	cc 16       	cp	r12, r28
    1728:	dd 06       	cpc	r13, r29
    172a:	58 f4       	brcc	.+22     	; 0x1742 <prvReadBytesFromBuffer+0x6a>
    172c:	ae 01       	movw	r20, r28
    172e:	4c 19       	sub	r20, r12
    1730:	5d 09       	sbc	r21, r13
    1732:	f7 01       	movw	r30, r14
    1734:	64 85       	ldd	r22, Z+12	; 0x0c
    1736:	75 85       	ldd	r23, Z+13	; 0x0d
    1738:	c5 01       	movw	r24, r10
    173a:	8c 0d       	add	r24, r12
    173c:	9d 1d       	adc	r25, r13
    173e:	0e 94 0f 27 	call	0x4e1e	; 0x4e1e <memcpy>
    1742:	0c 0f       	add	r16, r28
    1744:	1d 1f       	adc	r17, r29
    1746:	f7 01       	movw	r30, r14
    1748:	84 81       	ldd	r24, Z+4	; 0x04
    174a:	95 81       	ldd	r25, Z+5	; 0x05
    174c:	08 17       	cp	r16, r24
    174e:	19 07       	cpc	r17, r25
    1750:	10 f0       	brcs	.+4      	; 0x1756 <prvReadBytesFromBuffer+0x7e>
    1752:	08 1b       	sub	r16, r24
    1754:	19 0b       	sbc	r17, r25
    1756:	f7 01       	movw	r30, r14
    1758:	11 83       	std	Z+1, r17	; 0x01
    175a:	00 83       	st	Z, r16
    175c:	ce 01       	movw	r24, r28
    175e:	df 91       	pop	r29
    1760:	cf 91       	pop	r28
    1762:	1f 91       	pop	r17
    1764:	0f 91       	pop	r16
    1766:	ff 90       	pop	r15
    1768:	ef 90       	pop	r14
    176a:	df 90       	pop	r13
    176c:	cf 90       	pop	r12
    176e:	bf 90       	pop	r11
    1770:	af 90       	pop	r10
    1772:	08 95       	ret

00001774 <xStreamBufferGenericCreate>:
    1774:	ef 92       	push	r14
    1776:	ff 92       	push	r15
    1778:	1f 93       	push	r17
    177a:	cf 93       	push	r28
    177c:	df 93       	push	r29
    177e:	eb 01       	movw	r28, r22
    1780:	11 e0       	ldi	r17, 0x01	; 1
    1782:	41 30       	cpi	r20, 0x01	; 1
    1784:	09 f0       	breq	.+2      	; 0x1788 <xStreamBufferGenericCreate+0x14>
    1786:	10 e0       	ldi	r17, 0x00	; 0
    1788:	20 97       	sbiw	r28, 0x00	; 0
    178a:	11 f4       	brne	.+4      	; 0x1790 <xStreamBufferGenericCreate+0x1c>
    178c:	c1 e0       	ldi	r28, 0x01	; 1
    178e:	d0 e0       	ldi	r29, 0x00	; 0
    1790:	7c 01       	movw	r14, r24
    1792:	2f ef       	ldi	r18, 0xFF	; 255
    1794:	e2 1a       	sub	r14, r18
    1796:	f2 0a       	sbc	r15, r18
    1798:	41 96       	adiw	r24, 0x11	; 17
    179a:	59 d9       	rcall	.-3406   	; 0xa4e <pvPortMalloc>
    179c:	00 97       	sbiw	r24, 0x00	; 0
    179e:	81 f0       	breq	.+32     	; 0x17c0 <xStreamBufferGenericCreate+0x4c>
    17a0:	20 e1       	ldi	r18, 0x10	; 16
    17a2:	fc 01       	movw	r30, r24
    17a4:	11 92       	st	Z+, r1
    17a6:	2a 95       	dec	r18
    17a8:	e9 f7       	brne	.-6      	; 0x17a4 <xStreamBufferGenericCreate+0x30>
    17aa:	9c 01       	movw	r18, r24
    17ac:	20 5f       	subi	r18, 0xF0	; 240
    17ae:	3f 4f       	sbci	r19, 0xFF	; 255
    17b0:	fc 01       	movw	r30, r24
    17b2:	35 87       	std	Z+13, r19	; 0x0d
    17b4:	24 87       	std	Z+12, r18	; 0x0c
    17b6:	f5 82       	std	Z+5, r15	; 0x05
    17b8:	e4 82       	std	Z+4, r14	; 0x04
    17ba:	d7 83       	std	Z+7, r29	; 0x07
    17bc:	c6 83       	std	Z+6, r28	; 0x06
    17be:	16 87       	std	Z+14, r17	; 0x0e
    17c0:	df 91       	pop	r29
    17c2:	cf 91       	pop	r28
    17c4:	1f 91       	pop	r17
    17c6:	ff 90       	pop	r15
    17c8:	ef 90       	pop	r14
    17ca:	08 95       	ret

000017cc <xStreamBufferReset>:
    17cc:	cf 93       	push	r28
    17ce:	df 93       	push	r29
    17d0:	fc 01       	movw	r30, r24
    17d2:	27 85       	ldd	r18, Z+15	; 0x0f
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	f8 94       	cli
    17d8:	0f 92       	push	r0
    17da:	80 85       	ldd	r24, Z+8	; 0x08
    17dc:	91 85       	ldd	r25, Z+9	; 0x09
    17de:	89 2b       	or	r24, r25
    17e0:	d1 f4       	brne	.+52     	; 0x1816 <xStreamBufferReset+0x4a>
    17e2:	82 85       	ldd	r24, Z+10	; 0x0a
    17e4:	93 85       	ldd	r25, Z+11	; 0x0b
    17e6:	89 2b       	or	r24, r25
    17e8:	c1 f4       	brne	.+48     	; 0x181a <xStreamBufferReset+0x4e>
    17ea:	86 85       	ldd	r24, Z+14	; 0x0e
    17ec:	46 81       	ldd	r20, Z+6	; 0x06
    17ee:	57 81       	ldd	r21, Z+7	; 0x07
    17f0:	64 81       	ldd	r22, Z+4	; 0x04
    17f2:	75 81       	ldd	r23, Z+5	; 0x05
    17f4:	a4 85       	ldd	r26, Z+12	; 0x0c
    17f6:	b5 85       	ldd	r27, Z+13	; 0x0d
    17f8:	90 e1       	ldi	r25, 0x10	; 16
    17fa:	ef 01       	movw	r28, r30
    17fc:	19 92       	st	Y+, r1
    17fe:	9a 95       	dec	r25
    1800:	e9 f7       	brne	.-6      	; 0x17fc <xStreamBufferReset+0x30>
    1802:	b5 87       	std	Z+13, r27	; 0x0d
    1804:	a4 87       	std	Z+12, r26	; 0x0c
    1806:	75 83       	std	Z+5, r23	; 0x05
    1808:	64 83       	std	Z+4, r22	; 0x04
    180a:	57 83       	std	Z+7, r21	; 0x07
    180c:	46 83       	std	Z+6, r20	; 0x06
    180e:	86 87       	std	Z+14, r24	; 0x0e
    1810:	27 87       	std	Z+15, r18	; 0x0f
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	03 c0       	rjmp	.+6      	; 0x181c <xStreamBufferReset+0x50>
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	01 c0       	rjmp	.+2      	; 0x181c <xStreamBufferReset+0x50>
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	0f 90       	pop	r0
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	df 91       	pop	r29
    1822:	cf 91       	pop	r28
    1824:	08 95       	ret

00001826 <xStreamBufferSpacesAvailable>:
    1826:	fc 01       	movw	r30, r24
    1828:	24 81       	ldd	r18, Z+4	; 0x04
    182a:	35 81       	ldd	r19, Z+5	; 0x05
    182c:	80 81       	ld	r24, Z
    182e:	91 81       	ldd	r25, Z+1	; 0x01
    1830:	42 81       	ldd	r20, Z+2	; 0x02
    1832:	53 81       	ldd	r21, Z+3	; 0x03
    1834:	82 0f       	add	r24, r18
    1836:	93 1f       	adc	r25, r19
    1838:	01 97       	sbiw	r24, 0x01	; 1
    183a:	84 1b       	sub	r24, r20
    183c:	95 0b       	sbc	r25, r21
    183e:	82 17       	cp	r24, r18
    1840:	93 07       	cpc	r25, r19
    1842:	10 f0       	brcs	.+4      	; 0x1848 <xStreamBufferSpacesAvailable+0x22>
    1844:	82 1b       	sub	r24, r18
    1846:	93 0b       	sbc	r25, r19
    1848:	08 95       	ret

0000184a <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    184a:	af 92       	push	r10
    184c:	bf 92       	push	r11
    184e:	cf 92       	push	r12
    1850:	df 92       	push	r13
    1852:	ef 92       	push	r14
    1854:	ff 92       	push	r15
    1856:	0f 93       	push	r16
    1858:	1f 93       	push	r17
    185a:	cf 93       	push	r28
    185c:	df 93       	push	r29
    185e:	ec 01       	movw	r28, r24
    1860:	5b 01       	movw	r10, r22
    1862:	6a 01       	movw	r12, r20
    1864:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1866:	8e 85       	ldd	r24, Y+14	; 0x0e
    1868:	80 ff       	sbrs	r24, 0
    186a:	04 c0       	rjmp	.+8      	; 0x1874 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    186c:	8a 01       	movw	r16, r20
    186e:	0e 5f       	subi	r16, 0xFE	; 254
    1870:	1f 4f       	sbci	r17, 0xFF	; 255
    1872:	01 c0       	rjmp	.+2      	; 0x1876 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    1874:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1876:	ce 01       	movw	r24, r28
    1878:	d6 df       	rcall	.-84     	; 0x1826 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    187a:	9c 01       	movw	r18, r24
    187c:	a6 01       	movw	r20, r12
    187e:	b5 01       	movw	r22, r10
    1880:	ce 01       	movw	r24, r28
    1882:	ea de       	rcall	.-556    	; 0x1658 <prvWriteMessageToBuffer>
    1884:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1886:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1888:	b1 f0       	breq	.+44     	; 0x18b6 <xStreamBufferSendFromISR+0x6c>
    188a:	ce 01       	movw	r24, r28
    188c:	89 de       	rcall	.-750    	; 0x15a0 <prvBytesInBuffer>
    188e:	2e 81       	ldd	r18, Y+6	; 0x06
    1890:	3f 81       	ldd	r19, Y+7	; 0x07
    1892:	82 17       	cp	r24, r18
    1894:	93 07       	cpc	r25, r19
    1896:	78 f0       	brcs	.+30     	; 0x18b6 <xStreamBufferSendFromISR+0x6c>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1898:	88 85       	ldd	r24, Y+8	; 0x08
    189a:	99 85       	ldd	r25, Y+9	; 0x09
    189c:	89 2b       	or	r24, r25
    189e:	59 f0       	breq	.+22     	; 0x18b6 <xStreamBufferSendFromISR+0x6c>
    18a0:	88 85       	ldd	r24, Y+8	; 0x08
    18a2:	99 85       	ldd	r25, Y+9	; 0x09
    18a4:	00 e0       	ldi	r16, 0x00	; 0
    18a6:	10 e0       	ldi	r17, 0x00	; 0
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	40 e0       	ldi	r20, 0x00	; 0
    18ac:	50 e0       	ldi	r21, 0x00	; 0
    18ae:	ba 01       	movw	r22, r20
    18b0:	2f d7       	rcall	.+3678   	; 0x2710 <xTaskGenericNotifyFromISR>
    18b2:	19 86       	std	Y+9, r1	; 0x09
    18b4:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    18b6:	c6 01       	movw	r24, r12
    18b8:	df 91       	pop	r29
    18ba:	cf 91       	pop	r28
    18bc:	1f 91       	pop	r17
    18be:	0f 91       	pop	r16
    18c0:	ff 90       	pop	r15
    18c2:	ef 90       	pop	r14
    18c4:	df 90       	pop	r13
    18c6:	cf 90       	pop	r12
    18c8:	bf 90       	pop	r11
    18ca:	af 90       	pop	r10
    18cc:	08 95       	ret

000018ce <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    18ce:	6f 92       	push	r6
    18d0:	7f 92       	push	r7
    18d2:	8f 92       	push	r8
    18d4:	9f 92       	push	r9
    18d6:	af 92       	push	r10
    18d8:	bf 92       	push	r11
    18da:	cf 92       	push	r12
    18dc:	df 92       	push	r13
    18de:	ef 92       	push	r14
    18e0:	ff 92       	push	r15
    18e2:	0f 93       	push	r16
    18e4:	1f 93       	push	r17
    18e6:	cf 93       	push	r28
    18e8:	df 93       	push	r29
    18ea:	1f 92       	push	r1
    18ec:	1f 92       	push	r1
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
    18f2:	6c 01       	movw	r12, r24
    18f4:	3b 01       	movw	r6, r22
    18f6:	4a 01       	movw	r8, r20
    18f8:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    18fa:	fc 01       	movw	r30, r24
    18fc:	86 85       	ldd	r24, Z+14	; 0x0e
    18fe:	80 fd       	sbrc	r24, 0
    1900:	03 c0       	rjmp	.+6      	; 0x1908 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1902:	a1 2c       	mov	r10, r1
    1904:	b1 2c       	mov	r11, r1
    1906:	04 c0       	rjmp	.+8      	; 0x1910 <xStreamBufferReceive+0x42>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1908:	68 94       	set
    190a:	aa 24       	eor	r10, r10
    190c:	a1 f8       	bld	r10, 1
    190e:	b1 2c       	mov	r11, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1910:	e1 14       	cp	r14, r1
    1912:	f1 04       	cpc	r15, r1
    1914:	29 f1       	breq	.+74     	; 0x1960 <xStreamBufferReceive+0x92>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	f8 94       	cli
    191a:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    191c:	c6 01       	movw	r24, r12
    191e:	40 de       	rcall	.-896    	; 0x15a0 <prvBytesInBuffer>
    1920:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1922:	a8 16       	cp	r10, r24
    1924:	b9 06       	cpc	r11, r25
    1926:	38 f0       	brcs	.+14     	; 0x1936 <xStreamBufferReceive+0x68>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	90 e0       	ldi	r25, 0x00	; 0

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    192c:	81 d7       	rcall	.+3842   	; 0x2830 <xTaskNotifyStateClear>
    192e:	c8 d4       	rcall	.+2448   	; 0x22c0 <xTaskGetCurrentTaskHandle>
    1930:	f6 01       	movw	r30, r12
    1932:	91 87       	std	Z+9, r25	; 0x09
    1934:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1936:	0f 90       	pop	r0
    1938:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    193a:	a0 16       	cp	r10, r16
    193c:	b1 06       	cpc	r11, r17
    193e:	b0 f0       	brcs	.+44     	; 0x196c <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1940:	00 e0       	ldi	r16, 0x00	; 0
    1942:	10 e0       	ldi	r17, 0x00	; 0
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	a9 01       	movw	r20, r18
    194a:	60 e0       	ldi	r22, 0x00	; 0
    194c:	70 e0       	ldi	r23, 0x00	; 0
    194e:	cb 01       	movw	r24, r22
    1950:	de d5       	rcall	.+3004   	; 0x250e <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1952:	f6 01       	movw	r30, r12
    1954:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1956:	10 86       	std	Z+8, r1	; 0x08
    1958:	c6 01       	movw	r24, r12
    195a:	22 de       	rcall	.-956    	; 0x15a0 <prvBytesInBuffer>
    195c:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    195e:	03 c0       	rjmp	.+6      	; 0x1966 <xStreamBufferReceive+0x98>
    1960:	c6 01       	movw	r24, r12
    1962:	1e de       	rcall	.-964    	; 0x15a0 <prvBytesInBuffer>
    1964:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1966:	a0 16       	cp	r10, r16
    1968:	b1 06       	cpc	r11, r17
    196a:	b8 f5       	brcc	.+110    	; 0x19da <xStreamBufferReceive+0x10c>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    196c:	a1 14       	cp	r10, r1
    196e:	b1 04       	cpc	r11, r1
    1970:	c1 f0       	breq	.+48     	; 0x19a2 <xStreamBufferReceive+0xd4>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    1972:	f6 01       	movw	r30, r12
    1974:	e0 80       	ld	r14, Z
    1976:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    1978:	98 01       	movw	r18, r16
    197a:	a5 01       	movw	r20, r10
    197c:	be 01       	movw	r22, r28
    197e:	6f 5f       	subi	r22, 0xFF	; 255
    1980:	7f 4f       	sbci	r23, 0xFF	; 255
    1982:	c6 01       	movw	r24, r12
    1984:	a9 de       	rcall	.-686    	; 0x16d8 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    1986:	89 81       	ldd	r24, Y+1	; 0x01
    1988:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    198a:	0a 19       	sub	r16, r10
    198c:	1b 09       	sbc	r17, r11

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    198e:	88 16       	cp	r8, r24
    1990:	99 06       	cpc	r9, r25
    1992:	30 f4       	brcc	.+12     	; 0x19a0 <xStreamBufferReceive+0xd2>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    1994:	f6 01       	movw	r30, r12
    1996:	f1 82       	std	Z+1, r15	; 0x01
    1998:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    199a:	81 2c       	mov	r8, r1
    199c:	91 2c       	mov	r9, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    199e:	01 c0       	rjmp	.+2      	; 0x19a2 <xStreamBufferReceive+0xd4>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    19a0:	4c 01       	movw	r8, r24
    19a2:	98 01       	movw	r18, r16
    19a4:	a4 01       	movw	r20, r8
    19a6:	b3 01       	movw	r22, r6
    19a8:	c6 01       	movw	r24, r12
    19aa:	96 de       	rcall	.-724    	; 0x16d8 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    19ac:	7c 01       	movw	r14, r24
    19ae:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    19b0:	b1 f0       	breq	.+44     	; 0x19de <xStreamBufferReceive+0x110>
    19b2:	eb d1       	rcall	.+982    	; 0x1d8a <vTaskSuspendAll>
    19b4:	f6 01       	movw	r30, r12
    19b6:	82 85       	ldd	r24, Z+10	; 0x0a
    19b8:	93 85       	ldd	r25, Z+11	; 0x0b
    19ba:	89 2b       	or	r24, r25
    19bc:	61 f0       	breq	.+24     	; 0x19d6 <xStreamBufferReceive+0x108>
    19be:	82 85       	ldd	r24, Z+10	; 0x0a
    19c0:	93 85       	ldd	r25, Z+11	; 0x0b
    19c2:	00 e0       	ldi	r16, 0x00	; 0
    19c4:	10 e0       	ldi	r17, 0x00	; 0
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	40 e0       	ldi	r20, 0x00	; 0
    19ca:	50 e0       	ldi	r21, 0x00	; 0
    19cc:	ba 01       	movw	r22, r20
    19ce:	22 d6       	rcall	.+3140   	; 0x2614 <xTaskGenericNotify>
    19d0:	f6 01       	movw	r30, r12
    19d2:	13 86       	std	Z+11, r1	; 0x0b
    19d4:	12 86       	std	Z+10, r1	; 0x0a
    19d6:	a3 d2       	rcall	.+1350   	; 0x1f1e <xTaskResumeAll>
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <xStreamBufferReceive+0x110>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    19da:	e1 2c       	mov	r14, r1
    19dc:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    19de:	c7 01       	movw	r24, r14
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	df 91       	pop	r29
    19e6:	cf 91       	pop	r28
    19e8:	1f 91       	pop	r17
    19ea:	0f 91       	pop	r16
    19ec:	ff 90       	pop	r15
    19ee:	ef 90       	pop	r14
    19f0:	df 90       	pop	r13
    19f2:	cf 90       	pop	r12
    19f4:	bf 90       	pop	r11
    19f6:	af 90       	pop	r10
    19f8:	9f 90       	pop	r9
    19fa:	8f 90       	pop	r8
    19fc:	7f 90       	pop	r7
    19fe:	6f 90       	pop	r6
    1a00:	08 95       	ret

00001a02 <prvResetNextTaskUnblockTime>:
    1a02:	e0 91 46 08 	lds	r30, 0x0846	; 0x800846 <pxDelayedTaskList>
    1a06:	f0 91 47 08 	lds	r31, 0x0847	; 0x800847 <pxDelayedTaskList+0x1>
    1a0a:	80 81       	ld	r24, Z
    1a0c:	81 11       	cpse	r24, r1
    1a0e:	07 c0       	rjmp	.+14     	; 0x1a1e <prvResetNextTaskUnblockTime+0x1c>
    1a10:	8f ef       	ldi	r24, 0xFF	; 255
    1a12:	9f ef       	ldi	r25, 0xFF	; 255
    1a14:	90 93 1e 08 	sts	0x081E, r25	; 0x80081e <xNextTaskUnblockTime+0x1>
    1a18:	80 93 1d 08 	sts	0x081D, r24	; 0x80081d <xNextTaskUnblockTime>
    1a1c:	08 95       	ret
    1a1e:	e0 91 46 08 	lds	r30, 0x0846	; 0x800846 <pxDelayedTaskList>
    1a22:	f0 91 47 08 	lds	r31, 0x0847	; 0x800847 <pxDelayedTaskList+0x1>
    1a26:	05 80       	ldd	r0, Z+5	; 0x05
    1a28:	f6 81       	ldd	r31, Z+6	; 0x06
    1a2a:	e0 2d       	mov	r30, r0
    1a2c:	06 80       	ldd	r0, Z+6	; 0x06
    1a2e:	f7 81       	ldd	r31, Z+7	; 0x07
    1a30:	e0 2d       	mov	r30, r0
    1a32:	82 81       	ldd	r24, Z+2	; 0x02
    1a34:	93 81       	ldd	r25, Z+3	; 0x03
    1a36:	90 93 1e 08 	sts	0x081E, r25	; 0x80081e <xNextTaskUnblockTime+0x1>
    1a3a:	80 93 1d 08 	sts	0x081D, r24	; 0x80081d <xNextTaskUnblockTime>
    1a3e:	08 95       	ret

00001a40 <prvAddCurrentTaskToDelayedList>:
    1a40:	ff 92       	push	r15
    1a42:	0f 93       	push	r16
    1a44:	1f 93       	push	r17
    1a46:	cf 93       	push	r28
    1a48:	df 93       	push	r29
    1a4a:	ec 01       	movw	r28, r24
    1a4c:	f6 2e       	mov	r15, r22
    1a4e:	00 91 25 08 	lds	r16, 0x0825	; 0x800825 <xTickCount>
    1a52:	10 91 26 08 	lds	r17, 0x0826	; 0x800826 <xTickCount+0x1>
    1a56:	80 91 7e 08 	lds	r24, 0x087E	; 0x80087e <pxCurrentTCB>
    1a5a:	90 91 7f 08 	lds	r25, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    1a5e:	02 96       	adiw	r24, 0x02	; 2
    1a60:	7c d8       	rcall	.-3848   	; 0xb5a <uxListRemove>
    1a62:	cf 3f       	cpi	r28, 0xFF	; 255
    1a64:	8f ef       	ldi	r24, 0xFF	; 255
    1a66:	d8 07       	cpc	r29, r24
    1a68:	61 f4       	brne	.+24     	; 0x1a82 <prvAddCurrentTaskToDelayedList+0x42>
    1a6a:	ff 20       	and	r15, r15
    1a6c:	51 f0       	breq	.+20     	; 0x1a82 <prvAddCurrentTaskToDelayedList+0x42>
    1a6e:	60 91 7e 08 	lds	r22, 0x087E	; 0x80087e <pxCurrentTCB>
    1a72:	70 91 7f 08 	lds	r23, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    1a76:	6e 5f       	subi	r22, 0xFE	; 254
    1a78:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7a:	88 e2       	ldi	r24, 0x28	; 40
    1a7c:	98 e0       	ldi	r25, 0x08	; 8
    1a7e:	1b d8       	rcall	.-4042   	; 0xab6 <vListInsertEnd>
    1a80:	2d c0       	rjmp	.+90     	; 0x1adc <prvAddCurrentTaskToDelayedList+0x9c>
    1a82:	c0 0f       	add	r28, r16
    1a84:	d1 1f       	adc	r29, r17
    1a86:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    1a8a:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    1a8e:	d3 83       	std	Z+3, r29	; 0x03
    1a90:	c2 83       	std	Z+2, r28	; 0x02
    1a92:	c0 17       	cp	r28, r16
    1a94:	d1 07       	cpc	r29, r17
    1a96:	60 f4       	brcc	.+24     	; 0x1ab0 <prvAddCurrentTaskToDelayedList+0x70>
    1a98:	60 91 7e 08 	lds	r22, 0x087E	; 0x80087e <pxCurrentTCB>
    1a9c:	70 91 7f 08 	lds	r23, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    1aa0:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <pxOverflowDelayedTaskList>
    1aa4:	90 91 45 08 	lds	r25, 0x0845	; 0x800845 <pxOverflowDelayedTaskList+0x1>
    1aa8:	6e 5f       	subi	r22, 0xFE	; 254
    1aaa:	7f 4f       	sbci	r23, 0xFF	; 255
    1aac:	25 d8       	rcall	.-4022   	; 0xaf8 <vListInsert>
    1aae:	16 c0       	rjmp	.+44     	; 0x1adc <prvAddCurrentTaskToDelayedList+0x9c>
    1ab0:	60 91 7e 08 	lds	r22, 0x087E	; 0x80087e <pxCurrentTCB>
    1ab4:	70 91 7f 08 	lds	r23, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    1ab8:	80 91 46 08 	lds	r24, 0x0846	; 0x800846 <pxDelayedTaskList>
    1abc:	90 91 47 08 	lds	r25, 0x0847	; 0x800847 <pxDelayedTaskList+0x1>
    1ac0:	6e 5f       	subi	r22, 0xFE	; 254
    1ac2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac4:	19 d8       	rcall	.-4046   	; 0xaf8 <vListInsert>
    1ac6:	80 91 1d 08 	lds	r24, 0x081D	; 0x80081d <xNextTaskUnblockTime>
    1aca:	90 91 1e 08 	lds	r25, 0x081E	; 0x80081e <xNextTaskUnblockTime+0x1>
    1ace:	c8 17       	cp	r28, r24
    1ad0:	d9 07       	cpc	r29, r25
    1ad2:	20 f4       	brcc	.+8      	; 0x1adc <prvAddCurrentTaskToDelayedList+0x9c>
    1ad4:	d0 93 1e 08 	sts	0x081E, r29	; 0x80081e <xNextTaskUnblockTime+0x1>
    1ad8:	c0 93 1d 08 	sts	0x081D, r28	; 0x80081d <xNextTaskUnblockTime>
    1adc:	df 91       	pop	r29
    1ade:	cf 91       	pop	r28
    1ae0:	1f 91       	pop	r17
    1ae2:	0f 91       	pop	r16
    1ae4:	ff 90       	pop	r15
    1ae6:	08 95       	ret

00001ae8 <xTaskCreate>:
    1ae8:	4f 92       	push	r4
    1aea:	5f 92       	push	r5
    1aec:	6f 92       	push	r6
    1aee:	7f 92       	push	r7
    1af0:	8f 92       	push	r8
    1af2:	9f 92       	push	r9
    1af4:	af 92       	push	r10
    1af6:	bf 92       	push	r11
    1af8:	cf 92       	push	r12
    1afa:	df 92       	push	r13
    1afc:	ef 92       	push	r14
    1afe:	ff 92       	push	r15
    1b00:	0f 93       	push	r16
    1b02:	cf 93       	push	r28
    1b04:	df 93       	push	r29
    1b06:	4c 01       	movw	r8, r24
    1b08:	6b 01       	movw	r12, r22
    1b0a:	5a 01       	movw	r10, r20
    1b0c:	29 01       	movw	r4, r18
    1b0e:	ca 01       	movw	r24, r20
    1b10:	0e 94 27 05 	call	0xa4e	; 0xa4e <pvPortMalloc>
    1b14:	3c 01       	movw	r6, r24
    1b16:	89 2b       	or	r24, r25
    1b18:	09 f4       	brne	.+2      	; 0x1b1c <xTaskCreate+0x34>
    1b1a:	f3 c0       	rjmp	.+486    	; 0x1d02 <xTaskCreate+0x21a>
    1b1c:	8c e2       	ldi	r24, 0x2C	; 44
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	0e 94 27 05 	call	0xa4e	; 0xa4e <pvPortMalloc>
    1b24:	ec 01       	movw	r28, r24
    1b26:	89 2b       	or	r24, r25
    1b28:	99 f0       	breq	.+38     	; 0x1b50 <xTaskCreate+0x68>
    1b2a:	78 8e       	std	Y+24, r7	; 0x18
    1b2c:	6f 8a       	std	Y+23, r6	; 0x17
    1b2e:	a5 01       	movw	r20, r10
    1b30:	65 ea       	ldi	r22, 0xA5	; 165
    1b32:	70 e0       	ldi	r23, 0x00	; 0
    1b34:	c3 01       	movw	r24, r6
    1b36:	0e 94 18 27 	call	0x4e30	; 0x4e30 <memset>
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	a8 1a       	sub	r10, r24
    1b3e:	b1 08       	sbc	r11, r1
    1b40:	8f 89       	ldd	r24, Y+23	; 0x17
    1b42:	98 8d       	ldd	r25, Y+24	; 0x18
    1b44:	a8 0e       	add	r10, r24
    1b46:	b9 1e       	adc	r11, r25
    1b48:	c1 14       	cp	r12, r1
    1b4a:	d1 04       	cpc	r13, r1
    1b4c:	29 f4       	brne	.+10     	; 0x1b58 <xTaskCreate+0x70>
    1b4e:	20 c0       	rjmp	.+64     	; 0x1b90 <xTaskCreate+0xa8>
    1b50:	c3 01       	movw	r24, r6
    1b52:	0e 94 3a 05 	call	0xa74	; 0xa74 <vPortFree>
    1b56:	d5 c0       	rjmp	.+426    	; 0x1d02 <xTaskCreate+0x21a>
    1b58:	d6 01       	movw	r26, r12
    1b5a:	8c 91       	ld	r24, X
    1b5c:	89 8f       	std	Y+25, r24	; 0x19
    1b5e:	8c 91       	ld	r24, X
    1b60:	88 23       	and	r24, r24
    1b62:	a1 f0       	breq	.+40     	; 0x1b8c <xTaskCreate+0xa4>
    1b64:	ae 01       	movw	r20, r28
    1b66:	46 5e       	subi	r20, 0xE6	; 230
    1b68:	5f 4f       	sbci	r21, 0xFF	; 255
    1b6a:	f6 01       	movw	r30, r12
    1b6c:	31 96       	adiw	r30, 0x01	; 1
    1b6e:	b8 e0       	ldi	r27, 0x08	; 8
    1b70:	cb 0e       	add	r12, r27
    1b72:	d1 1c       	adc	r13, r1
    1b74:	cf 01       	movw	r24, r30
    1b76:	21 91       	ld	r18, Z+
    1b78:	da 01       	movw	r26, r20
    1b7a:	2d 93       	st	X+, r18
    1b7c:	ad 01       	movw	r20, r26
    1b7e:	dc 01       	movw	r26, r24
    1b80:	8c 91       	ld	r24, X
    1b82:	88 23       	and	r24, r24
    1b84:	19 f0       	breq	.+6      	; 0x1b8c <xTaskCreate+0xa4>
    1b86:	ec 15       	cp	r30, r12
    1b88:	fd 05       	cpc	r31, r13
    1b8a:	a1 f7       	brne	.-24     	; 0x1b74 <xTaskCreate+0x8c>
    1b8c:	18 a2       	std	Y+32, r1	; 0x20
    1b8e:	01 c0       	rjmp	.+2      	; 0x1b92 <xTaskCreate+0xaa>
    1b90:	19 8e       	std	Y+25, r1	; 0x19
    1b92:	04 30       	cpi	r16, 0x04	; 4
    1b94:	08 f0       	brcs	.+2      	; 0x1b98 <xTaskCreate+0xb0>
    1b96:	03 e0       	ldi	r16, 0x03	; 3
    1b98:	0e 8b       	std	Y+22, r16	; 0x16
    1b9a:	0b a3       	std	Y+35, r16	; 0x23
    1b9c:	1c a2       	std	Y+36, r1	; 0x24
    1b9e:	6e 01       	movw	r12, r28
    1ba0:	b2 e0       	ldi	r27, 0x02	; 2
    1ba2:	cb 0e       	add	r12, r27
    1ba4:	d1 1c       	adc	r13, r1
    1ba6:	c6 01       	movw	r24, r12
    1ba8:	0e 94 57 05 	call	0xaae	; 0xaae <vListInitialiseItem>
    1bac:	ce 01       	movw	r24, r28
    1bae:	0c 96       	adiw	r24, 0x0c	; 12
    1bb0:	0e 94 57 05 	call	0xaae	; 0xaae <vListInitialiseItem>
    1bb4:	d9 87       	std	Y+9, r29	; 0x09
    1bb6:	c8 87       	std	Y+8, r28	; 0x08
    1bb8:	84 e0       	ldi	r24, 0x04	; 4
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	80 1b       	sub	r24, r16
    1bbe:	91 09       	sbc	r25, r1
    1bc0:	9d 87       	std	Y+13, r25	; 0x0d
    1bc2:	8c 87       	std	Y+12, r24	; 0x0c
    1bc4:	db 8b       	std	Y+19, r29	; 0x13
    1bc6:	ca 8b       	std	Y+18, r28	; 0x12
    1bc8:	1e a2       	std	Y+38, r1	; 0x26
    1bca:	1d a2       	std	Y+37, r1	; 0x25
    1bcc:	1f a2       	std	Y+39, r1	; 0x27
    1bce:	18 a6       	std	Y+40, r1	; 0x28
    1bd0:	19 a6       	std	Y+41, r1	; 0x29
    1bd2:	1a a6       	std	Y+42, r1	; 0x2a
    1bd4:	1b a6       	std	Y+43, r1	; 0x2b
    1bd6:	a2 01       	movw	r20, r4
    1bd8:	b4 01       	movw	r22, r8
    1bda:	c5 01       	movw	r24, r10
    1bdc:	0e 94 d4 05 	call	0xba8	; 0xba8 <pxPortInitialiseStack>
    1be0:	99 83       	std	Y+1, r25	; 0x01
    1be2:	88 83       	st	Y, r24
    1be4:	e1 14       	cp	r14, r1
    1be6:	f1 04       	cpc	r15, r1
    1be8:	19 f0       	breq	.+6      	; 0x1bf0 <xTaskCreate+0x108>
    1bea:	f7 01       	movw	r30, r14
    1bec:	d1 83       	std	Z+1, r29	; 0x01
    1bee:	c0 83       	st	Z, r28
    1bf0:	0f b6       	in	r0, 0x3f	; 63
    1bf2:	f8 94       	cli
    1bf4:	0f 92       	push	r0
    1bf6:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <uxCurrentNumberOfTasks>
    1bfa:	8f 5f       	subi	r24, 0xFF	; 255
    1bfc:	80 93 27 08 	sts	0x0827, r24	; 0x800827 <uxCurrentNumberOfTasks>
    1c00:	80 91 7e 08 	lds	r24, 0x087E	; 0x80087e <pxCurrentTCB>
    1c04:	90 91 7f 08 	lds	r25, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    1c08:	89 2b       	or	r24, r25
    1c0a:	d1 f5       	brne	.+116    	; 0x1c80 <xTaskCreate+0x198>
    1c0c:	d0 93 7f 08 	sts	0x087F, r29	; 0x80087f <pxCurrentTCB+0x1>
    1c10:	c0 93 7e 08 	sts	0x087E, r28	; 0x80087e <pxCurrentTCB>
    1c14:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <uxCurrentNumberOfTasks>
    1c18:	81 30       	cpi	r24, 0x01	; 1
    1c1a:	09 f0       	breq	.+2      	; 0x1c1e <xTaskCreate+0x136>
    1c1c:	41 c0       	rjmp	.+130    	; 0x1ca0 <xTaskCreate+0x1b8>
    1c1e:	8a e5       	ldi	r24, 0x5A	; 90
    1c20:	98 e0       	ldi	r25, 0x08	; 8
    1c22:	0e 94 49 05 	call	0xa92	; 0xa92 <vListInitialise>
    1c26:	83 e6       	ldi	r24, 0x63	; 99
    1c28:	98 e0       	ldi	r25, 0x08	; 8
    1c2a:	0e 94 49 05 	call	0xa92	; 0xa92 <vListInitialise>
    1c2e:	8c e6       	ldi	r24, 0x6C	; 108
    1c30:	98 e0       	ldi	r25, 0x08	; 8
    1c32:	0e 94 49 05 	call	0xa92	; 0xa92 <vListInitialise>
    1c36:	85 e7       	ldi	r24, 0x75	; 117
    1c38:	98 e0       	ldi	r25, 0x08	; 8
    1c3a:	0e 94 49 05 	call	0xa92	; 0xa92 <vListInitialise>
    1c3e:	81 e5       	ldi	r24, 0x51	; 81
    1c40:	98 e0       	ldi	r25, 0x08	; 8
    1c42:	0e 94 49 05 	call	0xa92	; 0xa92 <vListInitialise>
    1c46:	88 e4       	ldi	r24, 0x48	; 72
    1c48:	98 e0       	ldi	r25, 0x08	; 8
    1c4a:	0e 94 49 05 	call	0xa92	; 0xa92 <vListInitialise>
    1c4e:	8b e3       	ldi	r24, 0x3B	; 59
    1c50:	98 e0       	ldi	r25, 0x08	; 8
    1c52:	0e 94 49 05 	call	0xa92	; 0xa92 <vListInitialise>
    1c56:	82 e3       	ldi	r24, 0x32	; 50
    1c58:	98 e0       	ldi	r25, 0x08	; 8
    1c5a:	0e 94 49 05 	call	0xa92	; 0xa92 <vListInitialise>
    1c5e:	88 e2       	ldi	r24, 0x28	; 40
    1c60:	98 e0       	ldi	r25, 0x08	; 8
    1c62:	0e 94 49 05 	call	0xa92	; 0xa92 <vListInitialise>
    1c66:	81 e5       	ldi	r24, 0x51	; 81
    1c68:	98 e0       	ldi	r25, 0x08	; 8
    1c6a:	90 93 47 08 	sts	0x0847, r25	; 0x800847 <pxDelayedTaskList+0x1>
    1c6e:	80 93 46 08 	sts	0x0846, r24	; 0x800846 <pxDelayedTaskList>
    1c72:	88 e4       	ldi	r24, 0x48	; 72
    1c74:	98 e0       	ldi	r25, 0x08	; 8
    1c76:	90 93 45 08 	sts	0x0845, r25	; 0x800845 <pxOverflowDelayedTaskList+0x1>
    1c7a:	80 93 44 08 	sts	0x0844, r24	; 0x800844 <pxOverflowDelayedTaskList>
    1c7e:	10 c0       	rjmp	.+32     	; 0x1ca0 <xTaskCreate+0x1b8>
    1c80:	80 91 23 08 	lds	r24, 0x0823	; 0x800823 <xSchedulerRunning>
    1c84:	81 11       	cpse	r24, r1
    1c86:	0c c0       	rjmp	.+24     	; 0x1ca0 <xTaskCreate+0x1b8>
    1c88:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    1c8c:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    1c90:	96 89       	ldd	r25, Z+22	; 0x16
    1c92:	8e 89       	ldd	r24, Y+22	; 0x16
    1c94:	89 17       	cp	r24, r25
    1c96:	20 f0       	brcs	.+8      	; 0x1ca0 <xTaskCreate+0x1b8>
    1c98:	d0 93 7f 08 	sts	0x087F, r29	; 0x80087f <pxCurrentTCB+0x1>
    1c9c:	c0 93 7e 08 	sts	0x087E, r28	; 0x80087e <pxCurrentTCB>
    1ca0:	80 91 1f 08 	lds	r24, 0x081F	; 0x80081f <uxTaskNumber>
    1ca4:	8f 5f       	subi	r24, 0xFF	; 255
    1ca6:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <uxTaskNumber>
    1caa:	89 a3       	std	Y+33, r24	; 0x21
    1cac:	8e 89       	ldd	r24, Y+22	; 0x16
    1cae:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <uxTopReadyPriority>
    1cb2:	98 17       	cp	r25, r24
    1cb4:	10 f4       	brcc	.+4      	; 0x1cba <xTaskCreate+0x1d2>
    1cb6:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <uxTopReadyPriority>
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	9c 01       	movw	r18, r24
    1cbe:	22 0f       	add	r18, r18
    1cc0:	33 1f       	adc	r19, r19
    1cc2:	22 0f       	add	r18, r18
    1cc4:	33 1f       	adc	r19, r19
    1cc6:	22 0f       	add	r18, r18
    1cc8:	33 1f       	adc	r19, r19
    1cca:	82 0f       	add	r24, r18
    1ccc:	93 1f       	adc	r25, r19
    1cce:	b6 01       	movw	r22, r12
    1cd0:	86 5a       	subi	r24, 0xA6	; 166
    1cd2:	97 4f       	sbci	r25, 0xF7	; 247
    1cd4:	0e 94 5b 05 	call	0xab6	; 0xab6 <vListInsertEnd>
    1cd8:	0f 90       	pop	r0
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	80 91 23 08 	lds	r24, 0x0823	; 0x800823 <xSchedulerRunning>
    1ce0:	88 23       	and	r24, r24
    1ce2:	59 f0       	breq	.+22     	; 0x1cfa <xTaskCreate+0x212>
    1ce4:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    1ce8:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    1cec:	96 89       	ldd	r25, Z+22	; 0x16
    1cee:	8e 89       	ldd	r24, Y+22	; 0x16
    1cf0:	98 17       	cp	r25, r24
    1cf2:	28 f4       	brcc	.+10     	; 0x1cfe <xTaskCreate+0x216>
    1cf4:	07 d8       	rcall	.-4082   	; 0xd04 <vPortYield>
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	05 c0       	rjmp	.+10     	; 0x1d04 <xTaskCreate+0x21c>
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	03 c0       	rjmp	.+6      	; 0x1d04 <xTaskCreate+0x21c>
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	01 c0       	rjmp	.+2      	; 0x1d04 <xTaskCreate+0x21c>
    1d02:	8f ef       	ldi	r24, 0xFF	; 255
    1d04:	df 91       	pop	r29
    1d06:	cf 91       	pop	r28
    1d08:	0f 91       	pop	r16
    1d0a:	ff 90       	pop	r15
    1d0c:	ef 90       	pop	r14
    1d0e:	df 90       	pop	r13
    1d10:	cf 90       	pop	r12
    1d12:	bf 90       	pop	r11
    1d14:	af 90       	pop	r10
    1d16:	9f 90       	pop	r9
    1d18:	8f 90       	pop	r8
    1d1a:	7f 90       	pop	r7
    1d1c:	6f 90       	pop	r6
    1d1e:	5f 90       	pop	r5
    1d20:	4f 90       	pop	r4
    1d22:	08 95       	ret

00001d24 <vTaskStartScheduler>:
    1d24:	ef 92       	push	r14
    1d26:	ff 92       	push	r15
    1d28:	0f 93       	push	r16
    1d2a:	0f 2e       	mov	r0, r31
    1d2c:	fb e1       	ldi	r31, 0x1B	; 27
    1d2e:	ef 2e       	mov	r14, r31
    1d30:	f8 e0       	ldi	r31, 0x08	; 8
    1d32:	ff 2e       	mov	r15, r31
    1d34:	f0 2d       	mov	r31, r0
    1d36:	00 e0       	ldi	r16, 0x00	; 0
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	40 ec       	ldi	r20, 0xC0	; 192
    1d3e:	50 e0       	ldi	r21, 0x00	; 0
    1d40:	6d e2       	ldi	r22, 0x2D	; 45
    1d42:	75 e0       	ldi	r23, 0x05	; 5
    1d44:	8d ec       	ldi	r24, 0xCD	; 205
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	cf de       	rcall	.-610    	; 0x1ae8 <xTaskCreate>
    1d4a:	81 30       	cpi	r24, 0x01	; 1
    1d4c:	d1 f4       	brne	.+52     	; 0x1d82 <vTaskStartScheduler+0x5e>
    1d4e:	dc d5       	rcall	.+3000   	; 0x2908 <xTimerCreateTimerTask>
    1d50:	81 30       	cpi	r24, 0x01	; 1
    1d52:	b9 f4       	brne	.+46     	; 0x1d82 <vTaskStartScheduler+0x5e>
    1d54:	f8 94       	cli
    1d56:	8f ef       	ldi	r24, 0xFF	; 255
    1d58:	9f ef       	ldi	r25, 0xFF	; 255
    1d5a:	90 93 1e 08 	sts	0x081E, r25	; 0x80081e <xNextTaskUnblockTime+0x1>
    1d5e:	80 93 1d 08 	sts	0x081D, r24	; 0x80081d <xNextTaskUnblockTime>
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	80 93 23 08 	sts	0x0823, r24	; 0x800823 <xSchedulerRunning>
    1d68:	10 92 26 08 	sts	0x0826, r1	; 0x800826 <xTickCount+0x1>
    1d6c:	10 92 25 08 	sts	0x0825, r1	; 0x800825 <xTickCount>
    1d70:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    1d74:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    1d78:	85 a1       	ldd	r24, Z+37	; 0x25
    1d7a:	0e 94 17 05 	call	0xa2e	; 0xa2e <task_switch_in>
    1d7e:	0e 94 46 06 	call	0xc8c	; 0xc8c <xPortStartScheduler>
    1d82:	0f 91       	pop	r16
    1d84:	ff 90       	pop	r15
    1d86:	ef 90       	pop	r14
    1d88:	08 95       	ret

00001d8a <vTaskSuspendAll>:
    1d8a:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <uxSchedulerSuspended>
    1d8e:	8f 5f       	subi	r24, 0xFF	; 255
    1d90:	80 93 1a 08 	sts	0x081A, r24	; 0x80081a <uxSchedulerSuspended>
    1d94:	08 95       	ret

00001d96 <xTaskGetTickCount>:
    1d96:	0f b6       	in	r0, 0x3f	; 63
    1d98:	f8 94       	cli
    1d9a:	0f 92       	push	r0
    1d9c:	80 91 25 08 	lds	r24, 0x0825	; 0x800825 <xTickCount>
    1da0:	90 91 26 08 	lds	r25, 0x0826	; 0x800826 <xTickCount+0x1>
    1da4:	0f 90       	pop	r0
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	08 95       	ret

00001daa <xTaskIncrementTick>:
    1daa:	cf 92       	push	r12
    1dac:	df 92       	push	r13
    1dae:	ef 92       	push	r14
    1db0:	ff 92       	push	r15
    1db2:	0f 93       	push	r16
    1db4:	1f 93       	push	r17
    1db6:	cf 93       	push	r28
    1db8:	df 93       	push	r29
    1dba:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <uxSchedulerSuspended>
    1dbe:	81 11       	cpse	r24, r1
    1dc0:	98 c0       	rjmp	.+304    	; 0x1ef2 <xTaskIncrementTick+0x148>
    1dc2:	e0 90 25 08 	lds	r14, 0x0825	; 0x800825 <xTickCount>
    1dc6:	f0 90 26 08 	lds	r15, 0x0826	; 0x800826 <xTickCount+0x1>
    1dca:	8f ef       	ldi	r24, 0xFF	; 255
    1dcc:	e8 1a       	sub	r14, r24
    1dce:	f8 0a       	sbc	r15, r24
    1dd0:	f0 92 26 08 	sts	0x0826, r15	; 0x800826 <xTickCount+0x1>
    1dd4:	e0 92 25 08 	sts	0x0825, r14	; 0x800825 <xTickCount>
    1dd8:	e1 14       	cp	r14, r1
    1dda:	f1 04       	cpc	r15, r1
    1ddc:	b1 f4       	brne	.+44     	; 0x1e0a <xTaskIncrementTick+0x60>
    1dde:	80 91 46 08 	lds	r24, 0x0846	; 0x800846 <pxDelayedTaskList>
    1de2:	90 91 47 08 	lds	r25, 0x0847	; 0x800847 <pxDelayedTaskList+0x1>
    1de6:	20 91 44 08 	lds	r18, 0x0844	; 0x800844 <pxOverflowDelayedTaskList>
    1dea:	30 91 45 08 	lds	r19, 0x0845	; 0x800845 <pxOverflowDelayedTaskList+0x1>
    1dee:	30 93 47 08 	sts	0x0847, r19	; 0x800847 <pxDelayedTaskList+0x1>
    1df2:	20 93 46 08 	sts	0x0846, r18	; 0x800846 <pxDelayedTaskList>
    1df6:	90 93 45 08 	sts	0x0845, r25	; 0x800845 <pxOverflowDelayedTaskList+0x1>
    1dfa:	80 93 44 08 	sts	0x0844, r24	; 0x800844 <pxOverflowDelayedTaskList>
    1dfe:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <xNumOfOverflows>
    1e02:	8f 5f       	subi	r24, 0xFF	; 255
    1e04:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <xNumOfOverflows>
    1e08:	fc dd       	rcall	.-1032   	; 0x1a02 <prvResetNextTaskUnblockTime>
    1e0a:	80 91 1d 08 	lds	r24, 0x081D	; 0x80081d <xNextTaskUnblockTime>
    1e0e:	90 91 1e 08 	lds	r25, 0x081E	; 0x80081e <xNextTaskUnblockTime+0x1>
    1e12:	e8 16       	cp	r14, r24
    1e14:	f9 06       	cpc	r15, r25
    1e16:	10 f4       	brcc	.+4      	; 0x1e1c <xTaskIncrementTick+0x72>
    1e18:	d1 2c       	mov	r13, r1
    1e1a:	53 c0       	rjmp	.+166    	; 0x1ec2 <xTaskIncrementTick+0x118>
    1e1c:	d1 2c       	mov	r13, r1
    1e1e:	cc 24       	eor	r12, r12
    1e20:	c3 94       	inc	r12
    1e22:	e0 91 46 08 	lds	r30, 0x0846	; 0x800846 <pxDelayedTaskList>
    1e26:	f0 91 47 08 	lds	r31, 0x0847	; 0x800847 <pxDelayedTaskList+0x1>
    1e2a:	80 81       	ld	r24, Z
    1e2c:	81 11       	cpse	r24, r1
    1e2e:	07 c0       	rjmp	.+14     	; 0x1e3e <xTaskIncrementTick+0x94>
    1e30:	8f ef       	ldi	r24, 0xFF	; 255
    1e32:	9f ef       	ldi	r25, 0xFF	; 255
    1e34:	90 93 1e 08 	sts	0x081E, r25	; 0x80081e <xNextTaskUnblockTime+0x1>
    1e38:	80 93 1d 08 	sts	0x081D, r24	; 0x80081d <xNextTaskUnblockTime>
    1e3c:	42 c0       	rjmp	.+132    	; 0x1ec2 <xTaskIncrementTick+0x118>
    1e3e:	e0 91 46 08 	lds	r30, 0x0846	; 0x800846 <pxDelayedTaskList>
    1e42:	f0 91 47 08 	lds	r31, 0x0847	; 0x800847 <pxDelayedTaskList+0x1>
    1e46:	05 80       	ldd	r0, Z+5	; 0x05
    1e48:	f6 81       	ldd	r31, Z+6	; 0x06
    1e4a:	e0 2d       	mov	r30, r0
    1e4c:	c6 81       	ldd	r28, Z+6	; 0x06
    1e4e:	d7 81       	ldd	r29, Z+7	; 0x07
    1e50:	8a 81       	ldd	r24, Y+2	; 0x02
    1e52:	9b 81       	ldd	r25, Y+3	; 0x03
    1e54:	e8 16       	cp	r14, r24
    1e56:	f9 06       	cpc	r15, r25
    1e58:	28 f4       	brcc	.+10     	; 0x1e64 <xTaskIncrementTick+0xba>
    1e5a:	90 93 1e 08 	sts	0x081E, r25	; 0x80081e <xNextTaskUnblockTime+0x1>
    1e5e:	80 93 1d 08 	sts	0x081D, r24	; 0x80081d <xNextTaskUnblockTime>
    1e62:	2f c0       	rjmp	.+94     	; 0x1ec2 <xTaskIncrementTick+0x118>
    1e64:	8e 01       	movw	r16, r28
    1e66:	0e 5f       	subi	r16, 0xFE	; 254
    1e68:	1f 4f       	sbci	r17, 0xFF	; 255
    1e6a:	c8 01       	movw	r24, r16
    1e6c:	0e 94 ad 05 	call	0xb5a	; 0xb5a <uxListRemove>
    1e70:	8c 89       	ldd	r24, Y+20	; 0x14
    1e72:	9d 89       	ldd	r25, Y+21	; 0x15
    1e74:	89 2b       	or	r24, r25
    1e76:	21 f0       	breq	.+8      	; 0x1e80 <xTaskIncrementTick+0xd6>
    1e78:	ce 01       	movw	r24, r28
    1e7a:	0c 96       	adiw	r24, 0x0c	; 12
    1e7c:	0e 94 ad 05 	call	0xb5a	; 0xb5a <uxListRemove>
    1e80:	8e 89       	ldd	r24, Y+22	; 0x16
    1e82:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <uxTopReadyPriority>
    1e86:	98 17       	cp	r25, r24
    1e88:	10 f4       	brcc	.+4      	; 0x1e8e <xTaskIncrementTick+0xe4>
    1e8a:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <uxTopReadyPriority>
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	9c 01       	movw	r18, r24
    1e92:	22 0f       	add	r18, r18
    1e94:	33 1f       	adc	r19, r19
    1e96:	22 0f       	add	r18, r18
    1e98:	33 1f       	adc	r19, r19
    1e9a:	22 0f       	add	r18, r18
    1e9c:	33 1f       	adc	r19, r19
    1e9e:	82 0f       	add	r24, r18
    1ea0:	93 1f       	adc	r25, r19
    1ea2:	b8 01       	movw	r22, r16
    1ea4:	86 5a       	subi	r24, 0xA6	; 166
    1ea6:	97 4f       	sbci	r25, 0xF7	; 247
    1ea8:	0e 94 5b 05 	call	0xab6	; 0xab6 <vListInsertEnd>
    1eac:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    1eb0:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    1eb4:	9e 89       	ldd	r25, Y+22	; 0x16
    1eb6:	86 89       	ldd	r24, Z+22	; 0x16
    1eb8:	98 17       	cp	r25, r24
    1eba:	08 f4       	brcc	.+2      	; 0x1ebe <xTaskIncrementTick+0x114>
    1ebc:	b2 cf       	rjmp	.-156    	; 0x1e22 <xTaskIncrementTick+0x78>
    1ebe:	dc 2c       	mov	r13, r12
    1ec0:	b0 cf       	rjmp	.-160    	; 0x1e22 <xTaskIncrementTick+0x78>
    1ec2:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    1ec6:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    1eca:	86 89       	ldd	r24, Z+22	; 0x16
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	fc 01       	movw	r30, r24
    1ed0:	ee 0f       	add	r30, r30
    1ed2:	ff 1f       	adc	r31, r31
    1ed4:	ee 0f       	add	r30, r30
    1ed6:	ff 1f       	adc	r31, r31
    1ed8:	ee 0f       	add	r30, r30
    1eda:	ff 1f       	adc	r31, r31
    1edc:	8e 0f       	add	r24, r30
    1ede:	9f 1f       	adc	r25, r31
    1ee0:	fc 01       	movw	r30, r24
    1ee2:	e6 5a       	subi	r30, 0xA6	; 166
    1ee4:	f7 4f       	sbci	r31, 0xF7	; 247
    1ee6:	80 81       	ld	r24, Z
    1ee8:	82 30       	cpi	r24, 0x02	; 2
    1eea:	48 f0       	brcs	.+18     	; 0x1efe <xTaskIncrementTick+0x154>
    1eec:	dd 24       	eor	r13, r13
    1eee:	d3 94       	inc	r13
    1ef0:	06 c0       	rjmp	.+12     	; 0x1efe <xTaskIncrementTick+0x154>
    1ef2:	80 91 22 08 	lds	r24, 0x0822	; 0x800822 <uxPendedTicks>
    1ef6:	8f 5f       	subi	r24, 0xFF	; 255
    1ef8:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <uxPendedTicks>
    1efc:	d1 2c       	mov	r13, r1
    1efe:	80 91 21 08 	lds	r24, 0x0821	; 0x800821 <xYieldPending>
    1f02:	88 23       	and	r24, r24
    1f04:	11 f0       	breq	.+4      	; 0x1f0a <xTaskIncrementTick+0x160>
    1f06:	dd 24       	eor	r13, r13
    1f08:	d3 94       	inc	r13
    1f0a:	8d 2d       	mov	r24, r13
    1f0c:	df 91       	pop	r29
    1f0e:	cf 91       	pop	r28
    1f10:	1f 91       	pop	r17
    1f12:	0f 91       	pop	r16
    1f14:	ff 90       	pop	r15
    1f16:	ef 90       	pop	r14
    1f18:	df 90       	pop	r13
    1f1a:	cf 90       	pop	r12
    1f1c:	08 95       	ret

00001f1e <xTaskResumeAll>:
    1f1e:	df 92       	push	r13
    1f20:	ef 92       	push	r14
    1f22:	ff 92       	push	r15
    1f24:	0f 93       	push	r16
    1f26:	1f 93       	push	r17
    1f28:	cf 93       	push	r28
    1f2a:	df 93       	push	r29
    1f2c:	0f b6       	in	r0, 0x3f	; 63
    1f2e:	f8 94       	cli
    1f30:	0f 92       	push	r0
    1f32:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <uxSchedulerSuspended>
    1f36:	81 50       	subi	r24, 0x01	; 1
    1f38:	80 93 1a 08 	sts	0x081A, r24	; 0x80081a <uxSchedulerSuspended>
    1f3c:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <uxSchedulerSuspended>
    1f40:	81 11       	cpse	r24, r1
    1f42:	5d c0       	rjmp	.+186    	; 0x1ffe <xTaskResumeAll+0xe0>
    1f44:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <uxCurrentNumberOfTasks>
    1f48:	81 11       	cpse	r24, r1
    1f4a:	33 c0       	rjmp	.+102    	; 0x1fb2 <xTaskResumeAll+0x94>
    1f4c:	5b c0       	rjmp	.+182    	; 0x2004 <xTaskResumeAll+0xe6>
    1f4e:	d7 01       	movw	r26, r14
    1f50:	15 96       	adiw	r26, 0x05	; 5
    1f52:	ed 91       	ld	r30, X+
    1f54:	fc 91       	ld	r31, X
    1f56:	16 97       	sbiw	r26, 0x06	; 6
    1f58:	c6 81       	ldd	r28, Z+6	; 0x06
    1f5a:	d7 81       	ldd	r29, Z+7	; 0x07
    1f5c:	ce 01       	movw	r24, r28
    1f5e:	0c 96       	adiw	r24, 0x0c	; 12
    1f60:	0e 94 ad 05 	call	0xb5a	; 0xb5a <uxListRemove>
    1f64:	8e 01       	movw	r16, r28
    1f66:	0e 5f       	subi	r16, 0xFE	; 254
    1f68:	1f 4f       	sbci	r17, 0xFF	; 255
    1f6a:	c8 01       	movw	r24, r16
    1f6c:	0e 94 ad 05 	call	0xb5a	; 0xb5a <uxListRemove>
    1f70:	8e 89       	ldd	r24, Y+22	; 0x16
    1f72:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <uxTopReadyPriority>
    1f76:	98 17       	cp	r25, r24
    1f78:	10 f4       	brcc	.+4      	; 0x1f7e <xTaskResumeAll+0x60>
    1f7a:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <uxTopReadyPriority>
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	9c 01       	movw	r18, r24
    1f82:	22 0f       	add	r18, r18
    1f84:	33 1f       	adc	r19, r19
    1f86:	22 0f       	add	r18, r18
    1f88:	33 1f       	adc	r19, r19
    1f8a:	22 0f       	add	r18, r18
    1f8c:	33 1f       	adc	r19, r19
    1f8e:	82 0f       	add	r24, r18
    1f90:	93 1f       	adc	r25, r19
    1f92:	b8 01       	movw	r22, r16
    1f94:	86 5a       	subi	r24, 0xA6	; 166
    1f96:	97 4f       	sbci	r25, 0xF7	; 247
    1f98:	0e 94 5b 05 	call	0xab6	; 0xab6 <vListInsertEnd>
    1f9c:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    1fa0:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    1fa4:	9e 89       	ldd	r25, Y+22	; 0x16
    1fa6:	86 89       	ldd	r24, Z+22	; 0x16
    1fa8:	98 17       	cp	r25, r24
    1faa:	68 f0       	brcs	.+26     	; 0x1fc6 <xTaskResumeAll+0xa8>
    1fac:	d0 92 21 08 	sts	0x0821, r13	; 0x800821 <xYieldPending>
    1fb0:	0a c0       	rjmp	.+20     	; 0x1fc6 <xTaskResumeAll+0xa8>
    1fb2:	c0 e0       	ldi	r28, 0x00	; 0
    1fb4:	d0 e0       	ldi	r29, 0x00	; 0
    1fb6:	0f 2e       	mov	r0, r31
    1fb8:	fb e3       	ldi	r31, 0x3B	; 59
    1fba:	ef 2e       	mov	r14, r31
    1fbc:	f8 e0       	ldi	r31, 0x08	; 8
    1fbe:	ff 2e       	mov	r15, r31
    1fc0:	f0 2d       	mov	r31, r0
    1fc2:	dd 24       	eor	r13, r13
    1fc4:	d3 94       	inc	r13
    1fc6:	f7 01       	movw	r30, r14
    1fc8:	80 81       	ld	r24, Z
    1fca:	81 11       	cpse	r24, r1
    1fcc:	c0 cf       	rjmp	.-128    	; 0x1f4e <xTaskResumeAll+0x30>
    1fce:	cd 2b       	or	r28, r29
    1fd0:	09 f0       	breq	.+2      	; 0x1fd4 <xTaskResumeAll+0xb6>
    1fd2:	17 dd       	rcall	.-1490   	; 0x1a02 <prvResetNextTaskUnblockTime>
    1fd4:	c0 91 22 08 	lds	r28, 0x0822	; 0x800822 <uxPendedTicks>
    1fd8:	cc 23       	and	r28, r28
    1fda:	49 f0       	breq	.+18     	; 0x1fee <xTaskResumeAll+0xd0>
    1fdc:	d1 e0       	ldi	r29, 0x01	; 1
    1fde:	e5 de       	rcall	.-566    	; 0x1daa <xTaskIncrementTick>
    1fe0:	81 11       	cpse	r24, r1
    1fe2:	d0 93 21 08 	sts	0x0821, r29	; 0x800821 <xYieldPending>
    1fe6:	c1 50       	subi	r28, 0x01	; 1
    1fe8:	d1 f7       	brne	.-12     	; 0x1fde <xTaskResumeAll+0xc0>
    1fea:	10 92 22 08 	sts	0x0822, r1	; 0x800822 <uxPendedTicks>
    1fee:	80 91 21 08 	lds	r24, 0x0821	; 0x800821 <xYieldPending>
    1ff2:	88 23       	and	r24, r24
    1ff4:	31 f0       	breq	.+12     	; 0x2002 <xTaskResumeAll+0xe4>
    1ff6:	0e 94 82 06 	call	0xd04	; 0xd04 <vPortYield>
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	03 c0       	rjmp	.+6      	; 0x2004 <xTaskResumeAll+0xe6>
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	01 c0       	rjmp	.+2      	; 0x2004 <xTaskResumeAll+0xe6>
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	0f 90       	pop	r0
    2006:	0f be       	out	0x3f, r0	; 63
    2008:	df 91       	pop	r29
    200a:	cf 91       	pop	r28
    200c:	1f 91       	pop	r17
    200e:	0f 91       	pop	r16
    2010:	ff 90       	pop	r15
    2012:	ef 90       	pop	r14
    2014:	df 90       	pop	r13
    2016:	08 95       	ret

00002018 <vTaskDelay>:
    2018:	cf 93       	push	r28
    201a:	df 93       	push	r29
    201c:	ec 01       	movw	r28, r24
    201e:	89 2b       	or	r24, r25
    2020:	39 f0       	breq	.+14     	; 0x2030 <vTaskDelay+0x18>
    2022:	b3 de       	rcall	.-666    	; 0x1d8a <vTaskSuspendAll>
    2024:	60 e0       	ldi	r22, 0x00	; 0
    2026:	ce 01       	movw	r24, r28
    2028:	0b dd       	rcall	.-1514   	; 0x1a40 <prvAddCurrentTaskToDelayedList>
    202a:	79 df       	rcall	.-270    	; 0x1f1e <xTaskResumeAll>
    202c:	81 11       	cpse	r24, r1
    202e:	02 c0       	rjmp	.+4      	; 0x2034 <vTaskDelay+0x1c>
    2030:	0e 94 82 06 	call	0xd04	; 0xd04 <vPortYield>
    2034:	df 91       	pop	r29
    2036:	cf 91       	pop	r28
    2038:	08 95       	ret

0000203a <vTaskSwitchContext>:
    203a:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <uxSchedulerSuspended>
    203e:	88 23       	and	r24, r24
    2040:	21 f0       	breq	.+8      	; 0x204a <vTaskSwitchContext+0x10>
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	80 93 21 08 	sts	0x0821, r24	; 0x800821 <xYieldPending>
    2048:	08 95       	ret
    204a:	10 92 21 08 	sts	0x0821, r1	; 0x800821 <xYieldPending>
    204e:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    2052:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    2056:	85 a1       	ldd	r24, Z+37	; 0x25
    2058:	0e 94 21 05 	call	0xa42	; 0xa42 <task_switch_out>
    205c:	a0 91 7e 08 	lds	r26, 0x087E	; 0x80087e <pxCurrentTCB>
    2060:	b0 91 7f 08 	lds	r27, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    2064:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    2068:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    206c:	2d 91       	ld	r18, X+
    206e:	3c 91       	ld	r19, X
    2070:	87 89       	ldd	r24, Z+23	; 0x17
    2072:	90 8d       	ldd	r25, Z+24	; 0x18
    2074:	82 17       	cp	r24, r18
    2076:	93 07       	cpc	r25, r19
    2078:	58 f0       	brcs	.+22     	; 0x2090 <vTaskSwitchContext+0x56>
    207a:	60 91 7e 08 	lds	r22, 0x087E	; 0x80087e <pxCurrentTCB>
    207e:	70 91 7f 08 	lds	r23, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    2082:	80 91 7e 08 	lds	r24, 0x087E	; 0x80087e <pxCurrentTCB>
    2086:	90 91 7f 08 	lds	r25, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    208a:	67 5e       	subi	r22, 0xE7	; 231
    208c:	7f 4f       	sbci	r23, 0xFF	; 255
    208e:	1f d5       	rcall	.+2622   	; 0x2ace <vApplicationStackOverflowHook>
    2090:	20 91 24 08 	lds	r18, 0x0824	; 0x800824 <uxTopReadyPriority>
    2094:	82 2f       	mov	r24, r18
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	fc 01       	movw	r30, r24
    209a:	ee 0f       	add	r30, r30
    209c:	ff 1f       	adc	r31, r31
    209e:	ee 0f       	add	r30, r30
    20a0:	ff 1f       	adc	r31, r31
    20a2:	ee 0f       	add	r30, r30
    20a4:	ff 1f       	adc	r31, r31
    20a6:	e8 0f       	add	r30, r24
    20a8:	f9 1f       	adc	r31, r25
    20aa:	e6 5a       	subi	r30, 0xA6	; 166
    20ac:	f7 4f       	sbci	r31, 0xF7	; 247
    20ae:	30 81       	ld	r19, Z
    20b0:	31 11       	cpse	r19, r1
    20b2:	11 c0       	rjmp	.+34     	; 0x20d6 <vTaskSwitchContext+0x9c>
    20b4:	21 50       	subi	r18, 0x01	; 1
    20b6:	82 2f       	mov	r24, r18
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	fc 01       	movw	r30, r24
    20bc:	ee 0f       	add	r30, r30
    20be:	ff 1f       	adc	r31, r31
    20c0:	ee 0f       	add	r30, r30
    20c2:	ff 1f       	adc	r31, r31
    20c4:	ee 0f       	add	r30, r30
    20c6:	ff 1f       	adc	r31, r31
    20c8:	e8 0f       	add	r30, r24
    20ca:	f9 1f       	adc	r31, r25
    20cc:	e6 5a       	subi	r30, 0xA6	; 166
    20ce:	f7 4f       	sbci	r31, 0xF7	; 247
    20d0:	30 81       	ld	r19, Z
    20d2:	33 23       	and	r19, r19
    20d4:	79 f3       	breq	.-34     	; 0x20b4 <vTaskSwitchContext+0x7a>
    20d6:	ac 01       	movw	r20, r24
    20d8:	44 0f       	add	r20, r20
    20da:	55 1f       	adc	r21, r21
    20dc:	44 0f       	add	r20, r20
    20de:	55 1f       	adc	r21, r21
    20e0:	44 0f       	add	r20, r20
    20e2:	55 1f       	adc	r21, r21
    20e4:	48 0f       	add	r20, r24
    20e6:	59 1f       	adc	r21, r25
    20e8:	da 01       	movw	r26, r20
    20ea:	a6 5a       	subi	r26, 0xA6	; 166
    20ec:	b7 4f       	sbci	r27, 0xF7	; 247
    20ee:	11 96       	adiw	r26, 0x01	; 1
    20f0:	ed 91       	ld	r30, X+
    20f2:	fc 91       	ld	r31, X
    20f4:	12 97       	sbiw	r26, 0x02	; 2
    20f6:	02 80       	ldd	r0, Z+2	; 0x02
    20f8:	f3 81       	ldd	r31, Z+3	; 0x03
    20fa:	e0 2d       	mov	r30, r0
    20fc:	12 96       	adiw	r26, 0x02	; 2
    20fe:	fc 93       	st	X, r31
    2100:	ee 93       	st	-X, r30
    2102:	11 97       	sbiw	r26, 0x01	; 1
    2104:	43 5a       	subi	r20, 0xA3	; 163
    2106:	57 4f       	sbci	r21, 0xF7	; 247
    2108:	e4 17       	cp	r30, r20
    210a:	f5 07       	cpc	r31, r21
    210c:	29 f4       	brne	.+10     	; 0x2118 <vTaskSwitchContext+0xde>
    210e:	42 81       	ldd	r20, Z+2	; 0x02
    2110:	53 81       	ldd	r21, Z+3	; 0x03
    2112:	fd 01       	movw	r30, r26
    2114:	52 83       	std	Z+2, r21	; 0x02
    2116:	41 83       	std	Z+1, r20	; 0x01
    2118:	fc 01       	movw	r30, r24
    211a:	ee 0f       	add	r30, r30
    211c:	ff 1f       	adc	r31, r31
    211e:	ee 0f       	add	r30, r30
    2120:	ff 1f       	adc	r31, r31
    2122:	ee 0f       	add	r30, r30
    2124:	ff 1f       	adc	r31, r31
    2126:	8e 0f       	add	r24, r30
    2128:	9f 1f       	adc	r25, r31
    212a:	fc 01       	movw	r30, r24
    212c:	e6 5a       	subi	r30, 0xA6	; 166
    212e:	f7 4f       	sbci	r31, 0xF7	; 247
    2130:	01 80       	ldd	r0, Z+1	; 0x01
    2132:	f2 81       	ldd	r31, Z+2	; 0x02
    2134:	e0 2d       	mov	r30, r0
    2136:	86 81       	ldd	r24, Z+6	; 0x06
    2138:	97 81       	ldd	r25, Z+7	; 0x07
    213a:	90 93 7f 08 	sts	0x087F, r25	; 0x80087f <pxCurrentTCB+0x1>
    213e:	80 93 7e 08 	sts	0x087E, r24	; 0x80087e <pxCurrentTCB>
    2142:	20 93 24 08 	sts	0x0824, r18	; 0x800824 <uxTopReadyPriority>
    2146:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    214a:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    214e:	85 a1       	ldd	r24, Z+37	; 0x25
    2150:	0c 94 17 05 	jmp	0xa2e	; 0xa2e <task_switch_in>
    2154:	08 95       	ret

00002156 <vTaskPlaceOnEventList>:
    2156:	cf 93       	push	r28
    2158:	df 93       	push	r29
    215a:	eb 01       	movw	r28, r22
    215c:	60 91 7e 08 	lds	r22, 0x087E	; 0x80087e <pxCurrentTCB>
    2160:	70 91 7f 08 	lds	r23, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    2164:	64 5f       	subi	r22, 0xF4	; 244
    2166:	7f 4f       	sbci	r23, 0xFF	; 255
    2168:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <vListInsert>
    216c:	61 e0       	ldi	r22, 0x01	; 1
    216e:	ce 01       	movw	r24, r28
    2170:	67 dc       	rcall	.-1842   	; 0x1a40 <prvAddCurrentTaskToDelayedList>
    2172:	df 91       	pop	r29
    2174:	cf 91       	pop	r28
    2176:	08 95       	ret

00002178 <vTaskPlaceOnEventListRestricted>:
    2178:	0f 93       	push	r16
    217a:	1f 93       	push	r17
    217c:	cf 93       	push	r28
    217e:	8b 01       	movw	r16, r22
    2180:	c4 2f       	mov	r28, r20
    2182:	60 91 7e 08 	lds	r22, 0x087E	; 0x80087e <pxCurrentTCB>
    2186:	70 91 7f 08 	lds	r23, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    218a:	64 5f       	subi	r22, 0xF4	; 244
    218c:	7f 4f       	sbci	r23, 0xFF	; 255
    218e:	0e 94 5b 05 	call	0xab6	; 0xab6 <vListInsertEnd>
    2192:	cc 23       	and	r28, r28
    2194:	11 f0       	breq	.+4      	; 0x219a <vTaskPlaceOnEventListRestricted+0x22>
    2196:	0f ef       	ldi	r16, 0xFF	; 255
    2198:	1f ef       	ldi	r17, 0xFF	; 255
    219a:	6c 2f       	mov	r22, r28
    219c:	c8 01       	movw	r24, r16
    219e:	50 dc       	rcall	.-1888   	; 0x1a40 <prvAddCurrentTaskToDelayedList>
    21a0:	cf 91       	pop	r28
    21a2:	1f 91       	pop	r17
    21a4:	0f 91       	pop	r16
    21a6:	08 95       	ret

000021a8 <xTaskRemoveFromEventList>:
    21a8:	0f 93       	push	r16
    21aa:	1f 93       	push	r17
    21ac:	cf 93       	push	r28
    21ae:	df 93       	push	r29
    21b0:	dc 01       	movw	r26, r24
    21b2:	15 96       	adiw	r26, 0x05	; 5
    21b4:	ed 91       	ld	r30, X+
    21b6:	fc 91       	ld	r31, X
    21b8:	16 97       	sbiw	r26, 0x06	; 6
    21ba:	c6 81       	ldd	r28, Z+6	; 0x06
    21bc:	d7 81       	ldd	r29, Z+7	; 0x07
    21be:	8e 01       	movw	r16, r28
    21c0:	04 5f       	subi	r16, 0xF4	; 244
    21c2:	1f 4f       	sbci	r17, 0xFF	; 255
    21c4:	c8 01       	movw	r24, r16
    21c6:	0e 94 ad 05 	call	0xb5a	; 0xb5a <uxListRemove>
    21ca:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <uxSchedulerSuspended>
    21ce:	81 11       	cpse	r24, r1
    21d0:	1c c0       	rjmp	.+56     	; 0x220a <__stack+0xb>
    21d2:	0a 50       	subi	r16, 0x0A	; 10
    21d4:	11 09       	sbc	r17, r1
    21d6:	c8 01       	movw	r24, r16
    21d8:	0e 94 ad 05 	call	0xb5a	; 0xb5a <uxListRemove>
    21dc:	8e 89       	ldd	r24, Y+22	; 0x16
    21de:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <uxTopReadyPriority>
    21e2:	98 17       	cp	r25, r24
    21e4:	10 f4       	brcc	.+4      	; 0x21ea <xTaskRemoveFromEventList+0x42>
    21e6:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <uxTopReadyPriority>
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	9c 01       	movw	r18, r24
    21ee:	22 0f       	add	r18, r18
    21f0:	33 1f       	adc	r19, r19
    21f2:	22 0f       	add	r18, r18
    21f4:	33 1f       	adc	r19, r19
    21f6:	22 0f       	add	r18, r18
    21f8:	33 1f       	adc	r19, r19
    21fa:	82 0f       	add	r24, r18
    21fc:	93 1f       	adc	r25, r19
    21fe:	b8 01       	movw	r22, r16
    2200:	86 5a       	subi	r24, 0xA6	; 166
    2202:	97 4f       	sbci	r25, 0xF7	; 247
    2204:	0e 94 5b 05 	call	0xab6	; 0xab6 <vListInsertEnd>
    2208:	05 c0       	rjmp	.+10     	; 0x2214 <__stack+0x15>
    220a:	b8 01       	movw	r22, r16
    220c:	8b e3       	ldi	r24, 0x3B	; 59
    220e:	98 e0       	ldi	r25, 0x08	; 8
    2210:	0e 94 5b 05 	call	0xab6	; 0xab6 <vListInsertEnd>
    2214:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    2218:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    221c:	9e 89       	ldd	r25, Y+22	; 0x16
    221e:	86 89       	ldd	r24, Z+22	; 0x16
    2220:	89 17       	cp	r24, r25
    2222:	20 f4       	brcc	.+8      	; 0x222c <__stack+0x2d>
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	80 93 21 08 	sts	0x0821, r24	; 0x800821 <xYieldPending>
    222a:	01 c0       	rjmp	.+2      	; 0x222e <__stack+0x2f>
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	df 91       	pop	r29
    2230:	cf 91       	pop	r28
    2232:	1f 91       	pop	r17
    2234:	0f 91       	pop	r16
    2236:	08 95       	ret

00002238 <vTaskInternalSetTimeOutState>:
    2238:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <xNumOfOverflows>
    223c:	fc 01       	movw	r30, r24
    223e:	20 83       	st	Z, r18
    2240:	20 91 25 08 	lds	r18, 0x0825	; 0x800825 <xTickCount>
    2244:	30 91 26 08 	lds	r19, 0x0826	; 0x800826 <xTickCount+0x1>
    2248:	32 83       	std	Z+2, r19	; 0x02
    224a:	21 83       	std	Z+1, r18	; 0x01
    224c:	08 95       	ret

0000224e <xTaskCheckForTimeOut>:
    224e:	cf 93       	push	r28
    2250:	df 93       	push	r29
    2252:	0f b6       	in	r0, 0x3f	; 63
    2254:	f8 94       	cli
    2256:	0f 92       	push	r0
    2258:	20 91 25 08 	lds	r18, 0x0825	; 0x800825 <xTickCount>
    225c:	30 91 26 08 	lds	r19, 0x0826	; 0x800826 <xTickCount+0x1>
    2260:	db 01       	movw	r26, r22
    2262:	4d 91       	ld	r20, X+
    2264:	5c 91       	ld	r21, X
    2266:	4f 3f       	cpi	r20, 0xFF	; 255
    2268:	bf ef       	ldi	r27, 0xFF	; 255
    226a:	5b 07       	cpc	r21, r27
    226c:	e9 f0       	breq	.+58     	; 0x22a8 <xTaskCheckForTimeOut+0x5a>
    226e:	ec 01       	movw	r28, r24
    2270:	e9 81       	ldd	r30, Y+1	; 0x01
    2272:	fa 81       	ldd	r31, Y+2	; 0x02
    2274:	a0 91 20 08 	lds	r26, 0x0820	; 0x800820 <xNumOfOverflows>
    2278:	b8 81       	ld	r27, Y
    227a:	ba 17       	cp	r27, r26
    227c:	19 f0       	breq	.+6      	; 0x2284 <xTaskCheckForTimeOut+0x36>
    227e:	2e 17       	cp	r18, r30
    2280:	3f 07       	cpc	r19, r31
    2282:	a0 f4       	brcc	.+40     	; 0x22ac <xTaskCheckForTimeOut+0x5e>
    2284:	2e 1b       	sub	r18, r30
    2286:	3f 0b       	sbc	r19, r31
    2288:	24 17       	cp	r18, r20
    228a:	35 07       	cpc	r19, r21
    228c:	40 f4       	brcc	.+16     	; 0x229e <xTaskCheckForTimeOut+0x50>
    228e:	fb 01       	movw	r30, r22
    2290:	42 1b       	sub	r20, r18
    2292:	53 0b       	sbc	r21, r19
    2294:	51 83       	std	Z+1, r21	; 0x01
    2296:	40 83       	st	Z, r20
    2298:	cf df       	rcall	.-98     	; 0x2238 <vTaskInternalSetTimeOutState>
    229a:	80 e0       	ldi	r24, 0x00	; 0
    229c:	08 c0       	rjmp	.+16     	; 0x22ae <xTaskCheckForTimeOut+0x60>
    229e:	fb 01       	movw	r30, r22
    22a0:	11 82       	std	Z+1, r1	; 0x01
    22a2:	10 82       	st	Z, r1
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	03 c0       	rjmp	.+6      	; 0x22ae <xTaskCheckForTimeOut+0x60>
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	01 c0       	rjmp	.+2      	; 0x22ae <xTaskCheckForTimeOut+0x60>
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	0f 90       	pop	r0
    22b0:	0f be       	out	0x3f, r0	; 63
    22b2:	df 91       	pop	r29
    22b4:	cf 91       	pop	r28
    22b6:	08 95       	ret

000022b8 <vTaskMissedYield>:
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	80 93 21 08 	sts	0x0821, r24	; 0x800821 <xYieldPending>
    22be:	08 95       	ret

000022c0 <xTaskGetCurrentTaskHandle>:
    22c0:	80 91 7e 08 	lds	r24, 0x087E	; 0x80087e <pxCurrentTCB>
    22c4:	90 91 7f 08 	lds	r25, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    22c8:	08 95       	ret

000022ca <xTaskGetSchedulerState>:
    22ca:	80 91 23 08 	lds	r24, 0x0823	; 0x800823 <xSchedulerRunning>
    22ce:	88 23       	and	r24, r24
    22d0:	31 f0       	breq	.+12     	; 0x22de <xTaskGetSchedulerState+0x14>
    22d2:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <uxSchedulerSuspended>
    22d6:	88 23       	and	r24, r24
    22d8:	21 f0       	breq	.+8      	; 0x22e2 <xTaskGetSchedulerState+0x18>
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	08 95       	ret
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	08 95       	ret
    22e2:	82 e0       	ldi	r24, 0x02	; 2
    22e4:	08 95       	ret

000022e6 <xTaskPriorityInherit>:
    22e6:	0f 93       	push	r16
    22e8:	1f 93       	push	r17
    22ea:	cf 93       	push	r28
    22ec:	df 93       	push	r29
    22ee:	fc 01       	movw	r30, r24
    22f0:	89 2b       	or	r24, r25
    22f2:	09 f4       	brne	.+2      	; 0x22f6 <xTaskPriorityInherit+0x10>
    22f4:	64 c0       	rjmp	.+200    	; 0x23be <xTaskPriorityInherit+0xd8>
    22f6:	26 89       	ldd	r18, Z+22	; 0x16
    22f8:	a0 91 7e 08 	lds	r26, 0x087E	; 0x80087e <pxCurrentTCB>
    22fc:	b0 91 7f 08 	lds	r27, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    2300:	56 96       	adiw	r26, 0x16	; 22
    2302:	8c 91       	ld	r24, X
    2304:	28 17       	cp	r18, r24
    2306:	08 f0       	brcs	.+2      	; 0x230a <xTaskPriorityInherit+0x24>
    2308:	4e c0       	rjmp	.+156    	; 0x23a6 <xTaskPriorityInherit+0xc0>
    230a:	84 85       	ldd	r24, Z+12	; 0x0c
    230c:	95 85       	ldd	r25, Z+13	; 0x0d
    230e:	99 23       	and	r25, r25
    2310:	64 f0       	brlt	.+24     	; 0x232a <xTaskPriorityInherit+0x44>
    2312:	a0 91 7e 08 	lds	r26, 0x087E	; 0x80087e <pxCurrentTCB>
    2316:	b0 91 7f 08 	lds	r27, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    231a:	56 96       	adiw	r26, 0x16	; 22
    231c:	3c 91       	ld	r19, X
    231e:	84 e0       	ldi	r24, 0x04	; 4
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	83 1b       	sub	r24, r19
    2324:	91 09       	sbc	r25, r1
    2326:	95 87       	std	Z+13, r25	; 0x0d
    2328:	84 87       	std	Z+12, r24	; 0x0c
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	c9 01       	movw	r24, r18
    232e:	88 0f       	add	r24, r24
    2330:	99 1f       	adc	r25, r25
    2332:	88 0f       	add	r24, r24
    2334:	99 1f       	adc	r25, r25
    2336:	88 0f       	add	r24, r24
    2338:	99 1f       	adc	r25, r25
    233a:	28 0f       	add	r18, r24
    233c:	39 1f       	adc	r19, r25
    233e:	26 5a       	subi	r18, 0xA6	; 166
    2340:	37 4f       	sbci	r19, 0xF7	; 247
    2342:	82 85       	ldd	r24, Z+10	; 0x0a
    2344:	93 85       	ldd	r25, Z+11	; 0x0b
    2346:	82 17       	cp	r24, r18
    2348:	93 07       	cpc	r25, r19
    234a:	21 f5       	brne	.+72     	; 0x2394 <xTaskPriorityInherit+0xae>
    234c:	8f 01       	movw	r16, r30
    234e:	ef 01       	movw	r28, r30
    2350:	22 96       	adiw	r28, 0x02	; 2
    2352:	ce 01       	movw	r24, r28
    2354:	0e 94 ad 05 	call	0xb5a	; 0xb5a <uxListRemove>
    2358:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    235c:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    2360:	86 89       	ldd	r24, Z+22	; 0x16
    2362:	f8 01       	movw	r30, r16
    2364:	86 8b       	std	Z+22, r24	; 0x16
    2366:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <uxTopReadyPriority>
    236a:	98 17       	cp	r25, r24
    236c:	10 f4       	brcc	.+4      	; 0x2372 <xTaskPriorityInherit+0x8c>
    236e:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <uxTopReadyPriority>
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	9c 01       	movw	r18, r24
    2376:	22 0f       	add	r18, r18
    2378:	33 1f       	adc	r19, r19
    237a:	22 0f       	add	r18, r18
    237c:	33 1f       	adc	r19, r19
    237e:	22 0f       	add	r18, r18
    2380:	33 1f       	adc	r19, r19
    2382:	82 0f       	add	r24, r18
    2384:	93 1f       	adc	r25, r19
    2386:	be 01       	movw	r22, r28
    2388:	86 5a       	subi	r24, 0xA6	; 166
    238a:	97 4f       	sbci	r25, 0xF7	; 247
    238c:	0e 94 5b 05 	call	0xab6	; 0xab6 <vListInsertEnd>
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	16 c0       	rjmp	.+44     	; 0x23c0 <xTaskPriorityInherit+0xda>
    2394:	a0 91 7e 08 	lds	r26, 0x087E	; 0x80087e <pxCurrentTCB>
    2398:	b0 91 7f 08 	lds	r27, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    239c:	56 96       	adiw	r26, 0x16	; 22
    239e:	8c 91       	ld	r24, X
    23a0:	86 8b       	std	Z+22, r24	; 0x16
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	0d c0       	rjmp	.+26     	; 0x23c0 <xTaskPriorityInherit+0xda>
    23a6:	a0 91 7e 08 	lds	r26, 0x087E	; 0x80087e <pxCurrentTCB>
    23aa:	b0 91 7f 08 	lds	r27, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	23 a1       	ldd	r18, Z+35	; 0x23
    23b2:	56 96       	adiw	r26, 0x16	; 22
    23b4:	9c 91       	ld	r25, X
    23b6:	29 17       	cp	r18, r25
    23b8:	18 f0       	brcs	.+6      	; 0x23c0 <xTaskPriorityInherit+0xda>
    23ba:	80 e0       	ldi	r24, 0x00	; 0
    23bc:	01 c0       	rjmp	.+2      	; 0x23c0 <xTaskPriorityInherit+0xda>
    23be:	80 e0       	ldi	r24, 0x00	; 0
    23c0:	df 91       	pop	r29
    23c2:	cf 91       	pop	r28
    23c4:	1f 91       	pop	r17
    23c6:	0f 91       	pop	r16
    23c8:	08 95       	ret

000023ca <xTaskPriorityDisinherit>:
    23ca:	0f 93       	push	r16
    23cc:	1f 93       	push	r17
    23ce:	cf 93       	push	r28
    23d0:	df 93       	push	r29
    23d2:	fc 01       	movw	r30, r24
    23d4:	89 2b       	or	r24, r25
    23d6:	79 f1       	breq	.+94     	; 0x2436 <xTaskPriorityDisinherit+0x6c>
    23d8:	84 a1       	ldd	r24, Z+36	; 0x24
    23da:	81 50       	subi	r24, 0x01	; 1
    23dc:	84 a3       	std	Z+36, r24	; 0x24
    23de:	26 89       	ldd	r18, Z+22	; 0x16
    23e0:	93 a1       	ldd	r25, Z+35	; 0x23
    23e2:	29 17       	cp	r18, r25
    23e4:	51 f1       	breq	.+84     	; 0x243a <xTaskPriorityDisinherit+0x70>
    23e6:	81 11       	cpse	r24, r1
    23e8:	2a c0       	rjmp	.+84     	; 0x243e <xTaskPriorityDisinherit+0x74>
    23ea:	ef 01       	movw	r28, r30
    23ec:	8f 01       	movw	r16, r30
    23ee:	0e 5f       	subi	r16, 0xFE	; 254
    23f0:	1f 4f       	sbci	r17, 0xFF	; 255
    23f2:	c8 01       	movw	r24, r16
    23f4:	0e 94 ad 05 	call	0xb5a	; 0xb5a <uxListRemove>
    23f8:	8b a1       	ldd	r24, Y+35	; 0x23
    23fa:	8e 8b       	std	Y+22, r24	; 0x16
    23fc:	24 e0       	ldi	r18, 0x04	; 4
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	28 1b       	sub	r18, r24
    2402:	31 09       	sbc	r19, r1
    2404:	3d 87       	std	Y+13, r19	; 0x0d
    2406:	2c 87       	std	Y+12, r18	; 0x0c
    2408:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <uxTopReadyPriority>
    240c:	98 17       	cp	r25, r24
    240e:	10 f4       	brcc	.+4      	; 0x2414 <xTaskPriorityDisinherit+0x4a>
    2410:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <uxTopReadyPriority>
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	9c 01       	movw	r18, r24
    2418:	22 0f       	add	r18, r18
    241a:	33 1f       	adc	r19, r19
    241c:	22 0f       	add	r18, r18
    241e:	33 1f       	adc	r19, r19
    2420:	22 0f       	add	r18, r18
    2422:	33 1f       	adc	r19, r19
    2424:	82 0f       	add	r24, r18
    2426:	93 1f       	adc	r25, r19
    2428:	b8 01       	movw	r22, r16
    242a:	86 5a       	subi	r24, 0xA6	; 166
    242c:	97 4f       	sbci	r25, 0xF7	; 247
    242e:	0e 94 5b 05 	call	0xab6	; 0xab6 <vListInsertEnd>
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	05 c0       	rjmp	.+10     	; 0x2440 <xTaskPriorityDisinherit+0x76>
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	03 c0       	rjmp	.+6      	; 0x2440 <xTaskPriorityDisinherit+0x76>
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	01 c0       	rjmp	.+2      	; 0x2440 <xTaskPriorityDisinherit+0x76>
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	df 91       	pop	r29
    2442:	cf 91       	pop	r28
    2444:	1f 91       	pop	r17
    2446:	0f 91       	pop	r16
    2448:	08 95       	ret

0000244a <vTaskPriorityDisinheritAfterTimeout>:
    244a:	0f 93       	push	r16
    244c:	1f 93       	push	r17
    244e:	cf 93       	push	r28
    2450:	df 93       	push	r29
    2452:	fc 01       	movw	r30, r24
    2454:	89 2b       	or	r24, r25
    2456:	09 f4       	brne	.+2      	; 0x245a <vTaskPriorityDisinheritAfterTimeout+0x10>
    2458:	43 c0       	rjmp	.+134    	; 0x24e0 <vTaskPriorityDisinheritAfterTimeout+0x96>
    245a:	93 a1       	ldd	r25, Z+35	; 0x23
    245c:	96 17       	cp	r25, r22
    245e:	08 f4       	brcc	.+2      	; 0x2462 <vTaskPriorityDisinheritAfterTimeout+0x18>
    2460:	96 2f       	mov	r25, r22
    2462:	86 89       	ldd	r24, Z+22	; 0x16
    2464:	89 17       	cp	r24, r25
    2466:	e1 f1       	breq	.+120    	; 0x24e0 <vTaskPriorityDisinheritAfterTimeout+0x96>
    2468:	24 a1       	ldd	r18, Z+36	; 0x24
    246a:	21 30       	cpi	r18, 0x01	; 1
    246c:	c9 f5       	brne	.+114    	; 0x24e0 <vTaskPriorityDisinheritAfterTimeout+0x96>
    246e:	96 8b       	std	Z+22, r25	; 0x16
    2470:	24 85       	ldd	r18, Z+12	; 0x0c
    2472:	35 85       	ldd	r19, Z+13	; 0x0d
    2474:	33 23       	and	r19, r19
    2476:	34 f0       	brlt	.+12     	; 0x2484 <vTaskPriorityDisinheritAfterTimeout+0x3a>
    2478:	24 e0       	ldi	r18, 0x04	; 4
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	29 1b       	sub	r18, r25
    247e:	31 09       	sbc	r19, r1
    2480:	35 87       	std	Z+13, r19	; 0x0d
    2482:	24 87       	std	Z+12, r18	; 0x0c
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	9c 01       	movw	r18, r24
    2488:	22 0f       	add	r18, r18
    248a:	33 1f       	adc	r19, r19
    248c:	22 0f       	add	r18, r18
    248e:	33 1f       	adc	r19, r19
    2490:	22 0f       	add	r18, r18
    2492:	33 1f       	adc	r19, r19
    2494:	82 0f       	add	r24, r18
    2496:	93 1f       	adc	r25, r19
    2498:	86 5a       	subi	r24, 0xA6	; 166
    249a:	97 4f       	sbci	r25, 0xF7	; 247
    249c:	22 85       	ldd	r18, Z+10	; 0x0a
    249e:	33 85       	ldd	r19, Z+11	; 0x0b
    24a0:	28 17       	cp	r18, r24
    24a2:	39 07       	cpc	r19, r25
    24a4:	e9 f4       	brne	.+58     	; 0x24e0 <vTaskPriorityDisinheritAfterTimeout+0x96>
    24a6:	ef 01       	movw	r28, r30
    24a8:	8f 01       	movw	r16, r30
    24aa:	0e 5f       	subi	r16, 0xFE	; 254
    24ac:	1f 4f       	sbci	r17, 0xFF	; 255
    24ae:	c8 01       	movw	r24, r16
    24b0:	0e 94 ad 05 	call	0xb5a	; 0xb5a <uxListRemove>
    24b4:	8e 89       	ldd	r24, Y+22	; 0x16
    24b6:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <uxTopReadyPriority>
    24ba:	98 17       	cp	r25, r24
    24bc:	10 f4       	brcc	.+4      	; 0x24c2 <vTaskPriorityDisinheritAfterTimeout+0x78>
    24be:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <uxTopReadyPriority>
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	9c 01       	movw	r18, r24
    24c6:	22 0f       	add	r18, r18
    24c8:	33 1f       	adc	r19, r19
    24ca:	22 0f       	add	r18, r18
    24cc:	33 1f       	adc	r19, r19
    24ce:	22 0f       	add	r18, r18
    24d0:	33 1f       	adc	r19, r19
    24d2:	82 0f       	add	r24, r18
    24d4:	93 1f       	adc	r25, r19
    24d6:	b8 01       	movw	r22, r16
    24d8:	86 5a       	subi	r24, 0xA6	; 166
    24da:	97 4f       	sbci	r25, 0xF7	; 247
    24dc:	0e 94 5b 05 	call	0xab6	; 0xab6 <vListInsertEnd>
    24e0:	df 91       	pop	r29
    24e2:	cf 91       	pop	r28
    24e4:	1f 91       	pop	r17
    24e6:	0f 91       	pop	r16
    24e8:	08 95       	ret

000024ea <pvTaskIncrementMutexHeldCount>:
    24ea:	80 91 7e 08 	lds	r24, 0x087E	; 0x80087e <pxCurrentTCB>
    24ee:	90 91 7f 08 	lds	r25, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    24f2:	89 2b       	or	r24, r25
    24f4:	39 f0       	breq	.+14     	; 0x2504 <pvTaskIncrementMutexHeldCount+0x1a>
    24f6:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    24fa:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    24fe:	84 a1       	ldd	r24, Z+36	; 0x24
    2500:	8f 5f       	subi	r24, 0xFF	; 255
    2502:	84 a3       	std	Z+36, r24	; 0x24
    2504:	80 91 7e 08 	lds	r24, 0x087E	; 0x80087e <pxCurrentTCB>
    2508:	90 91 7f 08 	lds	r25, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    250c:	08 95       	ret

0000250e <xTaskNotifyWait>:
    250e:	4f 92       	push	r4
    2510:	5f 92       	push	r5
    2512:	6f 92       	push	r6
    2514:	7f 92       	push	r7
    2516:	8f 92       	push	r8
    2518:	9f 92       	push	r9
    251a:	af 92       	push	r10
    251c:	bf 92       	push	r11
    251e:	ef 92       	push	r14
    2520:	ff 92       	push	r15
    2522:	0f 93       	push	r16
    2524:	1f 93       	push	r17
    2526:	49 01       	movw	r8, r18
    2528:	5a 01       	movw	r10, r20
    252a:	0f b6       	in	r0, 0x3f	; 63
    252c:	f8 94       	cli
    252e:	0f 92       	push	r0
    2530:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    2534:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    2538:	23 a5       	ldd	r18, Z+43	; 0x2b
    253a:	22 30       	cpi	r18, 0x02	; 2
    253c:	21 f1       	breq	.+72     	; 0x2586 <xTaskNotifyWait+0x78>
    253e:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    2542:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    2546:	47 a0       	ldd	r4, Z+39	; 0x27
    2548:	50 a4       	ldd	r5, Z+40	; 0x28
    254a:	61 a4       	ldd	r6, Z+41	; 0x29
    254c:	72 a4       	ldd	r7, Z+42	; 0x2a
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	80 95       	com	r24
    2554:	90 95       	com	r25
    2556:	a0 95       	com	r26
    2558:	b0 95       	com	r27
    255a:	84 21       	and	r24, r4
    255c:	95 21       	and	r25, r5
    255e:	a6 21       	and	r26, r6
    2560:	b7 21       	and	r27, r7
    2562:	87 a3       	std	Z+39, r24	; 0x27
    2564:	90 a7       	std	Z+40, r25	; 0x28
    2566:	a1 a7       	std	Z+41, r26	; 0x29
    2568:	b2 a7       	std	Z+42, r27	; 0x2a
    256a:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    256e:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	83 a7       	std	Z+43, r24	; 0x2b
    2576:	e1 14       	cp	r14, r1
    2578:	f1 04       	cpc	r15, r1
    257a:	29 f0       	breq	.+10     	; 0x2586 <xTaskNotifyWait+0x78>
    257c:	61 e0       	ldi	r22, 0x01	; 1
    257e:	c7 01       	movw	r24, r14
    2580:	5f da       	rcall	.-2882   	; 0x1a40 <prvAddCurrentTaskToDelayedList>
    2582:	0e 94 82 06 	call	0xd04	; 0xd04 <vPortYield>
    2586:	0f 90       	pop	r0
    2588:	0f be       	out	0x3f, r0	; 63
    258a:	0f b6       	in	r0, 0x3f	; 63
    258c:	f8 94       	cli
    258e:	0f 92       	push	r0
    2590:	01 15       	cp	r16, r1
    2592:	11 05       	cpc	r17, r1
    2594:	69 f0       	breq	.+26     	; 0x25b0 <xTaskNotifyWait+0xa2>
    2596:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    259a:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    259e:	87 a1       	ldd	r24, Z+39	; 0x27
    25a0:	90 a5       	ldd	r25, Z+40	; 0x28
    25a2:	a1 a5       	ldd	r26, Z+41	; 0x29
    25a4:	b2 a5       	ldd	r27, Z+42	; 0x2a
    25a6:	f8 01       	movw	r30, r16
    25a8:	80 83       	st	Z, r24
    25aa:	91 83       	std	Z+1, r25	; 0x01
    25ac:	a2 83       	std	Z+2, r26	; 0x02
    25ae:	b3 83       	std	Z+3, r27	; 0x03
    25b0:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    25b4:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    25b8:	83 a5       	ldd	r24, Z+43	; 0x2b
    25ba:	82 30       	cpi	r24, 0x02	; 2
    25bc:	b1 f4       	brne	.+44     	; 0x25ea <xTaskNotifyWait+0xdc>
    25be:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    25c2:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    25c6:	87 a1       	ldd	r24, Z+39	; 0x27
    25c8:	90 a5       	ldd	r25, Z+40	; 0x28
    25ca:	a1 a5       	ldd	r26, Z+41	; 0x29
    25cc:	b2 a5       	ldd	r27, Z+42	; 0x2a
    25ce:	80 94       	com	r8
    25d0:	90 94       	com	r9
    25d2:	a0 94       	com	r10
    25d4:	b0 94       	com	r11
    25d6:	88 22       	and	r8, r24
    25d8:	99 22       	and	r9, r25
    25da:	aa 22       	and	r10, r26
    25dc:	bb 22       	and	r11, r27
    25de:	87 a2       	std	Z+39, r8	; 0x27
    25e0:	90 a6       	std	Z+40, r9	; 0x28
    25e2:	a1 a6       	std	Z+41, r10	; 0x29
    25e4:	b2 a6       	std	Z+42, r11	; 0x2a
    25e6:	81 e0       	ldi	r24, 0x01	; 1
    25e8:	01 c0       	rjmp	.+2      	; 0x25ec <xTaskNotifyWait+0xde>
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    25f0:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    25f4:	13 a6       	std	Z+43, r1	; 0x2b
    25f6:	0f 90       	pop	r0
    25f8:	0f be       	out	0x3f, r0	; 63
    25fa:	1f 91       	pop	r17
    25fc:	0f 91       	pop	r16
    25fe:	ff 90       	pop	r15
    2600:	ef 90       	pop	r14
    2602:	bf 90       	pop	r11
    2604:	af 90       	pop	r10
    2606:	9f 90       	pop	r9
    2608:	8f 90       	pop	r8
    260a:	7f 90       	pop	r7
    260c:	6f 90       	pop	r6
    260e:	5f 90       	pop	r5
    2610:	4f 90       	pop	r4
    2612:	08 95       	ret

00002614 <xTaskGenericNotify>:
    2614:	0f 93       	push	r16
    2616:	1f 93       	push	r17
    2618:	cf 93       	push	r28
    261a:	df 93       	push	r29
    261c:	fc 01       	movw	r30, r24
    261e:	0f b6       	in	r0, 0x3f	; 63
    2620:	f8 94       	cli
    2622:	0f 92       	push	r0
    2624:	01 15       	cp	r16, r1
    2626:	11 05       	cpc	r17, r1
    2628:	49 f0       	breq	.+18     	; 0x263c <xTaskGenericNotify+0x28>
    262a:	87 a1       	ldd	r24, Z+39	; 0x27
    262c:	90 a5       	ldd	r25, Z+40	; 0x28
    262e:	a1 a5       	ldd	r26, Z+41	; 0x29
    2630:	b2 a5       	ldd	r27, Z+42	; 0x2a
    2632:	e8 01       	movw	r28, r16
    2634:	88 83       	st	Y, r24
    2636:	99 83       	std	Y+1, r25	; 0x01
    2638:	aa 83       	std	Y+2, r26	; 0x02
    263a:	bb 83       	std	Y+3, r27	; 0x03
    263c:	83 a5       	ldd	r24, Z+43	; 0x2b
    263e:	92 e0       	ldi	r25, 0x02	; 2
    2640:	93 a7       	std	Z+43, r25	; 0x2b
    2642:	22 30       	cpi	r18, 0x02	; 2
    2644:	b1 f0       	breq	.+44     	; 0x2672 <xTaskGenericNotify+0x5e>
    2646:	18 f4       	brcc	.+6      	; 0x264e <xTaskGenericNotify+0x3a>
    2648:	21 30       	cpi	r18, 0x01	; 1
    264a:	31 f0       	breq	.+12     	; 0x2658 <xTaskGenericNotify+0x44>
    264c:	2a c0       	rjmp	.+84     	; 0x26a2 <xTaskGenericNotify+0x8e>
    264e:	23 30       	cpi	r18, 0x03	; 3
    2650:	e9 f0       	breq	.+58     	; 0x268c <xTaskGenericNotify+0x78>
    2652:	24 30       	cpi	r18, 0x04	; 4
    2654:	01 f1       	breq	.+64     	; 0x2696 <xTaskGenericNotify+0x82>
    2656:	25 c0       	rjmp	.+74     	; 0x26a2 <xTaskGenericNotify+0x8e>
    2658:	07 a1       	ldd	r16, Z+39	; 0x27
    265a:	10 a5       	ldd	r17, Z+40	; 0x28
    265c:	21 a5       	ldd	r18, Z+41	; 0x29
    265e:	32 a5       	ldd	r19, Z+42	; 0x2a
    2660:	40 2b       	or	r20, r16
    2662:	51 2b       	or	r21, r17
    2664:	62 2b       	or	r22, r18
    2666:	73 2b       	or	r23, r19
    2668:	47 a3       	std	Z+39, r20	; 0x27
    266a:	50 a7       	std	Z+40, r21	; 0x28
    266c:	61 a7       	std	Z+41, r22	; 0x29
    266e:	72 a7       	std	Z+42, r23	; 0x2a
    2670:	18 c0       	rjmp	.+48     	; 0x26a2 <xTaskGenericNotify+0x8e>
    2672:	47 a1       	ldd	r20, Z+39	; 0x27
    2674:	50 a5       	ldd	r21, Z+40	; 0x28
    2676:	61 a5       	ldd	r22, Z+41	; 0x29
    2678:	72 a5       	ldd	r23, Z+42	; 0x2a
    267a:	4f 5f       	subi	r20, 0xFF	; 255
    267c:	5f 4f       	sbci	r21, 0xFF	; 255
    267e:	6f 4f       	sbci	r22, 0xFF	; 255
    2680:	7f 4f       	sbci	r23, 0xFF	; 255
    2682:	47 a3       	std	Z+39, r20	; 0x27
    2684:	50 a7       	std	Z+40, r21	; 0x28
    2686:	61 a7       	std	Z+41, r22	; 0x29
    2688:	72 a7       	std	Z+42, r23	; 0x2a
    268a:	0b c0       	rjmp	.+22     	; 0x26a2 <xTaskGenericNotify+0x8e>
    268c:	47 a3       	std	Z+39, r20	; 0x27
    268e:	50 a7       	std	Z+40, r21	; 0x28
    2690:	61 a7       	std	Z+41, r22	; 0x29
    2692:	72 a7       	std	Z+42, r23	; 0x2a
    2694:	06 c0       	rjmp	.+12     	; 0x26a2 <xTaskGenericNotify+0x8e>
    2696:	82 30       	cpi	r24, 0x02	; 2
    2698:	79 f1       	breq	.+94     	; 0x26f8 <xTaskGenericNotify+0xe4>
    269a:	47 a3       	std	Z+39, r20	; 0x27
    269c:	50 a7       	std	Z+40, r21	; 0x28
    269e:	61 a7       	std	Z+41, r22	; 0x29
    26a0:	72 a7       	std	Z+42, r23	; 0x2a
    26a2:	81 30       	cpi	r24, 0x01	; 1
    26a4:	59 f5       	brne	.+86     	; 0x26fc <xTaskGenericNotify+0xe8>
    26a6:	ef 01       	movw	r28, r30
    26a8:	8f 01       	movw	r16, r30
    26aa:	0e 5f       	subi	r16, 0xFE	; 254
    26ac:	1f 4f       	sbci	r17, 0xFF	; 255
    26ae:	c8 01       	movw	r24, r16
    26b0:	0e 94 ad 05 	call	0xb5a	; 0xb5a <uxListRemove>
    26b4:	8e 89       	ldd	r24, Y+22	; 0x16
    26b6:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <uxTopReadyPriority>
    26ba:	98 17       	cp	r25, r24
    26bc:	10 f4       	brcc	.+4      	; 0x26c2 <xTaskGenericNotify+0xae>
    26be:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <uxTopReadyPriority>
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	9c 01       	movw	r18, r24
    26c6:	22 0f       	add	r18, r18
    26c8:	33 1f       	adc	r19, r19
    26ca:	22 0f       	add	r18, r18
    26cc:	33 1f       	adc	r19, r19
    26ce:	22 0f       	add	r18, r18
    26d0:	33 1f       	adc	r19, r19
    26d2:	82 0f       	add	r24, r18
    26d4:	93 1f       	adc	r25, r19
    26d6:	b8 01       	movw	r22, r16
    26d8:	86 5a       	subi	r24, 0xA6	; 166
    26da:	97 4f       	sbci	r25, 0xF7	; 247
    26dc:	0e 94 5b 05 	call	0xab6	; 0xab6 <vListInsertEnd>
    26e0:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    26e4:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    26e8:	9e 89       	ldd	r25, Y+22	; 0x16
    26ea:	86 89       	ldd	r24, Z+22	; 0x16
    26ec:	89 17       	cp	r24, r25
    26ee:	40 f4       	brcc	.+16     	; 0x2700 <xTaskGenericNotify+0xec>
    26f0:	0e 94 82 06 	call	0xd04	; 0xd04 <vPortYield>
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	05 c0       	rjmp	.+10     	; 0x2702 <xTaskGenericNotify+0xee>
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	03 c0       	rjmp	.+6      	; 0x2702 <xTaskGenericNotify+0xee>
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	01 c0       	rjmp	.+2      	; 0x2702 <xTaskGenericNotify+0xee>
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	0f 90       	pop	r0
    2704:	0f be       	out	0x3f, r0	; 63
    2706:	df 91       	pop	r29
    2708:	cf 91       	pop	r28
    270a:	1f 91       	pop	r17
    270c:	0f 91       	pop	r16
    270e:	08 95       	ret

00002710 <xTaskGenericNotifyFromISR>:
    2710:	ef 92       	push	r14
    2712:	ff 92       	push	r15
    2714:	0f 93       	push	r16
    2716:	1f 93       	push	r17
    2718:	cf 93       	push	r28
    271a:	df 93       	push	r29
    271c:	fc 01       	movw	r30, r24
    271e:	01 15       	cp	r16, r1
    2720:	11 05       	cpc	r17, r1
    2722:	49 f0       	breq	.+18     	; 0x2736 <xTaskGenericNotifyFromISR+0x26>
    2724:	87 a1       	ldd	r24, Z+39	; 0x27
    2726:	90 a5       	ldd	r25, Z+40	; 0x28
    2728:	a1 a5       	ldd	r26, Z+41	; 0x29
    272a:	b2 a5       	ldd	r27, Z+42	; 0x2a
    272c:	e8 01       	movw	r28, r16
    272e:	88 83       	st	Y, r24
    2730:	99 83       	std	Y+1, r25	; 0x01
    2732:	aa 83       	std	Y+2, r26	; 0x02
    2734:	bb 83       	std	Y+3, r27	; 0x03
    2736:	83 a5       	ldd	r24, Z+43	; 0x2b
    2738:	92 e0       	ldi	r25, 0x02	; 2
    273a:	93 a7       	std	Z+43, r25	; 0x2b
    273c:	22 30       	cpi	r18, 0x02	; 2
    273e:	b1 f0       	breq	.+44     	; 0x276c <xTaskGenericNotifyFromISR+0x5c>
    2740:	18 f4       	brcc	.+6      	; 0x2748 <xTaskGenericNotifyFromISR+0x38>
    2742:	21 30       	cpi	r18, 0x01	; 1
    2744:	31 f0       	breq	.+12     	; 0x2752 <xTaskGenericNotifyFromISR+0x42>
    2746:	2b c0       	rjmp	.+86     	; 0x279e <xTaskGenericNotifyFromISR+0x8e>
    2748:	23 30       	cpi	r18, 0x03	; 3
    274a:	e9 f0       	breq	.+58     	; 0x2786 <xTaskGenericNotifyFromISR+0x76>
    274c:	24 30       	cpi	r18, 0x04	; 4
    274e:	01 f1       	breq	.+64     	; 0x2790 <xTaskGenericNotifyFromISR+0x80>
    2750:	26 c0       	rjmp	.+76     	; 0x279e <xTaskGenericNotifyFromISR+0x8e>
    2752:	07 a1       	ldd	r16, Z+39	; 0x27
    2754:	10 a5       	ldd	r17, Z+40	; 0x28
    2756:	21 a5       	ldd	r18, Z+41	; 0x29
    2758:	32 a5       	ldd	r19, Z+42	; 0x2a
    275a:	40 2b       	or	r20, r16
    275c:	51 2b       	or	r21, r17
    275e:	62 2b       	or	r22, r18
    2760:	73 2b       	or	r23, r19
    2762:	47 a3       	std	Z+39, r20	; 0x27
    2764:	50 a7       	std	Z+40, r21	; 0x28
    2766:	61 a7       	std	Z+41, r22	; 0x29
    2768:	72 a7       	std	Z+42, r23	; 0x2a
    276a:	19 c0       	rjmp	.+50     	; 0x279e <xTaskGenericNotifyFromISR+0x8e>
    276c:	47 a1       	ldd	r20, Z+39	; 0x27
    276e:	50 a5       	ldd	r21, Z+40	; 0x28
    2770:	61 a5       	ldd	r22, Z+41	; 0x29
    2772:	72 a5       	ldd	r23, Z+42	; 0x2a
    2774:	4f 5f       	subi	r20, 0xFF	; 255
    2776:	5f 4f       	sbci	r21, 0xFF	; 255
    2778:	6f 4f       	sbci	r22, 0xFF	; 255
    277a:	7f 4f       	sbci	r23, 0xFF	; 255
    277c:	47 a3       	std	Z+39, r20	; 0x27
    277e:	50 a7       	std	Z+40, r21	; 0x28
    2780:	61 a7       	std	Z+41, r22	; 0x29
    2782:	72 a7       	std	Z+42, r23	; 0x2a
    2784:	0c c0       	rjmp	.+24     	; 0x279e <xTaskGenericNotifyFromISR+0x8e>
    2786:	47 a3       	std	Z+39, r20	; 0x27
    2788:	50 a7       	std	Z+40, r21	; 0x28
    278a:	61 a7       	std	Z+41, r22	; 0x29
    278c:	72 a7       	std	Z+42, r23	; 0x2a
    278e:	07 c0       	rjmp	.+14     	; 0x279e <xTaskGenericNotifyFromISR+0x8e>
    2790:	82 30       	cpi	r24, 0x02	; 2
    2792:	09 f4       	brne	.+2      	; 0x2796 <xTaskGenericNotifyFromISR+0x86>
    2794:	41 c0       	rjmp	.+130    	; 0x2818 <xTaskGenericNotifyFromISR+0x108>
    2796:	47 a3       	std	Z+39, r20	; 0x27
    2798:	50 a7       	std	Z+40, r21	; 0x28
    279a:	61 a7       	std	Z+41, r22	; 0x29
    279c:	72 a7       	std	Z+42, r23	; 0x2a
    279e:	81 30       	cpi	r24, 0x01	; 1
    27a0:	e9 f5       	brne	.+122    	; 0x281c <xTaskGenericNotifyFromISR+0x10c>
    27a2:	ef 01       	movw	r28, r30
    27a4:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <uxSchedulerSuspended>
    27a8:	81 11       	cpse	r24, r1
    27aa:	1d c0       	rjmp	.+58     	; 0x27e6 <xTaskGenericNotifyFromISR+0xd6>
    27ac:	8f 01       	movw	r16, r30
    27ae:	0e 5f       	subi	r16, 0xFE	; 254
    27b0:	1f 4f       	sbci	r17, 0xFF	; 255
    27b2:	c8 01       	movw	r24, r16
    27b4:	0e 94 ad 05 	call	0xb5a	; 0xb5a <uxListRemove>
    27b8:	8e 89       	ldd	r24, Y+22	; 0x16
    27ba:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <uxTopReadyPriority>
    27be:	98 17       	cp	r25, r24
    27c0:	10 f4       	brcc	.+4      	; 0x27c6 <xTaskGenericNotifyFromISR+0xb6>
    27c2:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <uxTopReadyPriority>
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	9c 01       	movw	r18, r24
    27ca:	22 0f       	add	r18, r18
    27cc:	33 1f       	adc	r19, r19
    27ce:	22 0f       	add	r18, r18
    27d0:	33 1f       	adc	r19, r19
    27d2:	22 0f       	add	r18, r18
    27d4:	33 1f       	adc	r19, r19
    27d6:	82 0f       	add	r24, r18
    27d8:	93 1f       	adc	r25, r19
    27da:	b8 01       	movw	r22, r16
    27dc:	86 5a       	subi	r24, 0xA6	; 166
    27de:	97 4f       	sbci	r25, 0xF7	; 247
    27e0:	0e 94 5b 05 	call	0xab6	; 0xab6 <vListInsertEnd>
    27e4:	07 c0       	rjmp	.+14     	; 0x27f4 <xTaskGenericNotifyFromISR+0xe4>
    27e6:	bf 01       	movw	r22, r30
    27e8:	64 5f       	subi	r22, 0xF4	; 244
    27ea:	7f 4f       	sbci	r23, 0xFF	; 255
    27ec:	8b e3       	ldi	r24, 0x3B	; 59
    27ee:	98 e0       	ldi	r25, 0x08	; 8
    27f0:	0e 94 5b 05 	call	0xab6	; 0xab6 <vListInsertEnd>
    27f4:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    27f8:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    27fc:	9e 89       	ldd	r25, Y+22	; 0x16
    27fe:	86 89       	ldd	r24, Z+22	; 0x16
    2800:	89 17       	cp	r24, r25
    2802:	70 f4       	brcc	.+28     	; 0x2820 <xTaskGenericNotifyFromISR+0x110>
    2804:	e1 14       	cp	r14, r1
    2806:	f1 04       	cpc	r15, r1
    2808:	19 f0       	breq	.+6      	; 0x2810 <xTaskGenericNotifyFromISR+0x100>
    280a:	81 e0       	ldi	r24, 0x01	; 1
    280c:	f7 01       	movw	r30, r14
    280e:	80 83       	st	Z, r24
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	80 93 21 08 	sts	0x0821, r24	; 0x800821 <xYieldPending>
    2816:	05 c0       	rjmp	.+10     	; 0x2822 <xTaskGenericNotifyFromISR+0x112>
    2818:	80 e0       	ldi	r24, 0x00	; 0
    281a:	03 c0       	rjmp	.+6      	; 0x2822 <xTaskGenericNotifyFromISR+0x112>
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	01 c0       	rjmp	.+2      	; 0x2822 <xTaskGenericNotifyFromISR+0x112>
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	df 91       	pop	r29
    2824:	cf 91       	pop	r28
    2826:	1f 91       	pop	r17
    2828:	0f 91       	pop	r16
    282a:	ff 90       	pop	r15
    282c:	ef 90       	pop	r14
    282e:	08 95       	ret

00002830 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2830:	00 97       	sbiw	r24, 0x00	; 0
    2832:	21 f4       	brne	.+8      	; 0x283c <xTaskNotifyStateClear+0xc>
    2834:	80 91 7e 08 	lds	r24, 0x087E	; 0x80087e <pxCurrentTCB>
    2838:	90 91 7f 08 	lds	r25, 0x087F	; 0x80087f <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    283c:	0f b6       	in	r0, 0x3f	; 63
    283e:	f8 94       	cli
    2840:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    2842:	fc 01       	movw	r30, r24
    2844:	23 a5       	ldd	r18, Z+43	; 0x2b
    2846:	22 30       	cpi	r18, 0x02	; 2
    2848:	19 f4       	brne	.+6      	; 0x2850 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    284a:	13 a6       	std	Z+43, r1	; 0x2b
                xReturn = pdPASS;
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	01 c0       	rjmp	.+2      	; 0x2852 <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    2850:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2852:	0f 90       	pop	r0
    2854:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2856:	08 95       	ret

00002858 <prvInsertTimerInActiveList>:
    2858:	fc 01       	movw	r30, r24
    285a:	73 83       	std	Z+3, r23	; 0x03
    285c:	62 83       	std	Z+2, r22	; 0x02
    285e:	91 87       	std	Z+9, r25	; 0x09
    2860:	80 87       	std	Z+8, r24	; 0x08
    2862:	46 17       	cp	r20, r22
    2864:	57 07       	cpc	r21, r23
    2866:	90 f0       	brcs	.+36     	; 0x288c <prvInsertTimerInActiveList+0x34>
    2868:	42 1b       	sub	r20, r18
    286a:	53 0b       	sbc	r21, r19
    286c:	84 85       	ldd	r24, Z+12	; 0x0c
    286e:	95 85       	ldd	r25, Z+13	; 0x0d
    2870:	48 17       	cp	r20, r24
    2872:	59 07       	cpc	r21, r25
    2874:	e0 f4       	brcc	.+56     	; 0x28ae <prvInsertTimerInActiveList+0x56>
    2876:	bf 01       	movw	r22, r30
    2878:	6e 5f       	subi	r22, 0xFE	; 254
    287a:	7f 4f       	sbci	r23, 0xFF	; 255
    287c:	80 91 86 08 	lds	r24, 0x0886	; 0x800886 <pxOverflowTimerList>
    2880:	90 91 87 08 	lds	r25, 0x0887	; 0x800887 <pxOverflowTimerList+0x1>
    2884:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <vListInsert>
    2888:	80 e0       	ldi	r24, 0x00	; 0
    288a:	08 95       	ret
    288c:	42 17       	cp	r20, r18
    288e:	53 07       	cpc	r21, r19
    2890:	18 f4       	brcc	.+6      	; 0x2898 <prvInsertTimerInActiveList+0x40>
    2892:	62 17       	cp	r22, r18
    2894:	73 07       	cpc	r23, r19
    2896:	68 f4       	brcc	.+26     	; 0x28b2 <prvInsertTimerInActiveList+0x5a>
    2898:	bf 01       	movw	r22, r30
    289a:	6e 5f       	subi	r22, 0xFE	; 254
    289c:	7f 4f       	sbci	r23, 0xFF	; 255
    289e:	80 91 88 08 	lds	r24, 0x0888	; 0x800888 <pxCurrentTimerList>
    28a2:	90 91 89 08 	lds	r25, 0x0889	; 0x800889 <pxCurrentTimerList+0x1>
    28a6:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <vListInsert>
    28aa:	80 e0       	ldi	r24, 0x00	; 0
    28ac:	08 95       	ret
    28ae:	81 e0       	ldi	r24, 0x01	; 1
    28b0:	08 95       	ret
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	08 95       	ret

000028b6 <prvCheckForValidListAndQueue>:
    28b6:	0f b6       	in	r0, 0x3f	; 63
    28b8:	f8 94       	cli
    28ba:	0f 92       	push	r0
    28bc:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <xTimerQueue>
    28c0:	90 91 85 08 	lds	r25, 0x0885	; 0x800885 <xTimerQueue+0x1>
    28c4:	89 2b       	or	r24, r25
    28c6:	e9 f4       	brne	.+58     	; 0x2902 <prvCheckForValidListAndQueue+0x4c>
    28c8:	83 e9       	ldi	r24, 0x93	; 147
    28ca:	98 e0       	ldi	r25, 0x08	; 8
    28cc:	0e 94 49 05 	call	0xa92	; 0xa92 <vListInitialise>
    28d0:	8a e8       	ldi	r24, 0x8A	; 138
    28d2:	98 e0       	ldi	r25, 0x08	; 8
    28d4:	0e 94 49 05 	call	0xa92	; 0xa92 <vListInitialise>
    28d8:	83 e9       	ldi	r24, 0x93	; 147
    28da:	98 e0       	ldi	r25, 0x08	; 8
    28dc:	90 93 89 08 	sts	0x0889, r25	; 0x800889 <pxCurrentTimerList+0x1>
    28e0:	80 93 88 08 	sts	0x0888, r24	; 0x800888 <pxCurrentTimerList>
    28e4:	8a e8       	ldi	r24, 0x8A	; 138
    28e6:	98 e0       	ldi	r25, 0x08	; 8
    28e8:	90 93 87 08 	sts	0x0887, r25	; 0x800887 <pxOverflowTimerList+0x1>
    28ec:	80 93 86 08 	sts	0x0886, r24	; 0x800886 <pxOverflowTimerList>
    28f0:	40 e0       	ldi	r20, 0x00	; 0
    28f2:	65 e0       	ldi	r22, 0x05	; 5
    28f4:	8a e0       	ldi	r24, 0x0A	; 10
    28f6:	0e 94 5d 08 	call	0x10ba	; 0x10ba <xQueueGenericCreate>
    28fa:	90 93 85 08 	sts	0x0885, r25	; 0x800885 <xTimerQueue+0x1>
    28fe:	80 93 84 08 	sts	0x0884, r24	; 0x800884 <xTimerQueue>
    2902:	0f 90       	pop	r0
    2904:	0f be       	out	0x3f, r0	; 63
    2906:	08 95       	ret

00002908 <xTimerCreateTimerTask>:
    2908:	ef 92       	push	r14
    290a:	ff 92       	push	r15
    290c:	0f 93       	push	r16
    290e:	d3 df       	rcall	.-90     	; 0x28b6 <prvCheckForValidListAndQueue>
    2910:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <xTimerQueue>
    2914:	90 91 85 08 	lds	r25, 0x0885	; 0x800885 <xTimerQueue+0x1>
    2918:	89 2b       	or	r24, r25
    291a:	89 f0       	breq	.+34     	; 0x293e <xTimerCreateTimerTask+0x36>
    291c:	0f 2e       	mov	r0, r31
    291e:	f2 e8       	ldi	r31, 0x82	; 130
    2920:	ef 2e       	mov	r14, r31
    2922:	f8 e0       	ldi	r31, 0x08	; 8
    2924:	ff 2e       	mov	r15, r31
    2926:	f0 2d       	mov	r31, r0
    2928:	06 e0       	ldi	r16, 0x06	; 6
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	45 e5       	ldi	r20, 0x55	; 85
    2930:	50 e0       	ldi	r21, 0x00	; 0
    2932:	62 e3       	ldi	r22, 0x32	; 50
    2934:	75 e0       	ldi	r23, 0x05	; 5
    2936:	83 e0       	ldi	r24, 0x03	; 3
    2938:	91 e0       	ldi	r25, 0x01	; 1
    293a:	d6 d8       	rcall	.-3668   	; 0x1ae8 <xTaskCreate>
    293c:	01 c0       	rjmp	.+2      	; 0x2940 <xTimerCreateTimerTask+0x38>
    293e:	80 e0       	ldi	r24, 0x00	; 0
    2940:	0f 91       	pop	r16
    2942:	ff 90       	pop	r15
    2944:	ef 90       	pop	r14
    2946:	08 95       	ret

00002948 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    2948:	0f 93       	push	r16
    294a:	1f 93       	push	r17
    294c:	cf 93       	push	r28
    294e:	df 93       	push	r29
    2950:	00 d0       	rcall	.+0      	; 0x2952 <xTimerGenericCommand+0xa>
    2952:	1f 92       	push	r1
    2954:	1f 92       	push	r1
    2956:	cd b7       	in	r28, 0x3d	; 61
    2958:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    295a:	e0 91 84 08 	lds	r30, 0x0884	; 0x800884 <xTimerQueue>
    295e:	f0 91 85 08 	lds	r31, 0x0885	; 0x800885 <xTimerQueue+0x1>
    2962:	30 97       	sbiw	r30, 0x00	; 0
    2964:	69 f1       	breq	.+90     	; 0x29c0 <xTimerGenericCommand+0x78>
    2966:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    2968:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    296a:	5b 83       	std	Y+3, r21	; 0x03
    296c:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    296e:	9d 83       	std	Y+5, r25	; 0x05
    2970:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2972:	66 30       	cpi	r22, 0x06	; 6
    2974:	e4 f4       	brge	.+56     	; 0x29ae <xTimerGenericCommand+0x66>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2976:	a9 dc       	rcall	.-1710   	; 0x22ca <xTaskGetSchedulerState>
    2978:	82 30       	cpi	r24, 0x02	; 2
    297a:	61 f4       	brne	.+24     	; 0x2994 <xTimerGenericCommand+0x4c>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	a8 01       	movw	r20, r16
    2980:	be 01       	movw	r22, r28
    2982:	6f 5f       	subi	r22, 0xFF	; 255
    2984:	7f 4f       	sbci	r23, 0xFF	; 255
    2986:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <xTimerQueue>
    298a:	90 91 85 08 	lds	r25, 0x0885	; 0x800885 <xTimerQueue+0x1>
    298e:	0e 94 8b 08 	call	0x1116	; 0x1116 <xQueueGenericSend>
    2992:	17 c0       	rjmp	.+46     	; 0x29c2 <xTimerGenericCommand+0x7a>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	40 e0       	ldi	r20, 0x00	; 0
    2998:	50 e0       	ldi	r21, 0x00	; 0
    299a:	be 01       	movw	r22, r28
    299c:	6f 5f       	subi	r22, 0xFF	; 255
    299e:	7f 4f       	sbci	r23, 0xFF	; 255
    29a0:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <xTimerQueue>
    29a4:	90 91 85 08 	lds	r25, 0x0885	; 0x800885 <xTimerQueue+0x1>
    29a8:	0e 94 8b 08 	call	0x1116	; 0x1116 <xQueueGenericSend>
    29ac:	0a c0       	rjmp	.+20     	; 0x29c2 <xTimerGenericCommand+0x7a>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    29ae:	20 e0       	ldi	r18, 0x00	; 0
    29b0:	ad 01       	movw	r20, r26
    29b2:	be 01       	movw	r22, r28
    29b4:	6f 5f       	subi	r22, 0xFF	; 255
    29b6:	7f 4f       	sbci	r23, 0xFF	; 255
    29b8:	cf 01       	movw	r24, r30
    29ba:	0e 94 38 09 	call	0x1270	; 0x1270 <xQueueGenericSendFromISR>
    29be:	01 c0       	rjmp	.+2      	; 0x29c2 <xTimerGenericCommand+0x7a>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    29c0:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    29c2:	0f 90       	pop	r0
    29c4:	0f 90       	pop	r0
    29c6:	0f 90       	pop	r0
    29c8:	0f 90       	pop	r0
    29ca:	0f 90       	pop	r0
    29cc:	df 91       	pop	r29
    29ce:	cf 91       	pop	r28
    29d0:	1f 91       	pop	r17
    29d2:	0f 91       	pop	r16
    29d4:	08 95       	ret

000029d6 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    29d6:	af 92       	push	r10
    29d8:	bf 92       	push	r11
    29da:	cf 92       	push	r12
    29dc:	df 92       	push	r13
    29de:	ef 92       	push	r14
    29e0:	ff 92       	push	r15
    29e2:	0f 93       	push	r16
    29e4:	1f 93       	push	r17
    29e6:	cf 93       	push	r28
    29e8:	df 93       	push	r29
    29ea:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    29ec:	d4 d9       	rcall	.-3160   	; 0x1d96 <xTaskGetTickCount>
    29ee:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    29f0:	80 91 80 08 	lds	r24, 0x0880	; 0x800880 <xLastTime.2432>
    29f4:	90 91 81 08 	lds	r25, 0x0881	; 0x800881 <xLastTime.2432+0x1>
    29f8:	e8 16       	cp	r14, r24
    29fa:	f9 06       	cpc	r15, r25
    29fc:	08 f0       	brcs	.+2      	; 0x2a00 <prvSampleTimeNow+0x2a>
    29fe:	47 c0       	rjmp	.+142    	; 0x2a8e <prvSampleTimeNow+0xb8>
    2a00:	2f c0       	rjmp	.+94     	; 0x2a60 <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2a02:	05 80       	ldd	r0, Z+5	; 0x05
    2a04:	f6 81       	ldd	r31, Z+6	; 0x06
    2a06:	e0 2d       	mov	r30, r0
    2a08:	a0 80       	ld	r10, Z
    2a0a:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2a0c:	c6 81       	ldd	r28, Z+6	; 0x06
    2a0e:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2a10:	8e 01       	movw	r16, r28
    2a12:	0e 5f       	subi	r16, 0xFE	; 254
    2a14:	1f 4f       	sbci	r17, 0xFF	; 255
    2a16:	c8 01       	movw	r24, r16
    2a18:	0e 94 ad 05 	call	0xb5a	; 0xb5a <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2a1c:	e8 89       	ldd	r30, Y+16	; 0x10
    2a1e:	f9 89       	ldd	r31, Y+17	; 0x11
    2a20:	ce 01       	movw	r24, r28
    2a22:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2a24:	8b 89       	ldd	r24, Y+19	; 0x13
    2a26:	82 ff       	sbrs	r24, 2
    2a28:	1b c0       	rjmp	.+54     	; 0x2a60 <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2a2a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a2c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a2e:	8a 0d       	add	r24, r10
    2a30:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    2a32:	a8 16       	cp	r10, r24
    2a34:	b9 06       	cpc	r11, r25
    2a36:	60 f4       	brcc	.+24     	; 0x2a50 <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2a38:	9b 83       	std	Y+3, r25	; 0x03
    2a3a:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2a3c:	d9 87       	std	Y+9, r29	; 0x09
    2a3e:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2a40:	b8 01       	movw	r22, r16
    2a42:	80 91 88 08 	lds	r24, 0x0888	; 0x800888 <pxCurrentTimerList>
    2a46:	90 91 89 08 	lds	r25, 0x0889	; 0x800889 <pxCurrentTimerList+0x1>
    2a4a:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <vListInsert>
    2a4e:	08 c0       	rjmp	.+16     	; 0x2a60 <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2a50:	00 e0       	ldi	r16, 0x00	; 0
    2a52:	10 e0       	ldi	r17, 0x00	; 0
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	a5 01       	movw	r20, r10
    2a5a:	60 e0       	ldi	r22, 0x00	; 0
    2a5c:	ce 01       	movw	r24, r28
    2a5e:	74 df       	rcall	.-280    	; 0x2948 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2a60:	e0 91 88 08 	lds	r30, 0x0888	; 0x800888 <pxCurrentTimerList>
    2a64:	f0 91 89 08 	lds	r31, 0x0889	; 0x800889 <pxCurrentTimerList+0x1>
    2a68:	80 81       	ld	r24, Z
    2a6a:	81 11       	cpse	r24, r1
    2a6c:	ca cf       	rjmp	.-108    	; 0x2a02 <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    2a6e:	80 91 86 08 	lds	r24, 0x0886	; 0x800886 <pxOverflowTimerList>
    2a72:	90 91 87 08 	lds	r25, 0x0887	; 0x800887 <pxOverflowTimerList+0x1>
    2a76:	90 93 89 08 	sts	0x0889, r25	; 0x800889 <pxCurrentTimerList+0x1>
    2a7a:	80 93 88 08 	sts	0x0888, r24	; 0x800888 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    2a7e:	f0 93 87 08 	sts	0x0887, r31	; 0x800887 <pxOverflowTimerList+0x1>
    2a82:	e0 93 86 08 	sts	0x0886, r30	; 0x800886 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	f6 01       	movw	r30, r12
    2a8a:	80 83       	st	Z, r24
    2a8c:	02 c0       	rjmp	.+4      	; 0x2a92 <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    2a8e:	f6 01       	movw	r30, r12
    2a90:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    2a92:	f0 92 81 08 	sts	0x0881, r15	; 0x800881 <xLastTime.2432+0x1>
    2a96:	e0 92 80 08 	sts	0x0880, r14	; 0x800880 <xLastTime.2432>

    return xTimeNow;
}
    2a9a:	c7 01       	movw	r24, r14
    2a9c:	df 91       	pop	r29
    2a9e:	cf 91       	pop	r28
    2aa0:	1f 91       	pop	r17
    2aa2:	0f 91       	pop	r16
    2aa4:	ff 90       	pop	r15
    2aa6:	ef 90       	pop	r14
    2aa8:	df 90       	pop	r13
    2aaa:	cf 90       	pop	r12
    2aac:	bf 90       	pop	r11
    2aae:	af 90       	pop	r10
    2ab0:	08 95       	ret

00002ab2 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2ab2:	08 95       	ret

00002ab4 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2ab4:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2ab6:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2ab8:	2f ef       	ldi	r18, 0xFF	; 255
    2aba:	80 e7       	ldi	r24, 0x70	; 112
    2abc:	92 e0       	ldi	r25, 0x02	; 2
    2abe:	21 50       	subi	r18, 0x01	; 1
    2ac0:	80 40       	sbci	r24, 0x00	; 0
    2ac2:	90 40       	sbci	r25, 0x00	; 0
    2ac4:	e1 f7       	brne	.-8      	; 0x2abe <vApplicationMallocFailedHook+0xa>
    2ac6:	00 c0       	rjmp	.+0      	; 0x2ac8 <vApplicationMallocFailedHook+0x14>
    2ac8:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    2aca:	1f 9a       	sbi	0x03, 7	; 3
    2acc:	f5 cf       	rjmp	.-22     	; 0x2ab8 <vApplicationMallocFailedHook+0x4>

00002ace <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2ace:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2ad0:	2f 9a       	sbi	0x05, 7	; 5
    2ad2:	2f ef       	ldi	r18, 0xFF	; 255
    2ad4:	87 ea       	ldi	r24, 0xA7	; 167
    2ad6:	91 e6       	ldi	r25, 0x61	; 97
    2ad8:	21 50       	subi	r18, 0x01	; 1
    2ada:	80 40       	sbci	r24, 0x00	; 0
    2adc:	90 40       	sbci	r25, 0x00	; 0
    2ade:	e1 f7       	brne	.-8      	; 0x2ad8 <vApplicationStackOverflowHook+0xa>
    2ae0:	00 c0       	rjmp	.+0      	; 0x2ae2 <vApplicationStackOverflowHook+0x14>
    2ae2:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    2ae4:	1f 9a       	sbi	0x03, 7	; 3
    2ae6:	f5 cf       	rjmp	.-22     	; 0x2ad2 <vApplicationStackOverflowHook+0x4>

00002ae8 <__fixsfsi>:
    2ae8:	04 d0       	rcall	.+8      	; 0x2af2 <__fixunssfsi>
    2aea:	68 94       	set
    2aec:	b1 11       	cpse	r27, r1
    2aee:	50 c0       	rjmp	.+160    	; 0x2b90 <__fp_szero>
    2af0:	08 95       	ret

00002af2 <__fixunssfsi>:
    2af2:	33 d0       	rcall	.+102    	; 0x2b5a <__fp_splitA>
    2af4:	88 f0       	brcs	.+34     	; 0x2b18 <__fixunssfsi+0x26>
    2af6:	9f 57       	subi	r25, 0x7F	; 127
    2af8:	90 f0       	brcs	.+36     	; 0x2b1e <__fixunssfsi+0x2c>
    2afa:	b9 2f       	mov	r27, r25
    2afc:	99 27       	eor	r25, r25
    2afe:	b7 51       	subi	r27, 0x17	; 23
    2b00:	a0 f0       	brcs	.+40     	; 0x2b2a <__fixunssfsi+0x38>
    2b02:	d1 f0       	breq	.+52     	; 0x2b38 <__fixunssfsi+0x46>
    2b04:	66 0f       	add	r22, r22
    2b06:	77 1f       	adc	r23, r23
    2b08:	88 1f       	adc	r24, r24
    2b0a:	99 1f       	adc	r25, r25
    2b0c:	1a f0       	brmi	.+6      	; 0x2b14 <__fixunssfsi+0x22>
    2b0e:	ba 95       	dec	r27
    2b10:	c9 f7       	brne	.-14     	; 0x2b04 <__fixunssfsi+0x12>
    2b12:	12 c0       	rjmp	.+36     	; 0x2b38 <__fixunssfsi+0x46>
    2b14:	b1 30       	cpi	r27, 0x01	; 1
    2b16:	81 f0       	breq	.+32     	; 0x2b38 <__fixunssfsi+0x46>
    2b18:	3a d0       	rcall	.+116    	; 0x2b8e <__fp_zero>
    2b1a:	b1 e0       	ldi	r27, 0x01	; 1
    2b1c:	08 95       	ret
    2b1e:	37 c0       	rjmp	.+110    	; 0x2b8e <__fp_zero>
    2b20:	67 2f       	mov	r22, r23
    2b22:	78 2f       	mov	r23, r24
    2b24:	88 27       	eor	r24, r24
    2b26:	b8 5f       	subi	r27, 0xF8	; 248
    2b28:	39 f0       	breq	.+14     	; 0x2b38 <__fixunssfsi+0x46>
    2b2a:	b9 3f       	cpi	r27, 0xF9	; 249
    2b2c:	cc f3       	brlt	.-14     	; 0x2b20 <__fixunssfsi+0x2e>
    2b2e:	86 95       	lsr	r24
    2b30:	77 95       	ror	r23
    2b32:	67 95       	ror	r22
    2b34:	b3 95       	inc	r27
    2b36:	d9 f7       	brne	.-10     	; 0x2b2e <__fixunssfsi+0x3c>
    2b38:	3e f4       	brtc	.+14     	; 0x2b48 <__fixunssfsi+0x56>
    2b3a:	90 95       	com	r25
    2b3c:	80 95       	com	r24
    2b3e:	70 95       	com	r23
    2b40:	61 95       	neg	r22
    2b42:	7f 4f       	sbci	r23, 0xFF	; 255
    2b44:	8f 4f       	sbci	r24, 0xFF	; 255
    2b46:	9f 4f       	sbci	r25, 0xFF	; 255
    2b48:	08 95       	ret

00002b4a <__fp_split3>:
    2b4a:	57 fd       	sbrc	r21, 7
    2b4c:	90 58       	subi	r25, 0x80	; 128
    2b4e:	44 0f       	add	r20, r20
    2b50:	55 1f       	adc	r21, r21
    2b52:	59 f0       	breq	.+22     	; 0x2b6a <__fp_splitA+0x10>
    2b54:	5f 3f       	cpi	r21, 0xFF	; 255
    2b56:	71 f0       	breq	.+28     	; 0x2b74 <__fp_splitA+0x1a>
    2b58:	47 95       	ror	r20

00002b5a <__fp_splitA>:
    2b5a:	88 0f       	add	r24, r24
    2b5c:	97 fb       	bst	r25, 7
    2b5e:	99 1f       	adc	r25, r25
    2b60:	61 f0       	breq	.+24     	; 0x2b7a <__fp_splitA+0x20>
    2b62:	9f 3f       	cpi	r25, 0xFF	; 255
    2b64:	79 f0       	breq	.+30     	; 0x2b84 <__fp_splitA+0x2a>
    2b66:	87 95       	ror	r24
    2b68:	08 95       	ret
    2b6a:	12 16       	cp	r1, r18
    2b6c:	13 06       	cpc	r1, r19
    2b6e:	14 06       	cpc	r1, r20
    2b70:	55 1f       	adc	r21, r21
    2b72:	f2 cf       	rjmp	.-28     	; 0x2b58 <__fp_split3+0xe>
    2b74:	46 95       	lsr	r20
    2b76:	f1 df       	rcall	.-30     	; 0x2b5a <__fp_splitA>
    2b78:	08 c0       	rjmp	.+16     	; 0x2b8a <__fp_splitA+0x30>
    2b7a:	16 16       	cp	r1, r22
    2b7c:	17 06       	cpc	r1, r23
    2b7e:	18 06       	cpc	r1, r24
    2b80:	99 1f       	adc	r25, r25
    2b82:	f1 cf       	rjmp	.-30     	; 0x2b66 <__fp_splitA+0xc>
    2b84:	86 95       	lsr	r24
    2b86:	71 05       	cpc	r23, r1
    2b88:	61 05       	cpc	r22, r1
    2b8a:	08 94       	sec
    2b8c:	08 95       	ret

00002b8e <__fp_zero>:
    2b8e:	e8 94       	clt

00002b90 <__fp_szero>:
    2b90:	bb 27       	eor	r27, r27
    2b92:	66 27       	eor	r22, r22
    2b94:	77 27       	eor	r23, r23
    2b96:	cb 01       	movw	r24, r22
    2b98:	97 f9       	bld	r25, 7
    2b9a:	08 95       	ret

00002b9c <usart_getchar>:
    2b9c:	cf 93       	push	r28
    2b9e:	df 93       	push	r29
    2ba0:	1f 92       	push	r1
    2ba2:	cd b7       	in	r28, 0x3d	; 61
    2ba4:	de b7       	in	r29, 0x3e	; 62
    2ba6:	be 01       	movw	r22, r28
    2ba8:	6f 5f       	subi	r22, 0xFF	; 255
    2baa:	7f 4f       	sbci	r23, 0xFF	; 255
    2bac:	80 91 9c 08 	lds	r24, 0x089C	; 0x80089c <_com_serial_instance>
    2bb0:	90 91 9d 08 	lds	r25, 0x089D	; 0x80089d <_com_serial_instance+0x1>
    2bb4:	4e d1       	rcall	.+668    	; 0x2e52 <serial_get_byte>
    2bb6:	81 11       	cpse	r24, r1
    2bb8:	f6 cf       	rjmp	.-20     	; 0x2ba6 <usart_getchar+0xa>
    2bba:	89 81       	ldd	r24, Y+1	; 0x01
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	0f 90       	pop	r0
    2bc0:	df 91       	pop	r29
    2bc2:	cf 91       	pop	r28
    2bc4:	08 95       	ret

00002bc6 <usart_putchar>:
    2bc6:	68 2f       	mov	r22, r24
    2bc8:	80 91 9c 08 	lds	r24, 0x089C	; 0x80089c <_com_serial_instance>
    2bcc:	90 91 9d 08 	lds	r25, 0x089D	; 0x80089d <_com_serial_instance+0x1>
    2bd0:	cb d0       	rcall	.+406    	; 0x2d68 <serial_send_byte>
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	08 95       	ret

00002bd8 <stdioCreate>:
    2bd8:	8f 92       	push	r8
    2bda:	9f 92       	push	r9
    2bdc:	af 92       	push	r10
    2bde:	cf 92       	push	r12
    2be0:	ef 92       	push	r14
    2be2:	0f 93       	push	r16
    2be4:	81 2c       	mov	r8, r1
    2be6:	91 2c       	mov	r9, r1
    2be8:	68 94       	set
    2bea:	aa 24       	eor	r10, r10
    2bec:	a7 f8       	bld	r10, 7
    2bee:	68 94       	set
    2bf0:	cc 24       	eor	r12, r12
    2bf2:	c7 f8       	bld	r12, 7
    2bf4:	e1 2c       	mov	r14, r1
    2bf6:	00 e0       	ldi	r16, 0x00	; 0
    2bf8:	23 e0       	ldi	r18, 0x03	; 3
    2bfa:	40 e0       	ldi	r20, 0x00	; 0
    2bfc:	51 ee       	ldi	r21, 0xE1	; 225
    2bfe:	60 e0       	ldi	r22, 0x00	; 0
    2c00:	70 e0       	ldi	r23, 0x00	; 0
    2c02:	13 d0       	rcall	.+38     	; 0x2c2a <serial_new_instance>
    2c04:	90 93 9d 08 	sts	0x089D, r25	; 0x80089d <_com_serial_instance+0x1>
    2c08:	80 93 9c 08 	sts	0x089C, r24	; 0x80089c <_com_serial_instance>
    2c0c:	ee e8       	ldi	r30, 0x8E	; 142
    2c0e:	fa e0       	ldi	r31, 0x0A	; 10
    2c10:	86 e0       	ldi	r24, 0x06	; 6
    2c12:	92 e0       	ldi	r25, 0x02	; 2
    2c14:	91 83       	std	Z+1, r25	; 0x01
    2c16:	80 83       	st	Z, r24
    2c18:	93 83       	std	Z+3, r25	; 0x03
    2c1a:	82 83       	std	Z+2, r24	; 0x02
    2c1c:	0f 91       	pop	r16
    2c1e:	ef 90       	pop	r14
    2c20:	cf 90       	pop	r12
    2c22:	af 90       	pop	r10
    2c24:	9f 90       	pop	r9
    2c26:	8f 90       	pop	r8
    2c28:	08 95       	ret

00002c2a <serial_new_instance>:
    2c2a:	2f 92       	push	r2
    2c2c:	3f 92       	push	r3
    2c2e:	4f 92       	push	r4
    2c30:	5f 92       	push	r5
    2c32:	6f 92       	push	r6
    2c34:	7f 92       	push	r7
    2c36:	8f 92       	push	r8
    2c38:	9f 92       	push	r9
    2c3a:	af 92       	push	r10
    2c3c:	cf 92       	push	r12
    2c3e:	ef 92       	push	r14
    2c40:	ff 92       	push	r15
    2c42:	0f 93       	push	r16
    2c44:	1f 93       	push	r17
    2c46:	cf 93       	push	r28
    2c48:	df 93       	push	r29
    2c4a:	cd b7       	in	r28, 0x3d	; 61
    2c4c:	de b7       	in	r29, 0x3e	; 62
    2c4e:	f8 2e       	mov	r15, r24
    2c50:	2a 01       	movw	r4, r20
    2c52:	3b 01       	movw	r6, r22
    2c54:	88 e0       	ldi	r24, 0x08	; 8
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	0e 94 ea 25 	call	0x4bd4	; 0x4bd4 <malloc>
    2c5c:	8c 01       	movw	r16, r24
    2c5e:	8f 2d       	mov	r24, r15
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	88 0f       	add	r24, r24
    2c64:	99 1f       	adc	r25, r25
    2c66:	fc 01       	movw	r30, r24
    2c68:	e2 56       	subi	r30, 0x62	; 98
    2c6a:	f7 4f       	sbci	r31, 0xF7	; 247
    2c6c:	11 83       	std	Z+1, r17	; 0x01
    2c6e:	00 83       	st	Z, r16
    2c70:	fc 01       	movw	r30, r24
    2c72:	ec 5e       	subi	r30, 0xEC	; 236
    2c74:	fd 4f       	sbci	r31, 0xFD	; 253
    2c76:	80 81       	ld	r24, Z
    2c78:	91 81       	ldd	r25, Z+1	; 0x01
    2c7a:	d8 01       	movw	r26, r16
    2c7c:	8d 93       	st	X+, r24
    2c7e:	9c 93       	st	X, r25
    2c80:	6c 2d       	mov	r22, r12
    2c82:	70 e0       	ldi	r23, 0x00	; 0
    2c84:	84 e0       	ldi	r24, 0x04	; 4
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <calloc>
    2c8c:	1c 01       	movw	r2, r24
    2c8e:	61 e0       	ldi	r22, 0x01	; 1
    2c90:	70 e0       	ldi	r23, 0x00	; 0
    2c92:	86 e0       	ldi	r24, 0x06	; 6
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <calloc>
    2c9a:	7c 01       	movw	r14, r24
    2c9c:	4c 2d       	mov	r20, r12
    2c9e:	b1 01       	movw	r22, r2
    2ca0:	4c d3       	rcall	.+1688   	; 0x333a <fifo_init>
    2ca2:	f8 01       	movw	r30, r16
    2ca4:	f5 82       	std	Z+5, r15	; 0x05
    2ca6:	e4 82       	std	Z+4, r14	; 0x04
    2ca8:	6a 2d       	mov	r22, r10
    2caa:	70 e0       	ldi	r23, 0x00	; 0
    2cac:	84 e0       	ldi	r24, 0x04	; 4
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <calloc>
    2cb4:	1c 01       	movw	r2, r24
    2cb6:	61 e0       	ldi	r22, 0x01	; 1
    2cb8:	70 e0       	ldi	r23, 0x00	; 0
    2cba:	86 e0       	ldi	r24, 0x06	; 6
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <calloc>
    2cc2:	7c 01       	movw	r14, r24
    2cc4:	4a 2d       	mov	r20, r10
    2cc6:	b1 01       	movw	r22, r2
    2cc8:	38 d3       	rcall	.+1648   	; 0x333a <fifo_init>
    2cca:	d8 01       	movw	r26, r16
    2ccc:	13 96       	adiw	r26, 0x03	; 3
    2cce:	fc 92       	st	X, r15
    2cd0:	ee 92       	st	-X, r14
    2cd2:	12 97       	sbiw	r26, 0x02	; 2
    2cd4:	17 96       	adiw	r26, 0x07	; 7
    2cd6:	9c 92       	st	X, r9
    2cd8:	8e 92       	st	-X, r8
    2cda:	16 97       	sbiw	r26, 0x06	; 6
    2cdc:	ff b6       	in	r15, 0x3f	; 63
    2cde:	f8 94       	cli
    2ce0:	ed 91       	ld	r30, X+
    2ce2:	fc 91       	ld	r31, X
    2ce4:	11 97       	sbiw	r26, 0x01	; 1
    2ce6:	36 97       	sbiw	r30, 0x06	; 6
    2ce8:	80 81       	ld	r24, Z
    2cea:	82 60       	ori	r24, 0x02	; 2
    2cec:	80 83       	st	Z, r24
    2cee:	8d 90       	ld	r8, X+
    2cf0:	9c 90       	ld	r9, X
    2cf2:	c3 01       	movw	r24, r6
    2cf4:	b2 01       	movw	r22, r4
    2cf6:	0e 94 b3 24 	call	0x4966	; 0x4966 <__floatunsisf>
    2cfa:	20 e0       	ldi	r18, 0x00	; 0
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	40 e0       	ldi	r20, 0x00	; 0
    2d00:	51 e4       	ldi	r21, 0x41	; 65
    2d02:	0e 94 1c 25 	call	0x4a38	; 0x4a38 <__mulsf3>
    2d06:	9b 01       	movw	r18, r22
    2d08:	ac 01       	movw	r20, r24
    2d0a:	60 e0       	ldi	r22, 0x00	; 0
    2d0c:	74 e2       	ldi	r23, 0x24	; 36
    2d0e:	84 e7       	ldi	r24, 0x74	; 116
    2d10:	9b e4       	ldi	r25, 0x4B	; 75
    2d12:	0e 94 48 24 	call	0x4890	; 0x4890 <__divsf3>
    2d16:	20 e0       	ldi	r18, 0x00	; 0
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	40 e8       	ldi	r20, 0x80	; 128
    2d1c:	5f e3       	ldi	r21, 0x3F	; 63
    2d1e:	0e 94 e1 23 	call	0x47c2	; 0x47c2 <__subsf3>
    2d22:	e7 de       	rcall	.-562    	; 0x2af2 <__fixunssfsi>
    2d24:	f4 01       	movw	r30, r8
    2d26:	32 97       	sbiw	r30, 0x02	; 2
    2d28:	60 83       	st	Z, r22
    2d2a:	d8 01       	movw	r26, r16
    2d2c:	ed 91       	ld	r30, X+
    2d2e:	fc 91       	ld	r31, X
    2d30:	11 97       	sbiw	r26, 0x01	; 1
    2d32:	35 97       	sbiw	r30, 0x05	; 5
    2d34:	88 e9       	ldi	r24, 0x98	; 152
    2d36:	80 83       	st	Z, r24
    2d38:	ed 91       	ld	r30, X+
    2d3a:	fc 91       	ld	r31, X
    2d3c:	34 97       	sbiw	r30, 0x04	; 4
    2d3e:	86 e0       	ldi	r24, 0x06	; 6
    2d40:	80 83       	st	Z, r24
    2d42:	ff be       	out	0x3f, r15	; 63
    2d44:	c8 01       	movw	r24, r16
    2d46:	df 91       	pop	r29
    2d48:	cf 91       	pop	r28
    2d4a:	1f 91       	pop	r17
    2d4c:	0f 91       	pop	r16
    2d4e:	ff 90       	pop	r15
    2d50:	ef 90       	pop	r14
    2d52:	cf 90       	pop	r12
    2d54:	af 90       	pop	r10
    2d56:	9f 90       	pop	r9
    2d58:	8f 90       	pop	r8
    2d5a:	7f 90       	pop	r7
    2d5c:	6f 90       	pop	r6
    2d5e:	5f 90       	pop	r5
    2d60:	4f 90       	pop	r4
    2d62:	3f 90       	pop	r3
    2d64:	2f 90       	pop	r2
    2d66:	08 95       	ret

00002d68 <serial_send_byte>:
    2d68:	cf 93       	push	r28
    2d6a:	df 93       	push	r29
    2d6c:	ec 01       	movw	r28, r24
    2d6e:	ea 81       	ldd	r30, Y+2	; 0x02
    2d70:	fb 81       	ldd	r31, Y+3	; 0x03
    2d72:	93 81       	ldd	r25, Z+3	; 0x03
    2d74:	82 81       	ldd	r24, Z+2	; 0x02
    2d76:	25 81       	ldd	r18, Z+5	; 0x05
    2d78:	98 1b       	sub	r25, r24
    2d7a:	92 23       	and	r25, r18
    2d7c:	84 81       	ldd	r24, Z+4	; 0x04
    2d7e:	98 17       	cp	r25, r24
    2d80:	a1 f0       	breq	.+40     	; 0x2daa <serial_send_byte+0x42>
    2d82:	93 81       	ldd	r25, Z+3	; 0x03
    2d84:	26 95       	lsr	r18
    2d86:	29 23       	and	r18, r25
    2d88:	a0 81       	ld	r26, Z
    2d8a:	b1 81       	ldd	r27, Z+1	; 0x01
    2d8c:	a2 0f       	add	r26, r18
    2d8e:	b1 1d       	adc	r27, r1
    2d90:	6c 93       	st	X, r22
    2d92:	9f 5f       	subi	r25, 0xFF	; 255
    2d94:	25 81       	ldd	r18, Z+5	; 0x05
    2d96:	92 23       	and	r25, r18
    2d98:	93 83       	std	Z+3, r25	; 0x03
    2d9a:	e8 81       	ld	r30, Y
    2d9c:	f9 81       	ldd	r31, Y+1	; 0x01
    2d9e:	35 97       	sbiw	r30, 0x05	; 5
    2da0:	80 81       	ld	r24, Z
    2da2:	80 62       	ori	r24, 0x20	; 32
    2da4:	80 83       	st	Z, r24
    2da6:	80 e0       	ldi	r24, 0x00	; 0
    2da8:	01 c0       	rjmp	.+2      	; 0x2dac <serial_send_byte+0x44>
    2daa:	82 e0       	ldi	r24, 0x02	; 2
    2dac:	df 91       	pop	r29
    2dae:	cf 91       	pop	r28
    2db0:	08 95       	ret

00002db2 <serial_send_bytes>:
    2db2:	ef 92       	push	r14
    2db4:	ff 92       	push	r15
    2db6:	0f 93       	push	r16
    2db8:	1f 93       	push	r17
    2dba:	cf 93       	push	r28
    2dbc:	df 93       	push	r29
    2dbe:	7c 01       	movw	r14, r24
    2dc0:	dc 01       	movw	r26, r24
    2dc2:	12 96       	adiw	r26, 0x02	; 2
    2dc4:	ed 91       	ld	r30, X+
    2dc6:	fc 91       	ld	r31, X
    2dc8:	13 97       	sbiw	r26, 0x03	; 3
    2dca:	93 81       	ldd	r25, Z+3	; 0x03
    2dcc:	82 81       	ldd	r24, Z+2	; 0x02
    2dce:	98 1b       	sub	r25, r24
    2dd0:	85 81       	ldd	r24, Z+5	; 0x05
    2dd2:	98 23       	and	r25, r24
    2dd4:	84 81       	ldd	r24, Z+4	; 0x04
    2dd6:	89 1b       	sub	r24, r25
    2dd8:	86 17       	cp	r24, r22
    2dda:	98 f1       	brcs	.+102    	; 0x2e42 <serial_send_bytes+0x90>
    2ddc:	66 23       	and	r22, r22
    2dde:	41 f1       	breq	.+80     	; 0x2e30 <serial_send_bytes+0x7e>
    2de0:	84 2f       	mov	r24, r20
    2de2:	95 2f       	mov	r25, r21
    2de4:	dc 01       	movw	r26, r24
    2de6:	61 50       	subi	r22, 0x01	; 1
    2de8:	46 2f       	mov	r20, r22
    2dea:	50 e0       	ldi	r21, 0x00	; 0
    2dec:	4f 5f       	subi	r20, 0xFF	; 255
    2dee:	5f 4f       	sbci	r21, 0xFF	; 255
    2df0:	48 0f       	add	r20, r24
    2df2:	59 1f       	adc	r21, r25
    2df4:	e7 01       	movw	r28, r14
    2df6:	ea 81       	ldd	r30, Y+2	; 0x02
    2df8:	fb 81       	ldd	r31, Y+3	; 0x03
    2dfa:	93 81       	ldd	r25, Z+3	; 0x03
    2dfc:	82 81       	ldd	r24, Z+2	; 0x02
    2dfe:	25 81       	ldd	r18, Z+5	; 0x05
    2e00:	98 1b       	sub	r25, r24
    2e02:	92 23       	and	r25, r18
    2e04:	84 81       	ldd	r24, Z+4	; 0x04
    2e06:	98 17       	cp	r25, r24
    2e08:	79 f0       	breq	.+30     	; 0x2e28 <serial_send_bytes+0x76>
    2e0a:	8c 91       	ld	r24, X
    2e0c:	93 81       	ldd	r25, Z+3	; 0x03
    2e0e:	26 95       	lsr	r18
    2e10:	29 23       	and	r18, r25
    2e12:	60 81       	ld	r22, Z
    2e14:	71 81       	ldd	r23, Z+1	; 0x01
    2e16:	8b 01       	movw	r16, r22
    2e18:	02 0f       	add	r16, r18
    2e1a:	11 1d       	adc	r17, r1
    2e1c:	e8 01       	movw	r28, r16
    2e1e:	88 83       	st	Y, r24
    2e20:	9f 5f       	subi	r25, 0xFF	; 255
    2e22:	85 81       	ldd	r24, Z+5	; 0x05
    2e24:	98 23       	and	r25, r24
    2e26:	93 83       	std	Z+3, r25	; 0x03
    2e28:	11 96       	adiw	r26, 0x01	; 1
    2e2a:	a4 17       	cp	r26, r20
    2e2c:	b5 07       	cpc	r27, r21
    2e2e:	11 f7       	brne	.-60     	; 0x2df4 <serial_send_bytes+0x42>
    2e30:	d7 01       	movw	r26, r14
    2e32:	ed 91       	ld	r30, X+
    2e34:	fc 91       	ld	r31, X
    2e36:	35 97       	sbiw	r30, 0x05	; 5
    2e38:	80 81       	ld	r24, Z
    2e3a:	80 62       	ori	r24, 0x20	; 32
    2e3c:	80 83       	st	Z, r24
    2e3e:	80 e0       	ldi	r24, 0x00	; 0
    2e40:	01 c0       	rjmp	.+2      	; 0x2e44 <serial_send_bytes+0x92>
    2e42:	82 e0       	ldi	r24, 0x02	; 2
    2e44:	df 91       	pop	r29
    2e46:	cf 91       	pop	r28
    2e48:	1f 91       	pop	r17
    2e4a:	0f 91       	pop	r16
    2e4c:	ff 90       	pop	r15
    2e4e:	ef 90       	pop	r14
    2e50:	08 95       	ret

00002e52 <serial_get_byte>:
    2e52:	dc 01       	movw	r26, r24
    2e54:	14 96       	adiw	r26, 0x04	; 4
    2e56:	ed 91       	ld	r30, X+
    2e58:	fc 91       	ld	r31, X
    2e5a:	15 97       	sbiw	r26, 0x05	; 5
    2e5c:	93 81       	ldd	r25, Z+3	; 0x03
    2e5e:	82 81       	ldd	r24, Z+2	; 0x02
    2e60:	98 17       	cp	r25, r24
    2e62:	89 f0       	breq	.+34     	; 0x2e86 <serial_get_byte+0x34>
    2e64:	92 81       	ldd	r25, Z+2	; 0x02
    2e66:	85 81       	ldd	r24, Z+5	; 0x05
    2e68:	86 95       	lsr	r24
    2e6a:	89 23       	and	r24, r25
    2e6c:	a0 81       	ld	r26, Z
    2e6e:	b1 81       	ldd	r27, Z+1	; 0x01
    2e70:	a8 0f       	add	r26, r24
    2e72:	b1 1d       	adc	r27, r1
    2e74:	8c 91       	ld	r24, X
    2e76:	db 01       	movw	r26, r22
    2e78:	8c 93       	st	X, r24
    2e7a:	9f 5f       	subi	r25, 0xFF	; 255
    2e7c:	85 81       	ldd	r24, Z+5	; 0x05
    2e7e:	98 23       	and	r25, r24
    2e80:	92 83       	std	Z+2, r25	; 0x02
    2e82:	80 e0       	ldi	r24, 0x00	; 0
    2e84:	08 95       	ret
    2e86:	83 e0       	ldi	r24, 0x03	; 3
    2e88:	08 95       	ret

00002e8a <__vector_25>:
    2e8a:	1f 92       	push	r1
    2e8c:	0f 92       	push	r0
    2e8e:	0f b6       	in	r0, 0x3f	; 63
    2e90:	0f 92       	push	r0
    2e92:	11 24       	eor	r1, r1
    2e94:	0b b6       	in	r0, 0x3b	; 59
    2e96:	0f 92       	push	r0
    2e98:	2f 93       	push	r18
    2e9a:	3f 93       	push	r19
    2e9c:	4f 93       	push	r20
    2e9e:	5f 93       	push	r21
    2ea0:	6f 93       	push	r22
    2ea2:	7f 93       	push	r23
    2ea4:	8f 93       	push	r24
    2ea6:	9f 93       	push	r25
    2ea8:	af 93       	push	r26
    2eaa:	bf 93       	push	r27
    2eac:	cf 93       	push	r28
    2eae:	df 93       	push	r29
    2eb0:	ef 93       	push	r30
    2eb2:	ff 93       	push	r31
    2eb4:	a0 91 9e 08 	lds	r26, 0x089E	; 0x80089e <_ser_handle>
    2eb8:	b0 91 9f 08 	lds	r27, 0x089F	; 0x80089f <_ser_handle+0x1>
    2ebc:	10 97       	sbiw	r26, 0x00	; 0
    2ebe:	11 f1       	breq	.+68     	; 0x2f04 <__vector_25+0x7a>
    2ec0:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    2ec4:	14 96       	adiw	r26, 0x04	; 4
    2ec6:	ed 91       	ld	r30, X+
    2ec8:	fc 91       	ld	r31, X
    2eca:	15 97       	sbiw	r26, 0x05	; 5
    2ecc:	93 81       	ldd	r25, Z+3	; 0x03
    2ece:	82 81       	ldd	r24, Z+2	; 0x02
    2ed0:	25 81       	ldd	r18, Z+5	; 0x05
    2ed2:	98 1b       	sub	r25, r24
    2ed4:	92 23       	and	r25, r18
    2ed6:	84 81       	ldd	r24, Z+4	; 0x04
    2ed8:	98 17       	cp	r25, r24
    2eda:	61 f0       	breq	.+24     	; 0x2ef4 <__vector_25+0x6a>
    2edc:	83 81       	ldd	r24, Z+3	; 0x03
    2ede:	26 95       	lsr	r18
    2ee0:	28 23       	and	r18, r24
    2ee2:	c0 81       	ld	r28, Z
    2ee4:	d1 81       	ldd	r29, Z+1	; 0x01
    2ee6:	c2 0f       	add	r28, r18
    2ee8:	d1 1d       	adc	r29, r1
    2eea:	68 83       	st	Y, r22
    2eec:	8f 5f       	subi	r24, 0xFF	; 255
    2eee:	95 81       	ldd	r25, Z+5	; 0x05
    2ef0:	89 23       	and	r24, r25
    2ef2:	83 83       	std	Z+3, r24	; 0x03
    2ef4:	16 96       	adiw	r26, 0x06	; 6
    2ef6:	ed 91       	ld	r30, X+
    2ef8:	fc 91       	ld	r31, X
    2efa:	17 97       	sbiw	r26, 0x07	; 7
    2efc:	30 97       	sbiw	r30, 0x00	; 0
    2efe:	11 f0       	breq	.+4      	; 0x2f04 <__vector_25+0x7a>
    2f00:	cd 01       	movw	r24, r26
    2f02:	19 95       	eicall
    2f04:	ff 91       	pop	r31
    2f06:	ef 91       	pop	r30
    2f08:	df 91       	pop	r29
    2f0a:	cf 91       	pop	r28
    2f0c:	bf 91       	pop	r27
    2f0e:	af 91       	pop	r26
    2f10:	9f 91       	pop	r25
    2f12:	8f 91       	pop	r24
    2f14:	7f 91       	pop	r23
    2f16:	6f 91       	pop	r22
    2f18:	5f 91       	pop	r21
    2f1a:	4f 91       	pop	r20
    2f1c:	3f 91       	pop	r19
    2f1e:	2f 91       	pop	r18
    2f20:	0f 90       	pop	r0
    2f22:	0b be       	out	0x3b, r0	; 59
    2f24:	0f 90       	pop	r0
    2f26:	0f be       	out	0x3f, r0	; 63
    2f28:	0f 90       	pop	r0
    2f2a:	1f 90       	pop	r1
    2f2c:	18 95       	reti

00002f2e <__vector_26>:
    2f2e:	1f 92       	push	r1
    2f30:	0f 92       	push	r0
    2f32:	0f b6       	in	r0, 0x3f	; 63
    2f34:	0f 92       	push	r0
    2f36:	11 24       	eor	r1, r1
    2f38:	0b b6       	in	r0, 0x3b	; 59
    2f3a:	0f 92       	push	r0
    2f3c:	2f 93       	push	r18
    2f3e:	8f 93       	push	r24
    2f40:	9f 93       	push	r25
    2f42:	af 93       	push	r26
    2f44:	bf 93       	push	r27
    2f46:	ef 93       	push	r30
    2f48:	ff 93       	push	r31
    2f4a:	e0 91 9e 08 	lds	r30, 0x089E	; 0x80089e <_ser_handle>
    2f4e:	f0 91 9f 08 	lds	r31, 0x089F	; 0x80089f <_ser_handle+0x1>
    2f52:	30 97       	sbiw	r30, 0x00	; 0
    2f54:	b9 f0       	breq	.+46     	; 0x2f84 <__vector_26+0x56>
    2f56:	02 80       	ldd	r0, Z+2	; 0x02
    2f58:	f3 81       	ldd	r31, Z+3	; 0x03
    2f5a:	e0 2d       	mov	r30, r0
    2f5c:	93 81       	ldd	r25, Z+3	; 0x03
    2f5e:	82 81       	ldd	r24, Z+2	; 0x02
    2f60:	98 17       	cp	r25, r24
    2f62:	b1 f0       	breq	.+44     	; 0x2f90 <__vector_26+0x62>
    2f64:	92 81       	ldd	r25, Z+2	; 0x02
    2f66:	85 81       	ldd	r24, Z+5	; 0x05
    2f68:	28 2f       	mov	r18, r24
    2f6a:	26 95       	lsr	r18
    2f6c:	29 23       	and	r18, r25
    2f6e:	a0 81       	ld	r26, Z
    2f70:	b1 81       	ldd	r27, Z+1	; 0x01
    2f72:	a2 0f       	add	r26, r18
    2f74:	b1 1d       	adc	r27, r1
    2f76:	2c 91       	ld	r18, X
    2f78:	9f 5f       	subi	r25, 0xFF	; 255
    2f7a:	89 23       	and	r24, r25
    2f7c:	82 83       	std	Z+2, r24	; 0x02
    2f7e:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    2f82:	0b c0       	rjmp	.+22     	; 0x2f9a <__vector_26+0x6c>
    2f84:	e1 ec       	ldi	r30, 0xC1	; 193
    2f86:	f0 e0       	ldi	r31, 0x00	; 0
    2f88:	80 81       	ld	r24, Z
    2f8a:	8f 7d       	andi	r24, 0xDF	; 223
    2f8c:	80 83       	st	Z, r24
    2f8e:	05 c0       	rjmp	.+10     	; 0x2f9a <__vector_26+0x6c>
    2f90:	e1 ec       	ldi	r30, 0xC1	; 193
    2f92:	f0 e0       	ldi	r31, 0x00	; 0
    2f94:	80 81       	ld	r24, Z
    2f96:	8f 7d       	andi	r24, 0xDF	; 223
    2f98:	80 83       	st	Z, r24
    2f9a:	ff 91       	pop	r31
    2f9c:	ef 91       	pop	r30
    2f9e:	bf 91       	pop	r27
    2fa0:	af 91       	pop	r26
    2fa2:	9f 91       	pop	r25
    2fa4:	8f 91       	pop	r24
    2fa6:	2f 91       	pop	r18
    2fa8:	0f 90       	pop	r0
    2faa:	0b be       	out	0x3b, r0	; 59
    2fac:	0f 90       	pop	r0
    2fae:	0f be       	out	0x3f, r0	; 63
    2fb0:	0f 90       	pop	r0
    2fb2:	1f 90       	pop	r1
    2fb4:	18 95       	reti

00002fb6 <__vector_36>:
    2fb6:	1f 92       	push	r1
    2fb8:	0f 92       	push	r0
    2fba:	0f b6       	in	r0, 0x3f	; 63
    2fbc:	0f 92       	push	r0
    2fbe:	11 24       	eor	r1, r1
    2fc0:	0b b6       	in	r0, 0x3b	; 59
    2fc2:	0f 92       	push	r0
    2fc4:	2f 93       	push	r18
    2fc6:	3f 93       	push	r19
    2fc8:	4f 93       	push	r20
    2fca:	5f 93       	push	r21
    2fcc:	6f 93       	push	r22
    2fce:	7f 93       	push	r23
    2fd0:	8f 93       	push	r24
    2fd2:	9f 93       	push	r25
    2fd4:	af 93       	push	r26
    2fd6:	bf 93       	push	r27
    2fd8:	cf 93       	push	r28
    2fda:	df 93       	push	r29
    2fdc:	ef 93       	push	r30
    2fde:	ff 93       	push	r31
    2fe0:	a0 91 a0 08 	lds	r26, 0x08A0	; 0x8008a0 <_ser_handle+0x2>
    2fe4:	b0 91 a1 08 	lds	r27, 0x08A1	; 0x8008a1 <_ser_handle+0x3>
    2fe8:	10 97       	sbiw	r26, 0x00	; 0
    2fea:	11 f1       	breq	.+68     	; 0x3030 <__vector_36+0x7a>
    2fec:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    2ff0:	14 96       	adiw	r26, 0x04	; 4
    2ff2:	ed 91       	ld	r30, X+
    2ff4:	fc 91       	ld	r31, X
    2ff6:	15 97       	sbiw	r26, 0x05	; 5
    2ff8:	93 81       	ldd	r25, Z+3	; 0x03
    2ffa:	82 81       	ldd	r24, Z+2	; 0x02
    2ffc:	25 81       	ldd	r18, Z+5	; 0x05
    2ffe:	98 1b       	sub	r25, r24
    3000:	92 23       	and	r25, r18
    3002:	84 81       	ldd	r24, Z+4	; 0x04
    3004:	98 17       	cp	r25, r24
    3006:	61 f0       	breq	.+24     	; 0x3020 <__vector_36+0x6a>
    3008:	83 81       	ldd	r24, Z+3	; 0x03
    300a:	26 95       	lsr	r18
    300c:	28 23       	and	r18, r24
    300e:	c0 81       	ld	r28, Z
    3010:	d1 81       	ldd	r29, Z+1	; 0x01
    3012:	c2 0f       	add	r28, r18
    3014:	d1 1d       	adc	r29, r1
    3016:	68 83       	st	Y, r22
    3018:	8f 5f       	subi	r24, 0xFF	; 255
    301a:	95 81       	ldd	r25, Z+5	; 0x05
    301c:	89 23       	and	r24, r25
    301e:	83 83       	std	Z+3, r24	; 0x03
    3020:	16 96       	adiw	r26, 0x06	; 6
    3022:	ed 91       	ld	r30, X+
    3024:	fc 91       	ld	r31, X
    3026:	17 97       	sbiw	r26, 0x07	; 7
    3028:	30 97       	sbiw	r30, 0x00	; 0
    302a:	11 f0       	breq	.+4      	; 0x3030 <__vector_36+0x7a>
    302c:	cd 01       	movw	r24, r26
    302e:	19 95       	eicall
    3030:	ff 91       	pop	r31
    3032:	ef 91       	pop	r30
    3034:	df 91       	pop	r29
    3036:	cf 91       	pop	r28
    3038:	bf 91       	pop	r27
    303a:	af 91       	pop	r26
    303c:	9f 91       	pop	r25
    303e:	8f 91       	pop	r24
    3040:	7f 91       	pop	r23
    3042:	6f 91       	pop	r22
    3044:	5f 91       	pop	r21
    3046:	4f 91       	pop	r20
    3048:	3f 91       	pop	r19
    304a:	2f 91       	pop	r18
    304c:	0f 90       	pop	r0
    304e:	0b be       	out	0x3b, r0	; 59
    3050:	0f 90       	pop	r0
    3052:	0f be       	out	0x3f, r0	; 63
    3054:	0f 90       	pop	r0
    3056:	1f 90       	pop	r1
    3058:	18 95       	reti

0000305a <__vector_37>:
    305a:	1f 92       	push	r1
    305c:	0f 92       	push	r0
    305e:	0f b6       	in	r0, 0x3f	; 63
    3060:	0f 92       	push	r0
    3062:	11 24       	eor	r1, r1
    3064:	0b b6       	in	r0, 0x3b	; 59
    3066:	0f 92       	push	r0
    3068:	2f 93       	push	r18
    306a:	8f 93       	push	r24
    306c:	9f 93       	push	r25
    306e:	af 93       	push	r26
    3070:	bf 93       	push	r27
    3072:	ef 93       	push	r30
    3074:	ff 93       	push	r31
    3076:	e0 91 a0 08 	lds	r30, 0x08A0	; 0x8008a0 <_ser_handle+0x2>
    307a:	f0 91 a1 08 	lds	r31, 0x08A1	; 0x8008a1 <_ser_handle+0x3>
    307e:	30 97       	sbiw	r30, 0x00	; 0
    3080:	b9 f0       	breq	.+46     	; 0x30b0 <__vector_37+0x56>
    3082:	02 80       	ldd	r0, Z+2	; 0x02
    3084:	f3 81       	ldd	r31, Z+3	; 0x03
    3086:	e0 2d       	mov	r30, r0
    3088:	93 81       	ldd	r25, Z+3	; 0x03
    308a:	82 81       	ldd	r24, Z+2	; 0x02
    308c:	98 17       	cp	r25, r24
    308e:	b1 f0       	breq	.+44     	; 0x30bc <__vector_37+0x62>
    3090:	92 81       	ldd	r25, Z+2	; 0x02
    3092:	85 81       	ldd	r24, Z+5	; 0x05
    3094:	28 2f       	mov	r18, r24
    3096:	26 95       	lsr	r18
    3098:	29 23       	and	r18, r25
    309a:	a0 81       	ld	r26, Z
    309c:	b1 81       	ldd	r27, Z+1	; 0x01
    309e:	a2 0f       	add	r26, r18
    30a0:	b1 1d       	adc	r27, r1
    30a2:	2c 91       	ld	r18, X
    30a4:	9f 5f       	subi	r25, 0xFF	; 255
    30a6:	89 23       	and	r24, r25
    30a8:	82 83       	std	Z+2, r24	; 0x02
    30aa:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    30ae:	0b c0       	rjmp	.+22     	; 0x30c6 <__vector_37+0x6c>
    30b0:	e9 ec       	ldi	r30, 0xC9	; 201
    30b2:	f0 e0       	ldi	r31, 0x00	; 0
    30b4:	80 81       	ld	r24, Z
    30b6:	8f 7d       	andi	r24, 0xDF	; 223
    30b8:	80 83       	st	Z, r24
    30ba:	05 c0       	rjmp	.+10     	; 0x30c6 <__vector_37+0x6c>
    30bc:	e9 ec       	ldi	r30, 0xC9	; 201
    30be:	f0 e0       	ldi	r31, 0x00	; 0
    30c0:	80 81       	ld	r24, Z
    30c2:	8f 7d       	andi	r24, 0xDF	; 223
    30c4:	80 83       	st	Z, r24
    30c6:	ff 91       	pop	r31
    30c8:	ef 91       	pop	r30
    30ca:	bf 91       	pop	r27
    30cc:	af 91       	pop	r26
    30ce:	9f 91       	pop	r25
    30d0:	8f 91       	pop	r24
    30d2:	2f 91       	pop	r18
    30d4:	0f 90       	pop	r0
    30d6:	0b be       	out	0x3b, r0	; 59
    30d8:	0f 90       	pop	r0
    30da:	0f be       	out	0x3f, r0	; 63
    30dc:	0f 90       	pop	r0
    30de:	1f 90       	pop	r1
    30e0:	18 95       	reti

000030e2 <__vector_51>:
    30e2:	1f 92       	push	r1
    30e4:	0f 92       	push	r0
    30e6:	0f b6       	in	r0, 0x3f	; 63
    30e8:	0f 92       	push	r0
    30ea:	11 24       	eor	r1, r1
    30ec:	0b b6       	in	r0, 0x3b	; 59
    30ee:	0f 92       	push	r0
    30f0:	2f 93       	push	r18
    30f2:	3f 93       	push	r19
    30f4:	4f 93       	push	r20
    30f6:	5f 93       	push	r21
    30f8:	6f 93       	push	r22
    30fa:	7f 93       	push	r23
    30fc:	8f 93       	push	r24
    30fe:	9f 93       	push	r25
    3100:	af 93       	push	r26
    3102:	bf 93       	push	r27
    3104:	cf 93       	push	r28
    3106:	df 93       	push	r29
    3108:	ef 93       	push	r30
    310a:	ff 93       	push	r31
    310c:	a0 91 a2 08 	lds	r26, 0x08A2	; 0x8008a2 <_ser_handle+0x4>
    3110:	b0 91 a3 08 	lds	r27, 0x08A3	; 0x8008a3 <_ser_handle+0x5>
    3114:	10 97       	sbiw	r26, 0x00	; 0
    3116:	11 f1       	breq	.+68     	; 0x315c <__vector_51+0x7a>
    3118:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    311c:	14 96       	adiw	r26, 0x04	; 4
    311e:	ed 91       	ld	r30, X+
    3120:	fc 91       	ld	r31, X
    3122:	15 97       	sbiw	r26, 0x05	; 5
    3124:	93 81       	ldd	r25, Z+3	; 0x03
    3126:	82 81       	ldd	r24, Z+2	; 0x02
    3128:	25 81       	ldd	r18, Z+5	; 0x05
    312a:	98 1b       	sub	r25, r24
    312c:	92 23       	and	r25, r18
    312e:	84 81       	ldd	r24, Z+4	; 0x04
    3130:	98 17       	cp	r25, r24
    3132:	61 f0       	breq	.+24     	; 0x314c <__vector_51+0x6a>
    3134:	83 81       	ldd	r24, Z+3	; 0x03
    3136:	26 95       	lsr	r18
    3138:	28 23       	and	r18, r24
    313a:	c0 81       	ld	r28, Z
    313c:	d1 81       	ldd	r29, Z+1	; 0x01
    313e:	c2 0f       	add	r28, r18
    3140:	d1 1d       	adc	r29, r1
    3142:	68 83       	st	Y, r22
    3144:	8f 5f       	subi	r24, 0xFF	; 255
    3146:	95 81       	ldd	r25, Z+5	; 0x05
    3148:	89 23       	and	r24, r25
    314a:	83 83       	std	Z+3, r24	; 0x03
    314c:	16 96       	adiw	r26, 0x06	; 6
    314e:	ed 91       	ld	r30, X+
    3150:	fc 91       	ld	r31, X
    3152:	17 97       	sbiw	r26, 0x07	; 7
    3154:	30 97       	sbiw	r30, 0x00	; 0
    3156:	11 f0       	breq	.+4      	; 0x315c <__vector_51+0x7a>
    3158:	cd 01       	movw	r24, r26
    315a:	19 95       	eicall
    315c:	ff 91       	pop	r31
    315e:	ef 91       	pop	r30
    3160:	df 91       	pop	r29
    3162:	cf 91       	pop	r28
    3164:	bf 91       	pop	r27
    3166:	af 91       	pop	r26
    3168:	9f 91       	pop	r25
    316a:	8f 91       	pop	r24
    316c:	7f 91       	pop	r23
    316e:	6f 91       	pop	r22
    3170:	5f 91       	pop	r21
    3172:	4f 91       	pop	r20
    3174:	3f 91       	pop	r19
    3176:	2f 91       	pop	r18
    3178:	0f 90       	pop	r0
    317a:	0b be       	out	0x3b, r0	; 59
    317c:	0f 90       	pop	r0
    317e:	0f be       	out	0x3f, r0	; 63
    3180:	0f 90       	pop	r0
    3182:	1f 90       	pop	r1
    3184:	18 95       	reti

00003186 <__vector_52>:
    3186:	1f 92       	push	r1
    3188:	0f 92       	push	r0
    318a:	0f b6       	in	r0, 0x3f	; 63
    318c:	0f 92       	push	r0
    318e:	11 24       	eor	r1, r1
    3190:	0b b6       	in	r0, 0x3b	; 59
    3192:	0f 92       	push	r0
    3194:	2f 93       	push	r18
    3196:	8f 93       	push	r24
    3198:	9f 93       	push	r25
    319a:	af 93       	push	r26
    319c:	bf 93       	push	r27
    319e:	ef 93       	push	r30
    31a0:	ff 93       	push	r31
    31a2:	e0 91 a2 08 	lds	r30, 0x08A2	; 0x8008a2 <_ser_handle+0x4>
    31a6:	f0 91 a3 08 	lds	r31, 0x08A3	; 0x8008a3 <_ser_handle+0x5>
    31aa:	30 97       	sbiw	r30, 0x00	; 0
    31ac:	b9 f0       	breq	.+46     	; 0x31dc <__vector_52+0x56>
    31ae:	02 80       	ldd	r0, Z+2	; 0x02
    31b0:	f3 81       	ldd	r31, Z+3	; 0x03
    31b2:	e0 2d       	mov	r30, r0
    31b4:	93 81       	ldd	r25, Z+3	; 0x03
    31b6:	82 81       	ldd	r24, Z+2	; 0x02
    31b8:	98 17       	cp	r25, r24
    31ba:	b1 f0       	breq	.+44     	; 0x31e8 <__vector_52+0x62>
    31bc:	92 81       	ldd	r25, Z+2	; 0x02
    31be:	85 81       	ldd	r24, Z+5	; 0x05
    31c0:	28 2f       	mov	r18, r24
    31c2:	26 95       	lsr	r18
    31c4:	29 23       	and	r18, r25
    31c6:	a0 81       	ld	r26, Z
    31c8:	b1 81       	ldd	r27, Z+1	; 0x01
    31ca:	a2 0f       	add	r26, r18
    31cc:	b1 1d       	adc	r27, r1
    31ce:	2c 91       	ld	r18, X
    31d0:	9f 5f       	subi	r25, 0xFF	; 255
    31d2:	89 23       	and	r24, r25
    31d4:	82 83       	std	Z+2, r24	; 0x02
    31d6:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    31da:	0b c0       	rjmp	.+22     	; 0x31f2 <__vector_52+0x6c>
    31dc:	e1 ed       	ldi	r30, 0xD1	; 209
    31de:	f0 e0       	ldi	r31, 0x00	; 0
    31e0:	80 81       	ld	r24, Z
    31e2:	8f 7d       	andi	r24, 0xDF	; 223
    31e4:	80 83       	st	Z, r24
    31e6:	05 c0       	rjmp	.+10     	; 0x31f2 <__vector_52+0x6c>
    31e8:	e1 ed       	ldi	r30, 0xD1	; 209
    31ea:	f0 e0       	ldi	r31, 0x00	; 0
    31ec:	80 81       	ld	r24, Z
    31ee:	8f 7d       	andi	r24, 0xDF	; 223
    31f0:	80 83       	st	Z, r24
    31f2:	ff 91       	pop	r31
    31f4:	ef 91       	pop	r30
    31f6:	bf 91       	pop	r27
    31f8:	af 91       	pop	r26
    31fa:	9f 91       	pop	r25
    31fc:	8f 91       	pop	r24
    31fe:	2f 91       	pop	r18
    3200:	0f 90       	pop	r0
    3202:	0b be       	out	0x3b, r0	; 59
    3204:	0f 90       	pop	r0
    3206:	0f be       	out	0x3f, r0	; 63
    3208:	0f 90       	pop	r0
    320a:	1f 90       	pop	r1
    320c:	18 95       	reti

0000320e <__vector_54>:
    320e:	1f 92       	push	r1
    3210:	0f 92       	push	r0
    3212:	0f b6       	in	r0, 0x3f	; 63
    3214:	0f 92       	push	r0
    3216:	11 24       	eor	r1, r1
    3218:	0b b6       	in	r0, 0x3b	; 59
    321a:	0f 92       	push	r0
    321c:	2f 93       	push	r18
    321e:	3f 93       	push	r19
    3220:	4f 93       	push	r20
    3222:	5f 93       	push	r21
    3224:	6f 93       	push	r22
    3226:	7f 93       	push	r23
    3228:	8f 93       	push	r24
    322a:	9f 93       	push	r25
    322c:	af 93       	push	r26
    322e:	bf 93       	push	r27
    3230:	cf 93       	push	r28
    3232:	df 93       	push	r29
    3234:	ef 93       	push	r30
    3236:	ff 93       	push	r31
    3238:	a0 91 a4 08 	lds	r26, 0x08A4	; 0x8008a4 <_ser_handle+0x6>
    323c:	b0 91 a5 08 	lds	r27, 0x08A5	; 0x8008a5 <_ser_handle+0x7>
    3240:	10 97       	sbiw	r26, 0x00	; 0
    3242:	11 f1       	breq	.+68     	; 0x3288 <__vector_54+0x7a>
    3244:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    3248:	14 96       	adiw	r26, 0x04	; 4
    324a:	ed 91       	ld	r30, X+
    324c:	fc 91       	ld	r31, X
    324e:	15 97       	sbiw	r26, 0x05	; 5
    3250:	93 81       	ldd	r25, Z+3	; 0x03
    3252:	82 81       	ldd	r24, Z+2	; 0x02
    3254:	25 81       	ldd	r18, Z+5	; 0x05
    3256:	98 1b       	sub	r25, r24
    3258:	92 23       	and	r25, r18
    325a:	84 81       	ldd	r24, Z+4	; 0x04
    325c:	98 17       	cp	r25, r24
    325e:	61 f0       	breq	.+24     	; 0x3278 <__vector_54+0x6a>
    3260:	83 81       	ldd	r24, Z+3	; 0x03
    3262:	26 95       	lsr	r18
    3264:	28 23       	and	r18, r24
    3266:	c0 81       	ld	r28, Z
    3268:	d1 81       	ldd	r29, Z+1	; 0x01
    326a:	c2 0f       	add	r28, r18
    326c:	d1 1d       	adc	r29, r1
    326e:	68 83       	st	Y, r22
    3270:	8f 5f       	subi	r24, 0xFF	; 255
    3272:	95 81       	ldd	r25, Z+5	; 0x05
    3274:	89 23       	and	r24, r25
    3276:	83 83       	std	Z+3, r24	; 0x03
    3278:	16 96       	adiw	r26, 0x06	; 6
    327a:	ed 91       	ld	r30, X+
    327c:	fc 91       	ld	r31, X
    327e:	17 97       	sbiw	r26, 0x07	; 7
    3280:	30 97       	sbiw	r30, 0x00	; 0
    3282:	11 f0       	breq	.+4      	; 0x3288 <__vector_54+0x7a>
    3284:	cd 01       	movw	r24, r26
    3286:	19 95       	eicall
    3288:	ff 91       	pop	r31
    328a:	ef 91       	pop	r30
    328c:	df 91       	pop	r29
    328e:	cf 91       	pop	r28
    3290:	bf 91       	pop	r27
    3292:	af 91       	pop	r26
    3294:	9f 91       	pop	r25
    3296:	8f 91       	pop	r24
    3298:	7f 91       	pop	r23
    329a:	6f 91       	pop	r22
    329c:	5f 91       	pop	r21
    329e:	4f 91       	pop	r20
    32a0:	3f 91       	pop	r19
    32a2:	2f 91       	pop	r18
    32a4:	0f 90       	pop	r0
    32a6:	0b be       	out	0x3b, r0	; 59
    32a8:	0f 90       	pop	r0
    32aa:	0f be       	out	0x3f, r0	; 63
    32ac:	0f 90       	pop	r0
    32ae:	1f 90       	pop	r1
    32b0:	18 95       	reti

000032b2 <__vector_55>:
    32b2:	1f 92       	push	r1
    32b4:	0f 92       	push	r0
    32b6:	0f b6       	in	r0, 0x3f	; 63
    32b8:	0f 92       	push	r0
    32ba:	11 24       	eor	r1, r1
    32bc:	0b b6       	in	r0, 0x3b	; 59
    32be:	0f 92       	push	r0
    32c0:	2f 93       	push	r18
    32c2:	8f 93       	push	r24
    32c4:	9f 93       	push	r25
    32c6:	af 93       	push	r26
    32c8:	bf 93       	push	r27
    32ca:	ef 93       	push	r30
    32cc:	ff 93       	push	r31
    32ce:	e0 91 a4 08 	lds	r30, 0x08A4	; 0x8008a4 <_ser_handle+0x6>
    32d2:	f0 91 a5 08 	lds	r31, 0x08A5	; 0x8008a5 <_ser_handle+0x7>
    32d6:	30 97       	sbiw	r30, 0x00	; 0
    32d8:	b9 f0       	breq	.+46     	; 0x3308 <__vector_55+0x56>
    32da:	02 80       	ldd	r0, Z+2	; 0x02
    32dc:	f3 81       	ldd	r31, Z+3	; 0x03
    32de:	e0 2d       	mov	r30, r0
    32e0:	93 81       	ldd	r25, Z+3	; 0x03
    32e2:	82 81       	ldd	r24, Z+2	; 0x02
    32e4:	98 17       	cp	r25, r24
    32e6:	b1 f0       	breq	.+44     	; 0x3314 <__vector_55+0x62>
    32e8:	92 81       	ldd	r25, Z+2	; 0x02
    32ea:	85 81       	ldd	r24, Z+5	; 0x05
    32ec:	28 2f       	mov	r18, r24
    32ee:	26 95       	lsr	r18
    32f0:	29 23       	and	r18, r25
    32f2:	a0 81       	ld	r26, Z
    32f4:	b1 81       	ldd	r27, Z+1	; 0x01
    32f6:	a2 0f       	add	r26, r18
    32f8:	b1 1d       	adc	r27, r1
    32fa:	2c 91       	ld	r18, X
    32fc:	9f 5f       	subi	r25, 0xFF	; 255
    32fe:	89 23       	and	r24, r25
    3300:	82 83       	std	Z+2, r24	; 0x02
    3302:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    3306:	0b c0       	rjmp	.+22     	; 0x331e <__vector_55+0x6c>
    3308:	e1 e3       	ldi	r30, 0x31	; 49
    330a:	f1 e0       	ldi	r31, 0x01	; 1
    330c:	80 81       	ld	r24, Z
    330e:	8f 7d       	andi	r24, 0xDF	; 223
    3310:	80 83       	st	Z, r24
    3312:	05 c0       	rjmp	.+10     	; 0x331e <__vector_55+0x6c>
    3314:	e1 e3       	ldi	r30, 0x31	; 49
    3316:	f1 e0       	ldi	r31, 0x01	; 1
    3318:	80 81       	ld	r24, Z
    331a:	8f 7d       	andi	r24, 0xDF	; 223
    331c:	80 83       	st	Z, r24
    331e:	ff 91       	pop	r31
    3320:	ef 91       	pop	r30
    3322:	bf 91       	pop	r27
    3324:	af 91       	pop	r26
    3326:	9f 91       	pop	r25
    3328:	8f 91       	pop	r24
    332a:	2f 91       	pop	r18
    332c:	0f 90       	pop	r0
    332e:	0b be       	out	0x3b, r0	; 59
    3330:	0f 90       	pop	r0
    3332:	0f be       	out	0x3f, r0	; 63
    3334:	0f 90       	pop	r0
    3336:	1f 90       	pop	r1
    3338:	18 95       	reti

0000333a <fifo_init>:
    333a:	fc 01       	movw	r30, r24
    333c:	41 11       	cpse	r20, r1
    333e:	02 c0       	rjmp	.+4      	; 0x3344 <fifo_init+0xa>
    3340:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <abort>
    3344:	84 2f       	mov	r24, r20
    3346:	90 e0       	ldi	r25, 0x00	; 0
    3348:	9c 01       	movw	r18, r24
    334a:	21 50       	subi	r18, 0x01	; 1
    334c:	31 09       	sbc	r19, r1
    334e:	82 23       	and	r24, r18
    3350:	93 23       	and	r25, r19
    3352:	89 2b       	or	r24, r25
    3354:	11 f0       	breq	.+4      	; 0x335a <fifo_init+0x20>
    3356:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <abort>
    335a:	41 38       	cpi	r20, 0x81	; 129
    335c:	10 f0       	brcs	.+4      	; 0x3362 <fifo_init+0x28>
    335e:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <abort>
    3362:	12 82       	std	Z+2, r1	; 0x02
    3364:	13 82       	std	Z+3, r1	; 0x03
    3366:	44 83       	std	Z+4, r20	; 0x04
    3368:	44 0f       	add	r20, r20
    336a:	41 50       	subi	r20, 0x01	; 1
    336c:	45 83       	std	Z+5, r20	; 0x05
    336e:	71 83       	std	Z+1, r23	; 0x01
    3370:	60 83       	st	Z, r22
    3372:	80 e0       	ldi	r24, 0x00	; 0
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	08 95       	ret

00003378 <hal_create>:
    3378:	e4 e7       	ldi	r30, 0x74	; 116
    337a:	fa e0       	ldi	r31, 0x0A	; 10
    337c:	2e e8       	ldi	r18, 0x8E	; 142
    337e:	3f e1       	ldi	r19, 0x1F	; 31
    3380:	31 83       	std	Z+1, r19	; 0x01
    3382:	20 83       	st	Z, r18
    3384:	21 e9       	ldi	r18, 0x91	; 145
    3386:	3f e1       	ldi	r19, 0x1F	; 31
    3388:	33 83       	std	Z+3, r19	; 0x03
    338a:	22 83       	std	Z+2, r18	; 0x02
    338c:	2c e9       	ldi	r18, 0x9C	; 156
    338e:	3f e1       	ldi	r19, 0x1F	; 31
    3390:	35 83       	std	Z+5, r19	; 0x05
    3392:	24 83       	std	Z+4, r18	; 0x04
    3394:	20 ea       	ldi	r18, 0xA0	; 160
    3396:	3f e1       	ldi	r19, 0x1F	; 31
    3398:	37 83       	std	Z+7, r19	; 0x07
    339a:	26 83       	std	Z+6, r18	; 0x06
    339c:	26 ea       	ldi	r18, 0xA6	; 166
    339e:	3f e1       	ldi	r19, 0x1F	; 31
    33a0:	31 87       	std	Z+9, r19	; 0x09
    33a2:	20 87       	std	Z+8, r18	; 0x08
    33a4:	22 eb       	ldi	r18, 0xB2	; 178
    33a6:	3f e1       	ldi	r19, 0x1F	; 31
    33a8:	33 87       	std	Z+11, r19	; 0x0b
    33aa:	22 87       	std	Z+10, r18	; 0x0a
    33ac:	27 eb       	ldi	r18, 0xB7	; 183
    33ae:	3f e1       	ldi	r19, 0x1F	; 31
    33b0:	35 87       	std	Z+13, r19	; 0x0d
    33b2:	24 87       	std	Z+12, r18	; 0x0c
    33b4:	23 ec       	ldi	r18, 0xC3	; 195
    33b6:	3f e1       	ldi	r19, 0x1F	; 31
    33b8:	37 87       	std	Z+15, r19	; 0x0f
    33ba:	26 87       	std	Z+14, r18	; 0x0e
    33bc:	23 ea       	ldi	r18, 0xA3	; 163
    33be:	3f e1       	ldi	r19, 0x1F	; 31
    33c0:	31 8b       	std	Z+17, r19	; 0x11
    33c2:	20 8b       	std	Z+16, r18	; 0x10
    33c4:	28 ec       	ldi	r18, 0xC8	; 200
    33c6:	3f e1       	ldi	r19, 0x1F	; 31
    33c8:	33 8b       	std	Z+19, r19	; 0x13
    33ca:	22 8b       	std	Z+18, r18	; 0x12
    33cc:	25 ed       	ldi	r18, 0xD5	; 213
    33ce:	3f e1       	ldi	r19, 0x1F	; 31
    33d0:	35 8b       	std	Z+21, r19	; 0x15
    33d2:	24 8b       	std	Z+20, r18	; 0x14
    33d4:	68 2f       	mov	r22, r24
    33d6:	cf 01       	movw	r24, r30
    33d8:	3c c1       	rjmp	.+632    	; 0x3652 <led_create>
    33da:	08 95       	ret

000033dc <_hihTwiCallback>:
    33dc:	65 30       	cpi	r22, 0x05	; 5
    33de:	f1 f4       	brne	.+60     	; 0x341c <_hihTwiCallback+0x40>
    33e0:	fa 01       	movw	r30, r20
    33e2:	80 81       	ld	r24, Z
    33e4:	8f 73       	andi	r24, 0x3F	; 63
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	98 2f       	mov	r25, r24
    33ea:	88 27       	eor	r24, r24
    33ec:	21 81       	ldd	r18, Z+1	; 0x01
    33ee:	82 2b       	or	r24, r18
    33f0:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <_hum+0x1>
    33f4:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <_hum>
    33f8:	82 81       	ldd	r24, Z+2	; 0x02
    33fa:	f0 e4       	ldi	r31, 0x40	; 64
    33fc:	8f 9f       	mul	r24, r31
    33fe:	c0 01       	movw	r24, r0
    3400:	11 24       	eor	r1, r1
    3402:	fa 01       	movw	r30, r20
    3404:	23 81       	ldd	r18, Z+3	; 0x03
    3406:	26 95       	lsr	r18
    3408:	26 95       	lsr	r18
    340a:	82 2b       	or	r24, r18
    340c:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <_temp+0x1>
    3410:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_temp>
    3414:	81 e0       	ldi	r24, 0x01	; 1
    3416:	80 93 a6 08 	sts	0x08A6, r24	; 0x8008a6 <_measuringIsReady>
    341a:	08 95       	ret
    341c:	64 30       	cpi	r22, 0x04	; 4
    341e:	51 f0       	breq	.+20     	; 0x3434 <_hihTwiCallback+0x58>
    3420:	80 e0       	ldi	r24, 0x00	; 0
    3422:	90 e4       	ldi	r25, 0x40	; 64
    3424:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <_temp+0x1>
    3428:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_temp>
    342c:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <_hum+0x1>
    3430:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <_hum>
    3434:	08 95       	ret

00003436 <hih8120Create>:
    3436:	0f 93       	push	r16
    3438:	1f 93       	push	r17
    343a:	0e ee       	ldi	r16, 0xEE	; 238
    343c:	19 e1       	ldi	r17, 0x19	; 25
    343e:	20 e0       	ldi	r18, 0x00	; 0
    3440:	34 e2       	ldi	r19, 0x24	; 36
    3442:	44 ef       	ldi	r20, 0xF4	; 244
    3444:	50 e0       	ldi	r21, 0x00	; 0
    3446:	60 e0       	ldi	r22, 0x00	; 0
    3448:	87 e2       	ldi	r24, 0x27	; 39
    344a:	0e 94 54 22 	call	0x44a8	; 0x44a8 <twiCreate>
    344e:	90 93 a8 08 	sts	0x08A8, r25	; 0x8008a8 <_hih8120Handler+0x1>
    3452:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <_hih8120Handler>
    3456:	21 e0       	ldi	r18, 0x01	; 1
    3458:	89 2b       	or	r24, r25
    345a:	09 f0       	breq	.+2      	; 0x345e <hih8120Create+0x28>
    345c:	20 e0       	ldi	r18, 0x00	; 0
    345e:	82 2f       	mov	r24, r18
    3460:	1f 91       	pop	r17
    3462:	0f 91       	pop	r16
    3464:	08 95       	ret

00003466 <hih8120Wakeup>:
    3466:	80 91 a7 08 	lds	r24, 0x08A7	; 0x8008a7 <_hih8120Handler>
    346a:	90 91 a8 08 	lds	r25, 0x08A8	; 0x8008a8 <_hih8120Handler+0x1>
    346e:	00 97       	sbiw	r24, 0x00	; 0
    3470:	59 f0       	breq	.+22     	; 0x3488 <hih8120Wakeup+0x22>
    3472:	40 e0       	ldi	r20, 0x00	; 0
    3474:	60 e0       	ldi	r22, 0x00	; 0
    3476:	70 e0       	ldi	r23, 0x00	; 0
    3478:	0e 94 a5 22 	call	0x454a	; 0x454a <twiTransmit>
    347c:	84 30       	cpi	r24, 0x04	; 4
    347e:	31 f4       	brne	.+12     	; 0x348c <hih8120Wakeup+0x26>
    3480:	10 92 a6 08 	sts	0x08A6, r1	; 0x8008a6 <_measuringIsReady>
    3484:	80 e0       	ldi	r24, 0x00	; 0
    3486:	08 95       	ret
    3488:	82 e0       	ldi	r24, 0x02	; 2
    348a:	08 95       	ret
    348c:	83 e0       	ldi	r24, 0x03	; 3
    348e:	08 95       	ret

00003490 <hih8120Meassure>:
    3490:	80 91 a7 08 	lds	r24, 0x08A7	; 0x8008a7 <_hih8120Handler>
    3494:	90 91 a8 08 	lds	r25, 0x08A8	; 0x8008a8 <_hih8120Handler+0x1>
    3498:	00 97       	sbiw	r24, 0x00	; 0
    349a:	39 f0       	breq	.+14     	; 0x34aa <hih8120Meassure+0x1a>
    349c:	64 e0       	ldi	r22, 0x04	; 4
    349e:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <twiReceive>
    34a2:	85 30       	cpi	r24, 0x05	; 5
    34a4:	21 f0       	breq	.+8      	; 0x34ae <hih8120Meassure+0x1e>
    34a6:	83 e0       	ldi	r24, 0x03	; 3
    34a8:	08 95       	ret
    34aa:	82 e0       	ldi	r24, 0x02	; 2
    34ac:	08 95       	ret
    34ae:	80 e0       	ldi	r24, 0x00	; 0
    34b0:	08 95       	ret

000034b2 <hih8120GetHumidity>:
    34b2:	60 91 1e 02 	lds	r22, 0x021E	; 0x80021e <_hum>
    34b6:	70 91 1f 02 	lds	r23, 0x021F	; 0x80021f <_hum+0x1>
    34ba:	80 e0       	ldi	r24, 0x00	; 0
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	0e 94 b3 24 	call	0x4966	; 0x4966 <__floatunsisf>
    34c2:	20 e0       	ldi	r18, 0x00	; 0
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	48 ec       	ldi	r20, 0xC8	; 200
    34c8:	52 e4       	ldi	r21, 0x42	; 66
    34ca:	0e 94 1c 25 	call	0x4a38	; 0x4a38 <__mulsf3>
    34ce:	20 e0       	ldi	r18, 0x00	; 0
    34d0:	38 ef       	ldi	r19, 0xF8	; 248
    34d2:	4f e7       	ldi	r20, 0x7F	; 127
    34d4:	56 e4       	ldi	r21, 0x46	; 70
    34d6:	0c 94 48 24 	jmp	0x4890	; 0x4890 <__divsf3>
    34da:	08 95       	ret

000034dc <hih8120GetTemperature>:
    34dc:	60 91 1c 02 	lds	r22, 0x021C	; 0x80021c <_temp>
    34e0:	70 91 1d 02 	lds	r23, 0x021D	; 0x80021d <_temp+0x1>
    34e4:	80 e0       	ldi	r24, 0x00	; 0
    34e6:	90 e0       	ldi	r25, 0x00	; 0
    34e8:	0e 94 b3 24 	call	0x4966	; 0x4966 <__floatunsisf>
    34ec:	20 e0       	ldi	r18, 0x00	; 0
    34ee:	30 e0       	ldi	r19, 0x00	; 0
    34f0:	45 e2       	ldi	r20, 0x25	; 37
    34f2:	53 e4       	ldi	r21, 0x43	; 67
    34f4:	0e 94 1c 25 	call	0x4a38	; 0x4a38 <__mulsf3>
    34f8:	20 e0       	ldi	r18, 0x00	; 0
    34fa:	38 ef       	ldi	r19, 0xF8	; 248
    34fc:	4f e7       	ldi	r20, 0x7F	; 127
    34fe:	56 e4       	ldi	r21, 0x46	; 70
    3500:	0e 94 48 24 	call	0x4890	; 0x4890 <__divsf3>
    3504:	20 e0       	ldi	r18, 0x00	; 0
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	40 e2       	ldi	r20, 0x20	; 32
    350a:	52 e4       	ldi	r21, 0x42	; 66
    350c:	0c 94 e1 23 	jmp	0x47c2	; 0x47c2 <__subsf3>
    3510:	08 95       	ret

00003512 <_turn_off>:
    3512:	cf 93       	push	r28
    3514:	df 93       	push	r29
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	fc 01       	movw	r30, r24
    351a:	ee 0f       	add	r30, r30
    351c:	ff 1f       	adc	r31, r31
    351e:	e8 0f       	add	r30, r24
    3520:	f9 1f       	adc	r31, r25
    3522:	ee 0f       	add	r30, r30
    3524:	ff 1f       	adc	r31, r31
    3526:	e7 55       	subi	r30, 0x57	; 87
    3528:	f7 4f       	sbci	r31, 0xF7	; 247
    352a:	23 81       	ldd	r18, Z+3	; 0x03
    352c:	21 11       	cpse	r18, r1
    352e:	0a c0       	rjmp	.+20     	; 0x3544 <_turn_off+0x32>
    3530:	ef 01       	movw	r28, r30
    3532:	e0 91 7c 0a 	lds	r30, 0x0A7C	; 0x800a7c <register_access+0x8>
    3536:	f0 91 7d 0a 	lds	r31, 0x0A7D	; 0x800a7d <register_access+0x9>
    353a:	6a 81       	ldd	r22, Y+2	; 0x02
    353c:	88 81       	ld	r24, Y
    353e:	99 81       	ldd	r25, Y+1	; 0x01
    3540:	19 95       	eicall
    3542:	12 c0       	rjmp	.+36     	; 0x3568 <_turn_off+0x56>
    3544:	dc 01       	movw	r26, r24
    3546:	aa 0f       	add	r26, r26
    3548:	bb 1f       	adc	r27, r27
    354a:	ed 01       	movw	r28, r26
    354c:	c8 0f       	add	r28, r24
    354e:	d9 1f       	adc	r29, r25
    3550:	cc 0f       	add	r28, r28
    3552:	dd 1f       	adc	r29, r29
    3554:	c7 55       	subi	r28, 0x57	; 87
    3556:	d7 4f       	sbci	r29, 0xF7	; 247
    3558:	e0 91 86 0a 	lds	r30, 0x0A86	; 0x800a86 <register_access+0x12>
    355c:	f0 91 87 0a 	lds	r31, 0x0A87	; 0x800a87 <register_access+0x13>
    3560:	6a 81       	ldd	r22, Y+2	; 0x02
    3562:	88 81       	ld	r24, Y
    3564:	99 81       	ldd	r25, Y+1	; 0x01
    3566:	19 95       	eicall
    3568:	df 91       	pop	r29
    356a:	cf 91       	pop	r28
    356c:	08 95       	ret

0000356e <_turn_on>:
    356e:	cf 93       	push	r28
    3570:	df 93       	push	r29
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	fc 01       	movw	r30, r24
    3576:	ee 0f       	add	r30, r30
    3578:	ff 1f       	adc	r31, r31
    357a:	e8 0f       	add	r30, r24
    357c:	f9 1f       	adc	r31, r25
    357e:	ee 0f       	add	r30, r30
    3580:	ff 1f       	adc	r31, r31
    3582:	e7 55       	subi	r30, 0x57	; 87
    3584:	f7 4f       	sbci	r31, 0xF7	; 247
    3586:	23 81       	ldd	r18, Z+3	; 0x03
    3588:	21 11       	cpse	r18, r1
    358a:	0a c0       	rjmp	.+20     	; 0x35a0 <_turn_on+0x32>
    358c:	ef 01       	movw	r28, r30
    358e:	e0 91 86 0a 	lds	r30, 0x0A86	; 0x800a86 <register_access+0x12>
    3592:	f0 91 87 0a 	lds	r31, 0x0A87	; 0x800a87 <register_access+0x13>
    3596:	6a 81       	ldd	r22, Y+2	; 0x02
    3598:	88 81       	ld	r24, Y
    359a:	99 81       	ldd	r25, Y+1	; 0x01
    359c:	19 95       	eicall
    359e:	12 c0       	rjmp	.+36     	; 0x35c4 <_turn_on+0x56>
    35a0:	dc 01       	movw	r26, r24
    35a2:	aa 0f       	add	r26, r26
    35a4:	bb 1f       	adc	r27, r27
    35a6:	ed 01       	movw	r28, r26
    35a8:	c8 0f       	add	r28, r24
    35aa:	d9 1f       	adc	r29, r25
    35ac:	cc 0f       	add	r28, r28
    35ae:	dd 1f       	adc	r29, r29
    35b0:	c7 55       	subi	r28, 0x57	; 87
    35b2:	d7 4f       	sbci	r29, 0xF7	; 247
    35b4:	e0 91 7c 0a 	lds	r30, 0x0A7C	; 0x800a7c <register_access+0x8>
    35b8:	f0 91 7d 0a 	lds	r31, 0x0A7D	; 0x800a7d <register_access+0x9>
    35bc:	6a 81       	ldd	r22, Y+2	; 0x02
    35be:	88 81       	ld	r24, Y
    35c0:	99 81       	ldd	r25, Y+1	; 0x01
    35c2:	19 95       	eicall
    35c4:	df 91       	pop	r29
    35c6:	cf 91       	pop	r28
    35c8:	08 95       	ret

000035ca <_hal_led_task>:
    35ca:	8a e3       	ldi	r24, 0x3A	; 58
    35cc:	95 e0       	ldi	r25, 0x05	; 5
    35ce:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <puts>
    35d2:	0f 2e       	mov	r0, r31
    35d4:	f4 e7       	ldi	r31, 0x74	; 116
    35d6:	cf 2e       	mov	r12, r31
    35d8:	fa e0       	ldi	r31, 0x0A	; 10
    35da:	df 2e       	mov	r13, r31
    35dc:	f0 2d       	mov	r31, r0
    35de:	04 e0       	ldi	r16, 0x04	; 4
    35e0:	c9 ea       	ldi	r28, 0xA9	; 169
    35e2:	d8 e0       	ldi	r29, 0x08	; 8
    35e4:	10 e0       	ldi	r17, 0x00	; 0
    35e6:	8c 81       	ldd	r24, Y+4	; 0x04
    35e8:	81 30       	cpi	r24, 0x01	; 1
    35ea:	69 f0       	breq	.+26     	; 0x3606 <_hal_led_task+0x3c>
    35ec:	e8 f0       	brcs	.+58     	; 0x3628 <_hal_led_task+0x5e>
    35ee:	82 30       	cpi	r24, 0x02	; 2
    35f0:	39 f5       	brne	.+78     	; 0x3640 <_hal_led_task+0x76>
    35f2:	d6 01       	movw	r26, r12
    35f4:	1c 96       	adiw	r26, 0x0c	; 12
    35f6:	ed 91       	ld	r30, X+
    35f8:	fc 91       	ld	r31, X
    35fa:	1d 97       	sbiw	r26, 0x0d	; 13
    35fc:	6a 81       	ldd	r22, Y+2	; 0x02
    35fe:	88 81       	ld	r24, Y
    3600:	99 81       	ldd	r25, Y+1	; 0x01
    3602:	19 95       	eicall
    3604:	1d c0       	rjmp	.+58     	; 0x3640 <_hal_led_task+0x76>
    3606:	8d 81       	ldd	r24, Y+5	; 0x05
    3608:	8f 5f       	subi	r24, 0xFF	; 255
    360a:	8a 30       	cpi	r24, 0x0A	; 10
    360c:	10 f4       	brcc	.+4      	; 0x3612 <_hal_led_task+0x48>
    360e:	8d 83       	std	Y+5, r24	; 0x05
    3610:	17 c0       	rjmp	.+46     	; 0x3640 <_hal_led_task+0x76>
    3612:	1d 82       	std	Y+5, r1	; 0x05
    3614:	d6 01       	movw	r26, r12
    3616:	1c 96       	adiw	r26, 0x0c	; 12
    3618:	ed 91       	ld	r30, X+
    361a:	fc 91       	ld	r31, X
    361c:	1d 97       	sbiw	r26, 0x0d	; 13
    361e:	6a 81       	ldd	r22, Y+2	; 0x02
    3620:	88 81       	ld	r24, Y
    3622:	99 81       	ldd	r25, Y+1	; 0x01
    3624:	19 95       	eicall
    3626:	0c c0       	rjmp	.+24     	; 0x3640 <_hal_led_task+0x76>
    3628:	8d 81       	ldd	r24, Y+5	; 0x05
    362a:	88 23       	and	r24, r24
    362c:	31 f0       	breq	.+12     	; 0x363a <_hal_led_task+0x70>
    362e:	81 2f       	mov	r24, r17
    3630:	9e df       	rcall	.-196    	; 0x356e <_turn_on>
    3632:	8d 81       	ldd	r24, Y+5	; 0x05
    3634:	81 50       	subi	r24, 0x01	; 1
    3636:	8d 83       	std	Y+5, r24	; 0x05
    3638:	03 c0       	rjmp	.+6      	; 0x3640 <_hal_led_task+0x76>
    363a:	0c 83       	std	Y+4, r16	; 0x04
    363c:	81 2f       	mov	r24, r17
    363e:	69 df       	rcall	.-302    	; 0x3512 <_turn_off>
    3640:	1f 5f       	subi	r17, 0xFF	; 255
    3642:	26 96       	adiw	r28, 0x06	; 6
    3644:	14 30       	cpi	r17, 0x04	; 4
    3646:	79 f6       	brne	.-98     	; 0x35e6 <_hal_led_task+0x1c>
    3648:	85 e0       	ldi	r24, 0x05	; 5
    364a:	90 e0       	ldi	r25, 0x00	; 0
    364c:	0e 94 0c 10 	call	0x2018	; 0x2018 <vTaskDelay>
    3650:	c7 cf       	rjmp	.-114    	; 0x35e0 <_hal_led_task+0x16>

00003652 <led_create>:
    3652:	cf 92       	push	r12
    3654:	df 92       	push	r13
    3656:	ef 92       	push	r14
    3658:	ff 92       	push	r15
    365a:	0f 93       	push	r16
    365c:	1f 93       	push	r17
    365e:	cf 93       	push	r28
    3660:	df 93       	push	r29
    3662:	06 2f       	mov	r16, r22
    3664:	0f 2e       	mov	r0, r31
    3666:	f4 e7       	ldi	r31, 0x74	; 116
    3668:	ef 2e       	mov	r14, r31
    366a:	fa e0       	ldi	r31, 0x0A	; 10
    366c:	ff 2e       	mov	r15, r31
    366e:	f0 2d       	mov	r31, r0
    3670:	d7 01       	movw	r26, r14
    3672:	18 96       	adiw	r26, 0x08	; 8
    3674:	ed 91       	ld	r30, X+
    3676:	fc 91       	ld	r31, X
    3678:	19 97       	sbiw	r26, 0x09	; 9
    367a:	66 e0       	ldi	r22, 0x06	; 6
    367c:	87 e2       	ldi	r24, 0x27	; 39
    367e:	90 e0       	ldi	r25, 0x00	; 0
    3680:	19 95       	eicall
    3682:	c9 ea       	ldi	r28, 0xA9	; 169
    3684:	d8 e0       	ldi	r29, 0x08	; 8
    3686:	0f 2e       	mov	r0, r31
    3688:	f8 e2       	ldi	r31, 0x28	; 40
    368a:	cf 2e       	mov	r12, r31
    368c:	d1 2c       	mov	r13, r1
    368e:	f0 2d       	mov	r31, r0
    3690:	d9 82       	std	Y+1, r13	; 0x01
    3692:	c8 82       	st	Y, r12
    3694:	86 e0       	ldi	r24, 0x06	; 6
    3696:	8a 83       	std	Y+2, r24	; 0x02
    3698:	1b 82       	std	Y+3, r1	; 0x03
    369a:	14 e0       	ldi	r17, 0x04	; 4
    369c:	1c 83       	std	Y+4, r17	; 0x04
    369e:	80 e0       	ldi	r24, 0x00	; 0
    36a0:	38 df       	rcall	.-400    	; 0x3512 <_turn_off>
    36a2:	d7 01       	movw	r26, r14
    36a4:	18 96       	adiw	r26, 0x08	; 8
    36a6:	ed 91       	ld	r30, X+
    36a8:	fc 91       	ld	r31, X
    36aa:	19 97       	sbiw	r26, 0x09	; 9
    36ac:	67 e0       	ldi	r22, 0x07	; 7
    36ae:	87 e2       	ldi	r24, 0x27	; 39
    36b0:	90 e0       	ldi	r25, 0x00	; 0
    36b2:	19 95       	eicall
    36b4:	df 82       	std	Y+7, r13	; 0x07
    36b6:	ce 82       	std	Y+6, r12	; 0x06
    36b8:	87 e0       	ldi	r24, 0x07	; 7
    36ba:	88 87       	std	Y+8, r24	; 0x08
    36bc:	19 86       	std	Y+9, r1	; 0x09
    36be:	1a 87       	std	Y+10, r17	; 0x0a
    36c0:	81 e0       	ldi	r24, 0x01	; 1
    36c2:	27 df       	rcall	.-434    	; 0x3512 <_turn_off>
    36c4:	d7 01       	movw	r26, r14
    36c6:	18 96       	adiw	r26, 0x08	; 8
    36c8:	ed 91       	ld	r30, X+
    36ca:	fc 91       	ld	r31, X
    36cc:	19 97       	sbiw	r26, 0x09	; 9
    36ce:	65 e0       	ldi	r22, 0x05	; 5
    36d0:	83 e3       	ldi	r24, 0x33	; 51
    36d2:	90 e0       	ldi	r25, 0x00	; 0
    36d4:	19 95       	eicall
    36d6:	d7 01       	movw	r26, r14
    36d8:	18 96       	adiw	r26, 0x08	; 8
    36da:	ed 91       	ld	r30, X+
    36dc:	fc 91       	ld	r31, X
    36de:	19 97       	sbiw	r26, 0x09	; 9
    36e0:	61 e0       	ldi	r22, 0x01	; 1
    36e2:	84 e3       	ldi	r24, 0x34	; 52
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	19 95       	eicall
    36e8:	84 e3       	ldi	r24, 0x34	; 52
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	9d 87       	std	Y+13, r25	; 0x0d
    36ee:	8c 87       	std	Y+12, r24	; 0x0c
    36f0:	85 e0       	ldi	r24, 0x05	; 5
    36f2:	8e 87       	std	Y+14, r24	; 0x0e
    36f4:	1f 86       	std	Y+15, r1	; 0x0f
    36f6:	18 8b       	std	Y+16, r17	; 0x10
    36f8:	82 e0       	ldi	r24, 0x02	; 2
    36fa:	0b df       	rcall	.-490    	; 0x3512 <_turn_off>
    36fc:	d7 01       	movw	r26, r14
    36fe:	18 96       	adiw	r26, 0x08	; 8
    3700:	ed 91       	ld	r30, X+
    3702:	fc 91       	ld	r31, X
    3704:	19 97       	sbiw	r26, 0x09	; 9
    3706:	64 e0       	ldi	r22, 0x04	; 4
    3708:	81 e0       	ldi	r24, 0x01	; 1
    370a:	91 e0       	ldi	r25, 0x01	; 1
    370c:	19 95       	eicall
    370e:	d7 01       	movw	r26, r14
    3710:	18 96       	adiw	r26, 0x08	; 8
    3712:	ed 91       	ld	r30, X+
    3714:	fc 91       	ld	r31, X
    3716:	19 97       	sbiw	r26, 0x09	; 9
    3718:	61 e0       	ldi	r22, 0x01	; 1
    371a:	82 e0       	ldi	r24, 0x02	; 2
    371c:	91 e0       	ldi	r25, 0x01	; 1
    371e:	19 95       	eicall
    3720:	82 e0       	ldi	r24, 0x02	; 2
    3722:	91 e0       	ldi	r25, 0x01	; 1
    3724:	9b 8b       	std	Y+19, r25	; 0x13
    3726:	8a 8b       	std	Y+18, r24	; 0x12
    3728:	1c 8b       	std	Y+20, r17	; 0x14
    372a:	1d 8a       	std	Y+21, r1	; 0x15
    372c:	1e 8b       	std	Y+22, r17	; 0x16
    372e:	83 e0       	ldi	r24, 0x03	; 3
    3730:	f0 de       	rcall	.-544    	; 0x3512 <_turn_off>
    3732:	e1 2c       	mov	r14, r1
    3734:	f1 2c       	mov	r15, r1
    3736:	20 e0       	ldi	r18, 0x00	; 0
    3738:	30 e0       	ldi	r19, 0x00	; 0
    373a:	40 ec       	ldi	r20, 0xC0	; 192
    373c:	50 e0       	ldi	r21, 0x00	; 0
    373e:	61 e5       	ldi	r22, 0x51	; 81
    3740:	75 e0       	ldi	r23, 0x05	; 5
    3742:	85 ee       	ldi	r24, 0xE5	; 229
    3744:	9a e1       	ldi	r25, 0x1A	; 26
    3746:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <xTaskCreate>
    374a:	df 91       	pop	r29
    374c:	cf 91       	pop	r28
    374e:	1f 91       	pop	r17
    3750:	0f 91       	pop	r16
    3752:	ff 90       	pop	r15
    3754:	ef 90       	pop	r14
    3756:	df 90       	pop	r13
    3758:	cf 90       	pop	r12
    375a:	08 95       	ret

0000375c <_serial_call_back>:
    375c:	0f 93       	push	r16
    375e:	1f 93       	push	r17
    3760:	cf 93       	push	r28
    3762:	df 93       	push	r29
    3764:	1f 92       	push	r1
    3766:	1f 92       	push	r1
    3768:	cd b7       	in	r28, 0x3d	; 61
    376a:	de b7       	in	r29, 0x3e	; 62
    376c:	8c 01       	movw	r16, r24
    376e:	19 82       	std	Y+1, r1	; 0x01
    3770:	2d c0       	rjmp	.+90     	; 0x37cc <_serial_call_back+0x70>
    3772:	e0 91 25 09 	lds	r30, 0x0925	; 0x800925 <rec_buf_inp.2926>
    3776:	ec 32       	cpi	r30, 0x2C	; 44
    3778:	50 f4       	brcc	.+20     	; 0x378e <_serial_call_back+0x32>
    377a:	81 e0       	ldi	r24, 0x01	; 1
    377c:	8e 0f       	add	r24, r30
    377e:	80 93 25 09 	sts	0x0925, r24	; 0x800925 <rec_buf_inp.2926>
    3782:	f0 e0       	ldi	r31, 0x00	; 0
    3784:	eb 5a       	subi	r30, 0xAB	; 171
    3786:	f6 4f       	sbci	r31, 0xF6	; 246
    3788:	8a 81       	ldd	r24, Y+2	; 0x02
    378a:	80 83       	st	Z, r24
    378c:	02 c0       	rjmp	.+4      	; 0x3792 <_serial_call_back+0x36>
    378e:	10 92 25 09 	sts	0x0925, r1	; 0x800925 <rec_buf_inp.2926>
    3792:	8a 81       	ldd	r24, Y+2	; 0x02
    3794:	8a 30       	cpi	r24, 0x0A	; 10
    3796:	d1 f4       	brne	.+52     	; 0x37cc <_serial_call_back+0x70>
    3798:	40 91 25 09 	lds	r20, 0x0925	; 0x800925 <rec_buf_inp.2926>
    379c:	50 e0       	ldi	r21, 0x00	; 0
    379e:	fa 01       	movw	r30, r20
    37a0:	ed 5a       	subi	r30, 0xAD	; 173
    37a2:	f6 4f       	sbci	r31, 0xF6	; 246
    37a4:	10 82       	st	Z, r1
    37a6:	41 50       	subi	r20, 0x01	; 1
    37a8:	51 09       	sbc	r21, r1
    37aa:	9e 01       	movw	r18, r28
    37ac:	2f 5f       	subi	r18, 0xFF	; 255
    37ae:	3f 4f       	sbci	r19, 0xFF	; 255
    37b0:	65 e5       	ldi	r22, 0x55	; 85
    37b2:	79 e0       	ldi	r23, 0x09	; 9
    37b4:	80 91 26 09 	lds	r24, 0x0926	; 0x800926 <_reply_buffer_handle>
    37b8:	90 91 27 09 	lds	r25, 0x0927	; 0x800927 <_reply_buffer_handle+0x1>
    37bc:	0e 94 25 0c 	call	0x184a	; 0x184a <xStreamBufferSendFromISR>
    37c0:	89 81       	ldd	r24, Y+1	; 0x01
    37c2:	81 11       	cpse	r24, r1
    37c4:	0e 94 82 06 	call	0xd04	; 0xd04 <vPortYield>
    37c8:	10 92 25 09 	sts	0x0925, r1	; 0x800925 <rec_buf_inp.2926>
    37cc:	be 01       	movw	r22, r28
    37ce:	6e 5f       	subi	r22, 0xFE	; 254
    37d0:	7f 4f       	sbci	r23, 0xFF	; 255
    37d2:	c8 01       	movw	r24, r16
    37d4:	3e db       	rcall	.-2436   	; 0x2e52 <serial_get_byte>
    37d6:	88 23       	and	r24, r24
    37d8:	61 f2       	breq	.-104    	; 0x3772 <_serial_call_back+0x16>
    37da:	0f 90       	pop	r0
    37dc:	0f 90       	pop	r0
    37de:	df 91       	pop	r29
    37e0:	cf 91       	pop	r28
    37e2:	1f 91       	pop	r17
    37e4:	0f 91       	pop	r16
    37e6:	08 95       	ret

000037e8 <_upload_message>:
    37e8:	0f 93       	push	r16
    37ea:	1f 93       	push	r17
    37ec:	cf 93       	push	r28
    37ee:	df 93       	push	r29
    37f0:	8c 01       	movw	r16, r24
    37f2:	eb 01       	movw	r28, r22
    37f4:	80 91 26 09 	lds	r24, 0x0926	; 0x800926 <_reply_buffer_handle>
    37f8:	90 91 27 09 	lds	r25, 0x0927	; 0x800927 <_reply_buffer_handle+0x1>
    37fc:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <xStreamBufferReset>
    3800:	b8 01       	movw	r22, r16
    3802:	81 ec       	ldi	r24, 0xC1	; 193
    3804:	98 e0       	ldi	r25, 0x08	; 8
    3806:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <strcpy>
    380a:	20 97       	sbiw	r28, 0x00	; 0
    380c:	79 f0       	breq	.+30     	; 0x382c <_upload_message+0x44>
    380e:	e1 ec       	ldi	r30, 0xC1	; 193
    3810:	f8 e0       	ldi	r31, 0x08	; 8
    3812:	01 90       	ld	r0, Z+
    3814:	00 20       	and	r0, r0
    3816:	e9 f7       	brne	.-6      	; 0x3812 <_upload_message+0x2a>
    3818:	31 97       	sbiw	r30, 0x01	; 1
    381a:	80 e2       	ldi	r24, 0x20	; 32
    381c:	90 e0       	ldi	r25, 0x00	; 0
    381e:	91 83       	std	Z+1, r25	; 0x01
    3820:	80 83       	st	Z, r24
    3822:	be 01       	movw	r22, r28
    3824:	81 ec       	ldi	r24, 0xC1	; 193
    3826:	98 e0       	ldi	r25, 0x08	; 8
    3828:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <strcat>
    382c:	e1 ec       	ldi	r30, 0xC1	; 193
    382e:	f8 e0       	ldi	r31, 0x08	; 8
    3830:	df 01       	movw	r26, r30
    3832:	0d 90       	ld	r0, X+
    3834:	00 20       	and	r0, r0
    3836:	e9 f7       	brne	.-6      	; 0x3832 <_upload_message+0x4a>
    3838:	11 97       	sbiw	r26, 0x01	; 1
    383a:	8d e0       	ldi	r24, 0x0D	; 13
    383c:	9a e0       	ldi	r25, 0x0A	; 10
    383e:	11 96       	adiw	r26, 0x01	; 1
    3840:	9c 93       	st	X, r25
    3842:	8e 93       	st	-X, r24
    3844:	12 96       	adiw	r26, 0x02	; 2
    3846:	1c 92       	st	X, r1
    3848:	01 90       	ld	r0, Z+
    384a:	00 20       	and	r0, r0
    384c:	e9 f7       	brne	.-6      	; 0x3848 <_upload_message+0x60>
    384e:	31 97       	sbiw	r30, 0x01	; 1
    3850:	e1 5c       	subi	r30, 0xC1	; 193
    3852:	f8 40       	sbci	r31, 0x08	; 8
    3854:	ae 2f       	mov	r26, r30
    3856:	81 ec       	ldi	r24, 0xC1	; 193
    3858:	98 e0       	ldi	r25, 0x08	; 8
    385a:	ac 01       	movw	r20, r24
    385c:	6a 2f       	mov	r22, r26
    385e:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <_rn2483_serial>
    3862:	90 91 29 09 	lds	r25, 0x0929	; 0x800929 <_rn2483_serial+0x1>
    3866:	a5 da       	rcall	.-2742   	; 0x2db2 <serial_send_bytes>
    3868:	81 11       	cpse	r24, r1
    386a:	0f c0       	rjmp	.+30     	; 0x388a <_upload_message+0xa2>
    386c:	28 e2       	ldi	r18, 0x28	; 40
    386e:	35 e0       	ldi	r19, 0x05	; 5
    3870:	4d e2       	ldi	r20, 0x2D	; 45
    3872:	50 e0       	ldi	r21, 0x00	; 0
    3874:	6f ea       	ldi	r22, 0xAF	; 175
    3876:	79 e0       	ldi	r23, 0x09	; 9
    3878:	80 91 26 09 	lds	r24, 0x0926	; 0x800926 <_reply_buffer_handle>
    387c:	90 91 27 09 	lds	r25, 0x0927	; 0x800927 <_reply_buffer_handle+0x1>
    3880:	0e 94 67 0c 	call	0x18ce	; 0x18ce <xStreamBufferReceive>
    3884:	8f ea       	ldi	r24, 0xAF	; 175
    3886:	99 e0       	ldi	r25, 0x09	; 9
    3888:	02 c0       	rjmp	.+4      	; 0x388e <_upload_message+0xa6>
    388a:	80 e0       	ldi	r24, 0x00	; 0
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	df 91       	pop	r29
    3890:	cf 91       	pop	r28
    3892:	1f 91       	pop	r17
    3894:	0f 91       	pop	r16
    3896:	08 95       	ret

00003898 <_reply2return_code>:
    3898:	af 92       	push	r10
    389a:	bf 92       	push	r11
    389c:	cf 92       	push	r12
    389e:	df 92       	push	r13
    38a0:	ef 92       	push	r14
    38a2:	ff 92       	push	r15
    38a4:	0f 93       	push	r16
    38a6:	1f 93       	push	r17
    38a8:	cf 93       	push	r28
    38aa:	df 93       	push	r29
    38ac:	6c 01       	movw	r12, r24
    38ae:	fc 01       	movw	r30, r24
    38b0:	01 90       	ld	r0, Z+
    38b2:	00 20       	and	r0, r0
    38b4:	e9 f7       	brne	.-6      	; 0x38b0 <_reply2return_code+0x18>
    38b6:	31 97       	sbiw	r30, 0x01	; 1
    38b8:	7f 01       	movw	r14, r30
    38ba:	e8 1a       	sub	r14, r24
    38bc:	f9 0a       	sbc	r15, r25
    38be:	0d ed       	ldi	r16, 0xDD	; 221
    38c0:	17 e0       	ldi	r17, 0x07	; 7
    38c2:	c0 e0       	ldi	r28, 0x00	; 0
    38c4:	d0 e0       	ldi	r29, 0x00	; 0
    38c6:	f8 01       	movw	r30, r16
    38c8:	60 81       	ld	r22, Z
    38ca:	71 81       	ldd	r23, Z+1	; 0x01
    38cc:	a7 01       	movw	r20, r14
    38ce:	c6 01       	movw	r24, r12
    38d0:	0e 94 31 27 	call	0x4e62	; 0x4e62 <strncasecmp>
    38d4:	89 2b       	or	r24, r25
    38d6:	49 f4       	brne	.+18     	; 0x38ea <_reply2return_code+0x52>
    38d8:	fe 01       	movw	r30, r28
    38da:	ee 0f       	add	r30, r30
    38dc:	ff 1f       	adc	r31, r31
    38de:	ec 0f       	add	r30, r28
    38e0:	fd 1f       	adc	r31, r29
    38e2:	e4 52       	subi	r30, 0x24	; 36
    38e4:	f8 4f       	sbci	r31, 0xF8	; 248
    38e6:	80 81       	ld	r24, Z
    38e8:	07 c0       	rjmp	.+14     	; 0x38f8 <_reply2return_code+0x60>
    38ea:	21 96       	adiw	r28, 0x01	; 1
    38ec:	0d 5f       	subi	r16, 0xFD	; 253
    38ee:	1f 4f       	sbci	r17, 0xFF	; 255
    38f0:	c1 31       	cpi	r28, 0x11	; 17
    38f2:	d1 05       	cpc	r29, r1
    38f4:	41 f7       	brne	.-48     	; 0x38c6 <_reply2return_code+0x2e>
    38f6:	80 e1       	ldi	r24, 0x10	; 16
    38f8:	df 91       	pop	r29
    38fa:	cf 91       	pop	r28
    38fc:	1f 91       	pop	r17
    38fe:	0f 91       	pop	r16
    3900:	ff 90       	pop	r15
    3902:	ef 90       	pop	r14
    3904:	df 90       	pop	r13
    3906:	cf 90       	pop	r12
    3908:	bf 90       	pop	r11
    390a:	af 90       	pop	r10
    390c:	08 95       	ret

0000390e <_upload_message_rc>:
    390e:	6c df       	rcall	.-296    	; 0x37e8 <_upload_message>
    3910:	c3 cf       	rjmp	.-122    	; 0x3898 <_reply2return_code>
    3912:	08 95       	ret

00003914 <lora_driver_flush_buffers>:
    3914:	80 91 26 09 	lds	r24, 0x0926	; 0x800926 <_reply_buffer_handle>
    3918:	90 91 27 09 	lds	r25, 0x0927	; 0x800927 <_reply_buffer_handle+0x1>
    391c:	0c 94 e6 0b 	jmp	0x17cc	; 0x17cc <xStreamBufferReset>
    3920:	08 95       	ret

00003922 <lora_driver_create>:
    3922:	8f 92       	push	r8
    3924:	9f 92       	push	r9
    3926:	af 92       	push	r10
    3928:	cf 92       	push	r12
    392a:	ef 92       	push	r14
    392c:	0f 93       	push	r16
    392e:	cf 93       	push	r28
    3930:	c8 2f       	mov	r28, r24
    3932:	41 e0       	ldi	r20, 0x01	; 1
    3934:	60 e0       	ldi	r22, 0x00	; 0
    3936:	70 e0       	ldi	r23, 0x00	; 0
    3938:	88 ec       	ldi	r24, 0xC8	; 200
    393a:	90 e0       	ldi	r25, 0x00	; 0
    393c:	0e 94 ba 0b 	call	0x1774	; 0x1774 <xStreamBufferGenericCreate>
    3940:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <_reply_buffer_handle+0x1>
    3944:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <_reply_buffer_handle>
    3948:	0f 2e       	mov	r0, r31
    394a:	fe ea       	ldi	r31, 0xAE	; 174
    394c:	8f 2e       	mov	r8, r31
    394e:	fb e1       	ldi	r31, 0x1B	; 27
    3950:	9f 2e       	mov	r9, r31
    3952:	f0 2d       	mov	r31, r0
    3954:	68 94       	set
    3956:	aa 24       	eor	r10, r10
    3958:	a6 f8       	bld	r10, 6
    395a:	68 94       	set
    395c:	cc 24       	eor	r12, r12
    395e:	c6 f8       	bld	r12, 6
    3960:	e1 2c       	mov	r14, r1
    3962:	00 e0       	ldi	r16, 0x00	; 0
    3964:	23 e0       	ldi	r18, 0x03	; 3
    3966:	40 e0       	ldi	r20, 0x00	; 0
    3968:	51 ee       	ldi	r21, 0xE1	; 225
    396a:	60 e0       	ldi	r22, 0x00	; 0
    396c:	70 e0       	ldi	r23, 0x00	; 0
    396e:	8c 2f       	mov	r24, r28
    3970:	5c d9       	rcall	.-3400   	; 0x2c2a <serial_new_instance>
    3972:	90 93 29 09 	sts	0x0929, r25	; 0x800929 <_rn2483_serial+0x1>
    3976:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <_rn2483_serial>
    397a:	e0 91 7c 0a 	lds	r30, 0x0A7C	; 0x800a7c <register_access+0x8>
    397e:	f0 91 7d 0a 	lds	r31, 0x0A7D	; 0x800a7d <register_access+0x9>
    3982:	64 e0       	ldi	r22, 0x04	; 4
    3984:	87 e0       	ldi	r24, 0x07	; 7
    3986:	91 e0       	ldi	r25, 0x01	; 1
    3988:	19 95       	eicall
    398a:	cf 91       	pop	r28
    398c:	0f 91       	pop	r16
    398e:	ef 90       	pop	r14
    3990:	cf 90       	pop	r12
    3992:	af 90       	pop	r10
    3994:	9f 90       	pop	r9
    3996:	8f 90       	pop	r8
    3998:	08 95       	ret

0000399a <lora_driver_reset_rn2483>:
    399a:	88 23       	and	r24, r24
    399c:	49 f0       	breq	.+18     	; 0x39b0 <lora_driver_reset_rn2483+0x16>
    399e:	e0 91 86 0a 	lds	r30, 0x0A86	; 0x800a86 <register_access+0x12>
    39a2:	f0 91 87 0a 	lds	r31, 0x0A87	; 0x800a87 <register_access+0x13>
    39a6:	64 e0       	ldi	r22, 0x04	; 4
    39a8:	88 e0       	ldi	r24, 0x08	; 8
    39aa:	91 e0       	ldi	r25, 0x01	; 1
    39ac:	19 95       	eicall
    39ae:	08 95       	ret
    39b0:	e0 91 7c 0a 	lds	r30, 0x0A7C	; 0x800a7c <register_access+0x8>
    39b4:	f0 91 7d 0a 	lds	r31, 0x0A7D	; 0x800a7d <register_access+0x9>
    39b8:	64 e0       	ldi	r22, 0x04	; 4
    39ba:	88 e0       	ldi	r24, 0x08	; 8
    39bc:	91 e0       	ldi	r25, 0x01	; 1
    39be:	19 95       	eicall
    39c0:	08 95       	ret

000039c2 <lora_driver_rn2483_factory_reset>:
    39c2:	60 e0       	ldi	r22, 0x00	; 0
    39c4:	70 e0       	ldi	r23, 0x00	; 0
    39c6:	88 e7       	ldi	r24, 0x78	; 120
    39c8:	95 e0       	ldi	r25, 0x05	; 5
    39ca:	0e df       	rcall	.-484    	; 0x37e8 <_upload_message>
    39cc:	ef ea       	ldi	r30, 0xAF	; 175
    39ce:	f9 e0       	ldi	r31, 0x09	; 9
    39d0:	01 90       	ld	r0, Z+
    39d2:	00 20       	and	r0, r0
    39d4:	e9 f7       	brne	.-6      	; 0x39d0 <lora_driver_rn2483_factory_reset+0xe>
    39d6:	31 97       	sbiw	r30, 0x01	; 1
    39d8:	ef 5a       	subi	r30, 0xAF	; 175
    39da:	f9 40       	sbci	r31, 0x09	; 9
    39dc:	81 e0       	ldi	r24, 0x01	; 1
    39de:	75 97       	sbiw	r30, 0x15	; 21
    39e0:	08 f0       	brcs	.+2      	; 0x39e4 <lora_driver_rn2483_factory_reset+0x22>
    39e2:	80 e0       	ldi	r24, 0x00	; 0
    39e4:	08 95       	ret

000039e6 <lora_driver_get_rn2483_hweui>:
    39e6:	cf 93       	push	r28
    39e8:	df 93       	push	r29
    39ea:	ec 01       	movw	r28, r24
    39ec:	60 e0       	ldi	r22, 0x00	; 0
    39ee:	70 e0       	ldi	r23, 0x00	; 0
    39f0:	89 e8       	ldi	r24, 0x89	; 137
    39f2:	95 e0       	ldi	r25, 0x05	; 5
    39f4:	f9 de       	rcall	.-526    	; 0x37e8 <_upload_message>
    39f6:	ef ea       	ldi	r30, 0xAF	; 175
    39f8:	f9 e0       	ldi	r31, 0x09	; 9
    39fa:	01 90       	ld	r0, Z+
    39fc:	00 20       	and	r0, r0
    39fe:	e9 f7       	brne	.-6      	; 0x39fa <lora_driver_get_rn2483_hweui+0x14>
    3a00:	e0 5c       	subi	r30, 0xC0	; 192
    3a02:	f9 40       	sbci	r31, 0x09	; 9
    3a04:	39 f4       	brne	.+14     	; 0x3a14 <lora_driver_get_rn2483_hweui+0x2e>
    3a06:	6f ea       	ldi	r22, 0xAF	; 175
    3a08:	79 e0       	ldi	r23, 0x09	; 9
    3a0a:	ce 01       	movw	r24, r28
    3a0c:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <strcpy>
    3a10:	80 e0       	ldi	r24, 0x00	; 0
    3a12:	02 c0       	rjmp	.+4      	; 0x3a18 <lora_driver_get_rn2483_hweui+0x32>
    3a14:	18 82       	st	Y, r1
    3a16:	81 e0       	ldi	r24, 0x01	; 1
    3a18:	df 91       	pop	r29
    3a1a:	cf 91       	pop	r28
    3a1c:	08 95       	ret

00003a1e <lora_driver_set_device_identifier>:
    3a1e:	fc 01       	movw	r30, r24
    3a20:	01 90       	ld	r0, Z+
    3a22:	00 20       	and	r0, r0
    3a24:	e9 f7       	brne	.-6      	; 0x3a20 <lora_driver_set_device_identifier+0x2>
    3a26:	9f 01       	movw	r18, r30
    3a28:	21 51       	subi	r18, 0x11	; 17
    3a2a:	31 09       	sbc	r19, r1
    3a2c:	28 17       	cp	r18, r24
    3a2e:	39 07       	cpc	r19, r25
    3a30:	29 f4       	brne	.+10     	; 0x3a3c <lora_driver_set_device_identifier+0x1e>
    3a32:	bc 01       	movw	r22, r24
    3a34:	87 eb       	ldi	r24, 0xB7	; 183
    3a36:	95 e0       	ldi	r25, 0x05	; 5
    3a38:	6a cf       	rjmp	.-300    	; 0x390e <_upload_message_rc>
    3a3a:	08 95       	ret
    3a3c:	89 e0       	ldi	r24, 0x09	; 9
    3a3e:	08 95       	ret

00003a40 <lora_driver_set_application_identifier>:
    3a40:	fc 01       	movw	r30, r24
    3a42:	01 90       	ld	r0, Z+
    3a44:	00 20       	and	r0, r0
    3a46:	e9 f7       	brne	.-6      	; 0x3a42 <lora_driver_set_application_identifier+0x2>
    3a48:	9f 01       	movw	r18, r30
    3a4a:	21 51       	subi	r18, 0x11	; 17
    3a4c:	31 09       	sbc	r19, r1
    3a4e:	28 17       	cp	r18, r24
    3a50:	39 07       	cpc	r19, r25
    3a52:	29 f4       	brne	.+10     	; 0x3a5e <lora_driver_set_application_identifier+0x1e>
    3a54:	bc 01       	movw	r22, r24
    3a56:	86 ec       	ldi	r24, 0xC6	; 198
    3a58:	95 e0       	ldi	r25, 0x05	; 5
    3a5a:	59 cf       	rjmp	.-334    	; 0x390e <_upload_message_rc>
    3a5c:	08 95       	ret
    3a5e:	89 e0       	ldi	r24, 0x09	; 9
    3a60:	08 95       	ret

00003a62 <lora_driver_set_application_key>:
    3a62:	fc 01       	movw	r30, r24
    3a64:	01 90       	ld	r0, Z+
    3a66:	00 20       	and	r0, r0
    3a68:	e9 f7       	brne	.-6      	; 0x3a64 <lora_driver_set_application_key+0x2>
    3a6a:	9f 01       	movw	r18, r30
    3a6c:	21 52       	subi	r18, 0x21	; 33
    3a6e:	31 09       	sbc	r19, r1
    3a70:	28 17       	cp	r18, r24
    3a72:	39 07       	cpc	r19, r25
    3a74:	29 f4       	brne	.+10     	; 0x3a80 <lora_driver_set_application_key+0x1e>
    3a76:	bc 01       	movw	r22, r24
    3a78:	85 ed       	ldi	r24, 0xD5	; 213
    3a7a:	95 e0       	ldi	r25, 0x05	; 5
    3a7c:	48 cf       	rjmp	.-368    	; 0x390e <_upload_message_rc>
    3a7e:	08 95       	ret
    3a80:	89 e0       	ldi	r24, 0x09	; 9
    3a82:	08 95       	ret

00003a84 <lora_driver_save_mac>:
    3a84:	60 e0       	ldi	r22, 0x00	; 0
    3a86:	70 e0       	ldi	r23, 0x00	; 0
    3a88:	84 e1       	ldi	r24, 0x14	; 20
    3a8a:	96 e0       	ldi	r25, 0x06	; 6
    3a8c:	40 cf       	rjmp	.-384    	; 0x390e <_upload_message_rc>
    3a8e:	08 95       	ret

00003a90 <lora_driver_join>:
    3a90:	e8 2f       	mov	r30, r24
    3a92:	f0 e0       	ldi	r31, 0x00	; 0
    3a94:	ee 0f       	add	r30, r30
    3a96:	ff 1f       	adc	r31, r31
    3a98:	e8 52       	subi	r30, 0x28	; 40
    3a9a:	f8 4f       	sbci	r31, 0xF8	; 248
    3a9c:	60 81       	ld	r22, Z
    3a9e:	71 81       	ldd	r23, Z+1	; 0x01
    3aa0:	8d e1       	ldi	r24, 0x1D	; 29
    3aa2:	96 e0       	ldi	r25, 0x06	; 6
    3aa4:	34 df       	rcall	.-408    	; 0x390e <_upload_message_rc>
    3aa6:	81 11       	cpse	r24, r1
    3aa8:	12 c0       	rjmp	.+36     	; 0x3ace <lora_driver_join+0x3e>
    3aaa:	28 e2       	ldi	r18, 0x28	; 40
    3aac:	35 e0       	ldi	r19, 0x05	; 5
    3aae:	4d e2       	ldi	r20, 0x2D	; 45
    3ab0:	50 e0       	ldi	r21, 0x00	; 0
    3ab2:	6f ea       	ldi	r22, 0xAF	; 175
    3ab4:	79 e0       	ldi	r23, 0x09	; 9
    3ab6:	80 91 26 09 	lds	r24, 0x0926	; 0x800926 <_reply_buffer_handle>
    3aba:	90 91 27 09 	lds	r25, 0x0927	; 0x800927 <_reply_buffer_handle+0x1>
    3abe:	0e 94 67 0c 	call	0x18ce	; 0x18ce <xStreamBufferReceive>
    3ac2:	88 23       	and	r24, r24
    3ac4:	21 f0       	breq	.+8      	; 0x3ace <lora_driver_join+0x3e>
    3ac6:	8f ea       	ldi	r24, 0xAF	; 175
    3ac8:	99 e0       	ldi	r25, 0x09	; 9
    3aca:	e6 ce       	rjmp	.-564    	; 0x3898 <_reply2return_code>
    3acc:	08 95       	ret
    3ace:	8f ea       	ldi	r24, 0xAF	; 175
    3ad0:	99 e0       	ldi	r25, 0x09	; 9
    3ad2:	e2 ce       	rjmp	.-572    	; 0x3898 <_reply2return_code>
    3ad4:	08 95       	ret

00003ad6 <lora_driver_sent_upload_message>:
    3ad6:	cf 93       	push	r28
    3ad8:	df 93       	push	r29
    3ada:	1f 92       	push	r1
    3adc:	cd b7       	in	r28, 0x3d	; 61
    3ade:	de b7       	in	r29, 0x3e	; 62
    3ae0:	db 01       	movw	r26, r22
    3ae2:	11 96       	adiw	r26, 0x01	; 1
    3ae4:	9c 91       	ld	r25, X
    3ae6:	11 97       	sbiw	r26, 0x01	; 1
    3ae8:	95 31       	cpi	r25, 0x15	; 21
    3aea:	08 f0       	brcs	.+2      	; 0x3aee <lora_driver_sent_upload_message+0x18>
    3aec:	87 c0       	rjmp	.+270    	; 0x3bfc <lora_driver_sent_upload_message+0x126>
    3aee:	99 23       	and	r25, r25
    3af0:	81 f1       	breq	.+96     	; 0x3b52 <lora_driver_sent_upload_message+0x7c>
    3af2:	60 e0       	ldi	r22, 0x00	; 0
    3af4:	70 e0       	ldi	r23, 0x00	; 0
    3af6:	27 2f       	mov	r18, r23
    3af8:	30 e0       	ldi	r19, 0x00	; 0
    3afa:	46 2f       	mov	r20, r22
    3afc:	50 e0       	ldi	r21, 0x00	; 0
    3afe:	fd 01       	movw	r30, r26
    3b00:	e4 0f       	add	r30, r20
    3b02:	f5 1f       	adc	r31, r21
    3b04:	92 81       	ldd	r25, Z+2	; 0x02
    3b06:	92 95       	swap	r25
    3b08:	9f 70       	andi	r25, 0x0F	; 15
    3b0a:	9a 30       	cpi	r25, 0x0A	; 10
    3b0c:	10 f0       	brcs	.+4      	; 0x3b12 <lora_driver_sent_upload_message+0x3c>
    3b0e:	99 5c       	subi	r25, 0xC9	; 201
    3b10:	01 c0       	rjmp	.+2      	; 0x3b14 <lora_driver_sent_upload_message+0x3e>
    3b12:	90 5d       	subi	r25, 0xD0	; 208
    3b14:	f9 01       	movw	r30, r18
    3b16:	e0 5c       	subi	r30, 0xC0	; 192
    3b18:	f6 4f       	sbci	r31, 0xF6	; 246
    3b1a:	90 83       	st	Z, r25
    3b1c:	2f 5f       	subi	r18, 0xFF	; 255
    3b1e:	3f 4f       	sbci	r19, 0xFF	; 255
    3b20:	fd 01       	movw	r30, r26
    3b22:	e4 0f       	add	r30, r20
    3b24:	f5 1f       	adc	r31, r21
    3b26:	92 81       	ldd	r25, Z+2	; 0x02
    3b28:	9f 70       	andi	r25, 0x0F	; 15
    3b2a:	49 2f       	mov	r20, r25
    3b2c:	50 e0       	ldi	r21, 0x00	; 0
    3b2e:	4a 30       	cpi	r20, 0x0A	; 10
    3b30:	51 05       	cpc	r21, r1
    3b32:	14 f0       	brlt	.+4      	; 0x3b38 <lora_driver_sent_upload_message+0x62>
    3b34:	99 5c       	subi	r25, 0xC9	; 201
    3b36:	01 c0       	rjmp	.+2      	; 0x3b3a <lora_driver_sent_upload_message+0x64>
    3b38:	90 5d       	subi	r25, 0xD0	; 208
    3b3a:	f9 01       	movw	r30, r18
    3b3c:	e0 5c       	subi	r30, 0xC0	; 192
    3b3e:	f6 4f       	sbci	r31, 0xF6	; 246
    3b40:	90 83       	st	Z, r25
    3b42:	7e 5f       	subi	r23, 0xFE	; 254
    3b44:	6f 5f       	subi	r22, 0xFF	; 255
    3b46:	11 96       	adiw	r26, 0x01	; 1
    3b48:	9c 91       	ld	r25, X
    3b4a:	11 97       	sbiw	r26, 0x01	; 1
    3b4c:	69 17       	cp	r22, r25
    3b4e:	98 f2       	brcs	.-90     	; 0x3af6 <lora_driver_sent_upload_message+0x20>
    3b50:	01 c0       	rjmp	.+2      	; 0x3b54 <lora_driver_sent_upload_message+0x7e>
    3b52:	70 e0       	ldi	r23, 0x00	; 0
    3b54:	e7 2f       	mov	r30, r23
    3b56:	f0 e0       	ldi	r31, 0x00	; 0
    3b58:	e0 5c       	subi	r30, 0xC0	; 192
    3b5a:	f6 4f       	sbci	r31, 0xF6	; 246
    3b5c:	10 82       	st	Z, r1
    3b5e:	4c 91       	ld	r20, X
    3b60:	81 11       	cpse	r24, r1
    3b62:	03 c0       	rjmp	.+6      	; 0x3b6a <lora_driver_sent_upload_message+0x94>
    3b64:	86 e2       	ldi	r24, 0x26	; 38
    3b66:	96 e0       	ldi	r25, 0x06	; 6
    3b68:	02 c0       	rjmp	.+4      	; 0x3b6e <lora_driver_sent_upload_message+0x98>
    3b6a:	88 e2       	ldi	r24, 0x28	; 40
    3b6c:	96 e0       	ldi	r25, 0x06	; 6
    3b6e:	20 e4       	ldi	r18, 0x40	; 64
    3b70:	39 e0       	ldi	r19, 0x09	; 9
    3b72:	3f 93       	push	r19
    3b74:	2f 93       	push	r18
    3b76:	1f 92       	push	r1
    3b78:	4f 93       	push	r20
    3b7a:	9f 93       	push	r25
    3b7c:	8f 93       	push	r24
    3b7e:	8c e2       	ldi	r24, 0x2C	; 44
    3b80:	96 e0       	ldi	r25, 0x06	; 6
    3b82:	9f 93       	push	r25
    3b84:	8f 93       	push	r24
    3b86:	82 e8       	ldi	r24, 0x82	; 130
    3b88:	99 e0       	ldi	r25, 0x09	; 9
    3b8a:	9f 93       	push	r25
    3b8c:	8f 93       	push	r24
    3b8e:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <sprintf>
    3b92:	60 e0       	ldi	r22, 0x00	; 0
    3b94:	70 e0       	ldi	r23, 0x00	; 0
    3b96:	82 e8       	ldi	r24, 0x82	; 130
    3b98:	99 e0       	ldi	r25, 0x09	; 9
    3b9a:	b9 de       	rcall	.-654    	; 0x390e <_upload_message_rc>
    3b9c:	0f b6       	in	r0, 0x3f	; 63
    3b9e:	f8 94       	cli
    3ba0:	de bf       	out	0x3e, r29	; 62
    3ba2:	0f be       	out	0x3f, r0	; 63
    3ba4:	cd bf       	out	0x3d, r28	; 61
    3ba6:	8e 30       	cpi	r24, 0x0E	; 14
    3ba8:	51 f5       	brne	.+84     	; 0x3bfe <lora_driver_sent_upload_message+0x128>
    3baa:	87 e0       	ldi	r24, 0x07	; 7
    3bac:	89 83       	std	Y+1, r24	; 0x01
    3bae:	be 01       	movw	r22, r28
    3bb0:	6f 5f       	subi	r22, 0xFF	; 255
    3bb2:	7f 4f       	sbci	r23, 0xFF	; 255
    3bb4:	8f ea       	ldi	r24, 0xAF	; 175
    3bb6:	99 e0       	ldi	r25, 0x09	; 9
    3bb8:	3c d1       	rcall	.+632    	; 0x3e32 <decode_port_no>
    3bba:	80 93 2a 09 	sts	0x092A, r24	; 0x80092a <_downlink_payload>
    3bbe:	e9 81       	ldd	r30, Y+1	; 0x01
    3bc0:	f0 e0       	ldi	r31, 0x00	; 0
    3bc2:	e1 55       	subi	r30, 0x51	; 81
    3bc4:	f6 4f       	sbci	r31, 0xF6	; 246
    3bc6:	df 01       	movw	r26, r30
    3bc8:	0d 90       	ld	r0, X+
    3bca:	00 20       	and	r0, r0
    3bcc:	e9 f7       	brne	.-6      	; 0x3bc8 <lora_driver_sent_upload_message+0xf2>
    3bce:	11 97       	sbiw	r26, 0x01	; 1
    3bd0:	ae 1b       	sub	r26, r30
    3bd2:	bf 0b       	sbc	r27, r31
    3bd4:	aa 23       	and	r26, r26
    3bd6:	81 f0       	breq	.+32     	; 0x3bf8 <lora_driver_sent_upload_message+0x122>
    3bd8:	bb 27       	eor	r27, r27
    3bda:	11 97       	sbiw	r26, 0x01	; 1
    3bdc:	cd 01       	movw	r24, r26
    3bde:	0a f4       	brpl	.+2      	; 0x3be2 <lora_driver_sent_upload_message+0x10c>
    3be0:	01 96       	adiw	r24, 0x01	; 1
    3be2:	95 95       	asr	r25
    3be4:	87 95       	ror	r24
    3be6:	80 93 2b 09 	sts	0x092B, r24	; 0x80092b <_downlink_payload+0x1>
    3bea:	af 01       	movw	r20, r30
    3bec:	4f 5f       	subi	r20, 0xFF	; 255
    3bee:	5f 4f       	sbci	r21, 0xFF	; 255
    3bf0:	64 e1       	ldi	r22, 0x14	; 20
    3bf2:	8c e2       	ldi	r24, 0x2C	; 44
    3bf4:	99 e0       	ldi	r25, 0x09	; 9
    3bf6:	49 d1       	rcall	.+658    	; 0x3e8a <decode_hexadecimal_string_bytes>
    3bf8:	8e e0       	ldi	r24, 0x0E	; 14
    3bfa:	01 c0       	rjmp	.+2      	; 0x3bfe <lora_driver_sent_upload_message+0x128>
    3bfc:	84 e1       	ldi	r24, 0x14	; 20
    3bfe:	0f 90       	pop	r0
    3c00:	df 91       	pop	r29
    3c02:	cf 91       	pop	r28
    3c04:	08 95       	ret

00003c06 <lora_driver_set_adaptive_data_rate>:
    3c06:	81 30       	cpi	r24, 0x01	; 1
    3c08:	19 f0       	breq	.+6      	; 0x3c10 <lora_driver_set_adaptive_data_rate+0xa>
    3c0a:	6c e3       	ldi	r22, 0x3C	; 60
    3c0c:	76 e0       	ldi	r23, 0x06	; 6
    3c0e:	02 c0       	rjmp	.+4      	; 0x3c14 <lora_driver_set_adaptive_data_rate+0xe>
    3c10:	6c ef       	ldi	r22, 0xFC	; 252
    3c12:	76 e0       	ldi	r23, 0x06	; 6
    3c14:	80 e4       	ldi	r24, 0x40	; 64
    3c16:	96 e0       	ldi	r25, 0x06	; 6
    3c18:	7a ce       	rjmp	.-780    	; 0x390e <_upload_message_rc>
    3c1a:	08 95       	ret

00003c1c <lora_driver_configure_to_eu868>:
    3c1c:	2f 92       	push	r2
    3c1e:	3f 92       	push	r3
    3c20:	4f 92       	push	r4
    3c22:	5f 92       	push	r5
    3c24:	6f 92       	push	r6
    3c26:	7f 92       	push	r7
    3c28:	8f 92       	push	r8
    3c2a:	9f 92       	push	r9
    3c2c:	af 92       	push	r10
    3c2e:	bf 92       	push	r11
    3c30:	cf 92       	push	r12
    3c32:	df 92       	push	r13
    3c34:	ef 92       	push	r14
    3c36:	ff 92       	push	r15
    3c38:	0f 93       	push	r16
    3c3a:	1f 93       	push	r17
    3c3c:	cf 93       	push	r28
    3c3e:	df 93       	push	r29
    3c40:	cd b7       	in	r28, 0x3d	; 61
    3c42:	de b7       	in	r29, 0x3e	; 62
    3c44:	a0 97       	sbiw	r28, 0x20	; 32
    3c46:	0f b6       	in	r0, 0x3f	; 63
    3c48:	f8 94       	cli
    3c4a:	de bf       	out	0x3e, r29	; 62
    3c4c:	0f be       	out	0x3f, r0	; 63
    3c4e:	cd bf       	out	0x3d, r28	; 61
    3c50:	65 e8       	ldi	r22, 0x85	; 133
    3c52:	76 e0       	ldi	r23, 0x06	; 6
    3c54:	81 e9       	ldi	r24, 0x91	; 145
    3c56:	96 e0       	ldi	r25, 0x06	; 6
    3c58:	c7 dd       	rcall	.-1138   	; 0x37e8 <_upload_message>
    3c5a:	1e de       	rcall	.-964    	; 0x3898 <_reply2return_code>
    3c5c:	81 11       	cpse	r24, r1
    3c5e:	a3 c0       	rjmp	.+326    	; 0x3da6 <lora_driver_configure_to_eu868+0x18a>
    3c60:	80 e2       	ldi	r24, 0x20	; 32
    3c62:	e1 e2       	ldi	r30, 0x21	; 33
    3c64:	f2 e0       	ldi	r31, 0x02	; 2
    3c66:	de 01       	movw	r26, r28
    3c68:	11 96       	adiw	r26, 0x01	; 1
    3c6a:	01 90       	ld	r0, Z+
    3c6c:	0d 92       	st	X+, r0
    3c6e:	8a 95       	dec	r24
    3c70:	e1 f7       	brne	.-8      	; 0x3c6a <lora_driver_configure_to_eu868+0x4e>
    3c72:	9e 01       	movw	r18, r28
    3c74:	2f 5f       	subi	r18, 0xFF	; 255
    3c76:	3f 4f       	sbci	r19, 0xFF	; 255
    3c78:	69 01       	movw	r12, r18
    3c7a:	e1 2c       	mov	r14, r1
    3c7c:	f1 2c       	mov	r15, r1
    3c7e:	0f 2e       	mov	r0, r31
    3c80:	fd e9       	ldi	r31, 0x9D	; 157
    3c82:	af 2e       	mov	r10, r31
    3c84:	f6 e0       	ldi	r31, 0x06	; 6
    3c86:	bf 2e       	mov	r11, r31
    3c88:	f0 2d       	mov	r31, r0
    3c8a:	02 e8       	ldi	r16, 0x82	; 130
    3c8c:	19 e0       	ldi	r17, 0x09	; 9
    3c8e:	0f 2e       	mov	r0, r31
    3c90:	f6 eb       	ldi	r31, 0xB6	; 182
    3c92:	4f 2e       	mov	r4, r31
    3c94:	f6 e0       	ldi	r31, 0x06	; 6
    3c96:	5f 2e       	mov	r5, r31
    3c98:	f0 2d       	mov	r31, r0
    3c9a:	0f 2e       	mov	r0, r31
    3c9c:	fd ec       	ldi	r31, 0xCD	; 205
    3c9e:	8f 2e       	mov	r8, r31
    3ca0:	f6 e0       	ldi	r31, 0x06	; 6
    3ca2:	9f 2e       	mov	r9, r31
    3ca4:	f0 2d       	mov	r31, r0
    3ca6:	0f 2e       	mov	r0, r31
    3ca8:	f7 ee       	ldi	r31, 0xE7	; 231
    3caa:	6f 2e       	mov	r6, r31
    3cac:	f6 e0       	ldi	r31, 0x06	; 6
    3cae:	7f 2e       	mov	r7, r31
    3cb0:	f0 2d       	mov	r31, r0
    3cb2:	3e 2c       	mov	r3, r14
    3cb4:	2f 2c       	mov	r2, r15
    3cb6:	ff 92       	push	r15
    3cb8:	ef 92       	push	r14
    3cba:	bf 92       	push	r11
    3cbc:	af 92       	push	r10
    3cbe:	1f 93       	push	r17
    3cc0:	0f 93       	push	r16
    3cc2:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <sprintf>
    3cc6:	60 e0       	ldi	r22, 0x00	; 0
    3cc8:	70 e0       	ldi	r23, 0x00	; 0
    3cca:	c8 01       	movw	r24, r16
    3ccc:	8d dd       	rcall	.-1254   	; 0x37e8 <_upload_message>
    3cce:	e4 dd       	rcall	.-1080   	; 0x3898 <_reply2return_code>
    3cd0:	0f 90       	pop	r0
    3cd2:	0f 90       	pop	r0
    3cd4:	0f 90       	pop	r0
    3cd6:	0f 90       	pop	r0
    3cd8:	0f 90       	pop	r0
    3cda:	0f 90       	pop	r0
    3cdc:	81 11       	cpse	r24, r1
    3cde:	63 c0       	rjmp	.+198    	; 0x3da6 <lora_driver_configure_to_eu868+0x18a>
    3ce0:	32 e0       	ldi	r19, 0x02	; 2
    3ce2:	3e 15       	cp	r19, r14
    3ce4:	e8 f4       	brcc	.+58     	; 0x3d20 <lora_driver_configure_to_eu868+0x104>
    3ce6:	f6 01       	movw	r30, r12
    3ce8:	83 81       	ldd	r24, Z+3	; 0x03
    3cea:	8f 93       	push	r24
    3cec:	82 81       	ldd	r24, Z+2	; 0x02
    3cee:	8f 93       	push	r24
    3cf0:	81 81       	ldd	r24, Z+1	; 0x01
    3cf2:	8f 93       	push	r24
    3cf4:	80 81       	ld	r24, Z
    3cf6:	8f 93       	push	r24
    3cf8:	ff 92       	push	r15
    3cfa:	ef 92       	push	r14
    3cfc:	5f 92       	push	r5
    3cfe:	4f 92       	push	r4
    3d00:	1f 93       	push	r17
    3d02:	0f 93       	push	r16
    3d04:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <sprintf>
    3d08:	60 e0       	ldi	r22, 0x00	; 0
    3d0a:	70 e0       	ldi	r23, 0x00	; 0
    3d0c:	c8 01       	movw	r24, r16
    3d0e:	6c dd       	rcall	.-1320   	; 0x37e8 <_upload_message>
    3d10:	c3 dd       	rcall	.-1146   	; 0x3898 <_reply2return_code>
    3d12:	0f b6       	in	r0, 0x3f	; 63
    3d14:	f8 94       	cli
    3d16:	de bf       	out	0x3e, r29	; 62
    3d18:	0f be       	out	0x3f, r0	; 63
    3d1a:	cd bf       	out	0x3d, r28	; 61
    3d1c:	81 11       	cpse	r24, r1
    3d1e:	43 c0       	rjmp	.+134    	; 0x3da6 <lora_driver_configure_to_eu868+0x18a>
    3d20:	2f 92       	push	r2
    3d22:	3f 92       	push	r3
    3d24:	9f 92       	push	r9
    3d26:	8f 92       	push	r8
    3d28:	1f 93       	push	r17
    3d2a:	0f 93       	push	r16
    3d2c:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <sprintf>
    3d30:	60 e0       	ldi	r22, 0x00	; 0
    3d32:	70 e0       	ldi	r23, 0x00	; 0
    3d34:	c8 01       	movw	r24, r16
    3d36:	58 dd       	rcall	.-1360   	; 0x37e8 <_upload_message>
    3d38:	af dd       	rcall	.-1186   	; 0x3898 <_reply2return_code>
    3d3a:	0f 90       	pop	r0
    3d3c:	0f 90       	pop	r0
    3d3e:	0f 90       	pop	r0
    3d40:	0f 90       	pop	r0
    3d42:	0f 90       	pop	r0
    3d44:	0f 90       	pop	r0
    3d46:	81 11       	cpse	r24, r1
    3d48:	2e c0       	rjmp	.+92     	; 0x3da6 <lora_driver_configure_to_eu868+0x18a>
    3d4a:	2f 92       	push	r2
    3d4c:	3f 92       	push	r3
    3d4e:	7f 92       	push	r7
    3d50:	6f 92       	push	r6
    3d52:	1f 93       	push	r17
    3d54:	0f 93       	push	r16
    3d56:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <sprintf>
    3d5a:	60 e0       	ldi	r22, 0x00	; 0
    3d5c:	70 e0       	ldi	r23, 0x00	; 0
    3d5e:	c8 01       	movw	r24, r16
    3d60:	43 dd       	rcall	.-1402   	; 0x37e8 <_upload_message>
    3d62:	9a dd       	rcall	.-1228   	; 0x3898 <_reply2return_code>
    3d64:	0f 90       	pop	r0
    3d66:	0f 90       	pop	r0
    3d68:	0f 90       	pop	r0
    3d6a:	0f 90       	pop	r0
    3d6c:	0f 90       	pop	r0
    3d6e:	0f 90       	pop	r0
    3d70:	81 11       	cpse	r24, r1
    3d72:	19 c0       	rjmp	.+50     	; 0x3da6 <lora_driver_configure_to_eu868+0x18a>
    3d74:	3f ef       	ldi	r19, 0xFF	; 255
    3d76:	e3 1a       	sub	r14, r19
    3d78:	f3 0a       	sbc	r15, r19
    3d7a:	84 e0       	ldi	r24, 0x04	; 4
    3d7c:	c8 0e       	add	r12, r24
    3d7e:	d1 1c       	adc	r13, r1
    3d80:	98 e0       	ldi	r25, 0x08	; 8
    3d82:	e9 16       	cp	r14, r25
    3d84:	f1 04       	cpc	r15, r1
    3d86:	09 f0       	breq	.+2      	; 0x3d8a <lora_driver_configure_to_eu868+0x16e>
    3d88:	94 cf       	rjmp	.-216    	; 0x3cb2 <lora_driver_configure_to_eu868+0x96>
    3d8a:	60 e0       	ldi	r22, 0x00	; 0
    3d8c:	70 e0       	ldi	r23, 0x00	; 0
    3d8e:	8f ef       	ldi	r24, 0xFF	; 255
    3d90:	96 e0       	ldi	r25, 0x06	; 6
    3d92:	2a dd       	rcall	.-1452   	; 0x37e8 <_upload_message>
    3d94:	81 dd       	rcall	.-1278   	; 0x3898 <_reply2return_code>
    3d96:	81 11       	cpse	r24, r1
    3d98:	06 c0       	rjmp	.+12     	; 0x3da6 <lora_driver_configure_to_eu868+0x18a>
    3d9a:	60 e0       	ldi	r22, 0x00	; 0
    3d9c:	70 e0       	ldi	r23, 0x00	; 0
    3d9e:	80 e1       	ldi	r24, 0x10	; 16
    3da0:	97 e0       	ldi	r25, 0x07	; 7
    3da2:	22 dd       	rcall	.-1468   	; 0x37e8 <_upload_message>
    3da4:	79 dd       	rcall	.-1294   	; 0x3898 <_reply2return_code>
    3da6:	a0 96       	adiw	r28, 0x20	; 32
    3da8:	0f b6       	in	r0, 0x3f	; 63
    3daa:	f8 94       	cli
    3dac:	de bf       	out	0x3e, r29	; 62
    3dae:	0f be       	out	0x3f, r0	; 63
    3db0:	cd bf       	out	0x3d, r28	; 61
    3db2:	df 91       	pop	r29
    3db4:	cf 91       	pop	r28
    3db6:	1f 91       	pop	r17
    3db8:	0f 91       	pop	r16
    3dba:	ff 90       	pop	r15
    3dbc:	ef 90       	pop	r14
    3dbe:	df 90       	pop	r13
    3dc0:	cf 90       	pop	r12
    3dc2:	bf 90       	pop	r11
    3dc4:	af 90       	pop	r10
    3dc6:	9f 90       	pop	r9
    3dc8:	8f 90       	pop	r8
    3dca:	7f 90       	pop	r7
    3dcc:	6f 90       	pop	r6
    3dce:	5f 90       	pop	r5
    3dd0:	4f 90       	pop	r4
    3dd2:	3f 90       	pop	r3
    3dd4:	2f 90       	pop	r2
    3dd6:	08 95       	ret

00003dd8 <lora_driver_set_otaa_identity>:
    3dd8:	ef 92       	push	r14
    3dda:	ff 92       	push	r15
    3ddc:	0f 93       	push	r16
    3dde:	1f 93       	push	r17
    3de0:	cf 93       	push	r28
    3de2:	df 93       	push	r29
    3de4:	ec 01       	movw	r28, r24
    3de6:	8b 01       	movw	r16, r22
    3de8:	7a 01       	movw	r14, r20
    3dea:	81 e0       	ldi	r24, 0x01	; 1
    3dec:	0c df       	rcall	.-488    	; 0x3c06 <lora_driver_set_adaptive_data_rate>
    3dee:	81 11       	cpse	r24, r1
    3df0:	0d c0       	rjmp	.+26     	; 0x3e0c <lora_driver_set_otaa_identity+0x34>
    3df2:	ce 01       	movw	r24, r28
    3df4:	25 de       	rcall	.-950    	; 0x3a40 <lora_driver_set_application_identifier>
    3df6:	81 11       	cpse	r24, r1
    3df8:	09 c0       	rjmp	.+18     	; 0x3e0c <lora_driver_set_otaa_identity+0x34>
    3dfa:	c8 01       	movw	r24, r16
    3dfc:	32 de       	rcall	.-924    	; 0x3a62 <lora_driver_set_application_key>
    3dfe:	81 11       	cpse	r24, r1
    3e00:	05 c0       	rjmp	.+10     	; 0x3e0c <lora_driver_set_otaa_identity+0x34>
    3e02:	c7 01       	movw	r24, r14
    3e04:	0c de       	rcall	.-1000   	; 0x3a1e <lora_driver_set_device_identifier>
    3e06:	81 11       	cpse	r24, r1
    3e08:	01 c0       	rjmp	.+2      	; 0x3e0c <lora_driver_set_otaa_identity+0x34>
    3e0a:	3c de       	rcall	.-904    	; 0x3a84 <lora_driver_save_mac>
    3e0c:	df 91       	pop	r29
    3e0e:	cf 91       	pop	r28
    3e10:	1f 91       	pop	r17
    3e12:	0f 91       	pop	r16
    3e14:	ff 90       	pop	r15
    3e16:	ef 90       	pop	r14
    3e18:	08 95       	ret

00003e1a <lora_driver_map_return_code_to_text>:
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	fc 01       	movw	r30, r24
    3e1e:	ee 0f       	add	r30, r30
    3e20:	ff 1f       	adc	r31, r31
    3e22:	8e 0f       	add	r24, r30
    3e24:	9f 1f       	adc	r25, r31
    3e26:	fc 01       	movw	r30, r24
    3e28:	e4 52       	subi	r30, 0x24	; 36
    3e2a:	f8 4f       	sbci	r31, 0xF8	; 248
    3e2c:	81 81       	ldd	r24, Z+1	; 0x01
    3e2e:	92 81       	ldd	r25, Z+2	; 0x02
    3e30:	08 95       	ret

00003e32 <decode_port_no>:
    3e32:	dc 01       	movw	r26, r24
    3e34:	00 97       	sbiw	r24, 0x00	; 0
    3e36:	29 f1       	breq	.+74     	; 0x3e82 <decode_port_no+0x50>
    3e38:	fb 01       	movw	r30, r22
    3e3a:	20 81       	ld	r18, Z
    3e3c:	fc 01       	movw	r30, r24
    3e3e:	01 90       	ld	r0, Z+
    3e40:	00 20       	and	r0, r0
    3e42:	e9 f7       	brne	.-6      	; 0x3e3e <decode_port_no+0xc>
    3e44:	31 97       	sbiw	r30, 0x01	; 1
    3e46:	e8 1b       	sub	r30, r24
    3e48:	f9 0b       	sbc	r31, r25
    3e4a:	82 2f       	mov	r24, r18
    3e4c:	90 e0       	ldi	r25, 0x00	; 0
    3e4e:	e8 17       	cp	r30, r24
    3e50:	f9 07       	cpc	r31, r25
    3e52:	c8 f0       	brcs	.+50     	; 0x3e86 <decode_port_no+0x54>
    3e54:	80 e0       	ldi	r24, 0x00	; 0
    3e56:	08 c0       	rjmp	.+16     	; 0x3e68 <decode_port_no+0x36>
    3e58:	88 0f       	add	r24, r24
    3e5a:	38 2f       	mov	r19, r24
    3e5c:	33 0f       	add	r19, r19
    3e5e:	33 0f       	add	r19, r19
    3e60:	83 0f       	add	r24, r19
    3e62:	80 53       	subi	r24, 0x30	; 48
    3e64:	89 0f       	add	r24, r25
    3e66:	2f 5f       	subi	r18, 0xFF	; 255
    3e68:	fd 01       	movw	r30, r26
    3e6a:	e2 0f       	add	r30, r18
    3e6c:	f1 1d       	adc	r31, r1
    3e6e:	90 81       	ld	r25, Z
    3e70:	30 ed       	ldi	r19, 0xD0	; 208
    3e72:	39 0f       	add	r19, r25
    3e74:	3a 30       	cpi	r19, 0x0A	; 10
    3e76:	10 f4       	brcc	.+4      	; 0x3e7c <decode_port_no+0x4a>
    3e78:	91 11       	cpse	r25, r1
    3e7a:	ee cf       	rjmp	.-36     	; 0x3e58 <decode_port_no+0x26>
    3e7c:	fb 01       	movw	r30, r22
    3e7e:	20 83       	st	Z, r18
    3e80:	08 95       	ret
    3e82:	80 e0       	ldi	r24, 0x00	; 0
    3e84:	08 95       	ret
    3e86:	80 e0       	ldi	r24, 0x00	; 0
    3e88:	08 95       	ret

00003e8a <decode_hexadecimal_string_bytes>:
    3e8a:	0f 93       	push	r16
    3e8c:	1f 93       	push	r17
    3e8e:	cf 93       	push	r28
    3e90:	df 93       	push	r29
    3e92:	dc 01       	movw	r26, r24
    3e94:	ea 01       	movw	r28, r20
    3e96:	20 97       	sbiw	r28, 0x00	; 0
    3e98:	e1 f1       	breq	.+120    	; 0x3f12 <decode_hexadecimal_string_bytes+0x88>
    3e9a:	fa 01       	movw	r30, r20
    3e9c:	01 90       	ld	r0, Z+
    3e9e:	00 20       	and	r0, r0
    3ea0:	e9 f7       	brne	.-6      	; 0x3e9c <decode_hexadecimal_string_bytes+0x12>
    3ea2:	31 97       	sbiw	r30, 0x01	; 1
    3ea4:	e4 1b       	sub	r30, r20
    3ea6:	f5 0b       	sbc	r31, r21
    3ea8:	32 97       	sbiw	r30, 0x02	; 2
    3eaa:	10 f5       	brcc	.+68     	; 0x3ef0 <decode_hexadecimal_string_bytes+0x66>
    3eac:	32 c0       	rjmp	.+100    	; 0x3f12 <decode_hexadecimal_string_bytes+0x88>
    3eae:	8d 01       	movw	r16, r26
    3eb0:	04 0f       	add	r16, r20
    3eb2:	15 1f       	adc	r17, r21
    3eb4:	30 e0       	ldi	r19, 0x00	; 0
    3eb6:	ae 01       	movw	r20, r28
    3eb8:	42 0f       	add	r20, r18
    3eba:	53 1f       	adc	r21, r19
    3ebc:	fa 01       	movw	r30, r20
    3ebe:	90 81       	ld	r25, Z
    3ec0:	91 34       	cpi	r25, 0x41	; 65
    3ec2:	28 f0       	brcs	.+10     	; 0x3ece <decode_hexadecimal_string_bytes+0x44>
    3ec4:	97 53       	subi	r25, 0x37	; 55
    3ec6:	59 2f       	mov	r21, r25
    3ec8:	52 95       	swap	r21
    3eca:	50 7f       	andi	r21, 0xF0	; 240
    3ecc:	03 c0       	rjmp	.+6      	; 0x3ed4 <decode_hexadecimal_string_bytes+0x4a>
    3ece:	59 2f       	mov	r21, r25
    3ed0:	52 95       	swap	r21
    3ed2:	50 7f       	andi	r21, 0xF0	; 240
    3ed4:	2c 0f       	add	r18, r28
    3ed6:	3d 1f       	adc	r19, r29
    3ed8:	f9 01       	movw	r30, r18
    3eda:	91 81       	ldd	r25, Z+1	; 0x01
    3edc:	91 34       	cpi	r25, 0x41	; 65
    3ede:	10 f0       	brcs	.+4      	; 0x3ee4 <decode_hexadecimal_string_bytes+0x5a>
    3ee0:	97 53       	subi	r25, 0x37	; 55
    3ee2:	01 c0       	rjmp	.+2      	; 0x3ee6 <decode_hexadecimal_string_bytes+0x5c>
    3ee4:	90 53       	subi	r25, 0x30	; 48
    3ee6:	95 0f       	add	r25, r21
    3ee8:	f8 01       	movw	r30, r16
    3eea:	90 83       	st	Z, r25
    3eec:	8f 5f       	subi	r24, 0xFF	; 255
    3eee:	01 c0       	rjmp	.+2      	; 0x3ef2 <decode_hexadecimal_string_bytes+0x68>
    3ef0:	80 e0       	ldi	r24, 0x00	; 0
    3ef2:	28 2f       	mov	r18, r24
    3ef4:	22 0f       	add	r18, r18
    3ef6:	48 2f       	mov	r20, r24
    3ef8:	50 e0       	ldi	r21, 0x00	; 0
    3efa:	fe 01       	movw	r30, r28
    3efc:	01 90       	ld	r0, Z+
    3efe:	00 20       	and	r0, r0
    3f00:	e9 f7       	brne	.-6      	; 0x3efc <decode_hexadecimal_string_bytes+0x72>
    3f02:	31 97       	sbiw	r30, 0x01	; 1
    3f04:	ec 1b       	sub	r30, r28
    3f06:	fd 0b       	sbc	r31, r29
    3f08:	4e 17       	cp	r20, r30
    3f0a:	5f 07       	cpc	r21, r31
    3f0c:	10 f4       	brcc	.+4      	; 0x3f12 <decode_hexadecimal_string_bytes+0x88>
    3f0e:	86 13       	cpse	r24, r22
    3f10:	ce cf       	rjmp	.-100    	; 0x3eae <decode_hexadecimal_string_bytes+0x24>
    3f12:	df 91       	pop	r29
    3f14:	cf 91       	pop	r28
    3f16:	1f 91       	pop	r17
    3f18:	0f 91       	pop	r16
    3f1a:	08 95       	ret

00003f1c <reg_read_register>:
    3f1c:	fc 01       	movw	r30, r24
    3f1e:	80 81       	ld	r24, Z
    3f20:	08 95       	ret

00003f22 <reg_read_bit>:
    3f22:	fc 01       	movw	r30, r24
    3f24:	20 81       	ld	r18, Z
    3f26:	81 e0       	ldi	r24, 0x01	; 1
    3f28:	90 e0       	ldi	r25, 0x00	; 0
    3f2a:	02 c0       	rjmp	.+4      	; 0x3f30 <reg_read_bit+0xe>
    3f2c:	88 0f       	add	r24, r24
    3f2e:	99 1f       	adc	r25, r25
    3f30:	6a 95       	dec	r22
    3f32:	e2 f7       	brpl	.-8      	; 0x3f2c <reg_read_bit+0xa>
    3f34:	82 23       	and	r24, r18
    3f36:	08 95       	ret

00003f38 <reg_read_bits>:
    3f38:	fc 01       	movw	r30, r24
    3f3a:	80 81       	ld	r24, Z
    3f3c:	86 23       	and	r24, r22
    3f3e:	08 95       	ret

00003f40 <reg_set_register>:
    3f40:	fc 01       	movw	r30, r24
    3f42:	60 83       	st	Z, r22
    3f44:	08 95       	ret

00003f46 <reg_clear_register>:
    3f46:	fc 01       	movw	r30, r24
    3f48:	10 82       	st	Z, r1
    3f4a:	08 95       	ret

00003f4c <reg_set_bit>:
    3f4c:	fc 01       	movw	r30, r24
    3f4e:	40 81       	ld	r20, Z
    3f50:	21 e0       	ldi	r18, 0x01	; 1
    3f52:	30 e0       	ldi	r19, 0x00	; 0
    3f54:	02 c0       	rjmp	.+4      	; 0x3f5a <reg_set_bit+0xe>
    3f56:	22 0f       	add	r18, r18
    3f58:	33 1f       	adc	r19, r19
    3f5a:	6a 95       	dec	r22
    3f5c:	e2 f7       	brpl	.-8      	; 0x3f56 <reg_set_bit+0xa>
    3f5e:	24 2b       	or	r18, r20
    3f60:	20 83       	st	Z, r18
    3f62:	08 95       	ret

00003f64 <reg_set_bits>:
    3f64:	fc 01       	movw	r30, r24
    3f66:	20 81       	ld	r18, Z
    3f68:	62 2b       	or	r22, r18
    3f6a:	60 83       	st	Z, r22
    3f6c:	08 95       	ret

00003f6e <reg_toggle_bit>:
    3f6e:	fc 01       	movw	r30, r24
    3f70:	40 81       	ld	r20, Z
    3f72:	21 e0       	ldi	r18, 0x01	; 1
    3f74:	30 e0       	ldi	r19, 0x00	; 0
    3f76:	02 c0       	rjmp	.+4      	; 0x3f7c <reg_toggle_bit+0xe>
    3f78:	22 0f       	add	r18, r18
    3f7a:	33 1f       	adc	r19, r19
    3f7c:	6a 95       	dec	r22
    3f7e:	e2 f7       	brpl	.-8      	; 0x3f78 <reg_toggle_bit+0xa>
    3f80:	24 27       	eor	r18, r20
    3f82:	20 83       	st	Z, r18
    3f84:	08 95       	ret

00003f86 <reg_toggle_bits>:
    3f86:	fc 01       	movw	r30, r24
    3f88:	20 81       	ld	r18, Z
    3f8a:	62 27       	eor	r22, r18
    3f8c:	60 83       	st	Z, r22
    3f8e:	08 95       	ret

00003f90 <reg_clear_bit>:
    3f90:	fc 01       	movw	r30, r24
    3f92:	90 81       	ld	r25, Z
    3f94:	21 e0       	ldi	r18, 0x01	; 1
    3f96:	30 e0       	ldi	r19, 0x00	; 0
    3f98:	02 c0       	rjmp	.+4      	; 0x3f9e <reg_clear_bit+0xe>
    3f9a:	22 0f       	add	r18, r18
    3f9c:	33 1f       	adc	r19, r19
    3f9e:	6a 95       	dec	r22
    3fa0:	e2 f7       	brpl	.-8      	; 0x3f9a <reg_clear_bit+0xa>
    3fa2:	20 95       	com	r18
    3fa4:	29 23       	and	r18, r25
    3fa6:	20 83       	st	Z, r18
    3fa8:	08 95       	ret

00003faa <reg_clear_bits>:
    3faa:	fc 01       	movw	r30, r24
    3fac:	90 81       	ld	r25, Z
    3fae:	60 95       	com	r22
    3fb0:	69 23       	and	r22, r25
    3fb2:	60 83       	st	Z, r22
    3fb4:	08 95       	ret

00003fb6 <_serial_call_back>:
    3fb6:	80 91 df 09 	lds	r24, 0x09DF	; 0x8009df <crc_sum.1941>
    3fba:	86 0f       	add	r24, r22
    3fbc:	80 93 df 09 	sts	0x09DF, r24	; 0x8009df <crc_sum.1941>
    3fc0:	90 91 e2 09 	lds	r25, 0x09E2	; 0x8009e2 <_mh_state>
    3fc4:	91 30       	cpi	r25, 0x01	; 1
    3fc6:	79 f0       	breq	.+30     	; 0x3fe6 <_serial_call_back+0x30>
    3fc8:	28 f0       	brcs	.+10     	; 0x3fd4 <_serial_call_back+0x1e>
    3fca:	92 30       	cpi	r25, 0x02	; 2
    3fcc:	a9 f0       	breq	.+42     	; 0x3ff8 <_serial_call_back+0x42>
    3fce:	93 30       	cpi	r25, 0x03	; 3
    3fd0:	19 f1       	breq	.+70     	; 0x4018 <_serial_call_back+0x62>
    3fd2:	08 95       	ret
    3fd4:	6f 3f       	cpi	r22, 0xFF	; 255
    3fd6:	09 f0       	breq	.+2      	; 0x3fda <_serial_call_back+0x24>
    3fd8:	48 c0       	rjmp	.+144    	; 0x406a <_serial_call_back+0xb4>
    3fda:	10 92 df 09 	sts	0x09DF, r1	; 0x8009df <crc_sum.1941>
    3fde:	81 e0       	ldi	r24, 0x01	; 1
    3fe0:	80 93 e2 09 	sts	0x09E2, r24	; 0x8009e2 <_mh_state>
    3fe4:	08 95       	ret
    3fe6:	66 38       	cpi	r22, 0x86	; 134
    3fe8:	09 f0       	breq	.+2      	; 0x3fec <_serial_call_back+0x36>
    3fea:	3f c0       	rjmp	.+126    	; 0x406a <_serial_call_back+0xb4>
    3fec:	10 92 de 09 	sts	0x09DE, r1	; 0x8009de <inDex.1939>
    3ff0:	82 e0       	ldi	r24, 0x02	; 2
    3ff2:	80 93 e2 09 	sts	0x09E2, r24	; 0x8009e2 <_mh_state>
    3ff6:	08 95       	ret
    3ff8:	e0 91 de 09 	lds	r30, 0x09DE	; 0x8009de <inDex.1939>
    3ffc:	81 e0       	ldi	r24, 0x01	; 1
    3ffe:	8e 0f       	add	r24, r30
    4000:	80 93 de 09 	sts	0x09DE, r24	; 0x8009de <inDex.1939>
    4004:	f0 e0       	ldi	r31, 0x00	; 0
    4006:	e4 52       	subi	r30, 0x24	; 36
    4008:	f6 4f       	sbci	r31, 0xF6	; 246
    400a:	60 83       	st	Z, r22
    400c:	82 30       	cpi	r24, 0x02	; 2
    400e:	69 f5       	brne	.+90     	; 0x406a <_serial_call_back+0xb4>
    4010:	83 e0       	ldi	r24, 0x03	; 3
    4012:	80 93 e2 09 	sts	0x09E2, r24	; 0x8009e2 <_mh_state>
    4016:	08 95       	ret
    4018:	90 91 de 09 	lds	r25, 0x09DE	; 0x8009de <inDex.1939>
    401c:	21 e0       	ldi	r18, 0x01	; 1
    401e:	29 0f       	add	r18, r25
    4020:	20 93 de 09 	sts	0x09DE, r18	; 0x8009de <inDex.1939>
    4024:	96 30       	cpi	r25, 0x06	; 6
    4026:	09 f5       	brne	.+66     	; 0x406a <_serial_call_back+0xb4>
    4028:	81 11       	cpse	r24, r1
    402a:	0e c0       	rjmp	.+28     	; 0x4048 <_serial_call_back+0x92>
    402c:	ec ed       	ldi	r30, 0xDC	; 220
    402e:	f9 e0       	ldi	r31, 0x09	; 9
    4030:	80 81       	ld	r24, Z
    4032:	90 e0       	ldi	r25, 0x00	; 0
    4034:	98 2f       	mov	r25, r24
    4036:	88 27       	eor	r24, r24
    4038:	21 81       	ldd	r18, Z+1	; 0x01
    403a:	82 0f       	add	r24, r18
    403c:	91 1d       	adc	r25, r1
    403e:	90 93 e4 09 	sts	0x09E4, r25	; 0x8009e4 <_ppm+0x1>
    4042:	80 93 e3 09 	sts	0x09E3, r24	; 0x8009e3 <_ppm>
    4046:	04 c0       	rjmp	.+8      	; 0x4050 <_serial_call_back+0x9a>
    4048:	10 92 e4 09 	sts	0x09E4, r1	; 0x8009e4 <_ppm+0x1>
    404c:	10 92 e3 09 	sts	0x09E3, r1	; 0x8009e3 <_ppm>
    4050:	10 92 e2 09 	sts	0x09E2, r1	; 0x8009e2 <_mh_state>
    4054:	e0 91 e0 09 	lds	r30, 0x09E0	; 0x8009e0 <_app_call_back>
    4058:	f0 91 e1 09 	lds	r31, 0x09E1	; 0x8009e1 <_app_call_back+0x1>
    405c:	30 97       	sbiw	r30, 0x00	; 0
    405e:	29 f0       	breq	.+10     	; 0x406a <_serial_call_back+0xb4>
    4060:	80 91 e3 09 	lds	r24, 0x09E3	; 0x8009e3 <_ppm>
    4064:	90 91 e4 09 	lds	r25, 0x09E4	; 0x8009e4 <_ppm+0x1>
    4068:	19 95       	eicall
    406a:	08 95       	ret

0000406c <mh_z19_create>:
    406c:	8f 92       	push	r8
    406e:	9f 92       	push	r9
    4070:	af 92       	push	r10
    4072:	cf 92       	push	r12
    4074:	ef 92       	push	r14
    4076:	0f 93       	push	r16
    4078:	cf 93       	push	r28
    407a:	df 93       	push	r29
    407c:	eb 01       	movw	r28, r22
    407e:	0f 2e       	mov	r0, r31
    4080:	fb ed       	ldi	r31, 0xDB	; 219
    4082:	8f 2e       	mov	r8, r31
    4084:	ff e1       	ldi	r31, 0x1F	; 31
    4086:	9f 2e       	mov	r9, r31
    4088:	f0 2d       	mov	r31, r0
    408a:	68 94       	set
    408c:	aa 24       	eor	r10, r10
    408e:	a4 f8       	bld	r10, 4
    4090:	68 94       	set
    4092:	cc 24       	eor	r12, r12
    4094:	c4 f8       	bld	r12, 4
    4096:	e1 2c       	mov	r14, r1
    4098:	00 e0       	ldi	r16, 0x00	; 0
    409a:	23 e0       	ldi	r18, 0x03	; 3
    409c:	40 e8       	ldi	r20, 0x80	; 128
    409e:	55 e2       	ldi	r21, 0x25	; 37
    40a0:	60 e0       	ldi	r22, 0x00	; 0
    40a2:	70 e0       	ldi	r23, 0x00	; 0
    40a4:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <serial_new_instance>
    40a8:	90 93 e6 09 	sts	0x09E6, r25	; 0x8009e6 <_serial+0x1>
    40ac:	80 93 e5 09 	sts	0x09E5, r24	; 0x8009e5 <_serial>
    40b0:	d0 93 e1 09 	sts	0x09E1, r29	; 0x8009e1 <_app_call_back+0x1>
    40b4:	c0 93 e0 09 	sts	0x09E0, r28	; 0x8009e0 <_app_call_back>
    40b8:	df 91       	pop	r29
    40ba:	cf 91       	pop	r28
    40bc:	0f 91       	pop	r16
    40be:	ef 90       	pop	r14
    40c0:	cf 90       	pop	r12
    40c2:	af 90       	pop	r10
    40c4:	9f 90       	pop	r9
    40c6:	8f 90       	pop	r8
    40c8:	08 95       	ret

000040ca <mh_z19_take_meassuring>:
    40ca:	cf 93       	push	r28
    40cc:	df 93       	push	r29
    40ce:	cd b7       	in	r28, 0x3d	; 61
    40d0:	de b7       	in	r29, 0x3e	; 62
    40d2:	29 97       	sbiw	r28, 0x09	; 9
    40d4:	0f b6       	in	r0, 0x3f	; 63
    40d6:	f8 94       	cli
    40d8:	de bf       	out	0x3e, r29	; 62
    40da:	0f be       	out	0x3f, r0	; 63
    40dc:	cd bf       	out	0x3d, r28	; 61
    40de:	89 e0       	ldi	r24, 0x09	; 9
    40e0:	e1 e4       	ldi	r30, 0x41	; 65
    40e2:	f2 e0       	ldi	r31, 0x02	; 2
    40e4:	9e 01       	movw	r18, r28
    40e6:	2f 5f       	subi	r18, 0xFF	; 255
    40e8:	3f 4f       	sbci	r19, 0xFF	; 255
    40ea:	d9 01       	movw	r26, r18
    40ec:	01 90       	ld	r0, Z+
    40ee:	0d 92       	st	X+, r0
    40f0:	8a 95       	dec	r24
    40f2:	e1 f7       	brne	.-8      	; 0x40ec <mh_z19_take_meassuring+0x22>
    40f4:	10 92 e4 09 	sts	0x09E4, r1	; 0x8009e4 <_ppm+0x1>
    40f8:	10 92 e3 09 	sts	0x09E3, r1	; 0x8009e3 <_ppm>
    40fc:	80 91 e5 09 	lds	r24, 0x09E5	; 0x8009e5 <_serial>
    4100:	90 91 e6 09 	lds	r25, 0x09E6	; 0x8009e6 <_serial+0x1>
    4104:	00 97       	sbiw	r24, 0x00	; 0
    4106:	39 f0       	breq	.+14     	; 0x4116 <mh_z19_take_meassuring+0x4c>
    4108:	42 2f       	mov	r20, r18
    410a:	53 2f       	mov	r21, r19
    410c:	69 e0       	ldi	r22, 0x09	; 9
    410e:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <serial_send_bytes>
    4112:	80 e0       	ldi	r24, 0x00	; 0
    4114:	01 c0       	rjmp	.+2      	; 0x4118 <mh_z19_take_meassuring+0x4e>
    4116:	82 e0       	ldi	r24, 0x02	; 2
    4118:	29 96       	adiw	r28, 0x09	; 9
    411a:	0f b6       	in	r0, 0x3f	; 63
    411c:	f8 94       	cli
    411e:	de bf       	out	0x3e, r29	; 62
    4120:	0f be       	out	0x3f, r0	; 63
    4122:	cd bf       	out	0x3d, r28	; 61
    4124:	df 91       	pop	r29
    4126:	cf 91       	pop	r28
    4128:	08 95       	ret

0000412a <rcServoSet>:
    412a:	65 36       	cpi	r22, 0x65	; 101
    412c:	0c f0       	brlt	.+2      	; 0x4130 <rcServoSet+0x6>
    412e:	64 e6       	ldi	r22, 0x64	; 100
    4130:	6c 39       	cpi	r22, 0x9C	; 156
    4132:	0c f4       	brge	.+2      	; 0x4136 <rcServoSet+0xc>
    4134:	6c e9       	ldi	r22, 0x9C	; 156
    4136:	96 ef       	ldi	r25, 0xF6	; 246
    4138:	69 02       	muls	r22, r25
    413a:	b0 01       	movw	r22, r0
    413c:	11 24       	eor	r1, r1
    413e:	68 54       	subi	r22, 0x48	; 72
    4140:	74 4f       	sbci	r23, 0xF4	; 244
    4142:	81 11       	cpse	r24, r1
    4144:	05 c0       	rjmp	.+10     	; 0x4150 <rcServoSet+0x26>
    4146:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    414a:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    414e:	08 95       	ret
    4150:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    4154:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    4158:	08 95       	ret

0000415a <rcServoCreate>:
    415a:	ea e0       	ldi	r30, 0x0A	; 10
    415c:	f1 e0       	ldi	r31, 0x01	; 1
    415e:	80 81       	ld	r24, Z
    4160:	88 61       	ori	r24, 0x18	; 24
    4162:	80 83       	st	Z, r24
    4164:	8f e3       	ldi	r24, 0x3F	; 63
    4166:	9c e9       	ldi	r25, 0x9C	; 156
    4168:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
    416c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
    4170:	60 e0       	ldi	r22, 0x00	; 0
    4172:	80 e0       	ldi	r24, 0x00	; 0
    4174:	da df       	rcall	.-76     	; 0x412a <rcServoSet>
    4176:	60 e0       	ldi	r22, 0x00	; 0
    4178:	81 e0       	ldi	r24, 0x01	; 1
    417a:	d7 df       	rcall	.-82     	; 0x412a <rcServoSet>
    417c:	e0 e2       	ldi	r30, 0x20	; 32
    417e:	f1 e0       	ldi	r31, 0x01	; 1
    4180:	80 81       	ld	r24, Z
    4182:	82 6a       	ori	r24, 0xA2	; 162
    4184:	80 83       	st	Z, r24
    4186:	e1 e2       	ldi	r30, 0x21	; 33
    4188:	f1 e0       	ldi	r31, 0x01	; 1
    418a:	80 81       	ld	r24, Z
    418c:	8a 61       	ori	r24, 0x1A	; 26
    418e:	80 83       	st	Z, r24
    4190:	08 95       	ret

00004192 <_callBack>:
    4192:	e0 91 ef 09 	lds	r30, 0x09EF	; 0x8009ef <_callBackFunction>
    4196:	f0 91 f0 09 	lds	r31, 0x09F0	; 0x8009f0 <_callBackFunction+0x1>
    419a:	30 97       	sbiw	r30, 0x00	; 0
    419c:	09 f0       	breq	.+2      	; 0x41a0 <_callBack+0xe>
    419e:	19 95       	eicall
    41a0:	08 95       	ret

000041a2 <_tsl2591TwiCallback>:
    41a2:	64 50       	subi	r22, 0x04	; 4
    41a4:	62 30       	cpi	r22, 0x02	; 2
    41a6:	08 f0       	brcs	.+2      	; 0x41aa <_tsl2591TwiCallback+0x8>
    41a8:	3b c0       	rjmp	.+118    	; 0x4220 <_tsl2591TwiCallback+0x7e>
    41aa:	20 91 ee 09 	lds	r18, 0x09EE	; 0x8009ee <_nextState>
    41ae:	22 30       	cpi	r18, 0x02	; 2
    41b0:	79 f0       	breq	.+30     	; 0x41d0 <_tsl2591TwiCallback+0x2e>
    41b2:	18 f4       	brcc	.+6      	; 0x41ba <_tsl2591TwiCallback+0x18>
    41b4:	21 30       	cpi	r18, 0x01	; 1
    41b6:	31 f0       	breq	.+12     	; 0x41c4 <_tsl2591TwiCallback+0x22>
    41b8:	30 c0       	rjmp	.+96     	; 0x421a <_tsl2591TwiCallback+0x78>
    41ba:	23 30       	cpi	r18, 0x03	; 3
    41bc:	81 f0       	breq	.+32     	; 0x41de <_tsl2591TwiCallback+0x3c>
    41be:	24 30       	cpi	r18, 0x04	; 4
    41c0:	a1 f0       	breq	.+40     	; 0x41ea <_tsl2591TwiCallback+0x48>
    41c2:	2b c0       	rjmp	.+86     	; 0x421a <_tsl2591TwiCallback+0x78>
    41c4:	22 e0       	ldi	r18, 0x02	; 2
    41c6:	20 93 ee 09 	sts	0x09EE, r18	; 0x8009ee <_nextState>
    41ca:	61 e0       	ldi	r22, 0x01	; 1
    41cc:	0a c2       	rjmp	.+1044   	; 0x45e2 <twiReceive>
    41ce:	08 95       	ret
    41d0:	fa 01       	movw	r30, r20
    41d2:	80 81       	ld	r24, Z
    41d4:	80 93 eb 09 	sts	0x09EB, r24	; 0x8009eb <_deviceId>
    41d8:	82 e0       	ldi	r24, 0x02	; 2
    41da:	db cf       	rjmp	.-74     	; 0x4192 <_callBack>
    41dc:	08 95       	ret
    41de:	24 e0       	ldi	r18, 0x04	; 4
    41e0:	20 93 ee 09 	sts	0x09EE, r18	; 0x8009ee <_nextState>
    41e4:	64 e0       	ldi	r22, 0x04	; 4
    41e6:	fd c1       	rjmp	.+1018   	; 0x45e2 <twiReceive>
    41e8:	08 95       	ret
    41ea:	fa 01       	movw	r30, r20
    41ec:	81 81       	ldd	r24, Z+1	; 0x01
    41ee:	90 e0       	ldi	r25, 0x00	; 0
    41f0:	98 2f       	mov	r25, r24
    41f2:	88 27       	eor	r24, r24
    41f4:	20 81       	ld	r18, Z
    41f6:	82 2b       	or	r24, r18
    41f8:	90 93 ea 09 	sts	0x09EA, r25	; 0x8009ea <_fullSpectrumRaw+0x1>
    41fc:	80 93 e9 09 	sts	0x09E9, r24	; 0x8009e9 <_fullSpectrumRaw>
    4200:	83 81       	ldd	r24, Z+3	; 0x03
    4202:	90 e0       	ldi	r25, 0x00	; 0
    4204:	98 2f       	mov	r25, r24
    4206:	88 27       	eor	r24, r24
    4208:	22 81       	ldd	r18, Z+2	; 0x02
    420a:	82 2b       	or	r24, r18
    420c:	90 93 e8 09 	sts	0x09E8, r25	; 0x8009e8 <_infraredRaw+0x1>
    4210:	80 93 e7 09 	sts	0x09E7, r24	; 0x8009e7 <_infraredRaw>
    4214:	81 e0       	ldi	r24, 0x01	; 1
    4216:	bd cf       	rjmp	.-134    	; 0x4192 <_callBack>
    4218:	08 95       	ret
    421a:	80 e0       	ldi	r24, 0x00	; 0
    421c:	ba cf       	rjmp	.-140    	; 0x4192 <_callBack>
    421e:	08 95       	ret
    4220:	10 92 ee 09 	sts	0x09EE, r1	; 0x8009ee <_nextState>
    4224:	86 e0       	ldi	r24, 0x06	; 6
    4226:	b5 cf       	rjmp	.-150    	; 0x4192 <_callBack>
    4228:	08 95       	ret

0000422a <_twiTransmit>:
    422a:	20 91 f1 09 	lds	r18, 0x09F1	; 0x8009f1 <_twiHandler>
    422e:	30 91 f2 09 	lds	r19, 0x09F2	; 0x8009f2 <_twiHandler+0x1>
    4232:	21 15       	cp	r18, r1
    4234:	31 05       	cpc	r19, r1
    4236:	41 f0       	breq	.+16     	; 0x4248 <_twiTransmit+0x1e>
    4238:	46 2f       	mov	r20, r22
    423a:	bc 01       	movw	r22, r24
    423c:	c9 01       	movw	r24, r18
    423e:	85 d1       	rcall	.+778    	; 0x454a <twiTransmit>
    4240:	82 30       	cpi	r24, 0x02	; 2
    4242:	21 f0       	breq	.+8      	; 0x424c <_twiTransmit+0x22>
    4244:	80 e0       	ldi	r24, 0x00	; 0
    4246:	08 95       	ret
    4248:	87 e0       	ldi	r24, 0x07	; 7
    424a:	08 95       	ret
    424c:	85 e0       	ldi	r24, 0x05	; 5
    424e:	08 95       	ret

00004250 <tsl2591Create>:
    4250:	0f 93       	push	r16
    4252:	1f 93       	push	r17
    4254:	90 93 f0 09 	sts	0x09F0, r25	; 0x8009f0 <_callBackFunction+0x1>
    4258:	80 93 ef 09 	sts	0x09EF, r24	; 0x8009ef <_callBackFunction>
    425c:	01 ed       	ldi	r16, 0xD1	; 209
    425e:	10 e2       	ldi	r17, 0x20	; 32
    4260:	20 e0       	ldi	r18, 0x00	; 0
    4262:	34 e2       	ldi	r19, 0x24	; 36
    4264:	44 ef       	ldi	r20, 0xF4	; 244
    4266:	50 e0       	ldi	r21, 0x00	; 0
    4268:	60 e0       	ldi	r22, 0x00	; 0
    426a:	89 e2       	ldi	r24, 0x29	; 41
    426c:	1d d1       	rcall	.+570    	; 0x44a8 <twiCreate>
    426e:	90 93 f2 09 	sts	0x09F2, r25	; 0x8009f2 <_twiHandler+0x1>
    4272:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <_twiHandler>
    4276:	89 2b       	or	r24, r25
    4278:	11 f0       	breq	.+4      	; 0x427e <tsl2591Create+0x2e>
    427a:	80 e0       	ldi	r24, 0x00	; 0
    427c:	01 c0       	rjmp	.+2      	; 0x4280 <tsl2591Create+0x30>
    427e:	88 e0       	ldi	r24, 0x08	; 8
    4280:	1f 91       	pop	r17
    4282:	0f 91       	pop	r16
    4284:	08 95       	ret

00004286 <tsl2591Enable>:
    4286:	cf 93       	push	r28
    4288:	df 93       	push	r29
    428a:	1f 92       	push	r1
    428c:	1f 92       	push	r1
    428e:	cd b7       	in	r28, 0x3d	; 61
    4290:	de b7       	in	r29, 0x3e	; 62
    4292:	80 ea       	ldi	r24, 0xA0	; 160
    4294:	89 83       	std	Y+1, r24	; 0x01
    4296:	83 e0       	ldi	r24, 0x03	; 3
    4298:	8a 83       	std	Y+2, r24	; 0x02
    429a:	10 92 ee 09 	sts	0x09EE, r1	; 0x8009ee <_nextState>
    429e:	62 e0       	ldi	r22, 0x02	; 2
    42a0:	ce 01       	movw	r24, r28
    42a2:	01 96       	adiw	r24, 0x01	; 1
    42a4:	c2 df       	rcall	.-124    	; 0x422a <_twiTransmit>
    42a6:	0f 90       	pop	r0
    42a8:	0f 90       	pop	r0
    42aa:	df 91       	pop	r29
    42ac:	cf 91       	pop	r28
    42ae:	08 95       	ret

000042b0 <tsl2591FetchData>:
    42b0:	cf 93       	push	r28
    42b2:	df 93       	push	r29
    42b4:	1f 92       	push	r1
    42b6:	cd b7       	in	r28, 0x3d	; 61
    42b8:	de b7       	in	r29, 0x3e	; 62
    42ba:	84 eb       	ldi	r24, 0xB4	; 180
    42bc:	89 83       	std	Y+1, r24	; 0x01
    42be:	83 e0       	ldi	r24, 0x03	; 3
    42c0:	80 93 ee 09 	sts	0x09EE, r24	; 0x8009ee <_nextState>
    42c4:	61 e0       	ldi	r22, 0x01	; 1
    42c6:	ce 01       	movw	r24, r28
    42c8:	01 96       	adiw	r24, 0x01	; 1
    42ca:	af df       	rcall	.-162    	; 0x422a <_twiTransmit>
    42cc:	0f 90       	pop	r0
    42ce:	df 91       	pop	r29
    42d0:	cf 91       	pop	r28
    42d2:	08 95       	ret

000042d4 <tsl2591GetLux>:
    42d4:	2f 92       	push	r2
    42d6:	3f 92       	push	r3
    42d8:	4f 92       	push	r4
    42da:	5f 92       	push	r5
    42dc:	6f 92       	push	r6
    42de:	7f 92       	push	r7
    42e0:	8f 92       	push	r8
    42e2:	9f 92       	push	r9
    42e4:	af 92       	push	r10
    42e6:	bf 92       	push	r11
    42e8:	cf 92       	push	r12
    42ea:	df 92       	push	r13
    42ec:	ef 92       	push	r14
    42ee:	ff 92       	push	r15
    42f0:	0f 93       	push	r16
    42f2:	1f 93       	push	r17
    42f4:	cf 93       	push	r28
    42f6:	df 93       	push	r29
    42f8:	c0 91 e7 09 	lds	r28, 0x09E7	; 0x8009e7 <_infraredRaw>
    42fc:	d0 91 e8 09 	lds	r29, 0x09E8	; 0x8009e8 <_infraredRaw+0x1>
    4300:	cf 3f       	cpi	r28, 0xFF	; 255
    4302:	2f ef       	ldi	r18, 0xFF	; 255
    4304:	d2 07       	cpc	r29, r18
    4306:	41 f0       	breq	.+16     	; 0x4318 <tsl2591GetLux+0x44>
    4308:	60 91 e9 09 	lds	r22, 0x09E9	; 0x8009e9 <_fullSpectrumRaw>
    430c:	70 91 ea 09 	lds	r23, 0x09EA	; 0x8009ea <_fullSpectrumRaw+0x1>
    4310:	6f 3f       	cpi	r22, 0xFF	; 255
    4312:	ef ef       	ldi	r30, 0xFF	; 255
    4314:	7e 07       	cpc	r23, r30
    4316:	59 f4       	brne	.+22     	; 0x432e <tsl2591GetLux+0x5a>
    4318:	4f ef       	ldi	r20, 0xFF	; 255
    431a:	5f ef       	ldi	r21, 0xFF	; 255
    431c:	6f e7       	ldi	r22, 0x7F	; 127
    431e:	7f e7       	ldi	r23, 0x7F	; 127
    4320:	fc 01       	movw	r30, r24
    4322:	40 83       	st	Z, r20
    4324:	51 83       	std	Z+1, r21	; 0x01
    4326:	62 83       	std	Z+2, r22	; 0x02
    4328:	73 83       	std	Z+3, r23	; 0x03
    432a:	83 e0       	ldi	r24, 0x03	; 3
    432c:	99 c0       	rjmp	.+306    	; 0x4460 <tsl2591GetLux+0x18c>
    432e:	1c 01       	movw	r2, r24
    4330:	80 e0       	ldi	r24, 0x00	; 0
    4332:	90 e0       	ldi	r25, 0x00	; 0
    4334:	18 d3       	rcall	.+1584   	; 0x4966 <__floatunsisf>
    4336:	2b 01       	movw	r4, r22
    4338:	3c 01       	movw	r6, r24
    433a:	be 01       	movw	r22, r28
    433c:	80 e0       	ldi	r24, 0x00	; 0
    433e:	90 e0       	ldi	r25, 0x00	; 0
    4340:	12 d3       	rcall	.+1572   	; 0x4966 <__floatunsisf>
    4342:	4b 01       	movw	r8, r22
    4344:	5c 01       	movw	r10, r24
    4346:	80 91 ec 09 	lds	r24, 0x09EC	; 0x8009ec <_currentIntegrationTime>
    434a:	90 e0       	ldi	r25, 0x00	; 0
    434c:	01 96       	adiw	r24, 0x01	; 1
    434e:	24 e6       	ldi	r18, 0x64	; 100
    4350:	28 9f       	mul	r18, r24
    4352:	b0 01       	movw	r22, r0
    4354:	29 9f       	mul	r18, r25
    4356:	70 0d       	add	r23, r0
    4358:	11 24       	eor	r1, r1
    435a:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <_currentGain>
    435e:	80 32       	cpi	r24, 0x20	; 32
    4360:	69 f0       	breq	.+26     	; 0x437c <tsl2591GetLux+0xa8>
    4362:	80 33       	cpi	r24, 0x30	; 48
    4364:	a1 f0       	breq	.+40     	; 0x438e <tsl2591GetLux+0xba>
    4366:	80 31       	cpi	r24, 0x10	; 16
    4368:	e1 f4       	brne	.+56     	; 0x43a2 <tsl2591GetLux+0xce>
    436a:	0f 2e       	mov	r0, r31
    436c:	c1 2c       	mov	r12, r1
    436e:	d1 2c       	mov	r13, r1
    4370:	f8 ec       	ldi	r31, 0xC8	; 200
    4372:	ef 2e       	mov	r14, r31
    4374:	f1 e4       	ldi	r31, 0x41	; 65
    4376:	ff 2e       	mov	r15, r31
    4378:	f0 2d       	mov	r31, r0
    437a:	1b c0       	rjmp	.+54     	; 0x43b2 <tsl2591GetLux+0xde>
    437c:	0f 2e       	mov	r0, r31
    437e:	c1 2c       	mov	r12, r1
    4380:	d1 2c       	mov	r13, r1
    4382:	f6 ed       	ldi	r31, 0xD6	; 214
    4384:	ef 2e       	mov	r14, r31
    4386:	f3 e4       	ldi	r31, 0x43	; 67
    4388:	ff 2e       	mov	r15, r31
    438a:	f0 2d       	mov	r31, r0
    438c:	12 c0       	rjmp	.+36     	; 0x43b2 <tsl2591GetLux+0xde>
    438e:	0f 2e       	mov	r0, r31
    4390:	c1 2c       	mov	r12, r1
    4392:	f0 e5       	ldi	r31, 0x50	; 80
    4394:	df 2e       	mov	r13, r31
    4396:	fa e1       	ldi	r31, 0x1A	; 26
    4398:	ef 2e       	mov	r14, r31
    439a:	f6 e4       	ldi	r31, 0x46	; 70
    439c:	ff 2e       	mov	r15, r31
    439e:	f0 2d       	mov	r31, r0
    43a0:	08 c0       	rjmp	.+16     	; 0x43b2 <tsl2591GetLux+0xde>
    43a2:	0f 2e       	mov	r0, r31
    43a4:	c1 2c       	mov	r12, r1
    43a6:	d1 2c       	mov	r13, r1
    43a8:	f0 e8       	ldi	r31, 0x80	; 128
    43aa:	ef 2e       	mov	r14, r31
    43ac:	ff e3       	ldi	r31, 0x3F	; 63
    43ae:	ff 2e       	mov	r15, r31
    43b0:	f0 2d       	mov	r31, r0
    43b2:	07 2e       	mov	r0, r23
    43b4:	00 0c       	add	r0, r0
    43b6:	88 0b       	sbc	r24, r24
    43b8:	99 0b       	sbc	r25, r25
    43ba:	d7 d2       	rcall	.+1454   	; 0x496a <__floatsisf>
    43bc:	a7 01       	movw	r20, r14
    43be:	96 01       	movw	r18, r12
    43c0:	3b d3       	rcall	.+1654   	; 0x4a38 <__mulsf3>
    43c2:	20 e0       	ldi	r18, 0x00	; 0
    43c4:	30 e0       	ldi	r19, 0x00	; 0
    43c6:	4c ec       	ldi	r20, 0xCC	; 204
    43c8:	53 e4       	ldi	r21, 0x43	; 67
    43ca:	62 d2       	rcall	.+1220   	; 0x4890 <__divsf3>
    43cc:	6b 01       	movw	r12, r22
    43ce:	7c 01       	movw	r14, r24
    43d0:	25 e8       	ldi	r18, 0x85	; 133
    43d2:	3b ee       	ldi	r19, 0xEB	; 235
    43d4:	41 ed       	ldi	r20, 0xD1	; 209
    43d6:	5f e3       	ldi	r21, 0x3F	; 63
    43d8:	c5 01       	movw	r24, r10
    43da:	b4 01       	movw	r22, r8
    43dc:	2d d3       	rcall	.+1626   	; 0x4a38 <__mulsf3>
    43de:	9b 01       	movw	r18, r22
    43e0:	ac 01       	movw	r20, r24
    43e2:	c3 01       	movw	r24, r6
    43e4:	b2 01       	movw	r22, r4
    43e6:	ed d1       	rcall	.+986    	; 0x47c2 <__subsf3>
    43e8:	a7 01       	movw	r20, r14
    43ea:	96 01       	movw	r18, r12
    43ec:	51 d2       	rcall	.+1186   	; 0x4890 <__divsf3>
    43ee:	16 2f       	mov	r17, r22
    43f0:	d7 2f       	mov	r29, r23
    43f2:	c8 2f       	mov	r28, r24
    43f4:	09 2f       	mov	r16, r25
    43f6:	2d e3       	ldi	r18, 0x3D	; 61
    43f8:	3a e0       	ldi	r19, 0x0A	; 10
    43fa:	47 e1       	ldi	r20, 0x17	; 23
    43fc:	5f e3       	ldi	r21, 0x3F	; 63
    43fe:	c3 01       	movw	r24, r6
    4400:	b2 01       	movw	r22, r4
    4402:	1a d3       	rcall	.+1588   	; 0x4a38 <__mulsf3>
    4404:	2b 01       	movw	r4, r22
    4406:	3c 01       	movw	r6, r24
    4408:	26 ef       	ldi	r18, 0xF6	; 246
    440a:	38 e2       	ldi	r19, 0x28	; 40
    440c:	4c e5       	ldi	r20, 0x5C	; 92
    440e:	5f e3       	ldi	r21, 0x3F	; 63
    4410:	c5 01       	movw	r24, r10
    4412:	b4 01       	movw	r22, r8
    4414:	11 d3       	rcall	.+1570   	; 0x4a38 <__mulsf3>
    4416:	9b 01       	movw	r18, r22
    4418:	ac 01       	movw	r20, r24
    441a:	c3 01       	movw	r24, r6
    441c:	b2 01       	movw	r22, r4
    441e:	d1 d1       	rcall	.+930    	; 0x47c2 <__subsf3>
    4420:	a7 01       	movw	r20, r14
    4422:	96 01       	movw	r18, r12
    4424:	35 d2       	rcall	.+1130   	; 0x4890 <__divsf3>
    4426:	c6 2e       	mov	r12, r22
    4428:	d7 2e       	mov	r13, r23
    442a:	e8 2e       	mov	r14, r24
    442c:	f9 2e       	mov	r15, r25
    442e:	26 2f       	mov	r18, r22
    4430:	37 2f       	mov	r19, r23
    4432:	48 2f       	mov	r20, r24
    4434:	59 2f       	mov	r21, r25
    4436:	61 2f       	mov	r22, r17
    4438:	7d 2f       	mov	r23, r29
    443a:	8c 2f       	mov	r24, r28
    443c:	90 2f       	mov	r25, r16
    443e:	f8 d2       	rcall	.+1520   	; 0x4a30 <__gesf2>
    4440:	18 16       	cp	r1, r24
    4442:	24 f0       	brlt	.+8      	; 0x444c <tsl2591GetLux+0x178>
    4444:	1c 2d       	mov	r17, r12
    4446:	dd 2d       	mov	r29, r13
    4448:	ce 2d       	mov	r28, r14
    444a:	0f 2d       	mov	r16, r15
    444c:	41 2f       	mov	r20, r17
    444e:	5d 2f       	mov	r21, r29
    4450:	6c 2f       	mov	r22, r28
    4452:	70 2f       	mov	r23, r16
    4454:	f1 01       	movw	r30, r2
    4456:	40 83       	st	Z, r20
    4458:	51 83       	std	Z+1, r21	; 0x01
    445a:	62 83       	std	Z+2, r22	; 0x02
    445c:	73 83       	std	Z+3, r23	; 0x03
    445e:	80 e0       	ldi	r24, 0x00	; 0
    4460:	df 91       	pop	r29
    4462:	cf 91       	pop	r28
    4464:	1f 91       	pop	r17
    4466:	0f 91       	pop	r16
    4468:	ff 90       	pop	r15
    446a:	ef 90       	pop	r14
    446c:	df 90       	pop	r13
    446e:	cf 90       	pop	r12
    4470:	bf 90       	pop	r11
    4472:	af 90       	pop	r10
    4474:	9f 90       	pop	r9
    4476:	8f 90       	pop	r8
    4478:	7f 90       	pop	r7
    447a:	6f 90       	pop	r6
    447c:	5f 90       	pop	r5
    447e:	4f 90       	pop	r4
    4480:	3f 90       	pop	r3
    4482:	2f 90       	pop	r2
    4484:	08 95       	ret

00004486 <_initTwiInterface>:
    4486:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <_twiIsInitiated>
    448a:	81 11       	cpse	r24, r1
    448c:	0c c0       	rjmp	.+24     	; 0x44a6 <_initTwiInterface+0x20>
    448e:	8c e0       	ldi	r24, 0x0C	; 12
    4490:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4494:	8f ef       	ldi	r24, 0xFF	; 255
    4496:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    449a:	84 e0       	ldi	r24, 0x04	; 4
    449c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    44a0:	81 e0       	ldi	r24, 0x01	; 1
    44a2:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <_twiIsInitiated>
    44a6:	08 95       	ret

000044a8 <twiCreate>:
    44a8:	af 92       	push	r10
    44aa:	bf 92       	push	r11
    44ac:	cf 92       	push	r12
    44ae:	df 92       	push	r13
    44b0:	ef 92       	push	r14
    44b2:	ff 92       	push	r15
    44b4:	0f 93       	push	r16
    44b6:	1f 93       	push	r17
    44b8:	cf 93       	push	r28
    44ba:	df 93       	push	r29
    44bc:	a8 2e       	mov	r10, r24
    44be:	b6 2e       	mov	r11, r22
    44c0:	69 01       	movw	r12, r18
    44c2:	7a 01       	movw	r14, r20
    44c4:	84 e0       	ldi	r24, 0x04	; 4
    44c6:	90 e0       	ldi	r25, 0x00	; 0
    44c8:	85 d3       	rcall	.+1802   	; 0x4bd4 <malloc>
    44ca:	ec 01       	movw	r28, r24
    44cc:	89 2b       	or	r24, r25
    44ce:	61 f1       	breq	.+88     	; 0x4528 <twiCreate+0x80>
    44d0:	a8 82       	st	Y, r10
    44d2:	81 e0       	ldi	r24, 0x01	; 1
    44d4:	b8 12       	cpse	r11, r24
    44d6:	12 c0       	rjmp	.+36     	; 0x44fc <twiCreate+0x54>
    44d8:	c7 01       	movw	r24, r14
    44da:	b6 01       	movw	r22, r12
    44dc:	20 ea       	ldi	r18, 0xA0	; 160
    44de:	36 e8       	ldi	r19, 0x86	; 134
    44e0:	41 e0       	ldi	r20, 0x01	; 1
    44e2:	50 e0       	ldi	r21, 0x00	; 0
    44e4:	33 d3       	rcall	.+1638   	; 0x4b4c <__udivmodsi4>
    44e6:	da 01       	movw	r26, r20
    44e8:	c9 01       	movw	r24, r18
    44ea:	40 97       	sbiw	r24, 0x10	; 16
    44ec:	a1 09       	sbc	r26, r1
    44ee:	b1 09       	sbc	r27, r1
    44f0:	b6 95       	lsr	r27
    44f2:	a7 95       	ror	r26
    44f4:	97 95       	ror	r25
    44f6:	87 95       	ror	r24
    44f8:	89 83       	std	Y+1, r24	; 0x01
    44fa:	11 c0       	rjmp	.+34     	; 0x451e <twiCreate+0x76>
    44fc:	c7 01       	movw	r24, r14
    44fe:	b6 01       	movw	r22, r12
    4500:	20 e8       	ldi	r18, 0x80	; 128
    4502:	3a e1       	ldi	r19, 0x1A	; 26
    4504:	46 e0       	ldi	r20, 0x06	; 6
    4506:	50 e0       	ldi	r21, 0x00	; 0
    4508:	21 d3       	rcall	.+1602   	; 0x4b4c <__udivmodsi4>
    450a:	da 01       	movw	r26, r20
    450c:	c9 01       	movw	r24, r18
    450e:	40 97       	sbiw	r24, 0x10	; 16
    4510:	a1 09       	sbc	r26, r1
    4512:	b1 09       	sbc	r27, r1
    4514:	b6 95       	lsr	r27
    4516:	a7 95       	ror	r26
    4518:	97 95       	ror	r25
    451a:	87 95       	ror	r24
    451c:	89 83       	std	Y+1, r24	; 0x01
    451e:	1b 83       	std	Y+3, r17	; 0x03
    4520:	0a 83       	std	Y+2, r16	; 0x02
    4522:	8c 2f       	mov	r24, r28
    4524:	9d 2f       	mov	r25, r29
    4526:	02 c0       	rjmp	.+4      	; 0x452c <twiCreate+0x84>
    4528:	80 e0       	ldi	r24, 0x00	; 0
    452a:	90 e0       	ldi	r25, 0x00	; 0
    452c:	df 91       	pop	r29
    452e:	cf 91       	pop	r28
    4530:	1f 91       	pop	r17
    4532:	0f 91       	pop	r16
    4534:	ff 90       	pop	r15
    4536:	ef 90       	pop	r14
    4538:	df 90       	pop	r13
    453a:	cf 90       	pop	r12
    453c:	bf 90       	pop	r11
    453e:	af 90       	pop	r10
    4540:	08 95       	ret

00004542 <twiIsBusy>:
    4542:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4546:	81 70       	andi	r24, 0x01	; 1
    4548:	08 95       	ret

0000454a <twiTransmit>:
    454a:	ff 92       	push	r15
    454c:	0f 93       	push	r16
    454e:	1f 93       	push	r17
    4550:	cf 93       	push	r28
    4552:	df 93       	push	r29
    4554:	00 97       	sbiw	r24, 0x00	; 0
    4556:	d1 f1       	breq	.+116    	; 0x45cc <twiTransmit+0x82>
    4558:	4a 30       	cpi	r20, 0x0A	; 10
    455a:	d0 f5       	brcc	.+116    	; 0x45d0 <twiTransmit+0x86>
    455c:	f4 2e       	mov	r15, r20
    455e:	8b 01       	movw	r16, r22
    4560:	ec 01       	movw	r28, r24
    4562:	ef df       	rcall	.-34     	; 0x4542 <twiIsBusy>
    4564:	81 11       	cpse	r24, r1
    4566:	36 c0       	rjmp	.+108    	; 0x45d4 <twiTransmit+0x8a>
    4568:	80 91 f4 09 	lds	r24, 0x09F4	; 0x8009f4 <_twiCurrentHandler>
    456c:	90 91 f5 09 	lds	r25, 0x09F5	; 0x8009f5 <_twiCurrentHandler+0x1>
    4570:	c8 17       	cp	r28, r24
    4572:	d9 07       	cpc	r29, r25
    4574:	41 f0       	breq	.+16     	; 0x4586 <twiTransmit+0x3c>
    4576:	87 df       	rcall	.-242    	; 0x4486 <_initTwiInterface>
    4578:	89 81       	ldd	r24, Y+1	; 0x01
    457a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    457e:	d0 93 f5 09 	sts	0x09F5, r29	; 0x8009f5 <_twiCurrentHandler+0x1>
    4582:	c0 93 f4 09 	sts	0x09F4, r28	; 0x8009f4 <_twiCurrentHandler>
    4586:	81 e0       	ldi	r24, 0x01	; 1
    4588:	8f 0d       	add	r24, r15
    458a:	80 93 f6 09 	sts	0x09F6, r24	; 0x8009f6 <_twiMessageLen>
    458e:	88 81       	ld	r24, Y
    4590:	88 0f       	add	r24, r24
    4592:	80 93 f7 09 	sts	0x09F7, r24	; 0x8009f7 <_twiMessageBuffer>
    4596:	ff 20       	and	r15, r15
    4598:	89 f0       	breq	.+34     	; 0x45bc <twiTransmit+0x72>
    459a:	f8 01       	movw	r30, r16
    459c:	a8 ef       	ldi	r26, 0xF8	; 248
    459e:	b9 e0       	ldi	r27, 0x09	; 9
    45a0:	4f ef       	ldi	r20, 0xFF	; 255
    45a2:	4f 0d       	add	r20, r15
    45a4:	64 2f       	mov	r22, r20
    45a6:	70 e0       	ldi	r23, 0x00	; 0
    45a8:	cb 01       	movw	r24, r22
    45aa:	01 96       	adiw	r24, 0x01	; 1
    45ac:	b8 01       	movw	r22, r16
    45ae:	68 0f       	add	r22, r24
    45b0:	79 1f       	adc	r23, r25
    45b2:	81 91       	ld	r24, Z+
    45b4:	8d 93       	st	X+, r24
    45b6:	e6 17       	cp	r30, r22
    45b8:	f7 07       	cpc	r31, r23
    45ba:	d9 f7       	brne	.-10     	; 0x45b2 <twiTransmit+0x68>
    45bc:	88 ef       	ldi	r24, 0xF8	; 248
    45be:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    45c2:	85 ea       	ldi	r24, 0xA5	; 165
    45c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    45c8:	84 e0       	ldi	r24, 0x04	; 4
    45ca:	05 c0       	rjmp	.+10     	; 0x45d6 <twiTransmit+0x8c>
    45cc:	86 e0       	ldi	r24, 0x06	; 6
    45ce:	03 c0       	rjmp	.+6      	; 0x45d6 <twiTransmit+0x8c>
    45d0:	87 e0       	ldi	r24, 0x07	; 7
    45d2:	01 c0       	rjmp	.+2      	; 0x45d6 <twiTransmit+0x8c>
    45d4:	82 e0       	ldi	r24, 0x02	; 2
    45d6:	df 91       	pop	r29
    45d8:	cf 91       	pop	r28
    45da:	1f 91       	pop	r17
    45dc:	0f 91       	pop	r16
    45de:	ff 90       	pop	r15
    45e0:	08 95       	ret

000045e2 <twiReceive>:
    45e2:	1f 93       	push	r17
    45e4:	cf 93       	push	r28
    45e6:	df 93       	push	r29
    45e8:	00 97       	sbiw	r24, 0x00	; 0
    45ea:	29 f1       	breq	.+74     	; 0x4636 <twiReceive+0x54>
    45ec:	6b 30       	cpi	r22, 0x0B	; 11
    45ee:	28 f5       	brcc	.+74     	; 0x463a <twiReceive+0x58>
    45f0:	16 2f       	mov	r17, r22
    45f2:	ec 01       	movw	r28, r24
    45f4:	a6 df       	rcall	.-180    	; 0x4542 <twiIsBusy>
    45f6:	81 11       	cpse	r24, r1
    45f8:	22 c0       	rjmp	.+68     	; 0x463e <twiReceive+0x5c>
    45fa:	80 91 f4 09 	lds	r24, 0x09F4	; 0x8009f4 <_twiCurrentHandler>
    45fe:	90 91 f5 09 	lds	r25, 0x09F5	; 0x8009f5 <_twiCurrentHandler+0x1>
    4602:	c8 17       	cp	r28, r24
    4604:	d9 07       	cpc	r29, r25
    4606:	41 f0       	breq	.+16     	; 0x4618 <twiReceive+0x36>
    4608:	3e df       	rcall	.-388    	; 0x4486 <_initTwiInterface>
    460a:	89 81       	ldd	r24, Y+1	; 0x01
    460c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4610:	d0 93 f5 09 	sts	0x09F5, r29	; 0x8009f5 <_twiCurrentHandler+0x1>
    4614:	c0 93 f4 09 	sts	0x09F4, r28	; 0x8009f4 <_twiCurrentHandler>
    4618:	10 93 f6 09 	sts	0x09F6, r17	; 0x8009f6 <_twiMessageLen>
    461c:	88 81       	ld	r24, Y
    461e:	88 0f       	add	r24, r24
    4620:	81 60       	ori	r24, 0x01	; 1
    4622:	80 93 f7 09 	sts	0x09F7, r24	; 0x8009f7 <_twiMessageBuffer>
    4626:	88 ef       	ldi	r24, 0xF8	; 248
    4628:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    462c:	85 ea       	ldi	r24, 0xA5	; 165
    462e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4632:	85 e0       	ldi	r24, 0x05	; 5
    4634:	05 c0       	rjmp	.+10     	; 0x4640 <twiReceive+0x5e>
    4636:	86 e0       	ldi	r24, 0x06	; 6
    4638:	03 c0       	rjmp	.+6      	; 0x4640 <twiReceive+0x5e>
    463a:	87 e0       	ldi	r24, 0x07	; 7
    463c:	01 c0       	rjmp	.+2      	; 0x4640 <twiReceive+0x5e>
    463e:	82 e0       	ldi	r24, 0x02	; 2
    4640:	df 91       	pop	r29
    4642:	cf 91       	pop	r28
    4644:	1f 91       	pop	r17
    4646:	08 95       	ret

00004648 <__vector_39>:
    4648:	1f 92       	push	r1
    464a:	0f 92       	push	r0
    464c:	0f b6       	in	r0, 0x3f	; 63
    464e:	0f 92       	push	r0
    4650:	11 24       	eor	r1, r1
    4652:	0b b6       	in	r0, 0x3b	; 59
    4654:	0f 92       	push	r0
    4656:	2f 93       	push	r18
    4658:	3f 93       	push	r19
    465a:	4f 93       	push	r20
    465c:	5f 93       	push	r21
    465e:	6f 93       	push	r22
    4660:	7f 93       	push	r23
    4662:	8f 93       	push	r24
    4664:	9f 93       	push	r25
    4666:	af 93       	push	r26
    4668:	bf 93       	push	r27
    466a:	ef 93       	push	r30
    466c:	ff 93       	push	r31
    466e:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4672:	8e 2f       	mov	r24, r30
    4674:	90 e0       	ldi	r25, 0x00	; 0
    4676:	fc 01       	movw	r30, r24
    4678:	38 97       	sbiw	r30, 0x08	; 8
    467a:	e1 35       	cpi	r30, 0x51	; 81
    467c:	f1 05       	cpc	r31, r1
    467e:	08 f0       	brcs	.+2      	; 0x4682 <__vector_39+0x3a>
    4680:	75 c0       	rjmp	.+234    	; 0x476c <__vector_39+0x124>
    4682:	88 27       	eor	r24, r24
    4684:	e4 58       	subi	r30, 0x84	; 132
    4686:	ff 4f       	sbci	r31, 0xFF	; 255
    4688:	8f 4f       	sbci	r24, 0xFF	; 255
    468a:	82 c2       	rjmp	.+1284   	; 0x4b90 <__tablejump2__>
    468c:	10 92 f3 09 	sts	0x09F3, r1	; 0x8009f3 <_index.1885>
    4690:	e0 91 f3 09 	lds	r30, 0x09F3	; 0x8009f3 <_index.1885>
    4694:	80 91 f6 09 	lds	r24, 0x09F6	; 0x8009f6 <_twiMessageLen>
    4698:	e8 17       	cp	r30, r24
    469a:	70 f4       	brcc	.+28     	; 0x46b8 <__vector_39+0x70>
    469c:	81 e0       	ldi	r24, 0x01	; 1
    469e:	8e 0f       	add	r24, r30
    46a0:	80 93 f3 09 	sts	0x09F3, r24	; 0x8009f3 <_index.1885>
    46a4:	f0 e0       	ldi	r31, 0x00	; 0
    46a6:	e9 50       	subi	r30, 0x09	; 9
    46a8:	f6 4f       	sbci	r31, 0xF6	; 246
    46aa:	80 81       	ld	r24, Z
    46ac:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    46b0:	85 e8       	ldi	r24, 0x85	; 133
    46b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    46b6:	72 c0       	rjmp	.+228    	; 0x479c <__vector_39+0x154>
    46b8:	84 e9       	ldi	r24, 0x94	; 148
    46ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    46be:	80 91 f4 09 	lds	r24, 0x09F4	; 0x8009f4 <_twiCurrentHandler>
    46c2:	90 91 f5 09 	lds	r25, 0x09F5	; 0x8009f5 <_twiCurrentHandler+0x1>
    46c6:	dc 01       	movw	r26, r24
    46c8:	12 96       	adiw	r26, 0x02	; 2
    46ca:	ed 91       	ld	r30, X+
    46cc:	fc 91       	ld	r31, X
    46ce:	13 97       	sbiw	r26, 0x03	; 3
    46d0:	30 97       	sbiw	r30, 0x00	; 0
    46d2:	09 f4       	brne	.+2      	; 0x46d6 <__vector_39+0x8e>
    46d4:	63 c0       	rjmp	.+198    	; 0x479c <__vector_39+0x154>
    46d6:	20 e0       	ldi	r18, 0x00	; 0
    46d8:	40 e0       	ldi	r20, 0x00	; 0
    46da:	50 e0       	ldi	r21, 0x00	; 0
    46dc:	64 e0       	ldi	r22, 0x04	; 4
    46de:	19 95       	eicall
    46e0:	5d c0       	rjmp	.+186    	; 0x479c <__vector_39+0x154>
    46e2:	e0 91 f3 09 	lds	r30, 0x09F3	; 0x8009f3 <_index.1885>
    46e6:	81 e0       	ldi	r24, 0x01	; 1
    46e8:	8e 0f       	add	r24, r30
    46ea:	80 93 f3 09 	sts	0x09F3, r24	; 0x8009f3 <_index.1885>
    46ee:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    46f2:	f0 e0       	ldi	r31, 0x00	; 0
    46f4:	e9 50       	subi	r30, 0x09	; 9
    46f6:	f6 4f       	sbci	r31, 0xF6	; 246
    46f8:	80 83       	st	Z, r24
    46fa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    46fe:	80 34       	cpi	r24, 0x40	; 64
    4700:	11 f4       	brne	.+4      	; 0x4706 <__vector_39+0xbe>
    4702:	10 92 f3 09 	sts	0x09F3, r1	; 0x8009f3 <_index.1885>
    4706:	20 91 f3 09 	lds	r18, 0x09F3	; 0x8009f3 <_index.1885>
    470a:	30 e0       	ldi	r19, 0x00	; 0
    470c:	80 91 f6 09 	lds	r24, 0x09F6	; 0x8009f6 <_twiMessageLen>
    4710:	90 e0       	ldi	r25, 0x00	; 0
    4712:	01 97       	sbiw	r24, 0x01	; 1
    4714:	28 17       	cp	r18, r24
    4716:	39 07       	cpc	r19, r25
    4718:	24 f4       	brge	.+8      	; 0x4722 <__vector_39+0xda>
    471a:	85 ec       	ldi	r24, 0xC5	; 197
    471c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4720:	3d c0       	rjmp	.+122    	; 0x479c <__vector_39+0x154>
    4722:	85 e8       	ldi	r24, 0x85	; 133
    4724:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4728:	39 c0       	rjmp	.+114    	; 0x479c <__vector_39+0x154>
    472a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    472e:	e0 91 f3 09 	lds	r30, 0x09F3	; 0x8009f3 <_index.1885>
    4732:	f0 e0       	ldi	r31, 0x00	; 0
    4734:	e9 50       	subi	r30, 0x09	; 9
    4736:	f6 4f       	sbci	r31, 0xF6	; 246
    4738:	80 83       	st	Z, r24
    473a:	84 e9       	ldi	r24, 0x94	; 148
    473c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4740:	80 91 f4 09 	lds	r24, 0x09F4	; 0x8009f4 <_twiCurrentHandler>
    4744:	90 91 f5 09 	lds	r25, 0x09F5	; 0x8009f5 <_twiCurrentHandler+0x1>
    4748:	dc 01       	movw	r26, r24
    474a:	12 96       	adiw	r26, 0x02	; 2
    474c:	ed 91       	ld	r30, X+
    474e:	fc 91       	ld	r31, X
    4750:	13 97       	sbiw	r26, 0x03	; 3
    4752:	30 97       	sbiw	r30, 0x00	; 0
    4754:	19 f1       	breq	.+70     	; 0x479c <__vector_39+0x154>
    4756:	20 91 f6 09 	lds	r18, 0x09F6	; 0x8009f6 <_twiMessageLen>
    475a:	47 ef       	ldi	r20, 0xF7	; 247
    475c:	59 e0       	ldi	r21, 0x09	; 9
    475e:	65 e0       	ldi	r22, 0x05	; 5
    4760:	19 95       	eicall
    4762:	1c c0       	rjmp	.+56     	; 0x479c <__vector_39+0x154>
    4764:	85 ea       	ldi	r24, 0xA5	; 165
    4766:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    476a:	18 c0       	rjmp	.+48     	; 0x479c <__vector_39+0x154>
    476c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4770:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    4774:	84 e0       	ldi	r24, 0x04	; 4
    4776:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    477a:	80 91 f4 09 	lds	r24, 0x09F4	; 0x8009f4 <_twiCurrentHandler>
    477e:	90 91 f5 09 	lds	r25, 0x09F5	; 0x8009f5 <_twiCurrentHandler+0x1>
    4782:	dc 01       	movw	r26, r24
    4784:	12 96       	adiw	r26, 0x02	; 2
    4786:	ed 91       	ld	r30, X+
    4788:	fc 91       	ld	r31, X
    478a:	13 97       	sbiw	r26, 0x03	; 3
    478c:	30 97       	sbiw	r30, 0x00	; 0
    478e:	31 f0       	breq	.+12     	; 0x479c <__vector_39+0x154>
    4790:	20 e0       	ldi	r18, 0x00	; 0
    4792:	40 e0       	ldi	r20, 0x00	; 0
    4794:	50 e0       	ldi	r21, 0x00	; 0
    4796:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    479a:	19 95       	eicall
    479c:	ff 91       	pop	r31
    479e:	ef 91       	pop	r30
    47a0:	bf 91       	pop	r27
    47a2:	af 91       	pop	r26
    47a4:	9f 91       	pop	r25
    47a6:	8f 91       	pop	r24
    47a8:	7f 91       	pop	r23
    47aa:	6f 91       	pop	r22
    47ac:	5f 91       	pop	r21
    47ae:	4f 91       	pop	r20
    47b0:	3f 91       	pop	r19
    47b2:	2f 91       	pop	r18
    47b4:	0f 90       	pop	r0
    47b6:	0b be       	out	0x3b, r0	; 59
    47b8:	0f 90       	pop	r0
    47ba:	0f be       	out	0x3f, r0	; 63
    47bc:	0f 90       	pop	r0
    47be:	1f 90       	pop	r1
    47c0:	18 95       	reti

000047c2 <__subsf3>:
    47c2:	50 58       	subi	r21, 0x80	; 128

000047c4 <__addsf3>:
    47c4:	bb 27       	eor	r27, r27
    47c6:	aa 27       	eor	r26, r26
    47c8:	0e d0       	rcall	.+28     	; 0x47e6 <__addsf3x>
    47ca:	21 c1       	rjmp	.+578    	; 0x4a0e <__fp_round>
    47cc:	12 d1       	rcall	.+548    	; 0x49f2 <__fp_pscA>
    47ce:	30 f0       	brcs	.+12     	; 0x47dc <__addsf3+0x18>
    47d0:	17 d1       	rcall	.+558    	; 0x4a00 <__fp_pscB>
    47d2:	20 f0       	brcs	.+8      	; 0x47dc <__addsf3+0x18>
    47d4:	31 f4       	brne	.+12     	; 0x47e2 <__addsf3+0x1e>
    47d6:	9f 3f       	cpi	r25, 0xFF	; 255
    47d8:	11 f4       	brne	.+4      	; 0x47de <__addsf3+0x1a>
    47da:	1e f4       	brtc	.+6      	; 0x47e2 <__addsf3+0x1e>
    47dc:	07 c1       	rjmp	.+526    	; 0x49ec <__fp_nan>
    47de:	0e f4       	brtc	.+2      	; 0x47e2 <__addsf3+0x1e>
    47e0:	e0 95       	com	r30
    47e2:	e7 fb       	bst	r30, 7
    47e4:	fd c0       	rjmp	.+506    	; 0x49e0 <__fp_inf>

000047e6 <__addsf3x>:
    47e6:	e9 2f       	mov	r30, r25
    47e8:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__fp_split3>
    47ec:	78 f3       	brcs	.-34     	; 0x47cc <__addsf3+0x8>
    47ee:	ba 17       	cp	r27, r26
    47f0:	62 07       	cpc	r22, r18
    47f2:	73 07       	cpc	r23, r19
    47f4:	84 07       	cpc	r24, r20
    47f6:	95 07       	cpc	r25, r21
    47f8:	20 f0       	brcs	.+8      	; 0x4802 <__addsf3x+0x1c>
    47fa:	79 f4       	brne	.+30     	; 0x481a <__addsf3x+0x34>
    47fc:	a6 f5       	brtc	.+104    	; 0x4866 <__addsf3x+0x80>
    47fe:	0c 94 c7 15 	jmp	0x2b8e	; 0x2b8e <__fp_zero>
    4802:	0e f4       	brtc	.+2      	; 0x4806 <__addsf3x+0x20>
    4804:	e0 95       	com	r30
    4806:	0b 2e       	mov	r0, r27
    4808:	ba 2f       	mov	r27, r26
    480a:	a0 2d       	mov	r26, r0
    480c:	0b 01       	movw	r0, r22
    480e:	b9 01       	movw	r22, r18
    4810:	90 01       	movw	r18, r0
    4812:	0c 01       	movw	r0, r24
    4814:	ca 01       	movw	r24, r20
    4816:	a0 01       	movw	r20, r0
    4818:	11 24       	eor	r1, r1
    481a:	ff 27       	eor	r31, r31
    481c:	59 1b       	sub	r21, r25
    481e:	99 f0       	breq	.+38     	; 0x4846 <__addsf3x+0x60>
    4820:	59 3f       	cpi	r21, 0xF9	; 249
    4822:	50 f4       	brcc	.+20     	; 0x4838 <__addsf3x+0x52>
    4824:	50 3e       	cpi	r21, 0xE0	; 224
    4826:	68 f1       	brcs	.+90     	; 0x4882 <__addsf3x+0x9c>
    4828:	1a 16       	cp	r1, r26
    482a:	f0 40       	sbci	r31, 0x00	; 0
    482c:	a2 2f       	mov	r26, r18
    482e:	23 2f       	mov	r18, r19
    4830:	34 2f       	mov	r19, r20
    4832:	44 27       	eor	r20, r20
    4834:	58 5f       	subi	r21, 0xF8	; 248
    4836:	f3 cf       	rjmp	.-26     	; 0x481e <__addsf3x+0x38>
    4838:	46 95       	lsr	r20
    483a:	37 95       	ror	r19
    483c:	27 95       	ror	r18
    483e:	a7 95       	ror	r26
    4840:	f0 40       	sbci	r31, 0x00	; 0
    4842:	53 95       	inc	r21
    4844:	c9 f7       	brne	.-14     	; 0x4838 <__addsf3x+0x52>
    4846:	7e f4       	brtc	.+30     	; 0x4866 <__addsf3x+0x80>
    4848:	1f 16       	cp	r1, r31
    484a:	ba 0b       	sbc	r27, r26
    484c:	62 0b       	sbc	r22, r18
    484e:	73 0b       	sbc	r23, r19
    4850:	84 0b       	sbc	r24, r20
    4852:	ba f0       	brmi	.+46     	; 0x4882 <__addsf3x+0x9c>
    4854:	91 50       	subi	r25, 0x01	; 1
    4856:	a1 f0       	breq	.+40     	; 0x4880 <__addsf3x+0x9a>
    4858:	ff 0f       	add	r31, r31
    485a:	bb 1f       	adc	r27, r27
    485c:	66 1f       	adc	r22, r22
    485e:	77 1f       	adc	r23, r23
    4860:	88 1f       	adc	r24, r24
    4862:	c2 f7       	brpl	.-16     	; 0x4854 <__addsf3x+0x6e>
    4864:	0e c0       	rjmp	.+28     	; 0x4882 <__addsf3x+0x9c>
    4866:	ba 0f       	add	r27, r26
    4868:	62 1f       	adc	r22, r18
    486a:	73 1f       	adc	r23, r19
    486c:	84 1f       	adc	r24, r20
    486e:	48 f4       	brcc	.+18     	; 0x4882 <__addsf3x+0x9c>
    4870:	87 95       	ror	r24
    4872:	77 95       	ror	r23
    4874:	67 95       	ror	r22
    4876:	b7 95       	ror	r27
    4878:	f7 95       	ror	r31
    487a:	9e 3f       	cpi	r25, 0xFE	; 254
    487c:	08 f0       	brcs	.+2      	; 0x4880 <__addsf3x+0x9a>
    487e:	b1 cf       	rjmp	.-158    	; 0x47e2 <__addsf3+0x1e>
    4880:	93 95       	inc	r25
    4882:	88 0f       	add	r24, r24
    4884:	08 f0       	brcs	.+2      	; 0x4888 <__addsf3x+0xa2>
    4886:	99 27       	eor	r25, r25
    4888:	ee 0f       	add	r30, r30
    488a:	97 95       	ror	r25
    488c:	87 95       	ror	r24
    488e:	08 95       	ret

00004890 <__divsf3>:
    4890:	0d d0       	rcall	.+26     	; 0x48ac <__divsf3x>
    4892:	bd c0       	rjmp	.+378    	; 0x4a0e <__fp_round>
    4894:	b5 d0       	rcall	.+362    	; 0x4a00 <__fp_pscB>
    4896:	48 f0       	brcs	.+18     	; 0x48aa <__divsf3+0x1a>
    4898:	ac d0       	rcall	.+344    	; 0x49f2 <__fp_pscA>
    489a:	38 f0       	brcs	.+14     	; 0x48aa <__divsf3+0x1a>
    489c:	21 f4       	brne	.+8      	; 0x48a6 <__divsf3+0x16>
    489e:	5f 3f       	cpi	r21, 0xFF	; 255
    48a0:	21 f0       	breq	.+8      	; 0x48aa <__divsf3+0x1a>
    48a2:	9e c0       	rjmp	.+316    	; 0x49e0 <__fp_inf>
    48a4:	51 11       	cpse	r21, r1
    48a6:	0c 94 c8 15 	jmp	0x2b90	; 0x2b90 <__fp_szero>
    48aa:	a0 c0       	rjmp	.+320    	; 0x49ec <__fp_nan>

000048ac <__divsf3x>:
    48ac:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__fp_split3>
    48b0:	88 f3       	brcs	.-30     	; 0x4894 <__divsf3+0x4>

000048b2 <__divsf3_pse>:
    48b2:	99 23       	and	r25, r25
    48b4:	b9 f3       	breq	.-18     	; 0x48a4 <__divsf3+0x14>
    48b6:	55 23       	and	r21, r21
    48b8:	a1 f3       	breq	.-24     	; 0x48a2 <__divsf3+0x12>
    48ba:	95 1b       	sub	r25, r21
    48bc:	55 0b       	sbc	r21, r21
    48be:	bb 27       	eor	r27, r27
    48c0:	aa 27       	eor	r26, r26
    48c2:	62 17       	cp	r22, r18
    48c4:	73 07       	cpc	r23, r19
    48c6:	84 07       	cpc	r24, r20
    48c8:	38 f0       	brcs	.+14     	; 0x48d8 <__divsf3_pse+0x26>
    48ca:	9f 5f       	subi	r25, 0xFF	; 255
    48cc:	5f 4f       	sbci	r21, 0xFF	; 255
    48ce:	22 0f       	add	r18, r18
    48d0:	33 1f       	adc	r19, r19
    48d2:	44 1f       	adc	r20, r20
    48d4:	aa 1f       	adc	r26, r26
    48d6:	a9 f3       	breq	.-22     	; 0x48c2 <__divsf3_pse+0x10>
    48d8:	34 d0       	rcall	.+104    	; 0x4942 <__divsf3_pse+0x90>
    48da:	0e 2e       	mov	r0, r30
    48dc:	3a f0       	brmi	.+14     	; 0x48ec <__divsf3_pse+0x3a>
    48de:	e0 e8       	ldi	r30, 0x80	; 128
    48e0:	31 d0       	rcall	.+98     	; 0x4944 <__divsf3_pse+0x92>
    48e2:	91 50       	subi	r25, 0x01	; 1
    48e4:	50 40       	sbci	r21, 0x00	; 0
    48e6:	e6 95       	lsr	r30
    48e8:	00 1c       	adc	r0, r0
    48ea:	ca f7       	brpl	.-14     	; 0x48de <__divsf3_pse+0x2c>
    48ec:	2a d0       	rcall	.+84     	; 0x4942 <__divsf3_pse+0x90>
    48ee:	fe 2f       	mov	r31, r30
    48f0:	28 d0       	rcall	.+80     	; 0x4942 <__divsf3_pse+0x90>
    48f2:	66 0f       	add	r22, r22
    48f4:	77 1f       	adc	r23, r23
    48f6:	88 1f       	adc	r24, r24
    48f8:	bb 1f       	adc	r27, r27
    48fa:	26 17       	cp	r18, r22
    48fc:	37 07       	cpc	r19, r23
    48fe:	48 07       	cpc	r20, r24
    4900:	ab 07       	cpc	r26, r27
    4902:	b0 e8       	ldi	r27, 0x80	; 128
    4904:	09 f0       	breq	.+2      	; 0x4908 <__divsf3_pse+0x56>
    4906:	bb 0b       	sbc	r27, r27
    4908:	80 2d       	mov	r24, r0
    490a:	bf 01       	movw	r22, r30
    490c:	ff 27       	eor	r31, r31
    490e:	93 58       	subi	r25, 0x83	; 131
    4910:	5f 4f       	sbci	r21, 0xFF	; 255
    4912:	32 f0       	brmi	.+12     	; 0x4920 <__divsf3_pse+0x6e>
    4914:	9e 3f       	cpi	r25, 0xFE	; 254
    4916:	51 05       	cpc	r21, r1
    4918:	70 f0       	brcs	.+28     	; 0x4936 <__divsf3_pse+0x84>
    491a:	62 c0       	rjmp	.+196    	; 0x49e0 <__fp_inf>
    491c:	0c 94 c8 15 	jmp	0x2b90	; 0x2b90 <__fp_szero>
    4920:	5f 3f       	cpi	r21, 0xFF	; 255
    4922:	e4 f3       	brlt	.-8      	; 0x491c <__divsf3_pse+0x6a>
    4924:	98 3e       	cpi	r25, 0xE8	; 232
    4926:	d4 f3       	brlt	.-12     	; 0x491c <__divsf3_pse+0x6a>
    4928:	86 95       	lsr	r24
    492a:	77 95       	ror	r23
    492c:	67 95       	ror	r22
    492e:	b7 95       	ror	r27
    4930:	f7 95       	ror	r31
    4932:	9f 5f       	subi	r25, 0xFF	; 255
    4934:	c9 f7       	brne	.-14     	; 0x4928 <__divsf3_pse+0x76>
    4936:	88 0f       	add	r24, r24
    4938:	91 1d       	adc	r25, r1
    493a:	96 95       	lsr	r25
    493c:	87 95       	ror	r24
    493e:	97 f9       	bld	r25, 7
    4940:	08 95       	ret
    4942:	e1 e0       	ldi	r30, 0x01	; 1
    4944:	66 0f       	add	r22, r22
    4946:	77 1f       	adc	r23, r23
    4948:	88 1f       	adc	r24, r24
    494a:	bb 1f       	adc	r27, r27
    494c:	62 17       	cp	r22, r18
    494e:	73 07       	cpc	r23, r19
    4950:	84 07       	cpc	r24, r20
    4952:	ba 07       	cpc	r27, r26
    4954:	20 f0       	brcs	.+8      	; 0x495e <__divsf3_pse+0xac>
    4956:	62 1b       	sub	r22, r18
    4958:	73 0b       	sbc	r23, r19
    495a:	84 0b       	sbc	r24, r20
    495c:	ba 0b       	sbc	r27, r26
    495e:	ee 1f       	adc	r30, r30
    4960:	88 f7       	brcc	.-30     	; 0x4944 <__divsf3_pse+0x92>
    4962:	e0 95       	com	r30
    4964:	08 95       	ret

00004966 <__floatunsisf>:
    4966:	e8 94       	clt
    4968:	09 c0       	rjmp	.+18     	; 0x497c <__floatsisf+0x12>

0000496a <__floatsisf>:
    496a:	97 fb       	bst	r25, 7
    496c:	3e f4       	brtc	.+14     	; 0x497c <__floatsisf+0x12>
    496e:	90 95       	com	r25
    4970:	80 95       	com	r24
    4972:	70 95       	com	r23
    4974:	61 95       	neg	r22
    4976:	7f 4f       	sbci	r23, 0xFF	; 255
    4978:	8f 4f       	sbci	r24, 0xFF	; 255
    497a:	9f 4f       	sbci	r25, 0xFF	; 255
    497c:	99 23       	and	r25, r25
    497e:	a9 f0       	breq	.+42     	; 0x49aa <__floatsisf+0x40>
    4980:	f9 2f       	mov	r31, r25
    4982:	96 e9       	ldi	r25, 0x96	; 150
    4984:	bb 27       	eor	r27, r27
    4986:	93 95       	inc	r25
    4988:	f6 95       	lsr	r31
    498a:	87 95       	ror	r24
    498c:	77 95       	ror	r23
    498e:	67 95       	ror	r22
    4990:	b7 95       	ror	r27
    4992:	f1 11       	cpse	r31, r1
    4994:	f8 cf       	rjmp	.-16     	; 0x4986 <__floatsisf+0x1c>
    4996:	fa f4       	brpl	.+62     	; 0x49d6 <__floatsisf+0x6c>
    4998:	bb 0f       	add	r27, r27
    499a:	11 f4       	brne	.+4      	; 0x49a0 <__floatsisf+0x36>
    499c:	60 ff       	sbrs	r22, 0
    499e:	1b c0       	rjmp	.+54     	; 0x49d6 <__floatsisf+0x6c>
    49a0:	6f 5f       	subi	r22, 0xFF	; 255
    49a2:	7f 4f       	sbci	r23, 0xFF	; 255
    49a4:	8f 4f       	sbci	r24, 0xFF	; 255
    49a6:	9f 4f       	sbci	r25, 0xFF	; 255
    49a8:	16 c0       	rjmp	.+44     	; 0x49d6 <__floatsisf+0x6c>
    49aa:	88 23       	and	r24, r24
    49ac:	11 f0       	breq	.+4      	; 0x49b2 <__floatsisf+0x48>
    49ae:	96 e9       	ldi	r25, 0x96	; 150
    49b0:	11 c0       	rjmp	.+34     	; 0x49d4 <__floatsisf+0x6a>
    49b2:	77 23       	and	r23, r23
    49b4:	21 f0       	breq	.+8      	; 0x49be <__floatsisf+0x54>
    49b6:	9e e8       	ldi	r25, 0x8E	; 142
    49b8:	87 2f       	mov	r24, r23
    49ba:	76 2f       	mov	r23, r22
    49bc:	05 c0       	rjmp	.+10     	; 0x49c8 <__floatsisf+0x5e>
    49be:	66 23       	and	r22, r22
    49c0:	71 f0       	breq	.+28     	; 0x49de <__floatsisf+0x74>
    49c2:	96 e8       	ldi	r25, 0x86	; 134
    49c4:	86 2f       	mov	r24, r22
    49c6:	70 e0       	ldi	r23, 0x00	; 0
    49c8:	60 e0       	ldi	r22, 0x00	; 0
    49ca:	2a f0       	brmi	.+10     	; 0x49d6 <__floatsisf+0x6c>
    49cc:	9a 95       	dec	r25
    49ce:	66 0f       	add	r22, r22
    49d0:	77 1f       	adc	r23, r23
    49d2:	88 1f       	adc	r24, r24
    49d4:	da f7       	brpl	.-10     	; 0x49cc <__floatsisf+0x62>
    49d6:	88 0f       	add	r24, r24
    49d8:	96 95       	lsr	r25
    49da:	87 95       	ror	r24
    49dc:	97 f9       	bld	r25, 7
    49de:	08 95       	ret

000049e0 <__fp_inf>:
    49e0:	97 f9       	bld	r25, 7
    49e2:	9f 67       	ori	r25, 0x7F	; 127
    49e4:	80 e8       	ldi	r24, 0x80	; 128
    49e6:	70 e0       	ldi	r23, 0x00	; 0
    49e8:	60 e0       	ldi	r22, 0x00	; 0
    49ea:	08 95       	ret

000049ec <__fp_nan>:
    49ec:	9f ef       	ldi	r25, 0xFF	; 255
    49ee:	80 ec       	ldi	r24, 0xC0	; 192
    49f0:	08 95       	ret

000049f2 <__fp_pscA>:
    49f2:	00 24       	eor	r0, r0
    49f4:	0a 94       	dec	r0
    49f6:	16 16       	cp	r1, r22
    49f8:	17 06       	cpc	r1, r23
    49fa:	18 06       	cpc	r1, r24
    49fc:	09 06       	cpc	r0, r25
    49fe:	08 95       	ret

00004a00 <__fp_pscB>:
    4a00:	00 24       	eor	r0, r0
    4a02:	0a 94       	dec	r0
    4a04:	12 16       	cp	r1, r18
    4a06:	13 06       	cpc	r1, r19
    4a08:	14 06       	cpc	r1, r20
    4a0a:	05 06       	cpc	r0, r21
    4a0c:	08 95       	ret

00004a0e <__fp_round>:
    4a0e:	09 2e       	mov	r0, r25
    4a10:	03 94       	inc	r0
    4a12:	00 0c       	add	r0, r0
    4a14:	11 f4       	brne	.+4      	; 0x4a1a <__fp_round+0xc>
    4a16:	88 23       	and	r24, r24
    4a18:	52 f0       	brmi	.+20     	; 0x4a2e <__fp_round+0x20>
    4a1a:	bb 0f       	add	r27, r27
    4a1c:	40 f4       	brcc	.+16     	; 0x4a2e <__fp_round+0x20>
    4a1e:	bf 2b       	or	r27, r31
    4a20:	11 f4       	brne	.+4      	; 0x4a26 <__fp_round+0x18>
    4a22:	60 ff       	sbrs	r22, 0
    4a24:	04 c0       	rjmp	.+8      	; 0x4a2e <__fp_round+0x20>
    4a26:	6f 5f       	subi	r22, 0xFF	; 255
    4a28:	7f 4f       	sbci	r23, 0xFF	; 255
    4a2a:	8f 4f       	sbci	r24, 0xFF	; 255
    4a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    4a2e:	08 95       	ret

00004a30 <__gesf2>:
    4a30:	69 d0       	rcall	.+210    	; 0x4b04 <__fp_cmp>
    4a32:	08 f4       	brcc	.+2      	; 0x4a36 <__gesf2+0x6>
    4a34:	8f ef       	ldi	r24, 0xFF	; 255
    4a36:	08 95       	ret

00004a38 <__mulsf3>:
    4a38:	0c d0       	rcall	.+24     	; 0x4a52 <__mulsf3x>
    4a3a:	e9 cf       	rjmp	.-46     	; 0x4a0e <__fp_round>
    4a3c:	da df       	rcall	.-76     	; 0x49f2 <__fp_pscA>
    4a3e:	28 f0       	brcs	.+10     	; 0x4a4a <__mulsf3+0x12>
    4a40:	df df       	rcall	.-66     	; 0x4a00 <__fp_pscB>
    4a42:	18 f0       	brcs	.+6      	; 0x4a4a <__mulsf3+0x12>
    4a44:	95 23       	and	r25, r21
    4a46:	09 f0       	breq	.+2      	; 0x4a4a <__mulsf3+0x12>
    4a48:	cb cf       	rjmp	.-106    	; 0x49e0 <__fp_inf>
    4a4a:	d0 cf       	rjmp	.-96     	; 0x49ec <__fp_nan>
    4a4c:	11 24       	eor	r1, r1
    4a4e:	0c 94 c8 15 	jmp	0x2b90	; 0x2b90 <__fp_szero>

00004a52 <__mulsf3x>:
    4a52:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <__fp_split3>
    4a56:	90 f3       	brcs	.-28     	; 0x4a3c <__mulsf3+0x4>

00004a58 <__mulsf3_pse>:
    4a58:	95 9f       	mul	r25, r21
    4a5a:	c1 f3       	breq	.-16     	; 0x4a4c <__mulsf3+0x14>
    4a5c:	95 0f       	add	r25, r21
    4a5e:	50 e0       	ldi	r21, 0x00	; 0
    4a60:	55 1f       	adc	r21, r21
    4a62:	62 9f       	mul	r22, r18
    4a64:	f0 01       	movw	r30, r0
    4a66:	72 9f       	mul	r23, r18
    4a68:	bb 27       	eor	r27, r27
    4a6a:	f0 0d       	add	r31, r0
    4a6c:	b1 1d       	adc	r27, r1
    4a6e:	63 9f       	mul	r22, r19
    4a70:	aa 27       	eor	r26, r26
    4a72:	f0 0d       	add	r31, r0
    4a74:	b1 1d       	adc	r27, r1
    4a76:	aa 1f       	adc	r26, r26
    4a78:	64 9f       	mul	r22, r20
    4a7a:	66 27       	eor	r22, r22
    4a7c:	b0 0d       	add	r27, r0
    4a7e:	a1 1d       	adc	r26, r1
    4a80:	66 1f       	adc	r22, r22
    4a82:	82 9f       	mul	r24, r18
    4a84:	22 27       	eor	r18, r18
    4a86:	b0 0d       	add	r27, r0
    4a88:	a1 1d       	adc	r26, r1
    4a8a:	62 1f       	adc	r22, r18
    4a8c:	73 9f       	mul	r23, r19
    4a8e:	b0 0d       	add	r27, r0
    4a90:	a1 1d       	adc	r26, r1
    4a92:	62 1f       	adc	r22, r18
    4a94:	83 9f       	mul	r24, r19
    4a96:	a0 0d       	add	r26, r0
    4a98:	61 1d       	adc	r22, r1
    4a9a:	22 1f       	adc	r18, r18
    4a9c:	74 9f       	mul	r23, r20
    4a9e:	33 27       	eor	r19, r19
    4aa0:	a0 0d       	add	r26, r0
    4aa2:	61 1d       	adc	r22, r1
    4aa4:	23 1f       	adc	r18, r19
    4aa6:	84 9f       	mul	r24, r20
    4aa8:	60 0d       	add	r22, r0
    4aaa:	21 1d       	adc	r18, r1
    4aac:	82 2f       	mov	r24, r18
    4aae:	76 2f       	mov	r23, r22
    4ab0:	6a 2f       	mov	r22, r26
    4ab2:	11 24       	eor	r1, r1
    4ab4:	9f 57       	subi	r25, 0x7F	; 127
    4ab6:	50 40       	sbci	r21, 0x00	; 0
    4ab8:	92 f0       	brmi	.+36     	; 0x4ade <__mulsf3_pse+0x86>
    4aba:	e9 f0       	breq	.+58     	; 0x4af6 <__mulsf3_pse+0x9e>
    4abc:	88 23       	and	r24, r24
    4abe:	4a f0       	brmi	.+18     	; 0x4ad2 <__mulsf3_pse+0x7a>
    4ac0:	ee 0f       	add	r30, r30
    4ac2:	ff 1f       	adc	r31, r31
    4ac4:	bb 1f       	adc	r27, r27
    4ac6:	66 1f       	adc	r22, r22
    4ac8:	77 1f       	adc	r23, r23
    4aca:	88 1f       	adc	r24, r24
    4acc:	91 50       	subi	r25, 0x01	; 1
    4ace:	50 40       	sbci	r21, 0x00	; 0
    4ad0:	a9 f7       	brne	.-22     	; 0x4abc <__mulsf3_pse+0x64>
    4ad2:	9e 3f       	cpi	r25, 0xFE	; 254
    4ad4:	51 05       	cpc	r21, r1
    4ad6:	78 f0       	brcs	.+30     	; 0x4af6 <__mulsf3_pse+0x9e>
    4ad8:	83 cf       	rjmp	.-250    	; 0x49e0 <__fp_inf>
    4ada:	0c 94 c8 15 	jmp	0x2b90	; 0x2b90 <__fp_szero>
    4ade:	5f 3f       	cpi	r21, 0xFF	; 255
    4ae0:	e4 f3       	brlt	.-8      	; 0x4ada <__mulsf3_pse+0x82>
    4ae2:	98 3e       	cpi	r25, 0xE8	; 232
    4ae4:	d4 f3       	brlt	.-12     	; 0x4ada <__mulsf3_pse+0x82>
    4ae6:	86 95       	lsr	r24
    4ae8:	77 95       	ror	r23
    4aea:	67 95       	ror	r22
    4aec:	b7 95       	ror	r27
    4aee:	f7 95       	ror	r31
    4af0:	e7 95       	ror	r30
    4af2:	9f 5f       	subi	r25, 0xFF	; 255
    4af4:	c1 f7       	brne	.-16     	; 0x4ae6 <__mulsf3_pse+0x8e>
    4af6:	fe 2b       	or	r31, r30
    4af8:	88 0f       	add	r24, r24
    4afa:	91 1d       	adc	r25, r1
    4afc:	96 95       	lsr	r25
    4afe:	87 95       	ror	r24
    4b00:	97 f9       	bld	r25, 7
    4b02:	08 95       	ret

00004b04 <__fp_cmp>:
    4b04:	99 0f       	add	r25, r25
    4b06:	00 08       	sbc	r0, r0
    4b08:	55 0f       	add	r21, r21
    4b0a:	aa 0b       	sbc	r26, r26
    4b0c:	e0 e8       	ldi	r30, 0x80	; 128
    4b0e:	fe ef       	ldi	r31, 0xFE	; 254
    4b10:	16 16       	cp	r1, r22
    4b12:	17 06       	cpc	r1, r23
    4b14:	e8 07       	cpc	r30, r24
    4b16:	f9 07       	cpc	r31, r25
    4b18:	c0 f0       	brcs	.+48     	; 0x4b4a <__fp_cmp+0x46>
    4b1a:	12 16       	cp	r1, r18
    4b1c:	13 06       	cpc	r1, r19
    4b1e:	e4 07       	cpc	r30, r20
    4b20:	f5 07       	cpc	r31, r21
    4b22:	98 f0       	brcs	.+38     	; 0x4b4a <__fp_cmp+0x46>
    4b24:	62 1b       	sub	r22, r18
    4b26:	73 0b       	sbc	r23, r19
    4b28:	84 0b       	sbc	r24, r20
    4b2a:	95 0b       	sbc	r25, r21
    4b2c:	39 f4       	brne	.+14     	; 0x4b3c <__fp_cmp+0x38>
    4b2e:	0a 26       	eor	r0, r26
    4b30:	61 f0       	breq	.+24     	; 0x4b4a <__fp_cmp+0x46>
    4b32:	23 2b       	or	r18, r19
    4b34:	24 2b       	or	r18, r20
    4b36:	25 2b       	or	r18, r21
    4b38:	21 f4       	brne	.+8      	; 0x4b42 <__fp_cmp+0x3e>
    4b3a:	08 95       	ret
    4b3c:	0a 26       	eor	r0, r26
    4b3e:	09 f4       	brne	.+2      	; 0x4b42 <__fp_cmp+0x3e>
    4b40:	a1 40       	sbci	r26, 0x01	; 1
    4b42:	a6 95       	lsr	r26
    4b44:	8f ef       	ldi	r24, 0xFF	; 255
    4b46:	81 1d       	adc	r24, r1
    4b48:	81 1d       	adc	r24, r1
    4b4a:	08 95       	ret

00004b4c <__udivmodsi4>:
    4b4c:	a1 e2       	ldi	r26, 0x21	; 33
    4b4e:	1a 2e       	mov	r1, r26
    4b50:	aa 1b       	sub	r26, r26
    4b52:	bb 1b       	sub	r27, r27
    4b54:	fd 01       	movw	r30, r26
    4b56:	0d c0       	rjmp	.+26     	; 0x4b72 <__udivmodsi4_ep>

00004b58 <__udivmodsi4_loop>:
    4b58:	aa 1f       	adc	r26, r26
    4b5a:	bb 1f       	adc	r27, r27
    4b5c:	ee 1f       	adc	r30, r30
    4b5e:	ff 1f       	adc	r31, r31
    4b60:	a2 17       	cp	r26, r18
    4b62:	b3 07       	cpc	r27, r19
    4b64:	e4 07       	cpc	r30, r20
    4b66:	f5 07       	cpc	r31, r21
    4b68:	20 f0       	brcs	.+8      	; 0x4b72 <__udivmodsi4_ep>
    4b6a:	a2 1b       	sub	r26, r18
    4b6c:	b3 0b       	sbc	r27, r19
    4b6e:	e4 0b       	sbc	r30, r20
    4b70:	f5 0b       	sbc	r31, r21

00004b72 <__udivmodsi4_ep>:
    4b72:	66 1f       	adc	r22, r22
    4b74:	77 1f       	adc	r23, r23
    4b76:	88 1f       	adc	r24, r24
    4b78:	99 1f       	adc	r25, r25
    4b7a:	1a 94       	dec	r1
    4b7c:	69 f7       	brne	.-38     	; 0x4b58 <__udivmodsi4_loop>
    4b7e:	60 95       	com	r22
    4b80:	70 95       	com	r23
    4b82:	80 95       	com	r24
    4b84:	90 95       	com	r25
    4b86:	9b 01       	movw	r18, r22
    4b88:	ac 01       	movw	r20, r24
    4b8a:	bd 01       	movw	r22, r26
    4b8c:	cf 01       	movw	r24, r30
    4b8e:	08 95       	ret

00004b90 <__tablejump2__>:
    4b90:	ee 0f       	add	r30, r30
    4b92:	ff 1f       	adc	r31, r31
    4b94:	88 1f       	adc	r24, r24
    4b96:	8b bf       	out	0x3b, r24	; 59
    4b98:	07 90       	elpm	r0, Z+
    4b9a:	f6 91       	elpm	r31, Z
    4b9c:	e0 2d       	mov	r30, r0
    4b9e:	19 94       	eijmp

00004ba0 <calloc>:
    4ba0:	0f 93       	push	r16
    4ba2:	1f 93       	push	r17
    4ba4:	cf 93       	push	r28
    4ba6:	df 93       	push	r29
    4ba8:	86 9f       	mul	r24, r22
    4baa:	80 01       	movw	r16, r0
    4bac:	87 9f       	mul	r24, r23
    4bae:	10 0d       	add	r17, r0
    4bb0:	96 9f       	mul	r25, r22
    4bb2:	10 0d       	add	r17, r0
    4bb4:	11 24       	eor	r1, r1
    4bb6:	c8 01       	movw	r24, r16
    4bb8:	0d d0       	rcall	.+26     	; 0x4bd4 <malloc>
    4bba:	ec 01       	movw	r28, r24
    4bbc:	00 97       	sbiw	r24, 0x00	; 0
    4bbe:	21 f0       	breq	.+8      	; 0x4bc8 <calloc+0x28>
    4bc0:	a8 01       	movw	r20, r16
    4bc2:	60 e0       	ldi	r22, 0x00	; 0
    4bc4:	70 e0       	ldi	r23, 0x00	; 0
    4bc6:	34 d1       	rcall	.+616    	; 0x4e30 <memset>
    4bc8:	ce 01       	movw	r24, r28
    4bca:	df 91       	pop	r29
    4bcc:	cf 91       	pop	r28
    4bce:	1f 91       	pop	r17
    4bd0:	0f 91       	pop	r16
    4bd2:	08 95       	ret

00004bd4 <malloc>:
    4bd4:	0f 93       	push	r16
    4bd6:	1f 93       	push	r17
    4bd8:	cf 93       	push	r28
    4bda:	df 93       	push	r29
    4bdc:	82 30       	cpi	r24, 0x02	; 2
    4bde:	91 05       	cpc	r25, r1
    4be0:	10 f4       	brcc	.+4      	; 0x4be6 <malloc+0x12>
    4be2:	82 e0       	ldi	r24, 0x02	; 2
    4be4:	90 e0       	ldi	r25, 0x00	; 0
    4be6:	e0 91 8c 0a 	lds	r30, 0x0A8C	; 0x800a8c <__flp>
    4bea:	f0 91 8d 0a 	lds	r31, 0x0A8D	; 0x800a8d <__flp+0x1>
    4bee:	20 e0       	ldi	r18, 0x00	; 0
    4bf0:	30 e0       	ldi	r19, 0x00	; 0
    4bf2:	a0 e0       	ldi	r26, 0x00	; 0
    4bf4:	b0 e0       	ldi	r27, 0x00	; 0
    4bf6:	30 97       	sbiw	r30, 0x00	; 0
    4bf8:	19 f1       	breq	.+70     	; 0x4c40 <malloc+0x6c>
    4bfa:	40 81       	ld	r20, Z
    4bfc:	51 81       	ldd	r21, Z+1	; 0x01
    4bfe:	02 81       	ldd	r16, Z+2	; 0x02
    4c00:	13 81       	ldd	r17, Z+3	; 0x03
    4c02:	48 17       	cp	r20, r24
    4c04:	59 07       	cpc	r21, r25
    4c06:	c8 f0       	brcs	.+50     	; 0x4c3a <malloc+0x66>
    4c08:	84 17       	cp	r24, r20
    4c0a:	95 07       	cpc	r25, r21
    4c0c:	69 f4       	brne	.+26     	; 0x4c28 <malloc+0x54>
    4c0e:	10 97       	sbiw	r26, 0x00	; 0
    4c10:	31 f0       	breq	.+12     	; 0x4c1e <malloc+0x4a>
    4c12:	12 96       	adiw	r26, 0x02	; 2
    4c14:	0c 93       	st	X, r16
    4c16:	12 97       	sbiw	r26, 0x02	; 2
    4c18:	13 96       	adiw	r26, 0x03	; 3
    4c1a:	1c 93       	st	X, r17
    4c1c:	27 c0       	rjmp	.+78     	; 0x4c6c <malloc+0x98>
    4c1e:	00 93 8c 0a 	sts	0x0A8C, r16	; 0x800a8c <__flp>
    4c22:	10 93 8d 0a 	sts	0x0A8D, r17	; 0x800a8d <__flp+0x1>
    4c26:	22 c0       	rjmp	.+68     	; 0x4c6c <malloc+0x98>
    4c28:	21 15       	cp	r18, r1
    4c2a:	31 05       	cpc	r19, r1
    4c2c:	19 f0       	breq	.+6      	; 0x4c34 <malloc+0x60>
    4c2e:	42 17       	cp	r20, r18
    4c30:	53 07       	cpc	r21, r19
    4c32:	18 f4       	brcc	.+6      	; 0x4c3a <malloc+0x66>
    4c34:	9a 01       	movw	r18, r20
    4c36:	bd 01       	movw	r22, r26
    4c38:	ef 01       	movw	r28, r30
    4c3a:	df 01       	movw	r26, r30
    4c3c:	f8 01       	movw	r30, r16
    4c3e:	db cf       	rjmp	.-74     	; 0x4bf6 <malloc+0x22>
    4c40:	21 15       	cp	r18, r1
    4c42:	31 05       	cpc	r19, r1
    4c44:	f9 f0       	breq	.+62     	; 0x4c84 <malloc+0xb0>
    4c46:	28 1b       	sub	r18, r24
    4c48:	39 0b       	sbc	r19, r25
    4c4a:	24 30       	cpi	r18, 0x04	; 4
    4c4c:	31 05       	cpc	r19, r1
    4c4e:	80 f4       	brcc	.+32     	; 0x4c70 <malloc+0x9c>
    4c50:	8a 81       	ldd	r24, Y+2	; 0x02
    4c52:	9b 81       	ldd	r25, Y+3	; 0x03
    4c54:	61 15       	cp	r22, r1
    4c56:	71 05       	cpc	r23, r1
    4c58:	21 f0       	breq	.+8      	; 0x4c62 <malloc+0x8e>
    4c5a:	fb 01       	movw	r30, r22
    4c5c:	93 83       	std	Z+3, r25	; 0x03
    4c5e:	82 83       	std	Z+2, r24	; 0x02
    4c60:	04 c0       	rjmp	.+8      	; 0x4c6a <malloc+0x96>
    4c62:	90 93 8d 0a 	sts	0x0A8D, r25	; 0x800a8d <__flp+0x1>
    4c66:	80 93 8c 0a 	sts	0x0A8C, r24	; 0x800a8c <__flp>
    4c6a:	fe 01       	movw	r30, r28
    4c6c:	32 96       	adiw	r30, 0x02	; 2
    4c6e:	44 c0       	rjmp	.+136    	; 0x4cf8 <malloc+0x124>
    4c70:	fe 01       	movw	r30, r28
    4c72:	e2 0f       	add	r30, r18
    4c74:	f3 1f       	adc	r31, r19
    4c76:	81 93       	st	Z+, r24
    4c78:	91 93       	st	Z+, r25
    4c7a:	22 50       	subi	r18, 0x02	; 2
    4c7c:	31 09       	sbc	r19, r1
    4c7e:	39 83       	std	Y+1, r19	; 0x01
    4c80:	28 83       	st	Y, r18
    4c82:	3a c0       	rjmp	.+116    	; 0x4cf8 <malloc+0x124>
    4c84:	20 91 8a 0a 	lds	r18, 0x0A8A	; 0x800a8a <__brkval>
    4c88:	30 91 8b 0a 	lds	r19, 0x0A8B	; 0x800a8b <__brkval+0x1>
    4c8c:	23 2b       	or	r18, r19
    4c8e:	41 f4       	brne	.+16     	; 0x4ca0 <malloc+0xcc>
    4c90:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    4c94:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    4c98:	30 93 8b 0a 	sts	0x0A8B, r19	; 0x800a8b <__brkval+0x1>
    4c9c:	20 93 8a 0a 	sts	0x0A8A, r18	; 0x800a8a <__brkval>
    4ca0:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    4ca4:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    4ca8:	21 15       	cp	r18, r1
    4caa:	31 05       	cpc	r19, r1
    4cac:	41 f4       	brne	.+16     	; 0x4cbe <malloc+0xea>
    4cae:	2d b7       	in	r18, 0x3d	; 61
    4cb0:	3e b7       	in	r19, 0x3e	; 62
    4cb2:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4cb6:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4cba:	24 1b       	sub	r18, r20
    4cbc:	35 0b       	sbc	r19, r21
    4cbe:	e0 91 8a 0a 	lds	r30, 0x0A8A	; 0x800a8a <__brkval>
    4cc2:	f0 91 8b 0a 	lds	r31, 0x0A8B	; 0x800a8b <__brkval+0x1>
    4cc6:	e2 17       	cp	r30, r18
    4cc8:	f3 07       	cpc	r31, r19
    4cca:	a0 f4       	brcc	.+40     	; 0x4cf4 <malloc+0x120>
    4ccc:	2e 1b       	sub	r18, r30
    4cce:	3f 0b       	sbc	r19, r31
    4cd0:	28 17       	cp	r18, r24
    4cd2:	39 07       	cpc	r19, r25
    4cd4:	78 f0       	brcs	.+30     	; 0x4cf4 <malloc+0x120>
    4cd6:	ac 01       	movw	r20, r24
    4cd8:	4e 5f       	subi	r20, 0xFE	; 254
    4cda:	5f 4f       	sbci	r21, 0xFF	; 255
    4cdc:	24 17       	cp	r18, r20
    4cde:	35 07       	cpc	r19, r21
    4ce0:	48 f0       	brcs	.+18     	; 0x4cf4 <malloc+0x120>
    4ce2:	4e 0f       	add	r20, r30
    4ce4:	5f 1f       	adc	r21, r31
    4ce6:	50 93 8b 0a 	sts	0x0A8B, r21	; 0x800a8b <__brkval+0x1>
    4cea:	40 93 8a 0a 	sts	0x0A8A, r20	; 0x800a8a <__brkval>
    4cee:	81 93       	st	Z+, r24
    4cf0:	91 93       	st	Z+, r25
    4cf2:	02 c0       	rjmp	.+4      	; 0x4cf8 <malloc+0x124>
    4cf4:	e0 e0       	ldi	r30, 0x00	; 0
    4cf6:	f0 e0       	ldi	r31, 0x00	; 0
    4cf8:	cf 01       	movw	r24, r30
    4cfa:	df 91       	pop	r29
    4cfc:	cf 91       	pop	r28
    4cfe:	1f 91       	pop	r17
    4d00:	0f 91       	pop	r16
    4d02:	08 95       	ret

00004d04 <free>:
    4d04:	cf 93       	push	r28
    4d06:	df 93       	push	r29
    4d08:	00 97       	sbiw	r24, 0x00	; 0
    4d0a:	09 f4       	brne	.+2      	; 0x4d0e <free+0xa>
    4d0c:	81 c0       	rjmp	.+258    	; 0x4e10 <free+0x10c>
    4d0e:	fc 01       	movw	r30, r24
    4d10:	32 97       	sbiw	r30, 0x02	; 2
    4d12:	13 82       	std	Z+3, r1	; 0x03
    4d14:	12 82       	std	Z+2, r1	; 0x02
    4d16:	a0 91 8c 0a 	lds	r26, 0x0A8C	; 0x800a8c <__flp>
    4d1a:	b0 91 8d 0a 	lds	r27, 0x0A8D	; 0x800a8d <__flp+0x1>
    4d1e:	10 97       	sbiw	r26, 0x00	; 0
    4d20:	81 f4       	brne	.+32     	; 0x4d42 <free+0x3e>
    4d22:	20 81       	ld	r18, Z
    4d24:	31 81       	ldd	r19, Z+1	; 0x01
    4d26:	82 0f       	add	r24, r18
    4d28:	93 1f       	adc	r25, r19
    4d2a:	20 91 8a 0a 	lds	r18, 0x0A8A	; 0x800a8a <__brkval>
    4d2e:	30 91 8b 0a 	lds	r19, 0x0A8B	; 0x800a8b <__brkval+0x1>
    4d32:	28 17       	cp	r18, r24
    4d34:	39 07       	cpc	r19, r25
    4d36:	51 f5       	brne	.+84     	; 0x4d8c <free+0x88>
    4d38:	f0 93 8b 0a 	sts	0x0A8B, r31	; 0x800a8b <__brkval+0x1>
    4d3c:	e0 93 8a 0a 	sts	0x0A8A, r30	; 0x800a8a <__brkval>
    4d40:	67 c0       	rjmp	.+206    	; 0x4e10 <free+0x10c>
    4d42:	ed 01       	movw	r28, r26
    4d44:	20 e0       	ldi	r18, 0x00	; 0
    4d46:	30 e0       	ldi	r19, 0x00	; 0
    4d48:	ce 17       	cp	r28, r30
    4d4a:	df 07       	cpc	r29, r31
    4d4c:	40 f4       	brcc	.+16     	; 0x4d5e <free+0x5a>
    4d4e:	4a 81       	ldd	r20, Y+2	; 0x02
    4d50:	5b 81       	ldd	r21, Y+3	; 0x03
    4d52:	9e 01       	movw	r18, r28
    4d54:	41 15       	cp	r20, r1
    4d56:	51 05       	cpc	r21, r1
    4d58:	f1 f0       	breq	.+60     	; 0x4d96 <free+0x92>
    4d5a:	ea 01       	movw	r28, r20
    4d5c:	f5 cf       	rjmp	.-22     	; 0x4d48 <free+0x44>
    4d5e:	d3 83       	std	Z+3, r29	; 0x03
    4d60:	c2 83       	std	Z+2, r28	; 0x02
    4d62:	40 81       	ld	r20, Z
    4d64:	51 81       	ldd	r21, Z+1	; 0x01
    4d66:	84 0f       	add	r24, r20
    4d68:	95 1f       	adc	r25, r21
    4d6a:	c8 17       	cp	r28, r24
    4d6c:	d9 07       	cpc	r29, r25
    4d6e:	59 f4       	brne	.+22     	; 0x4d86 <free+0x82>
    4d70:	88 81       	ld	r24, Y
    4d72:	99 81       	ldd	r25, Y+1	; 0x01
    4d74:	84 0f       	add	r24, r20
    4d76:	95 1f       	adc	r25, r21
    4d78:	02 96       	adiw	r24, 0x02	; 2
    4d7a:	91 83       	std	Z+1, r25	; 0x01
    4d7c:	80 83       	st	Z, r24
    4d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    4d80:	9b 81       	ldd	r25, Y+3	; 0x03
    4d82:	93 83       	std	Z+3, r25	; 0x03
    4d84:	82 83       	std	Z+2, r24	; 0x02
    4d86:	21 15       	cp	r18, r1
    4d88:	31 05       	cpc	r19, r1
    4d8a:	29 f4       	brne	.+10     	; 0x4d96 <free+0x92>
    4d8c:	f0 93 8d 0a 	sts	0x0A8D, r31	; 0x800a8d <__flp+0x1>
    4d90:	e0 93 8c 0a 	sts	0x0A8C, r30	; 0x800a8c <__flp>
    4d94:	3d c0       	rjmp	.+122    	; 0x4e10 <free+0x10c>
    4d96:	e9 01       	movw	r28, r18
    4d98:	fb 83       	std	Y+3, r31	; 0x03
    4d9a:	ea 83       	std	Y+2, r30	; 0x02
    4d9c:	49 91       	ld	r20, Y+
    4d9e:	59 91       	ld	r21, Y+
    4da0:	c4 0f       	add	r28, r20
    4da2:	d5 1f       	adc	r29, r21
    4da4:	ec 17       	cp	r30, r28
    4da6:	fd 07       	cpc	r31, r29
    4da8:	61 f4       	brne	.+24     	; 0x4dc2 <free+0xbe>
    4daa:	80 81       	ld	r24, Z
    4dac:	91 81       	ldd	r25, Z+1	; 0x01
    4dae:	84 0f       	add	r24, r20
    4db0:	95 1f       	adc	r25, r21
    4db2:	02 96       	adiw	r24, 0x02	; 2
    4db4:	e9 01       	movw	r28, r18
    4db6:	99 83       	std	Y+1, r25	; 0x01
    4db8:	88 83       	st	Y, r24
    4dba:	82 81       	ldd	r24, Z+2	; 0x02
    4dbc:	93 81       	ldd	r25, Z+3	; 0x03
    4dbe:	9b 83       	std	Y+3, r25	; 0x03
    4dc0:	8a 83       	std	Y+2, r24	; 0x02
    4dc2:	e0 e0       	ldi	r30, 0x00	; 0
    4dc4:	f0 e0       	ldi	r31, 0x00	; 0
    4dc6:	12 96       	adiw	r26, 0x02	; 2
    4dc8:	8d 91       	ld	r24, X+
    4dca:	9c 91       	ld	r25, X
    4dcc:	13 97       	sbiw	r26, 0x03	; 3
    4dce:	00 97       	sbiw	r24, 0x00	; 0
    4dd0:	19 f0       	breq	.+6      	; 0x4dd8 <free+0xd4>
    4dd2:	fd 01       	movw	r30, r26
    4dd4:	dc 01       	movw	r26, r24
    4dd6:	f7 cf       	rjmp	.-18     	; 0x4dc6 <free+0xc2>
    4dd8:	8d 91       	ld	r24, X+
    4dda:	9c 91       	ld	r25, X
    4ddc:	11 97       	sbiw	r26, 0x01	; 1
    4dde:	9d 01       	movw	r18, r26
    4de0:	2e 5f       	subi	r18, 0xFE	; 254
    4de2:	3f 4f       	sbci	r19, 0xFF	; 255
    4de4:	82 0f       	add	r24, r18
    4de6:	93 1f       	adc	r25, r19
    4de8:	20 91 8a 0a 	lds	r18, 0x0A8A	; 0x800a8a <__brkval>
    4dec:	30 91 8b 0a 	lds	r19, 0x0A8B	; 0x800a8b <__brkval+0x1>
    4df0:	28 17       	cp	r18, r24
    4df2:	39 07       	cpc	r19, r25
    4df4:	69 f4       	brne	.+26     	; 0x4e10 <free+0x10c>
    4df6:	30 97       	sbiw	r30, 0x00	; 0
    4df8:	29 f4       	brne	.+10     	; 0x4e04 <free+0x100>
    4dfa:	10 92 8d 0a 	sts	0x0A8D, r1	; 0x800a8d <__flp+0x1>
    4dfe:	10 92 8c 0a 	sts	0x0A8C, r1	; 0x800a8c <__flp>
    4e02:	02 c0       	rjmp	.+4      	; 0x4e08 <free+0x104>
    4e04:	13 82       	std	Z+3, r1	; 0x03
    4e06:	12 82       	std	Z+2, r1	; 0x02
    4e08:	b0 93 8b 0a 	sts	0x0A8B, r27	; 0x800a8b <__brkval+0x1>
    4e0c:	a0 93 8a 0a 	sts	0x0A8A, r26	; 0x800a8a <__brkval>
    4e10:	df 91       	pop	r29
    4e12:	cf 91       	pop	r28
    4e14:	08 95       	ret

00004e16 <abort>:
    4e16:	81 e0       	ldi	r24, 0x01	; 1
    4e18:	90 e0       	ldi	r25, 0x00	; 0
    4e1a:	f8 94       	cli
    4e1c:	58 c3       	rjmp	.+1712   	; 0x54ce <_exit>

00004e1e <memcpy>:
    4e1e:	fb 01       	movw	r30, r22
    4e20:	dc 01       	movw	r26, r24
    4e22:	02 c0       	rjmp	.+4      	; 0x4e28 <memcpy+0xa>
    4e24:	01 90       	ld	r0, Z+
    4e26:	0d 92       	st	X+, r0
    4e28:	41 50       	subi	r20, 0x01	; 1
    4e2a:	50 40       	sbci	r21, 0x00	; 0
    4e2c:	d8 f7       	brcc	.-10     	; 0x4e24 <memcpy+0x6>
    4e2e:	08 95       	ret

00004e30 <memset>:
    4e30:	dc 01       	movw	r26, r24
    4e32:	01 c0       	rjmp	.+2      	; 0x4e36 <memset+0x6>
    4e34:	6d 93       	st	X+, r22
    4e36:	41 50       	subi	r20, 0x01	; 1
    4e38:	50 40       	sbci	r21, 0x00	; 0
    4e3a:	e0 f7       	brcc	.-8      	; 0x4e34 <memset+0x4>
    4e3c:	08 95       	ret

00004e3e <strcat>:
    4e3e:	fb 01       	movw	r30, r22
    4e40:	dc 01       	movw	r26, r24
    4e42:	0d 90       	ld	r0, X+
    4e44:	00 20       	and	r0, r0
    4e46:	e9 f7       	brne	.-6      	; 0x4e42 <strcat+0x4>
    4e48:	11 97       	sbiw	r26, 0x01	; 1
    4e4a:	01 90       	ld	r0, Z+
    4e4c:	0d 92       	st	X+, r0
    4e4e:	00 20       	and	r0, r0
    4e50:	e1 f7       	brne	.-8      	; 0x4e4a <strcat+0xc>
    4e52:	08 95       	ret

00004e54 <strcpy>:
    4e54:	fb 01       	movw	r30, r22
    4e56:	dc 01       	movw	r26, r24
    4e58:	01 90       	ld	r0, Z+
    4e5a:	0d 92       	st	X+, r0
    4e5c:	00 20       	and	r0, r0
    4e5e:	e1 f7       	brne	.-8      	; 0x4e58 <strcpy+0x4>
    4e60:	08 95       	ret

00004e62 <strncasecmp>:
    4e62:	fb 01       	movw	r30, r22
    4e64:	dc 01       	movw	r26, r24
    4e66:	41 50       	subi	r20, 0x01	; 1
    4e68:	50 40       	sbci	r21, 0x00	; 0
    4e6a:	88 f0       	brcs	.+34     	; 0x4e8e <strncasecmp+0x2c>
    4e6c:	8d 91       	ld	r24, X+
    4e6e:	81 34       	cpi	r24, 0x41	; 65
    4e70:	1c f0       	brlt	.+6      	; 0x4e78 <strncasecmp+0x16>
    4e72:	8b 35       	cpi	r24, 0x5B	; 91
    4e74:	0c f4       	brge	.+2      	; 0x4e78 <strncasecmp+0x16>
    4e76:	80 5e       	subi	r24, 0xE0	; 224
    4e78:	61 91       	ld	r22, Z+
    4e7a:	61 34       	cpi	r22, 0x41	; 65
    4e7c:	1c f0       	brlt	.+6      	; 0x4e84 <strncasecmp+0x22>
    4e7e:	6b 35       	cpi	r22, 0x5B	; 91
    4e80:	0c f4       	brge	.+2      	; 0x4e84 <strncasecmp+0x22>
    4e82:	60 5e       	subi	r22, 0xE0	; 224
    4e84:	86 1b       	sub	r24, r22
    4e86:	61 11       	cpse	r22, r1
    4e88:	71 f3       	breq	.-36     	; 0x4e66 <strncasecmp+0x4>
    4e8a:	99 0b       	sbc	r25, r25
    4e8c:	08 95       	ret
    4e8e:	88 1b       	sub	r24, r24
    4e90:	fc cf       	rjmp	.-8      	; 0x4e8a <strncasecmp+0x28>

00004e92 <printf>:
    4e92:	cf 93       	push	r28
    4e94:	df 93       	push	r29
    4e96:	cd b7       	in	r28, 0x3d	; 61
    4e98:	de b7       	in	r29, 0x3e	; 62
    4e9a:	ae 01       	movw	r20, r28
    4e9c:	4a 5f       	subi	r20, 0xFA	; 250
    4e9e:	5f 4f       	sbci	r21, 0xFF	; 255
    4ea0:	fa 01       	movw	r30, r20
    4ea2:	61 91       	ld	r22, Z+
    4ea4:	71 91       	ld	r23, Z+
    4ea6:	af 01       	movw	r20, r30
    4ea8:	80 91 90 0a 	lds	r24, 0x0A90	; 0x800a90 <__iob+0x2>
    4eac:	90 91 91 0a 	lds	r25, 0x0A91	; 0x800a91 <__iob+0x3>
    4eb0:	61 d0       	rcall	.+194    	; 0x4f74 <vfprintf>
    4eb2:	df 91       	pop	r29
    4eb4:	cf 91       	pop	r28
    4eb6:	08 95       	ret

00004eb8 <puts>:
    4eb8:	0f 93       	push	r16
    4eba:	1f 93       	push	r17
    4ebc:	cf 93       	push	r28
    4ebe:	df 93       	push	r29
    4ec0:	e0 91 90 0a 	lds	r30, 0x0A90	; 0x800a90 <__iob+0x2>
    4ec4:	f0 91 91 0a 	lds	r31, 0x0A91	; 0x800a91 <__iob+0x3>
    4ec8:	23 81       	ldd	r18, Z+3	; 0x03
    4eca:	21 ff       	sbrs	r18, 1
    4ecc:	1b c0       	rjmp	.+54     	; 0x4f04 <puts+0x4c>
    4ece:	8c 01       	movw	r16, r24
    4ed0:	d0 e0       	ldi	r29, 0x00	; 0
    4ed2:	c0 e0       	ldi	r28, 0x00	; 0
    4ed4:	f8 01       	movw	r30, r16
    4ed6:	81 91       	ld	r24, Z+
    4ed8:	8f 01       	movw	r16, r30
    4eda:	60 91 90 0a 	lds	r22, 0x0A90	; 0x800a90 <__iob+0x2>
    4ede:	70 91 91 0a 	lds	r23, 0x0A91	; 0x800a91 <__iob+0x3>
    4ee2:	db 01       	movw	r26, r22
    4ee4:	18 96       	adiw	r26, 0x08	; 8
    4ee6:	ed 91       	ld	r30, X+
    4ee8:	fc 91       	ld	r31, X
    4eea:	19 97       	sbiw	r26, 0x09	; 9
    4eec:	88 23       	and	r24, r24
    4eee:	31 f0       	breq	.+12     	; 0x4efc <puts+0x44>
    4ef0:	19 95       	eicall
    4ef2:	89 2b       	or	r24, r25
    4ef4:	79 f3       	breq	.-34     	; 0x4ed4 <puts+0x1c>
    4ef6:	df ef       	ldi	r29, 0xFF	; 255
    4ef8:	cf ef       	ldi	r28, 0xFF	; 255
    4efa:	ec cf       	rjmp	.-40     	; 0x4ed4 <puts+0x1c>
    4efc:	8a e0       	ldi	r24, 0x0A	; 10
    4efe:	19 95       	eicall
    4f00:	89 2b       	or	r24, r25
    4f02:	19 f0       	breq	.+6      	; 0x4f0a <puts+0x52>
    4f04:	8f ef       	ldi	r24, 0xFF	; 255
    4f06:	9f ef       	ldi	r25, 0xFF	; 255
    4f08:	02 c0       	rjmp	.+4      	; 0x4f0e <puts+0x56>
    4f0a:	8d 2f       	mov	r24, r29
    4f0c:	9c 2f       	mov	r25, r28
    4f0e:	df 91       	pop	r29
    4f10:	cf 91       	pop	r28
    4f12:	1f 91       	pop	r17
    4f14:	0f 91       	pop	r16
    4f16:	08 95       	ret

00004f18 <sprintf>:
    4f18:	0f 93       	push	r16
    4f1a:	1f 93       	push	r17
    4f1c:	cf 93       	push	r28
    4f1e:	df 93       	push	r29
    4f20:	cd b7       	in	r28, 0x3d	; 61
    4f22:	de b7       	in	r29, 0x3e	; 62
    4f24:	2e 97       	sbiw	r28, 0x0e	; 14
    4f26:	0f b6       	in	r0, 0x3f	; 63
    4f28:	f8 94       	cli
    4f2a:	de bf       	out	0x3e, r29	; 62
    4f2c:	0f be       	out	0x3f, r0	; 63
    4f2e:	cd bf       	out	0x3d, r28	; 61
    4f30:	0e 89       	ldd	r16, Y+22	; 0x16
    4f32:	1f 89       	ldd	r17, Y+23	; 0x17
    4f34:	86 e0       	ldi	r24, 0x06	; 6
    4f36:	8c 83       	std	Y+4, r24	; 0x04
    4f38:	1a 83       	std	Y+2, r17	; 0x02
    4f3a:	09 83       	std	Y+1, r16	; 0x01
    4f3c:	8f ef       	ldi	r24, 0xFF	; 255
    4f3e:	9f e7       	ldi	r25, 0x7F	; 127
    4f40:	9e 83       	std	Y+6, r25	; 0x06
    4f42:	8d 83       	std	Y+5, r24	; 0x05
    4f44:	ae 01       	movw	r20, r28
    4f46:	46 5e       	subi	r20, 0xE6	; 230
    4f48:	5f 4f       	sbci	r21, 0xFF	; 255
    4f4a:	68 8d       	ldd	r22, Y+24	; 0x18
    4f4c:	79 8d       	ldd	r23, Y+25	; 0x19
    4f4e:	ce 01       	movw	r24, r28
    4f50:	01 96       	adiw	r24, 0x01	; 1
    4f52:	10 d0       	rcall	.+32     	; 0x4f74 <vfprintf>
    4f54:	ef 81       	ldd	r30, Y+7	; 0x07
    4f56:	f8 85       	ldd	r31, Y+8	; 0x08
    4f58:	e0 0f       	add	r30, r16
    4f5a:	f1 1f       	adc	r31, r17
    4f5c:	10 82       	st	Z, r1
    4f5e:	2e 96       	adiw	r28, 0x0e	; 14
    4f60:	0f b6       	in	r0, 0x3f	; 63
    4f62:	f8 94       	cli
    4f64:	de bf       	out	0x3e, r29	; 62
    4f66:	0f be       	out	0x3f, r0	; 63
    4f68:	cd bf       	out	0x3d, r28	; 61
    4f6a:	df 91       	pop	r29
    4f6c:	cf 91       	pop	r28
    4f6e:	1f 91       	pop	r17
    4f70:	0f 91       	pop	r16
    4f72:	08 95       	ret

00004f74 <vfprintf>:
    4f74:	2f 92       	push	r2
    4f76:	3f 92       	push	r3
    4f78:	4f 92       	push	r4
    4f7a:	5f 92       	push	r5
    4f7c:	6f 92       	push	r6
    4f7e:	7f 92       	push	r7
    4f80:	8f 92       	push	r8
    4f82:	9f 92       	push	r9
    4f84:	af 92       	push	r10
    4f86:	bf 92       	push	r11
    4f88:	cf 92       	push	r12
    4f8a:	df 92       	push	r13
    4f8c:	ef 92       	push	r14
    4f8e:	ff 92       	push	r15
    4f90:	0f 93       	push	r16
    4f92:	1f 93       	push	r17
    4f94:	cf 93       	push	r28
    4f96:	df 93       	push	r29
    4f98:	cd b7       	in	r28, 0x3d	; 61
    4f9a:	de b7       	in	r29, 0x3e	; 62
    4f9c:	2b 97       	sbiw	r28, 0x0b	; 11
    4f9e:	0f b6       	in	r0, 0x3f	; 63
    4fa0:	f8 94       	cli
    4fa2:	de bf       	out	0x3e, r29	; 62
    4fa4:	0f be       	out	0x3f, r0	; 63
    4fa6:	cd bf       	out	0x3d, r28	; 61
    4fa8:	6c 01       	movw	r12, r24
    4faa:	7b 01       	movw	r14, r22
    4fac:	8a 01       	movw	r16, r20
    4fae:	fc 01       	movw	r30, r24
    4fb0:	17 82       	std	Z+7, r1	; 0x07
    4fb2:	16 82       	std	Z+6, r1	; 0x06
    4fb4:	83 81       	ldd	r24, Z+3	; 0x03
    4fb6:	81 ff       	sbrs	r24, 1
    4fb8:	bf c1       	rjmp	.+894    	; 0x5338 <vfprintf+0x3c4>
    4fba:	ce 01       	movw	r24, r28
    4fbc:	01 96       	adiw	r24, 0x01	; 1
    4fbe:	3c 01       	movw	r6, r24
    4fc0:	f6 01       	movw	r30, r12
    4fc2:	93 81       	ldd	r25, Z+3	; 0x03
    4fc4:	f7 01       	movw	r30, r14
    4fc6:	93 fd       	sbrc	r25, 3
    4fc8:	85 91       	lpm	r24, Z+
    4fca:	93 ff       	sbrs	r25, 3
    4fcc:	81 91       	ld	r24, Z+
    4fce:	7f 01       	movw	r14, r30
    4fd0:	88 23       	and	r24, r24
    4fd2:	09 f4       	brne	.+2      	; 0x4fd6 <vfprintf+0x62>
    4fd4:	ad c1       	rjmp	.+858    	; 0x5330 <vfprintf+0x3bc>
    4fd6:	85 32       	cpi	r24, 0x25	; 37
    4fd8:	39 f4       	brne	.+14     	; 0x4fe8 <vfprintf+0x74>
    4fda:	93 fd       	sbrc	r25, 3
    4fdc:	85 91       	lpm	r24, Z+
    4fde:	93 ff       	sbrs	r25, 3
    4fe0:	81 91       	ld	r24, Z+
    4fe2:	7f 01       	movw	r14, r30
    4fe4:	85 32       	cpi	r24, 0x25	; 37
    4fe6:	21 f4       	brne	.+8      	; 0x4ff0 <vfprintf+0x7c>
    4fe8:	b6 01       	movw	r22, r12
    4fea:	90 e0       	ldi	r25, 0x00	; 0
    4fec:	d6 d1       	rcall	.+940    	; 0x539a <fputc>
    4fee:	e8 cf       	rjmp	.-48     	; 0x4fc0 <vfprintf+0x4c>
    4ff0:	91 2c       	mov	r9, r1
    4ff2:	21 2c       	mov	r2, r1
    4ff4:	31 2c       	mov	r3, r1
    4ff6:	ff e1       	ldi	r31, 0x1F	; 31
    4ff8:	f3 15       	cp	r31, r3
    4ffa:	d8 f0       	brcs	.+54     	; 0x5032 <vfprintf+0xbe>
    4ffc:	8b 32       	cpi	r24, 0x2B	; 43
    4ffe:	79 f0       	breq	.+30     	; 0x501e <vfprintf+0xaa>
    5000:	38 f4       	brcc	.+14     	; 0x5010 <vfprintf+0x9c>
    5002:	80 32       	cpi	r24, 0x20	; 32
    5004:	79 f0       	breq	.+30     	; 0x5024 <vfprintf+0xb0>
    5006:	83 32       	cpi	r24, 0x23	; 35
    5008:	a1 f4       	brne	.+40     	; 0x5032 <vfprintf+0xbe>
    500a:	23 2d       	mov	r18, r3
    500c:	20 61       	ori	r18, 0x10	; 16
    500e:	1d c0       	rjmp	.+58     	; 0x504a <vfprintf+0xd6>
    5010:	8d 32       	cpi	r24, 0x2D	; 45
    5012:	61 f0       	breq	.+24     	; 0x502c <vfprintf+0xb8>
    5014:	80 33       	cpi	r24, 0x30	; 48
    5016:	69 f4       	brne	.+26     	; 0x5032 <vfprintf+0xbe>
    5018:	23 2d       	mov	r18, r3
    501a:	21 60       	ori	r18, 0x01	; 1
    501c:	16 c0       	rjmp	.+44     	; 0x504a <vfprintf+0xd6>
    501e:	83 2d       	mov	r24, r3
    5020:	82 60       	ori	r24, 0x02	; 2
    5022:	38 2e       	mov	r3, r24
    5024:	e3 2d       	mov	r30, r3
    5026:	e4 60       	ori	r30, 0x04	; 4
    5028:	3e 2e       	mov	r3, r30
    502a:	2a c0       	rjmp	.+84     	; 0x5080 <vfprintf+0x10c>
    502c:	f3 2d       	mov	r31, r3
    502e:	f8 60       	ori	r31, 0x08	; 8
    5030:	1d c0       	rjmp	.+58     	; 0x506c <vfprintf+0xf8>
    5032:	37 fc       	sbrc	r3, 7
    5034:	2d c0       	rjmp	.+90     	; 0x5090 <vfprintf+0x11c>
    5036:	20 ed       	ldi	r18, 0xD0	; 208
    5038:	28 0f       	add	r18, r24
    503a:	2a 30       	cpi	r18, 0x0A	; 10
    503c:	40 f0       	brcs	.+16     	; 0x504e <vfprintf+0xda>
    503e:	8e 32       	cpi	r24, 0x2E	; 46
    5040:	b9 f4       	brne	.+46     	; 0x5070 <vfprintf+0xfc>
    5042:	36 fc       	sbrc	r3, 6
    5044:	75 c1       	rjmp	.+746    	; 0x5330 <vfprintf+0x3bc>
    5046:	23 2d       	mov	r18, r3
    5048:	20 64       	ori	r18, 0x40	; 64
    504a:	32 2e       	mov	r3, r18
    504c:	19 c0       	rjmp	.+50     	; 0x5080 <vfprintf+0x10c>
    504e:	36 fe       	sbrs	r3, 6
    5050:	06 c0       	rjmp	.+12     	; 0x505e <vfprintf+0xea>
    5052:	8a e0       	ldi	r24, 0x0A	; 10
    5054:	98 9e       	mul	r9, r24
    5056:	20 0d       	add	r18, r0
    5058:	11 24       	eor	r1, r1
    505a:	92 2e       	mov	r9, r18
    505c:	11 c0       	rjmp	.+34     	; 0x5080 <vfprintf+0x10c>
    505e:	ea e0       	ldi	r30, 0x0A	; 10
    5060:	2e 9e       	mul	r2, r30
    5062:	20 0d       	add	r18, r0
    5064:	11 24       	eor	r1, r1
    5066:	22 2e       	mov	r2, r18
    5068:	f3 2d       	mov	r31, r3
    506a:	f0 62       	ori	r31, 0x20	; 32
    506c:	3f 2e       	mov	r3, r31
    506e:	08 c0       	rjmp	.+16     	; 0x5080 <vfprintf+0x10c>
    5070:	8c 36       	cpi	r24, 0x6C	; 108
    5072:	21 f4       	brne	.+8      	; 0x507c <vfprintf+0x108>
    5074:	83 2d       	mov	r24, r3
    5076:	80 68       	ori	r24, 0x80	; 128
    5078:	38 2e       	mov	r3, r24
    507a:	02 c0       	rjmp	.+4      	; 0x5080 <vfprintf+0x10c>
    507c:	88 36       	cpi	r24, 0x68	; 104
    507e:	41 f4       	brne	.+16     	; 0x5090 <vfprintf+0x11c>
    5080:	f7 01       	movw	r30, r14
    5082:	93 fd       	sbrc	r25, 3
    5084:	85 91       	lpm	r24, Z+
    5086:	93 ff       	sbrs	r25, 3
    5088:	81 91       	ld	r24, Z+
    508a:	7f 01       	movw	r14, r30
    508c:	81 11       	cpse	r24, r1
    508e:	b3 cf       	rjmp	.-154    	; 0x4ff6 <vfprintf+0x82>
    5090:	98 2f       	mov	r25, r24
    5092:	9f 7d       	andi	r25, 0xDF	; 223
    5094:	95 54       	subi	r25, 0x45	; 69
    5096:	93 30       	cpi	r25, 0x03	; 3
    5098:	28 f4       	brcc	.+10     	; 0x50a4 <vfprintf+0x130>
    509a:	0c 5f       	subi	r16, 0xFC	; 252
    509c:	1f 4f       	sbci	r17, 0xFF	; 255
    509e:	9f e3       	ldi	r25, 0x3F	; 63
    50a0:	99 83       	std	Y+1, r25	; 0x01
    50a2:	0d c0       	rjmp	.+26     	; 0x50be <vfprintf+0x14a>
    50a4:	83 36       	cpi	r24, 0x63	; 99
    50a6:	31 f0       	breq	.+12     	; 0x50b4 <vfprintf+0x140>
    50a8:	83 37       	cpi	r24, 0x73	; 115
    50aa:	71 f0       	breq	.+28     	; 0x50c8 <vfprintf+0x154>
    50ac:	83 35       	cpi	r24, 0x53	; 83
    50ae:	09 f0       	breq	.+2      	; 0x50b2 <vfprintf+0x13e>
    50b0:	55 c0       	rjmp	.+170    	; 0x515c <vfprintf+0x1e8>
    50b2:	20 c0       	rjmp	.+64     	; 0x50f4 <vfprintf+0x180>
    50b4:	f8 01       	movw	r30, r16
    50b6:	80 81       	ld	r24, Z
    50b8:	89 83       	std	Y+1, r24	; 0x01
    50ba:	0e 5f       	subi	r16, 0xFE	; 254
    50bc:	1f 4f       	sbci	r17, 0xFF	; 255
    50be:	88 24       	eor	r8, r8
    50c0:	83 94       	inc	r8
    50c2:	91 2c       	mov	r9, r1
    50c4:	53 01       	movw	r10, r6
    50c6:	12 c0       	rjmp	.+36     	; 0x50ec <vfprintf+0x178>
    50c8:	28 01       	movw	r4, r16
    50ca:	f2 e0       	ldi	r31, 0x02	; 2
    50cc:	4f 0e       	add	r4, r31
    50ce:	51 1c       	adc	r5, r1
    50d0:	f8 01       	movw	r30, r16
    50d2:	a0 80       	ld	r10, Z
    50d4:	b1 80       	ldd	r11, Z+1	; 0x01
    50d6:	36 fe       	sbrs	r3, 6
    50d8:	03 c0       	rjmp	.+6      	; 0x50e0 <vfprintf+0x16c>
    50da:	69 2d       	mov	r22, r9
    50dc:	70 e0       	ldi	r23, 0x00	; 0
    50de:	02 c0       	rjmp	.+4      	; 0x50e4 <vfprintf+0x170>
    50e0:	6f ef       	ldi	r22, 0xFF	; 255
    50e2:	7f ef       	ldi	r23, 0xFF	; 255
    50e4:	c5 01       	movw	r24, r10
    50e6:	4e d1       	rcall	.+668    	; 0x5384 <strnlen>
    50e8:	4c 01       	movw	r8, r24
    50ea:	82 01       	movw	r16, r4
    50ec:	f3 2d       	mov	r31, r3
    50ee:	ff 77       	andi	r31, 0x7F	; 127
    50f0:	3f 2e       	mov	r3, r31
    50f2:	15 c0       	rjmp	.+42     	; 0x511e <vfprintf+0x1aa>
    50f4:	28 01       	movw	r4, r16
    50f6:	22 e0       	ldi	r18, 0x02	; 2
    50f8:	42 0e       	add	r4, r18
    50fa:	51 1c       	adc	r5, r1
    50fc:	f8 01       	movw	r30, r16
    50fe:	a0 80       	ld	r10, Z
    5100:	b1 80       	ldd	r11, Z+1	; 0x01
    5102:	36 fe       	sbrs	r3, 6
    5104:	03 c0       	rjmp	.+6      	; 0x510c <vfprintf+0x198>
    5106:	69 2d       	mov	r22, r9
    5108:	70 e0       	ldi	r23, 0x00	; 0
    510a:	02 c0       	rjmp	.+4      	; 0x5110 <vfprintf+0x19c>
    510c:	6f ef       	ldi	r22, 0xFF	; 255
    510e:	7f ef       	ldi	r23, 0xFF	; 255
    5110:	c5 01       	movw	r24, r10
    5112:	2d d1       	rcall	.+602    	; 0x536e <strnlen_P>
    5114:	4c 01       	movw	r8, r24
    5116:	f3 2d       	mov	r31, r3
    5118:	f0 68       	ori	r31, 0x80	; 128
    511a:	3f 2e       	mov	r3, r31
    511c:	82 01       	movw	r16, r4
    511e:	33 fc       	sbrc	r3, 3
    5120:	19 c0       	rjmp	.+50     	; 0x5154 <vfprintf+0x1e0>
    5122:	82 2d       	mov	r24, r2
    5124:	90 e0       	ldi	r25, 0x00	; 0
    5126:	88 16       	cp	r8, r24
    5128:	99 06       	cpc	r9, r25
    512a:	a0 f4       	brcc	.+40     	; 0x5154 <vfprintf+0x1e0>
    512c:	b6 01       	movw	r22, r12
    512e:	80 e2       	ldi	r24, 0x20	; 32
    5130:	90 e0       	ldi	r25, 0x00	; 0
    5132:	33 d1       	rcall	.+614    	; 0x539a <fputc>
    5134:	2a 94       	dec	r2
    5136:	f5 cf       	rjmp	.-22     	; 0x5122 <vfprintf+0x1ae>
    5138:	f5 01       	movw	r30, r10
    513a:	37 fc       	sbrc	r3, 7
    513c:	85 91       	lpm	r24, Z+
    513e:	37 fe       	sbrs	r3, 7
    5140:	81 91       	ld	r24, Z+
    5142:	5f 01       	movw	r10, r30
    5144:	b6 01       	movw	r22, r12
    5146:	90 e0       	ldi	r25, 0x00	; 0
    5148:	28 d1       	rcall	.+592    	; 0x539a <fputc>
    514a:	21 10       	cpse	r2, r1
    514c:	2a 94       	dec	r2
    514e:	21 e0       	ldi	r18, 0x01	; 1
    5150:	82 1a       	sub	r8, r18
    5152:	91 08       	sbc	r9, r1
    5154:	81 14       	cp	r8, r1
    5156:	91 04       	cpc	r9, r1
    5158:	79 f7       	brne	.-34     	; 0x5138 <vfprintf+0x1c4>
    515a:	e1 c0       	rjmp	.+450    	; 0x531e <vfprintf+0x3aa>
    515c:	84 36       	cpi	r24, 0x64	; 100
    515e:	11 f0       	breq	.+4      	; 0x5164 <vfprintf+0x1f0>
    5160:	89 36       	cpi	r24, 0x69	; 105
    5162:	39 f5       	brne	.+78     	; 0x51b2 <vfprintf+0x23e>
    5164:	f8 01       	movw	r30, r16
    5166:	37 fe       	sbrs	r3, 7
    5168:	07 c0       	rjmp	.+14     	; 0x5178 <vfprintf+0x204>
    516a:	60 81       	ld	r22, Z
    516c:	71 81       	ldd	r23, Z+1	; 0x01
    516e:	82 81       	ldd	r24, Z+2	; 0x02
    5170:	93 81       	ldd	r25, Z+3	; 0x03
    5172:	0c 5f       	subi	r16, 0xFC	; 252
    5174:	1f 4f       	sbci	r17, 0xFF	; 255
    5176:	08 c0       	rjmp	.+16     	; 0x5188 <vfprintf+0x214>
    5178:	60 81       	ld	r22, Z
    517a:	71 81       	ldd	r23, Z+1	; 0x01
    517c:	07 2e       	mov	r0, r23
    517e:	00 0c       	add	r0, r0
    5180:	88 0b       	sbc	r24, r24
    5182:	99 0b       	sbc	r25, r25
    5184:	0e 5f       	subi	r16, 0xFE	; 254
    5186:	1f 4f       	sbci	r17, 0xFF	; 255
    5188:	f3 2d       	mov	r31, r3
    518a:	ff 76       	andi	r31, 0x6F	; 111
    518c:	3f 2e       	mov	r3, r31
    518e:	97 ff       	sbrs	r25, 7
    5190:	09 c0       	rjmp	.+18     	; 0x51a4 <vfprintf+0x230>
    5192:	90 95       	com	r25
    5194:	80 95       	com	r24
    5196:	70 95       	com	r23
    5198:	61 95       	neg	r22
    519a:	7f 4f       	sbci	r23, 0xFF	; 255
    519c:	8f 4f       	sbci	r24, 0xFF	; 255
    519e:	9f 4f       	sbci	r25, 0xFF	; 255
    51a0:	f0 68       	ori	r31, 0x80	; 128
    51a2:	3f 2e       	mov	r3, r31
    51a4:	2a e0       	ldi	r18, 0x0A	; 10
    51a6:	30 e0       	ldi	r19, 0x00	; 0
    51a8:	a3 01       	movw	r20, r6
    51aa:	33 d1       	rcall	.+614    	; 0x5412 <__ultoa_invert>
    51ac:	88 2e       	mov	r8, r24
    51ae:	86 18       	sub	r8, r6
    51b0:	44 c0       	rjmp	.+136    	; 0x523a <vfprintf+0x2c6>
    51b2:	85 37       	cpi	r24, 0x75	; 117
    51b4:	31 f4       	brne	.+12     	; 0x51c2 <vfprintf+0x24e>
    51b6:	23 2d       	mov	r18, r3
    51b8:	2f 7e       	andi	r18, 0xEF	; 239
    51ba:	b2 2e       	mov	r11, r18
    51bc:	2a e0       	ldi	r18, 0x0A	; 10
    51be:	30 e0       	ldi	r19, 0x00	; 0
    51c0:	25 c0       	rjmp	.+74     	; 0x520c <vfprintf+0x298>
    51c2:	93 2d       	mov	r25, r3
    51c4:	99 7f       	andi	r25, 0xF9	; 249
    51c6:	b9 2e       	mov	r11, r25
    51c8:	8f 36       	cpi	r24, 0x6F	; 111
    51ca:	c1 f0       	breq	.+48     	; 0x51fc <vfprintf+0x288>
    51cc:	18 f4       	brcc	.+6      	; 0x51d4 <vfprintf+0x260>
    51ce:	88 35       	cpi	r24, 0x58	; 88
    51d0:	79 f0       	breq	.+30     	; 0x51f0 <vfprintf+0x27c>
    51d2:	ae c0       	rjmp	.+348    	; 0x5330 <vfprintf+0x3bc>
    51d4:	80 37       	cpi	r24, 0x70	; 112
    51d6:	19 f0       	breq	.+6      	; 0x51de <vfprintf+0x26a>
    51d8:	88 37       	cpi	r24, 0x78	; 120
    51da:	21 f0       	breq	.+8      	; 0x51e4 <vfprintf+0x270>
    51dc:	a9 c0       	rjmp	.+338    	; 0x5330 <vfprintf+0x3bc>
    51de:	e9 2f       	mov	r30, r25
    51e0:	e0 61       	ori	r30, 0x10	; 16
    51e2:	be 2e       	mov	r11, r30
    51e4:	b4 fe       	sbrs	r11, 4
    51e6:	0d c0       	rjmp	.+26     	; 0x5202 <vfprintf+0x28e>
    51e8:	fb 2d       	mov	r31, r11
    51ea:	f4 60       	ori	r31, 0x04	; 4
    51ec:	bf 2e       	mov	r11, r31
    51ee:	09 c0       	rjmp	.+18     	; 0x5202 <vfprintf+0x28e>
    51f0:	34 fe       	sbrs	r3, 4
    51f2:	0a c0       	rjmp	.+20     	; 0x5208 <vfprintf+0x294>
    51f4:	29 2f       	mov	r18, r25
    51f6:	26 60       	ori	r18, 0x06	; 6
    51f8:	b2 2e       	mov	r11, r18
    51fa:	06 c0       	rjmp	.+12     	; 0x5208 <vfprintf+0x294>
    51fc:	28 e0       	ldi	r18, 0x08	; 8
    51fe:	30 e0       	ldi	r19, 0x00	; 0
    5200:	05 c0       	rjmp	.+10     	; 0x520c <vfprintf+0x298>
    5202:	20 e1       	ldi	r18, 0x10	; 16
    5204:	30 e0       	ldi	r19, 0x00	; 0
    5206:	02 c0       	rjmp	.+4      	; 0x520c <vfprintf+0x298>
    5208:	20 e1       	ldi	r18, 0x10	; 16
    520a:	32 e0       	ldi	r19, 0x02	; 2
    520c:	f8 01       	movw	r30, r16
    520e:	b7 fe       	sbrs	r11, 7
    5210:	07 c0       	rjmp	.+14     	; 0x5220 <vfprintf+0x2ac>
    5212:	60 81       	ld	r22, Z
    5214:	71 81       	ldd	r23, Z+1	; 0x01
    5216:	82 81       	ldd	r24, Z+2	; 0x02
    5218:	93 81       	ldd	r25, Z+3	; 0x03
    521a:	0c 5f       	subi	r16, 0xFC	; 252
    521c:	1f 4f       	sbci	r17, 0xFF	; 255
    521e:	06 c0       	rjmp	.+12     	; 0x522c <vfprintf+0x2b8>
    5220:	60 81       	ld	r22, Z
    5222:	71 81       	ldd	r23, Z+1	; 0x01
    5224:	80 e0       	ldi	r24, 0x00	; 0
    5226:	90 e0       	ldi	r25, 0x00	; 0
    5228:	0e 5f       	subi	r16, 0xFE	; 254
    522a:	1f 4f       	sbci	r17, 0xFF	; 255
    522c:	a3 01       	movw	r20, r6
    522e:	f1 d0       	rcall	.+482    	; 0x5412 <__ultoa_invert>
    5230:	88 2e       	mov	r8, r24
    5232:	86 18       	sub	r8, r6
    5234:	fb 2d       	mov	r31, r11
    5236:	ff 77       	andi	r31, 0x7F	; 127
    5238:	3f 2e       	mov	r3, r31
    523a:	36 fe       	sbrs	r3, 6
    523c:	0d c0       	rjmp	.+26     	; 0x5258 <vfprintf+0x2e4>
    523e:	23 2d       	mov	r18, r3
    5240:	2e 7f       	andi	r18, 0xFE	; 254
    5242:	a2 2e       	mov	r10, r18
    5244:	89 14       	cp	r8, r9
    5246:	58 f4       	brcc	.+22     	; 0x525e <vfprintf+0x2ea>
    5248:	34 fe       	sbrs	r3, 4
    524a:	0b c0       	rjmp	.+22     	; 0x5262 <vfprintf+0x2ee>
    524c:	32 fc       	sbrc	r3, 2
    524e:	09 c0       	rjmp	.+18     	; 0x5262 <vfprintf+0x2ee>
    5250:	83 2d       	mov	r24, r3
    5252:	8e 7e       	andi	r24, 0xEE	; 238
    5254:	a8 2e       	mov	r10, r24
    5256:	05 c0       	rjmp	.+10     	; 0x5262 <vfprintf+0x2ee>
    5258:	b8 2c       	mov	r11, r8
    525a:	a3 2c       	mov	r10, r3
    525c:	03 c0       	rjmp	.+6      	; 0x5264 <vfprintf+0x2f0>
    525e:	b8 2c       	mov	r11, r8
    5260:	01 c0       	rjmp	.+2      	; 0x5264 <vfprintf+0x2f0>
    5262:	b9 2c       	mov	r11, r9
    5264:	a4 fe       	sbrs	r10, 4
    5266:	0f c0       	rjmp	.+30     	; 0x5286 <vfprintf+0x312>
    5268:	fe 01       	movw	r30, r28
    526a:	e8 0d       	add	r30, r8
    526c:	f1 1d       	adc	r31, r1
    526e:	80 81       	ld	r24, Z
    5270:	80 33       	cpi	r24, 0x30	; 48
    5272:	21 f4       	brne	.+8      	; 0x527c <vfprintf+0x308>
    5274:	9a 2d       	mov	r25, r10
    5276:	99 7e       	andi	r25, 0xE9	; 233
    5278:	a9 2e       	mov	r10, r25
    527a:	09 c0       	rjmp	.+18     	; 0x528e <vfprintf+0x31a>
    527c:	a2 fe       	sbrs	r10, 2
    527e:	06 c0       	rjmp	.+12     	; 0x528c <vfprintf+0x318>
    5280:	b3 94       	inc	r11
    5282:	b3 94       	inc	r11
    5284:	04 c0       	rjmp	.+8      	; 0x528e <vfprintf+0x31a>
    5286:	8a 2d       	mov	r24, r10
    5288:	86 78       	andi	r24, 0x86	; 134
    528a:	09 f0       	breq	.+2      	; 0x528e <vfprintf+0x31a>
    528c:	b3 94       	inc	r11
    528e:	a3 fc       	sbrc	r10, 3
    5290:	10 c0       	rjmp	.+32     	; 0x52b2 <vfprintf+0x33e>
    5292:	a0 fe       	sbrs	r10, 0
    5294:	06 c0       	rjmp	.+12     	; 0x52a2 <vfprintf+0x32e>
    5296:	b2 14       	cp	r11, r2
    5298:	80 f4       	brcc	.+32     	; 0x52ba <vfprintf+0x346>
    529a:	28 0c       	add	r2, r8
    529c:	92 2c       	mov	r9, r2
    529e:	9b 18       	sub	r9, r11
    52a0:	0d c0       	rjmp	.+26     	; 0x52bc <vfprintf+0x348>
    52a2:	b2 14       	cp	r11, r2
    52a4:	58 f4       	brcc	.+22     	; 0x52bc <vfprintf+0x348>
    52a6:	b6 01       	movw	r22, r12
    52a8:	80 e2       	ldi	r24, 0x20	; 32
    52aa:	90 e0       	ldi	r25, 0x00	; 0
    52ac:	76 d0       	rcall	.+236    	; 0x539a <fputc>
    52ae:	b3 94       	inc	r11
    52b0:	f8 cf       	rjmp	.-16     	; 0x52a2 <vfprintf+0x32e>
    52b2:	b2 14       	cp	r11, r2
    52b4:	18 f4       	brcc	.+6      	; 0x52bc <vfprintf+0x348>
    52b6:	2b 18       	sub	r2, r11
    52b8:	02 c0       	rjmp	.+4      	; 0x52be <vfprintf+0x34a>
    52ba:	98 2c       	mov	r9, r8
    52bc:	21 2c       	mov	r2, r1
    52be:	a4 fe       	sbrs	r10, 4
    52c0:	0f c0       	rjmp	.+30     	; 0x52e0 <vfprintf+0x36c>
    52c2:	b6 01       	movw	r22, r12
    52c4:	80 e3       	ldi	r24, 0x30	; 48
    52c6:	90 e0       	ldi	r25, 0x00	; 0
    52c8:	68 d0       	rcall	.+208    	; 0x539a <fputc>
    52ca:	a2 fe       	sbrs	r10, 2
    52cc:	16 c0       	rjmp	.+44     	; 0x52fa <vfprintf+0x386>
    52ce:	a1 fc       	sbrc	r10, 1
    52d0:	03 c0       	rjmp	.+6      	; 0x52d8 <vfprintf+0x364>
    52d2:	88 e7       	ldi	r24, 0x78	; 120
    52d4:	90 e0       	ldi	r25, 0x00	; 0
    52d6:	02 c0       	rjmp	.+4      	; 0x52dc <vfprintf+0x368>
    52d8:	88 e5       	ldi	r24, 0x58	; 88
    52da:	90 e0       	ldi	r25, 0x00	; 0
    52dc:	b6 01       	movw	r22, r12
    52de:	0c c0       	rjmp	.+24     	; 0x52f8 <vfprintf+0x384>
    52e0:	8a 2d       	mov	r24, r10
    52e2:	86 78       	andi	r24, 0x86	; 134
    52e4:	51 f0       	breq	.+20     	; 0x52fa <vfprintf+0x386>
    52e6:	a1 fe       	sbrs	r10, 1
    52e8:	02 c0       	rjmp	.+4      	; 0x52ee <vfprintf+0x37a>
    52ea:	8b e2       	ldi	r24, 0x2B	; 43
    52ec:	01 c0       	rjmp	.+2      	; 0x52f0 <vfprintf+0x37c>
    52ee:	80 e2       	ldi	r24, 0x20	; 32
    52f0:	a7 fc       	sbrc	r10, 7
    52f2:	8d e2       	ldi	r24, 0x2D	; 45
    52f4:	b6 01       	movw	r22, r12
    52f6:	90 e0       	ldi	r25, 0x00	; 0
    52f8:	50 d0       	rcall	.+160    	; 0x539a <fputc>
    52fa:	89 14       	cp	r8, r9
    52fc:	30 f4       	brcc	.+12     	; 0x530a <vfprintf+0x396>
    52fe:	b6 01       	movw	r22, r12
    5300:	80 e3       	ldi	r24, 0x30	; 48
    5302:	90 e0       	ldi	r25, 0x00	; 0
    5304:	4a d0       	rcall	.+148    	; 0x539a <fputc>
    5306:	9a 94       	dec	r9
    5308:	f8 cf       	rjmp	.-16     	; 0x52fa <vfprintf+0x386>
    530a:	8a 94       	dec	r8
    530c:	f3 01       	movw	r30, r6
    530e:	e8 0d       	add	r30, r8
    5310:	f1 1d       	adc	r31, r1
    5312:	80 81       	ld	r24, Z
    5314:	b6 01       	movw	r22, r12
    5316:	90 e0       	ldi	r25, 0x00	; 0
    5318:	40 d0       	rcall	.+128    	; 0x539a <fputc>
    531a:	81 10       	cpse	r8, r1
    531c:	f6 cf       	rjmp	.-20     	; 0x530a <vfprintf+0x396>
    531e:	22 20       	and	r2, r2
    5320:	09 f4       	brne	.+2      	; 0x5324 <vfprintf+0x3b0>
    5322:	4e ce       	rjmp	.-868    	; 0x4fc0 <vfprintf+0x4c>
    5324:	b6 01       	movw	r22, r12
    5326:	80 e2       	ldi	r24, 0x20	; 32
    5328:	90 e0       	ldi	r25, 0x00	; 0
    532a:	37 d0       	rcall	.+110    	; 0x539a <fputc>
    532c:	2a 94       	dec	r2
    532e:	f7 cf       	rjmp	.-18     	; 0x531e <vfprintf+0x3aa>
    5330:	f6 01       	movw	r30, r12
    5332:	86 81       	ldd	r24, Z+6	; 0x06
    5334:	97 81       	ldd	r25, Z+7	; 0x07
    5336:	02 c0       	rjmp	.+4      	; 0x533c <vfprintf+0x3c8>
    5338:	8f ef       	ldi	r24, 0xFF	; 255
    533a:	9f ef       	ldi	r25, 0xFF	; 255
    533c:	2b 96       	adiw	r28, 0x0b	; 11
    533e:	0f b6       	in	r0, 0x3f	; 63
    5340:	f8 94       	cli
    5342:	de bf       	out	0x3e, r29	; 62
    5344:	0f be       	out	0x3f, r0	; 63
    5346:	cd bf       	out	0x3d, r28	; 61
    5348:	df 91       	pop	r29
    534a:	cf 91       	pop	r28
    534c:	1f 91       	pop	r17
    534e:	0f 91       	pop	r16
    5350:	ff 90       	pop	r15
    5352:	ef 90       	pop	r14
    5354:	df 90       	pop	r13
    5356:	cf 90       	pop	r12
    5358:	bf 90       	pop	r11
    535a:	af 90       	pop	r10
    535c:	9f 90       	pop	r9
    535e:	8f 90       	pop	r8
    5360:	7f 90       	pop	r7
    5362:	6f 90       	pop	r6
    5364:	5f 90       	pop	r5
    5366:	4f 90       	pop	r4
    5368:	3f 90       	pop	r3
    536a:	2f 90       	pop	r2
    536c:	08 95       	ret

0000536e <strnlen_P>:
    536e:	fc 01       	movw	r30, r24
    5370:	05 90       	lpm	r0, Z+
    5372:	61 50       	subi	r22, 0x01	; 1
    5374:	70 40       	sbci	r23, 0x00	; 0
    5376:	01 10       	cpse	r0, r1
    5378:	d8 f7       	brcc	.-10     	; 0x5370 <strnlen_P+0x2>
    537a:	80 95       	com	r24
    537c:	90 95       	com	r25
    537e:	8e 0f       	add	r24, r30
    5380:	9f 1f       	adc	r25, r31
    5382:	08 95       	ret

00005384 <strnlen>:
    5384:	fc 01       	movw	r30, r24
    5386:	61 50       	subi	r22, 0x01	; 1
    5388:	70 40       	sbci	r23, 0x00	; 0
    538a:	01 90       	ld	r0, Z+
    538c:	01 10       	cpse	r0, r1
    538e:	d8 f7       	brcc	.-10     	; 0x5386 <strnlen+0x2>
    5390:	80 95       	com	r24
    5392:	90 95       	com	r25
    5394:	8e 0f       	add	r24, r30
    5396:	9f 1f       	adc	r25, r31
    5398:	08 95       	ret

0000539a <fputc>:
    539a:	0f 93       	push	r16
    539c:	1f 93       	push	r17
    539e:	cf 93       	push	r28
    53a0:	df 93       	push	r29
    53a2:	fb 01       	movw	r30, r22
    53a4:	23 81       	ldd	r18, Z+3	; 0x03
    53a6:	21 fd       	sbrc	r18, 1
    53a8:	03 c0       	rjmp	.+6      	; 0x53b0 <fputc+0x16>
    53aa:	8f ef       	ldi	r24, 0xFF	; 255
    53ac:	9f ef       	ldi	r25, 0xFF	; 255
    53ae:	2c c0       	rjmp	.+88     	; 0x5408 <fputc+0x6e>
    53b0:	22 ff       	sbrs	r18, 2
    53b2:	16 c0       	rjmp	.+44     	; 0x53e0 <fputc+0x46>
    53b4:	46 81       	ldd	r20, Z+6	; 0x06
    53b6:	57 81       	ldd	r21, Z+7	; 0x07
    53b8:	24 81       	ldd	r18, Z+4	; 0x04
    53ba:	35 81       	ldd	r19, Z+5	; 0x05
    53bc:	42 17       	cp	r20, r18
    53be:	53 07       	cpc	r21, r19
    53c0:	44 f4       	brge	.+16     	; 0x53d2 <fputc+0x38>
    53c2:	a0 81       	ld	r26, Z
    53c4:	b1 81       	ldd	r27, Z+1	; 0x01
    53c6:	9d 01       	movw	r18, r26
    53c8:	2f 5f       	subi	r18, 0xFF	; 255
    53ca:	3f 4f       	sbci	r19, 0xFF	; 255
    53cc:	31 83       	std	Z+1, r19	; 0x01
    53ce:	20 83       	st	Z, r18
    53d0:	8c 93       	st	X, r24
    53d2:	26 81       	ldd	r18, Z+6	; 0x06
    53d4:	37 81       	ldd	r19, Z+7	; 0x07
    53d6:	2f 5f       	subi	r18, 0xFF	; 255
    53d8:	3f 4f       	sbci	r19, 0xFF	; 255
    53da:	37 83       	std	Z+7, r19	; 0x07
    53dc:	26 83       	std	Z+6, r18	; 0x06
    53de:	14 c0       	rjmp	.+40     	; 0x5408 <fputc+0x6e>
    53e0:	8b 01       	movw	r16, r22
    53e2:	ec 01       	movw	r28, r24
    53e4:	fb 01       	movw	r30, r22
    53e6:	00 84       	ldd	r0, Z+8	; 0x08
    53e8:	f1 85       	ldd	r31, Z+9	; 0x09
    53ea:	e0 2d       	mov	r30, r0
    53ec:	19 95       	eicall
    53ee:	89 2b       	or	r24, r25
    53f0:	e1 f6       	brne	.-72     	; 0x53aa <fputc+0x10>
    53f2:	d8 01       	movw	r26, r16
    53f4:	16 96       	adiw	r26, 0x06	; 6
    53f6:	8d 91       	ld	r24, X+
    53f8:	9c 91       	ld	r25, X
    53fa:	17 97       	sbiw	r26, 0x07	; 7
    53fc:	01 96       	adiw	r24, 0x01	; 1
    53fe:	17 96       	adiw	r26, 0x07	; 7
    5400:	9c 93       	st	X, r25
    5402:	8e 93       	st	-X, r24
    5404:	16 97       	sbiw	r26, 0x06	; 6
    5406:	ce 01       	movw	r24, r28
    5408:	df 91       	pop	r29
    540a:	cf 91       	pop	r28
    540c:	1f 91       	pop	r17
    540e:	0f 91       	pop	r16
    5410:	08 95       	ret

00005412 <__ultoa_invert>:
    5412:	fa 01       	movw	r30, r20
    5414:	aa 27       	eor	r26, r26
    5416:	28 30       	cpi	r18, 0x08	; 8
    5418:	51 f1       	breq	.+84     	; 0x546e <__ultoa_invert+0x5c>
    541a:	20 31       	cpi	r18, 0x10	; 16
    541c:	81 f1       	breq	.+96     	; 0x547e <__ultoa_invert+0x6c>
    541e:	e8 94       	clt
    5420:	6f 93       	push	r22
    5422:	6e 7f       	andi	r22, 0xFE	; 254
    5424:	6e 5f       	subi	r22, 0xFE	; 254
    5426:	7f 4f       	sbci	r23, 0xFF	; 255
    5428:	8f 4f       	sbci	r24, 0xFF	; 255
    542a:	9f 4f       	sbci	r25, 0xFF	; 255
    542c:	af 4f       	sbci	r26, 0xFF	; 255
    542e:	b1 e0       	ldi	r27, 0x01	; 1
    5430:	3e d0       	rcall	.+124    	; 0x54ae <__ultoa_invert+0x9c>
    5432:	b4 e0       	ldi	r27, 0x04	; 4
    5434:	3c d0       	rcall	.+120    	; 0x54ae <__ultoa_invert+0x9c>
    5436:	67 0f       	add	r22, r23
    5438:	78 1f       	adc	r23, r24
    543a:	89 1f       	adc	r24, r25
    543c:	9a 1f       	adc	r25, r26
    543e:	a1 1d       	adc	r26, r1
    5440:	68 0f       	add	r22, r24
    5442:	79 1f       	adc	r23, r25
    5444:	8a 1f       	adc	r24, r26
    5446:	91 1d       	adc	r25, r1
    5448:	a1 1d       	adc	r26, r1
    544a:	6a 0f       	add	r22, r26
    544c:	71 1d       	adc	r23, r1
    544e:	81 1d       	adc	r24, r1
    5450:	91 1d       	adc	r25, r1
    5452:	a1 1d       	adc	r26, r1
    5454:	20 d0       	rcall	.+64     	; 0x5496 <__ultoa_invert+0x84>
    5456:	09 f4       	brne	.+2      	; 0x545a <__ultoa_invert+0x48>
    5458:	68 94       	set
    545a:	3f 91       	pop	r19
    545c:	2a e0       	ldi	r18, 0x0A	; 10
    545e:	26 9f       	mul	r18, r22
    5460:	11 24       	eor	r1, r1
    5462:	30 19       	sub	r19, r0
    5464:	30 5d       	subi	r19, 0xD0	; 208
    5466:	31 93       	st	Z+, r19
    5468:	de f6       	brtc	.-74     	; 0x5420 <__ultoa_invert+0xe>
    546a:	cf 01       	movw	r24, r30
    546c:	08 95       	ret
    546e:	46 2f       	mov	r20, r22
    5470:	47 70       	andi	r20, 0x07	; 7
    5472:	40 5d       	subi	r20, 0xD0	; 208
    5474:	41 93       	st	Z+, r20
    5476:	b3 e0       	ldi	r27, 0x03	; 3
    5478:	0f d0       	rcall	.+30     	; 0x5498 <__ultoa_invert+0x86>
    547a:	c9 f7       	brne	.-14     	; 0x546e <__ultoa_invert+0x5c>
    547c:	f6 cf       	rjmp	.-20     	; 0x546a <__ultoa_invert+0x58>
    547e:	46 2f       	mov	r20, r22
    5480:	4f 70       	andi	r20, 0x0F	; 15
    5482:	40 5d       	subi	r20, 0xD0	; 208
    5484:	4a 33       	cpi	r20, 0x3A	; 58
    5486:	18 f0       	brcs	.+6      	; 0x548e <__ultoa_invert+0x7c>
    5488:	49 5d       	subi	r20, 0xD9	; 217
    548a:	31 fd       	sbrc	r19, 1
    548c:	40 52       	subi	r20, 0x20	; 32
    548e:	41 93       	st	Z+, r20
    5490:	02 d0       	rcall	.+4      	; 0x5496 <__ultoa_invert+0x84>
    5492:	a9 f7       	brne	.-22     	; 0x547e <__ultoa_invert+0x6c>
    5494:	ea cf       	rjmp	.-44     	; 0x546a <__ultoa_invert+0x58>
    5496:	b4 e0       	ldi	r27, 0x04	; 4
    5498:	a6 95       	lsr	r26
    549a:	97 95       	ror	r25
    549c:	87 95       	ror	r24
    549e:	77 95       	ror	r23
    54a0:	67 95       	ror	r22
    54a2:	ba 95       	dec	r27
    54a4:	c9 f7       	brne	.-14     	; 0x5498 <__ultoa_invert+0x86>
    54a6:	00 97       	sbiw	r24, 0x00	; 0
    54a8:	61 05       	cpc	r22, r1
    54aa:	71 05       	cpc	r23, r1
    54ac:	08 95       	ret
    54ae:	9b 01       	movw	r18, r22
    54b0:	ac 01       	movw	r20, r24
    54b2:	0a 2e       	mov	r0, r26
    54b4:	06 94       	lsr	r0
    54b6:	57 95       	ror	r21
    54b8:	47 95       	ror	r20
    54ba:	37 95       	ror	r19
    54bc:	27 95       	ror	r18
    54be:	ba 95       	dec	r27
    54c0:	c9 f7       	brne	.-14     	; 0x54b4 <__ultoa_invert+0xa2>
    54c2:	62 0f       	add	r22, r18
    54c4:	73 1f       	adc	r23, r19
    54c6:	84 1f       	adc	r24, r20
    54c8:	95 1f       	adc	r25, r21
    54ca:	a0 1d       	adc	r26, r0
    54cc:	08 95       	ret

000054ce <_exit>:
    54ce:	f8 94       	cli

000054d0 <__stop_program>:
    54d0:	ff cf       	rjmp	.-2      	; 0x54d0 <__stop_program>
