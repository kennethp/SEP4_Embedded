
app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000106  00800200  00003578  0000360c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003578  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000bf  00800306  00800306  00003712  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003712  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003770  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006a8  00000000  00000000  000037b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008d30  00000000  00000000  00003e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002707  00000000  00000000  0000cb88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000469a  00000000  00000000  0000f28f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000015cc  00000000  00000000  0001392c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002e24  00000000  00000000  00014ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007ec2  00000000  00000000  00017d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000738  00000000  00000000  0001fbde  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	04 c2       	rjmp	.+1032   	; 0x40a <__ctors_end>
       2:	00 00       	nop
       4:	22 c2       	rjmp	.+1092   	; 0x44a <__bad_interrupt>
       6:	00 00       	nop
       8:	20 c2       	rjmp	.+1088   	; 0x44a <__bad_interrupt>
       a:	00 00       	nop
       c:	1e c2       	rjmp	.+1084   	; 0x44a <__bad_interrupt>
       e:	00 00       	nop
      10:	1c c2       	rjmp	.+1080   	; 0x44a <__bad_interrupt>
      12:	00 00       	nop
      14:	1a c2       	rjmp	.+1076   	; 0x44a <__bad_interrupt>
      16:	00 00       	nop
      18:	18 c2       	rjmp	.+1072   	; 0x44a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	16 c2       	rjmp	.+1068   	; 0x44a <__bad_interrupt>
      1e:	00 00       	nop
      20:	14 c2       	rjmp	.+1064   	; 0x44a <__bad_interrupt>
      22:	00 00       	nop
      24:	12 c2       	rjmp	.+1060   	; 0x44a <__bad_interrupt>
      26:	00 00       	nop
      28:	10 c2       	rjmp	.+1056   	; 0x44a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0e c2       	rjmp	.+1052   	; 0x44a <__bad_interrupt>
      2e:	00 00       	nop
      30:	0a c5       	rjmp	.+2580   	; 0xa46 <__vector_12>
      32:	00 00       	nop
      34:	0a c2       	rjmp	.+1044   	; 0x44a <__bad_interrupt>
      36:	00 00       	nop
      38:	08 c2       	rjmp	.+1040   	; 0x44a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	06 c2       	rjmp	.+1036   	; 0x44a <__bad_interrupt>
      3e:	00 00       	nop
      40:	04 c2       	rjmp	.+1032   	; 0x44a <__bad_interrupt>
      42:	00 00       	nop
      44:	02 c2       	rjmp	.+1028   	; 0x44a <__bad_interrupt>
      46:	00 00       	nop
      48:	00 c2       	rjmp	.+1024   	; 0x44a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fe c1       	rjmp	.+1020   	; 0x44a <__bad_interrupt>
      4e:	00 00       	nop
      50:	fc c1       	rjmp	.+1016   	; 0x44a <__bad_interrupt>
      52:	00 00       	nop
      54:	fa c1       	rjmp	.+1012   	; 0x44a <__bad_interrupt>
      56:	00 00       	nop
      58:	f8 c1       	rjmp	.+1008   	; 0x44a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f6 c1       	rjmp	.+1004   	; 0x44a <__bad_interrupt>
      5e:	00 00       	nop
      60:	f4 c1       	rjmp	.+1000   	; 0x44a <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <__vector_25>
      68:	0c 94 b1 0f 	jmp	0x1f62	; 0x1f62 <__vector_26>
      6c:	ee c1       	rjmp	.+988    	; 0x44a <__bad_interrupt>
      6e:	00 00       	nop
      70:	ec c1       	rjmp	.+984    	; 0x44a <__bad_interrupt>
      72:	00 00       	nop
      74:	ea c1       	rjmp	.+980    	; 0x44a <__bad_interrupt>
      76:	00 00       	nop
      78:	e8 c1       	rjmp	.+976    	; 0x44a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e6 c1       	rjmp	.+972    	; 0x44a <__bad_interrupt>
      7e:	00 00       	nop
      80:	e4 c1       	rjmp	.+968    	; 0x44a <__bad_interrupt>
      82:	00 00       	nop
      84:	e2 c1       	rjmp	.+964    	; 0x44a <__bad_interrupt>
      86:	00 00       	nop
      88:	e0 c1       	rjmp	.+960    	; 0x44a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	de c1       	rjmp	.+956    	; 0x44a <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 f5 0f 	jmp	0x1fea	; 0x1fea <__vector_36>
      94:	0c 94 47 10 	jmp	0x208e	; 0x208e <__vector_37>
      98:	d8 c1       	rjmp	.+944    	; 0x44a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <__vector_39>
      a0:	d4 c1       	rjmp	.+936    	; 0x44a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d2 c1       	rjmp	.+932    	; 0x44a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d0 c1       	rjmp	.+928    	; 0x44a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ce c1       	rjmp	.+924    	; 0x44a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cc c1       	rjmp	.+920    	; 0x44a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ca c1       	rjmp	.+916    	; 0x44a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c8 c1       	rjmp	.+912    	; 0x44a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c6 c1       	rjmp	.+908    	; 0x44a <__bad_interrupt>
      be:	00 00       	nop
      c0:	c4 c1       	rjmp	.+904    	; 0x44a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c2 c1       	rjmp	.+900    	; 0x44a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c0 c1       	rjmp	.+896    	; 0x44a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <__vector_51>
      d0:	0c 94 dd 10 	jmp	0x21ba	; 0x21ba <__vector_52>
      d4:	ba c1       	rjmp	.+884    	; 0x44a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 21 11 	jmp	0x2242	; 0x2242 <__vector_54>
      dc:	0c 94 73 11 	jmp	0x22e6	; 0x22e6 <__vector_55>
      e0:	b4 c1       	rjmp	.+872    	; 0x44a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	95 01       	movw	r18, r10
      e6:	95 01       	movw	r18, r10
      e8:	95 01       	movw	r18, r10
      ea:	c4 01       	movw	r24, r8
      ec:	cc 01       	movw	r24, r24
      ee:	db 01       	movw	r26, r22
      f0:	95 01       	movw	r18, r10
      f2:	95 01       	movw	r18, r10
      f4:	c4 01       	movw	r24, r8
      f6:	cc 01       	movw	r24, r24
      f8:	1e 14       	cp	r1, r14
      fa:	8e 14       	cp	r8, r14
      fc:	8e 14       	cp	r8, r14
      fe:	8e 14       	cp	r8, r14
     100:	8e 14       	cp	r8, r14
     102:	8e 14       	cp	r8, r14
     104:	8e 14       	cp	r8, r14
     106:	8e 14       	cp	r8, r14
     108:	1e 14       	cp	r1, r14
     10a:	8e 14       	cp	r8, r14
     10c:	8e 14       	cp	r8, r14
     10e:	8e 14       	cp	r8, r14
     110:	8e 14       	cp	r8, r14
     112:	8e 14       	cp	r8, r14
     114:	8e 14       	cp	r8, r14
     116:	8e 14       	cp	r8, r14
     118:	20 14       	cp	r2, r0
     11a:	8e 14       	cp	r8, r14
     11c:	8e 14       	cp	r8, r14
     11e:	8e 14       	cp	r8, r14
     120:	8e 14       	cp	r8, r14
     122:	8e 14       	cp	r8, r14
     124:	8e 14       	cp	r8, r14
     126:	8e 14       	cp	r8, r14
     128:	8e 14       	cp	r8, r14
     12a:	8e 14       	cp	r8, r14
     12c:	8e 14       	cp	r8, r14
     12e:	8e 14       	cp	r8, r14
     130:	8e 14       	cp	r8, r14
     132:	8e 14       	cp	r8, r14
     134:	8e 14       	cp	r8, r14
     136:	8e 14       	cp	r8, r14
     138:	20 14       	cp	r2, r0
     13a:	8e 14       	cp	r8, r14
     13c:	8e 14       	cp	r8, r14
     13e:	8e 14       	cp	r8, r14
     140:	8e 14       	cp	r8, r14
     142:	8e 14       	cp	r8, r14
     144:	8e 14       	cp	r8, r14
     146:	8e 14       	cp	r8, r14
     148:	8e 14       	cp	r8, r14
     14a:	8e 14       	cp	r8, r14
     14c:	8e 14       	cp	r8, r14
     14e:	8e 14       	cp	r8, r14
     150:	8e 14       	cp	r8, r14
     152:	8e 14       	cp	r8, r14
     154:	8e 14       	cp	r8, r14
     156:	8e 14       	cp	r8, r14
     158:	8a 14       	cp	r8, r10
     15a:	8e 14       	cp	r8, r14
     15c:	8e 14       	cp	r8, r14
     15e:	8e 14       	cp	r8, r14
     160:	8e 14       	cp	r8, r14
     162:	8e 14       	cp	r8, r14
     164:	8e 14       	cp	r8, r14
     166:	8e 14       	cp	r8, r14
     168:	55 14       	cp	r5, r5
     16a:	8e 14       	cp	r8, r14
     16c:	8e 14       	cp	r8, r14
     16e:	8e 14       	cp	r8, r14
     170:	8e 14       	cp	r8, r14
     172:	8e 14       	cp	r8, r14
     174:	8e 14       	cp	r8, r14
     176:	8e 14       	cp	r8, r14
     178:	8e 14       	cp	r8, r14
     17a:	8e 14       	cp	r8, r14
     17c:	8e 14       	cp	r8, r14
     17e:	8e 14       	cp	r8, r14
     180:	8e 14       	cp	r8, r14
     182:	8e 14       	cp	r8, r14
     184:	8e 14       	cp	r8, r14
     186:	8e 14       	cp	r8, r14
     188:	49 14       	cp	r4, r9
     18a:	8e 14       	cp	r8, r14
     18c:	8e 14       	cp	r8, r14
     18e:	8e 14       	cp	r8, r14
     190:	8e 14       	cp	r8, r14
     192:	8e 14       	cp	r8, r14
     194:	8e 14       	cp	r8, r14
     196:	8e 14       	cp	r8, r14
     198:	6d 14       	cp	r6, r13

0000019a <prvIdleTask>:
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
     19a:	02 e2       	ldi	r16, 0x22	; 34
     19c:	13 e0       	ldi	r17, 0x03	; 3
     19e:	0f 2e       	mov	r0, r31
     1a0:	fa e4       	ldi	r31, 0x4A	; 74
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f3 e0       	ldi	r31, 0x03	; 3
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	15 96       	adiw	r26, 0x05	; 5
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	16 97       	sbiw	r26, 0x06	; 6
     1c2:	c6 81       	ldd	r28, Z+6	; 0x06
     1c4:	d7 81       	ldd	r29, Z+7	; 0x07
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	a5 d2       	rcall	.+1354   	; 0x716 <uxListRemove>
     1cc:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <uxCurrentNumberOfTasks>
     1d6:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8f 89       	ldd	r24, Y+23	; 0x17
     1e6:	98 8d       	ldd	r25, Y+24	; 0x18
     1e8:	25 d2       	rcall	.+1098   	; 0x634 <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	23 d2       	rcall	.+1094   	; 0x634 <vPortFree>
     1ee:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	08 f0       	brcs	.+2      	; 0x200 <prvIdleTask+0x66>
     1fe:	60 d3       	rcall	.+1728   	; 0x8c0 <vPortYield>
     200:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <vApplicationIdleHook>
     204:	d2 cf       	rjmp	.-92     	; 0x1aa <prvIdleTask+0x10>

00000206 <prvTimerTask>:
     206:	cf 93       	push	r28
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     208:	df 93       	push	r29
     20a:	00 d0       	rcall	.+0      	; 0x20c <prvTimerTask+0x6>
     20c:	00 d0       	rcall	.+0      	; 0x20e <prvTimerTask+0x8>
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
     212:	ce 01       	movw	r24, r28
     214:	01 96       	adiw	r24, 0x01	; 1
     216:	4c 01       	movw	r8, r24
     218:	44 24       	eor	r4, r4
     21a:	43 94       	inc	r4
     21c:	e1 2c       	mov	r14, r1
     21e:	f1 2c       	mov	r15, r1
     220:	51 2c       	mov	r5, r1
     222:	c8 2e       	mov	r12, r24
     224:	d9 2c       	mov	r13, r9
     226:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <pxCurrentTimerList>
     22a:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <pxCurrentTimerList+0x1>
     22e:	80 81       	ld	r24, Z
     230:	88 23       	and	r24, r24
     232:	09 f4       	brne	.+2      	; 0x236 <prvTimerTask+0x30>
     234:	d7 c0       	rjmp	.+430    	; 0x3e4 <prvTimerTask+0x1de>
     236:	05 80       	ldd	r0, Z+5	; 0x05
     238:	f6 81       	ldd	r31, Z+6	; 0x06
     23a:	e0 2d       	mov	r30, r0
     23c:	a0 80       	ld	r10, Z
     23e:	b1 80       	ldd	r11, Z+1	; 0x01
     240:	0e 94 81 09 	call	0x1302	; 0x1302 <vTaskSuspendAll>
     244:	c4 01       	movw	r24, r8
     246:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <prvSampleTimeNow>
     24a:	8c 01       	movw	r16, r24
     24c:	89 81       	ldd	r24, Y+1	; 0x01
     24e:	81 11       	cpse	r24, r1
     250:	48 c0       	rjmp	.+144    	; 0x2e2 <prvTimerTask+0xdc>
     252:	0a 15       	cp	r16, r10
     254:	1b 05       	cpc	r17, r11
     256:	b0 f1       	brcs	.+108    	; 0x2c4 <prvTimerTask+0xbe>
     258:	0e 94 48 0a 	call	0x1490	; 0x1490 <xTaskResumeAll>
     25c:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <pxCurrentTimerList>
     260:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <pxCurrentTimerList+0x1>
     264:	05 80       	ldd	r0, Z+5	; 0x05
     266:	f6 81       	ldd	r31, Z+6	; 0x06
     268:	e0 2d       	mov	r30, r0
     26a:	66 80       	ldd	r6, Z+6	; 0x06
     26c:	77 80       	ldd	r7, Z+7	; 0x07
     26e:	c3 01       	movw	r24, r6
     270:	02 96       	adiw	r24, 0x02	; 2
     272:	51 d2       	rcall	.+1186   	; 0x716 <uxListRemove>
     274:	d3 01       	movw	r26, r6
     276:	53 96       	adiw	r26, 0x13	; 19
     278:	8c 91       	ld	r24, X
     27a:	53 97       	sbiw	r26, 0x13	; 19
     27c:	82 ff       	sbrs	r24, 2
     27e:	17 c0       	rjmp	.+46     	; 0x2ae <prvTimerTask+0xa8>
     280:	1c 96       	adiw	r26, 0x0c	; 12
     282:	6d 91       	ld	r22, X+
     284:	7c 91       	ld	r23, X
     286:	1d 97       	sbiw	r26, 0x0d	; 13
     288:	6a 0d       	add	r22, r10
     28a:	7b 1d       	adc	r23, r11
     28c:	95 01       	movw	r18, r10
     28e:	a8 01       	movw	r20, r16
     290:	c3 01       	movw	r24, r6
     292:	0e 94 4f 0c 	call	0x189e	; 0x189e <prvInsertTimerInActiveList>
     296:	88 23       	and	r24, r24
     298:	69 f0       	breq	.+26     	; 0x2b4 <prvTimerTask+0xae>
     29a:	0e 2d       	mov	r16, r14
     29c:	1f 2d       	mov	r17, r15
     29e:	2e 2d       	mov	r18, r14
     2a0:	3f 2d       	mov	r19, r15
     2a2:	a5 01       	movw	r20, r10
     2a4:	65 2d       	mov	r22, r5
     2a6:	c3 01       	movw	r24, r6
     2a8:	0e 94 c6 0c 	call	0x198c	; 0x198c <xTimerGenericCommand>
     2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <prvTimerTask+0xae>
     2ae:	8e 7f       	andi	r24, 0xFE	; 254
     2b0:	f3 01       	movw	r30, r6
     2b2:	83 8b       	std	Z+19, r24	; 0x13
     2b4:	d3 01       	movw	r26, r6
     2b6:	50 96       	adiw	r26, 0x10	; 16
     2b8:	ed 91       	ld	r30, X+
     2ba:	fc 91       	ld	r31, X
     2bc:	51 97       	sbiw	r26, 0x11	; 17
     2be:	c3 01       	movw	r24, r6
     2c0:	19 95       	eicall
     2c2:	84 c0       	rjmp	.+264    	; 0x3cc <prvTimerTask+0x1c6>
     2c4:	45 2d       	mov	r20, r5
     2c6:	b5 01       	movw	r22, r10
     2c8:	60 1b       	sub	r22, r16
     2ca:	71 0b       	sbc	r23, r17
     2cc:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <xTimerQueue>
     2d0:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <xTimerQueue+0x1>
     2d4:	49 d6       	rcall	.+3218   	; 0xf68 <vQueueWaitForMessageRestricted>
     2d6:	0e 94 48 0a 	call	0x1490	; 0x1490 <xTaskResumeAll>
     2da:	81 11       	cpse	r24, r1
     2dc:	77 c0       	rjmp	.+238    	; 0x3cc <prvTimerTask+0x1c6>
     2de:	f0 d2       	rcall	.+1504   	; 0x8c0 <vPortYield>
     2e0:	75 c0       	rjmp	.+234    	; 0x3cc <prvTimerTask+0x1c6>
     2e2:	0e 94 48 0a 	call	0x1490	; 0x1490 <xTaskResumeAll>
     2e6:	72 c0       	rjmp	.+228    	; 0x3cc <prvTimerTask+0x1c6>
     2e8:	89 81       	ldd	r24, Y+1	; 0x01
     2ea:	88 23       	and	r24, r24
     2ec:	0c f4       	brge	.+2      	; 0x2f0 <prvTimerTask+0xea>
     2ee:	6e c0       	rjmp	.+220    	; 0x3cc <prvTimerTask+0x1c6>
     2f0:	ac 80       	ldd	r10, Y+4	; 0x04
     2f2:	bd 80       	ldd	r11, Y+5	; 0x05
     2f4:	f5 01       	movw	r30, r10
     2f6:	82 85       	ldd	r24, Z+10	; 0x0a
     2f8:	93 85       	ldd	r25, Z+11	; 0x0b
     2fa:	89 2b       	or	r24, r25
     2fc:	19 f0       	breq	.+6      	; 0x304 <prvTimerTask+0xfe>
     2fe:	c5 01       	movw	r24, r10
     300:	02 96       	adiw	r24, 0x02	; 2
     302:	09 d2       	rcall	.+1042   	; 0x716 <uxListRemove>
     304:	ce 01       	movw	r24, r28
     306:	06 96       	adiw	r24, 0x06	; 6
     308:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <prvSampleTimeNow>
     30c:	ac 01       	movw	r20, r24
     30e:	e9 81       	ldd	r30, Y+1	; 0x01
     310:	0e 2e       	mov	r0, r30
     312:	00 0c       	add	r0, r0
     314:	ff 0b       	sbc	r31, r31
     316:	ea 30       	cpi	r30, 0x0A	; 10
     318:	f1 05       	cpc	r31, r1
     31a:	08 f0       	brcs	.+2      	; 0x31e <prvTimerTask+0x118>
     31c:	57 c0       	rjmp	.+174    	; 0x3cc <prvTimerTask+0x1c6>
     31e:	88 27       	eor	r24, r24
     320:	ee 58       	subi	r30, 0x8E	; 142
     322:	ff 4f       	sbci	r31, 0xFF	; 255
     324:	8f 4f       	sbci	r24, 0xFF	; 255
     326:	0c 94 73 16 	jmp	0x2ce6	; 0x2ce6 <__tablejump2__>
     32a:	d5 01       	movw	r26, r10
     32c:	53 96       	adiw	r26, 0x13	; 19
     32e:	8c 91       	ld	r24, X
     330:	53 97       	sbiw	r26, 0x13	; 19
     332:	81 60       	ori	r24, 0x01	; 1
     334:	53 96       	adiw	r26, 0x13	; 19
     336:	8c 93       	st	X, r24
     338:	53 97       	sbiw	r26, 0x13	; 19
     33a:	2a 81       	ldd	r18, Y+2	; 0x02
     33c:	3b 81       	ldd	r19, Y+3	; 0x03
     33e:	1c 96       	adiw	r26, 0x0c	; 12
     340:	6d 91       	ld	r22, X+
     342:	7c 91       	ld	r23, X
     344:	1d 97       	sbiw	r26, 0x0d	; 13
     346:	62 0f       	add	r22, r18
     348:	73 1f       	adc	r23, r19
     34a:	c5 01       	movw	r24, r10
     34c:	0e 94 4f 0c 	call	0x189e	; 0x189e <prvInsertTimerInActiveList>
     350:	88 23       	and	r24, r24
     352:	e1 f1       	breq	.+120    	; 0x3cc <prvTimerTask+0x1c6>
     354:	d5 01       	movw	r26, r10
     356:	50 96       	adiw	r26, 0x10	; 16
     358:	ed 91       	ld	r30, X+
     35a:	fc 91       	ld	r31, X
     35c:	51 97       	sbiw	r26, 0x11	; 17
     35e:	c5 01       	movw	r24, r10
     360:	19 95       	eicall
     362:	f5 01       	movw	r30, r10
     364:	83 89       	ldd	r24, Z+19	; 0x13
     366:	82 ff       	sbrs	r24, 2
     368:	31 c0       	rjmp	.+98     	; 0x3cc <prvTimerTask+0x1c6>
     36a:	4a 81       	ldd	r20, Y+2	; 0x02
     36c:	5b 81       	ldd	r21, Y+3	; 0x03
     36e:	84 85       	ldd	r24, Z+12	; 0x0c
     370:	95 85       	ldd	r25, Z+13	; 0x0d
     372:	48 0f       	add	r20, r24
     374:	59 1f       	adc	r21, r25
     376:	0e 2d       	mov	r16, r14
     378:	1f 2d       	mov	r17, r15
     37a:	2e 2d       	mov	r18, r14
     37c:	3f 2d       	mov	r19, r15
     37e:	65 2d       	mov	r22, r5
     380:	c5 01       	movw	r24, r10
     382:	0e 94 c6 0c 	call	0x198c	; 0x198c <xTimerGenericCommand>
     386:	22 c0       	rjmp	.+68     	; 0x3cc <prvTimerTask+0x1c6>
     388:	d5 01       	movw	r26, r10
     38a:	53 96       	adiw	r26, 0x13	; 19
     38c:	8c 91       	ld	r24, X
     38e:	53 97       	sbiw	r26, 0x13	; 19
     390:	8e 7f       	andi	r24, 0xFE	; 254
     392:	53 96       	adiw	r26, 0x13	; 19
     394:	8c 93       	st	X, r24
     396:	1a c0       	rjmp	.+52     	; 0x3cc <prvTimerTask+0x1c6>
     398:	f5 01       	movw	r30, r10
     39a:	83 89       	ldd	r24, Z+19	; 0x13
     39c:	81 60       	ori	r24, 0x01	; 1
     39e:	83 8b       	std	Z+19, r24	; 0x13
     3a0:	6a 81       	ldd	r22, Y+2	; 0x02
     3a2:	7b 81       	ldd	r23, Y+3	; 0x03
     3a4:	75 87       	std	Z+13, r23	; 0x0d
     3a6:	64 87       	std	Z+12, r22	; 0x0c
     3a8:	64 0f       	add	r22, r20
     3aa:	75 1f       	adc	r23, r21
     3ac:	9a 01       	movw	r18, r20
     3ae:	c5 01       	movw	r24, r10
     3b0:	0e 94 4f 0c 	call	0x189e	; 0x189e <prvInsertTimerInActiveList>
     3b4:	0b c0       	rjmp	.+22     	; 0x3cc <prvTimerTask+0x1c6>
     3b6:	d5 01       	movw	r26, r10
     3b8:	53 96       	adiw	r26, 0x13	; 19
     3ba:	8c 91       	ld	r24, X
     3bc:	81 fd       	sbrc	r24, 1
     3be:	03 c0       	rjmp	.+6      	; 0x3c6 <prvTimerTask+0x1c0>
     3c0:	c5 01       	movw	r24, r10
     3c2:	38 d1       	rcall	.+624    	; 0x634 <vPortFree>
     3c4:	03 c0       	rjmp	.+6      	; 0x3cc <prvTimerTask+0x1c6>
     3c6:	8e 7f       	andi	r24, 0xFE	; 254
     3c8:	f5 01       	movw	r30, r10
     3ca:	83 8b       	std	Z+19, r24	; 0x13
     3cc:	4e 2d       	mov	r20, r14
     3ce:	5f 2d       	mov	r21, r15
     3d0:	6c 2d       	mov	r22, r12
     3d2:	7d 2d       	mov	r23, r13
     3d4:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <xTimerQueue>
     3d8:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <xTimerQueue+0x1>
     3dc:	3c d5       	rcall	.+2680   	; 0xe56 <xQueueReceive>
     3de:	81 11       	cpse	r24, r1
     3e0:	83 cf       	rjmp	.-250    	; 0x2e8 <prvTimerTask+0xe2>
     3e2:	21 cf       	rjmp	.-446    	; 0x226 <prvTimerTask+0x20>
     3e4:	8e d7       	rcall	.+3868   	; 0x1302 <vTaskSuspendAll>
     3e6:	c4 01       	movw	r24, r8
     3e8:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <prvSampleTimeNow>
     3ec:	8c 01       	movw	r16, r24
     3ee:	89 81       	ldd	r24, Y+1	; 0x01
     3f0:	81 11       	cpse	r24, r1
     3f2:	77 cf       	rjmp	.-274    	; 0x2e2 <prvTimerTask+0xdc>
     3f4:	e0 91 76 03 	lds	r30, 0x0376	; 0x800376 <pxOverflowTimerList>
     3f8:	f0 91 77 03 	lds	r31, 0x0377	; 0x800377 <pxOverflowTimerList+0x1>
     3fc:	80 81       	ld	r24, Z
     3fe:	44 2d       	mov	r20, r4
     400:	81 11       	cpse	r24, r1
     402:	45 2d       	mov	r20, r5
     404:	ae 2c       	mov	r10, r14
     406:	bf 2c       	mov	r11, r15
     408:	5e cf       	rjmp	.-324    	; 0x2c6 <prvTimerTask+0xc0>

0000040a <__ctors_end>:
     40a:	11 24       	eor	r1, r1
     40c:	1f be       	out	0x3f, r1	; 63
     40e:	cf ef       	ldi	r28, 0xFF	; 255
     410:	d1 e2       	ldi	r29, 0x21	; 33
     412:	de bf       	out	0x3e, r29	; 62
     414:	cd bf       	out	0x3d, r28	; 61
     416:	00 e0       	ldi	r16, 0x00	; 0
     418:	0c bf       	out	0x3c, r16	; 60

0000041a <__do_copy_data>:
     41a:	13 e0       	ldi	r17, 0x03	; 3
     41c:	a0 e0       	ldi	r26, 0x00	; 0
     41e:	b2 e0       	ldi	r27, 0x02	; 2
     420:	e8 e7       	ldi	r30, 0x78	; 120
     422:	f5 e3       	ldi	r31, 0x35	; 53
     424:	00 e0       	ldi	r16, 0x00	; 0
     426:	0b bf       	out	0x3b, r16	; 59
     428:	02 c0       	rjmp	.+4      	; 0x42e <__do_copy_data+0x14>
     42a:	07 90       	elpm	r0, Z+
     42c:	0d 92       	st	X+, r0
     42e:	a6 30       	cpi	r26, 0x06	; 6
     430:	b1 07       	cpc	r27, r17
     432:	d9 f7       	brne	.-10     	; 0x42a <__do_copy_data+0x10>

00000434 <__do_clear_bss>:
     434:	23 e0       	ldi	r18, 0x03	; 3
     436:	a6 e0       	ldi	r26, 0x06	; 6
     438:	b3 e0       	ldi	r27, 0x03	; 3
     43a:	01 c0       	rjmp	.+2      	; 0x43e <.do_clear_bss_start>

0000043c <.do_clear_bss_loop>:
     43c:	1d 92       	st	X+, r1

0000043e <.do_clear_bss_start>:
     43e:	a5 3c       	cpi	r26, 0xC5	; 197
     440:	b2 07       	cpc	r27, r18
     442:	e1 f7       	brne	.-8      	; 0x43c <.do_clear_bss_loop>
     444:	9b d0       	rcall	.+310    	; 0x57c <main>
     446:	0c 94 ba 1a 	jmp	0x3574	; 0x3574 <_exit>

0000044a <__bad_interrupt>:
     44a:	da cd       	rjmp	.-1100   	; 0x0 <__vectors>

0000044c <co2Callback>:

	vTaskDelete(NULL);
}

void co2Callback(uint16_t ppm) {
	printf("CO2 level: %u\n", ppm);
     44c:	9f 93       	push	r25
     44e:	8f 93       	push	r24
     450:	8e e4       	ldi	r24, 0x4E	; 78
     452:	92 e0       	ldi	r25, 0x02	; 2
     454:	9f 93       	push	r25
     456:	8f 93       	push	r24
     458:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <printf>
}
     45c:	0f 90       	pop	r0
     45e:	0f 90       	pop	r0
     460:	0f 90       	pop	r0
     462:	0f 90       	pop	r0
     464:	08 95       	ret

00000466 <tempSensorTask>:
	while(1) {
		_delay_ms(1000);
		
		int r = hih8120Wakeup();
		if(r != HIH8120_OK && r != HIH8120_TWI_BUSY) {
			printf("temp-wake error: %d\n", r);
     466:	0f 2e       	mov	r0, r31
     468:	fd e5       	ldi	r31, 0x5D	; 93
     46a:	ef 2e       	mov	r14, r31
     46c:	f2 e0       	ldi	r31, 0x02	; 2
     46e:	ff 2e       	mov	r15, r31
     470:	f0 2d       	mov	r31, r0
		
		_delay_ms(100);

		r = hih8120Meassure();
		if(r != HIH8120_OK && r != HIH8120_TWI_BUSY) {
			printf("Temp-read error: %d\n", r);
     472:	02 e7       	ldi	r16, 0x72	; 114
     474:	12 e0       	ldi	r17, 0x02	; 2
		}
		_delay_ms(100);

		humidity = hih8120GetHumidity();
		temperature = hih8120GetTemperature();
		printf("Hum: %d  Temp: %d", humidity, temperature);
     476:	c7 e8       	ldi	r28, 0x87	; 135
     478:	d2 e0       	ldi	r29, 0x02	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     47a:	2f ef       	ldi	r18, 0xFF	; 255
     47c:	83 ed       	ldi	r24, 0xD3	; 211
     47e:	90 e3       	ldi	r25, 0x30	; 48
     480:	21 50       	subi	r18, 0x01	; 1
     482:	80 40       	sbci	r24, 0x00	; 0
     484:	90 40       	sbci	r25, 0x00	; 0
     486:	e1 f7       	brne	.-8      	; 0x480 <tempSensorTask+0x1a>
     488:	00 c0       	rjmp	.+0      	; 0x48a <tempSensorTask+0x24>
     48a:	00 00       	nop
	
	//Do temperature measurement
	while(1) {
		_delay_ms(1000);
		
		int r = hih8120Wakeup();
     48c:	0e 94 17 12 	call	0x242e	; 0x242e <hih8120Wakeup>
     490:	28 2f       	mov	r18, r24
     492:	30 e0       	ldi	r19, 0x00	; 0
		if(r != HIH8120_OK && r != HIH8120_TWI_BUSY) {
     494:	21 15       	cp	r18, r1
     496:	31 05       	cpc	r19, r1
     498:	69 f0       	breq	.+26     	; 0x4b4 <tempSensorTask+0x4e>
     49a:	23 30       	cpi	r18, 0x03	; 3
     49c:	31 05       	cpc	r19, r1
     49e:	51 f0       	breq	.+20     	; 0x4b4 <tempSensorTask+0x4e>
			printf("temp-wake error: %d\n", r);
     4a0:	1f 92       	push	r1
     4a2:	8f 93       	push	r24
     4a4:	ff 92       	push	r15
     4a6:	ef 92       	push	r14
     4a8:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <printf>
     4ac:	0f 90       	pop	r0
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	0f 90       	pop	r0
     4b4:	2f ef       	ldi	r18, 0xFF	; 255
     4b6:	81 ee       	ldi	r24, 0xE1	; 225
     4b8:	94 e0       	ldi	r25, 0x04	; 4
     4ba:	21 50       	subi	r18, 0x01	; 1
     4bc:	80 40       	sbci	r24, 0x00	; 0
     4be:	90 40       	sbci	r25, 0x00	; 0
     4c0:	e1 f7       	brne	.-8      	; 0x4ba <tempSensorTask+0x54>
     4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <tempSensorTask+0x5e>
     4c4:	00 00       	nop
		}
		
		_delay_ms(100);

		r = hih8120Meassure();
     4c6:	0e 94 2b 12 	call	0x2456	; 0x2456 <hih8120Meassure>
     4ca:	28 2f       	mov	r18, r24
     4cc:	30 e0       	ldi	r19, 0x00	; 0
		if(r != HIH8120_OK && r != HIH8120_TWI_BUSY) {
     4ce:	21 15       	cp	r18, r1
     4d0:	31 05       	cpc	r19, r1
     4d2:	69 f0       	breq	.+26     	; 0x4ee <tempSensorTask+0x88>
     4d4:	23 30       	cpi	r18, 0x03	; 3
     4d6:	31 05       	cpc	r19, r1
     4d8:	51 f0       	breq	.+20     	; 0x4ee <tempSensorTask+0x88>
			printf("Temp-read error: %d\n", r);
     4da:	1f 92       	push	r1
     4dc:	8f 93       	push	r24
     4de:	1f 93       	push	r17
     4e0:	0f 93       	push	r16
     4e2:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <printf>
     4e6:	0f 90       	pop	r0
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	2f ef       	ldi	r18, 0xFF	; 255
     4f0:	81 ee       	ldi	r24, 0xE1	; 225
     4f2:	94 e0       	ldi	r25, 0x04	; 4
     4f4:	21 50       	subi	r18, 0x01	; 1
     4f6:	80 40       	sbci	r24, 0x00	; 0
     4f8:	90 40       	sbci	r25, 0x00	; 0
     4fa:	e1 f7       	brne	.-8      	; 0x4f4 <tempSensorTask+0x8e>
     4fc:	00 c0       	rjmp	.+0      	; 0x4fe <tempSensorTask+0x98>
     4fe:	00 00       	nop
		}
		_delay_ms(100);

		humidity = hih8120GetHumidity();
     500:	0e 94 3b 12 	call	0x2476	; 0x2476 <hih8120GetHumidity>
     504:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__fixsfsi>
     508:	70 93 ba 03 	sts	0x03BA, r23	; 0x8003ba <humidity+0x1>
     50c:	60 93 b9 03 	sts	0x03B9, r22	; 0x8003b9 <humidity>
		temperature = hih8120GetTemperature();
     510:	0e 94 4d 12 	call	0x249a	; 0x249a <hih8120GetTemperature>
     514:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__fixsfsi>
     518:	60 93 b5 03 	sts	0x03B5, r22	; 0x8003b5 <temperature>
     51c:	70 93 b6 03 	sts	0x03B6, r23	; 0x8003b6 <temperature+0x1>
		printf("Hum: %d  Temp: %d", humidity, temperature);
     520:	7f 93       	push	r23
     522:	6f 93       	push	r22
     524:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <humidity+0x1>
     528:	8f 93       	push	r24
     52a:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <humidity>
     52e:	8f 93       	push	r24
     530:	df 93       	push	r29
     532:	cf 93       	push	r28
     534:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <printf>
	}
     538:	0f 90       	pop	r0
     53a:	0f 90       	pop	r0
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
     542:	0f 90       	pop	r0
     544:	9a cf       	rjmp	.-204    	; 0x47a <tempSensorTask+0x14>

00000546 <co2SensorTask>:
	while(1) {
		_delay_ms(1000);

		int r = mh_z19_take_meassuring();
		if(r != MHZ19_OK) {
			printf("CO2 sensor: %d", r);
     546:	c9 e9       	ldi	r28, 0x99	; 153
     548:	d2 e0       	ldi	r29, 0x02	; 2
     54a:	2f ef       	ldi	r18, 0xFF	; 255
     54c:	83 ed       	ldi	r24, 0xD3	; 211
     54e:	90 e3       	ldi	r25, 0x30	; 48
     550:	21 50       	subi	r18, 0x01	; 1
     552:	80 40       	sbci	r24, 0x00	; 0
     554:	90 40       	sbci	r25, 0x00	; 0
     556:	e1 f7       	brne	.-8      	; 0x550 <co2SensorTask+0xa>
     558:	00 c0       	rjmp	.+0      	; 0x55a <co2SensorTask+0x14>
     55a:	00 00       	nop
	(void)pvParamters;

	while(1) {
		_delay_ms(1000);

		int r = mh_z19_take_meassuring();
     55c:	0e 94 ed 12 	call	0x25da	; 0x25da <mh_z19_take_meassuring>
     560:	90 e0       	ldi	r25, 0x00	; 0
		if(r != MHZ19_OK) {
     562:	00 97       	sbiw	r24, 0x00	; 0
     564:	91 f3       	breq	.-28     	; 0x54a <co2SensorTask+0x4>
			printf("CO2 sensor: %d", r);
     566:	9f 93       	push	r25
     568:	8f 93       	push	r24
     56a:	df 93       	push	r29
     56c:	cf 93       	push	r28
     56e:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <printf>
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	0f 90       	pop	r0
     57a:	e7 cf       	rjmp	.-50     	; 0x54a <co2SensorTask+0x4>

0000057c <main>:
void co2Callback(uint16_t ppm) {
	printf("CO2 level: %u\n", ppm);
}


int main() {
     57c:	ef 92       	push	r14
     57e:	ff 92       	push	r15
     580:	0f 93       	push	r16
	xTaskCreate(tempSensorTask, "Temperature measurement", configMINIMAL_STACK_SIZE, NULL, TEMP_TASK_PRIORITY, &tempSensorHandle);
     582:	0f 2e       	mov	r0, r31
     584:	f8 e0       	ldi	r31, 0x08	; 8
     586:	ef 2e       	mov	r14, r31
     588:	f3 e0       	ldi	r31, 0x03	; 3
     58a:	ff 2e       	mov	r15, r31
     58c:	f0 2d       	mov	r31, r0
     58e:	05 e0       	ldi	r16, 0x05	; 5
     590:	20 e0       	ldi	r18, 0x00	; 0
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	40 ec       	ldi	r20, 0xC0	; 192
     596:	50 e0       	ldi	r21, 0x00	; 0
     598:	68 ea       	ldi	r22, 0xA8	; 168
     59a:	72 e0       	ldi	r23, 0x02	; 2
     59c:	83 e3       	ldi	r24, 0x33	; 51
     59e:	92 e0       	ldi	r25, 0x02	; 2
     5a0:	71 d5       	rcall	.+2786   	; 0x1084 <xTaskCreate>
	xTaskCreate(co2SensorTask, "CO2 measurement", configMINIMAL_STACK_SIZE, NULL, CO2_TASK_PRIORITY, &co2SensorHandle);
     5a2:	0f 2e       	mov	r0, r31
     5a4:	f6 e0       	ldi	r31, 0x06	; 6
     5a6:	ef 2e       	mov	r14, r31
     5a8:	f3 e0       	ldi	r31, 0x03	; 3
     5aa:	ff 2e       	mov	r15, r31
     5ac:	f0 2d       	mov	r31, r0
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	40 ec       	ldi	r20, 0xC0	; 192
     5b4:	50 e0       	ldi	r21, 0x00	; 0
     5b6:	60 ec       	ldi	r22, 0xC0	; 192
     5b8:	72 e0       	ldi	r23, 0x02	; 2
     5ba:	83 ea       	ldi	r24, 0xA3	; 163
     5bc:	92 e0       	ldi	r25, 0x02	; 2
     5be:	62 d5       	rcall	.+2756   	; 0x1084 <xTaskCreate>
	stdioCreate(0);
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <stdioCreate>
	sei();
     5c6:	78 94       	sei
	//setup temperature/humidity sensor
	if(HIH8120_OK != hih8120Create()) {
     5c8:	0e 94 00 12 	call	0x2400	; 0x2400 <hih8120Create>
     5cc:	81 11       	cpse	r24, r1
     5ce:	07 c0       	rjmp	.+14     	; 0x5de <main+0x62>
		printf("Failed to initialize temperature sensor\n");
		return 1;
	}

	//setup co2 sensor
	mh_z19_create(ser_USART3, co2Callback);
     5d0:	66 e2       	ldi	r22, 0x26	; 38
     5d2:	72 e0       	ldi	r23, 0x02	; 2
     5d4:	83 e0       	ldi	r24, 0x03	; 3
     5d6:	0e 94 bf 12 	call	0x257e	; 0x257e <mh_z19_create>
	
	vTaskStartScheduler();
     5da:	62 d6       	rcall	.+3268   	; 0x12a0 <vTaskStartScheduler>
     5dc:	ff cf       	rjmp	.-2      	; 0x5dc <main+0x60>
	xTaskCreate(co2SensorTask, "CO2 measurement", configMINIMAL_STACK_SIZE, NULL, CO2_TASK_PRIORITY, &co2SensorHandle);
	stdioCreate(0);
	sei();
	//setup temperature/humidity sensor
	if(HIH8120_OK != hih8120Create()) {
		printf("Failed to initialize temperature sensor\n");
     5de:	80 ed       	ldi	r24, 0xD0	; 208
     5e0:	92 e0       	ldi	r25, 0x02	; 2
     5e2:	0e 94 dd 17 	call	0x2fba	; 0x2fba <puts>
	vTaskStartScheduler();
	
	while(1) {
		;
	}
}
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	0f 91       	pop	r16
     5ec:	ff 90       	pop	r15
     5ee:	ef 90       	pop	r14
     5f0:	08 95       	ret

000005f2 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     5f2:	e8 e0       	ldi	r30, 0x08	; 8
     5f4:	f1 e0       	ldi	r31, 0x01	; 1
     5f6:	90 81       	ld	r25, Z
     5f8:	90 7f       	andi	r25, 0xF0	; 240
     5fa:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     5fc:	90 81       	ld	r25, Z
     5fe:	8f 70       	andi	r24, 0x0F	; 15
     600:	98 2b       	or	r25, r24
     602:	90 83       	st	Z, r25
     604:	08 95       	ret

00000606 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     606:	e8 e0       	ldi	r30, 0x08	; 8
     608:	f1 e0       	ldi	r31, 0x01	; 1
     60a:	80 81       	ld	r24, Z
     60c:	80 7f       	andi	r24, 0xF0	; 240
     60e:	80 83       	st	Z, r24
     610:	08 95       	ret

00000612 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
     616:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
     618:	74 d6       	rcall	.+3304   	; 0x1302 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     61a:	ce 01       	movw	r24, r28
     61c:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <malloc>
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     620:	ec 01       	movw	r28, r24
     622:	36 d7       	rcall	.+3692   	; 0x1490 <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
     624:	20 97       	sbiw	r28, 0x00	; 0
     626:	11 f4       	brne	.+4      	; 0x62c <pvPortMalloc+0x1a>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
     628:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
     62c:	ce 01       	movw	r24, r28
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	08 95       	ret

00000634 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
    if( pv )
     638:	00 97       	sbiw	r24, 0x00	; 0
     63a:	31 f0       	breq	.+12     	; 0x648 <vPortFree+0x14>
     63c:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
     63e:	61 d6       	rcall	.+3266   	; 0x1302 <vTaskSuspendAll>
        {
            free( pv );
     640:	ce 01       	movw	r24, r28
     642:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
     646:	24 d7       	rcall	.+3656   	; 0x1490 <xTaskResumeAll>
    }
}
     648:	df 91       	pop	r29
     64a:	cf 91       	pop	r28
     64c:	08 95       	ret

0000064e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     64e:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     650:	03 96       	adiw	r24, 0x03	; 3
     652:	92 83       	std	Z+2, r25	; 0x02
     654:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     656:	2f ef       	ldi	r18, 0xFF	; 255
     658:	3f ef       	ldi	r19, 0xFF	; 255
     65a:	34 83       	std	Z+4, r19	; 0x04
     65c:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     65e:	96 83       	std	Z+6, r25	; 0x06
     660:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     662:	90 87       	std	Z+8, r25	; 0x08
     664:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     666:	10 82       	st	Z, r1
     668:	08 95       	ret

0000066a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     66a:	fc 01       	movw	r30, r24
     66c:	11 86       	std	Z+9, r1	; 0x09
     66e:	10 86       	std	Z+8, r1	; 0x08
     670:	08 95       	ret

00000672 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
     676:	9c 01       	movw	r18, r24
     678:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     67a:	dc 01       	movw	r26, r24
     67c:	11 96       	adiw	r26, 0x01	; 1
     67e:	cd 91       	ld	r28, X+
     680:	dc 91       	ld	r29, X
     682:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     684:	d3 83       	std	Z+3, r29	; 0x03
     686:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     688:	8c 81       	ldd	r24, Y+4	; 0x04
     68a:	9d 81       	ldd	r25, Y+5	; 0x05
     68c:	95 83       	std	Z+5, r25	; 0x05
     68e:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     690:	8c 81       	ldd	r24, Y+4	; 0x04
     692:	9d 81       	ldd	r25, Y+5	; 0x05
     694:	dc 01       	movw	r26, r24
     696:	13 96       	adiw	r26, 0x03	; 3
     698:	7c 93       	st	X, r23
     69a:	6e 93       	st	-X, r22
     69c:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     69e:	7d 83       	std	Y+5, r23	; 0x05
     6a0:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     6a2:	31 87       	std	Z+9, r19	; 0x09
     6a4:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     6a6:	f9 01       	movw	r30, r18
     6a8:	80 81       	ld	r24, Z
     6aa:	8f 5f       	subi	r24, 0xFF	; 255
     6ac:	80 83       	st	Z, r24
}
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	08 95       	ret

000006b4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     6b4:	cf 93       	push	r28
     6b6:	df 93       	push	r29
     6b8:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     6ba:	48 81       	ld	r20, Y
     6bc:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     6be:	4f 3f       	cpi	r20, 0xFF	; 255
     6c0:	2f ef       	ldi	r18, 0xFF	; 255
     6c2:	52 07       	cpc	r21, r18
     6c4:	21 f4       	brne	.+8      	; 0x6ce <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     6c6:	fc 01       	movw	r30, r24
     6c8:	a7 81       	ldd	r26, Z+7	; 0x07
     6ca:	b0 85       	ldd	r27, Z+8	; 0x08
     6cc:	0d c0       	rjmp	.+26     	; 0x6e8 <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     6ce:	dc 01       	movw	r26, r24
     6d0:	13 96       	adiw	r26, 0x03	; 3
     6d2:	01 c0       	rjmp	.+2      	; 0x6d6 <vListInsert+0x22>
     6d4:	df 01       	movw	r26, r30
     6d6:	12 96       	adiw	r26, 0x02	; 2
     6d8:	ed 91       	ld	r30, X+
     6da:	fc 91       	ld	r31, X
     6dc:	13 97       	sbiw	r26, 0x03	; 3
     6de:	20 81       	ld	r18, Z
     6e0:	31 81       	ldd	r19, Z+1	; 0x01
     6e2:	42 17       	cp	r20, r18
     6e4:	53 07       	cpc	r21, r19
     6e6:	b0 f7       	brcc	.-20     	; 0x6d4 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     6e8:	12 96       	adiw	r26, 0x02	; 2
     6ea:	ed 91       	ld	r30, X+
     6ec:	fc 91       	ld	r31, X
     6ee:	13 97       	sbiw	r26, 0x03	; 3
     6f0:	fb 83       	std	Y+3, r31	; 0x03
     6f2:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     6f4:	d5 83       	std	Z+5, r29	; 0x05
     6f6:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     6f8:	bd 83       	std	Y+5, r27	; 0x05
     6fa:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     6fc:	13 96       	adiw	r26, 0x03	; 3
     6fe:	dc 93       	st	X, r29
     700:	ce 93       	st	-X, r28
     702:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     704:	99 87       	std	Y+9, r25	; 0x09
     706:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     708:	fc 01       	movw	r30, r24
     70a:	20 81       	ld	r18, Z
     70c:	2f 5f       	subi	r18, 0xFF	; 255
     70e:	20 83       	st	Z, r18
}
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	08 95       	ret

00000716 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     71c:	a0 85       	ldd	r26, Z+8	; 0x08
     71e:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     720:	c2 81       	ldd	r28, Z+2	; 0x02
     722:	d3 81       	ldd	r29, Z+3	; 0x03
     724:	84 81       	ldd	r24, Z+4	; 0x04
     726:	95 81       	ldd	r25, Z+5	; 0x05
     728:	9d 83       	std	Y+5, r25	; 0x05
     72a:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     72c:	c4 81       	ldd	r28, Z+4	; 0x04
     72e:	d5 81       	ldd	r29, Z+5	; 0x05
     730:	82 81       	ldd	r24, Z+2	; 0x02
     732:	93 81       	ldd	r25, Z+3	; 0x03
     734:	9b 83       	std	Y+3, r25	; 0x03
     736:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     738:	11 96       	adiw	r26, 0x01	; 1
     73a:	8d 91       	ld	r24, X+
     73c:	9c 91       	ld	r25, X
     73e:	12 97       	sbiw	r26, 0x02	; 2
     740:	e8 17       	cp	r30, r24
     742:	f9 07       	cpc	r31, r25
     744:	31 f4       	brne	.+12     	; 0x752 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     746:	84 81       	ldd	r24, Z+4	; 0x04
     748:	95 81       	ldd	r25, Z+5	; 0x05
     74a:	12 96       	adiw	r26, 0x02	; 2
     74c:	9c 93       	st	X, r25
     74e:	8e 93       	st	-X, r24
     750:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     752:	11 86       	std	Z+9, r1	; 0x09
     754:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     756:	8c 91       	ld	r24, X
     758:	81 50       	subi	r24, 0x01	; 1
     75a:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     75c:	8c 91       	ld	r24, X
}
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	08 95       	ret

00000764 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     764:	31 e1       	ldi	r19, 0x11	; 17
     766:	fc 01       	movw	r30, r24
     768:	30 83       	st	Z, r19
     76a:	31 97       	sbiw	r30, 0x01	; 1
     76c:	22 e2       	ldi	r18, 0x22	; 34
     76e:	20 83       	st	Z, r18
     770:	31 97       	sbiw	r30, 0x01	; 1
     772:	a3 e3       	ldi	r26, 0x33	; 51
     774:	a0 83       	st	Z, r26
     776:	31 97       	sbiw	r30, 0x01	; 1
     778:	60 83       	st	Z, r22
     77a:	31 97       	sbiw	r30, 0x01	; 1
     77c:	70 83       	st	Z, r23
     77e:	31 97       	sbiw	r30, 0x01	; 1
     780:	10 82       	st	Z, r1
     782:	31 97       	sbiw	r30, 0x01	; 1
     784:	10 82       	st	Z, r1
     786:	31 97       	sbiw	r30, 0x01	; 1
     788:	60 e8       	ldi	r22, 0x80	; 128
     78a:	60 83       	st	Z, r22
     78c:	31 97       	sbiw	r30, 0x01	; 1
     78e:	10 82       	st	Z, r1
     790:	31 97       	sbiw	r30, 0x01	; 1
     792:	10 82       	st	Z, r1
     794:	31 97       	sbiw	r30, 0x01	; 1
     796:	10 82       	st	Z, r1
     798:	31 97       	sbiw	r30, 0x01	; 1
     79a:	62 e0       	ldi	r22, 0x02	; 2
     79c:	60 83       	st	Z, r22
     79e:	31 97       	sbiw	r30, 0x01	; 1
     7a0:	63 e0       	ldi	r22, 0x03	; 3
     7a2:	60 83       	st	Z, r22
     7a4:	31 97       	sbiw	r30, 0x01	; 1
     7a6:	64 e0       	ldi	r22, 0x04	; 4
     7a8:	60 83       	st	Z, r22
     7aa:	31 97       	sbiw	r30, 0x01	; 1
     7ac:	65 e0       	ldi	r22, 0x05	; 5
     7ae:	60 83       	st	Z, r22
     7b0:	31 97       	sbiw	r30, 0x01	; 1
     7b2:	66 e0       	ldi	r22, 0x06	; 6
     7b4:	60 83       	st	Z, r22
     7b6:	31 97       	sbiw	r30, 0x01	; 1
     7b8:	67 e0       	ldi	r22, 0x07	; 7
     7ba:	60 83       	st	Z, r22
     7bc:	31 97       	sbiw	r30, 0x01	; 1
     7be:	68 e0       	ldi	r22, 0x08	; 8
     7c0:	60 83       	st	Z, r22
     7c2:	31 97       	sbiw	r30, 0x01	; 1
     7c4:	69 e0       	ldi	r22, 0x09	; 9
     7c6:	60 83       	st	Z, r22
     7c8:	31 97       	sbiw	r30, 0x01	; 1
     7ca:	60 e1       	ldi	r22, 0x10	; 16
     7cc:	60 83       	st	Z, r22
     7ce:	31 97       	sbiw	r30, 0x01	; 1
     7d0:	30 83       	st	Z, r19
     7d2:	31 97       	sbiw	r30, 0x01	; 1
     7d4:	32 e1       	ldi	r19, 0x12	; 18
     7d6:	30 83       	st	Z, r19
     7d8:	31 97       	sbiw	r30, 0x01	; 1
     7da:	33 e1       	ldi	r19, 0x13	; 19
     7dc:	30 83       	st	Z, r19
     7de:	31 97       	sbiw	r30, 0x01	; 1
     7e0:	34 e1       	ldi	r19, 0x14	; 20
     7e2:	30 83       	st	Z, r19
     7e4:	31 97       	sbiw	r30, 0x01	; 1
     7e6:	35 e1       	ldi	r19, 0x15	; 21
     7e8:	30 83       	st	Z, r19
     7ea:	31 97       	sbiw	r30, 0x01	; 1
     7ec:	36 e1       	ldi	r19, 0x16	; 22
     7ee:	30 83       	st	Z, r19
     7f0:	31 97       	sbiw	r30, 0x01	; 1
     7f2:	37 e1       	ldi	r19, 0x17	; 23
     7f4:	30 83       	st	Z, r19
     7f6:	31 97       	sbiw	r30, 0x01	; 1
     7f8:	38 e1       	ldi	r19, 0x18	; 24
     7fa:	30 83       	st	Z, r19
     7fc:	31 97       	sbiw	r30, 0x01	; 1
     7fe:	39 e1       	ldi	r19, 0x19	; 25
     800:	30 83       	st	Z, r19
     802:	31 97       	sbiw	r30, 0x01	; 1
     804:	30 e2       	ldi	r19, 0x20	; 32
     806:	30 83       	st	Z, r19
     808:	31 97       	sbiw	r30, 0x01	; 1
     80a:	31 e2       	ldi	r19, 0x21	; 33
     80c:	30 83       	st	Z, r19
     80e:	31 97       	sbiw	r30, 0x01	; 1
     810:	20 83       	st	Z, r18
     812:	31 97       	sbiw	r30, 0x01	; 1
     814:	23 e2       	ldi	r18, 0x23	; 35
     816:	20 83       	st	Z, r18
     818:	31 97       	sbiw	r30, 0x01	; 1
     81a:	40 83       	st	Z, r20
     81c:	31 97       	sbiw	r30, 0x01	; 1
     81e:	50 83       	st	Z, r21
     820:	31 97       	sbiw	r30, 0x01	; 1
     822:	26 e2       	ldi	r18, 0x26	; 38
     824:	20 83       	st	Z, r18
     826:	31 97       	sbiw	r30, 0x01	; 1
     828:	27 e2       	ldi	r18, 0x27	; 39
     82a:	20 83       	st	Z, r18
     82c:	31 97       	sbiw	r30, 0x01	; 1
     82e:	28 e2       	ldi	r18, 0x28	; 40
     830:	20 83       	st	Z, r18
     832:	31 97       	sbiw	r30, 0x01	; 1
     834:	29 e2       	ldi	r18, 0x29	; 41
     836:	20 83       	st	Z, r18
     838:	31 97       	sbiw	r30, 0x01	; 1
     83a:	20 e3       	ldi	r18, 0x30	; 48
     83c:	20 83       	st	Z, r18
     83e:	31 97       	sbiw	r30, 0x01	; 1
     840:	21 e3       	ldi	r18, 0x31	; 49
     842:	20 83       	st	Z, r18
     844:	89 97       	sbiw	r24, 0x29	; 41
     846:	08 95       	ret

00000848 <xPortStartScheduler>:
     848:	a8 95       	wdr
     84a:	90 ec       	ldi	r25, 0xC0	; 192
     84c:	88 e1       	ldi	r24, 0x18	; 24
     84e:	0f b6       	in	r0, 0x3f	; 63
     850:	f8 94       	cli
     852:	a8 95       	wdr
     854:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     858:	0f be       	out	0x3f, r0	; 63
     85a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     85e:	a0 91 6e 03 	lds	r26, 0x036E	; 0x80036e <pxCurrentTCB>
     862:	b0 91 6f 03 	lds	r27, 0x036F	; 0x80036f <pxCurrentTCB+0x1>
     866:	cd 91       	ld	r28, X+
     868:	cd bf       	out	0x3d, r28	; 61
     86a:	dd 91       	ld	r29, X+
     86c:	de bf       	out	0x3e, r29	; 62
     86e:	ff 91       	pop	r31
     870:	ef 91       	pop	r30
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	bf 91       	pop	r27
     878:	af 91       	pop	r26
     87a:	9f 91       	pop	r25
     87c:	8f 91       	pop	r24
     87e:	7f 91       	pop	r23
     880:	6f 91       	pop	r22
     882:	5f 91       	pop	r21
     884:	4f 91       	pop	r20
     886:	3f 91       	pop	r19
     888:	2f 91       	pop	r18
     88a:	1f 91       	pop	r17
     88c:	0f 91       	pop	r16
     88e:	ff 90       	pop	r15
     890:	ef 90       	pop	r14
     892:	df 90       	pop	r13
     894:	cf 90       	pop	r12
     896:	bf 90       	pop	r11
     898:	af 90       	pop	r10
     89a:	9f 90       	pop	r9
     89c:	8f 90       	pop	r8
     89e:	7f 90       	pop	r7
     8a0:	6f 90       	pop	r6
     8a2:	5f 90       	pop	r5
     8a4:	4f 90       	pop	r4
     8a6:	3f 90       	pop	r3
     8a8:	2f 90       	pop	r2
     8aa:	1f 90       	pop	r1
     8ac:	0f 90       	pop	r0
     8ae:	0c be       	out	0x3c, r0	; 60
     8b0:	0f 90       	pop	r0
     8b2:	0b be       	out	0x3b, r0	; 59
     8b4:	0f 90       	pop	r0
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	0f 90       	pop	r0
     8ba:	08 95       	ret
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	08 95       	ret

000008c0 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     8c0:	0f 92       	push	r0
     8c2:	0f b6       	in	r0, 0x3f	; 63
     8c4:	f8 94       	cli
     8c6:	0f 92       	push	r0
     8c8:	0b b6       	in	r0, 0x3b	; 59
     8ca:	0f 92       	push	r0
     8cc:	0c b6       	in	r0, 0x3c	; 60
     8ce:	0f 92       	push	r0
     8d0:	1f 92       	push	r1
     8d2:	11 24       	eor	r1, r1
     8d4:	2f 92       	push	r2
     8d6:	3f 92       	push	r3
     8d8:	4f 92       	push	r4
     8da:	5f 92       	push	r5
     8dc:	6f 92       	push	r6
     8de:	7f 92       	push	r7
     8e0:	8f 92       	push	r8
     8e2:	9f 92       	push	r9
     8e4:	af 92       	push	r10
     8e6:	bf 92       	push	r11
     8e8:	cf 92       	push	r12
     8ea:	df 92       	push	r13
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	2f 93       	push	r18
     8f6:	3f 93       	push	r19
     8f8:	4f 93       	push	r20
     8fa:	5f 93       	push	r21
     8fc:	6f 93       	push	r22
     8fe:	7f 93       	push	r23
     900:	8f 93       	push	r24
     902:	9f 93       	push	r25
     904:	af 93       	push	r26
     906:	bf 93       	push	r27
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	ef 93       	push	r30
     90e:	ff 93       	push	r31
     910:	a0 91 6e 03 	lds	r26, 0x036E	; 0x80036e <pxCurrentTCB>
     914:	b0 91 6f 03 	lds	r27, 0x036F	; 0x80036f <pxCurrentTCB+0x1>
     918:	0d b6       	in	r0, 0x3d	; 61
     91a:	0d 92       	st	X+, r0
     91c:	0e b6       	in	r0, 0x3e	; 62
     91e:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     920:	30 d6       	rcall	.+3168   	; 0x1582 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     922:	a0 91 6e 03 	lds	r26, 0x036E	; 0x80036e <pxCurrentTCB>
     926:	b0 91 6f 03 	lds	r27, 0x036F	; 0x80036f <pxCurrentTCB+0x1>
     92a:	cd 91       	ld	r28, X+
     92c:	cd bf       	out	0x3d, r28	; 61
     92e:	dd 91       	ld	r29, X+
     930:	de bf       	out	0x3e, r29	; 62
     932:	ff 91       	pop	r31
     934:	ef 91       	pop	r30
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	bf 91       	pop	r27
     93c:	af 91       	pop	r26
     93e:	9f 91       	pop	r25
     940:	8f 91       	pop	r24
     942:	7f 91       	pop	r23
     944:	6f 91       	pop	r22
     946:	5f 91       	pop	r21
     948:	4f 91       	pop	r20
     94a:	3f 91       	pop	r19
     94c:	2f 91       	pop	r18
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	ff 90       	pop	r15
     954:	ef 90       	pop	r14
     956:	df 90       	pop	r13
     958:	cf 90       	pop	r12
     95a:	bf 90       	pop	r11
     95c:	af 90       	pop	r10
     95e:	9f 90       	pop	r9
     960:	8f 90       	pop	r8
     962:	7f 90       	pop	r7
     964:	6f 90       	pop	r6
     966:	5f 90       	pop	r5
     968:	4f 90       	pop	r4
     96a:	3f 90       	pop	r3
     96c:	2f 90       	pop	r2
     96e:	1f 90       	pop	r1
     970:	0f 90       	pop	r0
     972:	0c be       	out	0x3c, r0	; 60
     974:	0f 90       	pop	r0
     976:	0b be       	out	0x3b, r0	; 59
     978:	0f 90       	pop	r0
     97a:	0f be       	out	0x3f, r0	; 63
     97c:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     97e:	08 95       	ret

00000980 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     980:	0f 92       	push	r0
     982:	0f b6       	in	r0, 0x3f	; 63
     984:	f8 94       	cli
     986:	0f 92       	push	r0
     988:	0b b6       	in	r0, 0x3b	; 59
     98a:	0f 92       	push	r0
     98c:	0c b6       	in	r0, 0x3c	; 60
     98e:	0f 92       	push	r0
     990:	1f 92       	push	r1
     992:	11 24       	eor	r1, r1
     994:	2f 92       	push	r2
     996:	3f 92       	push	r3
     998:	4f 92       	push	r4
     99a:	5f 92       	push	r5
     99c:	6f 92       	push	r6
     99e:	7f 92       	push	r7
     9a0:	8f 92       	push	r8
     9a2:	9f 92       	push	r9
     9a4:	af 92       	push	r10
     9a6:	bf 92       	push	r11
     9a8:	cf 92       	push	r12
     9aa:	df 92       	push	r13
     9ac:	ef 92       	push	r14
     9ae:	ff 92       	push	r15
     9b0:	0f 93       	push	r16
     9b2:	1f 93       	push	r17
     9b4:	2f 93       	push	r18
     9b6:	3f 93       	push	r19
     9b8:	4f 93       	push	r20
     9ba:	5f 93       	push	r21
     9bc:	6f 93       	push	r22
     9be:	7f 93       	push	r23
     9c0:	8f 93       	push	r24
     9c2:	9f 93       	push	r25
     9c4:	af 93       	push	r26
     9c6:	bf 93       	push	r27
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	ef 93       	push	r30
     9ce:	ff 93       	push	r31
     9d0:	a0 91 6e 03 	lds	r26, 0x036E	; 0x80036e <pxCurrentTCB>
     9d4:	b0 91 6f 03 	lds	r27, 0x036F	; 0x80036f <pxCurrentTCB+0x1>
     9d8:	0d b6       	in	r0, 0x3d	; 61
     9da:	0d 92       	st	X+, r0
     9dc:	0e b6       	in	r0, 0x3e	; 62
     9de:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     9e0:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     9e2:	9f d4       	rcall	.+2366   	; 0x1322 <xTaskIncrementTick>
     9e4:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     9e6:	cd d5       	rcall	.+2970   	; 0x1582 <vTaskSwitchContext>
     9e8:	a0 91 6e 03 	lds	r26, 0x036E	; 0x80036e <pxCurrentTCB>
    }

    portRESTORE_CONTEXT();
     9ec:	b0 91 6f 03 	lds	r27, 0x036F	; 0x80036f <pxCurrentTCB+0x1>
     9f0:	cd 91       	ld	r28, X+
     9f2:	cd bf       	out	0x3d, r28	; 61
     9f4:	dd 91       	ld	r29, X+
     9f6:	de bf       	out	0x3e, r29	; 62
     9f8:	ff 91       	pop	r31
     9fa:	ef 91       	pop	r30
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	bf 91       	pop	r27
     a02:	af 91       	pop	r26
     a04:	9f 91       	pop	r25
     a06:	8f 91       	pop	r24
     a08:	7f 91       	pop	r23
     a0a:	6f 91       	pop	r22
     a0c:	5f 91       	pop	r21
     a0e:	4f 91       	pop	r20
     a10:	3f 91       	pop	r19
     a12:	2f 91       	pop	r18
     a14:	1f 91       	pop	r17
     a16:	0f 91       	pop	r16
     a18:	ff 90       	pop	r15
     a1a:	ef 90       	pop	r14
     a1c:	df 90       	pop	r13
     a1e:	cf 90       	pop	r12
     a20:	bf 90       	pop	r11
     a22:	af 90       	pop	r10
     a24:	9f 90       	pop	r9
     a26:	8f 90       	pop	r8
     a28:	7f 90       	pop	r7
     a2a:	6f 90       	pop	r6
     a2c:	5f 90       	pop	r5
     a2e:	4f 90       	pop	r4
     a30:	3f 90       	pop	r3
     a32:	2f 90       	pop	r2
     a34:	1f 90       	pop	r1
     a36:	0f 90       	pop	r0
     a38:	0c be       	out	0x3c, r0	; 60
     a3a:	0f 90       	pop	r0
     a3c:	0b be       	out	0x3b, r0	; 59
     a3e:	0f 90       	pop	r0
     a40:	0f be       	out	0x3f, r0	; 63
     a42:	0f 90       	pop	r0
     a44:	08 95       	ret

00000a46 <__vector_12>:

    __asm__ __volatile__ ( "ret" );
     a46:	9c df       	rcall	.-200    	; 0x980 <vPortYieldFromTick>
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
        __asm__ __volatile__ ( "reti" );
     a48:	18 95       	reti

00000a4a <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     a4a:	0f b6       	in	r0, 0x3f	; 63
     a4c:	f8 94       	cli
     a4e:	0f 92       	push	r0
     a50:	fc 01       	movw	r30, r24
     a52:	92 8d       	ldd	r25, Z+26	; 0x1a
     a54:	0f 90       	pop	r0
     a56:	0f be       	out	0x3f, r0	; 63
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	91 11       	cpse	r25, r1
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	08 95       	ret

00000a60 <prvCopyDataToQueue>:
     a60:	0f 93       	push	r16
     a62:	1f 93       	push	r17
     a64:	cf 93       	push	r28
     a66:	df 93       	push	r29
     a68:	ec 01       	movw	r28, r24
     a6a:	04 2f       	mov	r16, r20
     a6c:	1a 8d       	ldd	r17, Y+26	; 0x1a
     a6e:	4c 8d       	ldd	r20, Y+28	; 0x1c
     a70:	41 11       	cpse	r20, r1
     a72:	0b c0       	rjmp	.+22     	; 0xa8a <prvCopyDataToQueue+0x2a>
     a74:	88 81       	ld	r24, Y
     a76:	99 81       	ldd	r25, Y+1	; 0x01
     a78:	89 2b       	or	r24, r25
     a7a:	09 f0       	breq	.+2      	; 0xa7e <prvCopyDataToQueue+0x1e>
     a7c:	41 c0       	rjmp	.+130    	; 0xb00 <prvCopyDataToQueue+0xa0>
     a7e:	8c 81       	ldd	r24, Y+4	; 0x04
     a80:	9d 81       	ldd	r25, Y+5	; 0x05
     a82:	cd d6       	rcall	.+3482   	; 0x181e <xTaskPriorityDisinherit>
     a84:	1d 82       	std	Y+5, r1	; 0x05
     a86:	1c 82       	std	Y+4, r1	; 0x04
     a88:	42 c0       	rjmp	.+132    	; 0xb0e <prvCopyDataToQueue+0xae>
     a8a:	01 11       	cpse	r16, r1
     a8c:	17 c0       	rjmp	.+46     	; 0xabc <prvCopyDataToQueue+0x5c>
     a8e:	50 e0       	ldi	r21, 0x00	; 0
     a90:	8a 81       	ldd	r24, Y+2	; 0x02
     a92:	9b 81       	ldd	r25, Y+3	; 0x03
     a94:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <memcpy>
     a98:	2c 8d       	ldd	r18, Y+28	; 0x1c
     a9a:	8a 81       	ldd	r24, Y+2	; 0x02
     a9c:	9b 81       	ldd	r25, Y+3	; 0x03
     a9e:	82 0f       	add	r24, r18
     aa0:	91 1d       	adc	r25, r1
     aa2:	9b 83       	std	Y+3, r25	; 0x03
     aa4:	8a 83       	std	Y+2, r24	; 0x02
     aa6:	2c 81       	ldd	r18, Y+4	; 0x04
     aa8:	3d 81       	ldd	r19, Y+5	; 0x05
     aaa:	82 17       	cp	r24, r18
     aac:	93 07       	cpc	r25, r19
     aae:	50 f1       	brcs	.+84     	; 0xb04 <prvCopyDataToQueue+0xa4>
     ab0:	88 81       	ld	r24, Y
     ab2:	99 81       	ldd	r25, Y+1	; 0x01
     ab4:	9b 83       	std	Y+3, r25	; 0x03
     ab6:	8a 83       	std	Y+2, r24	; 0x02
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	29 c0       	rjmp	.+82     	; 0xb0e <prvCopyDataToQueue+0xae>
     abc:	50 e0       	ldi	r21, 0x00	; 0
     abe:	8e 81       	ldd	r24, Y+6	; 0x06
     ac0:	9f 81       	ldd	r25, Y+7	; 0x07
     ac2:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <memcpy>
     ac6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	91 95       	neg	r25
     acc:	81 95       	neg	r24
     ace:	91 09       	sbc	r25, r1
     ad0:	2e 81       	ldd	r18, Y+6	; 0x06
     ad2:	3f 81       	ldd	r19, Y+7	; 0x07
     ad4:	28 0f       	add	r18, r24
     ad6:	39 1f       	adc	r19, r25
     ad8:	3f 83       	std	Y+7, r19	; 0x07
     ada:	2e 83       	std	Y+6, r18	; 0x06
     adc:	48 81       	ld	r20, Y
     ade:	59 81       	ldd	r21, Y+1	; 0x01
     ae0:	24 17       	cp	r18, r20
     ae2:	35 07       	cpc	r19, r21
     ae4:	30 f4       	brcc	.+12     	; 0xaf2 <prvCopyDataToQueue+0x92>
     ae6:	2c 81       	ldd	r18, Y+4	; 0x04
     ae8:	3d 81       	ldd	r19, Y+5	; 0x05
     aea:	82 0f       	add	r24, r18
     aec:	93 1f       	adc	r25, r19
     aee:	9f 83       	std	Y+7, r25	; 0x07
     af0:	8e 83       	std	Y+6, r24	; 0x06
     af2:	02 30       	cpi	r16, 0x02	; 2
     af4:	49 f4       	brne	.+18     	; 0xb08 <prvCopyDataToQueue+0xa8>
     af6:	11 23       	and	r17, r17
     af8:	49 f0       	breq	.+18     	; 0xb0c <prvCopyDataToQueue+0xac>
     afa:	11 50       	subi	r17, 0x01	; 1
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	07 c0       	rjmp	.+14     	; 0xb0e <prvCopyDataToQueue+0xae>
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	05 c0       	rjmp	.+10     	; 0xb0e <prvCopyDataToQueue+0xae>
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	03 c0       	rjmp	.+6      	; 0xb0e <prvCopyDataToQueue+0xae>
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	01 c0       	rjmp	.+2      	; 0xb0e <prvCopyDataToQueue+0xae>
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	1f 5f       	subi	r17, 0xFF	; 255
     b10:	1a 8f       	std	Y+26, r17	; 0x1a
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	1f 91       	pop	r17
     b18:	0f 91       	pop	r16
     b1a:	08 95       	ret

00000b1c <prvCopyDataFromQueue>:
     b1c:	fc 01       	movw	r30, r24
     b1e:	44 8d       	ldd	r20, Z+28	; 0x1c
     b20:	44 23       	and	r20, r20
     b22:	a9 f0       	breq	.+42     	; 0xb4e <prvCopyDataFromQueue+0x32>
     b24:	50 e0       	ldi	r21, 0x00	; 0
     b26:	26 81       	ldd	r18, Z+6	; 0x06
     b28:	37 81       	ldd	r19, Z+7	; 0x07
     b2a:	24 0f       	add	r18, r20
     b2c:	35 1f       	adc	r19, r21
     b2e:	37 83       	std	Z+7, r19	; 0x07
     b30:	26 83       	std	Z+6, r18	; 0x06
     b32:	84 81       	ldd	r24, Z+4	; 0x04
     b34:	95 81       	ldd	r25, Z+5	; 0x05
     b36:	28 17       	cp	r18, r24
     b38:	39 07       	cpc	r19, r25
     b3a:	20 f0       	brcs	.+8      	; 0xb44 <prvCopyDataFromQueue+0x28>
     b3c:	80 81       	ld	r24, Z
     b3e:	91 81       	ldd	r25, Z+1	; 0x01
     b40:	97 83       	std	Z+7, r25	; 0x07
     b42:	86 83       	std	Z+6, r24	; 0x06
     b44:	cb 01       	movw	r24, r22
     b46:	66 81       	ldd	r22, Z+6	; 0x06
     b48:	77 81       	ldd	r23, Z+7	; 0x07
     b4a:	0c 94 ba 17 	jmp	0x2f74	; 0x2f74 <memcpy>
     b4e:	08 95       	ret

00000b50 <prvUnlockQueue>:
     b50:	ef 92       	push	r14
     b52:	ff 92       	push	r15
     b54:	0f 93       	push	r16
     b56:	1f 93       	push	r17
     b58:	cf 93       	push	r28
     b5a:	8c 01       	movw	r16, r24
     b5c:	0f b6       	in	r0, 0x3f	; 63
     b5e:	f8 94       	cli
     b60:	0f 92       	push	r0
     b62:	fc 01       	movw	r30, r24
     b64:	c6 8d       	ldd	r28, Z+30	; 0x1e
     b66:	1c 16       	cp	r1, r28
     b68:	9c f4       	brge	.+38     	; 0xb90 <prvUnlockQueue+0x40>
     b6a:	81 89       	ldd	r24, Z+17	; 0x11
     b6c:	81 11       	cpse	r24, r1
     b6e:	06 c0       	rjmp	.+12     	; 0xb7c <prvUnlockQueue+0x2c>
     b70:	0f c0       	rjmp	.+30     	; 0xb90 <prvUnlockQueue+0x40>
     b72:	f8 01       	movw	r30, r16
     b74:	81 89       	ldd	r24, Z+17	; 0x11
     b76:	81 11       	cpse	r24, r1
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <prvUnlockQueue+0x34>
     b7a:	0a c0       	rjmp	.+20     	; 0xb90 <prvUnlockQueue+0x40>
     b7c:	78 01       	movw	r14, r16
     b7e:	f1 e1       	ldi	r31, 0x11	; 17
     b80:	ef 0e       	add	r14, r31
     b82:	f1 1c       	adc	r15, r1
     b84:	c7 01       	movw	r24, r14
     b86:	b2 d5       	rcall	.+2916   	; 0x16ec <xTaskRemoveFromEventList>
     b88:	81 11       	cpse	r24, r1
     b8a:	37 d6       	rcall	.+3182   	; 0x17fa <vTaskMissedYield>
     b8c:	c1 50       	subi	r28, 0x01	; 1
     b8e:	89 f7       	brne	.-30     	; 0xb72 <prvUnlockQueue+0x22>
     b90:	8f ef       	ldi	r24, 0xFF	; 255
     b92:	f8 01       	movw	r30, r16
     b94:	86 8f       	std	Z+30, r24	; 0x1e
     b96:	0f 90       	pop	r0
     b98:	0f be       	out	0x3f, r0	; 63
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	f8 94       	cli
     b9e:	0f 92       	push	r0
     ba0:	c5 8d       	ldd	r28, Z+29	; 0x1d
     ba2:	1c 16       	cp	r1, r28
     ba4:	9c f4       	brge	.+38     	; 0xbcc <prvUnlockQueue+0x7c>
     ba6:	80 85       	ldd	r24, Z+8	; 0x08
     ba8:	81 11       	cpse	r24, r1
     baa:	06 c0       	rjmp	.+12     	; 0xbb8 <prvUnlockQueue+0x68>
     bac:	0f c0       	rjmp	.+30     	; 0xbcc <prvUnlockQueue+0x7c>
     bae:	f8 01       	movw	r30, r16
     bb0:	80 85       	ldd	r24, Z+8	; 0x08
     bb2:	81 11       	cpse	r24, r1
     bb4:	05 c0       	rjmp	.+10     	; 0xbc0 <prvUnlockQueue+0x70>
     bb6:	0a c0       	rjmp	.+20     	; 0xbcc <prvUnlockQueue+0x7c>
     bb8:	78 01       	movw	r14, r16
     bba:	f8 e0       	ldi	r31, 0x08	; 8
     bbc:	ef 0e       	add	r14, r31
     bbe:	f1 1c       	adc	r15, r1
     bc0:	c7 01       	movw	r24, r14
     bc2:	94 d5       	rcall	.+2856   	; 0x16ec <xTaskRemoveFromEventList>
     bc4:	81 11       	cpse	r24, r1
     bc6:	19 d6       	rcall	.+3122   	; 0x17fa <vTaskMissedYield>
     bc8:	c1 50       	subi	r28, 0x01	; 1
     bca:	89 f7       	brne	.-30     	; 0xbae <prvUnlockQueue+0x5e>
     bcc:	8f ef       	ldi	r24, 0xFF	; 255
     bce:	f8 01       	movw	r30, r16
     bd0:	85 8f       	std	Z+29, r24	; 0x1d
     bd2:	0f 90       	pop	r0
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	cf 91       	pop	r28
     bd8:	1f 91       	pop	r17
     bda:	0f 91       	pop	r16
     bdc:	ff 90       	pop	r15
     bde:	ef 90       	pop	r14
     be0:	08 95       	ret

00000be2 <xQueueGenericReset>:
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
     be6:	ec 01       	movw	r28, r24
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	f8 94       	cli
     bec:	0f 92       	push	r0
     bee:	e8 81       	ld	r30, Y
     bf0:	f9 81       	ldd	r31, Y+1	; 0x01
     bf2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bf4:	2c 8d       	ldd	r18, Y+28	; 0x1c
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	82 9f       	mul	r24, r18
     bfc:	a0 01       	movw	r20, r0
     bfe:	83 9f       	mul	r24, r19
     c00:	50 0d       	add	r21, r0
     c02:	92 9f       	mul	r25, r18
     c04:	50 0d       	add	r21, r0
     c06:	11 24       	eor	r1, r1
     c08:	4e 0f       	add	r20, r30
     c0a:	5f 1f       	adc	r21, r31
     c0c:	5d 83       	std	Y+5, r21	; 0x05
     c0e:	4c 83       	std	Y+4, r20	; 0x04
     c10:	1a 8e       	std	Y+26, r1	; 0x1a
     c12:	fb 83       	std	Y+3, r31	; 0x03
     c14:	ea 83       	std	Y+2, r30	; 0x02
     c16:	01 97       	sbiw	r24, 0x01	; 1
     c18:	82 9f       	mul	r24, r18
     c1a:	a0 01       	movw	r20, r0
     c1c:	83 9f       	mul	r24, r19
     c1e:	50 0d       	add	r21, r0
     c20:	92 9f       	mul	r25, r18
     c22:	50 0d       	add	r21, r0
     c24:	11 24       	eor	r1, r1
     c26:	cf 01       	movw	r24, r30
     c28:	84 0f       	add	r24, r20
     c2a:	95 1f       	adc	r25, r21
     c2c:	9f 83       	std	Y+7, r25	; 0x07
     c2e:	8e 83       	std	Y+6, r24	; 0x06
     c30:	8f ef       	ldi	r24, 0xFF	; 255
     c32:	8d 8f       	std	Y+29, r24	; 0x1d
     c34:	8e 8f       	std	Y+30, r24	; 0x1e
     c36:	61 11       	cpse	r22, r1
     c38:	0a c0       	rjmp	.+20     	; 0xc4e <xQueueGenericReset+0x6c>
     c3a:	88 85       	ldd	r24, Y+8	; 0x08
     c3c:	88 23       	and	r24, r24
     c3e:	69 f0       	breq	.+26     	; 0xc5a <xQueueGenericReset+0x78>
     c40:	ce 01       	movw	r24, r28
     c42:	08 96       	adiw	r24, 0x08	; 8
     c44:	53 d5       	rcall	.+2726   	; 0x16ec <xTaskRemoveFromEventList>
     c46:	88 23       	and	r24, r24
     c48:	41 f0       	breq	.+16     	; 0xc5a <xQueueGenericReset+0x78>
     c4a:	3a de       	rcall	.-908    	; 0x8c0 <vPortYield>
     c4c:	06 c0       	rjmp	.+12     	; 0xc5a <xQueueGenericReset+0x78>
     c4e:	ce 01       	movw	r24, r28
     c50:	08 96       	adiw	r24, 0x08	; 8
     c52:	fd dc       	rcall	.-1542   	; 0x64e <vListInitialise>
     c54:	ce 01       	movw	r24, r28
     c56:	41 96       	adiw	r24, 0x11	; 17
     c58:	fa dc       	rcall	.-1548   	; 0x64e <vListInitialise>
     c5a:	0f 90       	pop	r0
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	08 95       	ret

00000c66 <xQueueGenericCreate>:
     c66:	ff 92       	push	r15
     c68:	0f 93       	push	r16
     c6a:	1f 93       	push	r17
     c6c:	cf 93       	push	r28
     c6e:	df 93       	push	r29
     c70:	08 2f       	mov	r16, r24
     c72:	16 2f       	mov	r17, r22
     c74:	f4 2e       	mov	r15, r20
     c76:	66 23       	and	r22, r22
     c78:	b9 f0       	breq	.+46     	; 0xca8 <xQueueGenericCreate+0x42>
     c7a:	86 9f       	mul	r24, r22
     c7c:	c0 01       	movw	r24, r0
     c7e:	11 24       	eor	r1, r1
     c80:	81 96       	adiw	r24, 0x21	; 33
     c82:	c7 dc       	rcall	.-1650   	; 0x612 <pvPortMalloc>
     c84:	ec 01       	movw	r28, r24
     c86:	00 97       	sbiw	r24, 0x00	; 0
     c88:	41 f4       	brne	.+16     	; 0xc9a <xQueueGenericCreate+0x34>
     c8a:	14 c0       	rjmp	.+40     	; 0xcb4 <xQueueGenericCreate+0x4e>
     c8c:	0b 8f       	std	Y+27, r16	; 0x1b
     c8e:	1c 8f       	std	Y+28, r17	; 0x1c
     c90:	61 e0       	ldi	r22, 0x01	; 1
     c92:	ce 01       	movw	r24, r28
     c94:	a6 df       	rcall	.-180    	; 0xbe2 <xQueueGenericReset>
     c96:	f8 a2       	std	Y+32, r15	; 0x20
     c98:	0d c0       	rjmp	.+26     	; 0xcb4 <xQueueGenericCreate+0x4e>
     c9a:	81 96       	adiw	r24, 0x21	; 33
     c9c:	99 83       	std	Y+1, r25	; 0x01
     c9e:	88 83       	st	Y, r24
     ca0:	f5 cf       	rjmp	.-22     	; 0xc8c <xQueueGenericCreate+0x26>
     ca2:	d9 83       	std	Y+1, r29	; 0x01
     ca4:	c8 83       	st	Y, r28
     ca6:	f2 cf       	rjmp	.-28     	; 0xc8c <xQueueGenericCreate+0x26>
     ca8:	81 e2       	ldi	r24, 0x21	; 33
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	b2 dc       	rcall	.-1692   	; 0x612 <pvPortMalloc>
     cae:	ec 01       	movw	r28, r24
     cb0:	89 2b       	or	r24, r25
     cb2:	b9 f7       	brne	.-18     	; 0xca2 <xQueueGenericCreate+0x3c>
     cb4:	ce 01       	movw	r24, r28
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	ff 90       	pop	r15
     cc0:	08 95       	ret

00000cc2 <xQueueGenericSend>:
     cc2:	9f 92       	push	r9
     cc4:	af 92       	push	r10
     cc6:	bf 92       	push	r11
     cc8:	cf 92       	push	r12
     cca:	df 92       	push	r13
     ccc:	ef 92       	push	r14
     cce:	ff 92       	push	r15
     cd0:	0f 93       	push	r16
     cd2:	1f 93       	push	r17
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
     cd8:	00 d0       	rcall	.+0      	; 0xcda <xQueueGenericSend+0x18>
     cda:	1f 92       	push	r1
     cdc:	1f 92       	push	r1
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	8c 01       	movw	r16, r24
     ce4:	6b 01       	movw	r12, r22
     ce6:	5d 83       	std	Y+5, r21	; 0x05
     ce8:	4c 83       	std	Y+4, r20	; 0x04
     cea:	a2 2e       	mov	r10, r18
     cec:	b1 2c       	mov	r11, r1
     cee:	99 24       	eor	r9, r9
     cf0:	93 94       	inc	r9
     cf2:	7c 01       	movw	r14, r24
     cf4:	88 e0       	ldi	r24, 0x08	; 8
     cf6:	e8 0e       	add	r14, r24
     cf8:	f1 1c       	adc	r15, r1
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	f8 94       	cli
     cfe:	0f 92       	push	r0
     d00:	f8 01       	movw	r30, r16
     d02:	92 8d       	ldd	r25, Z+26	; 0x1a
     d04:	83 8d       	ldd	r24, Z+27	; 0x1b
     d06:	98 17       	cp	r25, r24
     d08:	18 f0       	brcs	.+6      	; 0xd10 <xQueueGenericSend+0x4e>
     d0a:	f2 e0       	ldi	r31, 0x02	; 2
     d0c:	af 12       	cpse	r10, r31
     d0e:	15 c0       	rjmp	.+42     	; 0xd3a <xQueueGenericSend+0x78>
     d10:	4a 2d       	mov	r20, r10
     d12:	b6 01       	movw	r22, r12
     d14:	c8 01       	movw	r24, r16
     d16:	a4 de       	rcall	.-696    	; 0xa60 <prvCopyDataToQueue>
     d18:	f8 01       	movw	r30, r16
     d1a:	91 89       	ldd	r25, Z+17	; 0x11
     d1c:	99 23       	and	r25, r25
     d1e:	39 f0       	breq	.+14     	; 0xd2e <xQueueGenericSend+0x6c>
     d20:	c8 01       	movw	r24, r16
     d22:	41 96       	adiw	r24, 0x11	; 17
     d24:	e3 d4       	rcall	.+2502   	; 0x16ec <xTaskRemoveFromEventList>
     d26:	88 23       	and	r24, r24
     d28:	21 f0       	breq	.+8      	; 0xd32 <xQueueGenericSend+0x70>
     d2a:	ca dd       	rcall	.-1132   	; 0x8c0 <vPortYield>
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <xQueueGenericSend+0x70>
     d2e:	81 11       	cpse	r24, r1
     d30:	c7 dd       	rcall	.-1138   	; 0x8c0 <vPortYield>
     d32:	0f 90       	pop	r0
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	45 c0       	rjmp	.+138    	; 0xdc4 <xQueueGenericSend+0x102>
     d3a:	8c 81       	ldd	r24, Y+4	; 0x04
     d3c:	9d 81       	ldd	r25, Y+5	; 0x05
     d3e:	89 2b       	or	r24, r25
     d40:	21 f4       	brne	.+8      	; 0xd4a <xQueueGenericSend+0x88>
     d42:	0f 90       	pop	r0
     d44:	0f be       	out	0x3f, r0	; 63
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	3d c0       	rjmp	.+122    	; 0xdc4 <xQueueGenericSend+0x102>
     d4a:	b1 10       	cpse	r11, r1
     d4c:	04 c0       	rjmp	.+8      	; 0xd56 <xQueueGenericSend+0x94>
     d4e:	ce 01       	movw	r24, r28
     d50:	01 96       	adiw	r24, 0x01	; 1
     d52:	13 d5       	rcall	.+2598   	; 0x177a <vTaskInternalSetTimeOutState>
     d54:	b9 2c       	mov	r11, r9
     d56:	0f 90       	pop	r0
     d58:	0f be       	out	0x3f, r0	; 63
     d5a:	d3 d2       	rcall	.+1446   	; 0x1302 <vTaskSuspendAll>
     d5c:	0f b6       	in	r0, 0x3f	; 63
     d5e:	f8 94       	cli
     d60:	0f 92       	push	r0
     d62:	f8 01       	movw	r30, r16
     d64:	85 8d       	ldd	r24, Z+29	; 0x1d
     d66:	8f 3f       	cpi	r24, 0xFF	; 255
     d68:	09 f4       	brne	.+2      	; 0xd6c <xQueueGenericSend+0xaa>
     d6a:	15 8e       	std	Z+29, r1	; 0x1d
     d6c:	f8 01       	movw	r30, r16
     d6e:	86 8d       	ldd	r24, Z+30	; 0x1e
     d70:	8f 3f       	cpi	r24, 0xFF	; 255
     d72:	09 f4       	brne	.+2      	; 0xd76 <xQueueGenericSend+0xb4>
     d74:	16 8e       	std	Z+30, r1	; 0x1e
     d76:	0f 90       	pop	r0
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	be 01       	movw	r22, r28
     d7c:	6c 5f       	subi	r22, 0xFC	; 252
     d7e:	7f 4f       	sbci	r23, 0xFF	; 255
     d80:	ce 01       	movw	r24, r28
     d82:	01 96       	adiw	r24, 0x01	; 1
     d84:	05 d5       	rcall	.+2570   	; 0x1790 <xTaskCheckForTimeOut>
     d86:	81 11       	cpse	r24, r1
     d88:	19 c0       	rjmp	.+50     	; 0xdbc <xQueueGenericSend+0xfa>
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	f8 94       	cli
     d8e:	0f 92       	push	r0
     d90:	f8 01       	movw	r30, r16
     d92:	92 8d       	ldd	r25, Z+26	; 0x1a
     d94:	83 8d       	ldd	r24, Z+27	; 0x1b
     d96:	0f 90       	pop	r0
     d98:	0f be       	out	0x3f, r0	; 63
     d9a:	98 13       	cpse	r25, r24
     d9c:	0b c0       	rjmp	.+22     	; 0xdb4 <xQueueGenericSend+0xf2>
     d9e:	6c 81       	ldd	r22, Y+4	; 0x04
     da0:	7d 81       	ldd	r23, Y+5	; 0x05
     da2:	c7 01       	movw	r24, r14
     da4:	7b d4       	rcall	.+2294   	; 0x169c <vTaskPlaceOnEventList>
     da6:	c8 01       	movw	r24, r16
     da8:	d3 de       	rcall	.-602    	; 0xb50 <prvUnlockQueue>
     daa:	72 d3       	rcall	.+1764   	; 0x1490 <xTaskResumeAll>
     dac:	81 11       	cpse	r24, r1
     dae:	a5 cf       	rjmp	.-182    	; 0xcfa <xQueueGenericSend+0x38>
     db0:	87 dd       	rcall	.-1266   	; 0x8c0 <vPortYield>
     db2:	a3 cf       	rjmp	.-186    	; 0xcfa <xQueueGenericSend+0x38>
     db4:	c8 01       	movw	r24, r16
     db6:	cc de       	rcall	.-616    	; 0xb50 <prvUnlockQueue>
     db8:	6b d3       	rcall	.+1750   	; 0x1490 <xTaskResumeAll>
     dba:	9f cf       	rjmp	.-194    	; 0xcfa <xQueueGenericSend+0x38>
     dbc:	c8 01       	movw	r24, r16
     dbe:	c8 de       	rcall	.-624    	; 0xb50 <prvUnlockQueue>
     dc0:	67 d3       	rcall	.+1742   	; 0x1490 <xTaskResumeAll>
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
     dcc:	0f 90       	pop	r0
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	1f 91       	pop	r17
     dd4:	0f 91       	pop	r16
     dd6:	ff 90       	pop	r15
     dd8:	ef 90       	pop	r14
     dda:	df 90       	pop	r13
     ddc:	cf 90       	pop	r12
     dde:	bf 90       	pop	r11
     de0:	af 90       	pop	r10
     de2:	9f 90       	pop	r9
     de4:	08 95       	ret

00000de6 <xQueueGenericSendFromISR>:
     de6:	ef 92       	push	r14
     de8:	ff 92       	push	r15
     dea:	0f 93       	push	r16
     dec:	1f 93       	push	r17
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	8a 01       	movw	r16, r20
     df4:	fc 01       	movw	r30, r24
     df6:	52 8d       	ldd	r21, Z+26	; 0x1a
     df8:	33 8d       	ldd	r19, Z+27	; 0x1b
     dfa:	53 17       	cp	r21, r19
     dfc:	10 f0       	brcs	.+4      	; 0xe02 <xQueueGenericSendFromISR+0x1c>
     dfe:	22 30       	cpi	r18, 0x02	; 2
     e00:	e1 f4       	brne	.+56     	; 0xe3a <xQueueGenericSendFromISR+0x54>
     e02:	42 2f       	mov	r20, r18
     e04:	78 01       	movw	r14, r16
     e06:	ec 01       	movw	r28, r24
     e08:	1e 8d       	ldd	r17, Y+30	; 0x1e
     e0a:	2a de       	rcall	.-940    	; 0xa60 <prvCopyDataToQueue>
     e0c:	1f 3f       	cpi	r17, 0xFF	; 255
     e0e:	79 f4       	brne	.+30     	; 0xe2e <xQueueGenericSendFromISR+0x48>
     e10:	89 89       	ldd	r24, Y+17	; 0x11
     e12:	88 23       	and	r24, r24
     e14:	a1 f0       	breq	.+40     	; 0xe3e <xQueueGenericSendFromISR+0x58>
     e16:	ce 01       	movw	r24, r28
     e18:	41 96       	adiw	r24, 0x11	; 17
     e1a:	68 d4       	rcall	.+2256   	; 0x16ec <xTaskRemoveFromEventList>
     e1c:	88 23       	and	r24, r24
     e1e:	89 f0       	breq	.+34     	; 0xe42 <xQueueGenericSendFromISR+0x5c>
     e20:	e1 14       	cp	r14, r1
     e22:	f1 04       	cpc	r15, r1
     e24:	81 f0       	breq	.+32     	; 0xe46 <xQueueGenericSendFromISR+0x60>
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	f7 01       	movw	r30, r14
     e2a:	80 83       	st	Z, r24
     e2c:	0d c0       	rjmp	.+26     	; 0xe48 <xQueueGenericSendFromISR+0x62>
     e2e:	ff 24       	eor	r15, r15
     e30:	f3 94       	inc	r15
     e32:	f1 0e       	add	r15, r17
     e34:	fe 8e       	std	Y+30, r15	; 0x1e
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	07 c0       	rjmp	.+14     	; 0xe48 <xQueueGenericSendFromISR+0x62>
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	05 c0       	rjmp	.+10     	; 0xe48 <xQueueGenericSendFromISR+0x62>
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	03 c0       	rjmp	.+6      	; 0xe48 <xQueueGenericSendFromISR+0x62>
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	01 c0       	rjmp	.+2      	; 0xe48 <xQueueGenericSendFromISR+0x62>
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	1f 91       	pop	r17
     e4e:	0f 91       	pop	r16
     e50:	ff 90       	pop	r15
     e52:	ef 90       	pop	r14
     e54:	08 95       	ret

00000e56 <xQueueReceive>:
     e56:	9f 92       	push	r9
     e58:	af 92       	push	r10
     e5a:	bf 92       	push	r11
     e5c:	cf 92       	push	r12
     e5e:	df 92       	push	r13
     e60:	ef 92       	push	r14
     e62:	ff 92       	push	r15
     e64:	0f 93       	push	r16
     e66:	1f 93       	push	r17
     e68:	cf 93       	push	r28
     e6a:	df 93       	push	r29
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <xQueueReceive+0x18>
     e6e:	1f 92       	push	r1
     e70:	1f 92       	push	r1
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
     e76:	8c 01       	movw	r16, r24
     e78:	5b 01       	movw	r10, r22
     e7a:	5d 83       	std	Y+5, r21	; 0x05
     e7c:	4c 83       	std	Y+4, r20	; 0x04
     e7e:	e1 2c       	mov	r14, r1
     e80:	99 24       	eor	r9, r9
     e82:	93 94       	inc	r9
     e84:	6c 01       	movw	r12, r24
     e86:	81 e1       	ldi	r24, 0x11	; 17
     e88:	c8 0e       	add	r12, r24
     e8a:	d1 1c       	adc	r13, r1
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	f8 94       	cli
     e90:	0f 92       	push	r0
     e92:	f8 01       	movw	r30, r16
     e94:	f2 8c       	ldd	r15, Z+26	; 0x1a
     e96:	ff 20       	and	r15, r15
     e98:	91 f0       	breq	.+36     	; 0xebe <xQueueReceive+0x68>
     e9a:	b5 01       	movw	r22, r10
     e9c:	c8 01       	movw	r24, r16
     e9e:	3e de       	rcall	.-900    	; 0xb1c <prvCopyDataFromQueue>
     ea0:	fa 94       	dec	r15
     ea2:	f8 01       	movw	r30, r16
     ea4:	f2 8e       	std	Z+26, r15	; 0x1a
     ea6:	80 85       	ldd	r24, Z+8	; 0x08
     ea8:	88 23       	and	r24, r24
     eaa:	29 f0       	breq	.+10     	; 0xeb6 <xQueueReceive+0x60>
     eac:	c8 01       	movw	r24, r16
     eae:	08 96       	adiw	r24, 0x08	; 8
     eb0:	1d d4       	rcall	.+2106   	; 0x16ec <xTaskRemoveFromEventList>
     eb2:	81 11       	cpse	r24, r1
     eb4:	05 dd       	rcall	.-1526   	; 0x8c0 <vPortYield>
     eb6:	0f 90       	pop	r0
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	44 c0       	rjmp	.+136    	; 0xf46 <xQueueReceive+0xf0>
     ebe:	8c 81       	ldd	r24, Y+4	; 0x04
     ec0:	9d 81       	ldd	r25, Y+5	; 0x05
     ec2:	89 2b       	or	r24, r25
     ec4:	21 f4       	brne	.+8      	; 0xece <xQueueReceive+0x78>
     ec6:	0f 90       	pop	r0
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	3c c0       	rjmp	.+120    	; 0xf46 <xQueueReceive+0xf0>
     ece:	e1 10       	cpse	r14, r1
     ed0:	04 c0       	rjmp	.+8      	; 0xeda <xQueueReceive+0x84>
     ed2:	ce 01       	movw	r24, r28
     ed4:	01 96       	adiw	r24, 0x01	; 1
     ed6:	51 d4       	rcall	.+2210   	; 0x177a <vTaskInternalSetTimeOutState>
     ed8:	e9 2c       	mov	r14, r9
     eda:	0f 90       	pop	r0
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	11 d2       	rcall	.+1058   	; 0x1302 <vTaskSuspendAll>
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	f8 94       	cli
     ee4:	0f 92       	push	r0
     ee6:	f8 01       	movw	r30, r16
     ee8:	85 8d       	ldd	r24, Z+29	; 0x1d
     eea:	8f 3f       	cpi	r24, 0xFF	; 255
     eec:	09 f4       	brne	.+2      	; 0xef0 <xQueueReceive+0x9a>
     eee:	15 8e       	std	Z+29, r1	; 0x1d
     ef0:	f8 01       	movw	r30, r16
     ef2:	86 8d       	ldd	r24, Z+30	; 0x1e
     ef4:	8f 3f       	cpi	r24, 0xFF	; 255
     ef6:	09 f4       	brne	.+2      	; 0xefa <xQueueReceive+0xa4>
     ef8:	16 8e       	std	Z+30, r1	; 0x1e
     efa:	0f 90       	pop	r0
     efc:	0f be       	out	0x3f, r0	; 63
     efe:	be 01       	movw	r22, r28
     f00:	6c 5f       	subi	r22, 0xFC	; 252
     f02:	7f 4f       	sbci	r23, 0xFF	; 255
     f04:	ce 01       	movw	r24, r28
     f06:	01 96       	adiw	r24, 0x01	; 1
     f08:	43 d4       	rcall	.+2182   	; 0x1790 <xTaskCheckForTimeOut>
     f0a:	81 11       	cpse	r24, r1
     f0c:	13 c0       	rjmp	.+38     	; 0xf34 <xQueueReceive+0xde>
     f0e:	c8 01       	movw	r24, r16
     f10:	9c dd       	rcall	.-1224   	; 0xa4a <prvIsQueueEmpty>
     f12:	88 23       	and	r24, r24
     f14:	59 f0       	breq	.+22     	; 0xf2c <xQueueReceive+0xd6>
     f16:	6c 81       	ldd	r22, Y+4	; 0x04
     f18:	7d 81       	ldd	r23, Y+5	; 0x05
     f1a:	c6 01       	movw	r24, r12
     f1c:	bf d3       	rcall	.+1918   	; 0x169c <vTaskPlaceOnEventList>
     f1e:	c8 01       	movw	r24, r16
     f20:	17 de       	rcall	.-978    	; 0xb50 <prvUnlockQueue>
     f22:	b6 d2       	rcall	.+1388   	; 0x1490 <xTaskResumeAll>
     f24:	81 11       	cpse	r24, r1
     f26:	b2 cf       	rjmp	.-156    	; 0xe8c <xQueueReceive+0x36>
     f28:	cb dc       	rcall	.-1642   	; 0x8c0 <vPortYield>
     f2a:	b0 cf       	rjmp	.-160    	; 0xe8c <xQueueReceive+0x36>
     f2c:	c8 01       	movw	r24, r16
     f2e:	10 de       	rcall	.-992    	; 0xb50 <prvUnlockQueue>
     f30:	af d2       	rcall	.+1374   	; 0x1490 <xTaskResumeAll>
     f32:	ac cf       	rjmp	.-168    	; 0xe8c <xQueueReceive+0x36>
     f34:	c8 01       	movw	r24, r16
     f36:	0c de       	rcall	.-1000   	; 0xb50 <prvUnlockQueue>
     f38:	ab d2       	rcall	.+1366   	; 0x1490 <xTaskResumeAll>
     f3a:	c8 01       	movw	r24, r16
     f3c:	86 dd       	rcall	.-1268   	; 0xa4a <prvIsQueueEmpty>
     f3e:	88 23       	and	r24, r24
     f40:	09 f4       	brne	.+2      	; 0xf44 <xQueueReceive+0xee>
     f42:	a4 cf       	rjmp	.-184    	; 0xe8c <xQueueReceive+0x36>
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	0f 90       	pop	r0
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	1f 91       	pop	r17
     f56:	0f 91       	pop	r16
     f58:	ff 90       	pop	r15
     f5a:	ef 90       	pop	r14
     f5c:	df 90       	pop	r13
     f5e:	cf 90       	pop	r12
     f60:	bf 90       	pop	r11
     f62:	af 90       	pop	r10
     f64:	9f 90       	pop	r9
     f66:	08 95       	ret

00000f68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
     f6c:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	f8 94       	cli
     f72:	0f 92       	push	r0
     f74:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f76:	8f 3f       	cpi	r24, 0xFF	; 255
     f78:	09 f4       	brne	.+2      	; 0xf7c <vQueueWaitForMessageRestricted+0x14>
     f7a:	1d 8e       	std	Y+29, r1	; 0x1d
     f7c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f7e:	8f 3f       	cpi	r24, 0xFF	; 255
     f80:	09 f4       	brne	.+2      	; 0xf84 <vQueueWaitForMessageRestricted+0x1c>
     f82:	1e 8e       	std	Y+30, r1	; 0x1e
     f84:	0f 90       	pop	r0
     f86:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     f88:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f8a:	81 11       	cpse	r24, r1
     f8c:	03 c0       	rjmp	.+6      	; 0xf94 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     f8e:	ce 01       	movw	r24, r28
     f90:	41 96       	adiw	r24, 0x11	; 17
     f92:	94 d3       	rcall	.+1832   	; 0x16bc <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
     f94:	ce 01       	movw	r24, r28
     f96:	dc dd       	rcall	.-1096   	; 0xb50 <prvUnlockQueue>
    }
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28
     f9c:	08 95       	ret

00000f9e <prvResetNextTaskUnblockTime>:
     f9e:	e0 91 36 03 	lds	r30, 0x0336	; 0x800336 <pxDelayedTaskList>
     fa2:	f0 91 37 03 	lds	r31, 0x0337	; 0x800337 <pxDelayedTaskList+0x1>
     fa6:	80 81       	ld	r24, Z
     fa8:	81 11       	cpse	r24, r1
     faa:	07 c0       	rjmp	.+14     	; 0xfba <prvResetNextTaskUnblockTime+0x1c>
     fac:	8f ef       	ldi	r24, 0xFF	; 255
     fae:	9f ef       	ldi	r25, 0xFF	; 255
     fb0:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <xNextTaskUnblockTime+0x1>
     fb4:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <xNextTaskUnblockTime>
     fb8:	08 95       	ret
     fba:	e0 91 36 03 	lds	r30, 0x0336	; 0x800336 <pxDelayedTaskList>
     fbe:	f0 91 37 03 	lds	r31, 0x0337	; 0x800337 <pxDelayedTaskList+0x1>
     fc2:	05 80       	ldd	r0, Z+5	; 0x05
     fc4:	f6 81       	ldd	r31, Z+6	; 0x06
     fc6:	e0 2d       	mov	r30, r0
     fc8:	06 80       	ldd	r0, Z+6	; 0x06
     fca:	f7 81       	ldd	r31, Z+7	; 0x07
     fcc:	e0 2d       	mov	r30, r0
     fce:	82 81       	ldd	r24, Z+2	; 0x02
     fd0:	93 81       	ldd	r25, Z+3	; 0x03
     fd2:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <xNextTaskUnblockTime+0x1>
     fd6:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <xNextTaskUnblockTime>
     fda:	08 95       	ret

00000fdc <prvAddCurrentTaskToDelayedList>:
     fdc:	ff 92       	push	r15
     fde:	0f 93       	push	r16
     fe0:	1f 93       	push	r17
     fe2:	cf 93       	push	r28
     fe4:	df 93       	push	r29
     fe6:	ec 01       	movw	r28, r24
     fe8:	f6 2e       	mov	r15, r22
     fea:	00 91 15 03 	lds	r16, 0x0315	; 0x800315 <xTickCount>
     fee:	10 91 16 03 	lds	r17, 0x0316	; 0x800316 <xTickCount+0x1>
     ff2:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <pxCurrentTCB>
     ff6:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <pxCurrentTCB+0x1>
     ffa:	02 96       	adiw	r24, 0x02	; 2
     ffc:	8c db       	rcall	.-2280   	; 0x716 <uxListRemove>
     ffe:	cf 3f       	cpi	r28, 0xFF	; 255
    1000:	8f ef       	ldi	r24, 0xFF	; 255
    1002:	d8 07       	cpc	r29, r24
    1004:	61 f4       	brne	.+24     	; 0x101e <prvAddCurrentTaskToDelayedList+0x42>
    1006:	ff 20       	and	r15, r15
    1008:	51 f0       	breq	.+20     	; 0x101e <prvAddCurrentTaskToDelayedList+0x42>
    100a:	60 91 6e 03 	lds	r22, 0x036E	; 0x80036e <pxCurrentTCB>
    100e:	70 91 6f 03 	lds	r23, 0x036F	; 0x80036f <pxCurrentTCB+0x1>
    1012:	6e 5f       	subi	r22, 0xFE	; 254
    1014:	7f 4f       	sbci	r23, 0xFF	; 255
    1016:	88 e1       	ldi	r24, 0x18	; 24
    1018:	93 e0       	ldi	r25, 0x03	; 3
    101a:	2b db       	rcall	.-2474   	; 0x672 <vListInsertEnd>
    101c:	2d c0       	rjmp	.+90     	; 0x1078 <prvAddCurrentTaskToDelayedList+0x9c>
    101e:	c0 0f       	add	r28, r16
    1020:	d1 1f       	adc	r29, r17
    1022:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <pxCurrentTCB>
    1026:	f0 91 6f 03 	lds	r31, 0x036F	; 0x80036f <pxCurrentTCB+0x1>
    102a:	d3 83       	std	Z+3, r29	; 0x03
    102c:	c2 83       	std	Z+2, r28	; 0x02
    102e:	c0 17       	cp	r28, r16
    1030:	d1 07       	cpc	r29, r17
    1032:	60 f4       	brcc	.+24     	; 0x104c <prvAddCurrentTaskToDelayedList+0x70>
    1034:	60 91 6e 03 	lds	r22, 0x036E	; 0x80036e <pxCurrentTCB>
    1038:	70 91 6f 03 	lds	r23, 0x036F	; 0x80036f <pxCurrentTCB+0x1>
    103c:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <pxOverflowDelayedTaskList>
    1040:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <pxOverflowDelayedTaskList+0x1>
    1044:	6e 5f       	subi	r22, 0xFE	; 254
    1046:	7f 4f       	sbci	r23, 0xFF	; 255
    1048:	35 db       	rcall	.-2454   	; 0x6b4 <vListInsert>
    104a:	16 c0       	rjmp	.+44     	; 0x1078 <prvAddCurrentTaskToDelayedList+0x9c>
    104c:	60 91 6e 03 	lds	r22, 0x036E	; 0x80036e <pxCurrentTCB>
    1050:	70 91 6f 03 	lds	r23, 0x036F	; 0x80036f <pxCurrentTCB+0x1>
    1054:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <pxDelayedTaskList>
    1058:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <pxDelayedTaskList+0x1>
    105c:	6e 5f       	subi	r22, 0xFE	; 254
    105e:	7f 4f       	sbci	r23, 0xFF	; 255
    1060:	29 db       	rcall	.-2478   	; 0x6b4 <vListInsert>
    1062:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <xNextTaskUnblockTime>
    1066:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <xNextTaskUnblockTime+0x1>
    106a:	c8 17       	cp	r28, r24
    106c:	d9 07       	cpc	r29, r25
    106e:	20 f4       	brcc	.+8      	; 0x1078 <prvAddCurrentTaskToDelayedList+0x9c>
    1070:	d0 93 0e 03 	sts	0x030E, r29	; 0x80030e <xNextTaskUnblockTime+0x1>
    1074:	c0 93 0d 03 	sts	0x030D, r28	; 0x80030d <xNextTaskUnblockTime>
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	1f 91       	pop	r17
    107e:	0f 91       	pop	r16
    1080:	ff 90       	pop	r15
    1082:	08 95       	ret

00001084 <xTaskCreate>:
    1084:	4f 92       	push	r4
    1086:	5f 92       	push	r5
    1088:	6f 92       	push	r6
    108a:	7f 92       	push	r7
    108c:	8f 92       	push	r8
    108e:	9f 92       	push	r9
    1090:	af 92       	push	r10
    1092:	bf 92       	push	r11
    1094:	cf 92       	push	r12
    1096:	df 92       	push	r13
    1098:	ef 92       	push	r14
    109a:	ff 92       	push	r15
    109c:	0f 93       	push	r16
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	4c 01       	movw	r8, r24
    10a4:	6b 01       	movw	r12, r22
    10a6:	5a 01       	movw	r10, r20
    10a8:	29 01       	movw	r4, r18
    10aa:	ca 01       	movw	r24, r20
    10ac:	b2 da       	rcall	.-2716   	; 0x612 <pvPortMalloc>
    10ae:	3c 01       	movw	r6, r24
    10b0:	89 2b       	or	r24, r25
    10b2:	09 f4       	brne	.+2      	; 0x10b6 <xTaskCreate+0x32>
    10b4:	e4 c0       	rjmp	.+456    	; 0x127e <xTaskCreate+0x1fa>
    10b6:	8c e2       	ldi	r24, 0x2C	; 44
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	ab da       	rcall	.-2730   	; 0x612 <pvPortMalloc>
    10bc:	ec 01       	movw	r28, r24
    10be:	89 2b       	or	r24, r25
    10c0:	99 f0       	breq	.+38     	; 0x10e8 <xTaskCreate+0x64>
    10c2:	78 8e       	std	Y+24, r7	; 0x18
    10c4:	6f 8a       	std	Y+23, r6	; 0x17
    10c6:	a5 01       	movw	r20, r10
    10c8:	65 ea       	ldi	r22, 0xA5	; 165
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	c3 01       	movw	r24, r6
    10ce:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <memset>
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	a8 1a       	sub	r10, r24
    10d6:	b1 08       	sbc	r11, r1
    10d8:	8f 89       	ldd	r24, Y+23	; 0x17
    10da:	98 8d       	ldd	r25, Y+24	; 0x18
    10dc:	a8 0e       	add	r10, r24
    10de:	b9 1e       	adc	r11, r25
    10e0:	c1 14       	cp	r12, r1
    10e2:	d1 04       	cpc	r13, r1
    10e4:	21 f4       	brne	.+8      	; 0x10ee <xTaskCreate+0x6a>
    10e6:	1f c0       	rjmp	.+62     	; 0x1126 <xTaskCreate+0xa2>
    10e8:	c3 01       	movw	r24, r6
    10ea:	a4 da       	rcall	.-2744   	; 0x634 <vPortFree>
    10ec:	c8 c0       	rjmp	.+400    	; 0x127e <xTaskCreate+0x1fa>
    10ee:	d6 01       	movw	r26, r12
    10f0:	8c 91       	ld	r24, X
    10f2:	89 8f       	std	Y+25, r24	; 0x19
    10f4:	8c 91       	ld	r24, X
    10f6:	88 23       	and	r24, r24
    10f8:	a1 f0       	breq	.+40     	; 0x1122 <xTaskCreate+0x9e>
    10fa:	ae 01       	movw	r20, r28
    10fc:	46 5e       	subi	r20, 0xE6	; 230
    10fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1100:	f6 01       	movw	r30, r12
    1102:	31 96       	adiw	r30, 0x01	; 1
    1104:	b8 e0       	ldi	r27, 0x08	; 8
    1106:	cb 0e       	add	r12, r27
    1108:	d1 1c       	adc	r13, r1
    110a:	cf 01       	movw	r24, r30
    110c:	21 91       	ld	r18, Z+
    110e:	da 01       	movw	r26, r20
    1110:	2d 93       	st	X+, r18
    1112:	ad 01       	movw	r20, r26
    1114:	dc 01       	movw	r26, r24
    1116:	8c 91       	ld	r24, X
    1118:	88 23       	and	r24, r24
    111a:	19 f0       	breq	.+6      	; 0x1122 <xTaskCreate+0x9e>
    111c:	ec 15       	cp	r30, r12
    111e:	fd 05       	cpc	r31, r13
    1120:	a1 f7       	brne	.-24     	; 0x110a <xTaskCreate+0x86>
    1122:	18 a2       	std	Y+32, r1	; 0x20
    1124:	01 c0       	rjmp	.+2      	; 0x1128 <xTaskCreate+0xa4>
    1126:	19 8e       	std	Y+25, r1	; 0x19
    1128:	04 30       	cpi	r16, 0x04	; 4
    112a:	08 f0       	brcs	.+2      	; 0x112e <xTaskCreate+0xaa>
    112c:	03 e0       	ldi	r16, 0x03	; 3
    112e:	0e 8b       	std	Y+22, r16	; 0x16
    1130:	0b a3       	std	Y+35, r16	; 0x23
    1132:	1c a2       	std	Y+36, r1	; 0x24
    1134:	6e 01       	movw	r12, r28
    1136:	b2 e0       	ldi	r27, 0x02	; 2
    1138:	cb 0e       	add	r12, r27
    113a:	d1 1c       	adc	r13, r1
    113c:	c6 01       	movw	r24, r12
    113e:	95 da       	rcall	.-2774   	; 0x66a <vListInitialiseItem>
    1140:	ce 01       	movw	r24, r28
    1142:	0c 96       	adiw	r24, 0x0c	; 12
    1144:	92 da       	rcall	.-2780   	; 0x66a <vListInitialiseItem>
    1146:	d9 87       	std	Y+9, r29	; 0x09
    1148:	c8 87       	std	Y+8, r28	; 0x08
    114a:	84 e0       	ldi	r24, 0x04	; 4
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	80 1b       	sub	r24, r16
    1150:	91 09       	sbc	r25, r1
    1152:	9d 87       	std	Y+13, r25	; 0x0d
    1154:	8c 87       	std	Y+12, r24	; 0x0c
    1156:	db 8b       	std	Y+19, r29	; 0x13
    1158:	ca 8b       	std	Y+18, r28	; 0x12
    115a:	1e a2       	std	Y+38, r1	; 0x26
    115c:	1d a2       	std	Y+37, r1	; 0x25
    115e:	1f a2       	std	Y+39, r1	; 0x27
    1160:	18 a6       	std	Y+40, r1	; 0x28
    1162:	19 a6       	std	Y+41, r1	; 0x29
    1164:	1a a6       	std	Y+42, r1	; 0x2a
    1166:	1b a6       	std	Y+43, r1	; 0x2b
    1168:	a2 01       	movw	r20, r4
    116a:	b4 01       	movw	r22, r8
    116c:	c5 01       	movw	r24, r10
    116e:	fa da       	rcall	.-2572   	; 0x764 <pxPortInitialiseStack>
    1170:	99 83       	std	Y+1, r25	; 0x01
    1172:	88 83       	st	Y, r24
    1174:	e1 14       	cp	r14, r1
    1176:	f1 04       	cpc	r15, r1
    1178:	19 f0       	breq	.+6      	; 0x1180 <xTaskCreate+0xfc>
    117a:	f7 01       	movw	r30, r14
    117c:	d1 83       	std	Z+1, r29	; 0x01
    117e:	c0 83       	st	Z, r28
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	0f 92       	push	r0
    1186:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <uxCurrentNumberOfTasks>
    118a:	8f 5f       	subi	r24, 0xFF	; 255
    118c:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <uxCurrentNumberOfTasks>
    1190:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <pxCurrentTCB>
    1194:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <pxCurrentTCB+0x1>
    1198:	89 2b       	or	r24, r25
    119a:	89 f5       	brne	.+98     	; 0x11fe <xTaskCreate+0x17a>
    119c:	d0 93 6f 03 	sts	0x036F, r29	; 0x80036f <pxCurrentTCB+0x1>
    11a0:	c0 93 6e 03 	sts	0x036E, r28	; 0x80036e <pxCurrentTCB>
    11a4:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <uxCurrentNumberOfTasks>
    11a8:	81 30       	cpi	r24, 0x01	; 1
    11aa:	09 f0       	breq	.+2      	; 0x11ae <xTaskCreate+0x12a>
    11ac:	38 c0       	rjmp	.+112    	; 0x121e <xTaskCreate+0x19a>
    11ae:	8a e4       	ldi	r24, 0x4A	; 74
    11b0:	93 e0       	ldi	r25, 0x03	; 3
    11b2:	4d da       	rcall	.-2918   	; 0x64e <vListInitialise>
    11b4:	83 e5       	ldi	r24, 0x53	; 83
    11b6:	93 e0       	ldi	r25, 0x03	; 3
    11b8:	4a da       	rcall	.-2924   	; 0x64e <vListInitialise>
    11ba:	8c e5       	ldi	r24, 0x5C	; 92
    11bc:	93 e0       	ldi	r25, 0x03	; 3
    11be:	47 da       	rcall	.-2930   	; 0x64e <vListInitialise>
    11c0:	85 e6       	ldi	r24, 0x65	; 101
    11c2:	93 e0       	ldi	r25, 0x03	; 3
    11c4:	44 da       	rcall	.-2936   	; 0x64e <vListInitialise>
    11c6:	81 e4       	ldi	r24, 0x41	; 65
    11c8:	93 e0       	ldi	r25, 0x03	; 3
    11ca:	41 da       	rcall	.-2942   	; 0x64e <vListInitialise>
    11cc:	88 e3       	ldi	r24, 0x38	; 56
    11ce:	93 e0       	ldi	r25, 0x03	; 3
    11d0:	3e da       	rcall	.-2948   	; 0x64e <vListInitialise>
    11d2:	8b e2       	ldi	r24, 0x2B	; 43
    11d4:	93 e0       	ldi	r25, 0x03	; 3
    11d6:	3b da       	rcall	.-2954   	; 0x64e <vListInitialise>
    11d8:	82 e2       	ldi	r24, 0x22	; 34
    11da:	93 e0       	ldi	r25, 0x03	; 3
    11dc:	38 da       	rcall	.-2960   	; 0x64e <vListInitialise>
    11de:	88 e1       	ldi	r24, 0x18	; 24
    11e0:	93 e0       	ldi	r25, 0x03	; 3
    11e2:	35 da       	rcall	.-2966   	; 0x64e <vListInitialise>
    11e4:	81 e4       	ldi	r24, 0x41	; 65
    11e6:	93 e0       	ldi	r25, 0x03	; 3
    11e8:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <pxDelayedTaskList+0x1>
    11ec:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <pxDelayedTaskList>
    11f0:	88 e3       	ldi	r24, 0x38	; 56
    11f2:	93 e0       	ldi	r25, 0x03	; 3
    11f4:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <pxOverflowDelayedTaskList+0x1>
    11f8:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <pxOverflowDelayedTaskList>
    11fc:	10 c0       	rjmp	.+32     	; 0x121e <xTaskCreate+0x19a>
    11fe:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <xSchedulerRunning>
    1202:	81 11       	cpse	r24, r1
    1204:	0c c0       	rjmp	.+24     	; 0x121e <xTaskCreate+0x19a>
    1206:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <pxCurrentTCB>
    120a:	f0 91 6f 03 	lds	r31, 0x036F	; 0x80036f <pxCurrentTCB+0x1>
    120e:	96 89       	ldd	r25, Z+22	; 0x16
    1210:	8e 89       	ldd	r24, Y+22	; 0x16
    1212:	89 17       	cp	r24, r25
    1214:	20 f0       	brcs	.+8      	; 0x121e <xTaskCreate+0x19a>
    1216:	d0 93 6f 03 	sts	0x036F, r29	; 0x80036f <pxCurrentTCB+0x1>
    121a:	c0 93 6e 03 	sts	0x036E, r28	; 0x80036e <pxCurrentTCB>
    121e:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <uxTaskNumber>
    1222:	8f 5f       	subi	r24, 0xFF	; 255
    1224:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <uxTaskNumber>
    1228:	89 a3       	std	Y+33, r24	; 0x21
    122a:	8e 89       	ldd	r24, Y+22	; 0x16
    122c:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <uxTopReadyPriority>
    1230:	98 17       	cp	r25, r24
    1232:	10 f4       	brcc	.+4      	; 0x1238 <xTaskCreate+0x1b4>
    1234:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <uxTopReadyPriority>
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	9c 01       	movw	r18, r24
    123c:	22 0f       	add	r18, r18
    123e:	33 1f       	adc	r19, r19
    1240:	22 0f       	add	r18, r18
    1242:	33 1f       	adc	r19, r19
    1244:	22 0f       	add	r18, r18
    1246:	33 1f       	adc	r19, r19
    1248:	82 0f       	add	r24, r18
    124a:	93 1f       	adc	r25, r19
    124c:	b6 01       	movw	r22, r12
    124e:	86 5b       	subi	r24, 0xB6	; 182
    1250:	9c 4f       	sbci	r25, 0xFC	; 252
    1252:	0f da       	rcall	.-3042   	; 0x672 <vListInsertEnd>
    1254:	0f 90       	pop	r0
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <xSchedulerRunning>
    125c:	88 23       	and	r24, r24
    125e:	59 f0       	breq	.+22     	; 0x1276 <xTaskCreate+0x1f2>
    1260:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <pxCurrentTCB>
    1264:	f0 91 6f 03 	lds	r31, 0x036F	; 0x80036f <pxCurrentTCB+0x1>
    1268:	96 89       	ldd	r25, Z+22	; 0x16
    126a:	8e 89       	ldd	r24, Y+22	; 0x16
    126c:	98 17       	cp	r25, r24
    126e:	28 f4       	brcc	.+10     	; 0x127a <xTaskCreate+0x1f6>
    1270:	27 db       	rcall	.-2482   	; 0x8c0 <vPortYield>
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	05 c0       	rjmp	.+10     	; 0x1280 <xTaskCreate+0x1fc>
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	03 c0       	rjmp	.+6      	; 0x1280 <xTaskCreate+0x1fc>
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	01 c0       	rjmp	.+2      	; 0x1280 <xTaskCreate+0x1fc>
    127e:	8f ef       	ldi	r24, 0xFF	; 255
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	0f 91       	pop	r16
    1286:	ff 90       	pop	r15
    1288:	ef 90       	pop	r14
    128a:	df 90       	pop	r13
    128c:	cf 90       	pop	r12
    128e:	bf 90       	pop	r11
    1290:	af 90       	pop	r10
    1292:	9f 90       	pop	r9
    1294:	8f 90       	pop	r8
    1296:	7f 90       	pop	r7
    1298:	6f 90       	pop	r6
    129a:	5f 90       	pop	r5
    129c:	4f 90       	pop	r4
    129e:	08 95       	ret

000012a0 <vTaskStartScheduler>:
    12a0:	ef 92       	push	r14
    12a2:	ff 92       	push	r15
    12a4:	0f 93       	push	r16
    12a6:	0f 2e       	mov	r0, r31
    12a8:	fb e0       	ldi	r31, 0x0B	; 11
    12aa:	ef 2e       	mov	r14, r31
    12ac:	f3 e0       	ldi	r31, 0x03	; 3
    12ae:	ff 2e       	mov	r15, r31
    12b0:	f0 2d       	mov	r31, r0
    12b2:	00 e0       	ldi	r16, 0x00	; 0
    12b4:	20 e0       	ldi	r18, 0x00	; 0
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	40 ec       	ldi	r20, 0xC0	; 192
    12ba:	50 e0       	ldi	r21, 0x00	; 0
    12bc:	68 ef       	ldi	r22, 0xF8	; 248
    12be:	72 e0       	ldi	r23, 0x02	; 2
    12c0:	8d ec       	ldi	r24, 0xCD	; 205
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	df de       	rcall	.-578    	; 0x1084 <xTaskCreate>
    12c6:	81 30       	cpi	r24, 0x01	; 1
    12c8:	c1 f4       	brne	.+48     	; 0x12fa <vTaskStartScheduler+0x5a>
    12ca:	40 d3       	rcall	.+1664   	; 0x194c <xTimerCreateTimerTask>
    12cc:	81 30       	cpi	r24, 0x01	; 1
    12ce:	a9 f4       	brne	.+42     	; 0x12fa <vTaskStartScheduler+0x5a>
    12d0:	f8 94       	cli
    12d2:	8f ef       	ldi	r24, 0xFF	; 255
    12d4:	9f ef       	ldi	r25, 0xFF	; 255
    12d6:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <xNextTaskUnblockTime+0x1>
    12da:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <xNextTaskUnblockTime>
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <xSchedulerRunning>
    12e4:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <xTickCount+0x1>
    12e8:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <xTickCount>
    12ec:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <pxCurrentTCB>
    12f0:	f0 91 6f 03 	lds	r31, 0x036F	; 0x80036f <pxCurrentTCB+0x1>
    12f4:	85 a1       	ldd	r24, Z+37	; 0x25
    12f6:	7d d9       	rcall	.-3334   	; 0x5f2 <task_switch_in>
    12f8:	a7 da       	rcall	.-2738   	; 0x848 <xPortStartScheduler>
    12fa:	0f 91       	pop	r16
    12fc:	ff 90       	pop	r15
    12fe:	ef 90       	pop	r14
    1300:	08 95       	ret

00001302 <vTaskSuspendAll>:
    1302:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <uxSchedulerSuspended>
    1306:	8f 5f       	subi	r24, 0xFF	; 255
    1308:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <uxSchedulerSuspended>
    130c:	08 95       	ret

0000130e <xTaskGetTickCount>:
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	f8 94       	cli
    1312:	0f 92       	push	r0
    1314:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <xTickCount>
    1318:	90 91 16 03 	lds	r25, 0x0316	; 0x800316 <xTickCount+0x1>
    131c:	0f 90       	pop	r0
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	08 95       	ret

00001322 <xTaskIncrementTick>:
    1322:	cf 92       	push	r12
    1324:	df 92       	push	r13
    1326:	ef 92       	push	r14
    1328:	ff 92       	push	r15
    132a:	0f 93       	push	r16
    132c:	1f 93       	push	r17
    132e:	cf 93       	push	r28
    1330:	df 93       	push	r29
    1332:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <uxSchedulerSuspended>
    1336:	81 11       	cpse	r24, r1
    1338:	95 c0       	rjmp	.+298    	; 0x1464 <xTaskIncrementTick+0x142>
    133a:	e0 90 15 03 	lds	r14, 0x0315	; 0x800315 <xTickCount>
    133e:	f0 90 16 03 	lds	r15, 0x0316	; 0x800316 <xTickCount+0x1>
    1342:	8f ef       	ldi	r24, 0xFF	; 255
    1344:	e8 1a       	sub	r14, r24
    1346:	f8 0a       	sbc	r15, r24
    1348:	f0 92 16 03 	sts	0x0316, r15	; 0x800316 <xTickCount+0x1>
    134c:	e0 92 15 03 	sts	0x0315, r14	; 0x800315 <xTickCount>
    1350:	e1 14       	cp	r14, r1
    1352:	f1 04       	cpc	r15, r1
    1354:	b1 f4       	brne	.+44     	; 0x1382 <xTaskIncrementTick+0x60>
    1356:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <pxDelayedTaskList>
    135a:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <pxDelayedTaskList+0x1>
    135e:	20 91 34 03 	lds	r18, 0x0334	; 0x800334 <pxOverflowDelayedTaskList>
    1362:	30 91 35 03 	lds	r19, 0x0335	; 0x800335 <pxOverflowDelayedTaskList+0x1>
    1366:	30 93 37 03 	sts	0x0337, r19	; 0x800337 <pxDelayedTaskList+0x1>
    136a:	20 93 36 03 	sts	0x0336, r18	; 0x800336 <pxDelayedTaskList>
    136e:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <pxOverflowDelayedTaskList+0x1>
    1372:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <pxOverflowDelayedTaskList>
    1376:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <xNumOfOverflows>
    137a:	8f 5f       	subi	r24, 0xFF	; 255
    137c:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <xNumOfOverflows>
    1380:	0e de       	rcall	.-996    	; 0xf9e <prvResetNextTaskUnblockTime>
    1382:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <xNextTaskUnblockTime>
    1386:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <xNextTaskUnblockTime+0x1>
    138a:	e8 16       	cp	r14, r24
    138c:	f9 06       	cpc	r15, r25
    138e:	10 f4       	brcc	.+4      	; 0x1394 <xTaskIncrementTick+0x72>
    1390:	d1 2c       	mov	r13, r1
    1392:	50 c0       	rjmp	.+160    	; 0x1434 <xTaskIncrementTick+0x112>
    1394:	d1 2c       	mov	r13, r1
    1396:	cc 24       	eor	r12, r12
    1398:	c3 94       	inc	r12
    139a:	e0 91 36 03 	lds	r30, 0x0336	; 0x800336 <pxDelayedTaskList>
    139e:	f0 91 37 03 	lds	r31, 0x0337	; 0x800337 <pxDelayedTaskList+0x1>
    13a2:	80 81       	ld	r24, Z
    13a4:	81 11       	cpse	r24, r1
    13a6:	07 c0       	rjmp	.+14     	; 0x13b6 <xTaskIncrementTick+0x94>
    13a8:	8f ef       	ldi	r24, 0xFF	; 255
    13aa:	9f ef       	ldi	r25, 0xFF	; 255
    13ac:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <xNextTaskUnblockTime+0x1>
    13b0:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <xNextTaskUnblockTime>
    13b4:	3f c0       	rjmp	.+126    	; 0x1434 <xTaskIncrementTick+0x112>
    13b6:	e0 91 36 03 	lds	r30, 0x0336	; 0x800336 <pxDelayedTaskList>
    13ba:	f0 91 37 03 	lds	r31, 0x0337	; 0x800337 <pxDelayedTaskList+0x1>
    13be:	05 80       	ldd	r0, Z+5	; 0x05
    13c0:	f6 81       	ldd	r31, Z+6	; 0x06
    13c2:	e0 2d       	mov	r30, r0
    13c4:	c6 81       	ldd	r28, Z+6	; 0x06
    13c6:	d7 81       	ldd	r29, Z+7	; 0x07
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	9b 81       	ldd	r25, Y+3	; 0x03
    13cc:	e8 16       	cp	r14, r24
    13ce:	f9 06       	cpc	r15, r25
    13d0:	28 f4       	brcc	.+10     	; 0x13dc <xTaskIncrementTick+0xba>
    13d2:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <xNextTaskUnblockTime+0x1>
    13d6:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <xNextTaskUnblockTime>
    13da:	2c c0       	rjmp	.+88     	; 0x1434 <xTaskIncrementTick+0x112>
    13dc:	8e 01       	movw	r16, r28
    13de:	0e 5f       	subi	r16, 0xFE	; 254
    13e0:	1f 4f       	sbci	r17, 0xFF	; 255
    13e2:	c8 01       	movw	r24, r16
    13e4:	98 d9       	rcall	.-3280   	; 0x716 <uxListRemove>
    13e6:	8c 89       	ldd	r24, Y+20	; 0x14
    13e8:	9d 89       	ldd	r25, Y+21	; 0x15
    13ea:	89 2b       	or	r24, r25
    13ec:	19 f0       	breq	.+6      	; 0x13f4 <xTaskIncrementTick+0xd2>
    13ee:	ce 01       	movw	r24, r28
    13f0:	0c 96       	adiw	r24, 0x0c	; 12
    13f2:	91 d9       	rcall	.-3294   	; 0x716 <uxListRemove>
    13f4:	8e 89       	ldd	r24, Y+22	; 0x16
    13f6:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <uxTopReadyPriority>
    13fa:	98 17       	cp	r25, r24
    13fc:	10 f4       	brcc	.+4      	; 0x1402 <xTaskIncrementTick+0xe0>
    13fe:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <uxTopReadyPriority>
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	9c 01       	movw	r18, r24
    1406:	22 0f       	add	r18, r18
    1408:	33 1f       	adc	r19, r19
    140a:	22 0f       	add	r18, r18
    140c:	33 1f       	adc	r19, r19
    140e:	22 0f       	add	r18, r18
    1410:	33 1f       	adc	r19, r19
    1412:	82 0f       	add	r24, r18
    1414:	93 1f       	adc	r25, r19
    1416:	b8 01       	movw	r22, r16
    1418:	86 5b       	subi	r24, 0xB6	; 182
    141a:	9c 4f       	sbci	r25, 0xFC	; 252
    141c:	2a d9       	rcall	.-3500   	; 0x672 <vListInsertEnd>
    141e:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <pxCurrentTCB>
    1422:	f0 91 6f 03 	lds	r31, 0x036F	; 0x80036f <pxCurrentTCB+0x1>
    1426:	9e 89       	ldd	r25, Y+22	; 0x16
    1428:	86 89       	ldd	r24, Z+22	; 0x16
    142a:	98 17       	cp	r25, r24
    142c:	08 f4       	brcc	.+2      	; 0x1430 <xTaskIncrementTick+0x10e>
    142e:	b5 cf       	rjmp	.-150    	; 0x139a <xTaskIncrementTick+0x78>
    1430:	dc 2c       	mov	r13, r12
    1432:	b3 cf       	rjmp	.-154    	; 0x139a <xTaskIncrementTick+0x78>
    1434:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <pxCurrentTCB>
    1438:	f0 91 6f 03 	lds	r31, 0x036F	; 0x80036f <pxCurrentTCB+0x1>
    143c:	86 89       	ldd	r24, Z+22	; 0x16
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	fc 01       	movw	r30, r24
    1442:	ee 0f       	add	r30, r30
    1444:	ff 1f       	adc	r31, r31
    1446:	ee 0f       	add	r30, r30
    1448:	ff 1f       	adc	r31, r31
    144a:	ee 0f       	add	r30, r30
    144c:	ff 1f       	adc	r31, r31
    144e:	8e 0f       	add	r24, r30
    1450:	9f 1f       	adc	r25, r31
    1452:	fc 01       	movw	r30, r24
    1454:	e6 5b       	subi	r30, 0xB6	; 182
    1456:	fc 4f       	sbci	r31, 0xFC	; 252
    1458:	80 81       	ld	r24, Z
    145a:	82 30       	cpi	r24, 0x02	; 2
    145c:	48 f0       	brcs	.+18     	; 0x1470 <xTaskIncrementTick+0x14e>
    145e:	dd 24       	eor	r13, r13
    1460:	d3 94       	inc	r13
    1462:	06 c0       	rjmp	.+12     	; 0x1470 <xTaskIncrementTick+0x14e>
    1464:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <uxPendedTicks>
    1468:	8f 5f       	subi	r24, 0xFF	; 255
    146a:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <uxPendedTicks>
    146e:	d1 2c       	mov	r13, r1
    1470:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <xYieldPending>
    1474:	88 23       	and	r24, r24
    1476:	11 f0       	breq	.+4      	; 0x147c <xTaskIncrementTick+0x15a>
    1478:	dd 24       	eor	r13, r13
    147a:	d3 94       	inc	r13
    147c:	8d 2d       	mov	r24, r13
    147e:	df 91       	pop	r29
    1480:	cf 91       	pop	r28
    1482:	1f 91       	pop	r17
    1484:	0f 91       	pop	r16
    1486:	ff 90       	pop	r15
    1488:	ef 90       	pop	r14
    148a:	df 90       	pop	r13
    148c:	cf 90       	pop	r12
    148e:	08 95       	ret

00001490 <xTaskResumeAll>:
    1490:	df 92       	push	r13
    1492:	ef 92       	push	r14
    1494:	ff 92       	push	r15
    1496:	0f 93       	push	r16
    1498:	1f 93       	push	r17
    149a:	cf 93       	push	r28
    149c:	df 93       	push	r29
    149e:	0f b6       	in	r0, 0x3f	; 63
    14a0:	f8 94       	cli
    14a2:	0f 92       	push	r0
    14a4:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <uxSchedulerSuspended>
    14a8:	81 50       	subi	r24, 0x01	; 1
    14aa:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <uxSchedulerSuspended>
    14ae:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <uxSchedulerSuspended>
    14b2:	81 11       	cpse	r24, r1
    14b4:	59 c0       	rjmp	.+178    	; 0x1568 <xTaskResumeAll+0xd8>
    14b6:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <uxCurrentNumberOfTasks>
    14ba:	81 11       	cpse	r24, r1
    14bc:	30 c0       	rjmp	.+96     	; 0x151e <xTaskResumeAll+0x8e>
    14be:	57 c0       	rjmp	.+174    	; 0x156e <xTaskResumeAll+0xde>
    14c0:	d7 01       	movw	r26, r14
    14c2:	15 96       	adiw	r26, 0x05	; 5
    14c4:	ed 91       	ld	r30, X+
    14c6:	fc 91       	ld	r31, X
    14c8:	16 97       	sbiw	r26, 0x06	; 6
    14ca:	c6 81       	ldd	r28, Z+6	; 0x06
    14cc:	d7 81       	ldd	r29, Z+7	; 0x07
    14ce:	ce 01       	movw	r24, r28
    14d0:	0c 96       	adiw	r24, 0x0c	; 12
    14d2:	21 d9       	rcall	.-3518   	; 0x716 <uxListRemove>
    14d4:	8e 01       	movw	r16, r28
    14d6:	0e 5f       	subi	r16, 0xFE	; 254
    14d8:	1f 4f       	sbci	r17, 0xFF	; 255
    14da:	c8 01       	movw	r24, r16
    14dc:	1c d9       	rcall	.-3528   	; 0x716 <uxListRemove>
    14de:	8e 89       	ldd	r24, Y+22	; 0x16
    14e0:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <uxTopReadyPriority>
    14e4:	98 17       	cp	r25, r24
    14e6:	10 f4       	brcc	.+4      	; 0x14ec <xTaskResumeAll+0x5c>
    14e8:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <uxTopReadyPriority>
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	9c 01       	movw	r18, r24
    14f0:	22 0f       	add	r18, r18
    14f2:	33 1f       	adc	r19, r19
    14f4:	22 0f       	add	r18, r18
    14f6:	33 1f       	adc	r19, r19
    14f8:	22 0f       	add	r18, r18
    14fa:	33 1f       	adc	r19, r19
    14fc:	82 0f       	add	r24, r18
    14fe:	93 1f       	adc	r25, r19
    1500:	b8 01       	movw	r22, r16
    1502:	86 5b       	subi	r24, 0xB6	; 182
    1504:	9c 4f       	sbci	r25, 0xFC	; 252
    1506:	b5 d8       	rcall	.-3734   	; 0x672 <vListInsertEnd>
    1508:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <pxCurrentTCB>
    150c:	f0 91 6f 03 	lds	r31, 0x036F	; 0x80036f <pxCurrentTCB+0x1>
    1510:	9e 89       	ldd	r25, Y+22	; 0x16
    1512:	86 89       	ldd	r24, Z+22	; 0x16
    1514:	98 17       	cp	r25, r24
    1516:	68 f0       	brcs	.+26     	; 0x1532 <xTaskResumeAll+0xa2>
    1518:	d0 92 11 03 	sts	0x0311, r13	; 0x800311 <xYieldPending>
    151c:	0a c0       	rjmp	.+20     	; 0x1532 <xTaskResumeAll+0xa2>
    151e:	c0 e0       	ldi	r28, 0x00	; 0
    1520:	d0 e0       	ldi	r29, 0x00	; 0
    1522:	0f 2e       	mov	r0, r31
    1524:	fb e2       	ldi	r31, 0x2B	; 43
    1526:	ef 2e       	mov	r14, r31
    1528:	f3 e0       	ldi	r31, 0x03	; 3
    152a:	ff 2e       	mov	r15, r31
    152c:	f0 2d       	mov	r31, r0
    152e:	dd 24       	eor	r13, r13
    1530:	d3 94       	inc	r13
    1532:	f7 01       	movw	r30, r14
    1534:	80 81       	ld	r24, Z
    1536:	81 11       	cpse	r24, r1
    1538:	c3 cf       	rjmp	.-122    	; 0x14c0 <xTaskResumeAll+0x30>
    153a:	cd 2b       	or	r28, r29
    153c:	09 f0       	breq	.+2      	; 0x1540 <xTaskResumeAll+0xb0>
    153e:	2f dd       	rcall	.-1442   	; 0xf9e <prvResetNextTaskUnblockTime>
    1540:	c0 91 12 03 	lds	r28, 0x0312	; 0x800312 <uxPendedTicks>
    1544:	cc 23       	and	r28, r28
    1546:	49 f0       	breq	.+18     	; 0x155a <xTaskResumeAll+0xca>
    1548:	d1 e0       	ldi	r29, 0x01	; 1
    154a:	eb de       	rcall	.-554    	; 0x1322 <xTaskIncrementTick>
    154c:	81 11       	cpse	r24, r1
    154e:	d0 93 11 03 	sts	0x0311, r29	; 0x800311 <xYieldPending>
    1552:	c1 50       	subi	r28, 0x01	; 1
    1554:	d1 f7       	brne	.-12     	; 0x154a <xTaskResumeAll+0xba>
    1556:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <uxPendedTicks>
    155a:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <xYieldPending>
    155e:	88 23       	and	r24, r24
    1560:	29 f0       	breq	.+10     	; 0x156c <xTaskResumeAll+0xdc>
    1562:	ae d9       	rcall	.-3236   	; 0x8c0 <vPortYield>
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	03 c0       	rjmp	.+6      	; 0x156e <xTaskResumeAll+0xde>
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	01 c0       	rjmp	.+2      	; 0x156e <xTaskResumeAll+0xde>
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	0f 90       	pop	r0
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	df 91       	pop	r29
    1574:	cf 91       	pop	r28
    1576:	1f 91       	pop	r17
    1578:	0f 91       	pop	r16
    157a:	ff 90       	pop	r15
    157c:	ef 90       	pop	r14
    157e:	df 90       	pop	r13
    1580:	08 95       	ret

00001582 <vTaskSwitchContext>:
    1582:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <uxSchedulerSuspended>
    1586:	88 23       	and	r24, r24
    1588:	21 f0       	breq	.+8      	; 0x1592 <vTaskSwitchContext+0x10>
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <xYieldPending>
    1590:	08 95       	ret
    1592:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <xYieldPending>
    1596:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <pxCurrentTCB>
    159a:	f0 91 6f 03 	lds	r31, 0x036F	; 0x80036f <pxCurrentTCB+0x1>
    159e:	85 a1       	ldd	r24, Z+37	; 0x25
    15a0:	32 d8       	rcall	.-3996   	; 0x606 <task_switch_out>
    15a2:	a0 91 6e 03 	lds	r26, 0x036E	; 0x80036e <pxCurrentTCB>
    15a6:	b0 91 6f 03 	lds	r27, 0x036F	; 0x80036f <pxCurrentTCB+0x1>
    15aa:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <pxCurrentTCB>
    15ae:	f0 91 6f 03 	lds	r31, 0x036F	; 0x80036f <pxCurrentTCB+0x1>
    15b2:	2d 91       	ld	r18, X+
    15b4:	3c 91       	ld	r19, X
    15b6:	87 89       	ldd	r24, Z+23	; 0x17
    15b8:	90 8d       	ldd	r25, Z+24	; 0x18
    15ba:	82 17       	cp	r24, r18
    15bc:	93 07       	cpc	r25, r19
    15be:	58 f0       	brcs	.+22     	; 0x15d6 <vTaskSwitchContext+0x54>
    15c0:	60 91 6e 03 	lds	r22, 0x036E	; 0x80036e <pxCurrentTCB>
    15c4:	70 91 6f 03 	lds	r23, 0x036F	; 0x80036f <pxCurrentTCB+0x1>
    15c8:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <pxCurrentTCB>
    15cc:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <pxCurrentTCB+0x1>
    15d0:	67 5e       	subi	r22, 0xE7	; 231
    15d2:	7f 4f       	sbci	r23, 0xFF	; 255
    15d4:	9b d2       	rcall	.+1334   	; 0x1b0c <vApplicationStackOverflowHook>
    15d6:	20 91 14 03 	lds	r18, 0x0314	; 0x800314 <uxTopReadyPriority>
    15da:	82 2f       	mov	r24, r18
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	fc 01       	movw	r30, r24
    15e0:	ee 0f       	add	r30, r30
    15e2:	ff 1f       	adc	r31, r31
    15e4:	ee 0f       	add	r30, r30
    15e6:	ff 1f       	adc	r31, r31
    15e8:	ee 0f       	add	r30, r30
    15ea:	ff 1f       	adc	r31, r31
    15ec:	e8 0f       	add	r30, r24
    15ee:	f9 1f       	adc	r31, r25
    15f0:	e6 5b       	subi	r30, 0xB6	; 182
    15f2:	fc 4f       	sbci	r31, 0xFC	; 252
    15f4:	30 81       	ld	r19, Z
    15f6:	31 11       	cpse	r19, r1
    15f8:	11 c0       	rjmp	.+34     	; 0x161c <vTaskSwitchContext+0x9a>
    15fa:	21 50       	subi	r18, 0x01	; 1
    15fc:	82 2f       	mov	r24, r18
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	fc 01       	movw	r30, r24
    1602:	ee 0f       	add	r30, r30
    1604:	ff 1f       	adc	r31, r31
    1606:	ee 0f       	add	r30, r30
    1608:	ff 1f       	adc	r31, r31
    160a:	ee 0f       	add	r30, r30
    160c:	ff 1f       	adc	r31, r31
    160e:	e8 0f       	add	r30, r24
    1610:	f9 1f       	adc	r31, r25
    1612:	e6 5b       	subi	r30, 0xB6	; 182
    1614:	fc 4f       	sbci	r31, 0xFC	; 252
    1616:	30 81       	ld	r19, Z
    1618:	33 23       	and	r19, r19
    161a:	79 f3       	breq	.-34     	; 0x15fa <vTaskSwitchContext+0x78>
    161c:	ac 01       	movw	r20, r24
    161e:	44 0f       	add	r20, r20
    1620:	55 1f       	adc	r21, r21
    1622:	44 0f       	add	r20, r20
    1624:	55 1f       	adc	r21, r21
    1626:	44 0f       	add	r20, r20
    1628:	55 1f       	adc	r21, r21
    162a:	48 0f       	add	r20, r24
    162c:	59 1f       	adc	r21, r25
    162e:	da 01       	movw	r26, r20
    1630:	a6 5b       	subi	r26, 0xB6	; 182
    1632:	bc 4f       	sbci	r27, 0xFC	; 252
    1634:	11 96       	adiw	r26, 0x01	; 1
    1636:	ed 91       	ld	r30, X+
    1638:	fc 91       	ld	r31, X
    163a:	12 97       	sbiw	r26, 0x02	; 2
    163c:	02 80       	ldd	r0, Z+2	; 0x02
    163e:	f3 81       	ldd	r31, Z+3	; 0x03
    1640:	e0 2d       	mov	r30, r0
    1642:	12 96       	adiw	r26, 0x02	; 2
    1644:	fc 93       	st	X, r31
    1646:	ee 93       	st	-X, r30
    1648:	11 97       	sbiw	r26, 0x01	; 1
    164a:	43 5b       	subi	r20, 0xB3	; 179
    164c:	5c 4f       	sbci	r21, 0xFC	; 252
    164e:	e4 17       	cp	r30, r20
    1650:	f5 07       	cpc	r31, r21
    1652:	29 f4       	brne	.+10     	; 0x165e <vTaskSwitchContext+0xdc>
    1654:	42 81       	ldd	r20, Z+2	; 0x02
    1656:	53 81       	ldd	r21, Z+3	; 0x03
    1658:	fd 01       	movw	r30, r26
    165a:	52 83       	std	Z+2, r21	; 0x02
    165c:	41 83       	std	Z+1, r20	; 0x01
    165e:	fc 01       	movw	r30, r24
    1660:	ee 0f       	add	r30, r30
    1662:	ff 1f       	adc	r31, r31
    1664:	ee 0f       	add	r30, r30
    1666:	ff 1f       	adc	r31, r31
    1668:	ee 0f       	add	r30, r30
    166a:	ff 1f       	adc	r31, r31
    166c:	8e 0f       	add	r24, r30
    166e:	9f 1f       	adc	r25, r31
    1670:	fc 01       	movw	r30, r24
    1672:	e6 5b       	subi	r30, 0xB6	; 182
    1674:	fc 4f       	sbci	r31, 0xFC	; 252
    1676:	01 80       	ldd	r0, Z+1	; 0x01
    1678:	f2 81       	ldd	r31, Z+2	; 0x02
    167a:	e0 2d       	mov	r30, r0
    167c:	86 81       	ldd	r24, Z+6	; 0x06
    167e:	97 81       	ldd	r25, Z+7	; 0x07
    1680:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <pxCurrentTCB+0x1>
    1684:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <pxCurrentTCB>
    1688:	20 93 14 03 	sts	0x0314, r18	; 0x800314 <uxTopReadyPriority>
    168c:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <pxCurrentTCB>
    1690:	f0 91 6f 03 	lds	r31, 0x036F	; 0x80036f <pxCurrentTCB+0x1>
    1694:	85 a1       	ldd	r24, Z+37	; 0x25
    1696:	0c 94 f9 02 	jmp	0x5f2	; 0x5f2 <task_switch_in>
    169a:	08 95       	ret

0000169c <vTaskPlaceOnEventList>:
    169c:	cf 93       	push	r28
    169e:	df 93       	push	r29
    16a0:	eb 01       	movw	r28, r22
    16a2:	60 91 6e 03 	lds	r22, 0x036E	; 0x80036e <pxCurrentTCB>
    16a6:	70 91 6f 03 	lds	r23, 0x036F	; 0x80036f <pxCurrentTCB+0x1>
    16aa:	64 5f       	subi	r22, 0xF4	; 244
    16ac:	7f 4f       	sbci	r23, 0xFF	; 255
    16ae:	02 d8       	rcall	.-4092   	; 0x6b4 <vListInsert>
    16b0:	61 e0       	ldi	r22, 0x01	; 1
    16b2:	ce 01       	movw	r24, r28
    16b4:	93 dc       	rcall	.-1754   	; 0xfdc <prvAddCurrentTaskToDelayedList>
    16b6:	df 91       	pop	r29
    16b8:	cf 91       	pop	r28
    16ba:	08 95       	ret

000016bc <vTaskPlaceOnEventListRestricted>:
    16bc:	0f 93       	push	r16
    16be:	1f 93       	push	r17
    16c0:	cf 93       	push	r28
    16c2:	8b 01       	movw	r16, r22
    16c4:	c4 2f       	mov	r28, r20
    16c6:	60 91 6e 03 	lds	r22, 0x036E	; 0x80036e <pxCurrentTCB>
    16ca:	70 91 6f 03 	lds	r23, 0x036F	; 0x80036f <pxCurrentTCB+0x1>
    16ce:	64 5f       	subi	r22, 0xF4	; 244
    16d0:	7f 4f       	sbci	r23, 0xFF	; 255
    16d2:	0e 94 39 03 	call	0x672	; 0x672 <vListInsertEnd>
    16d6:	cc 23       	and	r28, r28
    16d8:	11 f0       	breq	.+4      	; 0x16de <vTaskPlaceOnEventListRestricted+0x22>
    16da:	0f ef       	ldi	r16, 0xFF	; 255
    16dc:	1f ef       	ldi	r17, 0xFF	; 255
    16de:	6c 2f       	mov	r22, r28
    16e0:	c8 01       	movw	r24, r16
    16e2:	7c dc       	rcall	.-1800   	; 0xfdc <prvAddCurrentTaskToDelayedList>
    16e4:	cf 91       	pop	r28
    16e6:	1f 91       	pop	r17
    16e8:	0f 91       	pop	r16
    16ea:	08 95       	ret

000016ec <xTaskRemoveFromEventList>:
    16ec:	0f 93       	push	r16
    16ee:	1f 93       	push	r17
    16f0:	cf 93       	push	r28
    16f2:	df 93       	push	r29
    16f4:	dc 01       	movw	r26, r24
    16f6:	15 96       	adiw	r26, 0x05	; 5
    16f8:	ed 91       	ld	r30, X+
    16fa:	fc 91       	ld	r31, X
    16fc:	16 97       	sbiw	r26, 0x06	; 6
    16fe:	c6 81       	ldd	r28, Z+6	; 0x06
    1700:	d7 81       	ldd	r29, Z+7	; 0x07
    1702:	8e 01       	movw	r16, r28
    1704:	04 5f       	subi	r16, 0xF4	; 244
    1706:	1f 4f       	sbci	r17, 0xFF	; 255
    1708:	c8 01       	movw	r24, r16
    170a:	05 d8       	rcall	.-4086   	; 0x716 <uxListRemove>
    170c:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <uxSchedulerSuspended>
    1710:	81 11       	cpse	r24, r1
    1712:	1c c0       	rjmp	.+56     	; 0x174c <xTaskRemoveFromEventList+0x60>
    1714:	0a 50       	subi	r16, 0x0A	; 10
    1716:	11 09       	sbc	r17, r1
    1718:	c8 01       	movw	r24, r16
    171a:	0e 94 8b 03 	call	0x716	; 0x716 <uxListRemove>
    171e:	8e 89       	ldd	r24, Y+22	; 0x16
    1720:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <uxTopReadyPriority>
    1724:	98 17       	cp	r25, r24
    1726:	10 f4       	brcc	.+4      	; 0x172c <xTaskRemoveFromEventList+0x40>
    1728:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <uxTopReadyPriority>
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	9c 01       	movw	r18, r24
    1730:	22 0f       	add	r18, r18
    1732:	33 1f       	adc	r19, r19
    1734:	22 0f       	add	r18, r18
    1736:	33 1f       	adc	r19, r19
    1738:	22 0f       	add	r18, r18
    173a:	33 1f       	adc	r19, r19
    173c:	82 0f       	add	r24, r18
    173e:	93 1f       	adc	r25, r19
    1740:	b8 01       	movw	r22, r16
    1742:	86 5b       	subi	r24, 0xB6	; 182
    1744:	9c 4f       	sbci	r25, 0xFC	; 252
    1746:	0e 94 39 03 	call	0x672	; 0x672 <vListInsertEnd>
    174a:	05 c0       	rjmp	.+10     	; 0x1756 <xTaskRemoveFromEventList+0x6a>
    174c:	b8 01       	movw	r22, r16
    174e:	8b e2       	ldi	r24, 0x2B	; 43
    1750:	93 e0       	ldi	r25, 0x03	; 3
    1752:	0e 94 39 03 	call	0x672	; 0x672 <vListInsertEnd>
    1756:	e0 91 6e 03 	lds	r30, 0x036E	; 0x80036e <pxCurrentTCB>
    175a:	f0 91 6f 03 	lds	r31, 0x036F	; 0x80036f <pxCurrentTCB+0x1>
    175e:	9e 89       	ldd	r25, Y+22	; 0x16
    1760:	86 89       	ldd	r24, Z+22	; 0x16
    1762:	89 17       	cp	r24, r25
    1764:	20 f4       	brcc	.+8      	; 0x176e <xTaskRemoveFromEventList+0x82>
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <xYieldPending>
    176c:	01 c0       	rjmp	.+2      	; 0x1770 <xTaskRemoveFromEventList+0x84>
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	df 91       	pop	r29
    1772:	cf 91       	pop	r28
    1774:	1f 91       	pop	r17
    1776:	0f 91       	pop	r16
    1778:	08 95       	ret

0000177a <vTaskInternalSetTimeOutState>:
    177a:	20 91 10 03 	lds	r18, 0x0310	; 0x800310 <xNumOfOverflows>
    177e:	fc 01       	movw	r30, r24
    1780:	20 83       	st	Z, r18
    1782:	20 91 15 03 	lds	r18, 0x0315	; 0x800315 <xTickCount>
    1786:	30 91 16 03 	lds	r19, 0x0316	; 0x800316 <xTickCount+0x1>
    178a:	32 83       	std	Z+2, r19	; 0x02
    178c:	21 83       	std	Z+1, r18	; 0x01
    178e:	08 95       	ret

00001790 <xTaskCheckForTimeOut>:
    1790:	cf 93       	push	r28
    1792:	df 93       	push	r29
    1794:	0f b6       	in	r0, 0x3f	; 63
    1796:	f8 94       	cli
    1798:	0f 92       	push	r0
    179a:	20 91 15 03 	lds	r18, 0x0315	; 0x800315 <xTickCount>
    179e:	30 91 16 03 	lds	r19, 0x0316	; 0x800316 <xTickCount+0x1>
    17a2:	db 01       	movw	r26, r22
    17a4:	4d 91       	ld	r20, X+
    17a6:	5c 91       	ld	r21, X
    17a8:	4f 3f       	cpi	r20, 0xFF	; 255
    17aa:	bf ef       	ldi	r27, 0xFF	; 255
    17ac:	5b 07       	cpc	r21, r27
    17ae:	e9 f0       	breq	.+58     	; 0x17ea <xTaskCheckForTimeOut+0x5a>
    17b0:	ec 01       	movw	r28, r24
    17b2:	e9 81       	ldd	r30, Y+1	; 0x01
    17b4:	fa 81       	ldd	r31, Y+2	; 0x02
    17b6:	a0 91 10 03 	lds	r26, 0x0310	; 0x800310 <xNumOfOverflows>
    17ba:	b8 81       	ld	r27, Y
    17bc:	ba 17       	cp	r27, r26
    17be:	19 f0       	breq	.+6      	; 0x17c6 <xTaskCheckForTimeOut+0x36>
    17c0:	2e 17       	cp	r18, r30
    17c2:	3f 07       	cpc	r19, r31
    17c4:	a0 f4       	brcc	.+40     	; 0x17ee <xTaskCheckForTimeOut+0x5e>
    17c6:	2e 1b       	sub	r18, r30
    17c8:	3f 0b       	sbc	r19, r31
    17ca:	24 17       	cp	r18, r20
    17cc:	35 07       	cpc	r19, r21
    17ce:	40 f4       	brcc	.+16     	; 0x17e0 <xTaskCheckForTimeOut+0x50>
    17d0:	fb 01       	movw	r30, r22
    17d2:	42 1b       	sub	r20, r18
    17d4:	53 0b       	sbc	r21, r19
    17d6:	51 83       	std	Z+1, r21	; 0x01
    17d8:	40 83       	st	Z, r20
    17da:	cf df       	rcall	.-98     	; 0x177a <vTaskInternalSetTimeOutState>
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	08 c0       	rjmp	.+16     	; 0x17f0 <xTaskCheckForTimeOut+0x60>
    17e0:	fb 01       	movw	r30, r22
    17e2:	11 82       	std	Z+1, r1	; 0x01
    17e4:	10 82       	st	Z, r1
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	03 c0       	rjmp	.+6      	; 0x17f0 <xTaskCheckForTimeOut+0x60>
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	01 c0       	rjmp	.+2      	; 0x17f0 <xTaskCheckForTimeOut+0x60>
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	0f 90       	pop	r0
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	df 91       	pop	r29
    17f6:	cf 91       	pop	r28
    17f8:	08 95       	ret

000017fa <vTaskMissedYield>:
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <xYieldPending>
    1800:	08 95       	ret

00001802 <xTaskGetSchedulerState>:
    1802:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <xSchedulerRunning>
    1806:	88 23       	and	r24, r24
    1808:	31 f0       	breq	.+12     	; 0x1816 <xTaskGetSchedulerState+0x14>
    180a:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <uxSchedulerSuspended>
    180e:	88 23       	and	r24, r24
    1810:	21 f0       	breq	.+8      	; 0x181a <xTaskGetSchedulerState+0x18>
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	08 95       	ret
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	08 95       	ret
    181a:	82 e0       	ldi	r24, 0x02	; 2
    181c:	08 95       	ret

0000181e <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    181e:	0f 93       	push	r16
    1820:	1f 93       	push	r17
    1822:	cf 93       	push	r28
    1824:	df 93       	push	r29
    1826:	fc 01       	movw	r30, r24
    TCB_t * const pxTCB = pxMutexHolder;
    BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    1828:	89 2b       	or	r24, r25
    182a:	79 f1       	breq	.+94     	; 0x188a <xTaskPriorityDisinherit+0x6c>
            If the mutex is held by a task then it cannot be given from an
            interrupt, and if a mutex is given by the holding task then it must
            be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    182c:	84 a1       	ldd	r24, Z+36	; 0x24
    182e:	81 50       	subi	r24, 0x01	; 1
    1830:	84 a3       	std	Z+36, r24	; 0x24

            /* Has the holder of the mutex inherited the priority of another
            task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1832:	26 89       	ldd	r18, Z+22	; 0x16
    1834:	93 a1       	ldd	r25, Z+35	; 0x23
    1836:	29 17       	cp	r18, r25
    1838:	51 f1       	breq	.+84     	; 0x188e <xTaskPriorityDisinherit+0x70>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    183a:	81 11       	cpse	r24, r1
    183c:	2a c0       	rjmp	.+84     	; 0x1892 <xTaskPriorityDisinherit+0x74>
    183e:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                    the mutex.  If the mutex is held by a task then it cannot be
                    given from an interrupt, and if a mutex is given by the
                    holding task then it must be the running state task.  Remove
                    the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1840:	8f 01       	movw	r16, r30
    1842:	0e 5f       	subi	r16, 0xFE	; 254
    1844:	1f 4f       	sbci	r17, 0xFF	; 255
    1846:	c8 01       	movw	r24, r16
    1848:	0e 94 8b 03 	call	0x716	; 0x716 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                    new    ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    184c:	8b a1       	ldd	r24, Y+35	; 0x23
    184e:	8e 8b       	std	Y+22, r24	; 0x16

                    /* Reset the event list item value.  It cannot be in use for
                    any other purpose if this task is running, and it must be
                    running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1850:	24 e0       	ldi	r18, 0x04	; 4
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	28 1b       	sub	r18, r24
    1856:	31 09       	sbc	r19, r1
    1858:	3d 87       	std	Y+13, r19	; 0x0d
    185a:	2c 87       	std	Y+12, r18	; 0x0c
                    prvAddTaskToReadyList( pxTCB );
    185c:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <uxTopReadyPriority>
    1860:	98 17       	cp	r25, r24
    1862:	10 f4       	brcc	.+4      	; 0x1868 <xTaskPriorityDisinherit+0x4a>
    1864:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <uxTopReadyPriority>
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	9c 01       	movw	r18, r24
    186c:	22 0f       	add	r18, r18
    186e:	33 1f       	adc	r19, r19
    1870:	22 0f       	add	r18, r18
    1872:	33 1f       	adc	r19, r19
    1874:	22 0f       	add	r18, r18
    1876:	33 1f       	adc	r19, r19
    1878:	82 0f       	add	r24, r18
    187a:	93 1f       	adc	r25, r19
    187c:	b8 01       	movw	r22, r16
    187e:	86 5b       	subi	r24, 0xB6	; 182
    1880:	9c 4f       	sbci	r25, 0xFC	; 252
    1882:	0e 94 39 03 	call	0x672	; 0x672 <vListInsertEnd>
                    in an order different to that in which they were taken.
                    If a context switch did not occur when the first mutex was
                    returned, even if a task was waiting on it, then a context
                    switch should occur when the last mutex is returned whether
                    a task is waiting on it or not. */
                    xReturn = pdTRUE;
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	05 c0       	rjmp	.+10     	; 0x1894 <xTaskPriorityDisinherit+0x76>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    TCB_t * const pxTCB = pxMutexHolder;
    BaseType_t xReturn = pdFALSE;
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	03 c0       	rjmp	.+6      	; 0x1894 <xTaskPriorityDisinherit+0x76>
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	01 c0       	rjmp	.+2      	; 0x1894 <xTaskPriorityDisinherit+0x76>
    1892:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    1894:	df 91       	pop	r29
    1896:	cf 91       	pop	r28
    1898:	1f 91       	pop	r17
    189a:	0f 91       	pop	r16
    189c:	08 95       	ret

0000189e <prvInsertTimerInActiveList>:
    189e:	fc 01       	movw	r30, r24
    18a0:	73 83       	std	Z+3, r23	; 0x03
    18a2:	62 83       	std	Z+2, r22	; 0x02
    18a4:	91 87       	std	Z+9, r25	; 0x09
    18a6:	80 87       	std	Z+8, r24	; 0x08
    18a8:	46 17       	cp	r20, r22
    18aa:	57 07       	cpc	r21, r23
    18ac:	90 f0       	brcs	.+36     	; 0x18d2 <prvInsertTimerInActiveList+0x34>
    18ae:	42 1b       	sub	r20, r18
    18b0:	53 0b       	sbc	r21, r19
    18b2:	84 85       	ldd	r24, Z+12	; 0x0c
    18b4:	95 85       	ldd	r25, Z+13	; 0x0d
    18b6:	48 17       	cp	r20, r24
    18b8:	59 07       	cpc	r21, r25
    18ba:	e0 f4       	brcc	.+56     	; 0x18f4 <prvInsertTimerInActiveList+0x56>
    18bc:	bf 01       	movw	r22, r30
    18be:	6e 5f       	subi	r22, 0xFE	; 254
    18c0:	7f 4f       	sbci	r23, 0xFF	; 255
    18c2:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <pxOverflowTimerList>
    18c6:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <pxOverflowTimerList+0x1>
    18ca:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <vListInsert>
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	08 95       	ret
    18d2:	42 17       	cp	r20, r18
    18d4:	53 07       	cpc	r21, r19
    18d6:	18 f4       	brcc	.+6      	; 0x18de <prvInsertTimerInActiveList+0x40>
    18d8:	62 17       	cp	r22, r18
    18da:	73 07       	cpc	r23, r19
    18dc:	68 f4       	brcc	.+26     	; 0x18f8 <prvInsertTimerInActiveList+0x5a>
    18de:	bf 01       	movw	r22, r30
    18e0:	6e 5f       	subi	r22, 0xFE	; 254
    18e2:	7f 4f       	sbci	r23, 0xFF	; 255
    18e4:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <pxCurrentTimerList>
    18e8:	90 91 79 03 	lds	r25, 0x0379	; 0x800379 <pxCurrentTimerList+0x1>
    18ec:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <vListInsert>
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	08 95       	ret
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	08 95       	ret
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	08 95       	ret

000018fc <prvCheckForValidListAndQueue>:
    18fc:	0f b6       	in	r0, 0x3f	; 63
    18fe:	f8 94       	cli
    1900:	0f 92       	push	r0
    1902:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <xTimerQueue>
    1906:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <xTimerQueue+0x1>
    190a:	89 2b       	or	r24, r25
    190c:	e1 f4       	brne	.+56     	; 0x1946 <prvCheckForValidListAndQueue+0x4a>
    190e:	83 e8       	ldi	r24, 0x83	; 131
    1910:	93 e0       	ldi	r25, 0x03	; 3
    1912:	0e 94 27 03 	call	0x64e	; 0x64e <vListInitialise>
    1916:	8a e7       	ldi	r24, 0x7A	; 122
    1918:	93 e0       	ldi	r25, 0x03	; 3
    191a:	0e 94 27 03 	call	0x64e	; 0x64e <vListInitialise>
    191e:	83 e8       	ldi	r24, 0x83	; 131
    1920:	93 e0       	ldi	r25, 0x03	; 3
    1922:	90 93 79 03 	sts	0x0379, r25	; 0x800379 <pxCurrentTimerList+0x1>
    1926:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <pxCurrentTimerList>
    192a:	8a e7       	ldi	r24, 0x7A	; 122
    192c:	93 e0       	ldi	r25, 0x03	; 3
    192e:	90 93 77 03 	sts	0x0377, r25	; 0x800377 <pxOverflowTimerList+0x1>
    1932:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <pxOverflowTimerList>
    1936:	40 e0       	ldi	r20, 0x00	; 0
    1938:	65 e0       	ldi	r22, 0x05	; 5
    193a:	8a e0       	ldi	r24, 0x0A	; 10
    193c:	94 d9       	rcall	.-3288   	; 0xc66 <xQueueGenericCreate>
    193e:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <xTimerQueue+0x1>
    1942:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <xTimerQueue>
    1946:	0f 90       	pop	r0
    1948:	0f be       	out	0x3f, r0	; 63
    194a:	08 95       	ret

0000194c <xTimerCreateTimerTask>:
    194c:	ef 92       	push	r14
    194e:	ff 92       	push	r15
    1950:	0f 93       	push	r16
    1952:	d4 df       	rcall	.-88     	; 0x18fc <prvCheckForValidListAndQueue>
    1954:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <xTimerQueue>
    1958:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <xTimerQueue+0x1>
    195c:	89 2b       	or	r24, r25
    195e:	89 f0       	breq	.+34     	; 0x1982 <xTimerCreateTimerTask+0x36>
    1960:	0f 2e       	mov	r0, r31
    1962:	f2 e7       	ldi	r31, 0x72	; 114
    1964:	ef 2e       	mov	r14, r31
    1966:	f3 e0       	ldi	r31, 0x03	; 3
    1968:	ff 2e       	mov	r15, r31
    196a:	f0 2d       	mov	r31, r0
    196c:	06 e0       	ldi	r16, 0x06	; 6
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	45 e5       	ldi	r20, 0x55	; 85
    1974:	50 e0       	ldi	r21, 0x00	; 0
    1976:	6d ef       	ldi	r22, 0xFD	; 253
    1978:	72 e0       	ldi	r23, 0x02	; 2
    197a:	83 e0       	ldi	r24, 0x03	; 3
    197c:	91 e0       	ldi	r25, 0x01	; 1
    197e:	82 db       	rcall	.-2300   	; 0x1084 <xTaskCreate>
    1980:	01 c0       	rjmp	.+2      	; 0x1984 <xTimerCreateTimerTask+0x38>
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	0f 91       	pop	r16
    1986:	ff 90       	pop	r15
    1988:	ef 90       	pop	r14
    198a:	08 95       	ret

0000198c <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    198c:	0f 93       	push	r16
    198e:	1f 93       	push	r17
    1990:	cf 93       	push	r28
    1992:	df 93       	push	r29
    1994:	00 d0       	rcall	.+0      	; 0x1996 <xTimerGenericCommand+0xa>
    1996:	1f 92       	push	r1
    1998:	1f 92       	push	r1
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    199e:	e0 91 74 03 	lds	r30, 0x0374	; 0x800374 <xTimerQueue>
    19a2:	f0 91 75 03 	lds	r31, 0x0375	; 0x800375 <xTimerQueue+0x1>
    19a6:	30 97       	sbiw	r30, 0x00	; 0
    19a8:	51 f1       	breq	.+84     	; 0x19fe <xTimerGenericCommand+0x72>
    19aa:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    19ac:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    19ae:	5b 83       	std	Y+3, r21	; 0x03
    19b0:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    19b2:	9d 83       	std	Y+5, r25	; 0x05
    19b4:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    19b6:	66 30       	cpi	r22, 0x06	; 6
    19b8:	d4 f4       	brge	.+52     	; 0x19ee <xTimerGenericCommand+0x62>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    19ba:	23 df       	rcall	.-442    	; 0x1802 <xTaskGetSchedulerState>
    19bc:	82 30       	cpi	r24, 0x02	; 2
    19be:	59 f4       	brne	.+22     	; 0x19d6 <xTimerGenericCommand+0x4a>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	a8 01       	movw	r20, r16
    19c4:	be 01       	movw	r22, r28
    19c6:	6f 5f       	subi	r22, 0xFF	; 255
    19c8:	7f 4f       	sbci	r23, 0xFF	; 255
    19ca:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <xTimerQueue>
    19ce:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <xTimerQueue+0x1>
    19d2:	77 d9       	rcall	.-3346   	; 0xcc2 <xQueueGenericSend>
    19d4:	15 c0       	rjmp	.+42     	; 0x1a00 <xTimerGenericCommand+0x74>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	40 e0       	ldi	r20, 0x00	; 0
    19da:	50 e0       	ldi	r21, 0x00	; 0
    19dc:	be 01       	movw	r22, r28
    19de:	6f 5f       	subi	r22, 0xFF	; 255
    19e0:	7f 4f       	sbci	r23, 0xFF	; 255
    19e2:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <xTimerQueue>
    19e6:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <xTimerQueue+0x1>
    19ea:	6b d9       	rcall	.-3370   	; 0xcc2 <xQueueGenericSend>
    19ec:	09 c0       	rjmp	.+18     	; 0x1a00 <xTimerGenericCommand+0x74>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	ad 01       	movw	r20, r26
    19f2:	be 01       	movw	r22, r28
    19f4:	6f 5f       	subi	r22, 0xFF	; 255
    19f6:	7f 4f       	sbci	r23, 0xFF	; 255
    19f8:	cf 01       	movw	r24, r30
    19fa:	f5 d9       	rcall	.-3094   	; 0xde6 <xQueueGenericSendFromISR>
    19fc:	01 c0       	rjmp	.+2      	; 0x1a00 <xTimerGenericCommand+0x74>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	df 91       	pop	r29
    1a0c:	cf 91       	pop	r28
    1a0e:	1f 91       	pop	r17
    1a10:	0f 91       	pop	r16
    1a12:	08 95       	ret

00001a14 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    1a14:	af 92       	push	r10
    1a16:	bf 92       	push	r11
    1a18:	cf 92       	push	r12
    1a1a:	df 92       	push	r13
    1a1c:	ef 92       	push	r14
    1a1e:	ff 92       	push	r15
    1a20:	0f 93       	push	r16
    1a22:	1f 93       	push	r17
    1a24:	cf 93       	push	r28
    1a26:	df 93       	push	r29
    1a28:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    1a2a:	71 dc       	rcall	.-1822   	; 0x130e <xTaskGetTickCount>
    1a2c:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    1a2e:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <xLastTime.2432>
    1a32:	90 91 71 03 	lds	r25, 0x0371	; 0x800371 <xLastTime.2432+0x1>
    1a36:	e8 16       	cp	r14, r24
    1a38:	f9 06       	cpc	r15, r25
    1a3a:	08 f0       	brcs	.+2      	; 0x1a3e <prvSampleTimeNow+0x2a>
    1a3c:	47 c0       	rjmp	.+142    	; 0x1acc <prvSampleTimeNow+0xb8>
    1a3e:	2f c0       	rjmp	.+94     	; 0x1a9e <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    1a40:	05 80       	ldd	r0, Z+5	; 0x05
    1a42:	f6 81       	ldd	r31, Z+6	; 0x06
    1a44:	e0 2d       	mov	r30, r0
    1a46:	a0 80       	ld	r10, Z
    1a48:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1a4a:	c6 81       	ldd	r28, Z+6	; 0x06
    1a4c:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1a4e:	8e 01       	movw	r16, r28
    1a50:	0e 5f       	subi	r16, 0xFE	; 254
    1a52:	1f 4f       	sbci	r17, 0xFF	; 255
    1a54:	c8 01       	movw	r24, r16
    1a56:	0e 94 8b 03 	call	0x716	; 0x716 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1a5a:	e8 89       	ldd	r30, Y+16	; 0x10
    1a5c:	f9 89       	ldd	r31, Y+17	; 0x11
    1a5e:	ce 01       	movw	r24, r28
    1a60:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    1a62:	8b 89       	ldd	r24, Y+19	; 0x13
    1a64:	82 ff       	sbrs	r24, 2
    1a66:	1b c0       	rjmp	.+54     	; 0x1a9e <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    1a68:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a6a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a6c:	8a 0d       	add	r24, r10
    1a6e:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    1a70:	a8 16       	cp	r10, r24
    1a72:	b9 06       	cpc	r11, r25
    1a74:	60 f4       	brcc	.+24     	; 0x1a8e <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    1a76:	9b 83       	std	Y+3, r25	; 0x03
    1a78:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    1a7a:	d9 87       	std	Y+9, r29	; 0x09
    1a7c:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    1a7e:	b8 01       	movw	r22, r16
    1a80:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <pxCurrentTimerList>
    1a84:	90 91 79 03 	lds	r25, 0x0379	; 0x800379 <pxCurrentTimerList+0x1>
    1a88:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <vListInsert>
    1a8c:	08 c0       	rjmp	.+16     	; 0x1a9e <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    1a8e:	00 e0       	ldi	r16, 0x00	; 0
    1a90:	10 e0       	ldi	r17, 0x00	; 0
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	a5 01       	movw	r20, r10
    1a98:	60 e0       	ldi	r22, 0x00	; 0
    1a9a:	ce 01       	movw	r24, r28
    1a9c:	77 df       	rcall	.-274    	; 0x198c <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1a9e:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <pxCurrentTimerList>
    1aa2:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <pxCurrentTimerList+0x1>
    1aa6:	80 81       	ld	r24, Z
    1aa8:	81 11       	cpse	r24, r1
    1aaa:	ca cf       	rjmp	.-108    	; 0x1a40 <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    1aac:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <pxOverflowTimerList>
    1ab0:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <pxOverflowTimerList+0x1>
    1ab4:	90 93 79 03 	sts	0x0379, r25	; 0x800379 <pxCurrentTimerList+0x1>
    1ab8:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    1abc:	f0 93 77 03 	sts	0x0377, r31	; 0x800377 <pxOverflowTimerList+0x1>
    1ac0:	e0 93 76 03 	sts	0x0376, r30	; 0x800376 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	f6 01       	movw	r30, r12
    1ac8:	80 83       	st	Z, r24
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    1acc:	f6 01       	movw	r30, r12
    1ace:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    1ad0:	f0 92 71 03 	sts	0x0371, r15	; 0x800371 <xLastTime.2432+0x1>
    1ad4:	e0 92 70 03 	sts	0x0370, r14	; 0x800370 <xLastTime.2432>

    return xTimeNow;
}
    1ad8:	c7 01       	movw	r24, r14
    1ada:	df 91       	pop	r29
    1adc:	cf 91       	pop	r28
    1ade:	1f 91       	pop	r17
    1ae0:	0f 91       	pop	r16
    1ae2:	ff 90       	pop	r15
    1ae4:	ef 90       	pop	r14
    1ae6:	df 90       	pop	r13
    1ae8:	cf 90       	pop	r12
    1aea:	bf 90       	pop	r11
    1aec:	af 90       	pop	r10
    1aee:	08 95       	ret

00001af0 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    1af0:	08 95       	ret

00001af2 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    1af2:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    1af4:	2f 9a       	sbi	0x05, 7	; 5
    1af6:	2f ef       	ldi	r18, 0xFF	; 255
    1af8:	80 e7       	ldi	r24, 0x70	; 112
    1afa:	92 e0       	ldi	r25, 0x02	; 2
    1afc:	21 50       	subi	r18, 0x01	; 1
    1afe:	80 40       	sbci	r24, 0x00	; 0
    1b00:	90 40       	sbci	r25, 0x00	; 0
    1b02:	e1 f7       	brne	.-8      	; 0x1afc <vApplicationMallocFailedHook+0xa>
    1b04:	00 c0       	rjmp	.+0      	; 0x1b06 <vApplicationMallocFailedHook+0x14>
    1b06:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    1b08:	1f 9a       	sbi	0x03, 7	; 3
    1b0a:	f5 cf       	rjmp	.-22     	; 0x1af6 <vApplicationMallocFailedHook+0x4>

00001b0c <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    1b0c:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    1b0e:	2f 9a       	sbi	0x05, 7	; 5
    1b10:	2f ef       	ldi	r18, 0xFF	; 255
    1b12:	87 ea       	ldi	r24, 0xA7	; 167
    1b14:	91 e6       	ldi	r25, 0x61	; 97
    1b16:	21 50       	subi	r18, 0x01	; 1
    1b18:	80 40       	sbci	r24, 0x00	; 0
    1b1a:	90 40       	sbci	r25, 0x00	; 0
    1b1c:	e1 f7       	brne	.-8      	; 0x1b16 <vApplicationStackOverflowHook+0xa>
    1b1e:	00 c0       	rjmp	.+0      	; 0x1b20 <vApplicationStackOverflowHook+0x14>
    1b20:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    1b22:	1f 9a       	sbi	0x03, 7	; 3
    1b24:	f5 cf       	rjmp	.-22     	; 0x1b10 <vApplicationStackOverflowHook+0x4>

00001b26 <__fixsfsi>:
    1b26:	04 d0       	rcall	.+8      	; 0x1b30 <__fixunssfsi>
    1b28:	68 94       	set
    1b2a:	b1 11       	cpse	r27, r1
    1b2c:	50 c0       	rjmp	.+160    	; 0x1bce <__fp_szero>
    1b2e:	08 95       	ret

00001b30 <__fixunssfsi>:
    1b30:	33 d0       	rcall	.+102    	; 0x1b98 <__fp_splitA>
    1b32:	88 f0       	brcs	.+34     	; 0x1b56 <__fixunssfsi+0x26>
    1b34:	9f 57       	subi	r25, 0x7F	; 127
    1b36:	90 f0       	brcs	.+36     	; 0x1b5c <__fixunssfsi+0x2c>
    1b38:	b9 2f       	mov	r27, r25
    1b3a:	99 27       	eor	r25, r25
    1b3c:	b7 51       	subi	r27, 0x17	; 23
    1b3e:	a0 f0       	brcs	.+40     	; 0x1b68 <__fixunssfsi+0x38>
    1b40:	d1 f0       	breq	.+52     	; 0x1b76 <__fixunssfsi+0x46>
    1b42:	66 0f       	add	r22, r22
    1b44:	77 1f       	adc	r23, r23
    1b46:	88 1f       	adc	r24, r24
    1b48:	99 1f       	adc	r25, r25
    1b4a:	1a f0       	brmi	.+6      	; 0x1b52 <__fixunssfsi+0x22>
    1b4c:	ba 95       	dec	r27
    1b4e:	c9 f7       	brne	.-14     	; 0x1b42 <__fixunssfsi+0x12>
    1b50:	12 c0       	rjmp	.+36     	; 0x1b76 <__fixunssfsi+0x46>
    1b52:	b1 30       	cpi	r27, 0x01	; 1
    1b54:	81 f0       	breq	.+32     	; 0x1b76 <__fixunssfsi+0x46>
    1b56:	3a d0       	rcall	.+116    	; 0x1bcc <__fp_zero>
    1b58:	b1 e0       	ldi	r27, 0x01	; 1
    1b5a:	08 95       	ret
    1b5c:	37 c0       	rjmp	.+110    	; 0x1bcc <__fp_zero>
    1b5e:	67 2f       	mov	r22, r23
    1b60:	78 2f       	mov	r23, r24
    1b62:	88 27       	eor	r24, r24
    1b64:	b8 5f       	subi	r27, 0xF8	; 248
    1b66:	39 f0       	breq	.+14     	; 0x1b76 <__fixunssfsi+0x46>
    1b68:	b9 3f       	cpi	r27, 0xF9	; 249
    1b6a:	cc f3       	brlt	.-14     	; 0x1b5e <__fixunssfsi+0x2e>
    1b6c:	86 95       	lsr	r24
    1b6e:	77 95       	ror	r23
    1b70:	67 95       	ror	r22
    1b72:	b3 95       	inc	r27
    1b74:	d9 f7       	brne	.-10     	; 0x1b6c <__fixunssfsi+0x3c>
    1b76:	3e f4       	brtc	.+14     	; 0x1b86 <__fixunssfsi+0x56>
    1b78:	90 95       	com	r25
    1b7a:	80 95       	com	r24
    1b7c:	70 95       	com	r23
    1b7e:	61 95       	neg	r22
    1b80:	7f 4f       	sbci	r23, 0xFF	; 255
    1b82:	8f 4f       	sbci	r24, 0xFF	; 255
    1b84:	9f 4f       	sbci	r25, 0xFF	; 255
    1b86:	08 95       	ret

00001b88 <__fp_split3>:
    1b88:	57 fd       	sbrc	r21, 7
    1b8a:	90 58       	subi	r25, 0x80	; 128
    1b8c:	44 0f       	add	r20, r20
    1b8e:	55 1f       	adc	r21, r21
    1b90:	59 f0       	breq	.+22     	; 0x1ba8 <__fp_splitA+0x10>
    1b92:	5f 3f       	cpi	r21, 0xFF	; 255
    1b94:	71 f0       	breq	.+28     	; 0x1bb2 <__fp_splitA+0x1a>
    1b96:	47 95       	ror	r20

00001b98 <__fp_splitA>:
    1b98:	88 0f       	add	r24, r24
    1b9a:	97 fb       	bst	r25, 7
    1b9c:	99 1f       	adc	r25, r25
    1b9e:	61 f0       	breq	.+24     	; 0x1bb8 <__fp_splitA+0x20>
    1ba0:	9f 3f       	cpi	r25, 0xFF	; 255
    1ba2:	79 f0       	breq	.+30     	; 0x1bc2 <__fp_splitA+0x2a>
    1ba4:	87 95       	ror	r24
    1ba6:	08 95       	ret
    1ba8:	12 16       	cp	r1, r18
    1baa:	13 06       	cpc	r1, r19
    1bac:	14 06       	cpc	r1, r20
    1bae:	55 1f       	adc	r21, r21
    1bb0:	f2 cf       	rjmp	.-28     	; 0x1b96 <__fp_split3+0xe>
    1bb2:	46 95       	lsr	r20
    1bb4:	f1 df       	rcall	.-30     	; 0x1b98 <__fp_splitA>
    1bb6:	08 c0       	rjmp	.+16     	; 0x1bc8 <__fp_splitA+0x30>
    1bb8:	16 16       	cp	r1, r22
    1bba:	17 06       	cpc	r1, r23
    1bbc:	18 06       	cpc	r1, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	f1 cf       	rjmp	.-30     	; 0x1ba4 <__fp_splitA+0xc>
    1bc2:	86 95       	lsr	r24
    1bc4:	71 05       	cpc	r23, r1
    1bc6:	61 05       	cpc	r22, r1
    1bc8:	08 94       	sec
    1bca:	08 95       	ret

00001bcc <__fp_zero>:
    1bcc:	e8 94       	clt

00001bce <__fp_szero>:
    1bce:	bb 27       	eor	r27, r27
    1bd0:	66 27       	eor	r22, r22
    1bd2:	77 27       	eor	r23, r23
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	97 f9       	bld	r25, 7
    1bd8:	08 95       	ret

00001bda <usart_getchar>:
    1bda:	cf 93       	push	r28
    1bdc:	df 93       	push	r29
    1bde:	1f 92       	push	r1
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	be 01       	movw	r22, r28
    1be6:	6f 5f       	subi	r22, 0xFF	; 255
    1be8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bea:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <_com_serial_instance>
    1bee:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <_com_serial_instance+0x1>
    1bf2:	49 d1       	rcall	.+658    	; 0x1e86 <serial_get_byte>
    1bf4:	81 11       	cpse	r24, r1
    1bf6:	f6 cf       	rjmp	.-20     	; 0x1be4 <usart_getchar+0xa>
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	0f 90       	pop	r0
    1bfe:	df 91       	pop	r29
    1c00:	cf 91       	pop	r28
    1c02:	08 95       	ret

00001c04 <usart_putchar>:
    1c04:	68 2f       	mov	r22, r24
    1c06:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <_com_serial_instance>
    1c0a:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <_com_serial_instance+0x1>
    1c0e:	c6 d0       	rcall	.+396    	; 0x1d9c <serial_send_byte>
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	08 95       	ret

00001c16 <stdioCreate>:
    1c16:	8f 92       	push	r8
    1c18:	9f 92       	push	r9
    1c1a:	af 92       	push	r10
    1c1c:	cf 92       	push	r12
    1c1e:	ef 92       	push	r14
    1c20:	0f 93       	push	r16
    1c22:	81 2c       	mov	r8, r1
    1c24:	91 2c       	mov	r9, r1
    1c26:	68 94       	set
    1c28:	aa 24       	eor	r10, r10
    1c2a:	a7 f8       	bld	r10, 7
    1c2c:	68 94       	set
    1c2e:	cc 24       	eor	r12, r12
    1c30:	c7 f8       	bld	r12, 7
    1c32:	e1 2c       	mov	r14, r1
    1c34:	00 e0       	ldi	r16, 0x00	; 0
    1c36:	23 e0       	ldi	r18, 0x03	; 3
    1c38:	40 e0       	ldi	r20, 0x00	; 0
    1c3a:	51 ee       	ldi	r21, 0xE1	; 225
    1c3c:	60 e0       	ldi	r22, 0x00	; 0
    1c3e:	70 e0       	ldi	r23, 0x00	; 0
    1c40:	13 d0       	rcall	.+38     	; 0x1c68 <serial_new_instance>
    1c42:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <_com_serial_instance+0x1>
    1c46:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <_com_serial_instance>
    1c4a:	ef eb       	ldi	r30, 0xBF	; 191
    1c4c:	f3 e0       	ldi	r31, 0x03	; 3
    1c4e:	86 e0       	ldi	r24, 0x06	; 6
    1c50:	92 e0       	ldi	r25, 0x02	; 2
    1c52:	91 83       	std	Z+1, r25	; 0x01
    1c54:	80 83       	st	Z, r24
    1c56:	93 83       	std	Z+3, r25	; 0x03
    1c58:	82 83       	std	Z+2, r24	; 0x02
    1c5a:	0f 91       	pop	r16
    1c5c:	ef 90       	pop	r14
    1c5e:	cf 90       	pop	r12
    1c60:	af 90       	pop	r10
    1c62:	9f 90       	pop	r9
    1c64:	8f 90       	pop	r8
    1c66:	08 95       	ret

00001c68 <serial_new_instance>:
    1c68:	2f 92       	push	r2
    1c6a:	3f 92       	push	r3
    1c6c:	4f 92       	push	r4
    1c6e:	5f 92       	push	r5
    1c70:	6f 92       	push	r6
    1c72:	7f 92       	push	r7
    1c74:	8f 92       	push	r8
    1c76:	9f 92       	push	r9
    1c78:	af 92       	push	r10
    1c7a:	cf 92       	push	r12
    1c7c:	ef 92       	push	r14
    1c7e:	ff 92       	push	r15
    1c80:	0f 93       	push	r16
    1c82:	1f 93       	push	r17
    1c84:	cf 93       	push	r28
    1c86:	df 93       	push	r29
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    1c8c:	f8 2e       	mov	r15, r24
    1c8e:	2a 01       	movw	r4, r20
    1c90:	3b 01       	movw	r6, r22
    1c92:	88 e0       	ldi	r24, 0x08	; 8
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <malloc>
    1c9a:	8c 01       	movw	r16, r24
    1c9c:	8f 2d       	mov	r24, r15
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	88 0f       	add	r24, r24
    1ca2:	99 1f       	adc	r25, r25
    1ca4:	fc 01       	movw	r30, r24
    1ca6:	e2 57       	subi	r30, 0x72	; 114
    1ca8:	fc 4f       	sbci	r31, 0xFC	; 252
    1caa:	11 83       	std	Z+1, r17	; 0x01
    1cac:	00 83       	st	Z, r16
    1cae:	fc 01       	movw	r30, r24
    1cb0:	ec 5e       	subi	r30, 0xEC	; 236
    1cb2:	fd 4f       	sbci	r31, 0xFD	; 253
    1cb4:	80 81       	ld	r24, Z
    1cb6:	91 81       	ldd	r25, Z+1	; 0x01
    1cb8:	d8 01       	movw	r26, r16
    1cba:	8d 93       	st	X+, r24
    1cbc:	9c 93       	st	X, r25
    1cbe:	6c 2d       	mov	r22, r12
    1cc0:	70 e0       	ldi	r23, 0x00	; 0
    1cc2:	84 e0       	ldi	r24, 0x04	; 4
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <calloc>
    1cca:	1c 01       	movw	r2, r24
    1ccc:	61 e0       	ldi	r22, 0x01	; 1
    1cce:	70 e0       	ldi	r23, 0x00	; 0
    1cd0:	86 e0       	ldi	r24, 0x06	; 6
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <calloc>
    1cd8:	7c 01       	movw	r14, r24
    1cda:	4c 2d       	mov	r20, r12
    1cdc:	b1 01       	movw	r22, r2
    1cde:	47 d3       	rcall	.+1678   	; 0x236e <fifo_init>
    1ce0:	f8 01       	movw	r30, r16
    1ce2:	f5 82       	std	Z+5, r15	; 0x05
    1ce4:	e4 82       	std	Z+4, r14	; 0x04
    1ce6:	6a 2d       	mov	r22, r10
    1ce8:	70 e0       	ldi	r23, 0x00	; 0
    1cea:	84 e0       	ldi	r24, 0x04	; 4
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <calloc>
    1cf2:	1c 01       	movw	r2, r24
    1cf4:	61 e0       	ldi	r22, 0x01	; 1
    1cf6:	70 e0       	ldi	r23, 0x00	; 0
    1cf8:	86 e0       	ldi	r24, 0x06	; 6
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	fc d7       	rcall	.+4088   	; 0x2cf6 <calloc>
    1cfe:	7c 01       	movw	r14, r24
    1d00:	4a 2d       	mov	r20, r10
    1d02:	b1 01       	movw	r22, r2
    1d04:	34 d3       	rcall	.+1640   	; 0x236e <fifo_init>
    1d06:	d8 01       	movw	r26, r16
    1d08:	13 96       	adiw	r26, 0x03	; 3
    1d0a:	fc 92       	st	X, r15
    1d0c:	ee 92       	st	-X, r14
    1d0e:	12 97       	sbiw	r26, 0x02	; 2
    1d10:	17 96       	adiw	r26, 0x07	; 7
    1d12:	9c 92       	st	X, r9
    1d14:	8e 92       	st	-X, r8
    1d16:	16 97       	sbiw	r26, 0x06	; 6
    1d18:	ff b6       	in	r15, 0x3f	; 63
    1d1a:	f8 94       	cli
    1d1c:	ed 91       	ld	r30, X+
    1d1e:	fc 91       	ld	r31, X
    1d20:	11 97       	sbiw	r26, 0x01	; 1
    1d22:	36 97       	sbiw	r30, 0x06	; 6
    1d24:	80 81       	ld	r24, Z
    1d26:	82 60       	ori	r24, 0x02	; 2
    1d28:	80 83       	st	Z, r24
    1d2a:	8d 90       	ld	r8, X+
    1d2c:	9c 90       	ld	r9, X
    1d2e:	c3 01       	movw	r24, r6
    1d30:	b2 01       	movw	r22, r4
    1d32:	ec d6       	rcall	.+3544   	; 0x2b0c <__floatunsisf>
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	40 e0       	ldi	r20, 0x00	; 0
    1d3a:	51 e4       	ldi	r21, 0x41	; 65
    1d3c:	4c d7       	rcall	.+3736   	; 0x2bd6 <__mulsf3>
    1d3e:	9b 01       	movw	r18, r22
    1d40:	ac 01       	movw	r20, r24
    1d42:	60 e0       	ldi	r22, 0x00	; 0
    1d44:	74 e2       	ldi	r23, 0x24	; 36
    1d46:	84 e7       	ldi	r24, 0x74	; 116
    1d48:	9b e4       	ldi	r25, 0x4B	; 75
    1d4a:	78 d6       	rcall	.+3312   	; 0x2a3c <__divsf3>
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	40 e8       	ldi	r20, 0x80	; 128
    1d52:	5f e3       	ldi	r21, 0x3F	; 63
    1d54:	0e d6       	rcall	.+3100   	; 0x2972 <__subsf3>
    1d56:	ec de       	rcall	.-552    	; 0x1b30 <__fixunssfsi>
    1d58:	f4 01       	movw	r30, r8
    1d5a:	32 97       	sbiw	r30, 0x02	; 2
    1d5c:	60 83       	st	Z, r22
    1d5e:	d8 01       	movw	r26, r16
    1d60:	ed 91       	ld	r30, X+
    1d62:	fc 91       	ld	r31, X
    1d64:	11 97       	sbiw	r26, 0x01	; 1
    1d66:	35 97       	sbiw	r30, 0x05	; 5
    1d68:	88 e9       	ldi	r24, 0x98	; 152
    1d6a:	80 83       	st	Z, r24
    1d6c:	ed 91       	ld	r30, X+
    1d6e:	fc 91       	ld	r31, X
    1d70:	34 97       	sbiw	r30, 0x04	; 4
    1d72:	86 e0       	ldi	r24, 0x06	; 6
    1d74:	80 83       	st	Z, r24
    1d76:	ff be       	out	0x3f, r15	; 63
    1d78:	c8 01       	movw	r24, r16
    1d7a:	df 91       	pop	r29
    1d7c:	cf 91       	pop	r28
    1d7e:	1f 91       	pop	r17
    1d80:	0f 91       	pop	r16
    1d82:	ff 90       	pop	r15
    1d84:	ef 90       	pop	r14
    1d86:	cf 90       	pop	r12
    1d88:	af 90       	pop	r10
    1d8a:	9f 90       	pop	r9
    1d8c:	8f 90       	pop	r8
    1d8e:	7f 90       	pop	r7
    1d90:	6f 90       	pop	r6
    1d92:	5f 90       	pop	r5
    1d94:	4f 90       	pop	r4
    1d96:	3f 90       	pop	r3
    1d98:	2f 90       	pop	r2
    1d9a:	08 95       	ret

00001d9c <serial_send_byte>:
    1d9c:	cf 93       	push	r28
    1d9e:	df 93       	push	r29
    1da0:	ec 01       	movw	r28, r24
    1da2:	ea 81       	ldd	r30, Y+2	; 0x02
    1da4:	fb 81       	ldd	r31, Y+3	; 0x03
    1da6:	93 81       	ldd	r25, Z+3	; 0x03
    1da8:	82 81       	ldd	r24, Z+2	; 0x02
    1daa:	25 81       	ldd	r18, Z+5	; 0x05
    1dac:	98 1b       	sub	r25, r24
    1dae:	92 23       	and	r25, r18
    1db0:	84 81       	ldd	r24, Z+4	; 0x04
    1db2:	98 17       	cp	r25, r24
    1db4:	a1 f0       	breq	.+40     	; 0x1dde <serial_send_byte+0x42>
    1db6:	93 81       	ldd	r25, Z+3	; 0x03
    1db8:	26 95       	lsr	r18
    1dba:	29 23       	and	r18, r25
    1dbc:	a0 81       	ld	r26, Z
    1dbe:	b1 81       	ldd	r27, Z+1	; 0x01
    1dc0:	a2 0f       	add	r26, r18
    1dc2:	b1 1d       	adc	r27, r1
    1dc4:	6c 93       	st	X, r22
    1dc6:	9f 5f       	subi	r25, 0xFF	; 255
    1dc8:	25 81       	ldd	r18, Z+5	; 0x05
    1dca:	92 23       	and	r25, r18
    1dcc:	93 83       	std	Z+3, r25	; 0x03
    1dce:	e8 81       	ld	r30, Y
    1dd0:	f9 81       	ldd	r31, Y+1	; 0x01
    1dd2:	35 97       	sbiw	r30, 0x05	; 5
    1dd4:	80 81       	ld	r24, Z
    1dd6:	80 62       	ori	r24, 0x20	; 32
    1dd8:	80 83       	st	Z, r24
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	01 c0       	rjmp	.+2      	; 0x1de0 <serial_send_byte+0x44>
    1dde:	82 e0       	ldi	r24, 0x02	; 2
    1de0:	df 91       	pop	r29
    1de2:	cf 91       	pop	r28
    1de4:	08 95       	ret

00001de6 <serial_send_bytes>:
    1de6:	ef 92       	push	r14
    1de8:	ff 92       	push	r15
    1dea:	0f 93       	push	r16
    1dec:	1f 93       	push	r17
    1dee:	cf 93       	push	r28
    1df0:	df 93       	push	r29
    1df2:	7c 01       	movw	r14, r24
    1df4:	dc 01       	movw	r26, r24
    1df6:	12 96       	adiw	r26, 0x02	; 2
    1df8:	ed 91       	ld	r30, X+
    1dfa:	fc 91       	ld	r31, X
    1dfc:	13 97       	sbiw	r26, 0x03	; 3
    1dfe:	93 81       	ldd	r25, Z+3	; 0x03
    1e00:	82 81       	ldd	r24, Z+2	; 0x02
    1e02:	98 1b       	sub	r25, r24
    1e04:	85 81       	ldd	r24, Z+5	; 0x05
    1e06:	98 23       	and	r25, r24
    1e08:	84 81       	ldd	r24, Z+4	; 0x04
    1e0a:	89 1b       	sub	r24, r25
    1e0c:	86 17       	cp	r24, r22
    1e0e:	98 f1       	brcs	.+102    	; 0x1e76 <serial_send_bytes+0x90>
    1e10:	66 23       	and	r22, r22
    1e12:	41 f1       	breq	.+80     	; 0x1e64 <serial_send_bytes+0x7e>
    1e14:	84 2f       	mov	r24, r20
    1e16:	95 2f       	mov	r25, r21
    1e18:	dc 01       	movw	r26, r24
    1e1a:	61 50       	subi	r22, 0x01	; 1
    1e1c:	46 2f       	mov	r20, r22
    1e1e:	50 e0       	ldi	r21, 0x00	; 0
    1e20:	4f 5f       	subi	r20, 0xFF	; 255
    1e22:	5f 4f       	sbci	r21, 0xFF	; 255
    1e24:	48 0f       	add	r20, r24
    1e26:	59 1f       	adc	r21, r25
    1e28:	e7 01       	movw	r28, r14
    1e2a:	ea 81       	ldd	r30, Y+2	; 0x02
    1e2c:	fb 81       	ldd	r31, Y+3	; 0x03
    1e2e:	93 81       	ldd	r25, Z+3	; 0x03
    1e30:	82 81       	ldd	r24, Z+2	; 0x02
    1e32:	25 81       	ldd	r18, Z+5	; 0x05
    1e34:	98 1b       	sub	r25, r24
    1e36:	92 23       	and	r25, r18
    1e38:	84 81       	ldd	r24, Z+4	; 0x04
    1e3a:	98 17       	cp	r25, r24
    1e3c:	79 f0       	breq	.+30     	; 0x1e5c <serial_send_bytes+0x76>
    1e3e:	8c 91       	ld	r24, X
    1e40:	93 81       	ldd	r25, Z+3	; 0x03
    1e42:	26 95       	lsr	r18
    1e44:	29 23       	and	r18, r25
    1e46:	60 81       	ld	r22, Z
    1e48:	71 81       	ldd	r23, Z+1	; 0x01
    1e4a:	8b 01       	movw	r16, r22
    1e4c:	02 0f       	add	r16, r18
    1e4e:	11 1d       	adc	r17, r1
    1e50:	e8 01       	movw	r28, r16
    1e52:	88 83       	st	Y, r24
    1e54:	9f 5f       	subi	r25, 0xFF	; 255
    1e56:	85 81       	ldd	r24, Z+5	; 0x05
    1e58:	98 23       	and	r25, r24
    1e5a:	93 83       	std	Z+3, r25	; 0x03
    1e5c:	11 96       	adiw	r26, 0x01	; 1
    1e5e:	a4 17       	cp	r26, r20
    1e60:	b5 07       	cpc	r27, r21
    1e62:	11 f7       	brne	.-60     	; 0x1e28 <serial_send_bytes+0x42>
    1e64:	d7 01       	movw	r26, r14
    1e66:	ed 91       	ld	r30, X+
    1e68:	fc 91       	ld	r31, X
    1e6a:	35 97       	sbiw	r30, 0x05	; 5
    1e6c:	80 81       	ld	r24, Z
    1e6e:	80 62       	ori	r24, 0x20	; 32
    1e70:	80 83       	st	Z, r24
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	01 c0       	rjmp	.+2      	; 0x1e78 <serial_send_bytes+0x92>
    1e76:	82 e0       	ldi	r24, 0x02	; 2
    1e78:	df 91       	pop	r29
    1e7a:	cf 91       	pop	r28
    1e7c:	1f 91       	pop	r17
    1e7e:	0f 91       	pop	r16
    1e80:	ff 90       	pop	r15
    1e82:	ef 90       	pop	r14
    1e84:	08 95       	ret

00001e86 <serial_get_byte>:
    1e86:	dc 01       	movw	r26, r24
    1e88:	14 96       	adiw	r26, 0x04	; 4
    1e8a:	ed 91       	ld	r30, X+
    1e8c:	fc 91       	ld	r31, X
    1e8e:	15 97       	sbiw	r26, 0x05	; 5
    1e90:	93 81       	ldd	r25, Z+3	; 0x03
    1e92:	82 81       	ldd	r24, Z+2	; 0x02
    1e94:	98 17       	cp	r25, r24
    1e96:	89 f0       	breq	.+34     	; 0x1eba <serial_get_byte+0x34>
    1e98:	92 81       	ldd	r25, Z+2	; 0x02
    1e9a:	85 81       	ldd	r24, Z+5	; 0x05
    1e9c:	86 95       	lsr	r24
    1e9e:	89 23       	and	r24, r25
    1ea0:	a0 81       	ld	r26, Z
    1ea2:	b1 81       	ldd	r27, Z+1	; 0x01
    1ea4:	a8 0f       	add	r26, r24
    1ea6:	b1 1d       	adc	r27, r1
    1ea8:	8c 91       	ld	r24, X
    1eaa:	db 01       	movw	r26, r22
    1eac:	8c 93       	st	X, r24
    1eae:	9f 5f       	subi	r25, 0xFF	; 255
    1eb0:	85 81       	ldd	r24, Z+5	; 0x05
    1eb2:	98 23       	and	r25, r24
    1eb4:	92 83       	std	Z+2, r25	; 0x02
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	08 95       	ret
    1eba:	83 e0       	ldi	r24, 0x03	; 3
    1ebc:	08 95       	ret

00001ebe <__vector_25>:
    1ebe:	1f 92       	push	r1
    1ec0:	0f 92       	push	r0
    1ec2:	0f b6       	in	r0, 0x3f	; 63
    1ec4:	0f 92       	push	r0
    1ec6:	11 24       	eor	r1, r1
    1ec8:	0b b6       	in	r0, 0x3b	; 59
    1eca:	0f 92       	push	r0
    1ecc:	2f 93       	push	r18
    1ece:	3f 93       	push	r19
    1ed0:	4f 93       	push	r20
    1ed2:	5f 93       	push	r21
    1ed4:	6f 93       	push	r22
    1ed6:	7f 93       	push	r23
    1ed8:	8f 93       	push	r24
    1eda:	9f 93       	push	r25
    1edc:	af 93       	push	r26
    1ede:	bf 93       	push	r27
    1ee0:	cf 93       	push	r28
    1ee2:	df 93       	push	r29
    1ee4:	ef 93       	push	r30
    1ee6:	ff 93       	push	r31
    1ee8:	a0 91 8e 03 	lds	r26, 0x038E	; 0x80038e <_ser_handle>
    1eec:	b0 91 8f 03 	lds	r27, 0x038F	; 0x80038f <_ser_handle+0x1>
    1ef0:	10 97       	sbiw	r26, 0x00	; 0
    1ef2:	11 f1       	breq	.+68     	; 0x1f38 <__vector_25+0x7a>
    1ef4:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1ef8:	14 96       	adiw	r26, 0x04	; 4
    1efa:	ed 91       	ld	r30, X+
    1efc:	fc 91       	ld	r31, X
    1efe:	15 97       	sbiw	r26, 0x05	; 5
    1f00:	93 81       	ldd	r25, Z+3	; 0x03
    1f02:	82 81       	ldd	r24, Z+2	; 0x02
    1f04:	25 81       	ldd	r18, Z+5	; 0x05
    1f06:	98 1b       	sub	r25, r24
    1f08:	92 23       	and	r25, r18
    1f0a:	84 81       	ldd	r24, Z+4	; 0x04
    1f0c:	98 17       	cp	r25, r24
    1f0e:	61 f0       	breq	.+24     	; 0x1f28 <__vector_25+0x6a>
    1f10:	83 81       	ldd	r24, Z+3	; 0x03
    1f12:	26 95       	lsr	r18
    1f14:	28 23       	and	r18, r24
    1f16:	c0 81       	ld	r28, Z
    1f18:	d1 81       	ldd	r29, Z+1	; 0x01
    1f1a:	c2 0f       	add	r28, r18
    1f1c:	d1 1d       	adc	r29, r1
    1f1e:	68 83       	st	Y, r22
    1f20:	8f 5f       	subi	r24, 0xFF	; 255
    1f22:	95 81       	ldd	r25, Z+5	; 0x05
    1f24:	89 23       	and	r24, r25
    1f26:	83 83       	std	Z+3, r24	; 0x03
    1f28:	16 96       	adiw	r26, 0x06	; 6
    1f2a:	ed 91       	ld	r30, X+
    1f2c:	fc 91       	ld	r31, X
    1f2e:	17 97       	sbiw	r26, 0x07	; 7
    1f30:	30 97       	sbiw	r30, 0x00	; 0
    1f32:	11 f0       	breq	.+4      	; 0x1f38 <__vector_25+0x7a>
    1f34:	cd 01       	movw	r24, r26
    1f36:	19 95       	eicall
    1f38:	ff 91       	pop	r31
    1f3a:	ef 91       	pop	r30
    1f3c:	df 91       	pop	r29
    1f3e:	cf 91       	pop	r28
    1f40:	bf 91       	pop	r27
    1f42:	af 91       	pop	r26
    1f44:	9f 91       	pop	r25
    1f46:	8f 91       	pop	r24
    1f48:	7f 91       	pop	r23
    1f4a:	6f 91       	pop	r22
    1f4c:	5f 91       	pop	r21
    1f4e:	4f 91       	pop	r20
    1f50:	3f 91       	pop	r19
    1f52:	2f 91       	pop	r18
    1f54:	0f 90       	pop	r0
    1f56:	0b be       	out	0x3b, r0	; 59
    1f58:	0f 90       	pop	r0
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	0f 90       	pop	r0
    1f5e:	1f 90       	pop	r1
    1f60:	18 95       	reti

00001f62 <__vector_26>:
    1f62:	1f 92       	push	r1
    1f64:	0f 92       	push	r0
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	0f 92       	push	r0
    1f6a:	11 24       	eor	r1, r1
    1f6c:	0b b6       	in	r0, 0x3b	; 59
    1f6e:	0f 92       	push	r0
    1f70:	2f 93       	push	r18
    1f72:	8f 93       	push	r24
    1f74:	9f 93       	push	r25
    1f76:	af 93       	push	r26
    1f78:	bf 93       	push	r27
    1f7a:	ef 93       	push	r30
    1f7c:	ff 93       	push	r31
    1f7e:	e0 91 8e 03 	lds	r30, 0x038E	; 0x80038e <_ser_handle>
    1f82:	f0 91 8f 03 	lds	r31, 0x038F	; 0x80038f <_ser_handle+0x1>
    1f86:	30 97       	sbiw	r30, 0x00	; 0
    1f88:	b9 f0       	breq	.+46     	; 0x1fb8 <__vector_26+0x56>
    1f8a:	02 80       	ldd	r0, Z+2	; 0x02
    1f8c:	f3 81       	ldd	r31, Z+3	; 0x03
    1f8e:	e0 2d       	mov	r30, r0
    1f90:	93 81       	ldd	r25, Z+3	; 0x03
    1f92:	82 81       	ldd	r24, Z+2	; 0x02
    1f94:	98 17       	cp	r25, r24
    1f96:	b1 f0       	breq	.+44     	; 0x1fc4 <__vector_26+0x62>
    1f98:	92 81       	ldd	r25, Z+2	; 0x02
    1f9a:	85 81       	ldd	r24, Z+5	; 0x05
    1f9c:	28 2f       	mov	r18, r24
    1f9e:	26 95       	lsr	r18
    1fa0:	29 23       	and	r18, r25
    1fa2:	a0 81       	ld	r26, Z
    1fa4:	b1 81       	ldd	r27, Z+1	; 0x01
    1fa6:	a2 0f       	add	r26, r18
    1fa8:	b1 1d       	adc	r27, r1
    1faa:	2c 91       	ld	r18, X
    1fac:	9f 5f       	subi	r25, 0xFF	; 255
    1fae:	89 23       	and	r24, r25
    1fb0:	82 83       	std	Z+2, r24	; 0x02
    1fb2:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1fb6:	0b c0       	rjmp	.+22     	; 0x1fce <__vector_26+0x6c>
    1fb8:	e1 ec       	ldi	r30, 0xC1	; 193
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	80 81       	ld	r24, Z
    1fbe:	8f 7d       	andi	r24, 0xDF	; 223
    1fc0:	80 83       	st	Z, r24
    1fc2:	05 c0       	rjmp	.+10     	; 0x1fce <__vector_26+0x6c>
    1fc4:	e1 ec       	ldi	r30, 0xC1	; 193
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	80 81       	ld	r24, Z
    1fca:	8f 7d       	andi	r24, 0xDF	; 223
    1fcc:	80 83       	st	Z, r24
    1fce:	ff 91       	pop	r31
    1fd0:	ef 91       	pop	r30
    1fd2:	bf 91       	pop	r27
    1fd4:	af 91       	pop	r26
    1fd6:	9f 91       	pop	r25
    1fd8:	8f 91       	pop	r24
    1fda:	2f 91       	pop	r18
    1fdc:	0f 90       	pop	r0
    1fde:	0b be       	out	0x3b, r0	; 59
    1fe0:	0f 90       	pop	r0
    1fe2:	0f be       	out	0x3f, r0	; 63
    1fe4:	0f 90       	pop	r0
    1fe6:	1f 90       	pop	r1
    1fe8:	18 95       	reti

00001fea <__vector_36>:
    1fea:	1f 92       	push	r1
    1fec:	0f 92       	push	r0
    1fee:	0f b6       	in	r0, 0x3f	; 63
    1ff0:	0f 92       	push	r0
    1ff2:	11 24       	eor	r1, r1
    1ff4:	0b b6       	in	r0, 0x3b	; 59
    1ff6:	0f 92       	push	r0
    1ff8:	2f 93       	push	r18
    1ffa:	3f 93       	push	r19
    1ffc:	4f 93       	push	r20
    1ffe:	5f 93       	push	r21
    2000:	6f 93       	push	r22
    2002:	7f 93       	push	r23
    2004:	8f 93       	push	r24
    2006:	9f 93       	push	r25
    2008:	af 93       	push	r26
    200a:	bf 93       	push	r27
    200c:	cf 93       	push	r28
    200e:	df 93       	push	r29
    2010:	ef 93       	push	r30
    2012:	ff 93       	push	r31
    2014:	a0 91 90 03 	lds	r26, 0x0390	; 0x800390 <_ser_handle+0x2>
    2018:	b0 91 91 03 	lds	r27, 0x0391	; 0x800391 <_ser_handle+0x3>
    201c:	10 97       	sbiw	r26, 0x00	; 0
    201e:	11 f1       	breq	.+68     	; 0x2064 <__vector_36+0x7a>
    2020:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    2024:	14 96       	adiw	r26, 0x04	; 4
    2026:	ed 91       	ld	r30, X+
    2028:	fc 91       	ld	r31, X
    202a:	15 97       	sbiw	r26, 0x05	; 5
    202c:	93 81       	ldd	r25, Z+3	; 0x03
    202e:	82 81       	ldd	r24, Z+2	; 0x02
    2030:	25 81       	ldd	r18, Z+5	; 0x05
    2032:	98 1b       	sub	r25, r24
    2034:	92 23       	and	r25, r18
    2036:	84 81       	ldd	r24, Z+4	; 0x04
    2038:	98 17       	cp	r25, r24
    203a:	61 f0       	breq	.+24     	; 0x2054 <__vector_36+0x6a>
    203c:	83 81       	ldd	r24, Z+3	; 0x03
    203e:	26 95       	lsr	r18
    2040:	28 23       	and	r18, r24
    2042:	c0 81       	ld	r28, Z
    2044:	d1 81       	ldd	r29, Z+1	; 0x01
    2046:	c2 0f       	add	r28, r18
    2048:	d1 1d       	adc	r29, r1
    204a:	68 83       	st	Y, r22
    204c:	8f 5f       	subi	r24, 0xFF	; 255
    204e:	95 81       	ldd	r25, Z+5	; 0x05
    2050:	89 23       	and	r24, r25
    2052:	83 83       	std	Z+3, r24	; 0x03
    2054:	16 96       	adiw	r26, 0x06	; 6
    2056:	ed 91       	ld	r30, X+
    2058:	fc 91       	ld	r31, X
    205a:	17 97       	sbiw	r26, 0x07	; 7
    205c:	30 97       	sbiw	r30, 0x00	; 0
    205e:	11 f0       	breq	.+4      	; 0x2064 <__vector_36+0x7a>
    2060:	cd 01       	movw	r24, r26
    2062:	19 95       	eicall
    2064:	ff 91       	pop	r31
    2066:	ef 91       	pop	r30
    2068:	df 91       	pop	r29
    206a:	cf 91       	pop	r28
    206c:	bf 91       	pop	r27
    206e:	af 91       	pop	r26
    2070:	9f 91       	pop	r25
    2072:	8f 91       	pop	r24
    2074:	7f 91       	pop	r23
    2076:	6f 91       	pop	r22
    2078:	5f 91       	pop	r21
    207a:	4f 91       	pop	r20
    207c:	3f 91       	pop	r19
    207e:	2f 91       	pop	r18
    2080:	0f 90       	pop	r0
    2082:	0b be       	out	0x3b, r0	; 59
    2084:	0f 90       	pop	r0
    2086:	0f be       	out	0x3f, r0	; 63
    2088:	0f 90       	pop	r0
    208a:	1f 90       	pop	r1
    208c:	18 95       	reti

0000208e <__vector_37>:
    208e:	1f 92       	push	r1
    2090:	0f 92       	push	r0
    2092:	0f b6       	in	r0, 0x3f	; 63
    2094:	0f 92       	push	r0
    2096:	11 24       	eor	r1, r1
    2098:	0b b6       	in	r0, 0x3b	; 59
    209a:	0f 92       	push	r0
    209c:	2f 93       	push	r18
    209e:	8f 93       	push	r24
    20a0:	9f 93       	push	r25
    20a2:	af 93       	push	r26
    20a4:	bf 93       	push	r27
    20a6:	ef 93       	push	r30
    20a8:	ff 93       	push	r31
    20aa:	e0 91 90 03 	lds	r30, 0x0390	; 0x800390 <_ser_handle+0x2>
    20ae:	f0 91 91 03 	lds	r31, 0x0391	; 0x800391 <_ser_handle+0x3>
    20b2:	30 97       	sbiw	r30, 0x00	; 0
    20b4:	b9 f0       	breq	.+46     	; 0x20e4 <__vector_37+0x56>
    20b6:	02 80       	ldd	r0, Z+2	; 0x02
    20b8:	f3 81       	ldd	r31, Z+3	; 0x03
    20ba:	e0 2d       	mov	r30, r0
    20bc:	93 81       	ldd	r25, Z+3	; 0x03
    20be:	82 81       	ldd	r24, Z+2	; 0x02
    20c0:	98 17       	cp	r25, r24
    20c2:	b1 f0       	breq	.+44     	; 0x20f0 <__vector_37+0x62>
    20c4:	92 81       	ldd	r25, Z+2	; 0x02
    20c6:	85 81       	ldd	r24, Z+5	; 0x05
    20c8:	28 2f       	mov	r18, r24
    20ca:	26 95       	lsr	r18
    20cc:	29 23       	and	r18, r25
    20ce:	a0 81       	ld	r26, Z
    20d0:	b1 81       	ldd	r27, Z+1	; 0x01
    20d2:	a2 0f       	add	r26, r18
    20d4:	b1 1d       	adc	r27, r1
    20d6:	2c 91       	ld	r18, X
    20d8:	9f 5f       	subi	r25, 0xFF	; 255
    20da:	89 23       	and	r24, r25
    20dc:	82 83       	std	Z+2, r24	; 0x02
    20de:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    20e2:	0b c0       	rjmp	.+22     	; 0x20fa <__vector_37+0x6c>
    20e4:	e9 ec       	ldi	r30, 0xC9	; 201
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	80 81       	ld	r24, Z
    20ea:	8f 7d       	andi	r24, 0xDF	; 223
    20ec:	80 83       	st	Z, r24
    20ee:	05 c0       	rjmp	.+10     	; 0x20fa <__vector_37+0x6c>
    20f0:	e9 ec       	ldi	r30, 0xC9	; 201
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	8f 7d       	andi	r24, 0xDF	; 223
    20f8:	80 83       	st	Z, r24
    20fa:	ff 91       	pop	r31
    20fc:	ef 91       	pop	r30
    20fe:	bf 91       	pop	r27
    2100:	af 91       	pop	r26
    2102:	9f 91       	pop	r25
    2104:	8f 91       	pop	r24
    2106:	2f 91       	pop	r18
    2108:	0f 90       	pop	r0
    210a:	0b be       	out	0x3b, r0	; 59
    210c:	0f 90       	pop	r0
    210e:	0f be       	out	0x3f, r0	; 63
    2110:	0f 90       	pop	r0
    2112:	1f 90       	pop	r1
    2114:	18 95       	reti

00002116 <__vector_51>:
    2116:	1f 92       	push	r1
    2118:	0f 92       	push	r0
    211a:	0f b6       	in	r0, 0x3f	; 63
    211c:	0f 92       	push	r0
    211e:	11 24       	eor	r1, r1
    2120:	0b b6       	in	r0, 0x3b	; 59
    2122:	0f 92       	push	r0
    2124:	2f 93       	push	r18
    2126:	3f 93       	push	r19
    2128:	4f 93       	push	r20
    212a:	5f 93       	push	r21
    212c:	6f 93       	push	r22
    212e:	7f 93       	push	r23
    2130:	8f 93       	push	r24
    2132:	9f 93       	push	r25
    2134:	af 93       	push	r26
    2136:	bf 93       	push	r27
    2138:	cf 93       	push	r28
    213a:	df 93       	push	r29
    213c:	ef 93       	push	r30
    213e:	ff 93       	push	r31
    2140:	a0 91 92 03 	lds	r26, 0x0392	; 0x800392 <_ser_handle+0x4>
    2144:	b0 91 93 03 	lds	r27, 0x0393	; 0x800393 <_ser_handle+0x5>
    2148:	10 97       	sbiw	r26, 0x00	; 0
    214a:	11 f1       	breq	.+68     	; 0x2190 <__vector_51+0x7a>
    214c:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    2150:	14 96       	adiw	r26, 0x04	; 4
    2152:	ed 91       	ld	r30, X+
    2154:	fc 91       	ld	r31, X
    2156:	15 97       	sbiw	r26, 0x05	; 5
    2158:	93 81       	ldd	r25, Z+3	; 0x03
    215a:	82 81       	ldd	r24, Z+2	; 0x02
    215c:	25 81       	ldd	r18, Z+5	; 0x05
    215e:	98 1b       	sub	r25, r24
    2160:	92 23       	and	r25, r18
    2162:	84 81       	ldd	r24, Z+4	; 0x04
    2164:	98 17       	cp	r25, r24
    2166:	61 f0       	breq	.+24     	; 0x2180 <__vector_51+0x6a>
    2168:	83 81       	ldd	r24, Z+3	; 0x03
    216a:	26 95       	lsr	r18
    216c:	28 23       	and	r18, r24
    216e:	c0 81       	ld	r28, Z
    2170:	d1 81       	ldd	r29, Z+1	; 0x01
    2172:	c2 0f       	add	r28, r18
    2174:	d1 1d       	adc	r29, r1
    2176:	68 83       	st	Y, r22
    2178:	8f 5f       	subi	r24, 0xFF	; 255
    217a:	95 81       	ldd	r25, Z+5	; 0x05
    217c:	89 23       	and	r24, r25
    217e:	83 83       	std	Z+3, r24	; 0x03
    2180:	16 96       	adiw	r26, 0x06	; 6
    2182:	ed 91       	ld	r30, X+
    2184:	fc 91       	ld	r31, X
    2186:	17 97       	sbiw	r26, 0x07	; 7
    2188:	30 97       	sbiw	r30, 0x00	; 0
    218a:	11 f0       	breq	.+4      	; 0x2190 <__vector_51+0x7a>
    218c:	cd 01       	movw	r24, r26
    218e:	19 95       	eicall
    2190:	ff 91       	pop	r31
    2192:	ef 91       	pop	r30
    2194:	df 91       	pop	r29
    2196:	cf 91       	pop	r28
    2198:	bf 91       	pop	r27
    219a:	af 91       	pop	r26
    219c:	9f 91       	pop	r25
    219e:	8f 91       	pop	r24
    21a0:	7f 91       	pop	r23
    21a2:	6f 91       	pop	r22
    21a4:	5f 91       	pop	r21
    21a6:	4f 91       	pop	r20
    21a8:	3f 91       	pop	r19
    21aa:	2f 91       	pop	r18
    21ac:	0f 90       	pop	r0
    21ae:	0b be       	out	0x3b, r0	; 59
    21b0:	0f 90       	pop	r0
    21b2:	0f be       	out	0x3f, r0	; 63
    21b4:	0f 90       	pop	r0
    21b6:	1f 90       	pop	r1
    21b8:	18 95       	reti

000021ba <__vector_52>:
    21ba:	1f 92       	push	r1
    21bc:	0f 92       	push	r0
    21be:	0f b6       	in	r0, 0x3f	; 63
    21c0:	0f 92       	push	r0
    21c2:	11 24       	eor	r1, r1
    21c4:	0b b6       	in	r0, 0x3b	; 59
    21c6:	0f 92       	push	r0
    21c8:	2f 93       	push	r18
    21ca:	8f 93       	push	r24
    21cc:	9f 93       	push	r25
    21ce:	af 93       	push	r26
    21d0:	bf 93       	push	r27
    21d2:	ef 93       	push	r30
    21d4:	ff 93       	push	r31
    21d6:	e0 91 92 03 	lds	r30, 0x0392	; 0x800392 <_ser_handle+0x4>
    21da:	f0 91 93 03 	lds	r31, 0x0393	; 0x800393 <_ser_handle+0x5>
    21de:	30 97       	sbiw	r30, 0x00	; 0
    21e0:	b9 f0       	breq	.+46     	; 0x2210 <__stack+0x11>
    21e2:	02 80       	ldd	r0, Z+2	; 0x02
    21e4:	f3 81       	ldd	r31, Z+3	; 0x03
    21e6:	e0 2d       	mov	r30, r0
    21e8:	93 81       	ldd	r25, Z+3	; 0x03
    21ea:	82 81       	ldd	r24, Z+2	; 0x02
    21ec:	98 17       	cp	r25, r24
    21ee:	b1 f0       	breq	.+44     	; 0x221c <__stack+0x1d>
    21f0:	92 81       	ldd	r25, Z+2	; 0x02
    21f2:	85 81       	ldd	r24, Z+5	; 0x05
    21f4:	28 2f       	mov	r18, r24
    21f6:	26 95       	lsr	r18
    21f8:	29 23       	and	r18, r25
    21fa:	a0 81       	ld	r26, Z
    21fc:	b1 81       	ldd	r27, Z+1	; 0x01
    21fe:	a2 0f       	add	r26, r18
    2200:	b1 1d       	adc	r27, r1
    2202:	2c 91       	ld	r18, X
    2204:	9f 5f       	subi	r25, 0xFF	; 255
    2206:	89 23       	and	r24, r25
    2208:	82 83       	std	Z+2, r24	; 0x02
    220a:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    220e:	0b c0       	rjmp	.+22     	; 0x2226 <__stack+0x27>
    2210:	e1 ed       	ldi	r30, 0xD1	; 209
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	8f 7d       	andi	r24, 0xDF	; 223
    2218:	80 83       	st	Z, r24
    221a:	05 c0       	rjmp	.+10     	; 0x2226 <__stack+0x27>
    221c:	e1 ed       	ldi	r30, 0xD1	; 209
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 81       	ld	r24, Z
    2222:	8f 7d       	andi	r24, 0xDF	; 223
    2224:	80 83       	st	Z, r24
    2226:	ff 91       	pop	r31
    2228:	ef 91       	pop	r30
    222a:	bf 91       	pop	r27
    222c:	af 91       	pop	r26
    222e:	9f 91       	pop	r25
    2230:	8f 91       	pop	r24
    2232:	2f 91       	pop	r18
    2234:	0f 90       	pop	r0
    2236:	0b be       	out	0x3b, r0	; 59
    2238:	0f 90       	pop	r0
    223a:	0f be       	out	0x3f, r0	; 63
    223c:	0f 90       	pop	r0
    223e:	1f 90       	pop	r1
    2240:	18 95       	reti

00002242 <__vector_54>:
    2242:	1f 92       	push	r1
    2244:	0f 92       	push	r0
    2246:	0f b6       	in	r0, 0x3f	; 63
    2248:	0f 92       	push	r0
    224a:	11 24       	eor	r1, r1
    224c:	0b b6       	in	r0, 0x3b	; 59
    224e:	0f 92       	push	r0
    2250:	2f 93       	push	r18
    2252:	3f 93       	push	r19
    2254:	4f 93       	push	r20
    2256:	5f 93       	push	r21
    2258:	6f 93       	push	r22
    225a:	7f 93       	push	r23
    225c:	8f 93       	push	r24
    225e:	9f 93       	push	r25
    2260:	af 93       	push	r26
    2262:	bf 93       	push	r27
    2264:	cf 93       	push	r28
    2266:	df 93       	push	r29
    2268:	ef 93       	push	r30
    226a:	ff 93       	push	r31
    226c:	a0 91 94 03 	lds	r26, 0x0394	; 0x800394 <_ser_handle+0x6>
    2270:	b0 91 95 03 	lds	r27, 0x0395	; 0x800395 <_ser_handle+0x7>
    2274:	10 97       	sbiw	r26, 0x00	; 0
    2276:	11 f1       	breq	.+68     	; 0x22bc <__vector_54+0x7a>
    2278:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    227c:	14 96       	adiw	r26, 0x04	; 4
    227e:	ed 91       	ld	r30, X+
    2280:	fc 91       	ld	r31, X
    2282:	15 97       	sbiw	r26, 0x05	; 5
    2284:	93 81       	ldd	r25, Z+3	; 0x03
    2286:	82 81       	ldd	r24, Z+2	; 0x02
    2288:	25 81       	ldd	r18, Z+5	; 0x05
    228a:	98 1b       	sub	r25, r24
    228c:	92 23       	and	r25, r18
    228e:	84 81       	ldd	r24, Z+4	; 0x04
    2290:	98 17       	cp	r25, r24
    2292:	61 f0       	breq	.+24     	; 0x22ac <__vector_54+0x6a>
    2294:	83 81       	ldd	r24, Z+3	; 0x03
    2296:	26 95       	lsr	r18
    2298:	28 23       	and	r18, r24
    229a:	c0 81       	ld	r28, Z
    229c:	d1 81       	ldd	r29, Z+1	; 0x01
    229e:	c2 0f       	add	r28, r18
    22a0:	d1 1d       	adc	r29, r1
    22a2:	68 83       	st	Y, r22
    22a4:	8f 5f       	subi	r24, 0xFF	; 255
    22a6:	95 81       	ldd	r25, Z+5	; 0x05
    22a8:	89 23       	and	r24, r25
    22aa:	83 83       	std	Z+3, r24	; 0x03
    22ac:	16 96       	adiw	r26, 0x06	; 6
    22ae:	ed 91       	ld	r30, X+
    22b0:	fc 91       	ld	r31, X
    22b2:	17 97       	sbiw	r26, 0x07	; 7
    22b4:	30 97       	sbiw	r30, 0x00	; 0
    22b6:	11 f0       	breq	.+4      	; 0x22bc <__vector_54+0x7a>
    22b8:	cd 01       	movw	r24, r26
    22ba:	19 95       	eicall
    22bc:	ff 91       	pop	r31
    22be:	ef 91       	pop	r30
    22c0:	df 91       	pop	r29
    22c2:	cf 91       	pop	r28
    22c4:	bf 91       	pop	r27
    22c6:	af 91       	pop	r26
    22c8:	9f 91       	pop	r25
    22ca:	8f 91       	pop	r24
    22cc:	7f 91       	pop	r23
    22ce:	6f 91       	pop	r22
    22d0:	5f 91       	pop	r21
    22d2:	4f 91       	pop	r20
    22d4:	3f 91       	pop	r19
    22d6:	2f 91       	pop	r18
    22d8:	0f 90       	pop	r0
    22da:	0b be       	out	0x3b, r0	; 59
    22dc:	0f 90       	pop	r0
    22de:	0f be       	out	0x3f, r0	; 63
    22e0:	0f 90       	pop	r0
    22e2:	1f 90       	pop	r1
    22e4:	18 95       	reti

000022e6 <__vector_55>:
    22e6:	1f 92       	push	r1
    22e8:	0f 92       	push	r0
    22ea:	0f b6       	in	r0, 0x3f	; 63
    22ec:	0f 92       	push	r0
    22ee:	11 24       	eor	r1, r1
    22f0:	0b b6       	in	r0, 0x3b	; 59
    22f2:	0f 92       	push	r0
    22f4:	2f 93       	push	r18
    22f6:	8f 93       	push	r24
    22f8:	9f 93       	push	r25
    22fa:	af 93       	push	r26
    22fc:	bf 93       	push	r27
    22fe:	ef 93       	push	r30
    2300:	ff 93       	push	r31
    2302:	e0 91 94 03 	lds	r30, 0x0394	; 0x800394 <_ser_handle+0x6>
    2306:	f0 91 95 03 	lds	r31, 0x0395	; 0x800395 <_ser_handle+0x7>
    230a:	30 97       	sbiw	r30, 0x00	; 0
    230c:	b9 f0       	breq	.+46     	; 0x233c <__vector_55+0x56>
    230e:	02 80       	ldd	r0, Z+2	; 0x02
    2310:	f3 81       	ldd	r31, Z+3	; 0x03
    2312:	e0 2d       	mov	r30, r0
    2314:	93 81       	ldd	r25, Z+3	; 0x03
    2316:	82 81       	ldd	r24, Z+2	; 0x02
    2318:	98 17       	cp	r25, r24
    231a:	b1 f0       	breq	.+44     	; 0x2348 <__vector_55+0x62>
    231c:	92 81       	ldd	r25, Z+2	; 0x02
    231e:	85 81       	ldd	r24, Z+5	; 0x05
    2320:	28 2f       	mov	r18, r24
    2322:	26 95       	lsr	r18
    2324:	29 23       	and	r18, r25
    2326:	a0 81       	ld	r26, Z
    2328:	b1 81       	ldd	r27, Z+1	; 0x01
    232a:	a2 0f       	add	r26, r18
    232c:	b1 1d       	adc	r27, r1
    232e:	2c 91       	ld	r18, X
    2330:	9f 5f       	subi	r25, 0xFF	; 255
    2332:	89 23       	and	r24, r25
    2334:	82 83       	std	Z+2, r24	; 0x02
    2336:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    233a:	0b c0       	rjmp	.+22     	; 0x2352 <__vector_55+0x6c>
    233c:	e1 e3       	ldi	r30, 0x31	; 49
    233e:	f1 e0       	ldi	r31, 0x01	; 1
    2340:	80 81       	ld	r24, Z
    2342:	8f 7d       	andi	r24, 0xDF	; 223
    2344:	80 83       	st	Z, r24
    2346:	05 c0       	rjmp	.+10     	; 0x2352 <__vector_55+0x6c>
    2348:	e1 e3       	ldi	r30, 0x31	; 49
    234a:	f1 e0       	ldi	r31, 0x01	; 1
    234c:	80 81       	ld	r24, Z
    234e:	8f 7d       	andi	r24, 0xDF	; 223
    2350:	80 83       	st	Z, r24
    2352:	ff 91       	pop	r31
    2354:	ef 91       	pop	r30
    2356:	bf 91       	pop	r27
    2358:	af 91       	pop	r26
    235a:	9f 91       	pop	r25
    235c:	8f 91       	pop	r24
    235e:	2f 91       	pop	r18
    2360:	0f 90       	pop	r0
    2362:	0b be       	out	0x3b, r0	; 59
    2364:	0f 90       	pop	r0
    2366:	0f be       	out	0x3f, r0	; 63
    2368:	0f 90       	pop	r0
    236a:	1f 90       	pop	r1
    236c:	18 95       	reti

0000236e <fifo_init>:
    236e:	fc 01       	movw	r30, r24
    2370:	41 11       	cpse	r20, r1
    2372:	01 c0       	rjmp	.+2      	; 0x2376 <fifo_init+0x8>
    2374:	fb d5       	rcall	.+3062   	; 0x2f6c <abort>
    2376:	84 2f       	mov	r24, r20
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	9c 01       	movw	r18, r24
    237c:	21 50       	subi	r18, 0x01	; 1
    237e:	31 09       	sbc	r19, r1
    2380:	82 23       	and	r24, r18
    2382:	93 23       	and	r25, r19
    2384:	89 2b       	or	r24, r25
    2386:	09 f0       	breq	.+2      	; 0x238a <fifo_init+0x1c>
    2388:	f1 d5       	rcall	.+3042   	; 0x2f6c <abort>
    238a:	41 38       	cpi	r20, 0x81	; 129
    238c:	08 f0       	brcs	.+2      	; 0x2390 <fifo_init+0x22>
    238e:	ee d5       	rcall	.+3036   	; 0x2f6c <abort>
    2390:	12 82       	std	Z+2, r1	; 0x02
    2392:	13 82       	std	Z+3, r1	; 0x03
    2394:	44 83       	std	Z+4, r20	; 0x04
    2396:	44 0f       	add	r20, r20
    2398:	41 50       	subi	r20, 0x01	; 1
    239a:	45 83       	std	Z+5, r20	; 0x05
    239c:	71 83       	std	Z+1, r23	; 0x01
    239e:	60 83       	st	Z, r22
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	08 95       	ret

000023a6 <_hihTwiCallback>:
    23a6:	65 30       	cpi	r22, 0x05	; 5
    23a8:	f1 f4       	brne	.+60     	; 0x23e6 <_hihTwiCallback+0x40>
    23aa:	fa 01       	movw	r30, r20
    23ac:	80 81       	ld	r24, Z
    23ae:	8f 73       	andi	r24, 0x3F	; 63
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	98 2f       	mov	r25, r24
    23b4:	88 27       	eor	r24, r24
    23b6:	21 81       	ldd	r18, Z+1	; 0x01
    23b8:	82 2b       	or	r24, r18
    23ba:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <_hum+0x1>
    23be:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <_hum>
    23c2:	82 81       	ldd	r24, Z+2	; 0x02
    23c4:	f0 e4       	ldi	r31, 0x40	; 64
    23c6:	8f 9f       	mul	r24, r31
    23c8:	c0 01       	movw	r24, r0
    23ca:	11 24       	eor	r1, r1
    23cc:	fa 01       	movw	r30, r20
    23ce:	23 81       	ldd	r18, Z+3	; 0x03
    23d0:	26 95       	lsr	r18
    23d2:	26 95       	lsr	r18
    23d4:	82 2b       	or	r24, r18
    23d6:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <_temp+0x1>
    23da:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_temp>
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <_measuringIsReady>
    23e4:	08 95       	ret
    23e6:	64 30       	cpi	r22, 0x04	; 4
    23e8:	51 f0       	breq	.+20     	; 0x23fe <_hihTwiCallback+0x58>
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	90 e4       	ldi	r25, 0x40	; 64
    23ee:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <_temp+0x1>
    23f2:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_temp>
    23f6:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <_hum+0x1>
    23fa:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <_hum>
    23fe:	08 95       	ret

00002400 <hih8120Create>:
    2400:	0f 93       	push	r16
    2402:	1f 93       	push	r17
    2404:	03 ed       	ldi	r16, 0xD3	; 211
    2406:	11 e1       	ldi	r17, 0x11	; 17
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	34 e2       	ldi	r19, 0x24	; 36
    240c:	44 ef       	ldi	r20, 0xF4	; 244
    240e:	50 e0       	ldi	r21, 0x00	; 0
    2410:	60 e0       	ldi	r22, 0x00	; 0
    2412:	87 e2       	ldi	r24, 0x27	; 39
    2414:	22 d1       	rcall	.+580    	; 0x265a <twiCreate>
    2416:	90 93 98 03 	sts	0x0398, r25	; 0x800398 <_hih8120Handler+0x1>
    241a:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <_hih8120Handler>
    241e:	21 e0       	ldi	r18, 0x01	; 1
    2420:	89 2b       	or	r24, r25
    2422:	09 f0       	breq	.+2      	; 0x2426 <hih8120Create+0x26>
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	82 2f       	mov	r24, r18
    2428:	1f 91       	pop	r17
    242a:	0f 91       	pop	r16
    242c:	08 95       	ret

0000242e <hih8120Wakeup>:
    242e:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <_hih8120Handler>
    2432:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <_hih8120Handler+0x1>
    2436:	00 97       	sbiw	r24, 0x00	; 0
    2438:	51 f0       	breq	.+20     	; 0x244e <hih8120Wakeup+0x20>
    243a:	40 e0       	ldi	r20, 0x00	; 0
    243c:	60 e0       	ldi	r22, 0x00	; 0
    243e:	70 e0       	ldi	r23, 0x00	; 0
    2440:	5d d1       	rcall	.+698    	; 0x26fc <twiTransmit>
    2442:	84 30       	cpi	r24, 0x04	; 4
    2444:	31 f4       	brne	.+12     	; 0x2452 <hih8120Wakeup+0x24>
    2446:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <_measuringIsReady>
    244a:	80 e0       	ldi	r24, 0x00	; 0
    244c:	08 95       	ret
    244e:	82 e0       	ldi	r24, 0x02	; 2
    2450:	08 95       	ret
    2452:	83 e0       	ldi	r24, 0x03	; 3
    2454:	08 95       	ret

00002456 <hih8120Meassure>:
    2456:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <_hih8120Handler>
    245a:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <_hih8120Handler+0x1>
    245e:	00 97       	sbiw	r24, 0x00	; 0
    2460:	31 f0       	breq	.+12     	; 0x246e <hih8120Meassure+0x18>
    2462:	64 e0       	ldi	r22, 0x04	; 4
    2464:	96 d1       	rcall	.+812    	; 0x2792 <twiReceive>
    2466:	85 30       	cpi	r24, 0x05	; 5
    2468:	21 f0       	breq	.+8      	; 0x2472 <hih8120Meassure+0x1c>
    246a:	83 e0       	ldi	r24, 0x03	; 3
    246c:	08 95       	ret
    246e:	82 e0       	ldi	r24, 0x02	; 2
    2470:	08 95       	ret
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	08 95       	ret

00002476 <hih8120GetHumidity>:
    2476:	60 91 1e 02 	lds	r22, 0x021E	; 0x80021e <_hum>
    247a:	70 91 1f 02 	lds	r23, 0x021F	; 0x80021f <_hum+0x1>
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	44 d3       	rcall	.+1672   	; 0x2b0c <__floatunsisf>
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	48 ec       	ldi	r20, 0xC8	; 200
    248a:	52 e4       	ldi	r21, 0x42	; 66
    248c:	a4 d3       	rcall	.+1864   	; 0x2bd6 <__mulsf3>
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	38 ef       	ldi	r19, 0xF8	; 248
    2492:	4f e7       	ldi	r20, 0x7F	; 127
    2494:	56 e4       	ldi	r21, 0x46	; 70
    2496:	d2 c2       	rjmp	.+1444   	; 0x2a3c <__divsf3>
    2498:	08 95       	ret

0000249a <hih8120GetTemperature>:
    249a:	60 91 1c 02 	lds	r22, 0x021C	; 0x80021c <_temp>
    249e:	70 91 1d 02 	lds	r23, 0x021D	; 0x80021d <_temp+0x1>
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	32 d3       	rcall	.+1636   	; 0x2b0c <__floatunsisf>
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	45 e2       	ldi	r20, 0x25	; 37
    24ae:	53 e4       	ldi	r21, 0x43	; 67
    24b0:	92 d3       	rcall	.+1828   	; 0x2bd6 <__mulsf3>
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	38 ef       	ldi	r19, 0xF8	; 248
    24b6:	4f e7       	ldi	r20, 0x7F	; 127
    24b8:	56 e4       	ldi	r21, 0x46	; 70
    24ba:	c0 d2       	rcall	.+1408   	; 0x2a3c <__divsf3>
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	40 e2       	ldi	r20, 0x20	; 32
    24c2:	52 e4       	ldi	r21, 0x42	; 66
    24c4:	56 c2       	rjmp	.+1196   	; 0x2972 <__subsf3>
    24c6:	08 95       	ret

000024c8 <_serial_call_back>:
    24c8:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <crc_sum.1941>
    24cc:	86 0f       	add	r24, r22
    24ce:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <crc_sum.1941>
    24d2:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <_mh_state>
    24d6:	91 30       	cpi	r25, 0x01	; 1
    24d8:	79 f0       	breq	.+30     	; 0x24f8 <_serial_call_back+0x30>
    24da:	28 f0       	brcs	.+10     	; 0x24e6 <_serial_call_back+0x1e>
    24dc:	92 30       	cpi	r25, 0x02	; 2
    24de:	a9 f0       	breq	.+42     	; 0x250a <_serial_call_back+0x42>
    24e0:	93 30       	cpi	r25, 0x03	; 3
    24e2:	19 f1       	breq	.+70     	; 0x252a <_serial_call_back+0x62>
    24e4:	08 95       	ret
    24e6:	6f 3f       	cpi	r22, 0xFF	; 255
    24e8:	09 f0       	breq	.+2      	; 0x24ec <_serial_call_back+0x24>
    24ea:	48 c0       	rjmp	.+144    	; 0x257c <_serial_call_back+0xb4>
    24ec:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <crc_sum.1941>
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <_mh_state>
    24f6:	08 95       	ret
    24f8:	66 38       	cpi	r22, 0x86	; 134
    24fa:	09 f0       	breq	.+2      	; 0x24fe <_serial_call_back+0x36>
    24fc:	3f c0       	rjmp	.+126    	; 0x257c <_serial_call_back+0xb4>
    24fe:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <inDex.1939>
    2502:	82 e0       	ldi	r24, 0x02	; 2
    2504:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <_mh_state>
    2508:	08 95       	ret
    250a:	e0 91 9b 03 	lds	r30, 0x039B	; 0x80039b <inDex.1939>
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	8e 0f       	add	r24, r30
    2512:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <inDex.1939>
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	e7 56       	subi	r30, 0x67	; 103
    251a:	fc 4f       	sbci	r31, 0xFC	; 252
    251c:	60 83       	st	Z, r22
    251e:	82 30       	cpi	r24, 0x02	; 2
    2520:	69 f5       	brne	.+90     	; 0x257c <_serial_call_back+0xb4>
    2522:	83 e0       	ldi	r24, 0x03	; 3
    2524:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <_mh_state>
    2528:	08 95       	ret
    252a:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <inDex.1939>
    252e:	21 e0       	ldi	r18, 0x01	; 1
    2530:	29 0f       	add	r18, r25
    2532:	20 93 9b 03 	sts	0x039B, r18	; 0x80039b <inDex.1939>
    2536:	96 30       	cpi	r25, 0x06	; 6
    2538:	09 f5       	brne	.+66     	; 0x257c <_serial_call_back+0xb4>
    253a:	81 11       	cpse	r24, r1
    253c:	0e c0       	rjmp	.+28     	; 0x255a <_serial_call_back+0x92>
    253e:	e9 e9       	ldi	r30, 0x99	; 153
    2540:	f3 e0       	ldi	r31, 0x03	; 3
    2542:	80 81       	ld	r24, Z
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	98 2f       	mov	r25, r24
    2548:	88 27       	eor	r24, r24
    254a:	21 81       	ldd	r18, Z+1	; 0x01
    254c:	82 0f       	add	r24, r18
    254e:	91 1d       	adc	r25, r1
    2550:	90 93 a1 03 	sts	0x03A1, r25	; 0x8003a1 <_ppm+0x1>
    2554:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <_ppm>
    2558:	04 c0       	rjmp	.+8      	; 0x2562 <_serial_call_back+0x9a>
    255a:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <_ppm+0x1>
    255e:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <_ppm>
    2562:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <_mh_state>
    2566:	e0 91 9d 03 	lds	r30, 0x039D	; 0x80039d <_app_call_back>
    256a:	f0 91 9e 03 	lds	r31, 0x039E	; 0x80039e <_app_call_back+0x1>
    256e:	30 97       	sbiw	r30, 0x00	; 0
    2570:	29 f0       	breq	.+10     	; 0x257c <_serial_call_back+0xb4>
    2572:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <_ppm>
    2576:	90 91 a1 03 	lds	r25, 0x03A1	; 0x8003a1 <_ppm+0x1>
    257a:	19 95       	eicall
    257c:	08 95       	ret

0000257e <mh_z19_create>:
    257e:	8f 92       	push	r8
    2580:	9f 92       	push	r9
    2582:	af 92       	push	r10
    2584:	cf 92       	push	r12
    2586:	ef 92       	push	r14
    2588:	0f 93       	push	r16
    258a:	cf 93       	push	r28
    258c:	df 93       	push	r29
    258e:	eb 01       	movw	r28, r22
    2590:	0f 2e       	mov	r0, r31
    2592:	f4 e6       	ldi	r31, 0x64	; 100
    2594:	8f 2e       	mov	r8, r31
    2596:	f2 e1       	ldi	r31, 0x12	; 18
    2598:	9f 2e       	mov	r9, r31
    259a:	f0 2d       	mov	r31, r0
    259c:	68 94       	set
    259e:	aa 24       	eor	r10, r10
    25a0:	a4 f8       	bld	r10, 4
    25a2:	68 94       	set
    25a4:	cc 24       	eor	r12, r12
    25a6:	c4 f8       	bld	r12, 4
    25a8:	e1 2c       	mov	r14, r1
    25aa:	00 e0       	ldi	r16, 0x00	; 0
    25ac:	23 e0       	ldi	r18, 0x03	; 3
    25ae:	40 e8       	ldi	r20, 0x80	; 128
    25b0:	55 e2       	ldi	r21, 0x25	; 37
    25b2:	60 e0       	ldi	r22, 0x00	; 0
    25b4:	70 e0       	ldi	r23, 0x00	; 0
    25b6:	58 db       	rcall	.-2384   	; 0x1c68 <serial_new_instance>
    25b8:	90 93 a3 03 	sts	0x03A3, r25	; 0x8003a3 <_serial+0x1>
    25bc:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <_serial>
    25c0:	d0 93 9e 03 	sts	0x039E, r29	; 0x80039e <_app_call_back+0x1>
    25c4:	c0 93 9d 03 	sts	0x039D, r28	; 0x80039d <_app_call_back>
    25c8:	df 91       	pop	r29
    25ca:	cf 91       	pop	r28
    25cc:	0f 91       	pop	r16
    25ce:	ef 90       	pop	r14
    25d0:	cf 90       	pop	r12
    25d2:	af 90       	pop	r10
    25d4:	9f 90       	pop	r9
    25d6:	8f 90       	pop	r8
    25d8:	08 95       	ret

000025da <mh_z19_take_meassuring>:
    25da:	cf 93       	push	r28
    25dc:	df 93       	push	r29
    25de:	cd b7       	in	r28, 0x3d	; 61
    25e0:	de b7       	in	r29, 0x3e	; 62
    25e2:	29 97       	sbiw	r28, 0x09	; 9
    25e4:	0f b6       	in	r0, 0x3f	; 63
    25e6:	f8 94       	cli
    25e8:	de bf       	out	0x3e, r29	; 62
    25ea:	0f be       	out	0x3f, r0	; 63
    25ec:	cd bf       	out	0x3d, r28	; 61
    25ee:	89 e0       	ldi	r24, 0x09	; 9
    25f0:	e1 e2       	ldi	r30, 0x21	; 33
    25f2:	f2 e0       	ldi	r31, 0x02	; 2
    25f4:	9e 01       	movw	r18, r28
    25f6:	2f 5f       	subi	r18, 0xFF	; 255
    25f8:	3f 4f       	sbci	r19, 0xFF	; 255
    25fa:	d9 01       	movw	r26, r18
    25fc:	01 90       	ld	r0, Z+
    25fe:	0d 92       	st	X+, r0
    2600:	8a 95       	dec	r24
    2602:	e1 f7       	brne	.-8      	; 0x25fc <mh_z19_take_meassuring+0x22>
    2604:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <_ppm+0x1>
    2608:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <_ppm>
    260c:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <_serial>
    2610:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <_serial+0x1>
    2614:	00 97       	sbiw	r24, 0x00	; 0
    2616:	31 f0       	breq	.+12     	; 0x2624 <mh_z19_take_meassuring+0x4a>
    2618:	42 2f       	mov	r20, r18
    261a:	53 2f       	mov	r21, r19
    261c:	69 e0       	ldi	r22, 0x09	; 9
    261e:	e3 db       	rcall	.-2106   	; 0x1de6 <serial_send_bytes>
    2620:	80 e0       	ldi	r24, 0x00	; 0
    2622:	01 c0       	rjmp	.+2      	; 0x2626 <mh_z19_take_meassuring+0x4c>
    2624:	82 e0       	ldi	r24, 0x02	; 2
    2626:	29 96       	adiw	r28, 0x09	; 9
    2628:	0f b6       	in	r0, 0x3f	; 63
    262a:	f8 94       	cli
    262c:	de bf       	out	0x3e, r29	; 62
    262e:	0f be       	out	0x3f, r0	; 63
    2630:	cd bf       	out	0x3d, r28	; 61
    2632:	df 91       	pop	r29
    2634:	cf 91       	pop	r28
    2636:	08 95       	ret

00002638 <_initTwiInterface>:
    2638:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <_twiIsInitiated>
    263c:	81 11       	cpse	r24, r1
    263e:	0c c0       	rjmp	.+24     	; 0x2658 <_initTwiInterface+0x20>
    2640:	8c e0       	ldi	r24, 0x0C	; 12
    2642:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    2646:	8f ef       	ldi	r24, 0xFF	; 255
    2648:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    264c:	84 e0       	ldi	r24, 0x04	; 4
    264e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <_twiIsInitiated>
    2658:	08 95       	ret

0000265a <twiCreate>:
    265a:	af 92       	push	r10
    265c:	bf 92       	push	r11
    265e:	cf 92       	push	r12
    2660:	df 92       	push	r13
    2662:	ef 92       	push	r14
    2664:	ff 92       	push	r15
    2666:	0f 93       	push	r16
    2668:	1f 93       	push	r17
    266a:	cf 93       	push	r28
    266c:	df 93       	push	r29
    266e:	a8 2e       	mov	r10, r24
    2670:	b6 2e       	mov	r11, r22
    2672:	69 01       	movw	r12, r18
    2674:	7a 01       	movw	r14, r20
    2676:	84 e0       	ldi	r24, 0x04	; 4
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	57 d3       	rcall	.+1710   	; 0x2d2a <malloc>
    267c:	ec 01       	movw	r28, r24
    267e:	89 2b       	or	r24, r25
    2680:	61 f1       	breq	.+88     	; 0x26da <twiCreate+0x80>
    2682:	a8 82       	st	Y, r10
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	b8 12       	cpse	r11, r24
    2688:	12 c0       	rjmp	.+36     	; 0x26ae <twiCreate+0x54>
    268a:	c7 01       	movw	r24, r14
    268c:	b6 01       	movw	r22, r12
    268e:	20 ea       	ldi	r18, 0xA0	; 160
    2690:	36 e8       	ldi	r19, 0x86	; 134
    2692:	41 e0       	ldi	r20, 0x01	; 1
    2694:	50 e0       	ldi	r21, 0x00	; 0
    2696:	05 d3       	rcall	.+1546   	; 0x2ca2 <__udivmodsi4>
    2698:	da 01       	movw	r26, r20
    269a:	c9 01       	movw	r24, r18
    269c:	40 97       	sbiw	r24, 0x10	; 16
    269e:	a1 09       	sbc	r26, r1
    26a0:	b1 09       	sbc	r27, r1
    26a2:	b6 95       	lsr	r27
    26a4:	a7 95       	ror	r26
    26a6:	97 95       	ror	r25
    26a8:	87 95       	ror	r24
    26aa:	89 83       	std	Y+1, r24	; 0x01
    26ac:	11 c0       	rjmp	.+34     	; 0x26d0 <twiCreate+0x76>
    26ae:	c7 01       	movw	r24, r14
    26b0:	b6 01       	movw	r22, r12
    26b2:	20 e8       	ldi	r18, 0x80	; 128
    26b4:	3a e1       	ldi	r19, 0x1A	; 26
    26b6:	46 e0       	ldi	r20, 0x06	; 6
    26b8:	50 e0       	ldi	r21, 0x00	; 0
    26ba:	f3 d2       	rcall	.+1510   	; 0x2ca2 <__udivmodsi4>
    26bc:	da 01       	movw	r26, r20
    26be:	c9 01       	movw	r24, r18
    26c0:	40 97       	sbiw	r24, 0x10	; 16
    26c2:	a1 09       	sbc	r26, r1
    26c4:	b1 09       	sbc	r27, r1
    26c6:	b6 95       	lsr	r27
    26c8:	a7 95       	ror	r26
    26ca:	97 95       	ror	r25
    26cc:	87 95       	ror	r24
    26ce:	89 83       	std	Y+1, r24	; 0x01
    26d0:	1b 83       	std	Y+3, r17	; 0x03
    26d2:	0a 83       	std	Y+2, r16	; 0x02
    26d4:	8c 2f       	mov	r24, r28
    26d6:	9d 2f       	mov	r25, r29
    26d8:	02 c0       	rjmp	.+4      	; 0x26de <twiCreate+0x84>
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	df 91       	pop	r29
    26e0:	cf 91       	pop	r28
    26e2:	1f 91       	pop	r17
    26e4:	0f 91       	pop	r16
    26e6:	ff 90       	pop	r15
    26e8:	ef 90       	pop	r14
    26ea:	df 90       	pop	r13
    26ec:	cf 90       	pop	r12
    26ee:	bf 90       	pop	r11
    26f0:	af 90       	pop	r10
    26f2:	08 95       	ret

000026f4 <twiIsBusy>:
    26f4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    26f8:	81 70       	andi	r24, 0x01	; 1
    26fa:	08 95       	ret

000026fc <twiTransmit>:
    26fc:	ff 92       	push	r15
    26fe:	0f 93       	push	r16
    2700:	1f 93       	push	r17
    2702:	cf 93       	push	r28
    2704:	df 93       	push	r29
    2706:	00 97       	sbiw	r24, 0x00	; 0
    2708:	c9 f1       	breq	.+114    	; 0x277c <twiTransmit+0x80>
    270a:	4a 30       	cpi	r20, 0x0A	; 10
    270c:	c8 f5       	brcc	.+114    	; 0x2780 <twiTransmit+0x84>
    270e:	f4 2e       	mov	r15, r20
    2710:	8b 01       	movw	r16, r22
    2712:	ec 01       	movw	r28, r24
    2714:	ef df       	rcall	.-34     	; 0x26f4 <twiIsBusy>
    2716:	81 11       	cpse	r24, r1
    2718:	35 c0       	rjmp	.+106    	; 0x2784 <twiTransmit+0x88>
    271a:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <_twiCurrentHandler>
    271e:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <_twiCurrentHandler+0x1>
    2722:	c8 17       	cp	r28, r24
    2724:	d9 07       	cpc	r29, r25
    2726:	41 f0       	breq	.+16     	; 0x2738 <twiTransmit+0x3c>
    2728:	87 df       	rcall	.-242    	; 0x2638 <_initTwiInterface>
    272a:	89 81       	ldd	r24, Y+1	; 0x01
    272c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    2730:	d0 93 a6 03 	sts	0x03A6, r29	; 0x8003a6 <_twiCurrentHandler+0x1>
    2734:	c0 93 a5 03 	sts	0x03A5, r28	; 0x8003a5 <_twiCurrentHandler>
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	8f 0d       	add	r24, r15
    273c:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <_twiMessageLen>
    2740:	88 81       	ld	r24, Y
    2742:	88 0f       	add	r24, r24
    2744:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <_twiMessageBuffer>
    2748:	ff 20       	and	r15, r15
    274a:	81 f0       	breq	.+32     	; 0x276c <twiTransmit+0x70>
    274c:	f8 01       	movw	r30, r16
    274e:	a9 ea       	ldi	r26, 0xA9	; 169
    2750:	b3 e0       	ldi	r27, 0x03	; 3
    2752:	4f ef       	ldi	r20, 0xFF	; 255
    2754:	4f 0d       	add	r20, r15
    2756:	64 2f       	mov	r22, r20
    2758:	70 e0       	ldi	r23, 0x00	; 0
    275a:	6f 5f       	subi	r22, 0xFF	; 255
    275c:	7f 4f       	sbci	r23, 0xFF	; 255
    275e:	60 0f       	add	r22, r16
    2760:	71 1f       	adc	r23, r17
    2762:	81 91       	ld	r24, Z+
    2764:	8d 93       	st	X+, r24
    2766:	e6 17       	cp	r30, r22
    2768:	f7 07       	cpc	r31, r23
    276a:	d9 f7       	brne	.-10     	; 0x2762 <twiTransmit+0x66>
    276c:	88 ef       	ldi	r24, 0xF8	; 248
    276e:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    2772:	85 ea       	ldi	r24, 0xA5	; 165
    2774:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2778:	81 e0       	ldi	r24, 0x01	; 1
    277a:	05 c0       	rjmp	.+10     	; 0x2786 <twiTransmit+0x8a>
    277c:	86 e0       	ldi	r24, 0x06	; 6
    277e:	03 c0       	rjmp	.+6      	; 0x2786 <twiTransmit+0x8a>
    2780:	87 e0       	ldi	r24, 0x07	; 7
    2782:	01 c0       	rjmp	.+2      	; 0x2786 <twiTransmit+0x8a>
    2784:	82 e0       	ldi	r24, 0x02	; 2
    2786:	df 91       	pop	r29
    2788:	cf 91       	pop	r28
    278a:	1f 91       	pop	r17
    278c:	0f 91       	pop	r16
    278e:	ff 90       	pop	r15
    2790:	08 95       	ret

00002792 <twiReceive>:
    2792:	1f 93       	push	r17
    2794:	cf 93       	push	r28
    2796:	df 93       	push	r29
    2798:	00 97       	sbiw	r24, 0x00	; 0
    279a:	29 f1       	breq	.+74     	; 0x27e6 <twiReceive+0x54>
    279c:	6b 30       	cpi	r22, 0x0B	; 11
    279e:	28 f5       	brcc	.+74     	; 0x27ea <twiReceive+0x58>
    27a0:	16 2f       	mov	r17, r22
    27a2:	ec 01       	movw	r28, r24
    27a4:	a7 df       	rcall	.-178    	; 0x26f4 <twiIsBusy>
    27a6:	81 11       	cpse	r24, r1
    27a8:	22 c0       	rjmp	.+68     	; 0x27ee <twiReceive+0x5c>
    27aa:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <_twiCurrentHandler>
    27ae:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <_twiCurrentHandler+0x1>
    27b2:	c8 17       	cp	r28, r24
    27b4:	d9 07       	cpc	r29, r25
    27b6:	41 f0       	breq	.+16     	; 0x27c8 <twiReceive+0x36>
    27b8:	3f df       	rcall	.-386    	; 0x2638 <_initTwiInterface>
    27ba:	89 81       	ldd	r24, Y+1	; 0x01
    27bc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    27c0:	d0 93 a6 03 	sts	0x03A6, r29	; 0x8003a6 <_twiCurrentHandler+0x1>
    27c4:	c0 93 a5 03 	sts	0x03A5, r28	; 0x8003a5 <_twiCurrentHandler>
    27c8:	10 93 a7 03 	sts	0x03A7, r17	; 0x8003a7 <_twiMessageLen>
    27cc:	88 81       	ld	r24, Y
    27ce:	88 0f       	add	r24, r24
    27d0:	81 60       	ori	r24, 0x01	; 1
    27d2:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <_twiMessageBuffer>
    27d6:	88 ef       	ldi	r24, 0xF8	; 248
    27d8:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    27dc:	85 ea       	ldi	r24, 0xA5	; 165
    27de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	05 c0       	rjmp	.+10     	; 0x27f0 <twiReceive+0x5e>
    27e6:	86 e0       	ldi	r24, 0x06	; 6
    27e8:	03 c0       	rjmp	.+6      	; 0x27f0 <twiReceive+0x5e>
    27ea:	87 e0       	ldi	r24, 0x07	; 7
    27ec:	01 c0       	rjmp	.+2      	; 0x27f0 <twiReceive+0x5e>
    27ee:	82 e0       	ldi	r24, 0x02	; 2
    27f0:	df 91       	pop	r29
    27f2:	cf 91       	pop	r28
    27f4:	1f 91       	pop	r17
    27f6:	08 95       	ret

000027f8 <__vector_39>:
    27f8:	1f 92       	push	r1
    27fa:	0f 92       	push	r0
    27fc:	0f b6       	in	r0, 0x3f	; 63
    27fe:	0f 92       	push	r0
    2800:	11 24       	eor	r1, r1
    2802:	0b b6       	in	r0, 0x3b	; 59
    2804:	0f 92       	push	r0
    2806:	2f 93       	push	r18
    2808:	3f 93       	push	r19
    280a:	4f 93       	push	r20
    280c:	5f 93       	push	r21
    280e:	6f 93       	push	r22
    2810:	7f 93       	push	r23
    2812:	8f 93       	push	r24
    2814:	9f 93       	push	r25
    2816:	af 93       	push	r26
    2818:	bf 93       	push	r27
    281a:	ef 93       	push	r30
    281c:	ff 93       	push	r31
    281e:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2822:	8e 2f       	mov	r24, r30
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	fc 01       	movw	r30, r24
    2828:	38 97       	sbiw	r30, 0x08	; 8
    282a:	e1 35       	cpi	r30, 0x51	; 81
    282c:	f1 05       	cpc	r31, r1
    282e:	08 f0       	brcs	.+2      	; 0x2832 <__vector_39+0x3a>
    2830:	75 c0       	rjmp	.+234    	; 0x291c <__vector_39+0x124>
    2832:	88 27       	eor	r24, r24
    2834:	e4 58       	subi	r30, 0x84	; 132
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	8f 4f       	sbci	r24, 0xFF	; 255
    283a:	55 c2       	rjmp	.+1194   	; 0x2ce6 <__tablejump2__>
    283c:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <_index.1885>
    2840:	e0 91 a4 03 	lds	r30, 0x03A4	; 0x8003a4 <_index.1885>
    2844:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <_twiMessageLen>
    2848:	e8 17       	cp	r30, r24
    284a:	70 f4       	brcc	.+28     	; 0x2868 <__vector_39+0x70>
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	8e 0f       	add	r24, r30
    2850:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <_index.1885>
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	e8 55       	subi	r30, 0x58	; 88
    2858:	fc 4f       	sbci	r31, 0xFC	; 252
    285a:	80 81       	ld	r24, Z
    285c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2860:	85 e8       	ldi	r24, 0x85	; 133
    2862:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2866:	72 c0       	rjmp	.+228    	; 0x294c <__vector_39+0x154>
    2868:	84 e9       	ldi	r24, 0x94	; 148
    286a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    286e:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <_twiCurrentHandler>
    2872:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <_twiCurrentHandler+0x1>
    2876:	dc 01       	movw	r26, r24
    2878:	12 96       	adiw	r26, 0x02	; 2
    287a:	ed 91       	ld	r30, X+
    287c:	fc 91       	ld	r31, X
    287e:	13 97       	sbiw	r26, 0x03	; 3
    2880:	30 97       	sbiw	r30, 0x00	; 0
    2882:	09 f4       	brne	.+2      	; 0x2886 <__vector_39+0x8e>
    2884:	63 c0       	rjmp	.+198    	; 0x294c <__vector_39+0x154>
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	40 e0       	ldi	r20, 0x00	; 0
    288a:	50 e0       	ldi	r21, 0x00	; 0
    288c:	64 e0       	ldi	r22, 0x04	; 4
    288e:	19 95       	eicall
    2890:	5d c0       	rjmp	.+186    	; 0x294c <__vector_39+0x154>
    2892:	e0 91 a4 03 	lds	r30, 0x03A4	; 0x8003a4 <_index.1885>
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	8e 0f       	add	r24, r30
    289a:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <_index.1885>
    289e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    28a2:	f0 e0       	ldi	r31, 0x00	; 0
    28a4:	e8 55       	subi	r30, 0x58	; 88
    28a6:	fc 4f       	sbci	r31, 0xFC	; 252
    28a8:	80 83       	st	Z, r24
    28aa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    28ae:	80 34       	cpi	r24, 0x40	; 64
    28b0:	11 f4       	brne	.+4      	; 0x28b6 <__vector_39+0xbe>
    28b2:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <_index.1885>
    28b6:	20 91 a4 03 	lds	r18, 0x03A4	; 0x8003a4 <_index.1885>
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <_twiMessageLen>
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	01 97       	sbiw	r24, 0x01	; 1
    28c4:	28 17       	cp	r18, r24
    28c6:	39 07       	cpc	r19, r25
    28c8:	24 f4       	brge	.+8      	; 0x28d2 <__vector_39+0xda>
    28ca:	85 ec       	ldi	r24, 0xC5	; 197
    28cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    28d0:	3d c0       	rjmp	.+122    	; 0x294c <__vector_39+0x154>
    28d2:	85 e8       	ldi	r24, 0x85	; 133
    28d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    28d8:	39 c0       	rjmp	.+114    	; 0x294c <__vector_39+0x154>
    28da:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    28de:	e0 91 a4 03 	lds	r30, 0x03A4	; 0x8003a4 <_index.1885>
    28e2:	f0 e0       	ldi	r31, 0x00	; 0
    28e4:	e8 55       	subi	r30, 0x58	; 88
    28e6:	fc 4f       	sbci	r31, 0xFC	; 252
    28e8:	80 83       	st	Z, r24
    28ea:	84 e9       	ldi	r24, 0x94	; 148
    28ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    28f0:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <_twiCurrentHandler>
    28f4:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <_twiCurrentHandler+0x1>
    28f8:	dc 01       	movw	r26, r24
    28fa:	12 96       	adiw	r26, 0x02	; 2
    28fc:	ed 91       	ld	r30, X+
    28fe:	fc 91       	ld	r31, X
    2900:	13 97       	sbiw	r26, 0x03	; 3
    2902:	30 97       	sbiw	r30, 0x00	; 0
    2904:	19 f1       	breq	.+70     	; 0x294c <__vector_39+0x154>
    2906:	20 91 a7 03 	lds	r18, 0x03A7	; 0x8003a7 <_twiMessageLen>
    290a:	48 ea       	ldi	r20, 0xA8	; 168
    290c:	53 e0       	ldi	r21, 0x03	; 3
    290e:	65 e0       	ldi	r22, 0x05	; 5
    2910:	19 95       	eicall
    2912:	1c c0       	rjmp	.+56     	; 0x294c <__vector_39+0x154>
    2914:	85 ea       	ldi	r24, 0xA5	; 165
    2916:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    291a:	18 c0       	rjmp	.+48     	; 0x294c <__vector_39+0x154>
    291c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2920:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    2924:	84 e0       	ldi	r24, 0x04	; 4
    2926:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    292a:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <_twiCurrentHandler>
    292e:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <_twiCurrentHandler+0x1>
    2932:	dc 01       	movw	r26, r24
    2934:	12 96       	adiw	r26, 0x02	; 2
    2936:	ed 91       	ld	r30, X+
    2938:	fc 91       	ld	r31, X
    293a:	13 97       	sbiw	r26, 0x03	; 3
    293c:	30 97       	sbiw	r30, 0x00	; 0
    293e:	31 f0       	breq	.+12     	; 0x294c <__vector_39+0x154>
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	40 e0       	ldi	r20, 0x00	; 0
    2944:	50 e0       	ldi	r21, 0x00	; 0
    2946:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    294a:	19 95       	eicall
    294c:	ff 91       	pop	r31
    294e:	ef 91       	pop	r30
    2950:	bf 91       	pop	r27
    2952:	af 91       	pop	r26
    2954:	9f 91       	pop	r25
    2956:	8f 91       	pop	r24
    2958:	7f 91       	pop	r23
    295a:	6f 91       	pop	r22
    295c:	5f 91       	pop	r21
    295e:	4f 91       	pop	r20
    2960:	3f 91       	pop	r19
    2962:	2f 91       	pop	r18
    2964:	0f 90       	pop	r0
    2966:	0b be       	out	0x3b, r0	; 59
    2968:	0f 90       	pop	r0
    296a:	0f be       	out	0x3f, r0	; 63
    296c:	0f 90       	pop	r0
    296e:	1f 90       	pop	r1
    2970:	18 95       	reti

00002972 <__subsf3>:
    2972:	50 58       	subi	r21, 0x80	; 128

00002974 <__addsf3>:
    2974:	bb 27       	eor	r27, r27
    2976:	aa 27       	eor	r26, r26
    2978:	0e d0       	rcall	.+28     	; 0x2996 <__addsf3x>
    297a:	1c c1       	rjmp	.+568    	; 0x2bb4 <__fp_round>
    297c:	0d d1       	rcall	.+538    	; 0x2b98 <__fp_pscA>
    297e:	30 f0       	brcs	.+12     	; 0x298c <__addsf3+0x18>
    2980:	12 d1       	rcall	.+548    	; 0x2ba6 <__fp_pscB>
    2982:	20 f0       	brcs	.+8      	; 0x298c <__addsf3+0x18>
    2984:	31 f4       	brne	.+12     	; 0x2992 <__addsf3+0x1e>
    2986:	9f 3f       	cpi	r25, 0xFF	; 255
    2988:	11 f4       	brne	.+4      	; 0x298e <__addsf3+0x1a>
    298a:	1e f4       	brtc	.+6      	; 0x2992 <__addsf3+0x1e>
    298c:	02 c1       	rjmp	.+516    	; 0x2b92 <__fp_nan>
    298e:	0e f4       	brtc	.+2      	; 0x2992 <__addsf3+0x1e>
    2990:	e0 95       	com	r30
    2992:	e7 fb       	bst	r30, 7
    2994:	f8 c0       	rjmp	.+496    	; 0x2b86 <__fp_inf>

00002996 <__addsf3x>:
    2996:	e9 2f       	mov	r30, r25
    2998:	f7 d8       	rcall	.-3602   	; 0x1b88 <__fp_split3>
    299a:	80 f3       	brcs	.-32     	; 0x297c <__addsf3+0x8>
    299c:	ba 17       	cp	r27, r26
    299e:	62 07       	cpc	r22, r18
    29a0:	73 07       	cpc	r23, r19
    29a2:	84 07       	cpc	r24, r20
    29a4:	95 07       	cpc	r25, r21
    29a6:	18 f0       	brcs	.+6      	; 0x29ae <__addsf3x+0x18>
    29a8:	71 f4       	brne	.+28     	; 0x29c6 <__addsf3x+0x30>
    29aa:	9e f5       	brtc	.+102    	; 0x2a12 <__addsf3x+0x7c>
    29ac:	0f c9       	rjmp	.-3554   	; 0x1bcc <__fp_zero>
    29ae:	0e f4       	brtc	.+2      	; 0x29b2 <__addsf3x+0x1c>
    29b0:	e0 95       	com	r30
    29b2:	0b 2e       	mov	r0, r27
    29b4:	ba 2f       	mov	r27, r26
    29b6:	a0 2d       	mov	r26, r0
    29b8:	0b 01       	movw	r0, r22
    29ba:	b9 01       	movw	r22, r18
    29bc:	90 01       	movw	r18, r0
    29be:	0c 01       	movw	r0, r24
    29c0:	ca 01       	movw	r24, r20
    29c2:	a0 01       	movw	r20, r0
    29c4:	11 24       	eor	r1, r1
    29c6:	ff 27       	eor	r31, r31
    29c8:	59 1b       	sub	r21, r25
    29ca:	99 f0       	breq	.+38     	; 0x29f2 <__addsf3x+0x5c>
    29cc:	59 3f       	cpi	r21, 0xF9	; 249
    29ce:	50 f4       	brcc	.+20     	; 0x29e4 <__addsf3x+0x4e>
    29d0:	50 3e       	cpi	r21, 0xE0	; 224
    29d2:	68 f1       	brcs	.+90     	; 0x2a2e <__addsf3x+0x98>
    29d4:	1a 16       	cp	r1, r26
    29d6:	f0 40       	sbci	r31, 0x00	; 0
    29d8:	a2 2f       	mov	r26, r18
    29da:	23 2f       	mov	r18, r19
    29dc:	34 2f       	mov	r19, r20
    29de:	44 27       	eor	r20, r20
    29e0:	58 5f       	subi	r21, 0xF8	; 248
    29e2:	f3 cf       	rjmp	.-26     	; 0x29ca <__addsf3x+0x34>
    29e4:	46 95       	lsr	r20
    29e6:	37 95       	ror	r19
    29e8:	27 95       	ror	r18
    29ea:	a7 95       	ror	r26
    29ec:	f0 40       	sbci	r31, 0x00	; 0
    29ee:	53 95       	inc	r21
    29f0:	c9 f7       	brne	.-14     	; 0x29e4 <__addsf3x+0x4e>
    29f2:	7e f4       	brtc	.+30     	; 0x2a12 <__addsf3x+0x7c>
    29f4:	1f 16       	cp	r1, r31
    29f6:	ba 0b       	sbc	r27, r26
    29f8:	62 0b       	sbc	r22, r18
    29fa:	73 0b       	sbc	r23, r19
    29fc:	84 0b       	sbc	r24, r20
    29fe:	ba f0       	brmi	.+46     	; 0x2a2e <__addsf3x+0x98>
    2a00:	91 50       	subi	r25, 0x01	; 1
    2a02:	a1 f0       	breq	.+40     	; 0x2a2c <__addsf3x+0x96>
    2a04:	ff 0f       	add	r31, r31
    2a06:	bb 1f       	adc	r27, r27
    2a08:	66 1f       	adc	r22, r22
    2a0a:	77 1f       	adc	r23, r23
    2a0c:	88 1f       	adc	r24, r24
    2a0e:	c2 f7       	brpl	.-16     	; 0x2a00 <__addsf3x+0x6a>
    2a10:	0e c0       	rjmp	.+28     	; 0x2a2e <__addsf3x+0x98>
    2a12:	ba 0f       	add	r27, r26
    2a14:	62 1f       	adc	r22, r18
    2a16:	73 1f       	adc	r23, r19
    2a18:	84 1f       	adc	r24, r20
    2a1a:	48 f4       	brcc	.+18     	; 0x2a2e <__addsf3x+0x98>
    2a1c:	87 95       	ror	r24
    2a1e:	77 95       	ror	r23
    2a20:	67 95       	ror	r22
    2a22:	b7 95       	ror	r27
    2a24:	f7 95       	ror	r31
    2a26:	9e 3f       	cpi	r25, 0xFE	; 254
    2a28:	08 f0       	brcs	.+2      	; 0x2a2c <__addsf3x+0x96>
    2a2a:	b3 cf       	rjmp	.-154    	; 0x2992 <__addsf3+0x1e>
    2a2c:	93 95       	inc	r25
    2a2e:	88 0f       	add	r24, r24
    2a30:	08 f0       	brcs	.+2      	; 0x2a34 <__addsf3x+0x9e>
    2a32:	99 27       	eor	r25, r25
    2a34:	ee 0f       	add	r30, r30
    2a36:	97 95       	ror	r25
    2a38:	87 95       	ror	r24
    2a3a:	08 95       	ret

00002a3c <__divsf3>:
    2a3c:	0c d0       	rcall	.+24     	; 0x2a56 <__divsf3x>
    2a3e:	ba c0       	rjmp	.+372    	; 0x2bb4 <__fp_round>
    2a40:	b2 d0       	rcall	.+356    	; 0x2ba6 <__fp_pscB>
    2a42:	40 f0       	brcs	.+16     	; 0x2a54 <__divsf3+0x18>
    2a44:	a9 d0       	rcall	.+338    	; 0x2b98 <__fp_pscA>
    2a46:	30 f0       	brcs	.+12     	; 0x2a54 <__divsf3+0x18>
    2a48:	21 f4       	brne	.+8      	; 0x2a52 <__divsf3+0x16>
    2a4a:	5f 3f       	cpi	r21, 0xFF	; 255
    2a4c:	19 f0       	breq	.+6      	; 0x2a54 <__divsf3+0x18>
    2a4e:	9b c0       	rjmp	.+310    	; 0x2b86 <__fp_inf>
    2a50:	51 11       	cpse	r21, r1
    2a52:	bd c8       	rjmp	.-3718   	; 0x1bce <__fp_szero>
    2a54:	9e c0       	rjmp	.+316    	; 0x2b92 <__fp_nan>

00002a56 <__divsf3x>:
    2a56:	98 d8       	rcall	.-3792   	; 0x1b88 <__fp_split3>
    2a58:	98 f3       	brcs	.-26     	; 0x2a40 <__divsf3+0x4>

00002a5a <__divsf3_pse>:
    2a5a:	99 23       	and	r25, r25
    2a5c:	c9 f3       	breq	.-14     	; 0x2a50 <__divsf3+0x14>
    2a5e:	55 23       	and	r21, r21
    2a60:	b1 f3       	breq	.-20     	; 0x2a4e <__divsf3+0x12>
    2a62:	95 1b       	sub	r25, r21
    2a64:	55 0b       	sbc	r21, r21
    2a66:	bb 27       	eor	r27, r27
    2a68:	aa 27       	eor	r26, r26
    2a6a:	62 17       	cp	r22, r18
    2a6c:	73 07       	cpc	r23, r19
    2a6e:	84 07       	cpc	r24, r20
    2a70:	38 f0       	brcs	.+14     	; 0x2a80 <__divsf3_pse+0x26>
    2a72:	9f 5f       	subi	r25, 0xFF	; 255
    2a74:	5f 4f       	sbci	r21, 0xFF	; 255
    2a76:	22 0f       	add	r18, r18
    2a78:	33 1f       	adc	r19, r19
    2a7a:	44 1f       	adc	r20, r20
    2a7c:	aa 1f       	adc	r26, r26
    2a7e:	a9 f3       	breq	.-22     	; 0x2a6a <__divsf3_pse+0x10>
    2a80:	33 d0       	rcall	.+102    	; 0x2ae8 <__divsf3_pse+0x8e>
    2a82:	0e 2e       	mov	r0, r30
    2a84:	3a f0       	brmi	.+14     	; 0x2a94 <__divsf3_pse+0x3a>
    2a86:	e0 e8       	ldi	r30, 0x80	; 128
    2a88:	30 d0       	rcall	.+96     	; 0x2aea <__divsf3_pse+0x90>
    2a8a:	91 50       	subi	r25, 0x01	; 1
    2a8c:	50 40       	sbci	r21, 0x00	; 0
    2a8e:	e6 95       	lsr	r30
    2a90:	00 1c       	adc	r0, r0
    2a92:	ca f7       	brpl	.-14     	; 0x2a86 <__divsf3_pse+0x2c>
    2a94:	29 d0       	rcall	.+82     	; 0x2ae8 <__divsf3_pse+0x8e>
    2a96:	fe 2f       	mov	r31, r30
    2a98:	27 d0       	rcall	.+78     	; 0x2ae8 <__divsf3_pse+0x8e>
    2a9a:	66 0f       	add	r22, r22
    2a9c:	77 1f       	adc	r23, r23
    2a9e:	88 1f       	adc	r24, r24
    2aa0:	bb 1f       	adc	r27, r27
    2aa2:	26 17       	cp	r18, r22
    2aa4:	37 07       	cpc	r19, r23
    2aa6:	48 07       	cpc	r20, r24
    2aa8:	ab 07       	cpc	r26, r27
    2aaa:	b0 e8       	ldi	r27, 0x80	; 128
    2aac:	09 f0       	breq	.+2      	; 0x2ab0 <__divsf3_pse+0x56>
    2aae:	bb 0b       	sbc	r27, r27
    2ab0:	80 2d       	mov	r24, r0
    2ab2:	bf 01       	movw	r22, r30
    2ab4:	ff 27       	eor	r31, r31
    2ab6:	93 58       	subi	r25, 0x83	; 131
    2ab8:	5f 4f       	sbci	r21, 0xFF	; 255
    2aba:	2a f0       	brmi	.+10     	; 0x2ac6 <__divsf3_pse+0x6c>
    2abc:	9e 3f       	cpi	r25, 0xFE	; 254
    2abe:	51 05       	cpc	r21, r1
    2ac0:	68 f0       	brcs	.+26     	; 0x2adc <__divsf3_pse+0x82>
    2ac2:	61 c0       	rjmp	.+194    	; 0x2b86 <__fp_inf>
    2ac4:	84 c8       	rjmp	.-3832   	; 0x1bce <__fp_szero>
    2ac6:	5f 3f       	cpi	r21, 0xFF	; 255
    2ac8:	ec f3       	brlt	.-6      	; 0x2ac4 <__divsf3_pse+0x6a>
    2aca:	98 3e       	cpi	r25, 0xE8	; 232
    2acc:	dc f3       	brlt	.-10     	; 0x2ac4 <__divsf3_pse+0x6a>
    2ace:	86 95       	lsr	r24
    2ad0:	77 95       	ror	r23
    2ad2:	67 95       	ror	r22
    2ad4:	b7 95       	ror	r27
    2ad6:	f7 95       	ror	r31
    2ad8:	9f 5f       	subi	r25, 0xFF	; 255
    2ada:	c9 f7       	brne	.-14     	; 0x2ace <__divsf3_pse+0x74>
    2adc:	88 0f       	add	r24, r24
    2ade:	91 1d       	adc	r25, r1
    2ae0:	96 95       	lsr	r25
    2ae2:	87 95       	ror	r24
    2ae4:	97 f9       	bld	r25, 7
    2ae6:	08 95       	ret
    2ae8:	e1 e0       	ldi	r30, 0x01	; 1
    2aea:	66 0f       	add	r22, r22
    2aec:	77 1f       	adc	r23, r23
    2aee:	88 1f       	adc	r24, r24
    2af0:	bb 1f       	adc	r27, r27
    2af2:	62 17       	cp	r22, r18
    2af4:	73 07       	cpc	r23, r19
    2af6:	84 07       	cpc	r24, r20
    2af8:	ba 07       	cpc	r27, r26
    2afa:	20 f0       	brcs	.+8      	; 0x2b04 <__divsf3_pse+0xaa>
    2afc:	62 1b       	sub	r22, r18
    2afe:	73 0b       	sbc	r23, r19
    2b00:	84 0b       	sbc	r24, r20
    2b02:	ba 0b       	sbc	r27, r26
    2b04:	ee 1f       	adc	r30, r30
    2b06:	88 f7       	brcc	.-30     	; 0x2aea <__divsf3_pse+0x90>
    2b08:	e0 95       	com	r30
    2b0a:	08 95       	ret

00002b0c <__floatunsisf>:
    2b0c:	e8 94       	clt
    2b0e:	09 c0       	rjmp	.+18     	; 0x2b22 <__floatsisf+0x12>

00002b10 <__floatsisf>:
    2b10:	97 fb       	bst	r25, 7
    2b12:	3e f4       	brtc	.+14     	; 0x2b22 <__floatsisf+0x12>
    2b14:	90 95       	com	r25
    2b16:	80 95       	com	r24
    2b18:	70 95       	com	r23
    2b1a:	61 95       	neg	r22
    2b1c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b1e:	8f 4f       	sbci	r24, 0xFF	; 255
    2b20:	9f 4f       	sbci	r25, 0xFF	; 255
    2b22:	99 23       	and	r25, r25
    2b24:	a9 f0       	breq	.+42     	; 0x2b50 <__floatsisf+0x40>
    2b26:	f9 2f       	mov	r31, r25
    2b28:	96 e9       	ldi	r25, 0x96	; 150
    2b2a:	bb 27       	eor	r27, r27
    2b2c:	93 95       	inc	r25
    2b2e:	f6 95       	lsr	r31
    2b30:	87 95       	ror	r24
    2b32:	77 95       	ror	r23
    2b34:	67 95       	ror	r22
    2b36:	b7 95       	ror	r27
    2b38:	f1 11       	cpse	r31, r1
    2b3a:	f8 cf       	rjmp	.-16     	; 0x2b2c <__floatsisf+0x1c>
    2b3c:	fa f4       	brpl	.+62     	; 0x2b7c <__floatsisf+0x6c>
    2b3e:	bb 0f       	add	r27, r27
    2b40:	11 f4       	brne	.+4      	; 0x2b46 <__floatsisf+0x36>
    2b42:	60 ff       	sbrs	r22, 0
    2b44:	1b c0       	rjmp	.+54     	; 0x2b7c <__floatsisf+0x6c>
    2b46:	6f 5f       	subi	r22, 0xFF	; 255
    2b48:	7f 4f       	sbci	r23, 0xFF	; 255
    2b4a:	8f 4f       	sbci	r24, 0xFF	; 255
    2b4c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b4e:	16 c0       	rjmp	.+44     	; 0x2b7c <__floatsisf+0x6c>
    2b50:	88 23       	and	r24, r24
    2b52:	11 f0       	breq	.+4      	; 0x2b58 <__floatsisf+0x48>
    2b54:	96 e9       	ldi	r25, 0x96	; 150
    2b56:	11 c0       	rjmp	.+34     	; 0x2b7a <__floatsisf+0x6a>
    2b58:	77 23       	and	r23, r23
    2b5a:	21 f0       	breq	.+8      	; 0x2b64 <__floatsisf+0x54>
    2b5c:	9e e8       	ldi	r25, 0x8E	; 142
    2b5e:	87 2f       	mov	r24, r23
    2b60:	76 2f       	mov	r23, r22
    2b62:	05 c0       	rjmp	.+10     	; 0x2b6e <__floatsisf+0x5e>
    2b64:	66 23       	and	r22, r22
    2b66:	71 f0       	breq	.+28     	; 0x2b84 <__floatsisf+0x74>
    2b68:	96 e8       	ldi	r25, 0x86	; 134
    2b6a:	86 2f       	mov	r24, r22
    2b6c:	70 e0       	ldi	r23, 0x00	; 0
    2b6e:	60 e0       	ldi	r22, 0x00	; 0
    2b70:	2a f0       	brmi	.+10     	; 0x2b7c <__floatsisf+0x6c>
    2b72:	9a 95       	dec	r25
    2b74:	66 0f       	add	r22, r22
    2b76:	77 1f       	adc	r23, r23
    2b78:	88 1f       	adc	r24, r24
    2b7a:	da f7       	brpl	.-10     	; 0x2b72 <__floatsisf+0x62>
    2b7c:	88 0f       	add	r24, r24
    2b7e:	96 95       	lsr	r25
    2b80:	87 95       	ror	r24
    2b82:	97 f9       	bld	r25, 7
    2b84:	08 95       	ret

00002b86 <__fp_inf>:
    2b86:	97 f9       	bld	r25, 7
    2b88:	9f 67       	ori	r25, 0x7F	; 127
    2b8a:	80 e8       	ldi	r24, 0x80	; 128
    2b8c:	70 e0       	ldi	r23, 0x00	; 0
    2b8e:	60 e0       	ldi	r22, 0x00	; 0
    2b90:	08 95       	ret

00002b92 <__fp_nan>:
    2b92:	9f ef       	ldi	r25, 0xFF	; 255
    2b94:	80 ec       	ldi	r24, 0xC0	; 192
    2b96:	08 95       	ret

00002b98 <__fp_pscA>:
    2b98:	00 24       	eor	r0, r0
    2b9a:	0a 94       	dec	r0
    2b9c:	16 16       	cp	r1, r22
    2b9e:	17 06       	cpc	r1, r23
    2ba0:	18 06       	cpc	r1, r24
    2ba2:	09 06       	cpc	r0, r25
    2ba4:	08 95       	ret

00002ba6 <__fp_pscB>:
    2ba6:	00 24       	eor	r0, r0
    2ba8:	0a 94       	dec	r0
    2baa:	12 16       	cp	r1, r18
    2bac:	13 06       	cpc	r1, r19
    2bae:	14 06       	cpc	r1, r20
    2bb0:	05 06       	cpc	r0, r21
    2bb2:	08 95       	ret

00002bb4 <__fp_round>:
    2bb4:	09 2e       	mov	r0, r25
    2bb6:	03 94       	inc	r0
    2bb8:	00 0c       	add	r0, r0
    2bba:	11 f4       	brne	.+4      	; 0x2bc0 <__fp_round+0xc>
    2bbc:	88 23       	and	r24, r24
    2bbe:	52 f0       	brmi	.+20     	; 0x2bd4 <__fp_round+0x20>
    2bc0:	bb 0f       	add	r27, r27
    2bc2:	40 f4       	brcc	.+16     	; 0x2bd4 <__fp_round+0x20>
    2bc4:	bf 2b       	or	r27, r31
    2bc6:	11 f4       	brne	.+4      	; 0x2bcc <__fp_round+0x18>
    2bc8:	60 ff       	sbrs	r22, 0
    2bca:	04 c0       	rjmp	.+8      	; 0x2bd4 <__fp_round+0x20>
    2bcc:	6f 5f       	subi	r22, 0xFF	; 255
    2bce:	7f 4f       	sbci	r23, 0xFF	; 255
    2bd0:	8f 4f       	sbci	r24, 0xFF	; 255
    2bd2:	9f 4f       	sbci	r25, 0xFF	; 255
    2bd4:	08 95       	ret

00002bd6 <__mulsf3>:
    2bd6:	0c d0       	rcall	.+24     	; 0x2bf0 <__mulsf3x>
    2bd8:	ed cf       	rjmp	.-38     	; 0x2bb4 <__fp_round>
    2bda:	de df       	rcall	.-68     	; 0x2b98 <__fp_pscA>
    2bdc:	28 f0       	brcs	.+10     	; 0x2be8 <__mulsf3+0x12>
    2bde:	e3 df       	rcall	.-58     	; 0x2ba6 <__fp_pscB>
    2be0:	18 f0       	brcs	.+6      	; 0x2be8 <__mulsf3+0x12>
    2be2:	95 23       	and	r25, r21
    2be4:	09 f0       	breq	.+2      	; 0x2be8 <__mulsf3+0x12>
    2be6:	cf cf       	rjmp	.-98     	; 0x2b86 <__fp_inf>
    2be8:	d4 cf       	rjmp	.-88     	; 0x2b92 <__fp_nan>
    2bea:	11 24       	eor	r1, r1
    2bec:	0c 94 e7 0d 	jmp	0x1bce	; 0x1bce <__fp_szero>

00002bf0 <__mulsf3x>:
    2bf0:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <__fp_split3>
    2bf4:	90 f3       	brcs	.-28     	; 0x2bda <__mulsf3+0x4>

00002bf6 <__mulsf3_pse>:
    2bf6:	95 9f       	mul	r25, r21
    2bf8:	c1 f3       	breq	.-16     	; 0x2bea <__mulsf3+0x14>
    2bfa:	95 0f       	add	r25, r21
    2bfc:	50 e0       	ldi	r21, 0x00	; 0
    2bfe:	55 1f       	adc	r21, r21
    2c00:	62 9f       	mul	r22, r18
    2c02:	f0 01       	movw	r30, r0
    2c04:	72 9f       	mul	r23, r18
    2c06:	bb 27       	eor	r27, r27
    2c08:	f0 0d       	add	r31, r0
    2c0a:	b1 1d       	adc	r27, r1
    2c0c:	63 9f       	mul	r22, r19
    2c0e:	aa 27       	eor	r26, r26
    2c10:	f0 0d       	add	r31, r0
    2c12:	b1 1d       	adc	r27, r1
    2c14:	aa 1f       	adc	r26, r26
    2c16:	64 9f       	mul	r22, r20
    2c18:	66 27       	eor	r22, r22
    2c1a:	b0 0d       	add	r27, r0
    2c1c:	a1 1d       	adc	r26, r1
    2c1e:	66 1f       	adc	r22, r22
    2c20:	82 9f       	mul	r24, r18
    2c22:	22 27       	eor	r18, r18
    2c24:	b0 0d       	add	r27, r0
    2c26:	a1 1d       	adc	r26, r1
    2c28:	62 1f       	adc	r22, r18
    2c2a:	73 9f       	mul	r23, r19
    2c2c:	b0 0d       	add	r27, r0
    2c2e:	a1 1d       	adc	r26, r1
    2c30:	62 1f       	adc	r22, r18
    2c32:	83 9f       	mul	r24, r19
    2c34:	a0 0d       	add	r26, r0
    2c36:	61 1d       	adc	r22, r1
    2c38:	22 1f       	adc	r18, r18
    2c3a:	74 9f       	mul	r23, r20
    2c3c:	33 27       	eor	r19, r19
    2c3e:	a0 0d       	add	r26, r0
    2c40:	61 1d       	adc	r22, r1
    2c42:	23 1f       	adc	r18, r19
    2c44:	84 9f       	mul	r24, r20
    2c46:	60 0d       	add	r22, r0
    2c48:	21 1d       	adc	r18, r1
    2c4a:	82 2f       	mov	r24, r18
    2c4c:	76 2f       	mov	r23, r22
    2c4e:	6a 2f       	mov	r22, r26
    2c50:	11 24       	eor	r1, r1
    2c52:	9f 57       	subi	r25, 0x7F	; 127
    2c54:	50 40       	sbci	r21, 0x00	; 0
    2c56:	92 f0       	brmi	.+36     	; 0x2c7c <__mulsf3_pse+0x86>
    2c58:	e9 f0       	breq	.+58     	; 0x2c94 <__mulsf3_pse+0x9e>
    2c5a:	88 23       	and	r24, r24
    2c5c:	4a f0       	brmi	.+18     	; 0x2c70 <__mulsf3_pse+0x7a>
    2c5e:	ee 0f       	add	r30, r30
    2c60:	ff 1f       	adc	r31, r31
    2c62:	bb 1f       	adc	r27, r27
    2c64:	66 1f       	adc	r22, r22
    2c66:	77 1f       	adc	r23, r23
    2c68:	88 1f       	adc	r24, r24
    2c6a:	91 50       	subi	r25, 0x01	; 1
    2c6c:	50 40       	sbci	r21, 0x00	; 0
    2c6e:	a9 f7       	brne	.-22     	; 0x2c5a <__mulsf3_pse+0x64>
    2c70:	9e 3f       	cpi	r25, 0xFE	; 254
    2c72:	51 05       	cpc	r21, r1
    2c74:	78 f0       	brcs	.+30     	; 0x2c94 <__mulsf3_pse+0x9e>
    2c76:	87 cf       	rjmp	.-242    	; 0x2b86 <__fp_inf>
    2c78:	0c 94 e7 0d 	jmp	0x1bce	; 0x1bce <__fp_szero>
    2c7c:	5f 3f       	cpi	r21, 0xFF	; 255
    2c7e:	e4 f3       	brlt	.-8      	; 0x2c78 <__mulsf3_pse+0x82>
    2c80:	98 3e       	cpi	r25, 0xE8	; 232
    2c82:	d4 f3       	brlt	.-12     	; 0x2c78 <__mulsf3_pse+0x82>
    2c84:	86 95       	lsr	r24
    2c86:	77 95       	ror	r23
    2c88:	67 95       	ror	r22
    2c8a:	b7 95       	ror	r27
    2c8c:	f7 95       	ror	r31
    2c8e:	e7 95       	ror	r30
    2c90:	9f 5f       	subi	r25, 0xFF	; 255
    2c92:	c1 f7       	brne	.-16     	; 0x2c84 <__mulsf3_pse+0x8e>
    2c94:	fe 2b       	or	r31, r30
    2c96:	88 0f       	add	r24, r24
    2c98:	91 1d       	adc	r25, r1
    2c9a:	96 95       	lsr	r25
    2c9c:	87 95       	ror	r24
    2c9e:	97 f9       	bld	r25, 7
    2ca0:	08 95       	ret

00002ca2 <__udivmodsi4>:
    2ca2:	a1 e2       	ldi	r26, 0x21	; 33
    2ca4:	1a 2e       	mov	r1, r26
    2ca6:	aa 1b       	sub	r26, r26
    2ca8:	bb 1b       	sub	r27, r27
    2caa:	fd 01       	movw	r30, r26
    2cac:	0d c0       	rjmp	.+26     	; 0x2cc8 <__udivmodsi4_ep>

00002cae <__udivmodsi4_loop>:
    2cae:	aa 1f       	adc	r26, r26
    2cb0:	bb 1f       	adc	r27, r27
    2cb2:	ee 1f       	adc	r30, r30
    2cb4:	ff 1f       	adc	r31, r31
    2cb6:	a2 17       	cp	r26, r18
    2cb8:	b3 07       	cpc	r27, r19
    2cba:	e4 07       	cpc	r30, r20
    2cbc:	f5 07       	cpc	r31, r21
    2cbe:	20 f0       	brcs	.+8      	; 0x2cc8 <__udivmodsi4_ep>
    2cc0:	a2 1b       	sub	r26, r18
    2cc2:	b3 0b       	sbc	r27, r19
    2cc4:	e4 0b       	sbc	r30, r20
    2cc6:	f5 0b       	sbc	r31, r21

00002cc8 <__udivmodsi4_ep>:
    2cc8:	66 1f       	adc	r22, r22
    2cca:	77 1f       	adc	r23, r23
    2ccc:	88 1f       	adc	r24, r24
    2cce:	99 1f       	adc	r25, r25
    2cd0:	1a 94       	dec	r1
    2cd2:	69 f7       	brne	.-38     	; 0x2cae <__udivmodsi4_loop>
    2cd4:	60 95       	com	r22
    2cd6:	70 95       	com	r23
    2cd8:	80 95       	com	r24
    2cda:	90 95       	com	r25
    2cdc:	9b 01       	movw	r18, r22
    2cde:	ac 01       	movw	r20, r24
    2ce0:	bd 01       	movw	r22, r26
    2ce2:	cf 01       	movw	r24, r30
    2ce4:	08 95       	ret

00002ce6 <__tablejump2__>:
    2ce6:	ee 0f       	add	r30, r30
    2ce8:	ff 1f       	adc	r31, r31
    2cea:	88 1f       	adc	r24, r24
    2cec:	8b bf       	out	0x3b, r24	; 59
    2cee:	07 90       	elpm	r0, Z+
    2cf0:	f6 91       	elpm	r31, Z
    2cf2:	e0 2d       	mov	r30, r0
    2cf4:	19 94       	eijmp

00002cf6 <calloc>:
    2cf6:	0f 93       	push	r16
    2cf8:	1f 93       	push	r17
    2cfa:	cf 93       	push	r28
    2cfc:	df 93       	push	r29
    2cfe:	86 9f       	mul	r24, r22
    2d00:	80 01       	movw	r16, r0
    2d02:	87 9f       	mul	r24, r23
    2d04:	10 0d       	add	r17, r0
    2d06:	96 9f       	mul	r25, r22
    2d08:	10 0d       	add	r17, r0
    2d0a:	11 24       	eor	r1, r1
    2d0c:	c8 01       	movw	r24, r16
    2d0e:	0d d0       	rcall	.+26     	; 0x2d2a <malloc>
    2d10:	ec 01       	movw	r28, r24
    2d12:	00 97       	sbiw	r24, 0x00	; 0
    2d14:	21 f0       	breq	.+8      	; 0x2d1e <calloc+0x28>
    2d16:	a8 01       	movw	r20, r16
    2d18:	60 e0       	ldi	r22, 0x00	; 0
    2d1a:	70 e0       	ldi	r23, 0x00	; 0
    2d1c:	34 d1       	rcall	.+616    	; 0x2f86 <memset>
    2d1e:	ce 01       	movw	r24, r28
    2d20:	df 91       	pop	r29
    2d22:	cf 91       	pop	r28
    2d24:	1f 91       	pop	r17
    2d26:	0f 91       	pop	r16
    2d28:	08 95       	ret

00002d2a <malloc>:
    2d2a:	0f 93       	push	r16
    2d2c:	1f 93       	push	r17
    2d2e:	cf 93       	push	r28
    2d30:	df 93       	push	r29
    2d32:	82 30       	cpi	r24, 0x02	; 2
    2d34:	91 05       	cpc	r25, r1
    2d36:	10 f4       	brcc	.+4      	; 0x2d3c <malloc+0x12>
    2d38:	82 e0       	ldi	r24, 0x02	; 2
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	e0 91 bd 03 	lds	r30, 0x03BD	; 0x8003bd <__flp>
    2d40:	f0 91 be 03 	lds	r31, 0x03BE	; 0x8003be <__flp+0x1>
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	a0 e0       	ldi	r26, 0x00	; 0
    2d4a:	b0 e0       	ldi	r27, 0x00	; 0
    2d4c:	30 97       	sbiw	r30, 0x00	; 0
    2d4e:	19 f1       	breq	.+70     	; 0x2d96 <malloc+0x6c>
    2d50:	40 81       	ld	r20, Z
    2d52:	51 81       	ldd	r21, Z+1	; 0x01
    2d54:	02 81       	ldd	r16, Z+2	; 0x02
    2d56:	13 81       	ldd	r17, Z+3	; 0x03
    2d58:	48 17       	cp	r20, r24
    2d5a:	59 07       	cpc	r21, r25
    2d5c:	c8 f0       	brcs	.+50     	; 0x2d90 <malloc+0x66>
    2d5e:	84 17       	cp	r24, r20
    2d60:	95 07       	cpc	r25, r21
    2d62:	69 f4       	brne	.+26     	; 0x2d7e <malloc+0x54>
    2d64:	10 97       	sbiw	r26, 0x00	; 0
    2d66:	31 f0       	breq	.+12     	; 0x2d74 <malloc+0x4a>
    2d68:	12 96       	adiw	r26, 0x02	; 2
    2d6a:	0c 93       	st	X, r16
    2d6c:	12 97       	sbiw	r26, 0x02	; 2
    2d6e:	13 96       	adiw	r26, 0x03	; 3
    2d70:	1c 93       	st	X, r17
    2d72:	27 c0       	rjmp	.+78     	; 0x2dc2 <malloc+0x98>
    2d74:	00 93 bd 03 	sts	0x03BD, r16	; 0x8003bd <__flp>
    2d78:	10 93 be 03 	sts	0x03BE, r17	; 0x8003be <__flp+0x1>
    2d7c:	22 c0       	rjmp	.+68     	; 0x2dc2 <malloc+0x98>
    2d7e:	21 15       	cp	r18, r1
    2d80:	31 05       	cpc	r19, r1
    2d82:	19 f0       	breq	.+6      	; 0x2d8a <malloc+0x60>
    2d84:	42 17       	cp	r20, r18
    2d86:	53 07       	cpc	r21, r19
    2d88:	18 f4       	brcc	.+6      	; 0x2d90 <malloc+0x66>
    2d8a:	9a 01       	movw	r18, r20
    2d8c:	bd 01       	movw	r22, r26
    2d8e:	ef 01       	movw	r28, r30
    2d90:	df 01       	movw	r26, r30
    2d92:	f8 01       	movw	r30, r16
    2d94:	db cf       	rjmp	.-74     	; 0x2d4c <malloc+0x22>
    2d96:	21 15       	cp	r18, r1
    2d98:	31 05       	cpc	r19, r1
    2d9a:	f9 f0       	breq	.+62     	; 0x2dda <malloc+0xb0>
    2d9c:	28 1b       	sub	r18, r24
    2d9e:	39 0b       	sbc	r19, r25
    2da0:	24 30       	cpi	r18, 0x04	; 4
    2da2:	31 05       	cpc	r19, r1
    2da4:	80 f4       	brcc	.+32     	; 0x2dc6 <malloc+0x9c>
    2da6:	8a 81       	ldd	r24, Y+2	; 0x02
    2da8:	9b 81       	ldd	r25, Y+3	; 0x03
    2daa:	61 15       	cp	r22, r1
    2dac:	71 05       	cpc	r23, r1
    2dae:	21 f0       	breq	.+8      	; 0x2db8 <malloc+0x8e>
    2db0:	fb 01       	movw	r30, r22
    2db2:	93 83       	std	Z+3, r25	; 0x03
    2db4:	82 83       	std	Z+2, r24	; 0x02
    2db6:	04 c0       	rjmp	.+8      	; 0x2dc0 <malloc+0x96>
    2db8:	90 93 be 03 	sts	0x03BE, r25	; 0x8003be <__flp+0x1>
    2dbc:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <__flp>
    2dc0:	fe 01       	movw	r30, r28
    2dc2:	32 96       	adiw	r30, 0x02	; 2
    2dc4:	44 c0       	rjmp	.+136    	; 0x2e4e <malloc+0x124>
    2dc6:	fe 01       	movw	r30, r28
    2dc8:	e2 0f       	add	r30, r18
    2dca:	f3 1f       	adc	r31, r19
    2dcc:	81 93       	st	Z+, r24
    2dce:	91 93       	st	Z+, r25
    2dd0:	22 50       	subi	r18, 0x02	; 2
    2dd2:	31 09       	sbc	r19, r1
    2dd4:	39 83       	std	Y+1, r19	; 0x01
    2dd6:	28 83       	st	Y, r18
    2dd8:	3a c0       	rjmp	.+116    	; 0x2e4e <malloc+0x124>
    2dda:	20 91 bb 03 	lds	r18, 0x03BB	; 0x8003bb <__brkval>
    2dde:	30 91 bc 03 	lds	r19, 0x03BC	; 0x8003bc <__brkval+0x1>
    2de2:	23 2b       	or	r18, r19
    2de4:	41 f4       	brne	.+16     	; 0x2df6 <malloc+0xcc>
    2de6:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    2dea:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    2dee:	30 93 bc 03 	sts	0x03BC, r19	; 0x8003bc <__brkval+0x1>
    2df2:	20 93 bb 03 	sts	0x03BB, r18	; 0x8003bb <__brkval>
    2df6:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    2dfa:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    2dfe:	21 15       	cp	r18, r1
    2e00:	31 05       	cpc	r19, r1
    2e02:	41 f4       	brne	.+16     	; 0x2e14 <malloc+0xea>
    2e04:	2d b7       	in	r18, 0x3d	; 61
    2e06:	3e b7       	in	r19, 0x3e	; 62
    2e08:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    2e0c:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2e10:	24 1b       	sub	r18, r20
    2e12:	35 0b       	sbc	r19, r21
    2e14:	e0 91 bb 03 	lds	r30, 0x03BB	; 0x8003bb <__brkval>
    2e18:	f0 91 bc 03 	lds	r31, 0x03BC	; 0x8003bc <__brkval+0x1>
    2e1c:	e2 17       	cp	r30, r18
    2e1e:	f3 07       	cpc	r31, r19
    2e20:	a0 f4       	brcc	.+40     	; 0x2e4a <malloc+0x120>
    2e22:	2e 1b       	sub	r18, r30
    2e24:	3f 0b       	sbc	r19, r31
    2e26:	28 17       	cp	r18, r24
    2e28:	39 07       	cpc	r19, r25
    2e2a:	78 f0       	brcs	.+30     	; 0x2e4a <malloc+0x120>
    2e2c:	ac 01       	movw	r20, r24
    2e2e:	4e 5f       	subi	r20, 0xFE	; 254
    2e30:	5f 4f       	sbci	r21, 0xFF	; 255
    2e32:	24 17       	cp	r18, r20
    2e34:	35 07       	cpc	r19, r21
    2e36:	48 f0       	brcs	.+18     	; 0x2e4a <malloc+0x120>
    2e38:	4e 0f       	add	r20, r30
    2e3a:	5f 1f       	adc	r21, r31
    2e3c:	50 93 bc 03 	sts	0x03BC, r21	; 0x8003bc <__brkval+0x1>
    2e40:	40 93 bb 03 	sts	0x03BB, r20	; 0x8003bb <__brkval>
    2e44:	81 93       	st	Z+, r24
    2e46:	91 93       	st	Z+, r25
    2e48:	02 c0       	rjmp	.+4      	; 0x2e4e <malloc+0x124>
    2e4a:	e0 e0       	ldi	r30, 0x00	; 0
    2e4c:	f0 e0       	ldi	r31, 0x00	; 0
    2e4e:	cf 01       	movw	r24, r30
    2e50:	df 91       	pop	r29
    2e52:	cf 91       	pop	r28
    2e54:	1f 91       	pop	r17
    2e56:	0f 91       	pop	r16
    2e58:	08 95       	ret

00002e5a <free>:
    2e5a:	cf 93       	push	r28
    2e5c:	df 93       	push	r29
    2e5e:	00 97       	sbiw	r24, 0x00	; 0
    2e60:	09 f4       	brne	.+2      	; 0x2e64 <free+0xa>
    2e62:	81 c0       	rjmp	.+258    	; 0x2f66 <free+0x10c>
    2e64:	fc 01       	movw	r30, r24
    2e66:	32 97       	sbiw	r30, 0x02	; 2
    2e68:	13 82       	std	Z+3, r1	; 0x03
    2e6a:	12 82       	std	Z+2, r1	; 0x02
    2e6c:	a0 91 bd 03 	lds	r26, 0x03BD	; 0x8003bd <__flp>
    2e70:	b0 91 be 03 	lds	r27, 0x03BE	; 0x8003be <__flp+0x1>
    2e74:	10 97       	sbiw	r26, 0x00	; 0
    2e76:	81 f4       	brne	.+32     	; 0x2e98 <free+0x3e>
    2e78:	20 81       	ld	r18, Z
    2e7a:	31 81       	ldd	r19, Z+1	; 0x01
    2e7c:	82 0f       	add	r24, r18
    2e7e:	93 1f       	adc	r25, r19
    2e80:	20 91 bb 03 	lds	r18, 0x03BB	; 0x8003bb <__brkval>
    2e84:	30 91 bc 03 	lds	r19, 0x03BC	; 0x8003bc <__brkval+0x1>
    2e88:	28 17       	cp	r18, r24
    2e8a:	39 07       	cpc	r19, r25
    2e8c:	51 f5       	brne	.+84     	; 0x2ee2 <free+0x88>
    2e8e:	f0 93 bc 03 	sts	0x03BC, r31	; 0x8003bc <__brkval+0x1>
    2e92:	e0 93 bb 03 	sts	0x03BB, r30	; 0x8003bb <__brkval>
    2e96:	67 c0       	rjmp	.+206    	; 0x2f66 <free+0x10c>
    2e98:	ed 01       	movw	r28, r26
    2e9a:	20 e0       	ldi	r18, 0x00	; 0
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	ce 17       	cp	r28, r30
    2ea0:	df 07       	cpc	r29, r31
    2ea2:	40 f4       	brcc	.+16     	; 0x2eb4 <free+0x5a>
    2ea4:	4a 81       	ldd	r20, Y+2	; 0x02
    2ea6:	5b 81       	ldd	r21, Y+3	; 0x03
    2ea8:	9e 01       	movw	r18, r28
    2eaa:	41 15       	cp	r20, r1
    2eac:	51 05       	cpc	r21, r1
    2eae:	f1 f0       	breq	.+60     	; 0x2eec <free+0x92>
    2eb0:	ea 01       	movw	r28, r20
    2eb2:	f5 cf       	rjmp	.-22     	; 0x2e9e <free+0x44>
    2eb4:	d3 83       	std	Z+3, r29	; 0x03
    2eb6:	c2 83       	std	Z+2, r28	; 0x02
    2eb8:	40 81       	ld	r20, Z
    2eba:	51 81       	ldd	r21, Z+1	; 0x01
    2ebc:	84 0f       	add	r24, r20
    2ebe:	95 1f       	adc	r25, r21
    2ec0:	c8 17       	cp	r28, r24
    2ec2:	d9 07       	cpc	r29, r25
    2ec4:	59 f4       	brne	.+22     	; 0x2edc <free+0x82>
    2ec6:	88 81       	ld	r24, Y
    2ec8:	99 81       	ldd	r25, Y+1	; 0x01
    2eca:	84 0f       	add	r24, r20
    2ecc:	95 1f       	adc	r25, r21
    2ece:	02 96       	adiw	r24, 0x02	; 2
    2ed0:	91 83       	std	Z+1, r25	; 0x01
    2ed2:	80 83       	st	Z, r24
    2ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ed8:	93 83       	std	Z+3, r25	; 0x03
    2eda:	82 83       	std	Z+2, r24	; 0x02
    2edc:	21 15       	cp	r18, r1
    2ede:	31 05       	cpc	r19, r1
    2ee0:	29 f4       	brne	.+10     	; 0x2eec <free+0x92>
    2ee2:	f0 93 be 03 	sts	0x03BE, r31	; 0x8003be <__flp+0x1>
    2ee6:	e0 93 bd 03 	sts	0x03BD, r30	; 0x8003bd <__flp>
    2eea:	3d c0       	rjmp	.+122    	; 0x2f66 <free+0x10c>
    2eec:	e9 01       	movw	r28, r18
    2eee:	fb 83       	std	Y+3, r31	; 0x03
    2ef0:	ea 83       	std	Y+2, r30	; 0x02
    2ef2:	49 91       	ld	r20, Y+
    2ef4:	59 91       	ld	r21, Y+
    2ef6:	c4 0f       	add	r28, r20
    2ef8:	d5 1f       	adc	r29, r21
    2efa:	ec 17       	cp	r30, r28
    2efc:	fd 07       	cpc	r31, r29
    2efe:	61 f4       	brne	.+24     	; 0x2f18 <free+0xbe>
    2f00:	80 81       	ld	r24, Z
    2f02:	91 81       	ldd	r25, Z+1	; 0x01
    2f04:	84 0f       	add	r24, r20
    2f06:	95 1f       	adc	r25, r21
    2f08:	02 96       	adiw	r24, 0x02	; 2
    2f0a:	e9 01       	movw	r28, r18
    2f0c:	99 83       	std	Y+1, r25	; 0x01
    2f0e:	88 83       	st	Y, r24
    2f10:	82 81       	ldd	r24, Z+2	; 0x02
    2f12:	93 81       	ldd	r25, Z+3	; 0x03
    2f14:	9b 83       	std	Y+3, r25	; 0x03
    2f16:	8a 83       	std	Y+2, r24	; 0x02
    2f18:	e0 e0       	ldi	r30, 0x00	; 0
    2f1a:	f0 e0       	ldi	r31, 0x00	; 0
    2f1c:	12 96       	adiw	r26, 0x02	; 2
    2f1e:	8d 91       	ld	r24, X+
    2f20:	9c 91       	ld	r25, X
    2f22:	13 97       	sbiw	r26, 0x03	; 3
    2f24:	00 97       	sbiw	r24, 0x00	; 0
    2f26:	19 f0       	breq	.+6      	; 0x2f2e <free+0xd4>
    2f28:	fd 01       	movw	r30, r26
    2f2a:	dc 01       	movw	r26, r24
    2f2c:	f7 cf       	rjmp	.-18     	; 0x2f1c <free+0xc2>
    2f2e:	8d 91       	ld	r24, X+
    2f30:	9c 91       	ld	r25, X
    2f32:	11 97       	sbiw	r26, 0x01	; 1
    2f34:	9d 01       	movw	r18, r26
    2f36:	2e 5f       	subi	r18, 0xFE	; 254
    2f38:	3f 4f       	sbci	r19, 0xFF	; 255
    2f3a:	82 0f       	add	r24, r18
    2f3c:	93 1f       	adc	r25, r19
    2f3e:	20 91 bb 03 	lds	r18, 0x03BB	; 0x8003bb <__brkval>
    2f42:	30 91 bc 03 	lds	r19, 0x03BC	; 0x8003bc <__brkval+0x1>
    2f46:	28 17       	cp	r18, r24
    2f48:	39 07       	cpc	r19, r25
    2f4a:	69 f4       	brne	.+26     	; 0x2f66 <free+0x10c>
    2f4c:	30 97       	sbiw	r30, 0x00	; 0
    2f4e:	29 f4       	brne	.+10     	; 0x2f5a <free+0x100>
    2f50:	10 92 be 03 	sts	0x03BE, r1	; 0x8003be <__flp+0x1>
    2f54:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <__flp>
    2f58:	02 c0       	rjmp	.+4      	; 0x2f5e <free+0x104>
    2f5a:	13 82       	std	Z+3, r1	; 0x03
    2f5c:	12 82       	std	Z+2, r1	; 0x02
    2f5e:	b0 93 bc 03 	sts	0x03BC, r27	; 0x8003bc <__brkval+0x1>
    2f62:	a0 93 bb 03 	sts	0x03BB, r26	; 0x8003bb <__brkval>
    2f66:	df 91       	pop	r29
    2f68:	cf 91       	pop	r28
    2f6a:	08 95       	ret

00002f6c <abort>:
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	f8 94       	cli
    2f72:	00 c3       	rjmp	.+1536   	; 0x3574 <_exit>

00002f74 <memcpy>:
    2f74:	fb 01       	movw	r30, r22
    2f76:	dc 01       	movw	r26, r24
    2f78:	02 c0       	rjmp	.+4      	; 0x2f7e <memcpy+0xa>
    2f7a:	01 90       	ld	r0, Z+
    2f7c:	0d 92       	st	X+, r0
    2f7e:	41 50       	subi	r20, 0x01	; 1
    2f80:	50 40       	sbci	r21, 0x00	; 0
    2f82:	d8 f7       	brcc	.-10     	; 0x2f7a <memcpy+0x6>
    2f84:	08 95       	ret

00002f86 <memset>:
    2f86:	dc 01       	movw	r26, r24
    2f88:	01 c0       	rjmp	.+2      	; 0x2f8c <memset+0x6>
    2f8a:	6d 93       	st	X+, r22
    2f8c:	41 50       	subi	r20, 0x01	; 1
    2f8e:	50 40       	sbci	r21, 0x00	; 0
    2f90:	e0 f7       	brcc	.-8      	; 0x2f8a <memset+0x4>
    2f92:	08 95       	ret

00002f94 <printf>:
    2f94:	cf 93       	push	r28
    2f96:	df 93       	push	r29
    2f98:	cd b7       	in	r28, 0x3d	; 61
    2f9a:	de b7       	in	r29, 0x3e	; 62
    2f9c:	ae 01       	movw	r20, r28
    2f9e:	4a 5f       	subi	r20, 0xFA	; 250
    2fa0:	5f 4f       	sbci	r21, 0xFF	; 255
    2fa2:	fa 01       	movw	r30, r20
    2fa4:	61 91       	ld	r22, Z+
    2fa6:	71 91       	ld	r23, Z+
    2fa8:	af 01       	movw	r20, r30
    2faa:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <__iob+0x2>
    2fae:	90 91 c2 03 	lds	r25, 0x03C2	; 0x8003c2 <__iob+0x3>
    2fb2:	33 d0       	rcall	.+102    	; 0x301a <vfprintf>
    2fb4:	df 91       	pop	r29
    2fb6:	cf 91       	pop	r28
    2fb8:	08 95       	ret

00002fba <puts>:
    2fba:	0f 93       	push	r16
    2fbc:	1f 93       	push	r17
    2fbe:	cf 93       	push	r28
    2fc0:	df 93       	push	r29
    2fc2:	e0 91 c1 03 	lds	r30, 0x03C1	; 0x8003c1 <__iob+0x2>
    2fc6:	f0 91 c2 03 	lds	r31, 0x03C2	; 0x8003c2 <__iob+0x3>
    2fca:	23 81       	ldd	r18, Z+3	; 0x03
    2fcc:	21 ff       	sbrs	r18, 1
    2fce:	1b c0       	rjmp	.+54     	; 0x3006 <puts+0x4c>
    2fd0:	8c 01       	movw	r16, r24
    2fd2:	d0 e0       	ldi	r29, 0x00	; 0
    2fd4:	c0 e0       	ldi	r28, 0x00	; 0
    2fd6:	f8 01       	movw	r30, r16
    2fd8:	81 91       	ld	r24, Z+
    2fda:	8f 01       	movw	r16, r30
    2fdc:	60 91 c1 03 	lds	r22, 0x03C1	; 0x8003c1 <__iob+0x2>
    2fe0:	70 91 c2 03 	lds	r23, 0x03C2	; 0x8003c2 <__iob+0x3>
    2fe4:	db 01       	movw	r26, r22
    2fe6:	18 96       	adiw	r26, 0x08	; 8
    2fe8:	ed 91       	ld	r30, X+
    2fea:	fc 91       	ld	r31, X
    2fec:	19 97       	sbiw	r26, 0x09	; 9
    2fee:	88 23       	and	r24, r24
    2ff0:	31 f0       	breq	.+12     	; 0x2ffe <puts+0x44>
    2ff2:	19 95       	eicall
    2ff4:	89 2b       	or	r24, r25
    2ff6:	79 f3       	breq	.-34     	; 0x2fd6 <puts+0x1c>
    2ff8:	df ef       	ldi	r29, 0xFF	; 255
    2ffa:	cf ef       	ldi	r28, 0xFF	; 255
    2ffc:	ec cf       	rjmp	.-40     	; 0x2fd6 <puts+0x1c>
    2ffe:	8a e0       	ldi	r24, 0x0A	; 10
    3000:	19 95       	eicall
    3002:	89 2b       	or	r24, r25
    3004:	19 f0       	breq	.+6      	; 0x300c <puts+0x52>
    3006:	8f ef       	ldi	r24, 0xFF	; 255
    3008:	9f ef       	ldi	r25, 0xFF	; 255
    300a:	02 c0       	rjmp	.+4      	; 0x3010 <puts+0x56>
    300c:	8d 2f       	mov	r24, r29
    300e:	9c 2f       	mov	r25, r28
    3010:	df 91       	pop	r29
    3012:	cf 91       	pop	r28
    3014:	1f 91       	pop	r17
    3016:	0f 91       	pop	r16
    3018:	08 95       	ret

0000301a <vfprintf>:
    301a:	2f 92       	push	r2
    301c:	3f 92       	push	r3
    301e:	4f 92       	push	r4
    3020:	5f 92       	push	r5
    3022:	6f 92       	push	r6
    3024:	7f 92       	push	r7
    3026:	8f 92       	push	r8
    3028:	9f 92       	push	r9
    302a:	af 92       	push	r10
    302c:	bf 92       	push	r11
    302e:	cf 92       	push	r12
    3030:	df 92       	push	r13
    3032:	ef 92       	push	r14
    3034:	ff 92       	push	r15
    3036:	0f 93       	push	r16
    3038:	1f 93       	push	r17
    303a:	cf 93       	push	r28
    303c:	df 93       	push	r29
    303e:	cd b7       	in	r28, 0x3d	; 61
    3040:	de b7       	in	r29, 0x3e	; 62
    3042:	2b 97       	sbiw	r28, 0x0b	; 11
    3044:	0f b6       	in	r0, 0x3f	; 63
    3046:	f8 94       	cli
    3048:	de bf       	out	0x3e, r29	; 62
    304a:	0f be       	out	0x3f, r0	; 63
    304c:	cd bf       	out	0x3d, r28	; 61
    304e:	6c 01       	movw	r12, r24
    3050:	7b 01       	movw	r14, r22
    3052:	8a 01       	movw	r16, r20
    3054:	fc 01       	movw	r30, r24
    3056:	17 82       	std	Z+7, r1	; 0x07
    3058:	16 82       	std	Z+6, r1	; 0x06
    305a:	83 81       	ldd	r24, Z+3	; 0x03
    305c:	81 ff       	sbrs	r24, 1
    305e:	bf c1       	rjmp	.+894    	; 0x33de <vfprintf+0x3c4>
    3060:	ce 01       	movw	r24, r28
    3062:	01 96       	adiw	r24, 0x01	; 1
    3064:	3c 01       	movw	r6, r24
    3066:	f6 01       	movw	r30, r12
    3068:	93 81       	ldd	r25, Z+3	; 0x03
    306a:	f7 01       	movw	r30, r14
    306c:	93 fd       	sbrc	r25, 3
    306e:	85 91       	lpm	r24, Z+
    3070:	93 ff       	sbrs	r25, 3
    3072:	81 91       	ld	r24, Z+
    3074:	7f 01       	movw	r14, r30
    3076:	88 23       	and	r24, r24
    3078:	09 f4       	brne	.+2      	; 0x307c <vfprintf+0x62>
    307a:	ad c1       	rjmp	.+858    	; 0x33d6 <vfprintf+0x3bc>
    307c:	85 32       	cpi	r24, 0x25	; 37
    307e:	39 f4       	brne	.+14     	; 0x308e <vfprintf+0x74>
    3080:	93 fd       	sbrc	r25, 3
    3082:	85 91       	lpm	r24, Z+
    3084:	93 ff       	sbrs	r25, 3
    3086:	81 91       	ld	r24, Z+
    3088:	7f 01       	movw	r14, r30
    308a:	85 32       	cpi	r24, 0x25	; 37
    308c:	21 f4       	brne	.+8      	; 0x3096 <vfprintf+0x7c>
    308e:	b6 01       	movw	r22, r12
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	d6 d1       	rcall	.+940    	; 0x3440 <fputc>
    3094:	e8 cf       	rjmp	.-48     	; 0x3066 <vfprintf+0x4c>
    3096:	91 2c       	mov	r9, r1
    3098:	21 2c       	mov	r2, r1
    309a:	31 2c       	mov	r3, r1
    309c:	ff e1       	ldi	r31, 0x1F	; 31
    309e:	f3 15       	cp	r31, r3
    30a0:	d8 f0       	brcs	.+54     	; 0x30d8 <vfprintf+0xbe>
    30a2:	8b 32       	cpi	r24, 0x2B	; 43
    30a4:	79 f0       	breq	.+30     	; 0x30c4 <vfprintf+0xaa>
    30a6:	38 f4       	brcc	.+14     	; 0x30b6 <vfprintf+0x9c>
    30a8:	80 32       	cpi	r24, 0x20	; 32
    30aa:	79 f0       	breq	.+30     	; 0x30ca <vfprintf+0xb0>
    30ac:	83 32       	cpi	r24, 0x23	; 35
    30ae:	a1 f4       	brne	.+40     	; 0x30d8 <vfprintf+0xbe>
    30b0:	23 2d       	mov	r18, r3
    30b2:	20 61       	ori	r18, 0x10	; 16
    30b4:	1d c0       	rjmp	.+58     	; 0x30f0 <vfprintf+0xd6>
    30b6:	8d 32       	cpi	r24, 0x2D	; 45
    30b8:	61 f0       	breq	.+24     	; 0x30d2 <vfprintf+0xb8>
    30ba:	80 33       	cpi	r24, 0x30	; 48
    30bc:	69 f4       	brne	.+26     	; 0x30d8 <vfprintf+0xbe>
    30be:	23 2d       	mov	r18, r3
    30c0:	21 60       	ori	r18, 0x01	; 1
    30c2:	16 c0       	rjmp	.+44     	; 0x30f0 <vfprintf+0xd6>
    30c4:	83 2d       	mov	r24, r3
    30c6:	82 60       	ori	r24, 0x02	; 2
    30c8:	38 2e       	mov	r3, r24
    30ca:	e3 2d       	mov	r30, r3
    30cc:	e4 60       	ori	r30, 0x04	; 4
    30ce:	3e 2e       	mov	r3, r30
    30d0:	2a c0       	rjmp	.+84     	; 0x3126 <vfprintf+0x10c>
    30d2:	f3 2d       	mov	r31, r3
    30d4:	f8 60       	ori	r31, 0x08	; 8
    30d6:	1d c0       	rjmp	.+58     	; 0x3112 <vfprintf+0xf8>
    30d8:	37 fc       	sbrc	r3, 7
    30da:	2d c0       	rjmp	.+90     	; 0x3136 <vfprintf+0x11c>
    30dc:	20 ed       	ldi	r18, 0xD0	; 208
    30de:	28 0f       	add	r18, r24
    30e0:	2a 30       	cpi	r18, 0x0A	; 10
    30e2:	40 f0       	brcs	.+16     	; 0x30f4 <vfprintf+0xda>
    30e4:	8e 32       	cpi	r24, 0x2E	; 46
    30e6:	b9 f4       	brne	.+46     	; 0x3116 <vfprintf+0xfc>
    30e8:	36 fc       	sbrc	r3, 6
    30ea:	75 c1       	rjmp	.+746    	; 0x33d6 <vfprintf+0x3bc>
    30ec:	23 2d       	mov	r18, r3
    30ee:	20 64       	ori	r18, 0x40	; 64
    30f0:	32 2e       	mov	r3, r18
    30f2:	19 c0       	rjmp	.+50     	; 0x3126 <vfprintf+0x10c>
    30f4:	36 fe       	sbrs	r3, 6
    30f6:	06 c0       	rjmp	.+12     	; 0x3104 <vfprintf+0xea>
    30f8:	8a e0       	ldi	r24, 0x0A	; 10
    30fa:	98 9e       	mul	r9, r24
    30fc:	20 0d       	add	r18, r0
    30fe:	11 24       	eor	r1, r1
    3100:	92 2e       	mov	r9, r18
    3102:	11 c0       	rjmp	.+34     	; 0x3126 <vfprintf+0x10c>
    3104:	ea e0       	ldi	r30, 0x0A	; 10
    3106:	2e 9e       	mul	r2, r30
    3108:	20 0d       	add	r18, r0
    310a:	11 24       	eor	r1, r1
    310c:	22 2e       	mov	r2, r18
    310e:	f3 2d       	mov	r31, r3
    3110:	f0 62       	ori	r31, 0x20	; 32
    3112:	3f 2e       	mov	r3, r31
    3114:	08 c0       	rjmp	.+16     	; 0x3126 <vfprintf+0x10c>
    3116:	8c 36       	cpi	r24, 0x6C	; 108
    3118:	21 f4       	brne	.+8      	; 0x3122 <vfprintf+0x108>
    311a:	83 2d       	mov	r24, r3
    311c:	80 68       	ori	r24, 0x80	; 128
    311e:	38 2e       	mov	r3, r24
    3120:	02 c0       	rjmp	.+4      	; 0x3126 <vfprintf+0x10c>
    3122:	88 36       	cpi	r24, 0x68	; 104
    3124:	41 f4       	brne	.+16     	; 0x3136 <vfprintf+0x11c>
    3126:	f7 01       	movw	r30, r14
    3128:	93 fd       	sbrc	r25, 3
    312a:	85 91       	lpm	r24, Z+
    312c:	93 ff       	sbrs	r25, 3
    312e:	81 91       	ld	r24, Z+
    3130:	7f 01       	movw	r14, r30
    3132:	81 11       	cpse	r24, r1
    3134:	b3 cf       	rjmp	.-154    	; 0x309c <vfprintf+0x82>
    3136:	98 2f       	mov	r25, r24
    3138:	9f 7d       	andi	r25, 0xDF	; 223
    313a:	95 54       	subi	r25, 0x45	; 69
    313c:	93 30       	cpi	r25, 0x03	; 3
    313e:	28 f4       	brcc	.+10     	; 0x314a <vfprintf+0x130>
    3140:	0c 5f       	subi	r16, 0xFC	; 252
    3142:	1f 4f       	sbci	r17, 0xFF	; 255
    3144:	9f e3       	ldi	r25, 0x3F	; 63
    3146:	99 83       	std	Y+1, r25	; 0x01
    3148:	0d c0       	rjmp	.+26     	; 0x3164 <vfprintf+0x14a>
    314a:	83 36       	cpi	r24, 0x63	; 99
    314c:	31 f0       	breq	.+12     	; 0x315a <vfprintf+0x140>
    314e:	83 37       	cpi	r24, 0x73	; 115
    3150:	71 f0       	breq	.+28     	; 0x316e <vfprintf+0x154>
    3152:	83 35       	cpi	r24, 0x53	; 83
    3154:	09 f0       	breq	.+2      	; 0x3158 <vfprintf+0x13e>
    3156:	55 c0       	rjmp	.+170    	; 0x3202 <vfprintf+0x1e8>
    3158:	20 c0       	rjmp	.+64     	; 0x319a <vfprintf+0x180>
    315a:	f8 01       	movw	r30, r16
    315c:	80 81       	ld	r24, Z
    315e:	89 83       	std	Y+1, r24	; 0x01
    3160:	0e 5f       	subi	r16, 0xFE	; 254
    3162:	1f 4f       	sbci	r17, 0xFF	; 255
    3164:	88 24       	eor	r8, r8
    3166:	83 94       	inc	r8
    3168:	91 2c       	mov	r9, r1
    316a:	53 01       	movw	r10, r6
    316c:	12 c0       	rjmp	.+36     	; 0x3192 <vfprintf+0x178>
    316e:	28 01       	movw	r4, r16
    3170:	f2 e0       	ldi	r31, 0x02	; 2
    3172:	4f 0e       	add	r4, r31
    3174:	51 1c       	adc	r5, r1
    3176:	f8 01       	movw	r30, r16
    3178:	a0 80       	ld	r10, Z
    317a:	b1 80       	ldd	r11, Z+1	; 0x01
    317c:	36 fe       	sbrs	r3, 6
    317e:	03 c0       	rjmp	.+6      	; 0x3186 <vfprintf+0x16c>
    3180:	69 2d       	mov	r22, r9
    3182:	70 e0       	ldi	r23, 0x00	; 0
    3184:	02 c0       	rjmp	.+4      	; 0x318a <vfprintf+0x170>
    3186:	6f ef       	ldi	r22, 0xFF	; 255
    3188:	7f ef       	ldi	r23, 0xFF	; 255
    318a:	c5 01       	movw	r24, r10
    318c:	4e d1       	rcall	.+668    	; 0x342a <strnlen>
    318e:	4c 01       	movw	r8, r24
    3190:	82 01       	movw	r16, r4
    3192:	f3 2d       	mov	r31, r3
    3194:	ff 77       	andi	r31, 0x7F	; 127
    3196:	3f 2e       	mov	r3, r31
    3198:	15 c0       	rjmp	.+42     	; 0x31c4 <vfprintf+0x1aa>
    319a:	28 01       	movw	r4, r16
    319c:	22 e0       	ldi	r18, 0x02	; 2
    319e:	42 0e       	add	r4, r18
    31a0:	51 1c       	adc	r5, r1
    31a2:	f8 01       	movw	r30, r16
    31a4:	a0 80       	ld	r10, Z
    31a6:	b1 80       	ldd	r11, Z+1	; 0x01
    31a8:	36 fe       	sbrs	r3, 6
    31aa:	03 c0       	rjmp	.+6      	; 0x31b2 <vfprintf+0x198>
    31ac:	69 2d       	mov	r22, r9
    31ae:	70 e0       	ldi	r23, 0x00	; 0
    31b0:	02 c0       	rjmp	.+4      	; 0x31b6 <vfprintf+0x19c>
    31b2:	6f ef       	ldi	r22, 0xFF	; 255
    31b4:	7f ef       	ldi	r23, 0xFF	; 255
    31b6:	c5 01       	movw	r24, r10
    31b8:	2d d1       	rcall	.+602    	; 0x3414 <strnlen_P>
    31ba:	4c 01       	movw	r8, r24
    31bc:	f3 2d       	mov	r31, r3
    31be:	f0 68       	ori	r31, 0x80	; 128
    31c0:	3f 2e       	mov	r3, r31
    31c2:	82 01       	movw	r16, r4
    31c4:	33 fc       	sbrc	r3, 3
    31c6:	19 c0       	rjmp	.+50     	; 0x31fa <vfprintf+0x1e0>
    31c8:	82 2d       	mov	r24, r2
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	88 16       	cp	r8, r24
    31ce:	99 06       	cpc	r9, r25
    31d0:	a0 f4       	brcc	.+40     	; 0x31fa <vfprintf+0x1e0>
    31d2:	b6 01       	movw	r22, r12
    31d4:	80 e2       	ldi	r24, 0x20	; 32
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	33 d1       	rcall	.+614    	; 0x3440 <fputc>
    31da:	2a 94       	dec	r2
    31dc:	f5 cf       	rjmp	.-22     	; 0x31c8 <vfprintf+0x1ae>
    31de:	f5 01       	movw	r30, r10
    31e0:	37 fc       	sbrc	r3, 7
    31e2:	85 91       	lpm	r24, Z+
    31e4:	37 fe       	sbrs	r3, 7
    31e6:	81 91       	ld	r24, Z+
    31e8:	5f 01       	movw	r10, r30
    31ea:	b6 01       	movw	r22, r12
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	28 d1       	rcall	.+592    	; 0x3440 <fputc>
    31f0:	21 10       	cpse	r2, r1
    31f2:	2a 94       	dec	r2
    31f4:	21 e0       	ldi	r18, 0x01	; 1
    31f6:	82 1a       	sub	r8, r18
    31f8:	91 08       	sbc	r9, r1
    31fa:	81 14       	cp	r8, r1
    31fc:	91 04       	cpc	r9, r1
    31fe:	79 f7       	brne	.-34     	; 0x31de <vfprintf+0x1c4>
    3200:	e1 c0       	rjmp	.+450    	; 0x33c4 <vfprintf+0x3aa>
    3202:	84 36       	cpi	r24, 0x64	; 100
    3204:	11 f0       	breq	.+4      	; 0x320a <vfprintf+0x1f0>
    3206:	89 36       	cpi	r24, 0x69	; 105
    3208:	39 f5       	brne	.+78     	; 0x3258 <vfprintf+0x23e>
    320a:	f8 01       	movw	r30, r16
    320c:	37 fe       	sbrs	r3, 7
    320e:	07 c0       	rjmp	.+14     	; 0x321e <vfprintf+0x204>
    3210:	60 81       	ld	r22, Z
    3212:	71 81       	ldd	r23, Z+1	; 0x01
    3214:	82 81       	ldd	r24, Z+2	; 0x02
    3216:	93 81       	ldd	r25, Z+3	; 0x03
    3218:	0c 5f       	subi	r16, 0xFC	; 252
    321a:	1f 4f       	sbci	r17, 0xFF	; 255
    321c:	08 c0       	rjmp	.+16     	; 0x322e <vfprintf+0x214>
    321e:	60 81       	ld	r22, Z
    3220:	71 81       	ldd	r23, Z+1	; 0x01
    3222:	07 2e       	mov	r0, r23
    3224:	00 0c       	add	r0, r0
    3226:	88 0b       	sbc	r24, r24
    3228:	99 0b       	sbc	r25, r25
    322a:	0e 5f       	subi	r16, 0xFE	; 254
    322c:	1f 4f       	sbci	r17, 0xFF	; 255
    322e:	f3 2d       	mov	r31, r3
    3230:	ff 76       	andi	r31, 0x6F	; 111
    3232:	3f 2e       	mov	r3, r31
    3234:	97 ff       	sbrs	r25, 7
    3236:	09 c0       	rjmp	.+18     	; 0x324a <vfprintf+0x230>
    3238:	90 95       	com	r25
    323a:	80 95       	com	r24
    323c:	70 95       	com	r23
    323e:	61 95       	neg	r22
    3240:	7f 4f       	sbci	r23, 0xFF	; 255
    3242:	8f 4f       	sbci	r24, 0xFF	; 255
    3244:	9f 4f       	sbci	r25, 0xFF	; 255
    3246:	f0 68       	ori	r31, 0x80	; 128
    3248:	3f 2e       	mov	r3, r31
    324a:	2a e0       	ldi	r18, 0x0A	; 10
    324c:	30 e0       	ldi	r19, 0x00	; 0
    324e:	a3 01       	movw	r20, r6
    3250:	33 d1       	rcall	.+614    	; 0x34b8 <__ultoa_invert>
    3252:	88 2e       	mov	r8, r24
    3254:	86 18       	sub	r8, r6
    3256:	44 c0       	rjmp	.+136    	; 0x32e0 <vfprintf+0x2c6>
    3258:	85 37       	cpi	r24, 0x75	; 117
    325a:	31 f4       	brne	.+12     	; 0x3268 <vfprintf+0x24e>
    325c:	23 2d       	mov	r18, r3
    325e:	2f 7e       	andi	r18, 0xEF	; 239
    3260:	b2 2e       	mov	r11, r18
    3262:	2a e0       	ldi	r18, 0x0A	; 10
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	25 c0       	rjmp	.+74     	; 0x32b2 <vfprintf+0x298>
    3268:	93 2d       	mov	r25, r3
    326a:	99 7f       	andi	r25, 0xF9	; 249
    326c:	b9 2e       	mov	r11, r25
    326e:	8f 36       	cpi	r24, 0x6F	; 111
    3270:	c1 f0       	breq	.+48     	; 0x32a2 <vfprintf+0x288>
    3272:	18 f4       	brcc	.+6      	; 0x327a <vfprintf+0x260>
    3274:	88 35       	cpi	r24, 0x58	; 88
    3276:	79 f0       	breq	.+30     	; 0x3296 <vfprintf+0x27c>
    3278:	ae c0       	rjmp	.+348    	; 0x33d6 <vfprintf+0x3bc>
    327a:	80 37       	cpi	r24, 0x70	; 112
    327c:	19 f0       	breq	.+6      	; 0x3284 <vfprintf+0x26a>
    327e:	88 37       	cpi	r24, 0x78	; 120
    3280:	21 f0       	breq	.+8      	; 0x328a <vfprintf+0x270>
    3282:	a9 c0       	rjmp	.+338    	; 0x33d6 <vfprintf+0x3bc>
    3284:	e9 2f       	mov	r30, r25
    3286:	e0 61       	ori	r30, 0x10	; 16
    3288:	be 2e       	mov	r11, r30
    328a:	b4 fe       	sbrs	r11, 4
    328c:	0d c0       	rjmp	.+26     	; 0x32a8 <vfprintf+0x28e>
    328e:	fb 2d       	mov	r31, r11
    3290:	f4 60       	ori	r31, 0x04	; 4
    3292:	bf 2e       	mov	r11, r31
    3294:	09 c0       	rjmp	.+18     	; 0x32a8 <vfprintf+0x28e>
    3296:	34 fe       	sbrs	r3, 4
    3298:	0a c0       	rjmp	.+20     	; 0x32ae <vfprintf+0x294>
    329a:	29 2f       	mov	r18, r25
    329c:	26 60       	ori	r18, 0x06	; 6
    329e:	b2 2e       	mov	r11, r18
    32a0:	06 c0       	rjmp	.+12     	; 0x32ae <vfprintf+0x294>
    32a2:	28 e0       	ldi	r18, 0x08	; 8
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	05 c0       	rjmp	.+10     	; 0x32b2 <vfprintf+0x298>
    32a8:	20 e1       	ldi	r18, 0x10	; 16
    32aa:	30 e0       	ldi	r19, 0x00	; 0
    32ac:	02 c0       	rjmp	.+4      	; 0x32b2 <vfprintf+0x298>
    32ae:	20 e1       	ldi	r18, 0x10	; 16
    32b0:	32 e0       	ldi	r19, 0x02	; 2
    32b2:	f8 01       	movw	r30, r16
    32b4:	b7 fe       	sbrs	r11, 7
    32b6:	07 c0       	rjmp	.+14     	; 0x32c6 <vfprintf+0x2ac>
    32b8:	60 81       	ld	r22, Z
    32ba:	71 81       	ldd	r23, Z+1	; 0x01
    32bc:	82 81       	ldd	r24, Z+2	; 0x02
    32be:	93 81       	ldd	r25, Z+3	; 0x03
    32c0:	0c 5f       	subi	r16, 0xFC	; 252
    32c2:	1f 4f       	sbci	r17, 0xFF	; 255
    32c4:	06 c0       	rjmp	.+12     	; 0x32d2 <vfprintf+0x2b8>
    32c6:	60 81       	ld	r22, Z
    32c8:	71 81       	ldd	r23, Z+1	; 0x01
    32ca:	80 e0       	ldi	r24, 0x00	; 0
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	0e 5f       	subi	r16, 0xFE	; 254
    32d0:	1f 4f       	sbci	r17, 0xFF	; 255
    32d2:	a3 01       	movw	r20, r6
    32d4:	f1 d0       	rcall	.+482    	; 0x34b8 <__ultoa_invert>
    32d6:	88 2e       	mov	r8, r24
    32d8:	86 18       	sub	r8, r6
    32da:	fb 2d       	mov	r31, r11
    32dc:	ff 77       	andi	r31, 0x7F	; 127
    32de:	3f 2e       	mov	r3, r31
    32e0:	36 fe       	sbrs	r3, 6
    32e2:	0d c0       	rjmp	.+26     	; 0x32fe <vfprintf+0x2e4>
    32e4:	23 2d       	mov	r18, r3
    32e6:	2e 7f       	andi	r18, 0xFE	; 254
    32e8:	a2 2e       	mov	r10, r18
    32ea:	89 14       	cp	r8, r9
    32ec:	58 f4       	brcc	.+22     	; 0x3304 <vfprintf+0x2ea>
    32ee:	34 fe       	sbrs	r3, 4
    32f0:	0b c0       	rjmp	.+22     	; 0x3308 <vfprintf+0x2ee>
    32f2:	32 fc       	sbrc	r3, 2
    32f4:	09 c0       	rjmp	.+18     	; 0x3308 <vfprintf+0x2ee>
    32f6:	83 2d       	mov	r24, r3
    32f8:	8e 7e       	andi	r24, 0xEE	; 238
    32fa:	a8 2e       	mov	r10, r24
    32fc:	05 c0       	rjmp	.+10     	; 0x3308 <vfprintf+0x2ee>
    32fe:	b8 2c       	mov	r11, r8
    3300:	a3 2c       	mov	r10, r3
    3302:	03 c0       	rjmp	.+6      	; 0x330a <vfprintf+0x2f0>
    3304:	b8 2c       	mov	r11, r8
    3306:	01 c0       	rjmp	.+2      	; 0x330a <vfprintf+0x2f0>
    3308:	b9 2c       	mov	r11, r9
    330a:	a4 fe       	sbrs	r10, 4
    330c:	0f c0       	rjmp	.+30     	; 0x332c <vfprintf+0x312>
    330e:	fe 01       	movw	r30, r28
    3310:	e8 0d       	add	r30, r8
    3312:	f1 1d       	adc	r31, r1
    3314:	80 81       	ld	r24, Z
    3316:	80 33       	cpi	r24, 0x30	; 48
    3318:	21 f4       	brne	.+8      	; 0x3322 <vfprintf+0x308>
    331a:	9a 2d       	mov	r25, r10
    331c:	99 7e       	andi	r25, 0xE9	; 233
    331e:	a9 2e       	mov	r10, r25
    3320:	09 c0       	rjmp	.+18     	; 0x3334 <vfprintf+0x31a>
    3322:	a2 fe       	sbrs	r10, 2
    3324:	06 c0       	rjmp	.+12     	; 0x3332 <vfprintf+0x318>
    3326:	b3 94       	inc	r11
    3328:	b3 94       	inc	r11
    332a:	04 c0       	rjmp	.+8      	; 0x3334 <vfprintf+0x31a>
    332c:	8a 2d       	mov	r24, r10
    332e:	86 78       	andi	r24, 0x86	; 134
    3330:	09 f0       	breq	.+2      	; 0x3334 <vfprintf+0x31a>
    3332:	b3 94       	inc	r11
    3334:	a3 fc       	sbrc	r10, 3
    3336:	10 c0       	rjmp	.+32     	; 0x3358 <vfprintf+0x33e>
    3338:	a0 fe       	sbrs	r10, 0
    333a:	06 c0       	rjmp	.+12     	; 0x3348 <vfprintf+0x32e>
    333c:	b2 14       	cp	r11, r2
    333e:	80 f4       	brcc	.+32     	; 0x3360 <vfprintf+0x346>
    3340:	28 0c       	add	r2, r8
    3342:	92 2c       	mov	r9, r2
    3344:	9b 18       	sub	r9, r11
    3346:	0d c0       	rjmp	.+26     	; 0x3362 <vfprintf+0x348>
    3348:	b2 14       	cp	r11, r2
    334a:	58 f4       	brcc	.+22     	; 0x3362 <vfprintf+0x348>
    334c:	b6 01       	movw	r22, r12
    334e:	80 e2       	ldi	r24, 0x20	; 32
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	76 d0       	rcall	.+236    	; 0x3440 <fputc>
    3354:	b3 94       	inc	r11
    3356:	f8 cf       	rjmp	.-16     	; 0x3348 <vfprintf+0x32e>
    3358:	b2 14       	cp	r11, r2
    335a:	18 f4       	brcc	.+6      	; 0x3362 <vfprintf+0x348>
    335c:	2b 18       	sub	r2, r11
    335e:	02 c0       	rjmp	.+4      	; 0x3364 <vfprintf+0x34a>
    3360:	98 2c       	mov	r9, r8
    3362:	21 2c       	mov	r2, r1
    3364:	a4 fe       	sbrs	r10, 4
    3366:	0f c0       	rjmp	.+30     	; 0x3386 <vfprintf+0x36c>
    3368:	b6 01       	movw	r22, r12
    336a:	80 e3       	ldi	r24, 0x30	; 48
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	68 d0       	rcall	.+208    	; 0x3440 <fputc>
    3370:	a2 fe       	sbrs	r10, 2
    3372:	16 c0       	rjmp	.+44     	; 0x33a0 <vfprintf+0x386>
    3374:	a1 fc       	sbrc	r10, 1
    3376:	03 c0       	rjmp	.+6      	; 0x337e <vfprintf+0x364>
    3378:	88 e7       	ldi	r24, 0x78	; 120
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	02 c0       	rjmp	.+4      	; 0x3382 <vfprintf+0x368>
    337e:	88 e5       	ldi	r24, 0x58	; 88
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	b6 01       	movw	r22, r12
    3384:	0c c0       	rjmp	.+24     	; 0x339e <vfprintf+0x384>
    3386:	8a 2d       	mov	r24, r10
    3388:	86 78       	andi	r24, 0x86	; 134
    338a:	51 f0       	breq	.+20     	; 0x33a0 <vfprintf+0x386>
    338c:	a1 fe       	sbrs	r10, 1
    338e:	02 c0       	rjmp	.+4      	; 0x3394 <vfprintf+0x37a>
    3390:	8b e2       	ldi	r24, 0x2B	; 43
    3392:	01 c0       	rjmp	.+2      	; 0x3396 <vfprintf+0x37c>
    3394:	80 e2       	ldi	r24, 0x20	; 32
    3396:	a7 fc       	sbrc	r10, 7
    3398:	8d e2       	ldi	r24, 0x2D	; 45
    339a:	b6 01       	movw	r22, r12
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	50 d0       	rcall	.+160    	; 0x3440 <fputc>
    33a0:	89 14       	cp	r8, r9
    33a2:	30 f4       	brcc	.+12     	; 0x33b0 <vfprintf+0x396>
    33a4:	b6 01       	movw	r22, r12
    33a6:	80 e3       	ldi	r24, 0x30	; 48
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	4a d0       	rcall	.+148    	; 0x3440 <fputc>
    33ac:	9a 94       	dec	r9
    33ae:	f8 cf       	rjmp	.-16     	; 0x33a0 <vfprintf+0x386>
    33b0:	8a 94       	dec	r8
    33b2:	f3 01       	movw	r30, r6
    33b4:	e8 0d       	add	r30, r8
    33b6:	f1 1d       	adc	r31, r1
    33b8:	80 81       	ld	r24, Z
    33ba:	b6 01       	movw	r22, r12
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	40 d0       	rcall	.+128    	; 0x3440 <fputc>
    33c0:	81 10       	cpse	r8, r1
    33c2:	f6 cf       	rjmp	.-20     	; 0x33b0 <vfprintf+0x396>
    33c4:	22 20       	and	r2, r2
    33c6:	09 f4       	brne	.+2      	; 0x33ca <vfprintf+0x3b0>
    33c8:	4e ce       	rjmp	.-868    	; 0x3066 <vfprintf+0x4c>
    33ca:	b6 01       	movw	r22, r12
    33cc:	80 e2       	ldi	r24, 0x20	; 32
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	37 d0       	rcall	.+110    	; 0x3440 <fputc>
    33d2:	2a 94       	dec	r2
    33d4:	f7 cf       	rjmp	.-18     	; 0x33c4 <vfprintf+0x3aa>
    33d6:	f6 01       	movw	r30, r12
    33d8:	86 81       	ldd	r24, Z+6	; 0x06
    33da:	97 81       	ldd	r25, Z+7	; 0x07
    33dc:	02 c0       	rjmp	.+4      	; 0x33e2 <vfprintf+0x3c8>
    33de:	8f ef       	ldi	r24, 0xFF	; 255
    33e0:	9f ef       	ldi	r25, 0xFF	; 255
    33e2:	2b 96       	adiw	r28, 0x0b	; 11
    33e4:	0f b6       	in	r0, 0x3f	; 63
    33e6:	f8 94       	cli
    33e8:	de bf       	out	0x3e, r29	; 62
    33ea:	0f be       	out	0x3f, r0	; 63
    33ec:	cd bf       	out	0x3d, r28	; 61
    33ee:	df 91       	pop	r29
    33f0:	cf 91       	pop	r28
    33f2:	1f 91       	pop	r17
    33f4:	0f 91       	pop	r16
    33f6:	ff 90       	pop	r15
    33f8:	ef 90       	pop	r14
    33fa:	df 90       	pop	r13
    33fc:	cf 90       	pop	r12
    33fe:	bf 90       	pop	r11
    3400:	af 90       	pop	r10
    3402:	9f 90       	pop	r9
    3404:	8f 90       	pop	r8
    3406:	7f 90       	pop	r7
    3408:	6f 90       	pop	r6
    340a:	5f 90       	pop	r5
    340c:	4f 90       	pop	r4
    340e:	3f 90       	pop	r3
    3410:	2f 90       	pop	r2
    3412:	08 95       	ret

00003414 <strnlen_P>:
    3414:	fc 01       	movw	r30, r24
    3416:	05 90       	lpm	r0, Z+
    3418:	61 50       	subi	r22, 0x01	; 1
    341a:	70 40       	sbci	r23, 0x00	; 0
    341c:	01 10       	cpse	r0, r1
    341e:	d8 f7       	brcc	.-10     	; 0x3416 <strnlen_P+0x2>
    3420:	80 95       	com	r24
    3422:	90 95       	com	r25
    3424:	8e 0f       	add	r24, r30
    3426:	9f 1f       	adc	r25, r31
    3428:	08 95       	ret

0000342a <strnlen>:
    342a:	fc 01       	movw	r30, r24
    342c:	61 50       	subi	r22, 0x01	; 1
    342e:	70 40       	sbci	r23, 0x00	; 0
    3430:	01 90       	ld	r0, Z+
    3432:	01 10       	cpse	r0, r1
    3434:	d8 f7       	brcc	.-10     	; 0x342c <strnlen+0x2>
    3436:	80 95       	com	r24
    3438:	90 95       	com	r25
    343a:	8e 0f       	add	r24, r30
    343c:	9f 1f       	adc	r25, r31
    343e:	08 95       	ret

00003440 <fputc>:
    3440:	0f 93       	push	r16
    3442:	1f 93       	push	r17
    3444:	cf 93       	push	r28
    3446:	df 93       	push	r29
    3448:	fb 01       	movw	r30, r22
    344a:	23 81       	ldd	r18, Z+3	; 0x03
    344c:	21 fd       	sbrc	r18, 1
    344e:	03 c0       	rjmp	.+6      	; 0x3456 <fputc+0x16>
    3450:	8f ef       	ldi	r24, 0xFF	; 255
    3452:	9f ef       	ldi	r25, 0xFF	; 255
    3454:	2c c0       	rjmp	.+88     	; 0x34ae <fputc+0x6e>
    3456:	22 ff       	sbrs	r18, 2
    3458:	16 c0       	rjmp	.+44     	; 0x3486 <fputc+0x46>
    345a:	46 81       	ldd	r20, Z+6	; 0x06
    345c:	57 81       	ldd	r21, Z+7	; 0x07
    345e:	24 81       	ldd	r18, Z+4	; 0x04
    3460:	35 81       	ldd	r19, Z+5	; 0x05
    3462:	42 17       	cp	r20, r18
    3464:	53 07       	cpc	r21, r19
    3466:	44 f4       	brge	.+16     	; 0x3478 <fputc+0x38>
    3468:	a0 81       	ld	r26, Z
    346a:	b1 81       	ldd	r27, Z+1	; 0x01
    346c:	9d 01       	movw	r18, r26
    346e:	2f 5f       	subi	r18, 0xFF	; 255
    3470:	3f 4f       	sbci	r19, 0xFF	; 255
    3472:	31 83       	std	Z+1, r19	; 0x01
    3474:	20 83       	st	Z, r18
    3476:	8c 93       	st	X, r24
    3478:	26 81       	ldd	r18, Z+6	; 0x06
    347a:	37 81       	ldd	r19, Z+7	; 0x07
    347c:	2f 5f       	subi	r18, 0xFF	; 255
    347e:	3f 4f       	sbci	r19, 0xFF	; 255
    3480:	37 83       	std	Z+7, r19	; 0x07
    3482:	26 83       	std	Z+6, r18	; 0x06
    3484:	14 c0       	rjmp	.+40     	; 0x34ae <fputc+0x6e>
    3486:	8b 01       	movw	r16, r22
    3488:	ec 01       	movw	r28, r24
    348a:	fb 01       	movw	r30, r22
    348c:	00 84       	ldd	r0, Z+8	; 0x08
    348e:	f1 85       	ldd	r31, Z+9	; 0x09
    3490:	e0 2d       	mov	r30, r0
    3492:	19 95       	eicall
    3494:	89 2b       	or	r24, r25
    3496:	e1 f6       	brne	.-72     	; 0x3450 <fputc+0x10>
    3498:	d8 01       	movw	r26, r16
    349a:	16 96       	adiw	r26, 0x06	; 6
    349c:	8d 91       	ld	r24, X+
    349e:	9c 91       	ld	r25, X
    34a0:	17 97       	sbiw	r26, 0x07	; 7
    34a2:	01 96       	adiw	r24, 0x01	; 1
    34a4:	17 96       	adiw	r26, 0x07	; 7
    34a6:	9c 93       	st	X, r25
    34a8:	8e 93       	st	-X, r24
    34aa:	16 97       	sbiw	r26, 0x06	; 6
    34ac:	ce 01       	movw	r24, r28
    34ae:	df 91       	pop	r29
    34b0:	cf 91       	pop	r28
    34b2:	1f 91       	pop	r17
    34b4:	0f 91       	pop	r16
    34b6:	08 95       	ret

000034b8 <__ultoa_invert>:
    34b8:	fa 01       	movw	r30, r20
    34ba:	aa 27       	eor	r26, r26
    34bc:	28 30       	cpi	r18, 0x08	; 8
    34be:	51 f1       	breq	.+84     	; 0x3514 <__ultoa_invert+0x5c>
    34c0:	20 31       	cpi	r18, 0x10	; 16
    34c2:	81 f1       	breq	.+96     	; 0x3524 <__ultoa_invert+0x6c>
    34c4:	e8 94       	clt
    34c6:	6f 93       	push	r22
    34c8:	6e 7f       	andi	r22, 0xFE	; 254
    34ca:	6e 5f       	subi	r22, 0xFE	; 254
    34cc:	7f 4f       	sbci	r23, 0xFF	; 255
    34ce:	8f 4f       	sbci	r24, 0xFF	; 255
    34d0:	9f 4f       	sbci	r25, 0xFF	; 255
    34d2:	af 4f       	sbci	r26, 0xFF	; 255
    34d4:	b1 e0       	ldi	r27, 0x01	; 1
    34d6:	3e d0       	rcall	.+124    	; 0x3554 <__ultoa_invert+0x9c>
    34d8:	b4 e0       	ldi	r27, 0x04	; 4
    34da:	3c d0       	rcall	.+120    	; 0x3554 <__ultoa_invert+0x9c>
    34dc:	67 0f       	add	r22, r23
    34de:	78 1f       	adc	r23, r24
    34e0:	89 1f       	adc	r24, r25
    34e2:	9a 1f       	adc	r25, r26
    34e4:	a1 1d       	adc	r26, r1
    34e6:	68 0f       	add	r22, r24
    34e8:	79 1f       	adc	r23, r25
    34ea:	8a 1f       	adc	r24, r26
    34ec:	91 1d       	adc	r25, r1
    34ee:	a1 1d       	adc	r26, r1
    34f0:	6a 0f       	add	r22, r26
    34f2:	71 1d       	adc	r23, r1
    34f4:	81 1d       	adc	r24, r1
    34f6:	91 1d       	adc	r25, r1
    34f8:	a1 1d       	adc	r26, r1
    34fa:	20 d0       	rcall	.+64     	; 0x353c <__ultoa_invert+0x84>
    34fc:	09 f4       	brne	.+2      	; 0x3500 <__ultoa_invert+0x48>
    34fe:	68 94       	set
    3500:	3f 91       	pop	r19
    3502:	2a e0       	ldi	r18, 0x0A	; 10
    3504:	26 9f       	mul	r18, r22
    3506:	11 24       	eor	r1, r1
    3508:	30 19       	sub	r19, r0
    350a:	30 5d       	subi	r19, 0xD0	; 208
    350c:	31 93       	st	Z+, r19
    350e:	de f6       	brtc	.-74     	; 0x34c6 <__ultoa_invert+0xe>
    3510:	cf 01       	movw	r24, r30
    3512:	08 95       	ret
    3514:	46 2f       	mov	r20, r22
    3516:	47 70       	andi	r20, 0x07	; 7
    3518:	40 5d       	subi	r20, 0xD0	; 208
    351a:	41 93       	st	Z+, r20
    351c:	b3 e0       	ldi	r27, 0x03	; 3
    351e:	0f d0       	rcall	.+30     	; 0x353e <__ultoa_invert+0x86>
    3520:	c9 f7       	brne	.-14     	; 0x3514 <__ultoa_invert+0x5c>
    3522:	f6 cf       	rjmp	.-20     	; 0x3510 <__ultoa_invert+0x58>
    3524:	46 2f       	mov	r20, r22
    3526:	4f 70       	andi	r20, 0x0F	; 15
    3528:	40 5d       	subi	r20, 0xD0	; 208
    352a:	4a 33       	cpi	r20, 0x3A	; 58
    352c:	18 f0       	brcs	.+6      	; 0x3534 <__ultoa_invert+0x7c>
    352e:	49 5d       	subi	r20, 0xD9	; 217
    3530:	31 fd       	sbrc	r19, 1
    3532:	40 52       	subi	r20, 0x20	; 32
    3534:	41 93       	st	Z+, r20
    3536:	02 d0       	rcall	.+4      	; 0x353c <__ultoa_invert+0x84>
    3538:	a9 f7       	brne	.-22     	; 0x3524 <__ultoa_invert+0x6c>
    353a:	ea cf       	rjmp	.-44     	; 0x3510 <__ultoa_invert+0x58>
    353c:	b4 e0       	ldi	r27, 0x04	; 4
    353e:	a6 95       	lsr	r26
    3540:	97 95       	ror	r25
    3542:	87 95       	ror	r24
    3544:	77 95       	ror	r23
    3546:	67 95       	ror	r22
    3548:	ba 95       	dec	r27
    354a:	c9 f7       	brne	.-14     	; 0x353e <__ultoa_invert+0x86>
    354c:	00 97       	sbiw	r24, 0x00	; 0
    354e:	61 05       	cpc	r22, r1
    3550:	71 05       	cpc	r23, r1
    3552:	08 95       	ret
    3554:	9b 01       	movw	r18, r22
    3556:	ac 01       	movw	r20, r24
    3558:	0a 2e       	mov	r0, r26
    355a:	06 94       	lsr	r0
    355c:	57 95       	ror	r21
    355e:	47 95       	ror	r20
    3560:	37 95       	ror	r19
    3562:	27 95       	ror	r18
    3564:	ba 95       	dec	r27
    3566:	c9 f7       	brne	.-14     	; 0x355a <__ultoa_invert+0xa2>
    3568:	62 0f       	add	r22, r18
    356a:	73 1f       	adc	r23, r19
    356c:	84 1f       	adc	r24, r20
    356e:	95 1f       	adc	r25, r21
    3570:	a0 1d       	adc	r26, r0
    3572:	08 95       	ret

00003574 <_exit>:
    3574:	f8 94       	cli

00003576 <__stop_program>:
    3576:	ff cf       	rjmp	.-2      	; 0x3576 <__stop_program>
