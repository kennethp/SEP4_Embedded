
app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000058a  00800200  00004db4  00004e48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004db4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000257  0080078a  0080078a  000053d2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000053d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005430  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a60  00000000  00000000  00005470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d421  00000000  00000000  00005ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003495  00000000  00000000  000132f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000637c  00000000  00000000  00016786  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000022f0  00000000  00000000  0001cb04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000452c  00000000  00000000  0001edf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000bf0a  00000000  00000000  00023320  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a90  00000000  00000000  0002f22a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	05 c2       	rjmp	.+1034   	; 0x40c <__ctors_end>
       2:	00 00       	nop
       4:	23 c2       	rjmp	.+1094   	; 0x44c <__bad_interrupt>
       6:	00 00       	nop
       8:	21 c2       	rjmp	.+1090   	; 0x44c <__bad_interrupt>
       a:	00 00       	nop
       c:	1f c2       	rjmp	.+1086   	; 0x44c <__bad_interrupt>
       e:	00 00       	nop
      10:	1d c2       	rjmp	.+1082   	; 0x44c <__bad_interrupt>
      12:	00 00       	nop
      14:	1b c2       	rjmp	.+1078   	; 0x44c <__bad_interrupt>
      16:	00 00       	nop
      18:	19 c2       	rjmp	.+1074   	; 0x44c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	17 c2       	rjmp	.+1070   	; 0x44c <__bad_interrupt>
      1e:	00 00       	nop
      20:	15 c2       	rjmp	.+1066   	; 0x44c <__bad_interrupt>
      22:	00 00       	nop
      24:	13 c2       	rjmp	.+1062   	; 0x44c <__bad_interrupt>
      26:	00 00       	nop
      28:	11 c2       	rjmp	.+1058   	; 0x44c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0f c2       	rjmp	.+1054   	; 0x44c <__bad_interrupt>
      2e:	00 00       	nop
      30:	8b c6       	rjmp	.+3350   	; 0xd48 <__vector_12>
      32:	00 00       	nop
      34:	0b c2       	rjmp	.+1046   	; 0x44c <__bad_interrupt>
      36:	00 00       	nop
      38:	09 c2       	rjmp	.+1042   	; 0x44c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	07 c2       	rjmp	.+1038   	; 0x44c <__bad_interrupt>
      3e:	00 00       	nop
      40:	05 c2       	rjmp	.+1034   	; 0x44c <__bad_interrupt>
      42:	00 00       	nop
      44:	03 c2       	rjmp	.+1030   	; 0x44c <__bad_interrupt>
      46:	00 00       	nop
      48:	01 c2       	rjmp	.+1026   	; 0x44c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ff c1       	rjmp	.+1022   	; 0x44c <__bad_interrupt>
      4e:	00 00       	nop
      50:	fd c1       	rjmp	.+1018   	; 0x44c <__bad_interrupt>
      52:	00 00       	nop
      54:	fb c1       	rjmp	.+1014   	; 0x44c <__bad_interrupt>
      56:	00 00       	nop
      58:	f9 c1       	rjmp	.+1010   	; 0x44c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f7 c1       	rjmp	.+1006   	; 0x44c <__bad_interrupt>
      5e:	00 00       	nop
      60:	f5 c1       	rjmp	.+1002   	; 0x44c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 e6 14 	jmp	0x29cc	; 0x29cc <__vector_25>
      68:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <__vector_26>
      6c:	ef c1       	rjmp	.+990    	; 0x44c <__bad_interrupt>
      6e:	00 00       	nop
      70:	ed c1       	rjmp	.+986    	; 0x44c <__bad_interrupt>
      72:	00 00       	nop
      74:	eb c1       	rjmp	.+982    	; 0x44c <__bad_interrupt>
      76:	00 00       	nop
      78:	e9 c1       	rjmp	.+978    	; 0x44c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e7 c1       	rjmp	.+974    	; 0x44c <__bad_interrupt>
      7e:	00 00       	nop
      80:	e5 c1       	rjmp	.+970    	; 0x44c <__bad_interrupt>
      82:	00 00       	nop
      84:	e3 c1       	rjmp	.+966    	; 0x44c <__bad_interrupt>
      86:	00 00       	nop
      88:	e1 c1       	rjmp	.+962    	; 0x44c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	df c1       	rjmp	.+958    	; 0x44c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 7c 15 	jmp	0x2af8	; 0x2af8 <__vector_36>
      94:	0c 94 ce 15 	jmp	0x2b9c	; 0x2b9c <__vector_37>
      98:	d9 c1       	rjmp	.+946    	; 0x44c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 95 1f 	jmp	0x3f2a	; 0x3f2a <__vector_39>
      a0:	d5 c1       	rjmp	.+938    	; 0x44c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d3 c1       	rjmp	.+934    	; 0x44c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d1 c1       	rjmp	.+930    	; 0x44c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cf c1       	rjmp	.+926    	; 0x44c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cd c1       	rjmp	.+922    	; 0x44c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cb c1       	rjmp	.+918    	; 0x44c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c9 c1       	rjmp	.+914    	; 0x44c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c7 c1       	rjmp	.+910    	; 0x44c <__bad_interrupt>
      be:	00 00       	nop
      c0:	c5 c1       	rjmp	.+906    	; 0x44c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c3 c1       	rjmp	.+902    	; 0x44c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c1 c1       	rjmp	.+898    	; 0x44c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 12 16 	jmp	0x2c24	; 0x2c24 <__vector_51>
      d0:	0c 94 64 16 	jmp	0x2cc8	; 0x2cc8 <__vector_52>
      d4:	bb c1       	rjmp	.+886    	; 0x44c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <__vector_54>
      dc:	0c 94 fa 16 	jmp	0x2df4	; 0x2df4 <__vector_55>
      e0:	b5 c1       	rjmp	.+874    	; 0x44c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	95 01       	movw	r18, r10
      e6:	95 01       	movw	r18, r10
      e8:	95 01       	movw	r18, r10
      ea:	c4 01       	movw	r24, r8
      ec:	cc 01       	movw	r24, r24
      ee:	db 01       	movw	r26, r22
      f0:	95 01       	movw	r18, r10
      f2:	95 01       	movw	r18, r10
      f4:	c4 01       	movw	r24, r8
      f6:	cc 01       	movw	r24, r24
      f8:	b7 1f       	adc	r27, r23
      fa:	27 20       	and	r2, r7
      fc:	27 20       	and	r2, r7
      fe:	27 20       	and	r2, r7
     100:	27 20       	and	r2, r7
     102:	27 20       	and	r2, r7
     104:	27 20       	and	r2, r7
     106:	27 20       	and	r2, r7
     108:	b7 1f       	adc	r27, r23
     10a:	27 20       	and	r2, r7
     10c:	27 20       	and	r2, r7
     10e:	27 20       	and	r2, r7
     110:	27 20       	and	r2, r7
     112:	27 20       	and	r2, r7
     114:	27 20       	and	r2, r7
     116:	27 20       	and	r2, r7
     118:	b9 1f       	adc	r27, r25
     11a:	27 20       	and	r2, r7
     11c:	27 20       	and	r2, r7
     11e:	27 20       	and	r2, r7
     120:	27 20       	and	r2, r7
     122:	27 20       	and	r2, r7
     124:	27 20       	and	r2, r7
     126:	27 20       	and	r2, r7
     128:	27 20       	and	r2, r7
     12a:	27 20       	and	r2, r7
     12c:	27 20       	and	r2, r7
     12e:	27 20       	and	r2, r7
     130:	27 20       	and	r2, r7
     132:	27 20       	and	r2, r7
     134:	27 20       	and	r2, r7
     136:	27 20       	and	r2, r7
     138:	b9 1f       	adc	r27, r25
     13a:	27 20       	and	r2, r7
     13c:	27 20       	and	r2, r7
     13e:	27 20       	and	r2, r7
     140:	27 20       	and	r2, r7
     142:	27 20       	and	r2, r7
     144:	27 20       	and	r2, r7
     146:	27 20       	and	r2, r7
     148:	27 20       	and	r2, r7
     14a:	27 20       	and	r2, r7
     14c:	27 20       	and	r2, r7
     14e:	27 20       	and	r2, r7
     150:	27 20       	and	r2, r7
     152:	27 20       	and	r2, r7
     154:	27 20       	and	r2, r7
     156:	27 20       	and	r2, r7
     158:	23 20       	and	r2, r3
     15a:	27 20       	and	r2, r7
     15c:	27 20       	and	r2, r7
     15e:	27 20       	and	r2, r7
     160:	27 20       	and	r2, r7
     162:	27 20       	and	r2, r7
     164:	27 20       	and	r2, r7
     166:	27 20       	and	r2, r7
     168:	ee 1f       	adc	r30, r30
     16a:	27 20       	and	r2, r7
     16c:	27 20       	and	r2, r7
     16e:	27 20       	and	r2, r7
     170:	27 20       	and	r2, r7
     172:	27 20       	and	r2, r7
     174:	27 20       	and	r2, r7
     176:	27 20       	and	r2, r7
     178:	27 20       	and	r2, r7
     17a:	27 20       	and	r2, r7
     17c:	27 20       	and	r2, r7
     17e:	27 20       	and	r2, r7
     180:	27 20       	and	r2, r7
     182:	27 20       	and	r2, r7
     184:	27 20       	and	r2, r7
     186:	27 20       	and	r2, r7
     188:	e2 1f       	adc	r30, r18
     18a:	27 20       	and	r2, r7
     18c:	27 20       	and	r2, r7
     18e:	27 20       	and	r2, r7
     190:	27 20       	and	r2, r7
     192:	27 20       	and	r2, r7
     194:	27 20       	and	r2, r7
     196:	27 20       	and	r2, r7
     198:	06 20       	and	r0, r6

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0c ea       	ldi	r16, 0xAC	; 172
     19c:	17 e0       	ldi	r17, 0x07	; 7
     19e:	0f 2e       	mov	r0, r31
     1a0:	f4 ed       	ldi	r31, 0xD4	; 212
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f7 e0       	ldi	r31, 0x07	; 7
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	15 96       	adiw	r26, 0x05	; 5
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	16 97       	sbiw	r26, 0x06	; 6
     1c2:	c6 81       	ldd	r28, Z+6	; 0x06
     1c4:	d7 81       	ldd	r29, Z+7	; 0x07
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	24 d4       	rcall	.+2120   	; 0xa14 <uxListRemove>
     1cc:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <uxCurrentNumberOfTasks>
     1d6:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 ab 07 	sts	0x07AB, r24	; 0x8007ab <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8f 89       	ldd	r24, Y+23	; 0x17
     1e6:	98 8d       	ldd	r25, Y+24	; 0x18
     1e8:	a2 d3       	rcall	.+1860   	; 0x92e <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	a0 d3       	rcall	.+1856   	; 0x92e <vPortFree>
     1ee:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	08 f0       	brcs	.+2      	; 0x200 <prvIdleTask+0x66>
     1fe:	df d4       	rcall	.+2494   	; 0xbbe <vPortYield>
     200:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <vApplicationIdleHook>
     204:	d2 cf       	rjmp	.-92     	; 0x1aa <prvIdleTask+0x10>

00000206 <prvTimerTask>:
     206:	cf 93       	push	r28
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     208:	df 93       	push	r29
     20a:	00 d0       	rcall	.+0      	; 0x20c <prvTimerTask+0x6>
     20c:	00 d0       	rcall	.+0      	; 0x20e <prvTimerTask+0x8>
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
     212:	ce 01       	movw	r24, r28
     214:	01 96       	adiw	r24, 0x01	; 1
     216:	4c 01       	movw	r8, r24
     218:	44 24       	eor	r4, r4
     21a:	43 94       	inc	r4
     21c:	e1 2c       	mov	r14, r1
     21e:	f1 2c       	mov	r15, r1
     220:	51 2c       	mov	r5, r1
     222:	c8 2e       	mov	r12, r24
     224:	d9 2c       	mov	r13, r9
     226:	e0 91 02 08 	lds	r30, 0x0802	; 0x800802 <pxCurrentTimerList>
     22a:	f0 91 03 08 	lds	r31, 0x0803	; 0x800803 <pxCurrentTimerList+0x1>
     22e:	80 81       	ld	r24, Z
     230:	88 23       	and	r24, r24
     232:	09 f4       	brne	.+2      	; 0x236 <prvTimerTask+0x30>
     234:	d7 c0       	rjmp	.+430    	; 0x3e4 <prvTimerTask+0x1de>
     236:	05 80       	ldd	r0, Z+5	; 0x05
     238:	f6 81       	ldd	r31, Z+6	; 0x06
     23a:	e0 2d       	mov	r30, r0
     23c:	a0 80       	ld	r10, Z
     23e:	b1 80       	ldd	r11, Z+1	; 0x01
     240:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <vTaskSuspendAll>
     244:	c4 01       	movw	r24, r8
     246:	0e 94 8c 12 	call	0x2518	; 0x2518 <prvSampleTimeNow>
     24a:	8c 01       	movw	r16, r24
     24c:	89 81       	ldd	r24, Y+1	; 0x01
     24e:	81 11       	cpse	r24, r1
     250:	48 c0       	rjmp	.+144    	; 0x2e2 <prvTimerTask+0xdc>
     252:	0a 15       	cp	r16, r10
     254:	1b 05       	cpc	r17, r11
     256:	b0 f1       	brcs	.+108    	; 0x2c4 <prvTimerTask+0xbe>
     258:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <xTaskResumeAll>
     25c:	e0 91 02 08 	lds	r30, 0x0802	; 0x800802 <pxCurrentTimerList>
     260:	f0 91 03 08 	lds	r31, 0x0803	; 0x800803 <pxCurrentTimerList+0x1>
     264:	05 80       	ldd	r0, Z+5	; 0x05
     266:	f6 81       	ldd	r31, Z+6	; 0x06
     268:	e0 2d       	mov	r30, r0
     26a:	66 80       	ldd	r6, Z+6	; 0x06
     26c:	77 80       	ldd	r7, Z+7	; 0x07
     26e:	c3 01       	movw	r24, r6
     270:	02 96       	adiw	r24, 0x02	; 2
     272:	d0 d3       	rcall	.+1952   	; 0xa14 <uxListRemove>
     274:	d3 01       	movw	r26, r6
     276:	53 96       	adiw	r26, 0x13	; 19
     278:	8c 91       	ld	r24, X
     27a:	53 97       	sbiw	r26, 0x13	; 19
     27c:	82 ff       	sbrs	r24, 2
     27e:	17 c0       	rjmp	.+46     	; 0x2ae <prvTimerTask+0xa8>
     280:	1c 96       	adiw	r26, 0x0c	; 12
     282:	6d 91       	ld	r22, X+
     284:	7c 91       	ld	r23, X
     286:	1d 97       	sbiw	r26, 0x0d	; 13
     288:	6a 0d       	add	r22, r10
     28a:	7b 1d       	adc	r23, r11
     28c:	95 01       	movw	r18, r10
     28e:	a8 01       	movw	r20, r16
     290:	c3 01       	movw	r24, r6
     292:	0e 94 cd 11 	call	0x239a	; 0x239a <prvInsertTimerInActiveList>
     296:	88 23       	and	r24, r24
     298:	69 f0       	breq	.+26     	; 0x2b4 <prvTimerTask+0xae>
     29a:	0e 2d       	mov	r16, r14
     29c:	1f 2d       	mov	r17, r15
     29e:	2e 2d       	mov	r18, r14
     2a0:	3f 2d       	mov	r19, r15
     2a2:	a5 01       	movw	r20, r10
     2a4:	65 2d       	mov	r22, r5
     2a6:	c3 01       	movw	r24, r6
     2a8:	0e 94 45 12 	call	0x248a	; 0x248a <xTimerGenericCommand>
     2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <prvTimerTask+0xae>
     2ae:	8e 7f       	andi	r24, 0xFE	; 254
     2b0:	f3 01       	movw	r30, r6
     2b2:	83 8b       	std	Z+19, r24	; 0x13
     2b4:	d3 01       	movw	r26, r6
     2b6:	50 96       	adiw	r26, 0x10	; 16
     2b8:	ed 91       	ld	r30, X+
     2ba:	fc 91       	ld	r31, X
     2bc:	51 97       	sbiw	r26, 0x11	; 17
     2be:	c3 01       	movw	r24, r6
     2c0:	19 95       	eicall
     2c2:	84 c0       	rjmp	.+264    	; 0x3cc <prvTimerTask+0x1c6>
     2c4:	45 2d       	mov	r20, r5
     2c6:	b5 01       	movw	r22, r10
     2c8:	60 1b       	sub	r22, r16
     2ca:	71 0b       	sbc	r23, r17
     2cc:	80 91 fe 07 	lds	r24, 0x07FE	; 0x8007fe <xTimerQueue>
     2d0:	90 91 ff 07 	lds	r25, 0x07FF	; 0x8007ff <xTimerQueue+0x1>
     2d4:	ce d7       	rcall	.+3996   	; 0x1272 <vQueueWaitForMessageRestricted>
     2d6:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <xTaskResumeAll>
     2da:	81 11       	cpse	r24, r1
     2dc:	77 c0       	rjmp	.+238    	; 0x3cc <prvTimerTask+0x1c6>
     2de:	6f d4       	rcall	.+2270   	; 0xbbe <vPortYield>
     2e0:	75 c0       	rjmp	.+234    	; 0x3cc <prvTimerTask+0x1c6>
     2e2:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <xTaskResumeAll>
     2e6:	72 c0       	rjmp	.+228    	; 0x3cc <prvTimerTask+0x1c6>
     2e8:	89 81       	ldd	r24, Y+1	; 0x01
     2ea:	88 23       	and	r24, r24
     2ec:	0c f4       	brge	.+2      	; 0x2f0 <prvTimerTask+0xea>
     2ee:	6e c0       	rjmp	.+220    	; 0x3cc <prvTimerTask+0x1c6>
     2f0:	ac 80       	ldd	r10, Y+4	; 0x04
     2f2:	bd 80       	ldd	r11, Y+5	; 0x05
     2f4:	f5 01       	movw	r30, r10
     2f6:	82 85       	ldd	r24, Z+10	; 0x0a
     2f8:	93 85       	ldd	r25, Z+11	; 0x0b
     2fa:	89 2b       	or	r24, r25
     2fc:	19 f0       	breq	.+6      	; 0x304 <prvTimerTask+0xfe>
     2fe:	c5 01       	movw	r24, r10
     300:	02 96       	adiw	r24, 0x02	; 2
     302:	88 d3       	rcall	.+1808   	; 0xa14 <uxListRemove>
     304:	ce 01       	movw	r24, r28
     306:	06 96       	adiw	r24, 0x06	; 6
     308:	0e 94 8c 12 	call	0x2518	; 0x2518 <prvSampleTimeNow>
     30c:	ac 01       	movw	r20, r24
     30e:	e9 81       	ldd	r30, Y+1	; 0x01
     310:	0e 2e       	mov	r0, r30
     312:	00 0c       	add	r0, r0
     314:	ff 0b       	sbc	r31, r31
     316:	ea 30       	cpi	r30, 0x0A	; 10
     318:	f1 05       	cpc	r31, r1
     31a:	08 f0       	brcs	.+2      	; 0x31e <prvTimerTask+0x118>
     31c:	57 c0       	rjmp	.+174    	; 0x3cc <prvTimerTask+0x1c6>
     31e:	88 27       	eor	r24, r24
     320:	ee 58       	subi	r30, 0x8E	; 142
     322:	ff 4f       	sbci	r31, 0xFF	; 255
     324:	8f 4f       	sbci	r24, 0xFF	; 255
     326:	0c 94 39 22 	jmp	0x4472	; 0x4472 <__tablejump2__>
     32a:	d5 01       	movw	r26, r10
     32c:	53 96       	adiw	r26, 0x13	; 19
     32e:	8c 91       	ld	r24, X
     330:	53 97       	sbiw	r26, 0x13	; 19
     332:	81 60       	ori	r24, 0x01	; 1
     334:	53 96       	adiw	r26, 0x13	; 19
     336:	8c 93       	st	X, r24
     338:	53 97       	sbiw	r26, 0x13	; 19
     33a:	2a 81       	ldd	r18, Y+2	; 0x02
     33c:	3b 81       	ldd	r19, Y+3	; 0x03
     33e:	1c 96       	adiw	r26, 0x0c	; 12
     340:	6d 91       	ld	r22, X+
     342:	7c 91       	ld	r23, X
     344:	1d 97       	sbiw	r26, 0x0d	; 13
     346:	62 0f       	add	r22, r18
     348:	73 1f       	adc	r23, r19
     34a:	c5 01       	movw	r24, r10
     34c:	0e 94 cd 11 	call	0x239a	; 0x239a <prvInsertTimerInActiveList>
     350:	88 23       	and	r24, r24
     352:	e1 f1       	breq	.+120    	; 0x3cc <prvTimerTask+0x1c6>
     354:	d5 01       	movw	r26, r10
     356:	50 96       	adiw	r26, 0x10	; 16
     358:	ed 91       	ld	r30, X+
     35a:	fc 91       	ld	r31, X
     35c:	51 97       	sbiw	r26, 0x11	; 17
     35e:	c5 01       	movw	r24, r10
     360:	19 95       	eicall
     362:	f5 01       	movw	r30, r10
     364:	83 89       	ldd	r24, Z+19	; 0x13
     366:	82 ff       	sbrs	r24, 2
     368:	31 c0       	rjmp	.+98     	; 0x3cc <prvTimerTask+0x1c6>
     36a:	4a 81       	ldd	r20, Y+2	; 0x02
     36c:	5b 81       	ldd	r21, Y+3	; 0x03
     36e:	84 85       	ldd	r24, Z+12	; 0x0c
     370:	95 85       	ldd	r25, Z+13	; 0x0d
     372:	48 0f       	add	r20, r24
     374:	59 1f       	adc	r21, r25
     376:	0e 2d       	mov	r16, r14
     378:	1f 2d       	mov	r17, r15
     37a:	2e 2d       	mov	r18, r14
     37c:	3f 2d       	mov	r19, r15
     37e:	65 2d       	mov	r22, r5
     380:	c5 01       	movw	r24, r10
     382:	0e 94 45 12 	call	0x248a	; 0x248a <xTimerGenericCommand>
     386:	22 c0       	rjmp	.+68     	; 0x3cc <prvTimerTask+0x1c6>
     388:	d5 01       	movw	r26, r10
     38a:	53 96       	adiw	r26, 0x13	; 19
     38c:	8c 91       	ld	r24, X
     38e:	53 97       	sbiw	r26, 0x13	; 19
     390:	8e 7f       	andi	r24, 0xFE	; 254
     392:	53 96       	adiw	r26, 0x13	; 19
     394:	8c 93       	st	X, r24
     396:	1a c0       	rjmp	.+52     	; 0x3cc <prvTimerTask+0x1c6>
     398:	f5 01       	movw	r30, r10
     39a:	83 89       	ldd	r24, Z+19	; 0x13
     39c:	81 60       	ori	r24, 0x01	; 1
     39e:	83 8b       	std	Z+19, r24	; 0x13
     3a0:	6a 81       	ldd	r22, Y+2	; 0x02
     3a2:	7b 81       	ldd	r23, Y+3	; 0x03
     3a4:	75 87       	std	Z+13, r23	; 0x0d
     3a6:	64 87       	std	Z+12, r22	; 0x0c
     3a8:	64 0f       	add	r22, r20
     3aa:	75 1f       	adc	r23, r21
     3ac:	9a 01       	movw	r18, r20
     3ae:	c5 01       	movw	r24, r10
     3b0:	0e 94 cd 11 	call	0x239a	; 0x239a <prvInsertTimerInActiveList>
     3b4:	0b c0       	rjmp	.+22     	; 0x3cc <prvTimerTask+0x1c6>
     3b6:	d5 01       	movw	r26, r10
     3b8:	53 96       	adiw	r26, 0x13	; 19
     3ba:	8c 91       	ld	r24, X
     3bc:	81 fd       	sbrc	r24, 1
     3be:	03 c0       	rjmp	.+6      	; 0x3c6 <prvTimerTask+0x1c0>
     3c0:	c5 01       	movw	r24, r10
     3c2:	b5 d2       	rcall	.+1386   	; 0x92e <vPortFree>
     3c4:	03 c0       	rjmp	.+6      	; 0x3cc <prvTimerTask+0x1c6>
     3c6:	8e 7f       	andi	r24, 0xFE	; 254
     3c8:	f5 01       	movw	r30, r10
     3ca:	83 8b       	std	Z+19, r24	; 0x13
     3cc:	4e 2d       	mov	r20, r14
     3ce:	5f 2d       	mov	r21, r15
     3d0:	6c 2d       	mov	r22, r12
     3d2:	7d 2d       	mov	r23, r13
     3d4:	80 91 fe 07 	lds	r24, 0x07FE	; 0x8007fe <xTimerQueue>
     3d8:	90 91 ff 07 	lds	r25, 0x07FF	; 0x8007ff <xTimerQueue+0x1>
     3dc:	c1 d6       	rcall	.+3458   	; 0x1160 <xQueueReceive>
     3de:	81 11       	cpse	r24, r1
     3e0:	83 cf       	rjmp	.-250    	; 0x2e8 <prvTimerTask+0xe2>
     3e2:	21 cf       	rjmp	.-446    	; 0x226 <prvTimerTask+0x20>
     3e4:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <vTaskSuspendAll>
     3e8:	c4 01       	movw	r24, r8
     3ea:	0e 94 8c 12 	call	0x2518	; 0x2518 <prvSampleTimeNow>
     3ee:	8c 01       	movw	r16, r24
     3f0:	89 81       	ldd	r24, Y+1	; 0x01
     3f2:	81 11       	cpse	r24, r1
     3f4:	76 cf       	rjmp	.-276    	; 0x2e2 <prvTimerTask+0xdc>
     3f6:	e0 91 00 08 	lds	r30, 0x0800	; 0x800800 <pxOverflowTimerList>
     3fa:	f0 91 01 08 	lds	r31, 0x0801	; 0x800801 <pxOverflowTimerList+0x1>
     3fe:	80 81       	ld	r24, Z
     400:	44 2d       	mov	r20, r4
     402:	81 11       	cpse	r24, r1
     404:	45 2d       	mov	r20, r5
     406:	ae 2c       	mov	r10, r14
     408:	bf 2c       	mov	r11, r15
     40a:	5d cf       	rjmp	.-326    	; 0x2c6 <prvTimerTask+0xc0>

0000040c <__ctors_end>:
     40c:	11 24       	eor	r1, r1
     40e:	1f be       	out	0x3f, r1	; 63
     410:	cf ef       	ldi	r28, 0xFF	; 255
     412:	d1 e2       	ldi	r29, 0x21	; 33
     414:	de bf       	out	0x3e, r29	; 62
     416:	cd bf       	out	0x3d, r28	; 61
     418:	00 e0       	ldi	r16, 0x00	; 0
     41a:	0c bf       	out	0x3c, r16	; 60

0000041c <__do_copy_data>:
     41c:	17 e0       	ldi	r17, 0x07	; 7
     41e:	a0 e0       	ldi	r26, 0x00	; 0
     420:	b2 e0       	ldi	r27, 0x02	; 2
     422:	e4 eb       	ldi	r30, 0xB4	; 180
     424:	fd e4       	ldi	r31, 0x4D	; 77
     426:	00 e0       	ldi	r16, 0x00	; 0
     428:	0b bf       	out	0x3b, r16	; 59
     42a:	02 c0       	rjmp	.+4      	; 0x430 <__do_copy_data+0x14>
     42c:	07 90       	elpm	r0, Z+
     42e:	0d 92       	st	X+, r0
     430:	aa 38       	cpi	r26, 0x8A	; 138
     432:	b1 07       	cpc	r27, r17
     434:	d9 f7       	brne	.-10     	; 0x42c <__do_copy_data+0x10>

00000436 <__do_clear_bss>:
     436:	29 e0       	ldi	r18, 0x09	; 9
     438:	aa e8       	ldi	r26, 0x8A	; 138
     43a:	b7 e0       	ldi	r27, 0x07	; 7
     43c:	01 c0       	rjmp	.+2      	; 0x440 <.do_clear_bss_start>

0000043e <.do_clear_bss_loop>:
     43e:	1d 92       	st	X+, r1

00000440 <.do_clear_bss_start>:
     440:	a1 3e       	cpi	r26, 0xE1	; 225
     442:	b2 07       	cpc	r27, r18
     444:	e1 f7       	brne	.-8      	; 0x43e <.do_clear_bss_loop>
     446:	ad d1       	rcall	.+858    	; 0x7a2 <main>
     448:	0c 94 d8 26 	jmp	0x4db0	; 0x4db0 <_exit>

0000044c <__bad_interrupt>:
     44c:	d9 cd       	rjmp	.-1102   	; 0x0 <__vectors>

0000044e <waterTask>:

void waterTask(void* pvParamters) {
	(void)pvParamters;

	while(1) {
		while(water > 0) {
     44e:	80 91 51 09 	lds	r24, 0x0951	; 0x800951 <water>
     452:	90 91 52 09 	lds	r25, 0x0952	; 0x800952 <water+0x1>
     456:	18 16       	cp	r1, r24
     458:	19 06       	cpc	r1, r25
     45a:	cc f7       	brge	.-14     	; 0x44e <waterTask>
			//set servo output high
			vTaskDelay(100 / portTICK_PERIOD_MS);
     45c:	86 e0       	ldi	r24, 0x06	; 6
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <vTaskDelay>
			water--;
     464:	80 91 51 09 	lds	r24, 0x0951	; 0x800951 <water>
     468:	90 91 52 09 	lds	r25, 0x0952	; 0x800952 <water+0x1>
     46c:	01 97       	sbiw	r24, 0x01	; 1
     46e:	90 93 52 09 	sts	0x0952, r25	; 0x800952 <water+0x1>
     472:	80 93 51 09 	sts	0x0951, r24	; 0x800951 <water>

void waterTask(void* pvParamters) {
	(void)pvParamters;

	while(1) {
		while(water > 0) {
     476:	18 16       	cp	r1, r24
     478:	19 06       	cpc	r1, r25
     47a:	84 f3       	brlt	.-32     	; 0x45c <waterTask+0xe>
     47c:	e8 cf       	rjmp	.-48     	; 0x44e <waterTask>

0000047e <co2Callback>:

	vTaskDelete(NULL);
}

void co2Callback(uint16_t ppm) {
	co2 = ppm;
     47e:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <co2>
     482:	90 93 b8 09 	sts	0x09B8, r25	; 0x8009b8 <co2+0x1>
	printf("CO2 level: %u\n", ppm);
     486:	9f 93       	push	r25
     488:	8f 93       	push	r24
     48a:	8e e4       	ldi	r24, 0x4E	; 78
     48c:	92 e0       	ldi	r25, 0x02	; 2
     48e:	9f 93       	push	r25
     490:	8f 93       	push	r24
     492:	0e 94 ba 23 	call	0x4774	; 0x4774 <printf>
}
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	08 95       	ret

000004a0 <tempSensorTask>:
	while(1) {
		vTaskDelay(1000 / portTICK_PERIOD_MS);
		
		int r = hih8120Wakeup();
		if(r != HIH8120_OK && r != HIH8120_TWI_BUSY) {
			printf("temp-wake error: %d\n", r);
     4a0:	0f 2e       	mov	r0, r31
     4a2:	fd e5       	ldi	r31, 0x5D	; 93
     4a4:	ef 2e       	mov	r14, r31
     4a6:	f2 e0       	ldi	r31, 0x02	; 2
     4a8:	ff 2e       	mov	r15, r31
     4aa:	f0 2d       	mov	r31, r0
		}
		
		vTaskDelay(100 / portTICK_PERIOD_MS);
		r = hih8120Meassure();
		if(r != HIH8120_OK && r != HIH8120_TWI_BUSY) {
			printf("Temp-read error: %d\n", r);
     4ac:	02 e7       	ldi	r16, 0x72	; 114
     4ae:	12 e0       	ldi	r17, 0x02	; 2
		}
		vTaskDelay(100 / portTICK_PERIOD_MS);

		humidity = hih8120GetHumidity();
		temperature = hih8120GetTemperature();
		printf("Hum: %d  Temp: %d\n", humidity, temperature);
     4b0:	c7 e8       	ldi	r28, 0x87	; 135
     4b2:	d2 e0       	ldi	r29, 0x02	; 2
void tempSensorTask(void* pvParameters) {
	(void)pvParameters;
	
	//Do temperature measurement
	while(1) {
		vTaskDelay(1000 / portTICK_PERIOD_MS);
     4b4:	8e e3       	ldi	r24, 0x3E	; 62
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <vTaskDelay>
		
		int r = hih8120Wakeup();
     4bc:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <hih8120Wakeup>
     4c0:	28 2f       	mov	r18, r24
     4c2:	30 e0       	ldi	r19, 0x00	; 0
		if(r != HIH8120_OK && r != HIH8120_TWI_BUSY) {
     4c4:	21 15       	cp	r18, r1
     4c6:	31 05       	cpc	r19, r1
     4c8:	69 f0       	breq	.+26     	; 0x4e4 <tempSensorTask+0x44>
     4ca:	23 30       	cpi	r18, 0x03	; 3
     4cc:	31 05       	cpc	r19, r1
     4ce:	51 f0       	breq	.+20     	; 0x4e4 <tempSensorTask+0x44>
			printf("temp-wake error: %d\n", r);
     4d0:	1f 92       	push	r1
     4d2:	8f 93       	push	r24
     4d4:	ff 92       	push	r15
     4d6:	ef 92       	push	r14
     4d8:	0e 94 ba 23 	call	0x4774	; 0x4774 <printf>
     4dc:	0f 90       	pop	r0
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
     4e2:	0f 90       	pop	r0
		}
		
		vTaskDelay(100 / portTICK_PERIOD_MS);
     4e4:	86 e0       	ldi	r24, 0x06	; 6
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <vTaskDelay>
		r = hih8120Meassure();
     4ec:	0e 94 e7 17 	call	0x2fce	; 0x2fce <hih8120Meassure>
     4f0:	28 2f       	mov	r18, r24
     4f2:	30 e0       	ldi	r19, 0x00	; 0
		if(r != HIH8120_OK && r != HIH8120_TWI_BUSY) {
     4f4:	21 15       	cp	r18, r1
     4f6:	31 05       	cpc	r19, r1
     4f8:	69 f0       	breq	.+26     	; 0x514 <tempSensorTask+0x74>
     4fa:	23 30       	cpi	r18, 0x03	; 3
     4fc:	31 05       	cpc	r19, r1
     4fe:	51 f0       	breq	.+20     	; 0x514 <tempSensorTask+0x74>
			printf("Temp-read error: %d\n", r);
     500:	1f 92       	push	r1
     502:	8f 93       	push	r24
     504:	1f 93       	push	r17
     506:	0f 93       	push	r16
     508:	0e 94 ba 23 	call	0x4774	; 0x4774 <printf>
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	0f 90       	pop	r0
     512:	0f 90       	pop	r0
		}
		vTaskDelay(100 / portTICK_PERIOD_MS);
     514:	86 e0       	ldi	r24, 0x06	; 6
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <vTaskDelay>

		humidity = hih8120GetHumidity();
     51c:	0e 94 f7 17 	call	0x2fee	; 0x2fee <hih8120GetHumidity>
     520:	0e 94 15 13 	call	0x262a	; 0x262a <__fixsfsi>
     524:	70 93 c0 09 	sts	0x09C0, r23	; 0x8009c0 <humidity+0x1>
     528:	60 93 bf 09 	sts	0x09BF, r22	; 0x8009bf <humidity>
		temperature = hih8120GetTemperature();
     52c:	0e 94 0c 18 	call	0x3018	; 0x3018 <hih8120GetTemperature>
     530:	0e 94 15 13 	call	0x262a	; 0x262a <__fixsfsi>
     534:	60 93 b9 09 	sts	0x09B9, r22	; 0x8009b9 <temperature>
     538:	70 93 ba 09 	sts	0x09BA, r23	; 0x8009ba <temperature+0x1>
		printf("Hum: %d  Temp: %d\n", humidity, temperature);
     53c:	7f 93       	push	r23
     53e:	6f 93       	push	r22
     540:	80 91 c0 09 	lds	r24, 0x09C0	; 0x8009c0 <humidity+0x1>
     544:	8f 93       	push	r24
     546:	80 91 bf 09 	lds	r24, 0x09BF	; 0x8009bf <humidity>
     54a:	8f 93       	push	r24
     54c:	df 93       	push	r29
     54e:	cf 93       	push	r28
     550:	0e 94 ba 23 	call	0x4774	; 0x4774 <printf>
	}
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	a9 cf       	rjmp	.-174    	; 0x4b4 <tempSensorTask+0x14>

00000562 <co2SensorTask>:
	while(1) {
		vTaskDelay(1000 / portTICK_PERIOD_MS);

		int r = mh_z19_take_meassuring();
		if(r != MHZ19_OK) {
			printf("CO2 sensor: %d", r);
     562:	ca e9       	ldi	r28, 0x9A	; 154
     564:	d2 e0       	ldi	r29, 0x02	; 2

void co2SensorTask(void *pvParamters) {
	(void)pvParamters;

	while(1) {
		vTaskDelay(1000 / portTICK_PERIOD_MS);
     566:	8e e3       	ldi	r24, 0x3E	; 62
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <vTaskDelay>

		int r = mh_z19_take_meassuring();
     56e:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <mh_z19_take_meassuring>
     572:	90 e0       	ldi	r25, 0x00	; 0
		if(r != MHZ19_OK) {
     574:	00 97       	sbiw	r24, 0x00	; 0
     576:	b9 f3       	breq	.-18     	; 0x566 <co2SensorTask+0x4>
			printf("CO2 sensor: %d", r);
     578:	9f 93       	push	r25
     57a:	8f 93       	push	r24
     57c:	df 93       	push	r29
     57e:	cf 93       	push	r28
     580:	0e 94 ba 23 	call	0x4774	; 0x4774 <printf>
     584:	0f 90       	pop	r0
     586:	0f 90       	pop	r0
     588:	0f 90       	pop	r0
     58a:	0f 90       	pop	r0
     58c:	ec cf       	rjmp	.-40     	; 0x566 <co2SensorTask+0x4>

0000058e <lightSensorTask>:

	while(1) {
		vTaskDelay(1000 / portTICK_PERIOD_MS);
		int r = tsl2591FetchData();
		if(r != TSL2591_OK) {
			printf("Failed to fetch light data: %d\n", r);
     58e:	c9 ea       	ldi	r28, 0xA9	; 169
     590:	d2 e0       	ldi	r29, 0x02	; 2

void lightSensorTask(void* pvParameters) {
	(void)pvParameters;

	while(1) {
		vTaskDelay(1000 / portTICK_PERIOD_MS);
     592:	8e e3       	ldi	r24, 0x3E	; 62
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <vTaskDelay>
		int r = tsl2591FetchData();
     59a:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <tsl2591FetchData>
     59e:	90 e0       	ldi	r25, 0x00	; 0
		if(r != TSL2591_OK) {
     5a0:	00 97       	sbiw	r24, 0x00	; 0
     5a2:	b9 f3       	breq	.-18     	; 0x592 <lightSensorTask+0x4>
			printf("Failed to fetch light data: %d\n", r);
     5a4:	9f 93       	push	r25
     5a6:	8f 93       	push	r24
     5a8:	df 93       	push	r29
     5aa:	cf 93       	push	r28
     5ac:	0e 94 ba 23 	call	0x4774	; 0x4774 <printf>
     5b0:	0f 90       	pop	r0
     5b2:	0f 90       	pop	r0
     5b4:	0f 90       	pop	r0
     5b6:	0f 90       	pop	r0
     5b8:	ec cf       	rjmp	.-40     	; 0x592 <lightSensorTask+0x4>

000005ba <lightCallback>:
	}

	vTaskDelete(NULL);
}

void lightCallback(tsl2591ReturnCode_t rc) {
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	00 d0       	rcall	.+0      	; 0x5c0 <lightCallback+0x6>
     5c0:	1f 92       	push	r1
     5c2:	cd b7       	in	r28, 0x3d	; 61
     5c4:	de b7       	in	r29, 0x3e	; 62
	float measure;
	if(rc != TSL2591_DATA_READY) {
     5c6:	81 30       	cpi	r24, 0x01	; 1
     5c8:	29 f0       	breq	.+10     	; 0x5d4 <lightCallback+0x1a>
		printf("Light sensor not ready\n");
     5ca:	89 ec       	ldi	r24, 0xC9	; 201
     5cc:	92 e0       	ldi	r25, 0x02	; 2
     5ce:	0e 94 cd 23 	call	0x479a	; 0x479a <puts>
     5d2:	25 c0       	rjmp	.+74     	; 0x61e <lightCallback+0x64>
		return;
	}
	if(TSL2591_OK == tsl2591GetLux(&measure)) {
     5d4:	ce 01       	movw	r24, r28
     5d6:	01 96       	adiw	r24, 0x01	; 1
     5d8:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <tsl2591GetLux>
     5dc:	81 11       	cpse	r24, r1
     5de:	1b c0       	rjmp	.+54     	; 0x616 <lightCallback+0x5c>
		light = measure;
     5e0:	69 81       	ldd	r22, Y+1	; 0x01
     5e2:	7a 81       	ldd	r23, Y+2	; 0x02
     5e4:	8b 81       	ldd	r24, Y+3	; 0x03
     5e6:	9c 81       	ldd	r25, Y+4	; 0x04
     5e8:	60 93 bb 09 	sts	0x09BB, r22	; 0x8009bb <light>
     5ec:	70 93 bc 09 	sts	0x09BC, r23	; 0x8009bc <light+0x1>
     5f0:	80 93 bd 09 	sts	0x09BD, r24	; 0x8009bd <light+0x2>
     5f4:	90 93 be 09 	sts	0x09BE, r25	; 0x8009be <light+0x3>
		printf("Light: %d\n", (uint16_t) measure);
     5f8:	0e 94 1a 13 	call	0x2634	; 0x2634 <__fixunssfsi>
     5fc:	7f 93       	push	r23
     5fe:	6f 93       	push	r22
     600:	80 ee       	ldi	r24, 0xE0	; 224
     602:	92 e0       	ldi	r25, 0x02	; 2
     604:	9f 93       	push	r25
     606:	8f 93       	push	r24
     608:	0e 94 ba 23 	call	0x4774	; 0x4774 <printf>
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
     612:	0f 90       	pop	r0
     614:	04 c0       	rjmp	.+8      	; 0x61e <lightCallback+0x64>
	}
	else {
		printf("Lux overflow\n");
     616:	8b ee       	ldi	r24, 0xEB	; 235
     618:	92 e0       	ldi	r25, 0x02	; 2
     61a:	0e 94 cd 23 	call	0x479a	; 0x479a <puts>
	}
}
     61e:	0f 90       	pop	r0
     620:	0f 90       	pop	r0
     622:	0f 90       	pop	r0
     624:	0f 90       	pop	r0
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	08 95       	ret

0000062c <_loRa_setup>:
	}
	
	vTaskDelete(NULL);
}

void _loRa_setup(void){
     62c:	ef 92       	push	r14
     62e:	ff 92       	push	r15
     630:	1f 93       	push	r17
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
	
	e_LoRa_return_code_t rc;
	
	
	//For factory reset.
	printf("FactoryRest >%s<\n", 
     636:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <lora_driver_rn2483_factory_reset>
     63a:	0e 94 28 1c 	call	0x3850	; 0x3850 <lora_driver_map_return_code_to_text>
     63e:	9f 93       	push	r25
     640:	8f 93       	push	r24
     642:	88 ef       	ldi	r24, 0xF8	; 248
     644:	92 e0       	ldi	r25, 0x02	; 2
     646:	9f 93       	push	r25
     648:	8f 93       	push	r24
     64a:	0e 94 ba 23 	call	0x4774	; 0x4774 <printf>
	lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
	
	//Configure to EU868 LoRaWAN standards.
	printf("Configure to EU868 >%s<\n", 
     64e:	0e 94 30 1b 	call	0x3660	; 0x3660 <lora_driver_configure_to_eu868>
     652:	0e 94 28 1c 	call	0x3850	; 0x3850 <lora_driver_map_return_code_to_text>
     656:	9f 93       	push	r25
     658:	8f 93       	push	r24
     65a:	8a e0       	ldi	r24, 0x0A	; 10
     65c:	93 e0       	ldi	r25, 0x03	; 3
     65e:	9f 93       	push	r25
     660:	8f 93       	push	r24
     662:	0e 94 ba 23 	call	0x4774	; 0x4774 <printf>
	lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
	
	//Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buff);
     666:	83 e5       	ldi	r24, 0x53	; 83
     668:	99 e0       	ldi	r25, 0x09	; 9
     66a:	0e 94 91 1a 	call	0x3522	; 0x3522 <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI: %s >%s< \n", lora_driver_map_return_code_to_text(rc), _out_buff );
     66e:	0e 94 28 1c 	call	0x3850	; 0x3850 <lora_driver_map_return_code_to_text>
     672:	c3 e5       	ldi	r28, 0x53	; 83
     674:	d9 e0       	ldi	r29, 0x09	; 9
     676:	df 93       	push	r29
     678:	cf 93       	push	r28
     67a:	9f 93       	push	r25
     67c:	8f 93       	push	r24
     67e:	83 e2       	ldi	r24, 0x23	; 35
     680:	93 e0       	ldi	r25, 0x03	; 3
     682:	9f 93       	push	r25
     684:	8f 93       	push	r24
     686:	0e 94 ba 23 	call	0x4774	; 0x4774 <printf>
	
	
	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buff, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buff)));
     68a:	ce 01       	movw	r24, r28
     68c:	0e 94 ad 1a 	call	0x355a	; 0x355a <lora_driver_set_device_identifier>
     690:	0e 94 28 1c 	call	0x3850	; 0x3850 <lora_driver_map_return_code_to_text>
     694:	9f 93       	push	r25
     696:	8f 93       	push	r24
     698:	df 93       	push	r29
     69a:	cf 93       	push	r28
     69c:	88 e3       	ldi	r24, 0x38	; 56
     69e:	93 e0       	ldi	r25, 0x03	; 3
     6a0:	9f 93       	push	r25
     6a2:	8f 93       	push	r24
     6a4:	0e 94 ba 23 	call	0x4774	; 0x4774 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buff, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buff)));
     6a8:	ae 01       	movw	r20, r28
     6aa:	67 e3       	ldi	r22, 0x37	; 55
     6ac:	73 e0       	ldi	r23, 0x03	; 3
     6ae:	cb 01       	movw	r24, r22
     6b0:	0e 94 03 1c 	call	0x3806	; 0x3806 <lora_driver_set_otaa_identity>
     6b4:	0e 94 28 1c 	call	0x3850	; 0x3850 <lora_driver_map_return_code_to_text>
     6b8:	9f 93       	push	r25
     6ba:	8f 93       	push	r24
     6bc:	df 93       	push	r29
     6be:	cf 93       	push	r28
     6c0:	87 e3       	ldi	r24, 0x37	; 55
     6c2:	93 e0       	ldi	r25, 0x03	; 3
     6c4:	9f 93       	push	r25
     6c6:	8f 93       	push	r24
     6c8:	9f 93       	push	r25
     6ca:	8f 93       	push	r24
     6cc:	8d e4       	ldi	r24, 0x4D	; 77
     6ce:	93 e0       	ldi	r25, 0x03	; 3
     6d0:	9f 93       	push	r25
     6d2:	8f 93       	push	r24
     6d4:	0e 94 ba 23 	call	0x4774	; 0x4774 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
     6d8:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <lora_driver_save_mac>
     6dc:	0e 94 28 1c 	call	0x3850	; 0x3850 <lora_driver_map_return_code_to_text>
     6e0:	9f 93       	push	r25
     6e2:	8f 93       	push	r24
     6e4:	83 e8       	ldi	r24, 0x83	; 131
     6e6:	93 e0       	ldi	r25, 0x03	; 3
     6e8:	9f 93       	push	r25
     6ea:	8f 93       	push	r24
     6ec:	0e 94 ba 23 	call	0x4774	; 0x4774 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
     6f0:	8d b7       	in	r24, 0x3d	; 61
     6f2:	9e b7       	in	r25, 0x3e	; 62
     6f4:	82 96       	adiw	r24, 0x22	; 34
     6f6:	0f b6       	in	r0, 0x3f	; 63
     6f8:	f8 94       	cli
     6fa:	9e bf       	out	0x3e, r25	; 62
     6fc:	0f be       	out	0x3f, r0	; 63
     6fe:	8d bf       	out	0x3d, r24	; 61
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	0e 94 09 1b 	call	0x3612	; 0x3612 <lora_driver_set_adaptive_data_rate>
     706:	0e 94 28 1c 	call	0x3850	; 0x3850 <lora_driver_map_return_code_to_text>
     70a:	9f 93       	push	r25
     70c:	8f 93       	push	r24
     70e:	82 e9       	ldi	r24, 0x92	; 146
     710:	93 e0       	ldi	r25, 0x03	; 3
     712:	9f 93       	push	r25
     714:	8f 93       	push	r24
     716:	0e 94 ba 23 	call	0x4774	; 0x4774 <printf>
     71a:	0f 90       	pop	r0
     71c:	0f 90       	pop	r0
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	c5 e0       	ldi	r28, 0x05	; 5
     724:	d0 e0       	ldi	r29, 0x00	; 0

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 5;
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     726:	0f 2e       	mov	r0, r31
     728:	f3 eb       	ldi	r31, 0xB3	; 179
     72a:	ef 2e       	mov	r14, r31
     72c:	f3 e0       	ldi	r31, 0x03	; 3
     72e:	ff 2e       	mov	r15, r31
     730:	f0 2d       	mov	r31, r0
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 5;
	do {
		rc = lora_driver_join(LoRa_OTAA);
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <lora_driver_join>
     738:	18 2f       	mov	r17, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     73a:	0e 94 28 1c 	call	0x3850	; 0x3850 <lora_driver_map_return_code_to_text>
     73e:	9f 93       	push	r25
     740:	8f 93       	push	r24
     742:	df 93       	push	r29
     744:	cf 93       	push	r28
     746:	ff 92       	push	r15
     748:	ef 92       	push	r14
     74a:	0e 94 ba 23 	call	0x4774	; 0x4774 <printf>

		if ( rc != LoRa_ACCEPTED)
     74e:	0f 90       	pop	r0
     750:	0f 90       	pop	r0
     752:	0f 90       	pop	r0
     754:	0f 90       	pop	r0
     756:	0f 90       	pop	r0
     758:	0f 90       	pop	r0
     75a:	18 30       	cpi	r17, 0x08	; 8
     75c:	31 f0       	breq	.+12     	; 0x76a <_loRa_setup+0x13e>
		{
			// Make the red led pulse to tell something went wrong
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     75e:	8f e2       	ldi	r24, 0x2F	; 47
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <vTaskDelay>
     766:	21 97       	sbiw	r28, 0x01	; 1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     768:	21 f7       	brne	.-56     	; 0x732 <_loRa_setup+0x106>

}
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	1f 91       	pop	r17
     770:	ff 90       	pop	r15
     772:	ef 90       	pop	r14
     774:	08 95       	ret

00000776 <loRaWanTask>:
//added:

void loRaWanTask(void* pvParamters){	

	//for resetting the LoRaWAN hardware.
	lora_driver_reset_rn2483(1);
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <lora_driver_reset_rn2483>
	vTaskDelay(2);
     77c:	82 e0       	ldi	r24, 0x02	; 2
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <vTaskDelay>
	lora_driver_reset_rn2483(0);
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <lora_driver_reset_rn2483>
	vTaskDelay(150);
     78a:	86 e9       	ldi	r24, 0x96	; 150
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <vTaskDelay>
	lora_driver_flush_buffers();
     792:	0e 94 28 1a 	call	0x3450	; 0x3450 <lora_driver_flush_buffers>
	
	_loRa_setup();
     796:	4a df       	rcall	.-364    	; 0x62c <_loRa_setup>
	_uplink_payload.port_no = 2;
	
		
	while(1){
		
		vTaskDelay(pdMS_TO_TICKS(5000UL));
     798:	8f e2       	ldi	r24, 0x2F	; 47
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <vTaskDelay>
     7a0:	fb cf       	rjmp	.-10     	; 0x798 <loRaWanTask+0x22>

000007a2 <main>:

}
	
//

int main() {
     7a2:	ef 92       	push	r14
     7a4:	ff 92       	push	r15
     7a6:	0f 93       	push	r16
	
	hal_create(LED_TASK_PRIORITY);
     7a8:	83 e0       	ldi	r24, 0x03	; 3
     7aa:	0e 94 5d 17 	call	0x2eba	; 0x2eba <hal_create>
	lora_driver_create(ser_USART1);
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	0e 94 2f 1a 	call	0x345e	; 0x345e <lora_driver_create>
	stdioCreate(0);
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	0e 94 8d 13 	call	0x271a	; 0x271a <stdioCreate>
	sei();
     7ba:	78 94       	sei
	DDRC = 0xFF;
     7bc:	8f ef       	ldi	r24, 0xFF	; 255
     7be:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7c0:	2f ef       	ldi	r18, 0xFF	; 255
     7c2:	80 e7       	ldi	r24, 0x70	; 112
     7c4:	92 e0       	ldi	r25, 0x02	; 2
     7c6:	21 50       	subi	r18, 0x01	; 1
     7c8:	80 40       	sbci	r24, 0x00	; 0
     7ca:	90 40       	sbci	r25, 0x00	; 0
     7cc:	e1 f7       	brne	.-8      	; 0x7c6 <main+0x24>
     7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <main+0x2e>
     7d0:	00 00       	nop
	_delay_ms(50);
	PORTC = 0x01;
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	88 b9       	out	0x08, r24	; 8
	
	xTaskCreate(tempSensorTask, "Temperature measurement", configMINIMAL_STACK_SIZE, NULL, TEMP_TASK_PRIORITY, &tempSensorHandle);
     7d6:	0f 2e       	mov	r0, r31
     7d8:	f2 e9       	ldi	r31, 0x92	; 146
     7da:	ef 2e       	mov	r14, r31
     7dc:	f7 e0       	ldi	r31, 0x07	; 7
     7de:	ff 2e       	mov	r15, r31
     7e0:	f0 2d       	mov	r31, r0
     7e2:	01 e0       	ldi	r16, 0x01	; 1
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	40 ec       	ldi	r20, 0xC0	; 192
     7ea:	50 e0       	ldi	r21, 0x00	; 0
     7ec:	63 ed       	ldi	r22, 0xD3	; 211
     7ee:	73 e0       	ldi	r23, 0x03	; 3
     7f0:	80 e5       	ldi	r24, 0x50	; 80
     7f2:	92 e0       	ldi	r25, 0x02	; 2
     7f4:	fd d7       	rcall	.+4090   	; 0x17f0 <xTaskCreate>
	xTaskCreate(co2SensorTask, "CO2 measurement", configMINIMAL_STACK_SIZE, NULL, CO2_TASK_PRIORITY, &co2SensorHandle);
     7f6:	0f 2e       	mov	r0, r31
     7f8:	f0 e9       	ldi	r31, 0x90	; 144
     7fa:	ef 2e       	mov	r14, r31
     7fc:	f7 e0       	ldi	r31, 0x07	; 7
     7fe:	ff 2e       	mov	r15, r31
     800:	f0 2d       	mov	r31, r0
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	40 ec       	ldi	r20, 0xC0	; 192
     808:	50 e0       	ldi	r21, 0x00	; 0
     80a:	6b ee       	ldi	r22, 0xEB	; 235
     80c:	73 e0       	ldi	r23, 0x03	; 3
     80e:	81 eb       	ldi	r24, 0xB1	; 177
     810:	92 e0       	ldi	r25, 0x02	; 2
     812:	ee d7       	rcall	.+4060   	; 0x17f0 <xTaskCreate>
	xTaskCreate(lightSensorTask, "Light measurement", configMINIMAL_STACK_SIZE, NULL, LIGHT_TASK_PRIORITY, &lightSensorHandle);
     814:	0f 2e       	mov	r0, r31
     816:	fe e8       	ldi	r31, 0x8E	; 142
     818:	ef 2e       	mov	r14, r31
     81a:	f7 e0       	ldi	r31, 0x07	; 7
     81c:	ff 2e       	mov	r15, r31
     81e:	f0 2d       	mov	r31, r0
     820:	20 e0       	ldi	r18, 0x00	; 0
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	40 ec       	ldi	r20, 0xC0	; 192
     826:	50 e0       	ldi	r21, 0x00	; 0
     828:	6b ef       	ldi	r22, 0xFB	; 251
     82a:	73 e0       	ldi	r23, 0x03	; 3
     82c:	87 ec       	ldi	r24, 0xC7	; 199
     82e:	92 e0       	ldi	r25, 0x02	; 2
     830:	df d7       	rcall	.+4030   	; 0x17f0 <xTaskCreate>
	xTaskCreate(waterTask, "Water servo", configMINIMAL_STACK_SIZE, NULL, WATER_TASK_PRIORITY, &WaterHandle);
     832:	0f 2e       	mov	r0, r31
     834:	fc e8       	ldi	r31, 0x8C	; 140
     836:	ef 2e       	mov	r14, r31
     838:	f7 e0       	ldi	r31, 0x07	; 7
     83a:	ff 2e       	mov	r15, r31
     83c:	f0 2d       	mov	r31, r0
     83e:	20 e0       	ldi	r18, 0x00	; 0
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	40 ec       	ldi	r20, 0xC0	; 192
     844:	50 e0       	ldi	r21, 0x00	; 0
     846:	6d e0       	ldi	r22, 0x0D	; 13
     848:	74 e0       	ldi	r23, 0x04	; 4
     84a:	87 e2       	ldi	r24, 0x27	; 39
     84c:	92 e0       	ldi	r25, 0x02	; 2
     84e:	d0 d7       	rcall	.+4000   	; 0x17f0 <xTaskCreate>
	//added:
	xTaskCreate(loRaWanTask, "Led", configMINIMAL_STACK_SIZE, NULL,LED_TASK_PRIORITY, &loRaWanHandle);
     850:	0f 2e       	mov	r0, r31
     852:	fa e8       	ldi	r31, 0x8A	; 138
     854:	ef 2e       	mov	r14, r31
     856:	f7 e0       	ldi	r31, 0x07	; 7
     858:	ff 2e       	mov	r15, r31
     85a:	f0 2d       	mov	r31, r0
     85c:	03 e0       	ldi	r16, 0x03	; 3
     85e:	20 e0       	ldi	r18, 0x00	; 0
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	40 ec       	ldi	r20, 0xC0	; 192
     864:	50 e0       	ldi	r21, 0x00	; 0
     866:	69 e1       	ldi	r22, 0x19	; 25
     868:	74 e0       	ldi	r23, 0x04	; 4
     86a:	8b eb       	ldi	r24, 0xBB	; 187
     86c:	93 e0       	ldi	r25, 0x03	; 3
     86e:	c0 d7       	rcall	.+3968   	; 0x17f0 <xTaskCreate>
	//
	stdioCreate(0);
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	0e 94 8d 13 	call	0x271a	; 0x271a <stdioCreate>
	sei();
     876:	78 94       	sei
	//setup temperature/humidity sensor
	if(HIH8120_OK != hih8120Create()) {
     878:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <hih8120Create>
     87c:	81 11       	cpse	r24, r1
     87e:	2a c0       	rjmp	.+84     	; 0x8d4 <main+0x132>
		printf("Failed to initialize temperature sensor\n");
		return 1;
	}

	//setup co2 sensor
	mh_z19_create(ser_USART3, co2Callback);
     880:	6f e3       	ldi	r22, 0x3F	; 63
     882:	72 e0       	ldi	r23, 0x02	; 2
     884:	83 e0       	ldi	r24, 0x03	; 3
     886:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <mh_z19_create>

	//setup light sensor
	int r = tsl2591Create(lightCallback);
     88a:	8d ed       	ldi	r24, 0xDD	; 221
     88c:	92 e0       	ldi	r25, 0x02	; 2
     88e:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <tsl2591Create>
	if(r != TSL2591_OK) {
     892:	88 23       	and	r24, r24
     894:	61 f0       	breq	.+24     	; 0x8ae <main+0x10c>
		printf("Failed to initialize light sensor: %d\n", r);
     896:	1f 92       	push	r1
     898:	8f 93       	push	r24
     89a:	85 e4       	ldi	r24, 0x45	; 69
     89c:	94 e0       	ldi	r25, 0x04	; 4
     89e:	9f 93       	push	r25
     8a0:	8f 93       	push	r24
     8a2:	0e 94 ba 23 	call	0x4774	; 0x4774 <printf>
     8a6:	0f 90       	pop	r0
     8a8:	0f 90       	pop	r0
     8aa:	0f 90       	pop	r0
     8ac:	0f 90       	pop	r0
	}

	r = tsl2591Enable();
     8ae:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <tsl2591Enable>
	if(r != TSL2591_OK) {
     8b2:	88 23       	and	r24, r24
     8b4:	61 f0       	breq	.+24     	; 0x8ce <main+0x12c>
		printf("Failed to enable light sensor %d\n", r);
     8b6:	1f 92       	push	r1
     8b8:	8f 93       	push	r24
     8ba:	8c e6       	ldi	r24, 0x6C	; 108
     8bc:	94 e0       	ldi	r25, 0x04	; 4
     8be:	9f 93       	push	r25
     8c0:	8f 93       	push	r24
     8c2:	0e 94 ba 23 	call	0x4774	; 0x4774 <printf>
     8c6:	0f 90       	pop	r0
     8c8:	0f 90       	pop	r0
     8ca:	0f 90       	pop	r0
     8cc:	0f 90       	pop	r0
	}
	
	vTaskStartScheduler();
     8ce:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <vTaskStartScheduler>
     8d2:	ff cf       	rjmp	.-2      	; 0x8d2 <main+0x130>
	//
	stdioCreate(0);
	sei();
	//setup temperature/humidity sensor
	if(HIH8120_OK != hih8120Create()) {
		printf("Failed to initialize temperature sensor\n");
     8d4:	8d e1       	ldi	r24, 0x1D	; 29
     8d6:	94 e0       	ldi	r25, 0x04	; 4
     8d8:	0e 94 cd 23 	call	0x479a	; 0x479a <puts>
	vTaskStartScheduler();
	
	while(1) {
		;
	}
}
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	0f 91       	pop	r16
     8e2:	ff 90       	pop	r15
     8e4:	ef 90       	pop	r14
     8e6:	08 95       	ret

000008e8 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     8e8:	e8 e0       	ldi	r30, 0x08	; 8
     8ea:	f1 e0       	ldi	r31, 0x01	; 1
     8ec:	90 81       	ld	r25, Z
     8ee:	90 7f       	andi	r25, 0xF0	; 240
     8f0:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     8f2:	90 81       	ld	r25, Z
     8f4:	8f 70       	andi	r24, 0x0F	; 15
     8f6:	98 2b       	or	r25, r24
     8f8:	90 83       	st	Z, r25
     8fa:	08 95       	ret

000008fc <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     8fc:	e8 e0       	ldi	r30, 0x08	; 8
     8fe:	f1 e0       	ldi	r31, 0x01	; 1
     900:	80 81       	ld	r24, Z
     902:	80 7f       	andi	r24, 0xF0	; 240
     904:	80 83       	st	Z, r24
     906:	08 95       	ret

00000908 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
     90e:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     912:	ce 01       	movw	r24, r28
     914:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <malloc>
     918:	ec 01       	movw	r28, r24
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     91a:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
     91e:	20 97       	sbiw	r28, 0x00	; 0
     920:	11 f4       	brne	.+4      	; 0x926 <pvPortMalloc+0x1e>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
     922:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
     926:	ce 01       	movw	r24, r28
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	08 95       	ret

0000092e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
    if( pv )
     932:	00 97       	sbiw	r24, 0x00	; 0
     934:	41 f0       	breq	.+16     	; 0x946 <vPortFree+0x18>
     936:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
     938:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <vTaskSuspendAll>
        {
            free( pv );
     93c:	ce 01       	movw	r24, r28
     93e:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
     942:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <xTaskResumeAll>
    }
}
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	08 95       	ret

0000094c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     94c:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     94e:	03 96       	adiw	r24, 0x03	; 3
     950:	92 83       	std	Z+2, r25	; 0x02
     952:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     954:	2f ef       	ldi	r18, 0xFF	; 255
     956:	3f ef       	ldi	r19, 0xFF	; 255
     958:	34 83       	std	Z+4, r19	; 0x04
     95a:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     95c:	96 83       	std	Z+6, r25	; 0x06
     95e:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     960:	90 87       	std	Z+8, r25	; 0x08
     962:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     964:	10 82       	st	Z, r1
     966:	08 95       	ret

00000968 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     968:	fc 01       	movw	r30, r24
     96a:	11 86       	std	Z+9, r1	; 0x09
     96c:	10 86       	std	Z+8, r1	; 0x08
     96e:	08 95       	ret

00000970 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	9c 01       	movw	r18, r24
     976:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     978:	dc 01       	movw	r26, r24
     97a:	11 96       	adiw	r26, 0x01	; 1
     97c:	cd 91       	ld	r28, X+
     97e:	dc 91       	ld	r29, X
     980:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     982:	d3 83       	std	Z+3, r29	; 0x03
     984:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     986:	8c 81       	ldd	r24, Y+4	; 0x04
     988:	9d 81       	ldd	r25, Y+5	; 0x05
     98a:	95 83       	std	Z+5, r25	; 0x05
     98c:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     98e:	8c 81       	ldd	r24, Y+4	; 0x04
     990:	9d 81       	ldd	r25, Y+5	; 0x05
     992:	dc 01       	movw	r26, r24
     994:	13 96       	adiw	r26, 0x03	; 3
     996:	7c 93       	st	X, r23
     998:	6e 93       	st	-X, r22
     99a:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     99c:	7d 83       	std	Y+5, r23	; 0x05
     99e:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     9a0:	31 87       	std	Z+9, r19	; 0x09
     9a2:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     9a4:	f9 01       	movw	r30, r18
     9a6:	80 81       	ld	r24, Z
     9a8:	8f 5f       	subi	r24, 0xFF	; 255
     9aa:	80 83       	st	Z, r24
}
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	08 95       	ret

000009b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     9b8:	48 81       	ld	r20, Y
     9ba:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     9bc:	4f 3f       	cpi	r20, 0xFF	; 255
     9be:	2f ef       	ldi	r18, 0xFF	; 255
     9c0:	52 07       	cpc	r21, r18
     9c2:	21 f4       	brne	.+8      	; 0x9cc <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     9c4:	fc 01       	movw	r30, r24
     9c6:	a7 81       	ldd	r26, Z+7	; 0x07
     9c8:	b0 85       	ldd	r27, Z+8	; 0x08
     9ca:	0d c0       	rjmp	.+26     	; 0x9e6 <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     9cc:	dc 01       	movw	r26, r24
     9ce:	13 96       	adiw	r26, 0x03	; 3
     9d0:	01 c0       	rjmp	.+2      	; 0x9d4 <vListInsert+0x22>
     9d2:	df 01       	movw	r26, r30
     9d4:	12 96       	adiw	r26, 0x02	; 2
     9d6:	ed 91       	ld	r30, X+
     9d8:	fc 91       	ld	r31, X
     9da:	13 97       	sbiw	r26, 0x03	; 3
     9dc:	20 81       	ld	r18, Z
     9de:	31 81       	ldd	r19, Z+1	; 0x01
     9e0:	42 17       	cp	r20, r18
     9e2:	53 07       	cpc	r21, r19
     9e4:	b0 f7       	brcc	.-20     	; 0x9d2 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     9e6:	12 96       	adiw	r26, 0x02	; 2
     9e8:	ed 91       	ld	r30, X+
     9ea:	fc 91       	ld	r31, X
     9ec:	13 97       	sbiw	r26, 0x03	; 3
     9ee:	fb 83       	std	Y+3, r31	; 0x03
     9f0:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     9f2:	d5 83       	std	Z+5, r29	; 0x05
     9f4:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     9f6:	bd 83       	std	Y+5, r27	; 0x05
     9f8:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     9fa:	13 96       	adiw	r26, 0x03	; 3
     9fc:	dc 93       	st	X, r29
     9fe:	ce 93       	st	-X, r28
     a00:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     a02:	99 87       	std	Y+9, r25	; 0x09
     a04:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     a06:	fc 01       	movw	r30, r24
     a08:	20 81       	ld	r18, Z
     a0a:	2f 5f       	subi	r18, 0xFF	; 255
     a0c:	20 83       	st	Z, r18
}
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	08 95       	ret

00000a14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
     a18:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     a1a:	a0 85       	ldd	r26, Z+8	; 0x08
     a1c:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     a1e:	c2 81       	ldd	r28, Z+2	; 0x02
     a20:	d3 81       	ldd	r29, Z+3	; 0x03
     a22:	84 81       	ldd	r24, Z+4	; 0x04
     a24:	95 81       	ldd	r25, Z+5	; 0x05
     a26:	9d 83       	std	Y+5, r25	; 0x05
     a28:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     a2a:	c4 81       	ldd	r28, Z+4	; 0x04
     a2c:	d5 81       	ldd	r29, Z+5	; 0x05
     a2e:	82 81       	ldd	r24, Z+2	; 0x02
     a30:	93 81       	ldd	r25, Z+3	; 0x03
     a32:	9b 83       	std	Y+3, r25	; 0x03
     a34:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     a36:	11 96       	adiw	r26, 0x01	; 1
     a38:	8d 91       	ld	r24, X+
     a3a:	9c 91       	ld	r25, X
     a3c:	12 97       	sbiw	r26, 0x02	; 2
     a3e:	e8 17       	cp	r30, r24
     a40:	f9 07       	cpc	r31, r25
     a42:	31 f4       	brne	.+12     	; 0xa50 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     a44:	84 81       	ldd	r24, Z+4	; 0x04
     a46:	95 81       	ldd	r25, Z+5	; 0x05
     a48:	12 96       	adiw	r26, 0x02	; 2
     a4a:	9c 93       	st	X, r25
     a4c:	8e 93       	st	-X, r24
     a4e:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     a50:	11 86       	std	Z+9, r1	; 0x09
     a52:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     a54:	8c 91       	ld	r24, X
     a56:	81 50       	subi	r24, 0x01	; 1
     a58:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     a5a:	8c 91       	ld	r24, X
}
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	08 95       	ret

00000a62 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     a62:	31 e1       	ldi	r19, 0x11	; 17
     a64:	fc 01       	movw	r30, r24
     a66:	30 83       	st	Z, r19
     a68:	31 97       	sbiw	r30, 0x01	; 1
     a6a:	22 e2       	ldi	r18, 0x22	; 34
     a6c:	20 83       	st	Z, r18
     a6e:	31 97       	sbiw	r30, 0x01	; 1
     a70:	a3 e3       	ldi	r26, 0x33	; 51
     a72:	a0 83       	st	Z, r26
     a74:	31 97       	sbiw	r30, 0x01	; 1
     a76:	60 83       	st	Z, r22
     a78:	31 97       	sbiw	r30, 0x01	; 1
     a7a:	70 83       	st	Z, r23
     a7c:	31 97       	sbiw	r30, 0x01	; 1
     a7e:	10 82       	st	Z, r1
     a80:	31 97       	sbiw	r30, 0x01	; 1
     a82:	10 82       	st	Z, r1
     a84:	31 97       	sbiw	r30, 0x01	; 1
     a86:	60 e8       	ldi	r22, 0x80	; 128
     a88:	60 83       	st	Z, r22
     a8a:	31 97       	sbiw	r30, 0x01	; 1
     a8c:	10 82       	st	Z, r1
     a8e:	31 97       	sbiw	r30, 0x01	; 1
     a90:	10 82       	st	Z, r1
     a92:	31 97       	sbiw	r30, 0x01	; 1
     a94:	10 82       	st	Z, r1
     a96:	31 97       	sbiw	r30, 0x01	; 1
     a98:	62 e0       	ldi	r22, 0x02	; 2
     a9a:	60 83       	st	Z, r22
     a9c:	31 97       	sbiw	r30, 0x01	; 1
     a9e:	63 e0       	ldi	r22, 0x03	; 3
     aa0:	60 83       	st	Z, r22
     aa2:	31 97       	sbiw	r30, 0x01	; 1
     aa4:	64 e0       	ldi	r22, 0x04	; 4
     aa6:	60 83       	st	Z, r22
     aa8:	31 97       	sbiw	r30, 0x01	; 1
     aaa:	65 e0       	ldi	r22, 0x05	; 5
     aac:	60 83       	st	Z, r22
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	66 e0       	ldi	r22, 0x06	; 6
     ab2:	60 83       	st	Z, r22
     ab4:	31 97       	sbiw	r30, 0x01	; 1
     ab6:	67 e0       	ldi	r22, 0x07	; 7
     ab8:	60 83       	st	Z, r22
     aba:	31 97       	sbiw	r30, 0x01	; 1
     abc:	68 e0       	ldi	r22, 0x08	; 8
     abe:	60 83       	st	Z, r22
     ac0:	31 97       	sbiw	r30, 0x01	; 1
     ac2:	69 e0       	ldi	r22, 0x09	; 9
     ac4:	60 83       	st	Z, r22
     ac6:	31 97       	sbiw	r30, 0x01	; 1
     ac8:	60 e1       	ldi	r22, 0x10	; 16
     aca:	60 83       	st	Z, r22
     acc:	31 97       	sbiw	r30, 0x01	; 1
     ace:	30 83       	st	Z, r19
     ad0:	31 97       	sbiw	r30, 0x01	; 1
     ad2:	32 e1       	ldi	r19, 0x12	; 18
     ad4:	30 83       	st	Z, r19
     ad6:	31 97       	sbiw	r30, 0x01	; 1
     ad8:	33 e1       	ldi	r19, 0x13	; 19
     ada:	30 83       	st	Z, r19
     adc:	31 97       	sbiw	r30, 0x01	; 1
     ade:	34 e1       	ldi	r19, 0x14	; 20
     ae0:	30 83       	st	Z, r19
     ae2:	31 97       	sbiw	r30, 0x01	; 1
     ae4:	35 e1       	ldi	r19, 0x15	; 21
     ae6:	30 83       	st	Z, r19
     ae8:	31 97       	sbiw	r30, 0x01	; 1
     aea:	36 e1       	ldi	r19, 0x16	; 22
     aec:	30 83       	st	Z, r19
     aee:	31 97       	sbiw	r30, 0x01	; 1
     af0:	37 e1       	ldi	r19, 0x17	; 23
     af2:	30 83       	st	Z, r19
     af4:	31 97       	sbiw	r30, 0x01	; 1
     af6:	38 e1       	ldi	r19, 0x18	; 24
     af8:	30 83       	st	Z, r19
     afa:	31 97       	sbiw	r30, 0x01	; 1
     afc:	39 e1       	ldi	r19, 0x19	; 25
     afe:	30 83       	st	Z, r19
     b00:	31 97       	sbiw	r30, 0x01	; 1
     b02:	30 e2       	ldi	r19, 0x20	; 32
     b04:	30 83       	st	Z, r19
     b06:	31 97       	sbiw	r30, 0x01	; 1
     b08:	31 e2       	ldi	r19, 0x21	; 33
     b0a:	30 83       	st	Z, r19
     b0c:	31 97       	sbiw	r30, 0x01	; 1
     b0e:	20 83       	st	Z, r18
     b10:	31 97       	sbiw	r30, 0x01	; 1
     b12:	23 e2       	ldi	r18, 0x23	; 35
     b14:	20 83       	st	Z, r18
     b16:	31 97       	sbiw	r30, 0x01	; 1
     b18:	40 83       	st	Z, r20
     b1a:	31 97       	sbiw	r30, 0x01	; 1
     b1c:	50 83       	st	Z, r21
     b1e:	31 97       	sbiw	r30, 0x01	; 1
     b20:	26 e2       	ldi	r18, 0x26	; 38
     b22:	20 83       	st	Z, r18
     b24:	31 97       	sbiw	r30, 0x01	; 1
     b26:	27 e2       	ldi	r18, 0x27	; 39
     b28:	20 83       	st	Z, r18
     b2a:	31 97       	sbiw	r30, 0x01	; 1
     b2c:	28 e2       	ldi	r18, 0x28	; 40
     b2e:	20 83       	st	Z, r18
     b30:	31 97       	sbiw	r30, 0x01	; 1
     b32:	29 e2       	ldi	r18, 0x29	; 41
     b34:	20 83       	st	Z, r18
     b36:	31 97       	sbiw	r30, 0x01	; 1
     b38:	20 e3       	ldi	r18, 0x30	; 48
     b3a:	20 83       	st	Z, r18
     b3c:	31 97       	sbiw	r30, 0x01	; 1
     b3e:	21 e3       	ldi	r18, 0x31	; 49
     b40:	20 83       	st	Z, r18
     b42:	89 97       	sbiw	r24, 0x29	; 41
     b44:	08 95       	ret

00000b46 <xPortStartScheduler>:
     b46:	a8 95       	wdr
     b48:	90 ec       	ldi	r25, 0xC0	; 192
     b4a:	88 e1       	ldi	r24, 0x18	; 24
     b4c:	0f b6       	in	r0, 0x3f	; 63
     b4e:	f8 94       	cli
     b50:	a8 95       	wdr
     b52:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     b5c:	a0 91 f8 07 	lds	r26, 0x07F8	; 0x8007f8 <pxCurrentTCB>
     b60:	b0 91 f9 07 	lds	r27, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>
     b64:	cd 91       	ld	r28, X+
     b66:	cd bf       	out	0x3d, r28	; 61
     b68:	dd 91       	ld	r29, X+
     b6a:	de bf       	out	0x3e, r29	; 62
     b6c:	ff 91       	pop	r31
     b6e:	ef 91       	pop	r30
     b70:	df 91       	pop	r29
     b72:	cf 91       	pop	r28
     b74:	bf 91       	pop	r27
     b76:	af 91       	pop	r26
     b78:	9f 91       	pop	r25
     b7a:	8f 91       	pop	r24
     b7c:	7f 91       	pop	r23
     b7e:	6f 91       	pop	r22
     b80:	5f 91       	pop	r21
     b82:	4f 91       	pop	r20
     b84:	3f 91       	pop	r19
     b86:	2f 91       	pop	r18
     b88:	1f 91       	pop	r17
     b8a:	0f 91       	pop	r16
     b8c:	ff 90       	pop	r15
     b8e:	ef 90       	pop	r14
     b90:	df 90       	pop	r13
     b92:	cf 90       	pop	r12
     b94:	bf 90       	pop	r11
     b96:	af 90       	pop	r10
     b98:	9f 90       	pop	r9
     b9a:	8f 90       	pop	r8
     b9c:	7f 90       	pop	r7
     b9e:	6f 90       	pop	r6
     ba0:	5f 90       	pop	r5
     ba2:	4f 90       	pop	r4
     ba4:	3f 90       	pop	r3
     ba6:	2f 90       	pop	r2
     ba8:	1f 90       	pop	r1
     baa:	0f 90       	pop	r0
     bac:	0c be       	out	0x3c, r0	; 60
     bae:	0f 90       	pop	r0
     bb0:	0b be       	out	0x3b, r0	; 59
     bb2:	0f 90       	pop	r0
     bb4:	0f be       	out	0x3f, r0	; 63
     bb6:	0f 90       	pop	r0
     bb8:	08 95       	ret
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	08 95       	ret

00000bbe <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     bbe:	0f 92       	push	r0
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	0f 92       	push	r0
     bc6:	0b b6       	in	r0, 0x3b	; 59
     bc8:	0f 92       	push	r0
     bca:	0c b6       	in	r0, 0x3c	; 60
     bcc:	0f 92       	push	r0
     bce:	1f 92       	push	r1
     bd0:	11 24       	eor	r1, r1
     bd2:	2f 92       	push	r2
     bd4:	3f 92       	push	r3
     bd6:	4f 92       	push	r4
     bd8:	5f 92       	push	r5
     bda:	6f 92       	push	r6
     bdc:	7f 92       	push	r7
     bde:	8f 92       	push	r8
     be0:	9f 92       	push	r9
     be2:	af 92       	push	r10
     be4:	bf 92       	push	r11
     be6:	cf 92       	push	r12
     be8:	df 92       	push	r13
     bea:	ef 92       	push	r14
     bec:	ff 92       	push	r15
     bee:	0f 93       	push	r16
     bf0:	1f 93       	push	r17
     bf2:	2f 93       	push	r18
     bf4:	3f 93       	push	r19
     bf6:	4f 93       	push	r20
     bf8:	5f 93       	push	r21
     bfa:	6f 93       	push	r22
     bfc:	7f 93       	push	r23
     bfe:	8f 93       	push	r24
     c00:	9f 93       	push	r25
     c02:	af 93       	push	r26
     c04:	bf 93       	push	r27
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	ef 93       	push	r30
     c0c:	ff 93       	push	r31
     c0e:	a0 91 f8 07 	lds	r26, 0x07F8	; 0x8007f8 <pxCurrentTCB>
     c12:	b0 91 f9 07 	lds	r27, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>
     c16:	0d b6       	in	r0, 0x3d	; 61
     c18:	0d 92       	st	X+, r0
     c1a:	0e b6       	in	r0, 0x3e	; 62
     c1c:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     c1e:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     c22:	a0 91 f8 07 	lds	r26, 0x07F8	; 0x8007f8 <pxCurrentTCB>
     c26:	b0 91 f9 07 	lds	r27, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>
     c2a:	cd 91       	ld	r28, X+
     c2c:	cd bf       	out	0x3d, r28	; 61
     c2e:	dd 91       	ld	r29, X+
     c30:	de bf       	out	0x3e, r29	; 62
     c32:	ff 91       	pop	r31
     c34:	ef 91       	pop	r30
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	bf 91       	pop	r27
     c3c:	af 91       	pop	r26
     c3e:	9f 91       	pop	r25
     c40:	8f 91       	pop	r24
     c42:	7f 91       	pop	r23
     c44:	6f 91       	pop	r22
     c46:	5f 91       	pop	r21
     c48:	4f 91       	pop	r20
     c4a:	3f 91       	pop	r19
     c4c:	2f 91       	pop	r18
     c4e:	1f 91       	pop	r17
     c50:	0f 91       	pop	r16
     c52:	ff 90       	pop	r15
     c54:	ef 90       	pop	r14
     c56:	df 90       	pop	r13
     c58:	cf 90       	pop	r12
     c5a:	bf 90       	pop	r11
     c5c:	af 90       	pop	r10
     c5e:	9f 90       	pop	r9
     c60:	8f 90       	pop	r8
     c62:	7f 90       	pop	r7
     c64:	6f 90       	pop	r6
     c66:	5f 90       	pop	r5
     c68:	4f 90       	pop	r4
     c6a:	3f 90       	pop	r3
     c6c:	2f 90       	pop	r2
     c6e:	1f 90       	pop	r1
     c70:	0f 90       	pop	r0
     c72:	0c be       	out	0x3c, r0	; 60
     c74:	0f 90       	pop	r0
     c76:	0b be       	out	0x3b, r0	; 59
     c78:	0f 90       	pop	r0
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     c7e:	08 95       	ret

00000c80 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     c80:	0f 92       	push	r0
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	f8 94       	cli
     c86:	0f 92       	push	r0
     c88:	0b b6       	in	r0, 0x3b	; 59
     c8a:	0f 92       	push	r0
     c8c:	0c b6       	in	r0, 0x3c	; 60
     c8e:	0f 92       	push	r0
     c90:	1f 92       	push	r1
     c92:	11 24       	eor	r1, r1
     c94:	2f 92       	push	r2
     c96:	3f 92       	push	r3
     c98:	4f 92       	push	r4
     c9a:	5f 92       	push	r5
     c9c:	6f 92       	push	r6
     c9e:	7f 92       	push	r7
     ca0:	8f 92       	push	r8
     ca2:	9f 92       	push	r9
     ca4:	af 92       	push	r10
     ca6:	bf 92       	push	r11
     ca8:	cf 92       	push	r12
     caa:	df 92       	push	r13
     cac:	ef 92       	push	r14
     cae:	ff 92       	push	r15
     cb0:	0f 93       	push	r16
     cb2:	1f 93       	push	r17
     cb4:	2f 93       	push	r18
     cb6:	3f 93       	push	r19
     cb8:	4f 93       	push	r20
     cba:	5f 93       	push	r21
     cbc:	6f 93       	push	r22
     cbe:	7f 93       	push	r23
     cc0:	8f 93       	push	r24
     cc2:	9f 93       	push	r25
     cc4:	af 93       	push	r26
     cc6:	bf 93       	push	r27
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
     ccc:	ef 93       	push	r30
     cce:	ff 93       	push	r31
     cd0:	a0 91 f8 07 	lds	r26, 0x07F8	; 0x8007f8 <pxCurrentTCB>
     cd4:	b0 91 f9 07 	lds	r27, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>
     cd8:	0d b6       	in	r0, 0x3d	; 61
     cda:	0d 92       	st	X+, r0
     cdc:	0e b6       	in	r0, 0x3e	; 62
     cde:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     ce0:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     ce2:	d8 d6       	rcall	.+3504   	; 0x1a94 <xTaskIncrementTick>
     ce4:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     ce6:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
     cea:	a0 91 f8 07 	lds	r26, 0x07F8	; 0x8007f8 <pxCurrentTCB>
     cee:	b0 91 f9 07 	lds	r27, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>
     cf2:	cd 91       	ld	r28, X+
     cf4:	cd bf       	out	0x3d, r28	; 61
     cf6:	dd 91       	ld	r29, X+
     cf8:	de bf       	out	0x3e, r29	; 62
     cfa:	ff 91       	pop	r31
     cfc:	ef 91       	pop	r30
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	bf 91       	pop	r27
     d04:	af 91       	pop	r26
     d06:	9f 91       	pop	r25
     d08:	8f 91       	pop	r24
     d0a:	7f 91       	pop	r23
     d0c:	6f 91       	pop	r22
     d0e:	5f 91       	pop	r21
     d10:	4f 91       	pop	r20
     d12:	3f 91       	pop	r19
     d14:	2f 91       	pop	r18
     d16:	1f 91       	pop	r17
     d18:	0f 91       	pop	r16
     d1a:	ff 90       	pop	r15
     d1c:	ef 90       	pop	r14
     d1e:	df 90       	pop	r13
     d20:	cf 90       	pop	r12
     d22:	bf 90       	pop	r11
     d24:	af 90       	pop	r10
     d26:	9f 90       	pop	r9
     d28:	8f 90       	pop	r8
     d2a:	7f 90       	pop	r7
     d2c:	6f 90       	pop	r6
     d2e:	5f 90       	pop	r5
     d30:	4f 90       	pop	r4
     d32:	3f 90       	pop	r3
     d34:	2f 90       	pop	r2
     d36:	1f 90       	pop	r1
     d38:	0f 90       	pop	r0
     d3a:	0c be       	out	0x3c, r0	; 60
     d3c:	0f 90       	pop	r0
     d3e:	0b be       	out	0x3b, r0	; 59
     d40:	0f 90       	pop	r0
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     d46:	08 95       	ret

00000d48 <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     d48:	9b df       	rcall	.-202    	; 0xc80 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     d4a:	18 95       	reti

00000d4c <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     d4c:	0f b6       	in	r0, 0x3f	; 63
     d4e:	f8 94       	cli
     d50:	0f 92       	push	r0
     d52:	fc 01       	movw	r30, r24
     d54:	92 8d       	ldd	r25, Z+26	; 0x1a
     d56:	0f 90       	pop	r0
     d58:	0f be       	out	0x3f, r0	; 63
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	91 11       	cpse	r25, r1
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	08 95       	ret

00000d62 <prvCopyDataToQueue>:
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
     d6a:	ec 01       	movw	r28, r24
     d6c:	04 2f       	mov	r16, r20
     d6e:	1a 8d       	ldd	r17, Y+26	; 0x1a
     d70:	4c 8d       	ldd	r20, Y+28	; 0x1c
     d72:	41 11       	cpse	r20, r1
     d74:	0c c0       	rjmp	.+24     	; 0xd8e <prvCopyDataToQueue+0x2c>
     d76:	88 81       	ld	r24, Y
     d78:	99 81       	ldd	r25, Y+1	; 0x01
     d7a:	89 2b       	or	r24, r25
     d7c:	09 f0       	breq	.+2      	; 0xd80 <prvCopyDataToQueue+0x1e>
     d7e:	42 c0       	rjmp	.+132    	; 0xe04 <prvCopyDataToQueue+0xa2>
     d80:	8c 81       	ldd	r24, Y+4	; 0x04
     d82:	9d 81       	ldd	r25, Y+5	; 0x05
     d84:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <xTaskPriorityDisinherit>
     d88:	1d 82       	std	Y+5, r1	; 0x05
     d8a:	1c 82       	std	Y+4, r1	; 0x04
     d8c:	42 c0       	rjmp	.+132    	; 0xe12 <prvCopyDataToQueue+0xb0>
     d8e:	01 11       	cpse	r16, r1
     d90:	17 c0       	rjmp	.+46     	; 0xdc0 <prvCopyDataToQueue+0x5e>
     d92:	50 e0       	ldi	r21, 0x00	; 0
     d94:	8a 81       	ldd	r24, Y+2	; 0x02
     d96:	9b 81       	ldd	r25, Y+3	; 0x03
     d98:	0e 94 80 23 	call	0x4700	; 0x4700 <memcpy>
     d9c:	2c 8d       	ldd	r18, Y+28	; 0x1c
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	9b 81       	ldd	r25, Y+3	; 0x03
     da2:	82 0f       	add	r24, r18
     da4:	91 1d       	adc	r25, r1
     da6:	9b 83       	std	Y+3, r25	; 0x03
     da8:	8a 83       	std	Y+2, r24	; 0x02
     daa:	2c 81       	ldd	r18, Y+4	; 0x04
     dac:	3d 81       	ldd	r19, Y+5	; 0x05
     dae:	82 17       	cp	r24, r18
     db0:	93 07       	cpc	r25, r19
     db2:	50 f1       	brcs	.+84     	; 0xe08 <prvCopyDataToQueue+0xa6>
     db4:	88 81       	ld	r24, Y
     db6:	99 81       	ldd	r25, Y+1	; 0x01
     db8:	9b 83       	std	Y+3, r25	; 0x03
     dba:	8a 83       	std	Y+2, r24	; 0x02
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	29 c0       	rjmp	.+82     	; 0xe12 <prvCopyDataToQueue+0xb0>
     dc0:	50 e0       	ldi	r21, 0x00	; 0
     dc2:	8e 81       	ldd	r24, Y+6	; 0x06
     dc4:	9f 81       	ldd	r25, Y+7	; 0x07
     dc6:	0e 94 80 23 	call	0x4700	; 0x4700 <memcpy>
     dca:	8c 8d       	ldd	r24, Y+28	; 0x1c
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	91 95       	neg	r25
     dd0:	81 95       	neg	r24
     dd2:	91 09       	sbc	r25, r1
     dd4:	2e 81       	ldd	r18, Y+6	; 0x06
     dd6:	3f 81       	ldd	r19, Y+7	; 0x07
     dd8:	28 0f       	add	r18, r24
     dda:	39 1f       	adc	r19, r25
     ddc:	3f 83       	std	Y+7, r19	; 0x07
     dde:	2e 83       	std	Y+6, r18	; 0x06
     de0:	48 81       	ld	r20, Y
     de2:	59 81       	ldd	r21, Y+1	; 0x01
     de4:	24 17       	cp	r18, r20
     de6:	35 07       	cpc	r19, r21
     de8:	30 f4       	brcc	.+12     	; 0xdf6 <prvCopyDataToQueue+0x94>
     dea:	2c 81       	ldd	r18, Y+4	; 0x04
     dec:	3d 81       	ldd	r19, Y+5	; 0x05
     dee:	82 0f       	add	r24, r18
     df0:	93 1f       	adc	r25, r19
     df2:	9f 83       	std	Y+7, r25	; 0x07
     df4:	8e 83       	std	Y+6, r24	; 0x06
     df6:	02 30       	cpi	r16, 0x02	; 2
     df8:	49 f4       	brne	.+18     	; 0xe0c <prvCopyDataToQueue+0xaa>
     dfa:	11 23       	and	r17, r17
     dfc:	49 f0       	breq	.+18     	; 0xe10 <prvCopyDataToQueue+0xae>
     dfe:	11 50       	subi	r17, 0x01	; 1
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	07 c0       	rjmp	.+14     	; 0xe12 <prvCopyDataToQueue+0xb0>
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	05 c0       	rjmp	.+10     	; 0xe12 <prvCopyDataToQueue+0xb0>
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	03 c0       	rjmp	.+6      	; 0xe12 <prvCopyDataToQueue+0xb0>
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	01 c0       	rjmp	.+2      	; 0xe12 <prvCopyDataToQueue+0xb0>
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	1f 5f       	subi	r17, 0xFF	; 255
     e14:	1a 8f       	std	Y+26, r17	; 0x1a
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	1f 91       	pop	r17
     e1c:	0f 91       	pop	r16
     e1e:	08 95       	ret

00000e20 <prvCopyDataFromQueue>:
     e20:	fc 01       	movw	r30, r24
     e22:	44 8d       	ldd	r20, Z+28	; 0x1c
     e24:	44 23       	and	r20, r20
     e26:	a9 f0       	breq	.+42     	; 0xe52 <prvCopyDataFromQueue+0x32>
     e28:	50 e0       	ldi	r21, 0x00	; 0
     e2a:	26 81       	ldd	r18, Z+6	; 0x06
     e2c:	37 81       	ldd	r19, Z+7	; 0x07
     e2e:	24 0f       	add	r18, r20
     e30:	35 1f       	adc	r19, r21
     e32:	37 83       	std	Z+7, r19	; 0x07
     e34:	26 83       	std	Z+6, r18	; 0x06
     e36:	84 81       	ldd	r24, Z+4	; 0x04
     e38:	95 81       	ldd	r25, Z+5	; 0x05
     e3a:	28 17       	cp	r18, r24
     e3c:	39 07       	cpc	r19, r25
     e3e:	20 f0       	brcs	.+8      	; 0xe48 <prvCopyDataFromQueue+0x28>
     e40:	80 81       	ld	r24, Z
     e42:	91 81       	ldd	r25, Z+1	; 0x01
     e44:	97 83       	std	Z+7, r25	; 0x07
     e46:	86 83       	std	Z+6, r24	; 0x06
     e48:	cb 01       	movw	r24, r22
     e4a:	66 81       	ldd	r22, Z+6	; 0x06
     e4c:	77 81       	ldd	r23, Z+7	; 0x07
     e4e:	0c 94 80 23 	jmp	0x4700	; 0x4700 <memcpy>
     e52:	08 95       	ret

00000e54 <prvUnlockQueue>:
     e54:	ef 92       	push	r14
     e56:	ff 92       	push	r15
     e58:	0f 93       	push	r16
     e5a:	1f 93       	push	r17
     e5c:	cf 93       	push	r28
     e5e:	8c 01       	movw	r16, r24
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	f8 94       	cli
     e64:	0f 92       	push	r0
     e66:	fc 01       	movw	r30, r24
     e68:	c6 8d       	ldd	r28, Z+30	; 0x1e
     e6a:	1c 16       	cp	r1, r28
     e6c:	ac f4       	brge	.+42     	; 0xe98 <prvUnlockQueue+0x44>
     e6e:	81 89       	ldd	r24, Z+17	; 0x11
     e70:	81 11       	cpse	r24, r1
     e72:	06 c0       	rjmp	.+12     	; 0xe80 <prvUnlockQueue+0x2c>
     e74:	11 c0       	rjmp	.+34     	; 0xe98 <prvUnlockQueue+0x44>
     e76:	f8 01       	movw	r30, r16
     e78:	81 89       	ldd	r24, Z+17	; 0x11
     e7a:	81 11       	cpse	r24, r1
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <prvUnlockQueue+0x34>
     e7e:	0c c0       	rjmp	.+24     	; 0xe98 <prvUnlockQueue+0x44>
     e80:	78 01       	movw	r14, r16
     e82:	f1 e1       	ldi	r31, 0x11	; 17
     e84:	ef 0e       	add	r14, r31
     e86:	f1 1c       	adc	r15, r1
     e88:	c7 01       	movw	r24, r14
     e8a:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <xTaskRemoveFromEventList>
     e8e:	81 11       	cpse	r24, r1
     e90:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <vTaskMissedYield>
     e94:	c1 50       	subi	r28, 0x01	; 1
     e96:	79 f7       	brne	.-34     	; 0xe76 <prvUnlockQueue+0x22>
     e98:	8f ef       	ldi	r24, 0xFF	; 255
     e9a:	f8 01       	movw	r30, r16
     e9c:	86 8f       	std	Z+30, r24	; 0x1e
     e9e:	0f 90       	pop	r0
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	0f 92       	push	r0
     ea8:	c5 8d       	ldd	r28, Z+29	; 0x1d
     eaa:	1c 16       	cp	r1, r28
     eac:	a4 f4       	brge	.+40     	; 0xed6 <prvUnlockQueue+0x82>
     eae:	80 85       	ldd	r24, Z+8	; 0x08
     eb0:	81 11       	cpse	r24, r1
     eb2:	06 c0       	rjmp	.+12     	; 0xec0 <prvUnlockQueue+0x6c>
     eb4:	10 c0       	rjmp	.+32     	; 0xed6 <prvUnlockQueue+0x82>
     eb6:	f8 01       	movw	r30, r16
     eb8:	80 85       	ldd	r24, Z+8	; 0x08
     eba:	81 11       	cpse	r24, r1
     ebc:	05 c0       	rjmp	.+10     	; 0xec8 <prvUnlockQueue+0x74>
     ebe:	0b c0       	rjmp	.+22     	; 0xed6 <prvUnlockQueue+0x82>
     ec0:	78 01       	movw	r14, r16
     ec2:	f8 e0       	ldi	r31, 0x08	; 8
     ec4:	ef 0e       	add	r14, r31
     ec6:	f1 1c       	adc	r15, r1
     ec8:	c7 01       	movw	r24, r14
     eca:	e3 d7       	rcall	.+4038   	; 0x1e92 <xTaskRemoveFromEventList>
     ecc:	81 11       	cpse	r24, r1
     ece:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <vTaskMissedYield>
     ed2:	c1 50       	subi	r28, 0x01	; 1
     ed4:	81 f7       	brne	.-32     	; 0xeb6 <prvUnlockQueue+0x62>
     ed6:	8f ef       	ldi	r24, 0xFF	; 255
     ed8:	f8 01       	movw	r30, r16
     eda:	85 8f       	std	Z+29, r24	; 0x1d
     edc:	0f 90       	pop	r0
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	cf 91       	pop	r28
     ee2:	1f 91       	pop	r17
     ee4:	0f 91       	pop	r16
     ee6:	ff 90       	pop	r15
     ee8:	ef 90       	pop	r14
     eea:	08 95       	ret

00000eec <xQueueGenericReset>:
     eec:	cf 93       	push	r28
     eee:	df 93       	push	r29
     ef0:	ec 01       	movw	r28, r24
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	0f 92       	push	r0
     ef8:	e8 81       	ld	r30, Y
     efa:	f9 81       	ldd	r31, Y+1	; 0x01
     efc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     efe:	2c 8d       	ldd	r18, Y+28	; 0x1c
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	82 9f       	mul	r24, r18
     f06:	a0 01       	movw	r20, r0
     f08:	83 9f       	mul	r24, r19
     f0a:	50 0d       	add	r21, r0
     f0c:	92 9f       	mul	r25, r18
     f0e:	50 0d       	add	r21, r0
     f10:	11 24       	eor	r1, r1
     f12:	4e 0f       	add	r20, r30
     f14:	5f 1f       	adc	r21, r31
     f16:	5d 83       	std	Y+5, r21	; 0x05
     f18:	4c 83       	std	Y+4, r20	; 0x04
     f1a:	1a 8e       	std	Y+26, r1	; 0x1a
     f1c:	fb 83       	std	Y+3, r31	; 0x03
     f1e:	ea 83       	std	Y+2, r30	; 0x02
     f20:	01 97       	sbiw	r24, 0x01	; 1
     f22:	82 9f       	mul	r24, r18
     f24:	a0 01       	movw	r20, r0
     f26:	83 9f       	mul	r24, r19
     f28:	50 0d       	add	r21, r0
     f2a:	92 9f       	mul	r25, r18
     f2c:	50 0d       	add	r21, r0
     f2e:	11 24       	eor	r1, r1
     f30:	cf 01       	movw	r24, r30
     f32:	84 0f       	add	r24, r20
     f34:	95 1f       	adc	r25, r21
     f36:	9f 83       	std	Y+7, r25	; 0x07
     f38:	8e 83       	std	Y+6, r24	; 0x06
     f3a:	8f ef       	ldi	r24, 0xFF	; 255
     f3c:	8d 8f       	std	Y+29, r24	; 0x1d
     f3e:	8e 8f       	std	Y+30, r24	; 0x1e
     f40:	61 11       	cpse	r22, r1
     f42:	0a c0       	rjmp	.+20     	; 0xf58 <xQueueGenericReset+0x6c>
     f44:	88 85       	ldd	r24, Y+8	; 0x08
     f46:	88 23       	and	r24, r24
     f48:	69 f0       	breq	.+26     	; 0xf64 <xQueueGenericReset+0x78>
     f4a:	ce 01       	movw	r24, r28
     f4c:	08 96       	adiw	r24, 0x08	; 8
     f4e:	a1 d7       	rcall	.+3906   	; 0x1e92 <xTaskRemoveFromEventList>
     f50:	88 23       	and	r24, r24
     f52:	41 f0       	breq	.+16     	; 0xf64 <xQueueGenericReset+0x78>
     f54:	34 de       	rcall	.-920    	; 0xbbe <vPortYield>
     f56:	06 c0       	rjmp	.+12     	; 0xf64 <xQueueGenericReset+0x78>
     f58:	ce 01       	movw	r24, r28
     f5a:	08 96       	adiw	r24, 0x08	; 8
     f5c:	f7 dc       	rcall	.-1554   	; 0x94c <vListInitialise>
     f5e:	ce 01       	movw	r24, r28
     f60:	41 96       	adiw	r24, 0x11	; 17
     f62:	f4 dc       	rcall	.-1560   	; 0x94c <vListInitialise>
     f64:	0f 90       	pop	r0
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	df 91       	pop	r29
     f6c:	cf 91       	pop	r28
     f6e:	08 95       	ret

00000f70 <xQueueGenericCreate>:
     f70:	ff 92       	push	r15
     f72:	0f 93       	push	r16
     f74:	1f 93       	push	r17
     f76:	cf 93       	push	r28
     f78:	df 93       	push	r29
     f7a:	08 2f       	mov	r16, r24
     f7c:	16 2f       	mov	r17, r22
     f7e:	f4 2e       	mov	r15, r20
     f80:	66 23       	and	r22, r22
     f82:	b9 f0       	breq	.+46     	; 0xfb2 <xQueueGenericCreate+0x42>
     f84:	86 9f       	mul	r24, r22
     f86:	c0 01       	movw	r24, r0
     f88:	11 24       	eor	r1, r1
     f8a:	81 96       	adiw	r24, 0x21	; 33
     f8c:	bd dc       	rcall	.-1670   	; 0x908 <pvPortMalloc>
     f8e:	ec 01       	movw	r28, r24
     f90:	00 97       	sbiw	r24, 0x00	; 0
     f92:	41 f4       	brne	.+16     	; 0xfa4 <xQueueGenericCreate+0x34>
     f94:	14 c0       	rjmp	.+40     	; 0xfbe <xQueueGenericCreate+0x4e>
     f96:	0b 8f       	std	Y+27, r16	; 0x1b
     f98:	1c 8f       	std	Y+28, r17	; 0x1c
     f9a:	61 e0       	ldi	r22, 0x01	; 1
     f9c:	ce 01       	movw	r24, r28
     f9e:	a6 df       	rcall	.-180    	; 0xeec <xQueueGenericReset>
     fa0:	f8 a2       	std	Y+32, r15	; 0x20
     fa2:	0d c0       	rjmp	.+26     	; 0xfbe <xQueueGenericCreate+0x4e>
     fa4:	81 96       	adiw	r24, 0x21	; 33
     fa6:	99 83       	std	Y+1, r25	; 0x01
     fa8:	88 83       	st	Y, r24
     faa:	f5 cf       	rjmp	.-22     	; 0xf96 <xQueueGenericCreate+0x26>
     fac:	d9 83       	std	Y+1, r29	; 0x01
     fae:	c8 83       	st	Y, r28
     fb0:	f2 cf       	rjmp	.-28     	; 0xf96 <xQueueGenericCreate+0x26>
     fb2:	81 e2       	ldi	r24, 0x21	; 33
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	a8 dc       	rcall	.-1712   	; 0x908 <pvPortMalloc>
     fb8:	ec 01       	movw	r28, r24
     fba:	89 2b       	or	r24, r25
     fbc:	b9 f7       	brne	.-18     	; 0xfac <xQueueGenericCreate+0x3c>
     fbe:	ce 01       	movw	r24, r28
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	1f 91       	pop	r17
     fc6:	0f 91       	pop	r16
     fc8:	ff 90       	pop	r15
     fca:	08 95       	ret

00000fcc <xQueueGenericSend>:
     fcc:	9f 92       	push	r9
     fce:	af 92       	push	r10
     fd0:	bf 92       	push	r11
     fd2:	cf 92       	push	r12
     fd4:	df 92       	push	r13
     fd6:	ef 92       	push	r14
     fd8:	ff 92       	push	r15
     fda:	0f 93       	push	r16
     fdc:	1f 93       	push	r17
     fde:	cf 93       	push	r28
     fe0:	df 93       	push	r29
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <xQueueGenericSend+0x18>
     fe4:	1f 92       	push	r1
     fe6:	1f 92       	push	r1
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
     fec:	8c 01       	movw	r16, r24
     fee:	6b 01       	movw	r12, r22
     ff0:	5d 83       	std	Y+5, r21	; 0x05
     ff2:	4c 83       	std	Y+4, r20	; 0x04
     ff4:	a2 2e       	mov	r10, r18
     ff6:	b1 2c       	mov	r11, r1
     ff8:	99 24       	eor	r9, r9
     ffa:	93 94       	inc	r9
     ffc:	7c 01       	movw	r14, r24
     ffe:	88 e0       	ldi	r24, 0x08	; 8
    1000:	e8 0e       	add	r14, r24
    1002:	f1 1c       	adc	r15, r1
    1004:	0f b6       	in	r0, 0x3f	; 63
    1006:	f8 94       	cli
    1008:	0f 92       	push	r0
    100a:	f8 01       	movw	r30, r16
    100c:	92 8d       	ldd	r25, Z+26	; 0x1a
    100e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1010:	98 17       	cp	r25, r24
    1012:	18 f0       	brcs	.+6      	; 0x101a <xQueueGenericSend+0x4e>
    1014:	f2 e0       	ldi	r31, 0x02	; 2
    1016:	af 12       	cpse	r10, r31
    1018:	15 c0       	rjmp	.+42     	; 0x1044 <xQueueGenericSend+0x78>
    101a:	4a 2d       	mov	r20, r10
    101c:	b6 01       	movw	r22, r12
    101e:	c8 01       	movw	r24, r16
    1020:	a0 de       	rcall	.-704    	; 0xd62 <prvCopyDataToQueue>
    1022:	f8 01       	movw	r30, r16
    1024:	91 89       	ldd	r25, Z+17	; 0x11
    1026:	99 23       	and	r25, r25
    1028:	39 f0       	breq	.+14     	; 0x1038 <xQueueGenericSend+0x6c>
    102a:	c8 01       	movw	r24, r16
    102c:	41 96       	adiw	r24, 0x11	; 17
    102e:	31 d7       	rcall	.+3682   	; 0x1e92 <xTaskRemoveFromEventList>
    1030:	88 23       	and	r24, r24
    1032:	21 f0       	breq	.+8      	; 0x103c <xQueueGenericSend+0x70>
    1034:	c4 dd       	rcall	.-1144   	; 0xbbe <vPortYield>
    1036:	02 c0       	rjmp	.+4      	; 0x103c <xQueueGenericSend+0x70>
    1038:	81 11       	cpse	r24, r1
    103a:	c1 dd       	rcall	.-1150   	; 0xbbe <vPortYield>
    103c:	0f 90       	pop	r0
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	45 c0       	rjmp	.+138    	; 0x10ce <xQueueGenericSend+0x102>
    1044:	8c 81       	ldd	r24, Y+4	; 0x04
    1046:	9d 81       	ldd	r25, Y+5	; 0x05
    1048:	89 2b       	or	r24, r25
    104a:	21 f4       	brne	.+8      	; 0x1054 <xQueueGenericSend+0x88>
    104c:	0f 90       	pop	r0
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	3d c0       	rjmp	.+122    	; 0x10ce <xQueueGenericSend+0x102>
    1054:	b1 10       	cpse	r11, r1
    1056:	04 c0       	rjmp	.+8      	; 0x1060 <xQueueGenericSend+0x94>
    1058:	ce 01       	movw	r24, r28
    105a:	01 96       	adiw	r24, 0x01	; 1
    105c:	62 d7       	rcall	.+3780   	; 0x1f22 <vTaskInternalSetTimeOutState>
    105e:	b9 2c       	mov	r11, r9
    1060:	0f 90       	pop	r0
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	07 d5       	rcall	.+2574   	; 0x1a74 <vTaskSuspendAll>
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	f8 94       	cli
    106a:	0f 92       	push	r0
    106c:	f8 01       	movw	r30, r16
    106e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1070:	8f 3f       	cpi	r24, 0xFF	; 255
    1072:	09 f4       	brne	.+2      	; 0x1076 <xQueueGenericSend+0xaa>
    1074:	15 8e       	std	Z+29, r1	; 0x1d
    1076:	f8 01       	movw	r30, r16
    1078:	86 8d       	ldd	r24, Z+30	; 0x1e
    107a:	8f 3f       	cpi	r24, 0xFF	; 255
    107c:	09 f4       	brne	.+2      	; 0x1080 <xQueueGenericSend+0xb4>
    107e:	16 8e       	std	Z+30, r1	; 0x1e
    1080:	0f 90       	pop	r0
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	be 01       	movw	r22, r28
    1086:	6c 5f       	subi	r22, 0xFC	; 252
    1088:	7f 4f       	sbci	r23, 0xFF	; 255
    108a:	ce 01       	movw	r24, r28
    108c:	01 96       	adiw	r24, 0x01	; 1
    108e:	54 d7       	rcall	.+3752   	; 0x1f38 <xTaskCheckForTimeOut>
    1090:	81 11       	cpse	r24, r1
    1092:	19 c0       	rjmp	.+50     	; 0x10c6 <xQueueGenericSend+0xfa>
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	0f 92       	push	r0
    109a:	f8 01       	movw	r30, r16
    109c:	92 8d       	ldd	r25, Z+26	; 0x1a
    109e:	83 8d       	ldd	r24, Z+27	; 0x1b
    10a0:	0f 90       	pop	r0
    10a2:	0f be       	out	0x3f, r0	; 63
    10a4:	98 13       	cpse	r25, r24
    10a6:	0b c0       	rjmp	.+22     	; 0x10be <xQueueGenericSend+0xf2>
    10a8:	6c 81       	ldd	r22, Y+4	; 0x04
    10aa:	7d 81       	ldd	r23, Y+5	; 0x05
    10ac:	c7 01       	movw	r24, r14
    10ae:	c8 d6       	rcall	.+3472   	; 0x1e40 <vTaskPlaceOnEventList>
    10b0:	c8 01       	movw	r24, r16
    10b2:	d0 de       	rcall	.-608    	; 0xe54 <prvUnlockQueue>
    10b4:	a9 d5       	rcall	.+2898   	; 0x1c08 <xTaskResumeAll>
    10b6:	81 11       	cpse	r24, r1
    10b8:	a5 cf       	rjmp	.-182    	; 0x1004 <xQueueGenericSend+0x38>
    10ba:	81 dd       	rcall	.-1278   	; 0xbbe <vPortYield>
    10bc:	a3 cf       	rjmp	.-186    	; 0x1004 <xQueueGenericSend+0x38>
    10be:	c8 01       	movw	r24, r16
    10c0:	c9 de       	rcall	.-622    	; 0xe54 <prvUnlockQueue>
    10c2:	a2 d5       	rcall	.+2884   	; 0x1c08 <xTaskResumeAll>
    10c4:	9f cf       	rjmp	.-194    	; 0x1004 <xQueueGenericSend+0x38>
    10c6:	c8 01       	movw	r24, r16
    10c8:	c5 de       	rcall	.-630    	; 0xe54 <prvUnlockQueue>
    10ca:	9e d5       	rcall	.+2876   	; 0x1c08 <xTaskResumeAll>
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	df 91       	pop	r29
    10da:	cf 91       	pop	r28
    10dc:	1f 91       	pop	r17
    10de:	0f 91       	pop	r16
    10e0:	ff 90       	pop	r15
    10e2:	ef 90       	pop	r14
    10e4:	df 90       	pop	r13
    10e6:	cf 90       	pop	r12
    10e8:	bf 90       	pop	r11
    10ea:	af 90       	pop	r10
    10ec:	9f 90       	pop	r9
    10ee:	08 95       	ret

000010f0 <xQueueGenericSendFromISR>:
    10f0:	ef 92       	push	r14
    10f2:	ff 92       	push	r15
    10f4:	0f 93       	push	r16
    10f6:	1f 93       	push	r17
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	8a 01       	movw	r16, r20
    10fe:	fc 01       	movw	r30, r24
    1100:	52 8d       	ldd	r21, Z+26	; 0x1a
    1102:	33 8d       	ldd	r19, Z+27	; 0x1b
    1104:	53 17       	cp	r21, r19
    1106:	10 f0       	brcs	.+4      	; 0x110c <xQueueGenericSendFromISR+0x1c>
    1108:	22 30       	cpi	r18, 0x02	; 2
    110a:	e1 f4       	brne	.+56     	; 0x1144 <xQueueGenericSendFromISR+0x54>
    110c:	42 2f       	mov	r20, r18
    110e:	78 01       	movw	r14, r16
    1110:	ec 01       	movw	r28, r24
    1112:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1114:	26 de       	rcall	.-948    	; 0xd62 <prvCopyDataToQueue>
    1116:	1f 3f       	cpi	r17, 0xFF	; 255
    1118:	79 f4       	brne	.+30     	; 0x1138 <xQueueGenericSendFromISR+0x48>
    111a:	89 89       	ldd	r24, Y+17	; 0x11
    111c:	88 23       	and	r24, r24
    111e:	a1 f0       	breq	.+40     	; 0x1148 <xQueueGenericSendFromISR+0x58>
    1120:	ce 01       	movw	r24, r28
    1122:	41 96       	adiw	r24, 0x11	; 17
    1124:	b6 d6       	rcall	.+3436   	; 0x1e92 <xTaskRemoveFromEventList>
    1126:	88 23       	and	r24, r24
    1128:	89 f0       	breq	.+34     	; 0x114c <xQueueGenericSendFromISR+0x5c>
    112a:	e1 14       	cp	r14, r1
    112c:	f1 04       	cpc	r15, r1
    112e:	81 f0       	breq	.+32     	; 0x1150 <xQueueGenericSendFromISR+0x60>
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	f7 01       	movw	r30, r14
    1134:	80 83       	st	Z, r24
    1136:	0d c0       	rjmp	.+26     	; 0x1152 <xQueueGenericSendFromISR+0x62>
    1138:	ff 24       	eor	r15, r15
    113a:	f3 94       	inc	r15
    113c:	f1 0e       	add	r15, r17
    113e:	fe 8e       	std	Y+30, r15	; 0x1e
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	07 c0       	rjmp	.+14     	; 0x1152 <xQueueGenericSendFromISR+0x62>
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	05 c0       	rjmp	.+10     	; 0x1152 <xQueueGenericSendFromISR+0x62>
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	03 c0       	rjmp	.+6      	; 0x1152 <xQueueGenericSendFromISR+0x62>
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	01 c0       	rjmp	.+2      	; 0x1152 <xQueueGenericSendFromISR+0x62>
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	df 91       	pop	r29
    1154:	cf 91       	pop	r28
    1156:	1f 91       	pop	r17
    1158:	0f 91       	pop	r16
    115a:	ff 90       	pop	r15
    115c:	ef 90       	pop	r14
    115e:	08 95       	ret

00001160 <xQueueReceive>:
    1160:	9f 92       	push	r9
    1162:	af 92       	push	r10
    1164:	bf 92       	push	r11
    1166:	cf 92       	push	r12
    1168:	df 92       	push	r13
    116a:	ef 92       	push	r14
    116c:	ff 92       	push	r15
    116e:	0f 93       	push	r16
    1170:	1f 93       	push	r17
    1172:	cf 93       	push	r28
    1174:	df 93       	push	r29
    1176:	00 d0       	rcall	.+0      	; 0x1178 <xQueueReceive+0x18>
    1178:	1f 92       	push	r1
    117a:	1f 92       	push	r1
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	8c 01       	movw	r16, r24
    1182:	5b 01       	movw	r10, r22
    1184:	5d 83       	std	Y+5, r21	; 0x05
    1186:	4c 83       	std	Y+4, r20	; 0x04
    1188:	e1 2c       	mov	r14, r1
    118a:	99 24       	eor	r9, r9
    118c:	93 94       	inc	r9
    118e:	6c 01       	movw	r12, r24
    1190:	81 e1       	ldi	r24, 0x11	; 17
    1192:	c8 0e       	add	r12, r24
    1194:	d1 1c       	adc	r13, r1
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	0f 92       	push	r0
    119c:	f8 01       	movw	r30, r16
    119e:	f2 8c       	ldd	r15, Z+26	; 0x1a
    11a0:	ff 20       	and	r15, r15
    11a2:	91 f0       	breq	.+36     	; 0x11c8 <xQueueReceive+0x68>
    11a4:	b5 01       	movw	r22, r10
    11a6:	c8 01       	movw	r24, r16
    11a8:	3b de       	rcall	.-906    	; 0xe20 <prvCopyDataFromQueue>
    11aa:	fa 94       	dec	r15
    11ac:	f8 01       	movw	r30, r16
    11ae:	f2 8e       	std	Z+26, r15	; 0x1a
    11b0:	80 85       	ldd	r24, Z+8	; 0x08
    11b2:	88 23       	and	r24, r24
    11b4:	29 f0       	breq	.+10     	; 0x11c0 <xQueueReceive+0x60>
    11b6:	c8 01       	movw	r24, r16
    11b8:	08 96       	adiw	r24, 0x08	; 8
    11ba:	6b d6       	rcall	.+3286   	; 0x1e92 <xTaskRemoveFromEventList>
    11bc:	81 11       	cpse	r24, r1
    11be:	ff dc       	rcall	.-1538   	; 0xbbe <vPortYield>
    11c0:	0f 90       	pop	r0
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	44 c0       	rjmp	.+136    	; 0x1250 <xQueueReceive+0xf0>
    11c8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ca:	9d 81       	ldd	r25, Y+5	; 0x05
    11cc:	89 2b       	or	r24, r25
    11ce:	21 f4       	brne	.+8      	; 0x11d8 <xQueueReceive+0x78>
    11d0:	0f 90       	pop	r0
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	3c c0       	rjmp	.+120    	; 0x1250 <xQueueReceive+0xf0>
    11d8:	e1 10       	cpse	r14, r1
    11da:	04 c0       	rjmp	.+8      	; 0x11e4 <xQueueReceive+0x84>
    11dc:	ce 01       	movw	r24, r28
    11de:	01 96       	adiw	r24, 0x01	; 1
    11e0:	a0 d6       	rcall	.+3392   	; 0x1f22 <vTaskInternalSetTimeOutState>
    11e2:	e9 2c       	mov	r14, r9
    11e4:	0f 90       	pop	r0
    11e6:	0f be       	out	0x3f, r0	; 63
    11e8:	45 d4       	rcall	.+2186   	; 0x1a74 <vTaskSuspendAll>
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	f8 94       	cli
    11ee:	0f 92       	push	r0
    11f0:	f8 01       	movw	r30, r16
    11f2:	85 8d       	ldd	r24, Z+29	; 0x1d
    11f4:	8f 3f       	cpi	r24, 0xFF	; 255
    11f6:	09 f4       	brne	.+2      	; 0x11fa <xQueueReceive+0x9a>
    11f8:	15 8e       	std	Z+29, r1	; 0x1d
    11fa:	f8 01       	movw	r30, r16
    11fc:	86 8d       	ldd	r24, Z+30	; 0x1e
    11fe:	8f 3f       	cpi	r24, 0xFF	; 255
    1200:	09 f4       	brne	.+2      	; 0x1204 <xQueueReceive+0xa4>
    1202:	16 8e       	std	Z+30, r1	; 0x1e
    1204:	0f 90       	pop	r0
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	be 01       	movw	r22, r28
    120a:	6c 5f       	subi	r22, 0xFC	; 252
    120c:	7f 4f       	sbci	r23, 0xFF	; 255
    120e:	ce 01       	movw	r24, r28
    1210:	01 96       	adiw	r24, 0x01	; 1
    1212:	92 d6       	rcall	.+3364   	; 0x1f38 <xTaskCheckForTimeOut>
    1214:	81 11       	cpse	r24, r1
    1216:	13 c0       	rjmp	.+38     	; 0x123e <xQueueReceive+0xde>
    1218:	c8 01       	movw	r24, r16
    121a:	98 dd       	rcall	.-1232   	; 0xd4c <prvIsQueueEmpty>
    121c:	88 23       	and	r24, r24
    121e:	59 f0       	breq	.+22     	; 0x1236 <xQueueReceive+0xd6>
    1220:	6c 81       	ldd	r22, Y+4	; 0x04
    1222:	7d 81       	ldd	r23, Y+5	; 0x05
    1224:	c6 01       	movw	r24, r12
    1226:	0c d6       	rcall	.+3096   	; 0x1e40 <vTaskPlaceOnEventList>
    1228:	c8 01       	movw	r24, r16
    122a:	14 de       	rcall	.-984    	; 0xe54 <prvUnlockQueue>
    122c:	ed d4       	rcall	.+2522   	; 0x1c08 <xTaskResumeAll>
    122e:	81 11       	cpse	r24, r1
    1230:	b2 cf       	rjmp	.-156    	; 0x1196 <xQueueReceive+0x36>
    1232:	c5 dc       	rcall	.-1654   	; 0xbbe <vPortYield>
    1234:	b0 cf       	rjmp	.-160    	; 0x1196 <xQueueReceive+0x36>
    1236:	c8 01       	movw	r24, r16
    1238:	0d de       	rcall	.-998    	; 0xe54 <prvUnlockQueue>
    123a:	e6 d4       	rcall	.+2508   	; 0x1c08 <xTaskResumeAll>
    123c:	ac cf       	rjmp	.-168    	; 0x1196 <xQueueReceive+0x36>
    123e:	c8 01       	movw	r24, r16
    1240:	09 de       	rcall	.-1006   	; 0xe54 <prvUnlockQueue>
    1242:	e2 d4       	rcall	.+2500   	; 0x1c08 <xTaskResumeAll>
    1244:	c8 01       	movw	r24, r16
    1246:	82 dd       	rcall	.-1276   	; 0xd4c <prvIsQueueEmpty>
    1248:	88 23       	and	r24, r24
    124a:	09 f4       	brne	.+2      	; 0x124e <xQueueReceive+0xee>
    124c:	a4 cf       	rjmp	.-184    	; 0x1196 <xQueueReceive+0x36>
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	df 91       	pop	r29
    125c:	cf 91       	pop	r28
    125e:	1f 91       	pop	r17
    1260:	0f 91       	pop	r16
    1262:	ff 90       	pop	r15
    1264:	ef 90       	pop	r14
    1266:	df 90       	pop	r13
    1268:	cf 90       	pop	r12
    126a:	bf 90       	pop	r11
    126c:	af 90       	pop	r10
    126e:	9f 90       	pop	r9
    1270:	08 95       	ret

00001272 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    1272:	cf 93       	push	r28
    1274:	df 93       	push	r29
    1276:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	f8 94       	cli
    127c:	0f 92       	push	r0
    127e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1280:	8f 3f       	cpi	r24, 0xFF	; 255
    1282:	09 f4       	brne	.+2      	; 0x1286 <vQueueWaitForMessageRestricted+0x14>
    1284:	1d 8e       	std	Y+29, r1	; 0x1d
    1286:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1288:	8f 3f       	cpi	r24, 0xFF	; 255
    128a:	09 f4       	brne	.+2      	; 0x128e <vQueueWaitForMessageRestricted+0x1c>
    128c:	1e 8e       	std	Y+30, r1	; 0x1e
    128e:	0f 90       	pop	r0
    1290:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1292:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1294:	81 11       	cpse	r24, r1
    1296:	03 c0       	rjmp	.+6      	; 0x129e <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1298:	ce 01       	movw	r24, r28
    129a:	41 96       	adiw	r24, 0x11	; 17
    129c:	e2 d5       	rcall	.+3012   	; 0x1e62 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    129e:	ce 01       	movw	r24, r28
    12a0:	d9 dd       	rcall	.-1102   	; 0xe54 <prvUnlockQueue>
    }
    12a2:	df 91       	pop	r29
    12a4:	cf 91       	pop	r28
    12a6:	08 95       	ret

000012a8 <prvBytesInBuffer>:
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    12a8:	fc 01       	movw	r30, r24
    12aa:	44 81       	ldd	r20, Z+4	; 0x04
    12ac:	55 81       	ldd	r21, Z+5	; 0x05
    12ae:	22 81       	ldd	r18, Z+2	; 0x02
    12b0:	33 81       	ldd	r19, Z+3	; 0x03
    12b2:	24 0f       	add	r18, r20
    12b4:	35 1f       	adc	r19, r21
    12b6:	80 81       	ld	r24, Z
    12b8:	91 81       	ldd	r25, Z+1	; 0x01
    12ba:	b9 01       	movw	r22, r18
    12bc:	68 1b       	sub	r22, r24
    12be:	79 0b       	sbc	r23, r25
    12c0:	cb 01       	movw	r24, r22
    12c2:	64 17       	cp	r22, r20
    12c4:	75 07       	cpc	r23, r21
    12c6:	10 f0       	brcs	.+4      	; 0x12cc <prvBytesInBuffer+0x24>
    12c8:	84 1b       	sub	r24, r20
    12ca:	95 0b       	sbc	r25, r21
    12cc:	08 95       	ret

000012ce <prvWriteBytesToBuffer>:
    12ce:	af 92       	push	r10
    12d0:	bf 92       	push	r11
    12d2:	cf 92       	push	r12
    12d4:	df 92       	push	r13
    12d6:	ef 92       	push	r14
    12d8:	ff 92       	push	r15
    12da:	0f 93       	push	r16
    12dc:	1f 93       	push	r17
    12de:	cf 93       	push	r28
    12e0:	df 93       	push	r29
    12e2:	6c 01       	movw	r12, r24
    12e4:	5b 01       	movw	r10, r22
    12e6:	7a 01       	movw	r14, r20
    12e8:	fc 01       	movw	r30, r24
    12ea:	c2 81       	ldd	r28, Z+2	; 0x02
    12ec:	d3 81       	ldd	r29, Z+3	; 0x03
    12ee:	04 81       	ldd	r16, Z+4	; 0x04
    12f0:	15 81       	ldd	r17, Z+5	; 0x05
    12f2:	0c 1b       	sub	r16, r28
    12f4:	1d 0b       	sbc	r17, r29
    12f6:	40 17       	cp	r20, r16
    12f8:	51 07       	cpc	r21, r17
    12fa:	08 f4       	brcc	.+2      	; 0x12fe <prvWriteBytesToBuffer+0x30>
    12fc:	8a 01       	movw	r16, r20
    12fe:	f6 01       	movw	r30, r12
    1300:	84 85       	ldd	r24, Z+12	; 0x0c
    1302:	95 85       	ldd	r25, Z+13	; 0x0d
    1304:	a8 01       	movw	r20, r16
    1306:	b5 01       	movw	r22, r10
    1308:	8c 0f       	add	r24, r28
    130a:	9d 1f       	adc	r25, r29
    130c:	0e 94 80 23 	call	0x4700	; 0x4700 <memcpy>
    1310:	0e 15       	cp	r16, r14
    1312:	1f 05       	cpc	r17, r15
    1314:	58 f4       	brcc	.+22     	; 0x132c <prvWriteBytesToBuffer+0x5e>
    1316:	a7 01       	movw	r20, r14
    1318:	40 1b       	sub	r20, r16
    131a:	51 0b       	sbc	r21, r17
    131c:	b5 01       	movw	r22, r10
    131e:	60 0f       	add	r22, r16
    1320:	71 1f       	adc	r23, r17
    1322:	f6 01       	movw	r30, r12
    1324:	84 85       	ldd	r24, Z+12	; 0x0c
    1326:	95 85       	ldd	r25, Z+13	; 0x0d
    1328:	0e 94 80 23 	call	0x4700	; 0x4700 <memcpy>
    132c:	ce 01       	movw	r24, r28
    132e:	8e 0d       	add	r24, r14
    1330:	9f 1d       	adc	r25, r15
    1332:	f6 01       	movw	r30, r12
    1334:	24 81       	ldd	r18, Z+4	; 0x04
    1336:	35 81       	ldd	r19, Z+5	; 0x05
    1338:	82 17       	cp	r24, r18
    133a:	93 07       	cpc	r25, r19
    133c:	10 f0       	brcs	.+4      	; 0x1342 <prvWriteBytesToBuffer+0x74>
    133e:	82 1b       	sub	r24, r18
    1340:	93 0b       	sbc	r25, r19
    1342:	f6 01       	movw	r30, r12
    1344:	93 83       	std	Z+3, r25	; 0x03
    1346:	82 83       	std	Z+2, r24	; 0x02
    1348:	c7 01       	movw	r24, r14
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	1f 91       	pop	r17
    1350:	0f 91       	pop	r16
    1352:	ff 90       	pop	r15
    1354:	ef 90       	pop	r14
    1356:	df 90       	pop	r13
    1358:	cf 90       	pop	r12
    135a:	bf 90       	pop	r11
    135c:	af 90       	pop	r10
    135e:	08 95       	ret

00001360 <prvWriteMessageToBuffer>:
    1360:	cf 92       	push	r12
    1362:	df 92       	push	r13
    1364:	ef 92       	push	r14
    1366:	ff 92       	push	r15
    1368:	0f 93       	push	r16
    136a:	1f 93       	push	r17
    136c:	cf 93       	push	r28
    136e:	df 93       	push	r29
    1370:	1f 92       	push	r1
    1372:	1f 92       	push	r1
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
    1378:	5a 83       	std	Y+2, r21	; 0x02
    137a:	49 83       	std	Y+1, r20	; 0x01
    137c:	21 15       	cp	r18, r1
    137e:	31 05       	cpc	r19, r1
    1380:	c9 f0       	breq	.+50     	; 0x13b4 <prvWriteMessageToBuffer+0x54>
    1382:	6b 01       	movw	r12, r22
    1384:	7c 01       	movw	r14, r24
    1386:	fc 01       	movw	r30, r24
    1388:	86 85       	ldd	r24, Z+14	; 0x0e
    138a:	80 fd       	sbrc	r24, 0
    138c:	08 c0       	rjmp	.+16     	; 0x139e <prvWriteMessageToBuffer+0x3e>
    138e:	ca 01       	movw	r24, r20
    1390:	24 17       	cp	r18, r20
    1392:	35 07       	cpc	r19, r21
    1394:	08 f4       	brcc	.+2      	; 0x1398 <prvWriteMessageToBuffer+0x38>
    1396:	c9 01       	movw	r24, r18
    1398:	9a 83       	std	Y+2, r25	; 0x02
    139a:	89 83       	std	Y+1, r24	; 0x01
    139c:	11 c0       	rjmp	.+34     	; 0x13c0 <prvWriteMessageToBuffer+0x60>
    139e:	20 17       	cp	r18, r16
    13a0:	31 07       	cpc	r19, r17
    13a2:	58 f0       	brcs	.+22     	; 0x13ba <prvWriteMessageToBuffer+0x5a>
    13a4:	42 e0       	ldi	r20, 0x02	; 2
    13a6:	50 e0       	ldi	r21, 0x00	; 0
    13a8:	be 01       	movw	r22, r28
    13aa:	6f 5f       	subi	r22, 0xFF	; 255
    13ac:	7f 4f       	sbci	r23, 0xFF	; 255
    13ae:	c7 01       	movw	r24, r14
    13b0:	8e df       	rcall	.-228    	; 0x12ce <prvWriteBytesToBuffer>
    13b2:	06 c0       	rjmp	.+12     	; 0x13c0 <prvWriteMessageToBuffer+0x60>
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	08 c0       	rjmp	.+16     	; 0x13ca <prvWriteMessageToBuffer+0x6a>
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	05 c0       	rjmp	.+10     	; 0x13ca <prvWriteMessageToBuffer+0x6a>
    13c0:	49 81       	ldd	r20, Y+1	; 0x01
    13c2:	5a 81       	ldd	r21, Y+2	; 0x02
    13c4:	b6 01       	movw	r22, r12
    13c6:	c7 01       	movw	r24, r14
    13c8:	82 df       	rcall	.-252    	; 0x12ce <prvWriteBytesToBuffer>
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	1f 91       	pop	r17
    13d4:	0f 91       	pop	r16
    13d6:	ff 90       	pop	r15
    13d8:	ef 90       	pop	r14
    13da:	df 90       	pop	r13
    13dc:	cf 90       	pop	r12
    13de:	08 95       	ret

000013e0 <prvReadBytesFromBuffer>:
    13e0:	af 92       	push	r10
    13e2:	bf 92       	push	r11
    13e4:	cf 92       	push	r12
    13e6:	df 92       	push	r13
    13e8:	ef 92       	push	r14
    13ea:	ff 92       	push	r15
    13ec:	0f 93       	push	r16
    13ee:	1f 93       	push	r17
    13f0:	cf 93       	push	r28
    13f2:	df 93       	push	r29
    13f4:	7c 01       	movw	r14, r24
    13f6:	5b 01       	movw	r10, r22
    13f8:	e9 01       	movw	r28, r18
    13fa:	42 17       	cp	r20, r18
    13fc:	53 07       	cpc	r21, r19
    13fe:	08 f4       	brcc	.+2      	; 0x1402 <prvReadBytesFromBuffer+0x22>
    1400:	ea 01       	movw	r28, r20
    1402:	20 97       	sbiw	r28, 0x00	; 0
    1404:	79 f1       	breq	.+94     	; 0x1464 <prvReadBytesFromBuffer+0x84>
    1406:	f7 01       	movw	r30, r14
    1408:	00 81       	ld	r16, Z
    140a:	11 81       	ldd	r17, Z+1	; 0x01
    140c:	c4 80       	ldd	r12, Z+4	; 0x04
    140e:	d5 80       	ldd	r13, Z+5	; 0x05
    1410:	c0 1a       	sub	r12, r16
    1412:	d1 0a       	sbc	r13, r17
    1414:	cc 15       	cp	r28, r12
    1416:	dd 05       	cpc	r29, r13
    1418:	08 f4       	brcc	.+2      	; 0x141c <prvReadBytesFromBuffer+0x3c>
    141a:	6e 01       	movw	r12, r28
    141c:	f7 01       	movw	r30, r14
    141e:	64 85       	ldd	r22, Z+12	; 0x0c
    1420:	75 85       	ldd	r23, Z+13	; 0x0d
    1422:	60 0f       	add	r22, r16
    1424:	71 1f       	adc	r23, r17
    1426:	a6 01       	movw	r20, r12
    1428:	c5 01       	movw	r24, r10
    142a:	0e 94 80 23 	call	0x4700	; 0x4700 <memcpy>
    142e:	cc 16       	cp	r12, r28
    1430:	dd 06       	cpc	r13, r29
    1432:	58 f4       	brcc	.+22     	; 0x144a <prvReadBytesFromBuffer+0x6a>
    1434:	ae 01       	movw	r20, r28
    1436:	4c 19       	sub	r20, r12
    1438:	5d 09       	sbc	r21, r13
    143a:	f7 01       	movw	r30, r14
    143c:	64 85       	ldd	r22, Z+12	; 0x0c
    143e:	75 85       	ldd	r23, Z+13	; 0x0d
    1440:	c5 01       	movw	r24, r10
    1442:	8c 0d       	add	r24, r12
    1444:	9d 1d       	adc	r25, r13
    1446:	0e 94 80 23 	call	0x4700	; 0x4700 <memcpy>
    144a:	0c 0f       	add	r16, r28
    144c:	1d 1f       	adc	r17, r29
    144e:	f7 01       	movw	r30, r14
    1450:	84 81       	ldd	r24, Z+4	; 0x04
    1452:	95 81       	ldd	r25, Z+5	; 0x05
    1454:	08 17       	cp	r16, r24
    1456:	19 07       	cpc	r17, r25
    1458:	10 f0       	brcs	.+4      	; 0x145e <prvReadBytesFromBuffer+0x7e>
    145a:	08 1b       	sub	r16, r24
    145c:	19 0b       	sbc	r17, r25
    145e:	f7 01       	movw	r30, r14
    1460:	11 83       	std	Z+1, r17	; 0x01
    1462:	00 83       	st	Z, r16
    1464:	ce 01       	movw	r24, r28
    1466:	df 91       	pop	r29
    1468:	cf 91       	pop	r28
    146a:	1f 91       	pop	r17
    146c:	0f 91       	pop	r16
    146e:	ff 90       	pop	r15
    1470:	ef 90       	pop	r14
    1472:	df 90       	pop	r13
    1474:	cf 90       	pop	r12
    1476:	bf 90       	pop	r11
    1478:	af 90       	pop	r10
    147a:	08 95       	ret

0000147c <xStreamBufferGenericCreate>:
    147c:	ef 92       	push	r14
    147e:	ff 92       	push	r15
    1480:	1f 93       	push	r17
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	eb 01       	movw	r28, r22
    1488:	11 e0       	ldi	r17, 0x01	; 1
    148a:	41 30       	cpi	r20, 0x01	; 1
    148c:	09 f0       	breq	.+2      	; 0x1490 <xStreamBufferGenericCreate+0x14>
    148e:	10 e0       	ldi	r17, 0x00	; 0
    1490:	20 97       	sbiw	r28, 0x00	; 0
    1492:	11 f4       	brne	.+4      	; 0x1498 <xStreamBufferGenericCreate+0x1c>
    1494:	c1 e0       	ldi	r28, 0x01	; 1
    1496:	d0 e0       	ldi	r29, 0x00	; 0
    1498:	7c 01       	movw	r14, r24
    149a:	2f ef       	ldi	r18, 0xFF	; 255
    149c:	e2 1a       	sub	r14, r18
    149e:	f2 0a       	sbc	r15, r18
    14a0:	41 96       	adiw	r24, 0x11	; 17
    14a2:	32 da       	rcall	.-2972   	; 0x908 <pvPortMalloc>
    14a4:	00 97       	sbiw	r24, 0x00	; 0
    14a6:	81 f0       	breq	.+32     	; 0x14c8 <xStreamBufferGenericCreate+0x4c>
    14a8:	20 e1       	ldi	r18, 0x10	; 16
    14aa:	fc 01       	movw	r30, r24
    14ac:	11 92       	st	Z+, r1
    14ae:	2a 95       	dec	r18
    14b0:	e9 f7       	brne	.-6      	; 0x14ac <xStreamBufferGenericCreate+0x30>
    14b2:	9c 01       	movw	r18, r24
    14b4:	20 5f       	subi	r18, 0xF0	; 240
    14b6:	3f 4f       	sbci	r19, 0xFF	; 255
    14b8:	fc 01       	movw	r30, r24
    14ba:	35 87       	std	Z+13, r19	; 0x0d
    14bc:	24 87       	std	Z+12, r18	; 0x0c
    14be:	f5 82       	std	Z+5, r15	; 0x05
    14c0:	e4 82       	std	Z+4, r14	; 0x04
    14c2:	d7 83       	std	Z+7, r29	; 0x07
    14c4:	c6 83       	std	Z+6, r28	; 0x06
    14c6:	16 87       	std	Z+14, r17	; 0x0e
    14c8:	df 91       	pop	r29
    14ca:	cf 91       	pop	r28
    14cc:	1f 91       	pop	r17
    14ce:	ff 90       	pop	r15
    14d0:	ef 90       	pop	r14
    14d2:	08 95       	ret

000014d4 <xStreamBufferReset>:
    14d4:	cf 93       	push	r28
    14d6:	df 93       	push	r29
    14d8:	fc 01       	movw	r30, r24
    14da:	27 85       	ldd	r18, Z+15	; 0x0f
    14dc:	0f b6       	in	r0, 0x3f	; 63
    14de:	f8 94       	cli
    14e0:	0f 92       	push	r0
    14e2:	80 85       	ldd	r24, Z+8	; 0x08
    14e4:	91 85       	ldd	r25, Z+9	; 0x09
    14e6:	89 2b       	or	r24, r25
    14e8:	d1 f4       	brne	.+52     	; 0x151e <xStreamBufferReset+0x4a>
    14ea:	82 85       	ldd	r24, Z+10	; 0x0a
    14ec:	93 85       	ldd	r25, Z+11	; 0x0b
    14ee:	89 2b       	or	r24, r25
    14f0:	c1 f4       	brne	.+48     	; 0x1522 <xStreamBufferReset+0x4e>
    14f2:	86 85       	ldd	r24, Z+14	; 0x0e
    14f4:	46 81       	ldd	r20, Z+6	; 0x06
    14f6:	57 81       	ldd	r21, Z+7	; 0x07
    14f8:	64 81       	ldd	r22, Z+4	; 0x04
    14fa:	75 81       	ldd	r23, Z+5	; 0x05
    14fc:	a4 85       	ldd	r26, Z+12	; 0x0c
    14fe:	b5 85       	ldd	r27, Z+13	; 0x0d
    1500:	90 e1       	ldi	r25, 0x10	; 16
    1502:	ef 01       	movw	r28, r30
    1504:	19 92       	st	Y+, r1
    1506:	9a 95       	dec	r25
    1508:	e9 f7       	brne	.-6      	; 0x1504 <xStreamBufferReset+0x30>
    150a:	b5 87       	std	Z+13, r27	; 0x0d
    150c:	a4 87       	std	Z+12, r26	; 0x0c
    150e:	75 83       	std	Z+5, r23	; 0x05
    1510:	64 83       	std	Z+4, r22	; 0x04
    1512:	57 83       	std	Z+7, r21	; 0x07
    1514:	46 83       	std	Z+6, r20	; 0x06
    1516:	86 87       	std	Z+14, r24	; 0x0e
    1518:	27 87       	std	Z+15, r18	; 0x0f
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	03 c0       	rjmp	.+6      	; 0x1524 <xStreamBufferReset+0x50>
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	01 c0       	rjmp	.+2      	; 0x1524 <xStreamBufferReset+0x50>
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	0f 90       	pop	r0
    1526:	0f be       	out	0x3f, r0	; 63
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	08 95       	ret

0000152e <xStreamBufferSpacesAvailable>:
    152e:	fc 01       	movw	r30, r24
    1530:	24 81       	ldd	r18, Z+4	; 0x04
    1532:	35 81       	ldd	r19, Z+5	; 0x05
    1534:	80 81       	ld	r24, Z
    1536:	91 81       	ldd	r25, Z+1	; 0x01
    1538:	42 81       	ldd	r20, Z+2	; 0x02
    153a:	53 81       	ldd	r21, Z+3	; 0x03
    153c:	82 0f       	add	r24, r18
    153e:	93 1f       	adc	r25, r19
    1540:	01 97       	sbiw	r24, 0x01	; 1
    1542:	84 1b       	sub	r24, r20
    1544:	95 0b       	sbc	r25, r21
    1546:	82 17       	cp	r24, r18
    1548:	93 07       	cpc	r25, r19
    154a:	10 f0       	brcs	.+4      	; 0x1550 <xStreamBufferSpacesAvailable+0x22>
    154c:	82 1b       	sub	r24, r18
    154e:	93 0b       	sbc	r25, r19
    1550:	08 95       	ret

00001552 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1552:	af 92       	push	r10
    1554:	bf 92       	push	r11
    1556:	cf 92       	push	r12
    1558:	df 92       	push	r13
    155a:	ef 92       	push	r14
    155c:	ff 92       	push	r15
    155e:	0f 93       	push	r16
    1560:	1f 93       	push	r17
    1562:	cf 93       	push	r28
    1564:	df 93       	push	r29
    1566:	ec 01       	movw	r28, r24
    1568:	5b 01       	movw	r10, r22
    156a:	6a 01       	movw	r12, r20
    156c:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    156e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1570:	80 ff       	sbrs	r24, 0
    1572:	04 c0       	rjmp	.+8      	; 0x157c <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1574:	8a 01       	movw	r16, r20
    1576:	0e 5f       	subi	r16, 0xFE	; 254
    1578:	1f 4f       	sbci	r17, 0xFF	; 255
    157a:	01 c0       	rjmp	.+2      	; 0x157e <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    157c:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    157e:	ce 01       	movw	r24, r28
    1580:	d6 df       	rcall	.-84     	; 0x152e <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1582:	9c 01       	movw	r18, r24
    1584:	a6 01       	movw	r20, r12
    1586:	b5 01       	movw	r22, r10
    1588:	ce 01       	movw	r24, r28
    158a:	ea de       	rcall	.-556    	; 0x1360 <prvWriteMessageToBuffer>
    158c:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    158e:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1590:	b1 f0       	breq	.+44     	; 0x15be <xStreamBufferSendFromISR+0x6c>
    1592:	ce 01       	movw	r24, r28
    1594:	89 de       	rcall	.-750    	; 0x12a8 <prvBytesInBuffer>
    1596:	2e 81       	ldd	r18, Y+6	; 0x06
    1598:	3f 81       	ldd	r19, Y+7	; 0x07
    159a:	82 17       	cp	r24, r18
    159c:	93 07       	cpc	r25, r19
    159e:	78 f0       	brcs	.+30     	; 0x15be <xStreamBufferSendFromISR+0x6c>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    15a0:	88 85       	ldd	r24, Y+8	; 0x08
    15a2:	99 85       	ldd	r25, Y+9	; 0x09
    15a4:	89 2b       	or	r24, r25
    15a6:	59 f0       	breq	.+22     	; 0x15be <xStreamBufferSendFromISR+0x6c>
    15a8:	88 85       	ldd	r24, Y+8	; 0x08
    15aa:	99 85       	ldd	r25, Y+9	; 0x09
    15ac:	00 e0       	ldi	r16, 0x00	; 0
    15ae:	10 e0       	ldi	r17, 0x00	; 0
    15b0:	20 e0       	ldi	r18, 0x00	; 0
    15b2:	40 e0       	ldi	r20, 0x00	; 0
    15b4:	50 e0       	ldi	r21, 0x00	; 0
    15b6:	ba 01       	movw	r22, r20
    15b8:	4c d6       	rcall	.+3224   	; 0x2252 <xTaskGenericNotifyFromISR>
    15ba:	19 86       	std	Y+9, r1	; 0x09
    15bc:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    15be:	c6 01       	movw	r24, r12
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	1f 91       	pop	r17
    15c6:	0f 91       	pop	r16
    15c8:	ff 90       	pop	r15
    15ca:	ef 90       	pop	r14
    15cc:	df 90       	pop	r13
    15ce:	cf 90       	pop	r12
    15d0:	bf 90       	pop	r11
    15d2:	af 90       	pop	r10
    15d4:	08 95       	ret

000015d6 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    15d6:	6f 92       	push	r6
    15d8:	7f 92       	push	r7
    15da:	8f 92       	push	r8
    15dc:	9f 92       	push	r9
    15de:	af 92       	push	r10
    15e0:	bf 92       	push	r11
    15e2:	cf 92       	push	r12
    15e4:	df 92       	push	r13
    15e6:	ef 92       	push	r14
    15e8:	ff 92       	push	r15
    15ea:	0f 93       	push	r16
    15ec:	1f 93       	push	r17
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
    15f2:	1f 92       	push	r1
    15f4:	1f 92       	push	r1
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
    15fa:	6c 01       	movw	r12, r24
    15fc:	3b 01       	movw	r6, r22
    15fe:	4a 01       	movw	r8, r20
    1600:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1602:	fc 01       	movw	r30, r24
    1604:	86 85       	ldd	r24, Z+14	; 0x0e
    1606:	80 fd       	sbrc	r24, 0
    1608:	03 c0       	rjmp	.+6      	; 0x1610 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    160a:	a1 2c       	mov	r10, r1
    160c:	b1 2c       	mov	r11, r1
    160e:	04 c0       	rjmp	.+8      	; 0x1618 <xStreamBufferReceive+0x42>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1610:	68 94       	set
    1612:	aa 24       	eor	r10, r10
    1614:	a1 f8       	bld	r10, 1
    1616:	b1 2c       	mov	r11, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1618:	e1 14       	cp	r14, r1
    161a:	f1 04       	cpc	r15, r1
    161c:	29 f1       	breq	.+74     	; 0x1668 <xStreamBufferReceive+0x92>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	f8 94       	cli
    1622:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1624:	c6 01       	movw	r24, r12
    1626:	40 de       	rcall	.-896    	; 0x12a8 <prvBytesInBuffer>
    1628:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    162a:	a8 16       	cp	r10, r24
    162c:	b9 06       	cpc	r11, r25
    162e:	38 f0       	brcs	.+14     	; 0x163e <xStreamBufferReceive+0x68>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	90 e0       	ldi	r25, 0x00	; 0

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1634:	9e d6       	rcall	.+3388   	; 0x2372 <xTaskNotifyStateClear>
    1636:	b9 d4       	rcall	.+2418   	; 0x1faa <xTaskGetCurrentTaskHandle>
    1638:	f6 01       	movw	r30, r12
    163a:	91 87       	std	Z+9, r25	; 0x09
    163c:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    163e:	0f 90       	pop	r0
    1640:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1642:	a0 16       	cp	r10, r16
    1644:	b1 06       	cpc	r11, r17
    1646:	b0 f0       	brcs	.+44     	; 0x1674 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1648:	00 e0       	ldi	r16, 0x00	; 0
    164a:	10 e0       	ldi	r17, 0x00	; 0
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	a9 01       	movw	r20, r18
    1652:	60 e0       	ldi	r22, 0x00	; 0
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	cb 01       	movw	r24, r22
    1658:	fb d4       	rcall	.+2550   	; 0x2050 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    165a:	f6 01       	movw	r30, r12
    165c:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    165e:	10 86       	std	Z+8, r1	; 0x08
    1660:	c6 01       	movw	r24, r12
    1662:	22 de       	rcall	.-956    	; 0x12a8 <prvBytesInBuffer>
    1664:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1666:	03 c0       	rjmp	.+6      	; 0x166e <xStreamBufferReceive+0x98>
    1668:	c6 01       	movw	r24, r12
    166a:	1e de       	rcall	.-964    	; 0x12a8 <prvBytesInBuffer>
    166c:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    166e:	a0 16       	cp	r10, r16
    1670:	b1 06       	cpc	r11, r17
    1672:	b8 f5       	brcc	.+110    	; 0x16e2 <xStreamBufferReceive+0x10c>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    1674:	a1 14       	cp	r10, r1
    1676:	b1 04       	cpc	r11, r1
    1678:	c1 f0       	breq	.+48     	; 0x16aa <xStreamBufferReceive+0xd4>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    167a:	f6 01       	movw	r30, r12
    167c:	e0 80       	ld	r14, Z
    167e:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    1680:	98 01       	movw	r18, r16
    1682:	a5 01       	movw	r20, r10
    1684:	be 01       	movw	r22, r28
    1686:	6f 5f       	subi	r22, 0xFF	; 255
    1688:	7f 4f       	sbci	r23, 0xFF	; 255
    168a:	c6 01       	movw	r24, r12
    168c:	a9 de       	rcall	.-686    	; 0x13e0 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    1692:	0a 19       	sub	r16, r10
    1694:	1b 09       	sbc	r17, r11

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    1696:	88 16       	cp	r8, r24
    1698:	99 06       	cpc	r9, r25
    169a:	30 f4       	brcc	.+12     	; 0x16a8 <xStreamBufferReceive+0xd2>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    169c:	f6 01       	movw	r30, r12
    169e:	f1 82       	std	Z+1, r15	; 0x01
    16a0:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    16a2:	81 2c       	mov	r8, r1
    16a4:	91 2c       	mov	r9, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    16a6:	01 c0       	rjmp	.+2      	; 0x16aa <xStreamBufferReceive+0xd4>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    16a8:	4c 01       	movw	r8, r24
    16aa:	98 01       	movw	r18, r16
    16ac:	a4 01       	movw	r20, r8
    16ae:	b3 01       	movw	r22, r6
    16b0:	c6 01       	movw	r24, r12
    16b2:	96 de       	rcall	.-724    	; 0x13e0 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    16b4:	7c 01       	movw	r14, r24
    16b6:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    16b8:	b1 f0       	breq	.+44     	; 0x16e6 <xStreamBufferReceive+0x110>
    16ba:	dc d1       	rcall	.+952    	; 0x1a74 <vTaskSuspendAll>
    16bc:	f6 01       	movw	r30, r12
    16be:	82 85       	ldd	r24, Z+10	; 0x0a
    16c0:	93 85       	ldd	r25, Z+11	; 0x0b
    16c2:	89 2b       	or	r24, r25
    16c4:	61 f0       	breq	.+24     	; 0x16de <xStreamBufferReceive+0x108>
    16c6:	82 85       	ldd	r24, Z+10	; 0x0a
    16c8:	93 85       	ldd	r25, Z+11	; 0x0b
    16ca:	00 e0       	ldi	r16, 0x00	; 0
    16cc:	10 e0       	ldi	r17, 0x00	; 0
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	40 e0       	ldi	r20, 0x00	; 0
    16d2:	50 e0       	ldi	r21, 0x00	; 0
    16d4:	ba 01       	movw	r22, r20
    16d6:	3f d5       	rcall	.+2686   	; 0x2156 <xTaskGenericNotify>
    16d8:	f6 01       	movw	r30, r12
    16da:	13 86       	std	Z+11, r1	; 0x0b
    16dc:	12 86       	std	Z+10, r1	; 0x0a
    16de:	94 d2       	rcall	.+1320   	; 0x1c08 <xTaskResumeAll>
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <xStreamBufferReceive+0x110>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    16e2:	e1 2c       	mov	r14, r1
    16e4:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    16e6:	c7 01       	movw	r24, r14
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	df 91       	pop	r29
    16ee:	cf 91       	pop	r28
    16f0:	1f 91       	pop	r17
    16f2:	0f 91       	pop	r16
    16f4:	ff 90       	pop	r15
    16f6:	ef 90       	pop	r14
    16f8:	df 90       	pop	r13
    16fa:	cf 90       	pop	r12
    16fc:	bf 90       	pop	r11
    16fe:	af 90       	pop	r10
    1700:	9f 90       	pop	r9
    1702:	8f 90       	pop	r8
    1704:	7f 90       	pop	r7
    1706:	6f 90       	pop	r6
    1708:	08 95       	ret

0000170a <prvResetNextTaskUnblockTime>:
    170a:	e0 91 c0 07 	lds	r30, 0x07C0	; 0x8007c0 <pxDelayedTaskList>
    170e:	f0 91 c1 07 	lds	r31, 0x07C1	; 0x8007c1 <pxDelayedTaskList+0x1>
    1712:	80 81       	ld	r24, Z
    1714:	81 11       	cpse	r24, r1
    1716:	07 c0       	rjmp	.+14     	; 0x1726 <prvResetNextTaskUnblockTime+0x1c>
    1718:	8f ef       	ldi	r24, 0xFF	; 255
    171a:	9f ef       	ldi	r25, 0xFF	; 255
    171c:	90 93 98 07 	sts	0x0798, r25	; 0x800798 <xNextTaskUnblockTime+0x1>
    1720:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <xNextTaskUnblockTime>
    1724:	08 95       	ret
    1726:	e0 91 c0 07 	lds	r30, 0x07C0	; 0x8007c0 <pxDelayedTaskList>
    172a:	f0 91 c1 07 	lds	r31, 0x07C1	; 0x8007c1 <pxDelayedTaskList+0x1>
    172e:	05 80       	ldd	r0, Z+5	; 0x05
    1730:	f6 81       	ldd	r31, Z+6	; 0x06
    1732:	e0 2d       	mov	r30, r0
    1734:	06 80       	ldd	r0, Z+6	; 0x06
    1736:	f7 81       	ldd	r31, Z+7	; 0x07
    1738:	e0 2d       	mov	r30, r0
    173a:	82 81       	ldd	r24, Z+2	; 0x02
    173c:	93 81       	ldd	r25, Z+3	; 0x03
    173e:	90 93 98 07 	sts	0x0798, r25	; 0x800798 <xNextTaskUnblockTime+0x1>
    1742:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <xNextTaskUnblockTime>
    1746:	08 95       	ret

00001748 <prvAddCurrentTaskToDelayedList>:
    1748:	ff 92       	push	r15
    174a:	0f 93       	push	r16
    174c:	1f 93       	push	r17
    174e:	cf 93       	push	r28
    1750:	df 93       	push	r29
    1752:	ec 01       	movw	r28, r24
    1754:	f6 2e       	mov	r15, r22
    1756:	00 91 9f 07 	lds	r16, 0x079F	; 0x80079f <xTickCount>
    175a:	10 91 a0 07 	lds	r17, 0x07A0	; 0x8007a0 <xTickCount+0x1>
    175e:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <pxCurrentTCB>
    1762:	90 91 f9 07 	lds	r25, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>
    1766:	02 96       	adiw	r24, 0x02	; 2
    1768:	55 d9       	rcall	.-3414   	; 0xa14 <uxListRemove>
    176a:	cf 3f       	cpi	r28, 0xFF	; 255
    176c:	8f ef       	ldi	r24, 0xFF	; 255
    176e:	d8 07       	cpc	r29, r24
    1770:	61 f4       	brne	.+24     	; 0x178a <prvAddCurrentTaskToDelayedList+0x42>
    1772:	ff 20       	and	r15, r15
    1774:	51 f0       	breq	.+20     	; 0x178a <prvAddCurrentTaskToDelayedList+0x42>
    1776:	60 91 f8 07 	lds	r22, 0x07F8	; 0x8007f8 <pxCurrentTCB>
    177a:	70 91 f9 07 	lds	r23, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>
    177e:	6e 5f       	subi	r22, 0xFE	; 254
    1780:	7f 4f       	sbci	r23, 0xFF	; 255
    1782:	82 ea       	ldi	r24, 0xA2	; 162
    1784:	97 e0       	ldi	r25, 0x07	; 7
    1786:	f4 d8       	rcall	.-3608   	; 0x970 <vListInsertEnd>
    1788:	2d c0       	rjmp	.+90     	; 0x17e4 <prvAddCurrentTaskToDelayedList+0x9c>
    178a:	c0 0f       	add	r28, r16
    178c:	d1 1f       	adc	r29, r17
    178e:	e0 91 f8 07 	lds	r30, 0x07F8	; 0x8007f8 <pxCurrentTCB>
    1792:	f0 91 f9 07 	lds	r31, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>
    1796:	d3 83       	std	Z+3, r29	; 0x03
    1798:	c2 83       	std	Z+2, r28	; 0x02
    179a:	c0 17       	cp	r28, r16
    179c:	d1 07       	cpc	r29, r17
    179e:	60 f4       	brcc	.+24     	; 0x17b8 <prvAddCurrentTaskToDelayedList+0x70>
    17a0:	60 91 f8 07 	lds	r22, 0x07F8	; 0x8007f8 <pxCurrentTCB>
    17a4:	70 91 f9 07 	lds	r23, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>
    17a8:	80 91 be 07 	lds	r24, 0x07BE	; 0x8007be <pxOverflowDelayedTaskList>
    17ac:	90 91 bf 07 	lds	r25, 0x07BF	; 0x8007bf <pxOverflowDelayedTaskList+0x1>
    17b0:	6e 5f       	subi	r22, 0xFE	; 254
    17b2:	7f 4f       	sbci	r23, 0xFF	; 255
    17b4:	fe d8       	rcall	.-3588   	; 0x9b2 <vListInsert>
    17b6:	16 c0       	rjmp	.+44     	; 0x17e4 <prvAddCurrentTaskToDelayedList+0x9c>
    17b8:	60 91 f8 07 	lds	r22, 0x07F8	; 0x8007f8 <pxCurrentTCB>
    17bc:	70 91 f9 07 	lds	r23, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>
    17c0:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <pxDelayedTaskList>
    17c4:	90 91 c1 07 	lds	r25, 0x07C1	; 0x8007c1 <pxDelayedTaskList+0x1>
    17c8:	6e 5f       	subi	r22, 0xFE	; 254
    17ca:	7f 4f       	sbci	r23, 0xFF	; 255
    17cc:	f2 d8       	rcall	.-3612   	; 0x9b2 <vListInsert>
    17ce:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <xNextTaskUnblockTime>
    17d2:	90 91 98 07 	lds	r25, 0x0798	; 0x800798 <xNextTaskUnblockTime+0x1>
    17d6:	c8 17       	cp	r28, r24
    17d8:	d9 07       	cpc	r29, r25
    17da:	20 f4       	brcc	.+8      	; 0x17e4 <prvAddCurrentTaskToDelayedList+0x9c>
    17dc:	d0 93 98 07 	sts	0x0798, r29	; 0x800798 <xNextTaskUnblockTime+0x1>
    17e0:	c0 93 97 07 	sts	0x0797, r28	; 0x800797 <xNextTaskUnblockTime>
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	1f 91       	pop	r17
    17ea:	0f 91       	pop	r16
    17ec:	ff 90       	pop	r15
    17ee:	08 95       	ret

000017f0 <xTaskCreate>:
    17f0:	4f 92       	push	r4
    17f2:	5f 92       	push	r5
    17f4:	6f 92       	push	r6
    17f6:	7f 92       	push	r7
    17f8:	8f 92       	push	r8
    17fa:	9f 92       	push	r9
    17fc:	af 92       	push	r10
    17fe:	bf 92       	push	r11
    1800:	cf 92       	push	r12
    1802:	df 92       	push	r13
    1804:	ef 92       	push	r14
    1806:	ff 92       	push	r15
    1808:	0f 93       	push	r16
    180a:	cf 93       	push	r28
    180c:	df 93       	push	r29
    180e:	4c 01       	movw	r8, r24
    1810:	6b 01       	movw	r12, r22
    1812:	5a 01       	movw	r10, r20
    1814:	29 01       	movw	r4, r18
    1816:	ca 01       	movw	r24, r20
    1818:	77 d8       	rcall	.-3858   	; 0x908 <pvPortMalloc>
    181a:	3c 01       	movw	r6, r24
    181c:	89 2b       	or	r24, r25
    181e:	09 f4       	brne	.+2      	; 0x1822 <xTaskCreate+0x32>
    1820:	e6 c0       	rjmp	.+460    	; 0x19ee <xTaskCreate+0x1fe>
    1822:	8c e2       	ldi	r24, 0x2C	; 44
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	70 d8       	rcall	.-3872   	; 0x908 <pvPortMalloc>
    1828:	ec 01       	movw	r28, r24
    182a:	89 2b       	or	r24, r25
    182c:	99 f0       	breq	.+38     	; 0x1854 <xTaskCreate+0x64>
    182e:	78 8e       	std	Y+24, r7	; 0x18
    1830:	6f 8a       	std	Y+23, r6	; 0x17
    1832:	a5 01       	movw	r20, r10
    1834:	65 ea       	ldi	r22, 0xA5	; 165
    1836:	70 e0       	ldi	r23, 0x00	; 0
    1838:	c3 01       	movw	r24, r6
    183a:	0e 94 89 23 	call	0x4712	; 0x4712 <memset>
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	a8 1a       	sub	r10, r24
    1842:	b1 08       	sbc	r11, r1
    1844:	8f 89       	ldd	r24, Y+23	; 0x17
    1846:	98 8d       	ldd	r25, Y+24	; 0x18
    1848:	a8 0e       	add	r10, r24
    184a:	b9 1e       	adc	r11, r25
    184c:	c1 14       	cp	r12, r1
    184e:	d1 04       	cpc	r13, r1
    1850:	21 f4       	brne	.+8      	; 0x185a <xTaskCreate+0x6a>
    1852:	1f c0       	rjmp	.+62     	; 0x1892 <xTaskCreate+0xa2>
    1854:	c3 01       	movw	r24, r6
    1856:	6b d8       	rcall	.-3882   	; 0x92e <vPortFree>
    1858:	ca c0       	rjmp	.+404    	; 0x19ee <xTaskCreate+0x1fe>
    185a:	d6 01       	movw	r26, r12
    185c:	8c 91       	ld	r24, X
    185e:	89 8f       	std	Y+25, r24	; 0x19
    1860:	8c 91       	ld	r24, X
    1862:	88 23       	and	r24, r24
    1864:	a1 f0       	breq	.+40     	; 0x188e <xTaskCreate+0x9e>
    1866:	ae 01       	movw	r20, r28
    1868:	46 5e       	subi	r20, 0xE6	; 230
    186a:	5f 4f       	sbci	r21, 0xFF	; 255
    186c:	f6 01       	movw	r30, r12
    186e:	31 96       	adiw	r30, 0x01	; 1
    1870:	b8 e0       	ldi	r27, 0x08	; 8
    1872:	cb 0e       	add	r12, r27
    1874:	d1 1c       	adc	r13, r1
    1876:	cf 01       	movw	r24, r30
    1878:	21 91       	ld	r18, Z+
    187a:	da 01       	movw	r26, r20
    187c:	2d 93       	st	X+, r18
    187e:	ad 01       	movw	r20, r26
    1880:	dc 01       	movw	r26, r24
    1882:	8c 91       	ld	r24, X
    1884:	88 23       	and	r24, r24
    1886:	19 f0       	breq	.+6      	; 0x188e <xTaskCreate+0x9e>
    1888:	ec 15       	cp	r30, r12
    188a:	fd 05       	cpc	r31, r13
    188c:	a1 f7       	brne	.-24     	; 0x1876 <xTaskCreate+0x86>
    188e:	18 a2       	std	Y+32, r1	; 0x20
    1890:	01 c0       	rjmp	.+2      	; 0x1894 <xTaskCreate+0xa4>
    1892:	19 8e       	std	Y+25, r1	; 0x19
    1894:	04 30       	cpi	r16, 0x04	; 4
    1896:	08 f0       	brcs	.+2      	; 0x189a <xTaskCreate+0xaa>
    1898:	03 e0       	ldi	r16, 0x03	; 3
    189a:	0e 8b       	std	Y+22, r16	; 0x16
    189c:	0b a3       	std	Y+35, r16	; 0x23
    189e:	1c a2       	std	Y+36, r1	; 0x24
    18a0:	6e 01       	movw	r12, r28
    18a2:	b2 e0       	ldi	r27, 0x02	; 2
    18a4:	cb 0e       	add	r12, r27
    18a6:	d1 1c       	adc	r13, r1
    18a8:	c6 01       	movw	r24, r12
    18aa:	5e d8       	rcall	.-3908   	; 0x968 <vListInitialiseItem>
    18ac:	ce 01       	movw	r24, r28
    18ae:	0c 96       	adiw	r24, 0x0c	; 12
    18b0:	5b d8       	rcall	.-3914   	; 0x968 <vListInitialiseItem>
    18b2:	d9 87       	std	Y+9, r29	; 0x09
    18b4:	c8 87       	std	Y+8, r28	; 0x08
    18b6:	84 e0       	ldi	r24, 0x04	; 4
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	80 1b       	sub	r24, r16
    18bc:	91 09       	sbc	r25, r1
    18be:	9d 87       	std	Y+13, r25	; 0x0d
    18c0:	8c 87       	std	Y+12, r24	; 0x0c
    18c2:	db 8b       	std	Y+19, r29	; 0x13
    18c4:	ca 8b       	std	Y+18, r28	; 0x12
    18c6:	1e a2       	std	Y+38, r1	; 0x26
    18c8:	1d a2       	std	Y+37, r1	; 0x25
    18ca:	1f a2       	std	Y+39, r1	; 0x27
    18cc:	18 a6       	std	Y+40, r1	; 0x28
    18ce:	19 a6       	std	Y+41, r1	; 0x29
    18d0:	1a a6       	std	Y+42, r1	; 0x2a
    18d2:	1b a6       	std	Y+43, r1	; 0x2b
    18d4:	a2 01       	movw	r20, r4
    18d6:	b4 01       	movw	r22, r8
    18d8:	c5 01       	movw	r24, r10
    18da:	c3 d8       	rcall	.-3706   	; 0xa62 <pxPortInitialiseStack>
    18dc:	99 83       	std	Y+1, r25	; 0x01
    18de:	88 83       	st	Y, r24
    18e0:	e1 14       	cp	r14, r1
    18e2:	f1 04       	cpc	r15, r1
    18e4:	19 f0       	breq	.+6      	; 0x18ec <xTaskCreate+0xfc>
    18e6:	f7 01       	movw	r30, r14
    18e8:	d1 83       	std	Z+1, r29	; 0x01
    18ea:	c0 83       	st	Z, r28
    18ec:	0f b6       	in	r0, 0x3f	; 63
    18ee:	f8 94       	cli
    18f0:	0f 92       	push	r0
    18f2:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <uxCurrentNumberOfTasks>
    18f6:	8f 5f       	subi	r24, 0xFF	; 255
    18f8:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <uxCurrentNumberOfTasks>
    18fc:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <pxCurrentTCB>
    1900:	90 91 f9 07 	lds	r25, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>
    1904:	89 2b       	or	r24, r25
    1906:	91 f5       	brne	.+100    	; 0x196c <xTaskCreate+0x17c>
    1908:	d0 93 f9 07 	sts	0x07F9, r29	; 0x8007f9 <pxCurrentTCB+0x1>
    190c:	c0 93 f8 07 	sts	0x07F8, r28	; 0x8007f8 <pxCurrentTCB>
    1910:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <uxCurrentNumberOfTasks>
    1914:	81 30       	cpi	r24, 0x01	; 1
    1916:	09 f0       	breq	.+2      	; 0x191a <xTaskCreate+0x12a>
    1918:	39 c0       	rjmp	.+114    	; 0x198c <xTaskCreate+0x19c>
    191a:	84 ed       	ldi	r24, 0xD4	; 212
    191c:	97 e0       	ldi	r25, 0x07	; 7
    191e:	16 d8       	rcall	.-4052   	; 0x94c <vListInitialise>
    1920:	8d ed       	ldi	r24, 0xDD	; 221
    1922:	97 e0       	ldi	r25, 0x07	; 7
    1924:	13 d8       	rcall	.-4058   	; 0x94c <vListInitialise>
    1926:	86 ee       	ldi	r24, 0xE6	; 230
    1928:	97 e0       	ldi	r25, 0x07	; 7
    192a:	10 d8       	rcall	.-4064   	; 0x94c <vListInitialise>
    192c:	8f ee       	ldi	r24, 0xEF	; 239
    192e:	97 e0       	ldi	r25, 0x07	; 7
    1930:	0d d8       	rcall	.-4070   	; 0x94c <vListInitialise>
    1932:	8b ec       	ldi	r24, 0xCB	; 203
    1934:	97 e0       	ldi	r25, 0x07	; 7
    1936:	0a d8       	rcall	.-4076   	; 0x94c <vListInitialise>
    1938:	82 ec       	ldi	r24, 0xC2	; 194
    193a:	97 e0       	ldi	r25, 0x07	; 7
    193c:	07 d8       	rcall	.-4082   	; 0x94c <vListInitialise>
    193e:	85 eb       	ldi	r24, 0xB5	; 181
    1940:	97 e0       	ldi	r25, 0x07	; 7
    1942:	04 d8       	rcall	.-4088   	; 0x94c <vListInitialise>
    1944:	8c ea       	ldi	r24, 0xAC	; 172
    1946:	97 e0       	ldi	r25, 0x07	; 7
    1948:	01 d8       	rcall	.-4094   	; 0x94c <vListInitialise>
    194a:	82 ea       	ldi	r24, 0xA2	; 162
    194c:	97 e0       	ldi	r25, 0x07	; 7
    194e:	0e 94 a6 04 	call	0x94c	; 0x94c <vListInitialise>
    1952:	8b ec       	ldi	r24, 0xCB	; 203
    1954:	97 e0       	ldi	r25, 0x07	; 7
    1956:	90 93 c1 07 	sts	0x07C1, r25	; 0x8007c1 <pxDelayedTaskList+0x1>
    195a:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <pxDelayedTaskList>
    195e:	82 ec       	ldi	r24, 0xC2	; 194
    1960:	97 e0       	ldi	r25, 0x07	; 7
    1962:	90 93 bf 07 	sts	0x07BF, r25	; 0x8007bf <pxOverflowDelayedTaskList+0x1>
    1966:	80 93 be 07 	sts	0x07BE, r24	; 0x8007be <pxOverflowDelayedTaskList>
    196a:	10 c0       	rjmp	.+32     	; 0x198c <xTaskCreate+0x19c>
    196c:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <xSchedulerRunning>
    1970:	81 11       	cpse	r24, r1
    1972:	0c c0       	rjmp	.+24     	; 0x198c <xTaskCreate+0x19c>
    1974:	e0 91 f8 07 	lds	r30, 0x07F8	; 0x8007f8 <pxCurrentTCB>
    1978:	f0 91 f9 07 	lds	r31, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>
    197c:	96 89       	ldd	r25, Z+22	; 0x16
    197e:	8e 89       	ldd	r24, Y+22	; 0x16
    1980:	89 17       	cp	r24, r25
    1982:	20 f0       	brcs	.+8      	; 0x198c <xTaskCreate+0x19c>
    1984:	d0 93 f9 07 	sts	0x07F9, r29	; 0x8007f9 <pxCurrentTCB+0x1>
    1988:	c0 93 f8 07 	sts	0x07F8, r28	; 0x8007f8 <pxCurrentTCB>
    198c:	80 91 99 07 	lds	r24, 0x0799	; 0x800799 <uxTaskNumber>
    1990:	8f 5f       	subi	r24, 0xFF	; 255
    1992:	80 93 99 07 	sts	0x0799, r24	; 0x800799 <uxTaskNumber>
    1996:	89 a3       	std	Y+33, r24	; 0x21
    1998:	8e 89       	ldd	r24, Y+22	; 0x16
    199a:	90 91 9e 07 	lds	r25, 0x079E	; 0x80079e <uxTopReadyPriority>
    199e:	98 17       	cp	r25, r24
    19a0:	10 f4       	brcc	.+4      	; 0x19a6 <xTaskCreate+0x1b6>
    19a2:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <uxTopReadyPriority>
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	9c 01       	movw	r18, r24
    19aa:	22 0f       	add	r18, r18
    19ac:	33 1f       	adc	r19, r19
    19ae:	22 0f       	add	r18, r18
    19b0:	33 1f       	adc	r19, r19
    19b2:	22 0f       	add	r18, r18
    19b4:	33 1f       	adc	r19, r19
    19b6:	82 0f       	add	r24, r18
    19b8:	93 1f       	adc	r25, r19
    19ba:	b6 01       	movw	r22, r12
    19bc:	8c 52       	subi	r24, 0x2C	; 44
    19be:	98 4f       	sbci	r25, 0xF8	; 248
    19c0:	0e 94 b8 04 	call	0x970	; 0x970 <vListInsertEnd>
    19c4:	0f 90       	pop	r0
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <xSchedulerRunning>
    19cc:	88 23       	and	r24, r24
    19ce:	59 f0       	breq	.+22     	; 0x19e6 <xTaskCreate+0x1f6>
    19d0:	e0 91 f8 07 	lds	r30, 0x07F8	; 0x8007f8 <pxCurrentTCB>
    19d4:	f0 91 f9 07 	lds	r31, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>
    19d8:	96 89       	ldd	r25, Z+22	; 0x16
    19da:	8e 89       	ldd	r24, Y+22	; 0x16
    19dc:	98 17       	cp	r25, r24
    19de:	28 f4       	brcc	.+10     	; 0x19ea <xTaskCreate+0x1fa>
    19e0:	ee d8       	rcall	.-3620   	; 0xbbe <vPortYield>
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	05 c0       	rjmp	.+10     	; 0x19f0 <xTaskCreate+0x200>
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	03 c0       	rjmp	.+6      	; 0x19f0 <xTaskCreate+0x200>
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	01 c0       	rjmp	.+2      	; 0x19f0 <xTaskCreate+0x200>
    19ee:	8f ef       	ldi	r24, 0xFF	; 255
    19f0:	df 91       	pop	r29
    19f2:	cf 91       	pop	r28
    19f4:	0f 91       	pop	r16
    19f6:	ff 90       	pop	r15
    19f8:	ef 90       	pop	r14
    19fa:	df 90       	pop	r13
    19fc:	cf 90       	pop	r12
    19fe:	bf 90       	pop	r11
    1a00:	af 90       	pop	r10
    1a02:	9f 90       	pop	r9
    1a04:	8f 90       	pop	r8
    1a06:	7f 90       	pop	r7
    1a08:	6f 90       	pop	r6
    1a0a:	5f 90       	pop	r5
    1a0c:	4f 90       	pop	r4
    1a0e:	08 95       	ret

00001a10 <vTaskStartScheduler>:
    1a10:	ef 92       	push	r14
    1a12:	ff 92       	push	r15
    1a14:	0f 93       	push	r16
    1a16:	0f 2e       	mov	r0, r31
    1a18:	f5 e9       	ldi	r31, 0x95	; 149
    1a1a:	ef 2e       	mov	r14, r31
    1a1c:	f7 e0       	ldi	r31, 0x07	; 7
    1a1e:	ff 2e       	mov	r15, r31
    1a20:	f0 2d       	mov	r31, r0
    1a22:	00 e0       	ldi	r16, 0x00	; 0
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	40 ec       	ldi	r20, 0xC0	; 192
    1a2a:	50 e0       	ldi	r21, 0x00	; 0
    1a2c:	6e e8       	ldi	r22, 0x8E	; 142
    1a2e:	74 e0       	ldi	r23, 0x04	; 4
    1a30:	8d ec       	ldi	r24, 0xCD	; 205
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	dd de       	rcall	.-582    	; 0x17f0 <xTaskCreate>
    1a36:	81 30       	cpi	r24, 0x01	; 1
    1a38:	c9 f4       	brne	.+50     	; 0x1a6c <vTaskStartScheduler+0x5c>
    1a3a:	07 d5       	rcall	.+2574   	; 0x244a <xTimerCreateTimerTask>
    1a3c:	81 30       	cpi	r24, 0x01	; 1
    1a3e:	b1 f4       	brne	.+44     	; 0x1a6c <vTaskStartScheduler+0x5c>
    1a40:	f8 94       	cli
    1a42:	8f ef       	ldi	r24, 0xFF	; 255
    1a44:	9f ef       	ldi	r25, 0xFF	; 255
    1a46:	90 93 98 07 	sts	0x0798, r25	; 0x800798 <xNextTaskUnblockTime+0x1>
    1a4a:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <xNextTaskUnblockTime>
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	80 93 9d 07 	sts	0x079D, r24	; 0x80079d <xSchedulerRunning>
    1a54:	10 92 a0 07 	sts	0x07A0, r1	; 0x8007a0 <xTickCount+0x1>
    1a58:	10 92 9f 07 	sts	0x079F, r1	; 0x80079f <xTickCount>
    1a5c:	e0 91 f8 07 	lds	r30, 0x07F8	; 0x8007f8 <pxCurrentTCB>
    1a60:	f0 91 f9 07 	lds	r31, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>
    1a64:	85 a1       	ldd	r24, Z+37	; 0x25
    1a66:	0e 94 74 04 	call	0x8e8	; 0x8e8 <task_switch_in>
    1a6a:	6d d8       	rcall	.-3878   	; 0xb46 <xPortStartScheduler>
    1a6c:	0f 91       	pop	r16
    1a6e:	ff 90       	pop	r15
    1a70:	ef 90       	pop	r14
    1a72:	08 95       	ret

00001a74 <vTaskSuspendAll>:
    1a74:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <uxSchedulerSuspended>
    1a78:	8f 5f       	subi	r24, 0xFF	; 255
    1a7a:	80 93 94 07 	sts	0x0794, r24	; 0x800794 <uxSchedulerSuspended>
    1a7e:	08 95       	ret

00001a80 <xTaskGetTickCount>:
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	f8 94       	cli
    1a84:	0f 92       	push	r0
    1a86:	80 91 9f 07 	lds	r24, 0x079F	; 0x80079f <xTickCount>
    1a8a:	90 91 a0 07 	lds	r25, 0x07A0	; 0x8007a0 <xTickCount+0x1>
    1a8e:	0f 90       	pop	r0
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	08 95       	ret

00001a94 <xTaskIncrementTick>:
    1a94:	cf 92       	push	r12
    1a96:	df 92       	push	r13
    1a98:	ef 92       	push	r14
    1a9a:	ff 92       	push	r15
    1a9c:	0f 93       	push	r16
    1a9e:	1f 93       	push	r17
    1aa0:	cf 93       	push	r28
    1aa2:	df 93       	push	r29
    1aa4:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <uxSchedulerSuspended>
    1aa8:	81 11       	cpse	r24, r1
    1aaa:	98 c0       	rjmp	.+304    	; 0x1bdc <xTaskIncrementTick+0x148>
    1aac:	e0 90 9f 07 	lds	r14, 0x079F	; 0x80079f <xTickCount>
    1ab0:	f0 90 a0 07 	lds	r15, 0x07A0	; 0x8007a0 <xTickCount+0x1>
    1ab4:	8f ef       	ldi	r24, 0xFF	; 255
    1ab6:	e8 1a       	sub	r14, r24
    1ab8:	f8 0a       	sbc	r15, r24
    1aba:	f0 92 a0 07 	sts	0x07A0, r15	; 0x8007a0 <xTickCount+0x1>
    1abe:	e0 92 9f 07 	sts	0x079F, r14	; 0x80079f <xTickCount>
    1ac2:	e1 14       	cp	r14, r1
    1ac4:	f1 04       	cpc	r15, r1
    1ac6:	b1 f4       	brne	.+44     	; 0x1af4 <xTaskIncrementTick+0x60>
    1ac8:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <pxDelayedTaskList>
    1acc:	90 91 c1 07 	lds	r25, 0x07C1	; 0x8007c1 <pxDelayedTaskList+0x1>
    1ad0:	20 91 be 07 	lds	r18, 0x07BE	; 0x8007be <pxOverflowDelayedTaskList>
    1ad4:	30 91 bf 07 	lds	r19, 0x07BF	; 0x8007bf <pxOverflowDelayedTaskList+0x1>
    1ad8:	30 93 c1 07 	sts	0x07C1, r19	; 0x8007c1 <pxDelayedTaskList+0x1>
    1adc:	20 93 c0 07 	sts	0x07C0, r18	; 0x8007c0 <pxDelayedTaskList>
    1ae0:	90 93 bf 07 	sts	0x07BF, r25	; 0x8007bf <pxOverflowDelayedTaskList+0x1>
    1ae4:	80 93 be 07 	sts	0x07BE, r24	; 0x8007be <pxOverflowDelayedTaskList>
    1ae8:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <xNumOfOverflows>
    1aec:	8f 5f       	subi	r24, 0xFF	; 255
    1aee:	80 93 9a 07 	sts	0x079A, r24	; 0x80079a <xNumOfOverflows>
    1af2:	0b de       	rcall	.-1002   	; 0x170a <prvResetNextTaskUnblockTime>
    1af4:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <xNextTaskUnblockTime>
    1af8:	90 91 98 07 	lds	r25, 0x0798	; 0x800798 <xNextTaskUnblockTime+0x1>
    1afc:	e8 16       	cp	r14, r24
    1afe:	f9 06       	cpc	r15, r25
    1b00:	10 f4       	brcc	.+4      	; 0x1b06 <xTaskIncrementTick+0x72>
    1b02:	d1 2c       	mov	r13, r1
    1b04:	53 c0       	rjmp	.+166    	; 0x1bac <xTaskIncrementTick+0x118>
    1b06:	d1 2c       	mov	r13, r1
    1b08:	cc 24       	eor	r12, r12
    1b0a:	c3 94       	inc	r12
    1b0c:	e0 91 c0 07 	lds	r30, 0x07C0	; 0x8007c0 <pxDelayedTaskList>
    1b10:	f0 91 c1 07 	lds	r31, 0x07C1	; 0x8007c1 <pxDelayedTaskList+0x1>
    1b14:	80 81       	ld	r24, Z
    1b16:	81 11       	cpse	r24, r1
    1b18:	07 c0       	rjmp	.+14     	; 0x1b28 <xTaskIncrementTick+0x94>
    1b1a:	8f ef       	ldi	r24, 0xFF	; 255
    1b1c:	9f ef       	ldi	r25, 0xFF	; 255
    1b1e:	90 93 98 07 	sts	0x0798, r25	; 0x800798 <xNextTaskUnblockTime+0x1>
    1b22:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <xNextTaskUnblockTime>
    1b26:	42 c0       	rjmp	.+132    	; 0x1bac <xTaskIncrementTick+0x118>
    1b28:	e0 91 c0 07 	lds	r30, 0x07C0	; 0x8007c0 <pxDelayedTaskList>
    1b2c:	f0 91 c1 07 	lds	r31, 0x07C1	; 0x8007c1 <pxDelayedTaskList+0x1>
    1b30:	05 80       	ldd	r0, Z+5	; 0x05
    1b32:	f6 81       	ldd	r31, Z+6	; 0x06
    1b34:	e0 2d       	mov	r30, r0
    1b36:	c6 81       	ldd	r28, Z+6	; 0x06
    1b38:	d7 81       	ldd	r29, Z+7	; 0x07
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b3e:	e8 16       	cp	r14, r24
    1b40:	f9 06       	cpc	r15, r25
    1b42:	28 f4       	brcc	.+10     	; 0x1b4e <xTaskIncrementTick+0xba>
    1b44:	90 93 98 07 	sts	0x0798, r25	; 0x800798 <xNextTaskUnblockTime+0x1>
    1b48:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <xNextTaskUnblockTime>
    1b4c:	2f c0       	rjmp	.+94     	; 0x1bac <xTaskIncrementTick+0x118>
    1b4e:	8e 01       	movw	r16, r28
    1b50:	0e 5f       	subi	r16, 0xFE	; 254
    1b52:	1f 4f       	sbci	r17, 0xFF	; 255
    1b54:	c8 01       	movw	r24, r16
    1b56:	0e 94 0a 05 	call	0xa14	; 0xa14 <uxListRemove>
    1b5a:	8c 89       	ldd	r24, Y+20	; 0x14
    1b5c:	9d 89       	ldd	r25, Y+21	; 0x15
    1b5e:	89 2b       	or	r24, r25
    1b60:	21 f0       	breq	.+8      	; 0x1b6a <xTaskIncrementTick+0xd6>
    1b62:	ce 01       	movw	r24, r28
    1b64:	0c 96       	adiw	r24, 0x0c	; 12
    1b66:	0e 94 0a 05 	call	0xa14	; 0xa14 <uxListRemove>
    1b6a:	8e 89       	ldd	r24, Y+22	; 0x16
    1b6c:	90 91 9e 07 	lds	r25, 0x079E	; 0x80079e <uxTopReadyPriority>
    1b70:	98 17       	cp	r25, r24
    1b72:	10 f4       	brcc	.+4      	; 0x1b78 <xTaskIncrementTick+0xe4>
    1b74:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <uxTopReadyPriority>
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	9c 01       	movw	r18, r24
    1b7c:	22 0f       	add	r18, r18
    1b7e:	33 1f       	adc	r19, r19
    1b80:	22 0f       	add	r18, r18
    1b82:	33 1f       	adc	r19, r19
    1b84:	22 0f       	add	r18, r18
    1b86:	33 1f       	adc	r19, r19
    1b88:	82 0f       	add	r24, r18
    1b8a:	93 1f       	adc	r25, r19
    1b8c:	b8 01       	movw	r22, r16
    1b8e:	8c 52       	subi	r24, 0x2C	; 44
    1b90:	98 4f       	sbci	r25, 0xF8	; 248
    1b92:	0e 94 b8 04 	call	0x970	; 0x970 <vListInsertEnd>
    1b96:	e0 91 f8 07 	lds	r30, 0x07F8	; 0x8007f8 <pxCurrentTCB>
    1b9a:	f0 91 f9 07 	lds	r31, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>
    1b9e:	9e 89       	ldd	r25, Y+22	; 0x16
    1ba0:	86 89       	ldd	r24, Z+22	; 0x16
    1ba2:	98 17       	cp	r25, r24
    1ba4:	08 f4       	brcc	.+2      	; 0x1ba8 <xTaskIncrementTick+0x114>
    1ba6:	b2 cf       	rjmp	.-156    	; 0x1b0c <xTaskIncrementTick+0x78>
    1ba8:	dc 2c       	mov	r13, r12
    1baa:	b0 cf       	rjmp	.-160    	; 0x1b0c <xTaskIncrementTick+0x78>
    1bac:	e0 91 f8 07 	lds	r30, 0x07F8	; 0x8007f8 <pxCurrentTCB>
    1bb0:	f0 91 f9 07 	lds	r31, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>
    1bb4:	86 89       	ldd	r24, Z+22	; 0x16
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	fc 01       	movw	r30, r24
    1bba:	ee 0f       	add	r30, r30
    1bbc:	ff 1f       	adc	r31, r31
    1bbe:	ee 0f       	add	r30, r30
    1bc0:	ff 1f       	adc	r31, r31
    1bc2:	ee 0f       	add	r30, r30
    1bc4:	ff 1f       	adc	r31, r31
    1bc6:	8e 0f       	add	r24, r30
    1bc8:	9f 1f       	adc	r25, r31
    1bca:	fc 01       	movw	r30, r24
    1bcc:	ec 52       	subi	r30, 0x2C	; 44
    1bce:	f8 4f       	sbci	r31, 0xF8	; 248
    1bd0:	80 81       	ld	r24, Z
    1bd2:	82 30       	cpi	r24, 0x02	; 2
    1bd4:	48 f0       	brcs	.+18     	; 0x1be8 <xTaskIncrementTick+0x154>
    1bd6:	dd 24       	eor	r13, r13
    1bd8:	d3 94       	inc	r13
    1bda:	06 c0       	rjmp	.+12     	; 0x1be8 <xTaskIncrementTick+0x154>
    1bdc:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <uxPendedTicks>
    1be0:	8f 5f       	subi	r24, 0xFF	; 255
    1be2:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <uxPendedTicks>
    1be6:	d1 2c       	mov	r13, r1
    1be8:	80 91 9b 07 	lds	r24, 0x079B	; 0x80079b <xYieldPending>
    1bec:	88 23       	and	r24, r24
    1bee:	11 f0       	breq	.+4      	; 0x1bf4 <xTaskIncrementTick+0x160>
    1bf0:	dd 24       	eor	r13, r13
    1bf2:	d3 94       	inc	r13
    1bf4:	8d 2d       	mov	r24, r13
    1bf6:	df 91       	pop	r29
    1bf8:	cf 91       	pop	r28
    1bfa:	1f 91       	pop	r17
    1bfc:	0f 91       	pop	r16
    1bfe:	ff 90       	pop	r15
    1c00:	ef 90       	pop	r14
    1c02:	df 90       	pop	r13
    1c04:	cf 90       	pop	r12
    1c06:	08 95       	ret

00001c08 <xTaskResumeAll>:
    1c08:	df 92       	push	r13
    1c0a:	ef 92       	push	r14
    1c0c:	ff 92       	push	r15
    1c0e:	0f 93       	push	r16
    1c10:	1f 93       	push	r17
    1c12:	cf 93       	push	r28
    1c14:	df 93       	push	r29
    1c16:	0f b6       	in	r0, 0x3f	; 63
    1c18:	f8 94       	cli
    1c1a:	0f 92       	push	r0
    1c1c:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <uxSchedulerSuspended>
    1c20:	81 50       	subi	r24, 0x01	; 1
    1c22:	80 93 94 07 	sts	0x0794, r24	; 0x800794 <uxSchedulerSuspended>
    1c26:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <uxSchedulerSuspended>
    1c2a:	81 11       	cpse	r24, r1
    1c2c:	5d c0       	rjmp	.+186    	; 0x1ce8 <xTaskResumeAll+0xe0>
    1c2e:	80 91 a1 07 	lds	r24, 0x07A1	; 0x8007a1 <uxCurrentNumberOfTasks>
    1c32:	81 11       	cpse	r24, r1
    1c34:	33 c0       	rjmp	.+102    	; 0x1c9c <xTaskResumeAll+0x94>
    1c36:	5b c0       	rjmp	.+182    	; 0x1cee <xTaskResumeAll+0xe6>
    1c38:	d7 01       	movw	r26, r14
    1c3a:	15 96       	adiw	r26, 0x05	; 5
    1c3c:	ed 91       	ld	r30, X+
    1c3e:	fc 91       	ld	r31, X
    1c40:	16 97       	sbiw	r26, 0x06	; 6
    1c42:	c6 81       	ldd	r28, Z+6	; 0x06
    1c44:	d7 81       	ldd	r29, Z+7	; 0x07
    1c46:	ce 01       	movw	r24, r28
    1c48:	0c 96       	adiw	r24, 0x0c	; 12
    1c4a:	0e 94 0a 05 	call	0xa14	; 0xa14 <uxListRemove>
    1c4e:	8e 01       	movw	r16, r28
    1c50:	0e 5f       	subi	r16, 0xFE	; 254
    1c52:	1f 4f       	sbci	r17, 0xFF	; 255
    1c54:	c8 01       	movw	r24, r16
    1c56:	0e 94 0a 05 	call	0xa14	; 0xa14 <uxListRemove>
    1c5a:	8e 89       	ldd	r24, Y+22	; 0x16
    1c5c:	90 91 9e 07 	lds	r25, 0x079E	; 0x80079e <uxTopReadyPriority>
    1c60:	98 17       	cp	r25, r24
    1c62:	10 f4       	brcc	.+4      	; 0x1c68 <xTaskResumeAll+0x60>
    1c64:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <uxTopReadyPriority>
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	9c 01       	movw	r18, r24
    1c6c:	22 0f       	add	r18, r18
    1c6e:	33 1f       	adc	r19, r19
    1c70:	22 0f       	add	r18, r18
    1c72:	33 1f       	adc	r19, r19
    1c74:	22 0f       	add	r18, r18
    1c76:	33 1f       	adc	r19, r19
    1c78:	82 0f       	add	r24, r18
    1c7a:	93 1f       	adc	r25, r19
    1c7c:	b8 01       	movw	r22, r16
    1c7e:	8c 52       	subi	r24, 0x2C	; 44
    1c80:	98 4f       	sbci	r25, 0xF8	; 248
    1c82:	0e 94 b8 04 	call	0x970	; 0x970 <vListInsertEnd>
    1c86:	e0 91 f8 07 	lds	r30, 0x07F8	; 0x8007f8 <pxCurrentTCB>
    1c8a:	f0 91 f9 07 	lds	r31, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>
    1c8e:	9e 89       	ldd	r25, Y+22	; 0x16
    1c90:	86 89       	ldd	r24, Z+22	; 0x16
    1c92:	98 17       	cp	r25, r24
    1c94:	68 f0       	brcs	.+26     	; 0x1cb0 <xTaskResumeAll+0xa8>
    1c96:	d0 92 9b 07 	sts	0x079B, r13	; 0x80079b <xYieldPending>
    1c9a:	0a c0       	rjmp	.+20     	; 0x1cb0 <xTaskResumeAll+0xa8>
    1c9c:	c0 e0       	ldi	r28, 0x00	; 0
    1c9e:	d0 e0       	ldi	r29, 0x00	; 0
    1ca0:	0f 2e       	mov	r0, r31
    1ca2:	f5 eb       	ldi	r31, 0xB5	; 181
    1ca4:	ef 2e       	mov	r14, r31
    1ca6:	f7 e0       	ldi	r31, 0x07	; 7
    1ca8:	ff 2e       	mov	r15, r31
    1caa:	f0 2d       	mov	r31, r0
    1cac:	dd 24       	eor	r13, r13
    1cae:	d3 94       	inc	r13
    1cb0:	f7 01       	movw	r30, r14
    1cb2:	80 81       	ld	r24, Z
    1cb4:	81 11       	cpse	r24, r1
    1cb6:	c0 cf       	rjmp	.-128    	; 0x1c38 <xTaskResumeAll+0x30>
    1cb8:	cd 2b       	or	r28, r29
    1cba:	09 f0       	breq	.+2      	; 0x1cbe <xTaskResumeAll+0xb6>
    1cbc:	26 dd       	rcall	.-1460   	; 0x170a <prvResetNextTaskUnblockTime>
    1cbe:	c0 91 9c 07 	lds	r28, 0x079C	; 0x80079c <uxPendedTicks>
    1cc2:	cc 23       	and	r28, r28
    1cc4:	49 f0       	breq	.+18     	; 0x1cd8 <xTaskResumeAll+0xd0>
    1cc6:	d1 e0       	ldi	r29, 0x01	; 1
    1cc8:	e5 de       	rcall	.-566    	; 0x1a94 <xTaskIncrementTick>
    1cca:	81 11       	cpse	r24, r1
    1ccc:	d0 93 9b 07 	sts	0x079B, r29	; 0x80079b <xYieldPending>
    1cd0:	c1 50       	subi	r28, 0x01	; 1
    1cd2:	d1 f7       	brne	.-12     	; 0x1cc8 <xTaskResumeAll+0xc0>
    1cd4:	10 92 9c 07 	sts	0x079C, r1	; 0x80079c <uxPendedTicks>
    1cd8:	80 91 9b 07 	lds	r24, 0x079B	; 0x80079b <xYieldPending>
    1cdc:	88 23       	and	r24, r24
    1cde:	31 f0       	breq	.+12     	; 0x1cec <xTaskResumeAll+0xe4>
    1ce0:	0e 94 df 05 	call	0xbbe	; 0xbbe <vPortYield>
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	03 c0       	rjmp	.+6      	; 0x1cee <xTaskResumeAll+0xe6>
    1ce8:	80 e0       	ldi	r24, 0x00	; 0
    1cea:	01 c0       	rjmp	.+2      	; 0x1cee <xTaskResumeAll+0xe6>
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	0f 90       	pop	r0
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	df 91       	pop	r29
    1cf4:	cf 91       	pop	r28
    1cf6:	1f 91       	pop	r17
    1cf8:	0f 91       	pop	r16
    1cfa:	ff 90       	pop	r15
    1cfc:	ef 90       	pop	r14
    1cfe:	df 90       	pop	r13
    1d00:	08 95       	ret

00001d02 <vTaskDelay>:
    1d02:	cf 93       	push	r28
    1d04:	df 93       	push	r29
    1d06:	ec 01       	movw	r28, r24
    1d08:	89 2b       	or	r24, r25
    1d0a:	39 f0       	breq	.+14     	; 0x1d1a <vTaskDelay+0x18>
    1d0c:	b3 de       	rcall	.-666    	; 0x1a74 <vTaskSuspendAll>
    1d0e:	60 e0       	ldi	r22, 0x00	; 0
    1d10:	ce 01       	movw	r24, r28
    1d12:	1a dd       	rcall	.-1484   	; 0x1748 <prvAddCurrentTaskToDelayedList>
    1d14:	79 df       	rcall	.-270    	; 0x1c08 <xTaskResumeAll>
    1d16:	81 11       	cpse	r24, r1
    1d18:	02 c0       	rjmp	.+4      	; 0x1d1e <vTaskDelay+0x1c>
    1d1a:	0e 94 df 05 	call	0xbbe	; 0xbbe <vPortYield>
    1d1e:	df 91       	pop	r29
    1d20:	cf 91       	pop	r28
    1d22:	08 95       	ret

00001d24 <vTaskSwitchContext>:
    1d24:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <uxSchedulerSuspended>
    1d28:	88 23       	and	r24, r24
    1d2a:	21 f0       	breq	.+8      	; 0x1d34 <vTaskSwitchContext+0x10>
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	80 93 9b 07 	sts	0x079B, r24	; 0x80079b <xYieldPending>
    1d32:	08 95       	ret
    1d34:	10 92 9b 07 	sts	0x079B, r1	; 0x80079b <xYieldPending>
    1d38:	e0 91 f8 07 	lds	r30, 0x07F8	; 0x8007f8 <pxCurrentTCB>
    1d3c:	f0 91 f9 07 	lds	r31, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>
    1d40:	85 a1       	ldd	r24, Z+37	; 0x25
    1d42:	0e 94 7e 04 	call	0x8fc	; 0x8fc <task_switch_out>
    1d46:	a0 91 f8 07 	lds	r26, 0x07F8	; 0x8007f8 <pxCurrentTCB>
    1d4a:	b0 91 f9 07 	lds	r27, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>
    1d4e:	e0 91 f8 07 	lds	r30, 0x07F8	; 0x8007f8 <pxCurrentTCB>
    1d52:	f0 91 f9 07 	lds	r31, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>
    1d56:	2d 91       	ld	r18, X+
    1d58:	3c 91       	ld	r19, X
    1d5a:	87 89       	ldd	r24, Z+23	; 0x17
    1d5c:	90 8d       	ldd	r25, Z+24	; 0x18
    1d5e:	82 17       	cp	r24, r18
    1d60:	93 07       	cpc	r25, r19
    1d62:	58 f0       	brcs	.+22     	; 0x1d7a <vTaskSwitchContext+0x56>
    1d64:	60 91 f8 07 	lds	r22, 0x07F8	; 0x8007f8 <pxCurrentTCB>
    1d68:	70 91 f9 07 	lds	r23, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>
    1d6c:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <pxCurrentTCB>
    1d70:	90 91 f9 07 	lds	r25, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>
    1d74:	67 5e       	subi	r22, 0xE7	; 231
    1d76:	7f 4f       	sbci	r23, 0xFF	; 255
    1d78:	4b d4       	rcall	.+2198   	; 0x2610 <vApplicationStackOverflowHook>
    1d7a:	20 91 9e 07 	lds	r18, 0x079E	; 0x80079e <uxTopReadyPriority>
    1d7e:	82 2f       	mov	r24, r18
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	fc 01       	movw	r30, r24
    1d84:	ee 0f       	add	r30, r30
    1d86:	ff 1f       	adc	r31, r31
    1d88:	ee 0f       	add	r30, r30
    1d8a:	ff 1f       	adc	r31, r31
    1d8c:	ee 0f       	add	r30, r30
    1d8e:	ff 1f       	adc	r31, r31
    1d90:	e8 0f       	add	r30, r24
    1d92:	f9 1f       	adc	r31, r25
    1d94:	ec 52       	subi	r30, 0x2C	; 44
    1d96:	f8 4f       	sbci	r31, 0xF8	; 248
    1d98:	30 81       	ld	r19, Z
    1d9a:	31 11       	cpse	r19, r1
    1d9c:	11 c0       	rjmp	.+34     	; 0x1dc0 <vTaskSwitchContext+0x9c>
    1d9e:	21 50       	subi	r18, 0x01	; 1
    1da0:	82 2f       	mov	r24, r18
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	fc 01       	movw	r30, r24
    1da6:	ee 0f       	add	r30, r30
    1da8:	ff 1f       	adc	r31, r31
    1daa:	ee 0f       	add	r30, r30
    1dac:	ff 1f       	adc	r31, r31
    1dae:	ee 0f       	add	r30, r30
    1db0:	ff 1f       	adc	r31, r31
    1db2:	e8 0f       	add	r30, r24
    1db4:	f9 1f       	adc	r31, r25
    1db6:	ec 52       	subi	r30, 0x2C	; 44
    1db8:	f8 4f       	sbci	r31, 0xF8	; 248
    1dba:	30 81       	ld	r19, Z
    1dbc:	33 23       	and	r19, r19
    1dbe:	79 f3       	breq	.-34     	; 0x1d9e <vTaskSwitchContext+0x7a>
    1dc0:	ac 01       	movw	r20, r24
    1dc2:	44 0f       	add	r20, r20
    1dc4:	55 1f       	adc	r21, r21
    1dc6:	44 0f       	add	r20, r20
    1dc8:	55 1f       	adc	r21, r21
    1dca:	44 0f       	add	r20, r20
    1dcc:	55 1f       	adc	r21, r21
    1dce:	48 0f       	add	r20, r24
    1dd0:	59 1f       	adc	r21, r25
    1dd2:	da 01       	movw	r26, r20
    1dd4:	ac 52       	subi	r26, 0x2C	; 44
    1dd6:	b8 4f       	sbci	r27, 0xF8	; 248
    1dd8:	11 96       	adiw	r26, 0x01	; 1
    1dda:	ed 91       	ld	r30, X+
    1ddc:	fc 91       	ld	r31, X
    1dde:	12 97       	sbiw	r26, 0x02	; 2
    1de0:	02 80       	ldd	r0, Z+2	; 0x02
    1de2:	f3 81       	ldd	r31, Z+3	; 0x03
    1de4:	e0 2d       	mov	r30, r0
    1de6:	12 96       	adiw	r26, 0x02	; 2
    1de8:	fc 93       	st	X, r31
    1dea:	ee 93       	st	-X, r30
    1dec:	11 97       	sbiw	r26, 0x01	; 1
    1dee:	49 52       	subi	r20, 0x29	; 41
    1df0:	58 4f       	sbci	r21, 0xF8	; 248
    1df2:	e4 17       	cp	r30, r20
    1df4:	f5 07       	cpc	r31, r21
    1df6:	29 f4       	brne	.+10     	; 0x1e02 <vTaskSwitchContext+0xde>
    1df8:	42 81       	ldd	r20, Z+2	; 0x02
    1dfa:	53 81       	ldd	r21, Z+3	; 0x03
    1dfc:	fd 01       	movw	r30, r26
    1dfe:	52 83       	std	Z+2, r21	; 0x02
    1e00:	41 83       	std	Z+1, r20	; 0x01
    1e02:	fc 01       	movw	r30, r24
    1e04:	ee 0f       	add	r30, r30
    1e06:	ff 1f       	adc	r31, r31
    1e08:	ee 0f       	add	r30, r30
    1e0a:	ff 1f       	adc	r31, r31
    1e0c:	ee 0f       	add	r30, r30
    1e0e:	ff 1f       	adc	r31, r31
    1e10:	8e 0f       	add	r24, r30
    1e12:	9f 1f       	adc	r25, r31
    1e14:	fc 01       	movw	r30, r24
    1e16:	ec 52       	subi	r30, 0x2C	; 44
    1e18:	f8 4f       	sbci	r31, 0xF8	; 248
    1e1a:	01 80       	ldd	r0, Z+1	; 0x01
    1e1c:	f2 81       	ldd	r31, Z+2	; 0x02
    1e1e:	e0 2d       	mov	r30, r0
    1e20:	86 81       	ldd	r24, Z+6	; 0x06
    1e22:	97 81       	ldd	r25, Z+7	; 0x07
    1e24:	90 93 f9 07 	sts	0x07F9, r25	; 0x8007f9 <pxCurrentTCB+0x1>
    1e28:	80 93 f8 07 	sts	0x07F8, r24	; 0x8007f8 <pxCurrentTCB>
    1e2c:	20 93 9e 07 	sts	0x079E, r18	; 0x80079e <uxTopReadyPriority>
    1e30:	e0 91 f8 07 	lds	r30, 0x07F8	; 0x8007f8 <pxCurrentTCB>
    1e34:	f0 91 f9 07 	lds	r31, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>
    1e38:	85 a1       	ldd	r24, Z+37	; 0x25
    1e3a:	0c 94 74 04 	jmp	0x8e8	; 0x8e8 <task_switch_in>
    1e3e:	08 95       	ret

00001e40 <vTaskPlaceOnEventList>:
    1e40:	cf 93       	push	r28
    1e42:	df 93       	push	r29
    1e44:	eb 01       	movw	r28, r22
    1e46:	60 91 f8 07 	lds	r22, 0x07F8	; 0x8007f8 <pxCurrentTCB>
    1e4a:	70 91 f9 07 	lds	r23, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>
    1e4e:	64 5f       	subi	r22, 0xF4	; 244
    1e50:	7f 4f       	sbci	r23, 0xFF	; 255
    1e52:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <vListInsert>
    1e56:	61 e0       	ldi	r22, 0x01	; 1
    1e58:	ce 01       	movw	r24, r28
    1e5a:	76 dc       	rcall	.-1812   	; 0x1748 <prvAddCurrentTaskToDelayedList>
    1e5c:	df 91       	pop	r29
    1e5e:	cf 91       	pop	r28
    1e60:	08 95       	ret

00001e62 <vTaskPlaceOnEventListRestricted>:
    1e62:	0f 93       	push	r16
    1e64:	1f 93       	push	r17
    1e66:	cf 93       	push	r28
    1e68:	8b 01       	movw	r16, r22
    1e6a:	c4 2f       	mov	r28, r20
    1e6c:	60 91 f8 07 	lds	r22, 0x07F8	; 0x8007f8 <pxCurrentTCB>
    1e70:	70 91 f9 07 	lds	r23, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>
    1e74:	64 5f       	subi	r22, 0xF4	; 244
    1e76:	7f 4f       	sbci	r23, 0xFF	; 255
    1e78:	0e 94 b8 04 	call	0x970	; 0x970 <vListInsertEnd>
    1e7c:	cc 23       	and	r28, r28
    1e7e:	11 f0       	breq	.+4      	; 0x1e84 <vTaskPlaceOnEventListRestricted+0x22>
    1e80:	0f ef       	ldi	r16, 0xFF	; 255
    1e82:	1f ef       	ldi	r17, 0xFF	; 255
    1e84:	6c 2f       	mov	r22, r28
    1e86:	c8 01       	movw	r24, r16
    1e88:	5f dc       	rcall	.-1858   	; 0x1748 <prvAddCurrentTaskToDelayedList>
    1e8a:	cf 91       	pop	r28
    1e8c:	1f 91       	pop	r17
    1e8e:	0f 91       	pop	r16
    1e90:	08 95       	ret

00001e92 <xTaskRemoveFromEventList>:
    1e92:	0f 93       	push	r16
    1e94:	1f 93       	push	r17
    1e96:	cf 93       	push	r28
    1e98:	df 93       	push	r29
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	15 96       	adiw	r26, 0x05	; 5
    1e9e:	ed 91       	ld	r30, X+
    1ea0:	fc 91       	ld	r31, X
    1ea2:	16 97       	sbiw	r26, 0x06	; 6
    1ea4:	c6 81       	ldd	r28, Z+6	; 0x06
    1ea6:	d7 81       	ldd	r29, Z+7	; 0x07
    1ea8:	8e 01       	movw	r16, r28
    1eaa:	04 5f       	subi	r16, 0xF4	; 244
    1eac:	1f 4f       	sbci	r17, 0xFF	; 255
    1eae:	c8 01       	movw	r24, r16
    1eb0:	0e 94 0a 05 	call	0xa14	; 0xa14 <uxListRemove>
    1eb4:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <uxSchedulerSuspended>
    1eb8:	81 11       	cpse	r24, r1
    1eba:	1c c0       	rjmp	.+56     	; 0x1ef4 <xTaskRemoveFromEventList+0x62>
    1ebc:	0a 50       	subi	r16, 0x0A	; 10
    1ebe:	11 09       	sbc	r17, r1
    1ec0:	c8 01       	movw	r24, r16
    1ec2:	0e 94 0a 05 	call	0xa14	; 0xa14 <uxListRemove>
    1ec6:	8e 89       	ldd	r24, Y+22	; 0x16
    1ec8:	90 91 9e 07 	lds	r25, 0x079E	; 0x80079e <uxTopReadyPriority>
    1ecc:	98 17       	cp	r25, r24
    1ece:	10 f4       	brcc	.+4      	; 0x1ed4 <xTaskRemoveFromEventList+0x42>
    1ed0:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <uxTopReadyPriority>
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	9c 01       	movw	r18, r24
    1ed8:	22 0f       	add	r18, r18
    1eda:	33 1f       	adc	r19, r19
    1edc:	22 0f       	add	r18, r18
    1ede:	33 1f       	adc	r19, r19
    1ee0:	22 0f       	add	r18, r18
    1ee2:	33 1f       	adc	r19, r19
    1ee4:	82 0f       	add	r24, r18
    1ee6:	93 1f       	adc	r25, r19
    1ee8:	b8 01       	movw	r22, r16
    1eea:	8c 52       	subi	r24, 0x2C	; 44
    1eec:	98 4f       	sbci	r25, 0xF8	; 248
    1eee:	0e 94 b8 04 	call	0x970	; 0x970 <vListInsertEnd>
    1ef2:	05 c0       	rjmp	.+10     	; 0x1efe <xTaskRemoveFromEventList+0x6c>
    1ef4:	b8 01       	movw	r22, r16
    1ef6:	85 eb       	ldi	r24, 0xB5	; 181
    1ef8:	97 e0       	ldi	r25, 0x07	; 7
    1efa:	0e 94 b8 04 	call	0x970	; 0x970 <vListInsertEnd>
    1efe:	e0 91 f8 07 	lds	r30, 0x07F8	; 0x8007f8 <pxCurrentTCB>
    1f02:	f0 91 f9 07 	lds	r31, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>
    1f06:	9e 89       	ldd	r25, Y+22	; 0x16
    1f08:	86 89       	ldd	r24, Z+22	; 0x16
    1f0a:	89 17       	cp	r24, r25
    1f0c:	20 f4       	brcc	.+8      	; 0x1f16 <xTaskRemoveFromEventList+0x84>
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	80 93 9b 07 	sts	0x079B, r24	; 0x80079b <xYieldPending>
    1f14:	01 c0       	rjmp	.+2      	; 0x1f18 <xTaskRemoveFromEventList+0x86>
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	df 91       	pop	r29
    1f1a:	cf 91       	pop	r28
    1f1c:	1f 91       	pop	r17
    1f1e:	0f 91       	pop	r16
    1f20:	08 95       	ret

00001f22 <vTaskInternalSetTimeOutState>:
    1f22:	20 91 9a 07 	lds	r18, 0x079A	; 0x80079a <xNumOfOverflows>
    1f26:	fc 01       	movw	r30, r24
    1f28:	20 83       	st	Z, r18
    1f2a:	20 91 9f 07 	lds	r18, 0x079F	; 0x80079f <xTickCount>
    1f2e:	30 91 a0 07 	lds	r19, 0x07A0	; 0x8007a0 <xTickCount+0x1>
    1f32:	32 83       	std	Z+2, r19	; 0x02
    1f34:	21 83       	std	Z+1, r18	; 0x01
    1f36:	08 95       	ret

00001f38 <xTaskCheckForTimeOut>:
    1f38:	cf 93       	push	r28
    1f3a:	df 93       	push	r29
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	0f 92       	push	r0
    1f42:	20 91 9f 07 	lds	r18, 0x079F	; 0x80079f <xTickCount>
    1f46:	30 91 a0 07 	lds	r19, 0x07A0	; 0x8007a0 <xTickCount+0x1>
    1f4a:	db 01       	movw	r26, r22
    1f4c:	4d 91       	ld	r20, X+
    1f4e:	5c 91       	ld	r21, X
    1f50:	4f 3f       	cpi	r20, 0xFF	; 255
    1f52:	bf ef       	ldi	r27, 0xFF	; 255
    1f54:	5b 07       	cpc	r21, r27
    1f56:	e9 f0       	breq	.+58     	; 0x1f92 <xTaskCheckForTimeOut+0x5a>
    1f58:	ec 01       	movw	r28, r24
    1f5a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f5c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f5e:	a0 91 9a 07 	lds	r26, 0x079A	; 0x80079a <xNumOfOverflows>
    1f62:	b8 81       	ld	r27, Y
    1f64:	ba 17       	cp	r27, r26
    1f66:	19 f0       	breq	.+6      	; 0x1f6e <xTaskCheckForTimeOut+0x36>
    1f68:	2e 17       	cp	r18, r30
    1f6a:	3f 07       	cpc	r19, r31
    1f6c:	a0 f4       	brcc	.+40     	; 0x1f96 <xTaskCheckForTimeOut+0x5e>
    1f6e:	2e 1b       	sub	r18, r30
    1f70:	3f 0b       	sbc	r19, r31
    1f72:	24 17       	cp	r18, r20
    1f74:	35 07       	cpc	r19, r21
    1f76:	40 f4       	brcc	.+16     	; 0x1f88 <xTaskCheckForTimeOut+0x50>
    1f78:	fb 01       	movw	r30, r22
    1f7a:	42 1b       	sub	r20, r18
    1f7c:	53 0b       	sbc	r21, r19
    1f7e:	51 83       	std	Z+1, r21	; 0x01
    1f80:	40 83       	st	Z, r20
    1f82:	cf df       	rcall	.-98     	; 0x1f22 <vTaskInternalSetTimeOutState>
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	08 c0       	rjmp	.+16     	; 0x1f98 <xTaskCheckForTimeOut+0x60>
    1f88:	fb 01       	movw	r30, r22
    1f8a:	11 82       	std	Z+1, r1	; 0x01
    1f8c:	10 82       	st	Z, r1
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	03 c0       	rjmp	.+6      	; 0x1f98 <xTaskCheckForTimeOut+0x60>
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	01 c0       	rjmp	.+2      	; 0x1f98 <xTaskCheckForTimeOut+0x60>
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	0f 90       	pop	r0
    1f9a:	0f be       	out	0x3f, r0	; 63
    1f9c:	df 91       	pop	r29
    1f9e:	cf 91       	pop	r28
    1fa0:	08 95       	ret

00001fa2 <vTaskMissedYield>:
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	80 93 9b 07 	sts	0x079B, r24	; 0x80079b <xYieldPending>
    1fa8:	08 95       	ret

00001faa <xTaskGetCurrentTaskHandle>:
    1faa:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <pxCurrentTCB>
    1fae:	90 91 f9 07 	lds	r25, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>
    1fb2:	08 95       	ret

00001fb4 <xTaskGetSchedulerState>:
    1fb4:	80 91 9d 07 	lds	r24, 0x079D	; 0x80079d <xSchedulerRunning>
    1fb8:	88 23       	and	r24, r24
    1fba:	31 f0       	breq	.+12     	; 0x1fc8 <xTaskGetSchedulerState+0x14>
    1fbc:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <uxSchedulerSuspended>
    1fc0:	88 23       	and	r24, r24
    1fc2:	21 f0       	breq	.+8      	; 0x1fcc <xTaskGetSchedulerState+0x18>
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	08 95       	ret
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	08 95       	ret
    1fcc:	82 e0       	ldi	r24, 0x02	; 2
    1fce:	08 95       	ret

00001fd0 <xTaskPriorityDisinherit>:
    1fd0:	0f 93       	push	r16
    1fd2:	1f 93       	push	r17
    1fd4:	cf 93       	push	r28
    1fd6:	df 93       	push	r29
    1fd8:	fc 01       	movw	r30, r24
    1fda:	89 2b       	or	r24, r25
    1fdc:	79 f1       	breq	.+94     	; 0x203c <xTaskPriorityDisinherit+0x6c>
    1fde:	84 a1       	ldd	r24, Z+36	; 0x24
    1fe0:	81 50       	subi	r24, 0x01	; 1
    1fe2:	84 a3       	std	Z+36, r24	; 0x24
    1fe4:	26 89       	ldd	r18, Z+22	; 0x16
    1fe6:	93 a1       	ldd	r25, Z+35	; 0x23
    1fe8:	29 17       	cp	r18, r25
    1fea:	51 f1       	breq	.+84     	; 0x2040 <xTaskPriorityDisinherit+0x70>
    1fec:	81 11       	cpse	r24, r1
    1fee:	2a c0       	rjmp	.+84     	; 0x2044 <xTaskPriorityDisinherit+0x74>
    1ff0:	ef 01       	movw	r28, r30
    1ff2:	8f 01       	movw	r16, r30
    1ff4:	0e 5f       	subi	r16, 0xFE	; 254
    1ff6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff8:	c8 01       	movw	r24, r16
    1ffa:	0e 94 0a 05 	call	0xa14	; 0xa14 <uxListRemove>
    1ffe:	8b a1       	ldd	r24, Y+35	; 0x23
    2000:	8e 8b       	std	Y+22, r24	; 0x16
    2002:	24 e0       	ldi	r18, 0x04	; 4
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	28 1b       	sub	r18, r24
    2008:	31 09       	sbc	r19, r1
    200a:	3d 87       	std	Y+13, r19	; 0x0d
    200c:	2c 87       	std	Y+12, r18	; 0x0c
    200e:	90 91 9e 07 	lds	r25, 0x079E	; 0x80079e <uxTopReadyPriority>
    2012:	98 17       	cp	r25, r24
    2014:	10 f4       	brcc	.+4      	; 0x201a <xTaskPriorityDisinherit+0x4a>
    2016:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <uxTopReadyPriority>
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	9c 01       	movw	r18, r24
    201e:	22 0f       	add	r18, r18
    2020:	33 1f       	adc	r19, r19
    2022:	22 0f       	add	r18, r18
    2024:	33 1f       	adc	r19, r19
    2026:	22 0f       	add	r18, r18
    2028:	33 1f       	adc	r19, r19
    202a:	82 0f       	add	r24, r18
    202c:	93 1f       	adc	r25, r19
    202e:	b8 01       	movw	r22, r16
    2030:	8c 52       	subi	r24, 0x2C	; 44
    2032:	98 4f       	sbci	r25, 0xF8	; 248
    2034:	0e 94 b8 04 	call	0x970	; 0x970 <vListInsertEnd>
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	05 c0       	rjmp	.+10     	; 0x2046 <xTaskPriorityDisinherit+0x76>
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	03 c0       	rjmp	.+6      	; 0x2046 <xTaskPriorityDisinherit+0x76>
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	01 c0       	rjmp	.+2      	; 0x2046 <xTaskPriorityDisinherit+0x76>
    2044:	80 e0       	ldi	r24, 0x00	; 0
    2046:	df 91       	pop	r29
    2048:	cf 91       	pop	r28
    204a:	1f 91       	pop	r17
    204c:	0f 91       	pop	r16
    204e:	08 95       	ret

00002050 <xTaskNotifyWait>:
    2050:	4f 92       	push	r4
    2052:	5f 92       	push	r5
    2054:	6f 92       	push	r6
    2056:	7f 92       	push	r7
    2058:	8f 92       	push	r8
    205a:	9f 92       	push	r9
    205c:	af 92       	push	r10
    205e:	bf 92       	push	r11
    2060:	ef 92       	push	r14
    2062:	ff 92       	push	r15
    2064:	0f 93       	push	r16
    2066:	1f 93       	push	r17
    2068:	49 01       	movw	r8, r18
    206a:	5a 01       	movw	r10, r20
    206c:	0f b6       	in	r0, 0x3f	; 63
    206e:	f8 94       	cli
    2070:	0f 92       	push	r0
    2072:	e0 91 f8 07 	lds	r30, 0x07F8	; 0x8007f8 <pxCurrentTCB>
    2076:	f0 91 f9 07 	lds	r31, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>
    207a:	23 a5       	ldd	r18, Z+43	; 0x2b
    207c:	22 30       	cpi	r18, 0x02	; 2
    207e:	21 f1       	breq	.+72     	; 0x20c8 <xTaskNotifyWait+0x78>
    2080:	e0 91 f8 07 	lds	r30, 0x07F8	; 0x8007f8 <pxCurrentTCB>
    2084:	f0 91 f9 07 	lds	r31, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>
    2088:	47 a0       	ldd	r4, Z+39	; 0x27
    208a:	50 a4       	ldd	r5, Z+40	; 0x28
    208c:	61 a4       	ldd	r6, Z+41	; 0x29
    208e:	72 a4       	ldd	r7, Z+42	; 0x2a
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	80 95       	com	r24
    2096:	90 95       	com	r25
    2098:	a0 95       	com	r26
    209a:	b0 95       	com	r27
    209c:	84 21       	and	r24, r4
    209e:	95 21       	and	r25, r5
    20a0:	a6 21       	and	r26, r6
    20a2:	b7 21       	and	r27, r7
    20a4:	87 a3       	std	Z+39, r24	; 0x27
    20a6:	90 a7       	std	Z+40, r25	; 0x28
    20a8:	a1 a7       	std	Z+41, r26	; 0x29
    20aa:	b2 a7       	std	Z+42, r27	; 0x2a
    20ac:	e0 91 f8 07 	lds	r30, 0x07F8	; 0x8007f8 <pxCurrentTCB>
    20b0:	f0 91 f9 07 	lds	r31, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	83 a7       	std	Z+43, r24	; 0x2b
    20b8:	e1 14       	cp	r14, r1
    20ba:	f1 04       	cpc	r15, r1
    20bc:	29 f0       	breq	.+10     	; 0x20c8 <xTaskNotifyWait+0x78>
    20be:	61 e0       	ldi	r22, 0x01	; 1
    20c0:	c7 01       	movw	r24, r14
    20c2:	42 db       	rcall	.-2428   	; 0x1748 <prvAddCurrentTaskToDelayedList>
    20c4:	0e 94 df 05 	call	0xbbe	; 0xbbe <vPortYield>
    20c8:	0f 90       	pop	r0
    20ca:	0f be       	out	0x3f, r0	; 63
    20cc:	0f b6       	in	r0, 0x3f	; 63
    20ce:	f8 94       	cli
    20d0:	0f 92       	push	r0
    20d2:	01 15       	cp	r16, r1
    20d4:	11 05       	cpc	r17, r1
    20d6:	69 f0       	breq	.+26     	; 0x20f2 <xTaskNotifyWait+0xa2>
    20d8:	e0 91 f8 07 	lds	r30, 0x07F8	; 0x8007f8 <pxCurrentTCB>
    20dc:	f0 91 f9 07 	lds	r31, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>
    20e0:	87 a1       	ldd	r24, Z+39	; 0x27
    20e2:	90 a5       	ldd	r25, Z+40	; 0x28
    20e4:	a1 a5       	ldd	r26, Z+41	; 0x29
    20e6:	b2 a5       	ldd	r27, Z+42	; 0x2a
    20e8:	f8 01       	movw	r30, r16
    20ea:	80 83       	st	Z, r24
    20ec:	91 83       	std	Z+1, r25	; 0x01
    20ee:	a2 83       	std	Z+2, r26	; 0x02
    20f0:	b3 83       	std	Z+3, r27	; 0x03
    20f2:	e0 91 f8 07 	lds	r30, 0x07F8	; 0x8007f8 <pxCurrentTCB>
    20f6:	f0 91 f9 07 	lds	r31, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>
    20fa:	83 a5       	ldd	r24, Z+43	; 0x2b
    20fc:	82 30       	cpi	r24, 0x02	; 2
    20fe:	b1 f4       	brne	.+44     	; 0x212c <xTaskNotifyWait+0xdc>
    2100:	e0 91 f8 07 	lds	r30, 0x07F8	; 0x8007f8 <pxCurrentTCB>
    2104:	f0 91 f9 07 	lds	r31, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>
    2108:	87 a1       	ldd	r24, Z+39	; 0x27
    210a:	90 a5       	ldd	r25, Z+40	; 0x28
    210c:	a1 a5       	ldd	r26, Z+41	; 0x29
    210e:	b2 a5       	ldd	r27, Z+42	; 0x2a
    2110:	80 94       	com	r8
    2112:	90 94       	com	r9
    2114:	a0 94       	com	r10
    2116:	b0 94       	com	r11
    2118:	88 22       	and	r8, r24
    211a:	99 22       	and	r9, r25
    211c:	aa 22       	and	r10, r26
    211e:	bb 22       	and	r11, r27
    2120:	87 a2       	std	Z+39, r8	; 0x27
    2122:	90 a6       	std	Z+40, r9	; 0x28
    2124:	a1 a6       	std	Z+41, r10	; 0x29
    2126:	b2 a6       	std	Z+42, r11	; 0x2a
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	01 c0       	rjmp	.+2      	; 0x212e <xTaskNotifyWait+0xde>
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	e0 91 f8 07 	lds	r30, 0x07F8	; 0x8007f8 <pxCurrentTCB>
    2132:	f0 91 f9 07 	lds	r31, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>
    2136:	13 a6       	std	Z+43, r1	; 0x2b
    2138:	0f 90       	pop	r0
    213a:	0f be       	out	0x3f, r0	; 63
    213c:	1f 91       	pop	r17
    213e:	0f 91       	pop	r16
    2140:	ff 90       	pop	r15
    2142:	ef 90       	pop	r14
    2144:	bf 90       	pop	r11
    2146:	af 90       	pop	r10
    2148:	9f 90       	pop	r9
    214a:	8f 90       	pop	r8
    214c:	7f 90       	pop	r7
    214e:	6f 90       	pop	r6
    2150:	5f 90       	pop	r5
    2152:	4f 90       	pop	r4
    2154:	08 95       	ret

00002156 <xTaskGenericNotify>:
    2156:	0f 93       	push	r16
    2158:	1f 93       	push	r17
    215a:	cf 93       	push	r28
    215c:	df 93       	push	r29
    215e:	fc 01       	movw	r30, r24
    2160:	0f b6       	in	r0, 0x3f	; 63
    2162:	f8 94       	cli
    2164:	0f 92       	push	r0
    2166:	01 15       	cp	r16, r1
    2168:	11 05       	cpc	r17, r1
    216a:	49 f0       	breq	.+18     	; 0x217e <xTaskGenericNotify+0x28>
    216c:	87 a1       	ldd	r24, Z+39	; 0x27
    216e:	90 a5       	ldd	r25, Z+40	; 0x28
    2170:	a1 a5       	ldd	r26, Z+41	; 0x29
    2172:	b2 a5       	ldd	r27, Z+42	; 0x2a
    2174:	e8 01       	movw	r28, r16
    2176:	88 83       	st	Y, r24
    2178:	99 83       	std	Y+1, r25	; 0x01
    217a:	aa 83       	std	Y+2, r26	; 0x02
    217c:	bb 83       	std	Y+3, r27	; 0x03
    217e:	83 a5       	ldd	r24, Z+43	; 0x2b
    2180:	92 e0       	ldi	r25, 0x02	; 2
    2182:	93 a7       	std	Z+43, r25	; 0x2b
    2184:	22 30       	cpi	r18, 0x02	; 2
    2186:	b1 f0       	breq	.+44     	; 0x21b4 <xTaskGenericNotify+0x5e>
    2188:	18 f4       	brcc	.+6      	; 0x2190 <xTaskGenericNotify+0x3a>
    218a:	21 30       	cpi	r18, 0x01	; 1
    218c:	31 f0       	breq	.+12     	; 0x219a <xTaskGenericNotify+0x44>
    218e:	2a c0       	rjmp	.+84     	; 0x21e4 <xTaskGenericNotify+0x8e>
    2190:	23 30       	cpi	r18, 0x03	; 3
    2192:	e9 f0       	breq	.+58     	; 0x21ce <xTaskGenericNotify+0x78>
    2194:	24 30       	cpi	r18, 0x04	; 4
    2196:	01 f1       	breq	.+64     	; 0x21d8 <xTaskGenericNotify+0x82>
    2198:	25 c0       	rjmp	.+74     	; 0x21e4 <xTaskGenericNotify+0x8e>
    219a:	07 a1       	ldd	r16, Z+39	; 0x27
    219c:	10 a5       	ldd	r17, Z+40	; 0x28
    219e:	21 a5       	ldd	r18, Z+41	; 0x29
    21a0:	32 a5       	ldd	r19, Z+42	; 0x2a
    21a2:	40 2b       	or	r20, r16
    21a4:	51 2b       	or	r21, r17
    21a6:	62 2b       	or	r22, r18
    21a8:	73 2b       	or	r23, r19
    21aa:	47 a3       	std	Z+39, r20	; 0x27
    21ac:	50 a7       	std	Z+40, r21	; 0x28
    21ae:	61 a7       	std	Z+41, r22	; 0x29
    21b0:	72 a7       	std	Z+42, r23	; 0x2a
    21b2:	18 c0       	rjmp	.+48     	; 0x21e4 <xTaskGenericNotify+0x8e>
    21b4:	47 a1       	ldd	r20, Z+39	; 0x27
    21b6:	50 a5       	ldd	r21, Z+40	; 0x28
    21b8:	61 a5       	ldd	r22, Z+41	; 0x29
    21ba:	72 a5       	ldd	r23, Z+42	; 0x2a
    21bc:	4f 5f       	subi	r20, 0xFF	; 255
    21be:	5f 4f       	sbci	r21, 0xFF	; 255
    21c0:	6f 4f       	sbci	r22, 0xFF	; 255
    21c2:	7f 4f       	sbci	r23, 0xFF	; 255
    21c4:	47 a3       	std	Z+39, r20	; 0x27
    21c6:	50 a7       	std	Z+40, r21	; 0x28
    21c8:	61 a7       	std	Z+41, r22	; 0x29
    21ca:	72 a7       	std	Z+42, r23	; 0x2a
    21cc:	0b c0       	rjmp	.+22     	; 0x21e4 <xTaskGenericNotify+0x8e>
    21ce:	47 a3       	std	Z+39, r20	; 0x27
    21d0:	50 a7       	std	Z+40, r21	; 0x28
    21d2:	61 a7       	std	Z+41, r22	; 0x29
    21d4:	72 a7       	std	Z+42, r23	; 0x2a
    21d6:	06 c0       	rjmp	.+12     	; 0x21e4 <xTaskGenericNotify+0x8e>
    21d8:	82 30       	cpi	r24, 0x02	; 2
    21da:	79 f1       	breq	.+94     	; 0x223a <__stack+0x3b>
    21dc:	47 a3       	std	Z+39, r20	; 0x27
    21de:	50 a7       	std	Z+40, r21	; 0x28
    21e0:	61 a7       	std	Z+41, r22	; 0x29
    21e2:	72 a7       	std	Z+42, r23	; 0x2a
    21e4:	81 30       	cpi	r24, 0x01	; 1
    21e6:	59 f5       	brne	.+86     	; 0x223e <__stack+0x3f>
    21e8:	ef 01       	movw	r28, r30
    21ea:	8f 01       	movw	r16, r30
    21ec:	0e 5f       	subi	r16, 0xFE	; 254
    21ee:	1f 4f       	sbci	r17, 0xFF	; 255
    21f0:	c8 01       	movw	r24, r16
    21f2:	0e 94 0a 05 	call	0xa14	; 0xa14 <uxListRemove>
    21f6:	8e 89       	ldd	r24, Y+22	; 0x16
    21f8:	90 91 9e 07 	lds	r25, 0x079E	; 0x80079e <uxTopReadyPriority>
    21fc:	98 17       	cp	r25, r24
    21fe:	10 f4       	brcc	.+4      	; 0x2204 <__stack+0x5>
    2200:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <uxTopReadyPriority>
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	9c 01       	movw	r18, r24
    2208:	22 0f       	add	r18, r18
    220a:	33 1f       	adc	r19, r19
    220c:	22 0f       	add	r18, r18
    220e:	33 1f       	adc	r19, r19
    2210:	22 0f       	add	r18, r18
    2212:	33 1f       	adc	r19, r19
    2214:	82 0f       	add	r24, r18
    2216:	93 1f       	adc	r25, r19
    2218:	b8 01       	movw	r22, r16
    221a:	8c 52       	subi	r24, 0x2C	; 44
    221c:	98 4f       	sbci	r25, 0xF8	; 248
    221e:	0e 94 b8 04 	call	0x970	; 0x970 <vListInsertEnd>
    2222:	e0 91 f8 07 	lds	r30, 0x07F8	; 0x8007f8 <pxCurrentTCB>
    2226:	f0 91 f9 07 	lds	r31, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>
    222a:	9e 89       	ldd	r25, Y+22	; 0x16
    222c:	86 89       	ldd	r24, Z+22	; 0x16
    222e:	89 17       	cp	r24, r25
    2230:	40 f4       	brcc	.+16     	; 0x2242 <__stack+0x43>
    2232:	0e 94 df 05 	call	0xbbe	; 0xbbe <vPortYield>
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	05 c0       	rjmp	.+10     	; 0x2244 <__stack+0x45>
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	03 c0       	rjmp	.+6      	; 0x2244 <__stack+0x45>
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	01 c0       	rjmp	.+2      	; 0x2244 <__stack+0x45>
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	0f 90       	pop	r0
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	df 91       	pop	r29
    224a:	cf 91       	pop	r28
    224c:	1f 91       	pop	r17
    224e:	0f 91       	pop	r16
    2250:	08 95       	ret

00002252 <xTaskGenericNotifyFromISR>:
    2252:	ef 92       	push	r14
    2254:	ff 92       	push	r15
    2256:	0f 93       	push	r16
    2258:	1f 93       	push	r17
    225a:	cf 93       	push	r28
    225c:	df 93       	push	r29
    225e:	fc 01       	movw	r30, r24
    2260:	01 15       	cp	r16, r1
    2262:	11 05       	cpc	r17, r1
    2264:	49 f0       	breq	.+18     	; 0x2278 <xTaskGenericNotifyFromISR+0x26>
    2266:	87 a1       	ldd	r24, Z+39	; 0x27
    2268:	90 a5       	ldd	r25, Z+40	; 0x28
    226a:	a1 a5       	ldd	r26, Z+41	; 0x29
    226c:	b2 a5       	ldd	r27, Z+42	; 0x2a
    226e:	e8 01       	movw	r28, r16
    2270:	88 83       	st	Y, r24
    2272:	99 83       	std	Y+1, r25	; 0x01
    2274:	aa 83       	std	Y+2, r26	; 0x02
    2276:	bb 83       	std	Y+3, r27	; 0x03
    2278:	83 a5       	ldd	r24, Z+43	; 0x2b
    227a:	92 e0       	ldi	r25, 0x02	; 2
    227c:	93 a7       	std	Z+43, r25	; 0x2b
    227e:	22 30       	cpi	r18, 0x02	; 2
    2280:	b1 f0       	breq	.+44     	; 0x22ae <xTaskGenericNotifyFromISR+0x5c>
    2282:	18 f4       	brcc	.+6      	; 0x228a <xTaskGenericNotifyFromISR+0x38>
    2284:	21 30       	cpi	r18, 0x01	; 1
    2286:	31 f0       	breq	.+12     	; 0x2294 <xTaskGenericNotifyFromISR+0x42>
    2288:	2b c0       	rjmp	.+86     	; 0x22e0 <xTaskGenericNotifyFromISR+0x8e>
    228a:	23 30       	cpi	r18, 0x03	; 3
    228c:	e9 f0       	breq	.+58     	; 0x22c8 <xTaskGenericNotifyFromISR+0x76>
    228e:	24 30       	cpi	r18, 0x04	; 4
    2290:	01 f1       	breq	.+64     	; 0x22d2 <xTaskGenericNotifyFromISR+0x80>
    2292:	26 c0       	rjmp	.+76     	; 0x22e0 <xTaskGenericNotifyFromISR+0x8e>
    2294:	07 a1       	ldd	r16, Z+39	; 0x27
    2296:	10 a5       	ldd	r17, Z+40	; 0x28
    2298:	21 a5       	ldd	r18, Z+41	; 0x29
    229a:	32 a5       	ldd	r19, Z+42	; 0x2a
    229c:	40 2b       	or	r20, r16
    229e:	51 2b       	or	r21, r17
    22a0:	62 2b       	or	r22, r18
    22a2:	73 2b       	or	r23, r19
    22a4:	47 a3       	std	Z+39, r20	; 0x27
    22a6:	50 a7       	std	Z+40, r21	; 0x28
    22a8:	61 a7       	std	Z+41, r22	; 0x29
    22aa:	72 a7       	std	Z+42, r23	; 0x2a
    22ac:	19 c0       	rjmp	.+50     	; 0x22e0 <xTaskGenericNotifyFromISR+0x8e>
    22ae:	47 a1       	ldd	r20, Z+39	; 0x27
    22b0:	50 a5       	ldd	r21, Z+40	; 0x28
    22b2:	61 a5       	ldd	r22, Z+41	; 0x29
    22b4:	72 a5       	ldd	r23, Z+42	; 0x2a
    22b6:	4f 5f       	subi	r20, 0xFF	; 255
    22b8:	5f 4f       	sbci	r21, 0xFF	; 255
    22ba:	6f 4f       	sbci	r22, 0xFF	; 255
    22bc:	7f 4f       	sbci	r23, 0xFF	; 255
    22be:	47 a3       	std	Z+39, r20	; 0x27
    22c0:	50 a7       	std	Z+40, r21	; 0x28
    22c2:	61 a7       	std	Z+41, r22	; 0x29
    22c4:	72 a7       	std	Z+42, r23	; 0x2a
    22c6:	0c c0       	rjmp	.+24     	; 0x22e0 <xTaskGenericNotifyFromISR+0x8e>
    22c8:	47 a3       	std	Z+39, r20	; 0x27
    22ca:	50 a7       	std	Z+40, r21	; 0x28
    22cc:	61 a7       	std	Z+41, r22	; 0x29
    22ce:	72 a7       	std	Z+42, r23	; 0x2a
    22d0:	07 c0       	rjmp	.+14     	; 0x22e0 <xTaskGenericNotifyFromISR+0x8e>
    22d2:	82 30       	cpi	r24, 0x02	; 2
    22d4:	09 f4       	brne	.+2      	; 0x22d8 <xTaskGenericNotifyFromISR+0x86>
    22d6:	41 c0       	rjmp	.+130    	; 0x235a <xTaskGenericNotifyFromISR+0x108>
    22d8:	47 a3       	std	Z+39, r20	; 0x27
    22da:	50 a7       	std	Z+40, r21	; 0x28
    22dc:	61 a7       	std	Z+41, r22	; 0x29
    22de:	72 a7       	std	Z+42, r23	; 0x2a
    22e0:	81 30       	cpi	r24, 0x01	; 1
    22e2:	e9 f5       	brne	.+122    	; 0x235e <xTaskGenericNotifyFromISR+0x10c>
    22e4:	ef 01       	movw	r28, r30
    22e6:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <uxSchedulerSuspended>
    22ea:	81 11       	cpse	r24, r1
    22ec:	1d c0       	rjmp	.+58     	; 0x2328 <xTaskGenericNotifyFromISR+0xd6>
    22ee:	8f 01       	movw	r16, r30
    22f0:	0e 5f       	subi	r16, 0xFE	; 254
    22f2:	1f 4f       	sbci	r17, 0xFF	; 255
    22f4:	c8 01       	movw	r24, r16
    22f6:	0e 94 0a 05 	call	0xa14	; 0xa14 <uxListRemove>
    22fa:	8e 89       	ldd	r24, Y+22	; 0x16
    22fc:	90 91 9e 07 	lds	r25, 0x079E	; 0x80079e <uxTopReadyPriority>
    2300:	98 17       	cp	r25, r24
    2302:	10 f4       	brcc	.+4      	; 0x2308 <xTaskGenericNotifyFromISR+0xb6>
    2304:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <uxTopReadyPriority>
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	9c 01       	movw	r18, r24
    230c:	22 0f       	add	r18, r18
    230e:	33 1f       	adc	r19, r19
    2310:	22 0f       	add	r18, r18
    2312:	33 1f       	adc	r19, r19
    2314:	22 0f       	add	r18, r18
    2316:	33 1f       	adc	r19, r19
    2318:	82 0f       	add	r24, r18
    231a:	93 1f       	adc	r25, r19
    231c:	b8 01       	movw	r22, r16
    231e:	8c 52       	subi	r24, 0x2C	; 44
    2320:	98 4f       	sbci	r25, 0xF8	; 248
    2322:	0e 94 b8 04 	call	0x970	; 0x970 <vListInsertEnd>
    2326:	07 c0       	rjmp	.+14     	; 0x2336 <xTaskGenericNotifyFromISR+0xe4>
    2328:	bf 01       	movw	r22, r30
    232a:	64 5f       	subi	r22, 0xF4	; 244
    232c:	7f 4f       	sbci	r23, 0xFF	; 255
    232e:	85 eb       	ldi	r24, 0xB5	; 181
    2330:	97 e0       	ldi	r25, 0x07	; 7
    2332:	0e 94 b8 04 	call	0x970	; 0x970 <vListInsertEnd>
    2336:	e0 91 f8 07 	lds	r30, 0x07F8	; 0x8007f8 <pxCurrentTCB>
    233a:	f0 91 f9 07 	lds	r31, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>
    233e:	9e 89       	ldd	r25, Y+22	; 0x16
    2340:	86 89       	ldd	r24, Z+22	; 0x16
    2342:	89 17       	cp	r24, r25
    2344:	70 f4       	brcc	.+28     	; 0x2362 <xTaskGenericNotifyFromISR+0x110>
    2346:	e1 14       	cp	r14, r1
    2348:	f1 04       	cpc	r15, r1
    234a:	19 f0       	breq	.+6      	; 0x2352 <xTaskGenericNotifyFromISR+0x100>
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	f7 01       	movw	r30, r14
    2350:	80 83       	st	Z, r24
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	80 93 9b 07 	sts	0x079B, r24	; 0x80079b <xYieldPending>
    2358:	05 c0       	rjmp	.+10     	; 0x2364 <xTaskGenericNotifyFromISR+0x112>
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	03 c0       	rjmp	.+6      	; 0x2364 <xTaskGenericNotifyFromISR+0x112>
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	01 c0       	rjmp	.+2      	; 0x2364 <xTaskGenericNotifyFromISR+0x112>
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	df 91       	pop	r29
    2366:	cf 91       	pop	r28
    2368:	1f 91       	pop	r17
    236a:	0f 91       	pop	r16
    236c:	ff 90       	pop	r15
    236e:	ef 90       	pop	r14
    2370:	08 95       	ret

00002372 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2372:	00 97       	sbiw	r24, 0x00	; 0
    2374:	21 f4       	brne	.+8      	; 0x237e <xTaskNotifyStateClear+0xc>
    2376:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <pxCurrentTCB>
    237a:	90 91 f9 07 	lds	r25, 0x07F9	; 0x8007f9 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    237e:	0f b6       	in	r0, 0x3f	; 63
    2380:	f8 94       	cli
    2382:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    2384:	fc 01       	movw	r30, r24
    2386:	23 a5       	ldd	r18, Z+43	; 0x2b
    2388:	22 30       	cpi	r18, 0x02	; 2
    238a:	19 f4       	brne	.+6      	; 0x2392 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    238c:	13 a6       	std	Z+43, r1	; 0x2b
                xReturn = pdPASS;
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	01 c0       	rjmp	.+2      	; 0x2394 <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    2392:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2394:	0f 90       	pop	r0
    2396:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2398:	08 95       	ret

0000239a <prvInsertTimerInActiveList>:
    239a:	fc 01       	movw	r30, r24
    239c:	73 83       	std	Z+3, r23	; 0x03
    239e:	62 83       	std	Z+2, r22	; 0x02
    23a0:	91 87       	std	Z+9, r25	; 0x09
    23a2:	80 87       	std	Z+8, r24	; 0x08
    23a4:	46 17       	cp	r20, r22
    23a6:	57 07       	cpc	r21, r23
    23a8:	90 f0       	brcs	.+36     	; 0x23ce <prvInsertTimerInActiveList+0x34>
    23aa:	42 1b       	sub	r20, r18
    23ac:	53 0b       	sbc	r21, r19
    23ae:	84 85       	ldd	r24, Z+12	; 0x0c
    23b0:	95 85       	ldd	r25, Z+13	; 0x0d
    23b2:	48 17       	cp	r20, r24
    23b4:	59 07       	cpc	r21, r25
    23b6:	e0 f4       	brcc	.+56     	; 0x23f0 <prvInsertTimerInActiveList+0x56>
    23b8:	bf 01       	movw	r22, r30
    23ba:	6e 5f       	subi	r22, 0xFE	; 254
    23bc:	7f 4f       	sbci	r23, 0xFF	; 255
    23be:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <pxOverflowTimerList>
    23c2:	90 91 01 08 	lds	r25, 0x0801	; 0x800801 <pxOverflowTimerList+0x1>
    23c6:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <vListInsert>
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	08 95       	ret
    23ce:	42 17       	cp	r20, r18
    23d0:	53 07       	cpc	r21, r19
    23d2:	18 f4       	brcc	.+6      	; 0x23da <prvInsertTimerInActiveList+0x40>
    23d4:	62 17       	cp	r22, r18
    23d6:	73 07       	cpc	r23, r19
    23d8:	68 f4       	brcc	.+26     	; 0x23f4 <prvInsertTimerInActiveList+0x5a>
    23da:	bf 01       	movw	r22, r30
    23dc:	6e 5f       	subi	r22, 0xFE	; 254
    23de:	7f 4f       	sbci	r23, 0xFF	; 255
    23e0:	80 91 02 08 	lds	r24, 0x0802	; 0x800802 <pxCurrentTimerList>
    23e4:	90 91 03 08 	lds	r25, 0x0803	; 0x800803 <pxCurrentTimerList+0x1>
    23e8:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <vListInsert>
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	08 95       	ret
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	08 95       	ret
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	08 95       	ret

000023f8 <prvCheckForValidListAndQueue>:
    23f8:	0f b6       	in	r0, 0x3f	; 63
    23fa:	f8 94       	cli
    23fc:	0f 92       	push	r0
    23fe:	80 91 fe 07 	lds	r24, 0x07FE	; 0x8007fe <xTimerQueue>
    2402:	90 91 ff 07 	lds	r25, 0x07FF	; 0x8007ff <xTimerQueue+0x1>
    2406:	89 2b       	or	r24, r25
    2408:	e9 f4       	brne	.+58     	; 0x2444 <prvCheckForValidListAndQueue+0x4c>
    240a:	8d e0       	ldi	r24, 0x0D	; 13
    240c:	98 e0       	ldi	r25, 0x08	; 8
    240e:	0e 94 a6 04 	call	0x94c	; 0x94c <vListInitialise>
    2412:	84 e0       	ldi	r24, 0x04	; 4
    2414:	98 e0       	ldi	r25, 0x08	; 8
    2416:	0e 94 a6 04 	call	0x94c	; 0x94c <vListInitialise>
    241a:	8d e0       	ldi	r24, 0x0D	; 13
    241c:	98 e0       	ldi	r25, 0x08	; 8
    241e:	90 93 03 08 	sts	0x0803, r25	; 0x800803 <pxCurrentTimerList+0x1>
    2422:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <pxCurrentTimerList>
    2426:	84 e0       	ldi	r24, 0x04	; 4
    2428:	98 e0       	ldi	r25, 0x08	; 8
    242a:	90 93 01 08 	sts	0x0801, r25	; 0x800801 <pxOverflowTimerList+0x1>
    242e:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <pxOverflowTimerList>
    2432:	40 e0       	ldi	r20, 0x00	; 0
    2434:	65 e0       	ldi	r22, 0x05	; 5
    2436:	8a e0       	ldi	r24, 0x0A	; 10
    2438:	0e 94 b8 07 	call	0xf70	; 0xf70 <xQueueGenericCreate>
    243c:	90 93 ff 07 	sts	0x07FF, r25	; 0x8007ff <xTimerQueue+0x1>
    2440:	80 93 fe 07 	sts	0x07FE, r24	; 0x8007fe <xTimerQueue>
    2444:	0f 90       	pop	r0
    2446:	0f be       	out	0x3f, r0	; 63
    2448:	08 95       	ret

0000244a <xTimerCreateTimerTask>:
    244a:	ef 92       	push	r14
    244c:	ff 92       	push	r15
    244e:	0f 93       	push	r16
    2450:	d3 df       	rcall	.-90     	; 0x23f8 <prvCheckForValidListAndQueue>
    2452:	80 91 fe 07 	lds	r24, 0x07FE	; 0x8007fe <xTimerQueue>
    2456:	90 91 ff 07 	lds	r25, 0x07FF	; 0x8007ff <xTimerQueue+0x1>
    245a:	89 2b       	or	r24, r25
    245c:	89 f0       	breq	.+34     	; 0x2480 <xTimerCreateTimerTask+0x36>
    245e:	0f 2e       	mov	r0, r31
    2460:	fc ef       	ldi	r31, 0xFC	; 252
    2462:	ef 2e       	mov	r14, r31
    2464:	f7 e0       	ldi	r31, 0x07	; 7
    2466:	ff 2e       	mov	r15, r31
    2468:	f0 2d       	mov	r31, r0
    246a:	06 e0       	ldi	r16, 0x06	; 6
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	45 e5       	ldi	r20, 0x55	; 85
    2472:	50 e0       	ldi	r21, 0x00	; 0
    2474:	63 e9       	ldi	r22, 0x93	; 147
    2476:	74 e0       	ldi	r23, 0x04	; 4
    2478:	83 e0       	ldi	r24, 0x03	; 3
    247a:	91 e0       	ldi	r25, 0x01	; 1
    247c:	b9 d9       	rcall	.-3214   	; 0x17f0 <xTaskCreate>
    247e:	01 c0       	rjmp	.+2      	; 0x2482 <xTimerCreateTimerTask+0x38>
    2480:	80 e0       	ldi	r24, 0x00	; 0
    2482:	0f 91       	pop	r16
    2484:	ff 90       	pop	r15
    2486:	ef 90       	pop	r14
    2488:	08 95       	ret

0000248a <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    248a:	0f 93       	push	r16
    248c:	1f 93       	push	r17
    248e:	cf 93       	push	r28
    2490:	df 93       	push	r29
    2492:	00 d0       	rcall	.+0      	; 0x2494 <xTimerGenericCommand+0xa>
    2494:	1f 92       	push	r1
    2496:	1f 92       	push	r1
    2498:	cd b7       	in	r28, 0x3d	; 61
    249a:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    249c:	e0 91 fe 07 	lds	r30, 0x07FE	; 0x8007fe <xTimerQueue>
    24a0:	f0 91 ff 07 	lds	r31, 0x07FF	; 0x8007ff <xTimerQueue+0x1>
    24a4:	30 97       	sbiw	r30, 0x00	; 0
    24a6:	69 f1       	breq	.+90     	; 0x2502 <xTimerGenericCommand+0x78>
    24a8:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    24aa:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    24ac:	5b 83       	std	Y+3, r21	; 0x03
    24ae:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    24b0:	9d 83       	std	Y+5, r25	; 0x05
    24b2:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    24b4:	66 30       	cpi	r22, 0x06	; 6
    24b6:	e4 f4       	brge	.+56     	; 0x24f0 <xTimerGenericCommand+0x66>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    24b8:	7d dd       	rcall	.-1286   	; 0x1fb4 <xTaskGetSchedulerState>
    24ba:	82 30       	cpi	r24, 0x02	; 2
    24bc:	61 f4       	brne	.+24     	; 0x24d6 <xTimerGenericCommand+0x4c>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	a8 01       	movw	r20, r16
    24c2:	be 01       	movw	r22, r28
    24c4:	6f 5f       	subi	r22, 0xFF	; 255
    24c6:	7f 4f       	sbci	r23, 0xFF	; 255
    24c8:	80 91 fe 07 	lds	r24, 0x07FE	; 0x8007fe <xTimerQueue>
    24cc:	90 91 ff 07 	lds	r25, 0x07FF	; 0x8007ff <xTimerQueue+0x1>
    24d0:	0e 94 e6 07 	call	0xfcc	; 0xfcc <xQueueGenericSend>
    24d4:	17 c0       	rjmp	.+46     	; 0x2504 <xTimerGenericCommand+0x7a>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	40 e0       	ldi	r20, 0x00	; 0
    24da:	50 e0       	ldi	r21, 0x00	; 0
    24dc:	be 01       	movw	r22, r28
    24de:	6f 5f       	subi	r22, 0xFF	; 255
    24e0:	7f 4f       	sbci	r23, 0xFF	; 255
    24e2:	80 91 fe 07 	lds	r24, 0x07FE	; 0x8007fe <xTimerQueue>
    24e6:	90 91 ff 07 	lds	r25, 0x07FF	; 0x8007ff <xTimerQueue+0x1>
    24ea:	0e 94 e6 07 	call	0xfcc	; 0xfcc <xQueueGenericSend>
    24ee:	0a c0       	rjmp	.+20     	; 0x2504 <xTimerGenericCommand+0x7a>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	ad 01       	movw	r20, r26
    24f4:	be 01       	movw	r22, r28
    24f6:	6f 5f       	subi	r22, 0xFF	; 255
    24f8:	7f 4f       	sbci	r23, 0xFF	; 255
    24fa:	cf 01       	movw	r24, r30
    24fc:	0e 94 78 08 	call	0x10f0	; 0x10f0 <xQueueGenericSendFromISR>
    2500:	01 c0       	rjmp	.+2      	; 0x2504 <xTimerGenericCommand+0x7a>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    2502:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    2504:	0f 90       	pop	r0
    2506:	0f 90       	pop	r0
    2508:	0f 90       	pop	r0
    250a:	0f 90       	pop	r0
    250c:	0f 90       	pop	r0
    250e:	df 91       	pop	r29
    2510:	cf 91       	pop	r28
    2512:	1f 91       	pop	r17
    2514:	0f 91       	pop	r16
    2516:	08 95       	ret

00002518 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    2518:	af 92       	push	r10
    251a:	bf 92       	push	r11
    251c:	cf 92       	push	r12
    251e:	df 92       	push	r13
    2520:	ef 92       	push	r14
    2522:	ff 92       	push	r15
    2524:	0f 93       	push	r16
    2526:	1f 93       	push	r17
    2528:	cf 93       	push	r28
    252a:	df 93       	push	r29
    252c:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    252e:	a8 da       	rcall	.-2736   	; 0x1a80 <xTaskGetTickCount>
    2530:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    2532:	80 91 fa 07 	lds	r24, 0x07FA	; 0x8007fa <xLastTime.2432>
    2536:	90 91 fb 07 	lds	r25, 0x07FB	; 0x8007fb <xLastTime.2432+0x1>
    253a:	e8 16       	cp	r14, r24
    253c:	f9 06       	cpc	r15, r25
    253e:	08 f0       	brcs	.+2      	; 0x2542 <prvSampleTimeNow+0x2a>
    2540:	47 c0       	rjmp	.+142    	; 0x25d0 <prvSampleTimeNow+0xb8>
    2542:	2f c0       	rjmp	.+94     	; 0x25a2 <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2544:	05 80       	ldd	r0, Z+5	; 0x05
    2546:	f6 81       	ldd	r31, Z+6	; 0x06
    2548:	e0 2d       	mov	r30, r0
    254a:	a0 80       	ld	r10, Z
    254c:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    254e:	c6 81       	ldd	r28, Z+6	; 0x06
    2550:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2552:	8e 01       	movw	r16, r28
    2554:	0e 5f       	subi	r16, 0xFE	; 254
    2556:	1f 4f       	sbci	r17, 0xFF	; 255
    2558:	c8 01       	movw	r24, r16
    255a:	0e 94 0a 05 	call	0xa14	; 0xa14 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    255e:	e8 89       	ldd	r30, Y+16	; 0x10
    2560:	f9 89       	ldd	r31, Y+17	; 0x11
    2562:	ce 01       	movw	r24, r28
    2564:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2566:	8b 89       	ldd	r24, Y+19	; 0x13
    2568:	82 ff       	sbrs	r24, 2
    256a:	1b c0       	rjmp	.+54     	; 0x25a2 <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    256c:	8c 85       	ldd	r24, Y+12	; 0x0c
    256e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2570:	8a 0d       	add	r24, r10
    2572:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    2574:	a8 16       	cp	r10, r24
    2576:	b9 06       	cpc	r11, r25
    2578:	60 f4       	brcc	.+24     	; 0x2592 <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    257a:	9b 83       	std	Y+3, r25	; 0x03
    257c:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    257e:	d9 87       	std	Y+9, r29	; 0x09
    2580:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2582:	b8 01       	movw	r22, r16
    2584:	80 91 02 08 	lds	r24, 0x0802	; 0x800802 <pxCurrentTimerList>
    2588:	90 91 03 08 	lds	r25, 0x0803	; 0x800803 <pxCurrentTimerList+0x1>
    258c:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <vListInsert>
    2590:	08 c0       	rjmp	.+16     	; 0x25a2 <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2592:	00 e0       	ldi	r16, 0x00	; 0
    2594:	10 e0       	ldi	r17, 0x00	; 0
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	a5 01       	movw	r20, r10
    259c:	60 e0       	ldi	r22, 0x00	; 0
    259e:	ce 01       	movw	r24, r28
    25a0:	74 df       	rcall	.-280    	; 0x248a <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    25a2:	e0 91 02 08 	lds	r30, 0x0802	; 0x800802 <pxCurrentTimerList>
    25a6:	f0 91 03 08 	lds	r31, 0x0803	; 0x800803 <pxCurrentTimerList+0x1>
    25aa:	80 81       	ld	r24, Z
    25ac:	81 11       	cpse	r24, r1
    25ae:	ca cf       	rjmp	.-108    	; 0x2544 <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    25b0:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <pxOverflowTimerList>
    25b4:	90 91 01 08 	lds	r25, 0x0801	; 0x800801 <pxOverflowTimerList+0x1>
    25b8:	90 93 03 08 	sts	0x0803, r25	; 0x800803 <pxCurrentTimerList+0x1>
    25bc:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    25c0:	f0 93 01 08 	sts	0x0801, r31	; 0x800801 <pxOverflowTimerList+0x1>
    25c4:	e0 93 00 08 	sts	0x0800, r30	; 0x800800 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	f6 01       	movw	r30, r12
    25cc:	80 83       	st	Z, r24
    25ce:	02 c0       	rjmp	.+4      	; 0x25d4 <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    25d0:	f6 01       	movw	r30, r12
    25d2:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    25d4:	f0 92 fb 07 	sts	0x07FB, r15	; 0x8007fb <xLastTime.2432+0x1>
    25d8:	e0 92 fa 07 	sts	0x07FA, r14	; 0x8007fa <xLastTime.2432>

    return xTimeNow;
}
    25dc:	c7 01       	movw	r24, r14
    25de:	df 91       	pop	r29
    25e0:	cf 91       	pop	r28
    25e2:	1f 91       	pop	r17
    25e4:	0f 91       	pop	r16
    25e6:	ff 90       	pop	r15
    25e8:	ef 90       	pop	r14
    25ea:	df 90       	pop	r13
    25ec:	cf 90       	pop	r12
    25ee:	bf 90       	pop	r11
    25f0:	af 90       	pop	r10
    25f2:	08 95       	ret

000025f4 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    25f4:	08 95       	ret

000025f6 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    25f6:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    25f8:	2f 9a       	sbi	0x05, 7	; 5
    25fa:	2f ef       	ldi	r18, 0xFF	; 255
    25fc:	80 e7       	ldi	r24, 0x70	; 112
    25fe:	92 e0       	ldi	r25, 0x02	; 2
    2600:	21 50       	subi	r18, 0x01	; 1
    2602:	80 40       	sbci	r24, 0x00	; 0
    2604:	90 40       	sbci	r25, 0x00	; 0
    2606:	e1 f7       	brne	.-8      	; 0x2600 <vApplicationMallocFailedHook+0xa>
    2608:	00 c0       	rjmp	.+0      	; 0x260a <vApplicationMallocFailedHook+0x14>
    260a:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    260c:	1f 9a       	sbi	0x03, 7	; 3
    260e:	f5 cf       	rjmp	.-22     	; 0x25fa <vApplicationMallocFailedHook+0x4>

00002610 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2610:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2612:	2f 9a       	sbi	0x05, 7	; 5
    2614:	2f ef       	ldi	r18, 0xFF	; 255
    2616:	87 ea       	ldi	r24, 0xA7	; 167
    2618:	91 e6       	ldi	r25, 0x61	; 97
    261a:	21 50       	subi	r18, 0x01	; 1
    261c:	80 40       	sbci	r24, 0x00	; 0
    261e:	90 40       	sbci	r25, 0x00	; 0
    2620:	e1 f7       	brne	.-8      	; 0x261a <vApplicationStackOverflowHook+0xa>
    2622:	00 c0       	rjmp	.+0      	; 0x2624 <vApplicationStackOverflowHook+0x14>
    2624:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    2626:	1f 9a       	sbi	0x03, 7	; 3
    2628:	f5 cf       	rjmp	.-22     	; 0x2614 <vApplicationStackOverflowHook+0x4>

0000262a <__fixsfsi>:
    262a:	04 d0       	rcall	.+8      	; 0x2634 <__fixunssfsi>
    262c:	68 94       	set
    262e:	b1 11       	cpse	r27, r1
    2630:	50 c0       	rjmp	.+160    	; 0x26d2 <__fp_szero>
    2632:	08 95       	ret

00002634 <__fixunssfsi>:
    2634:	33 d0       	rcall	.+102    	; 0x269c <__fp_splitA>
    2636:	88 f0       	brcs	.+34     	; 0x265a <__fixunssfsi+0x26>
    2638:	9f 57       	subi	r25, 0x7F	; 127
    263a:	90 f0       	brcs	.+36     	; 0x2660 <__fixunssfsi+0x2c>
    263c:	b9 2f       	mov	r27, r25
    263e:	99 27       	eor	r25, r25
    2640:	b7 51       	subi	r27, 0x17	; 23
    2642:	a0 f0       	brcs	.+40     	; 0x266c <__fixunssfsi+0x38>
    2644:	d1 f0       	breq	.+52     	; 0x267a <__fixunssfsi+0x46>
    2646:	66 0f       	add	r22, r22
    2648:	77 1f       	adc	r23, r23
    264a:	88 1f       	adc	r24, r24
    264c:	99 1f       	adc	r25, r25
    264e:	1a f0       	brmi	.+6      	; 0x2656 <__fixunssfsi+0x22>
    2650:	ba 95       	dec	r27
    2652:	c9 f7       	brne	.-14     	; 0x2646 <__fixunssfsi+0x12>
    2654:	12 c0       	rjmp	.+36     	; 0x267a <__fixunssfsi+0x46>
    2656:	b1 30       	cpi	r27, 0x01	; 1
    2658:	81 f0       	breq	.+32     	; 0x267a <__fixunssfsi+0x46>
    265a:	3a d0       	rcall	.+116    	; 0x26d0 <__fp_zero>
    265c:	b1 e0       	ldi	r27, 0x01	; 1
    265e:	08 95       	ret
    2660:	37 c0       	rjmp	.+110    	; 0x26d0 <__fp_zero>
    2662:	67 2f       	mov	r22, r23
    2664:	78 2f       	mov	r23, r24
    2666:	88 27       	eor	r24, r24
    2668:	b8 5f       	subi	r27, 0xF8	; 248
    266a:	39 f0       	breq	.+14     	; 0x267a <__fixunssfsi+0x46>
    266c:	b9 3f       	cpi	r27, 0xF9	; 249
    266e:	cc f3       	brlt	.-14     	; 0x2662 <__fixunssfsi+0x2e>
    2670:	86 95       	lsr	r24
    2672:	77 95       	ror	r23
    2674:	67 95       	ror	r22
    2676:	b3 95       	inc	r27
    2678:	d9 f7       	brne	.-10     	; 0x2670 <__fixunssfsi+0x3c>
    267a:	3e f4       	brtc	.+14     	; 0x268a <__fixunssfsi+0x56>
    267c:	90 95       	com	r25
    267e:	80 95       	com	r24
    2680:	70 95       	com	r23
    2682:	61 95       	neg	r22
    2684:	7f 4f       	sbci	r23, 0xFF	; 255
    2686:	8f 4f       	sbci	r24, 0xFF	; 255
    2688:	9f 4f       	sbci	r25, 0xFF	; 255
    268a:	08 95       	ret

0000268c <__fp_split3>:
    268c:	57 fd       	sbrc	r21, 7
    268e:	90 58       	subi	r25, 0x80	; 128
    2690:	44 0f       	add	r20, r20
    2692:	55 1f       	adc	r21, r21
    2694:	59 f0       	breq	.+22     	; 0x26ac <__fp_splitA+0x10>
    2696:	5f 3f       	cpi	r21, 0xFF	; 255
    2698:	71 f0       	breq	.+28     	; 0x26b6 <__fp_splitA+0x1a>
    269a:	47 95       	ror	r20

0000269c <__fp_splitA>:
    269c:	88 0f       	add	r24, r24
    269e:	97 fb       	bst	r25, 7
    26a0:	99 1f       	adc	r25, r25
    26a2:	61 f0       	breq	.+24     	; 0x26bc <__fp_splitA+0x20>
    26a4:	9f 3f       	cpi	r25, 0xFF	; 255
    26a6:	79 f0       	breq	.+30     	; 0x26c6 <__fp_splitA+0x2a>
    26a8:	87 95       	ror	r24
    26aa:	08 95       	ret
    26ac:	12 16       	cp	r1, r18
    26ae:	13 06       	cpc	r1, r19
    26b0:	14 06       	cpc	r1, r20
    26b2:	55 1f       	adc	r21, r21
    26b4:	f2 cf       	rjmp	.-28     	; 0x269a <__fp_split3+0xe>
    26b6:	46 95       	lsr	r20
    26b8:	f1 df       	rcall	.-30     	; 0x269c <__fp_splitA>
    26ba:	08 c0       	rjmp	.+16     	; 0x26cc <__fp_splitA+0x30>
    26bc:	16 16       	cp	r1, r22
    26be:	17 06       	cpc	r1, r23
    26c0:	18 06       	cpc	r1, r24
    26c2:	99 1f       	adc	r25, r25
    26c4:	f1 cf       	rjmp	.-30     	; 0x26a8 <__fp_splitA+0xc>
    26c6:	86 95       	lsr	r24
    26c8:	71 05       	cpc	r23, r1
    26ca:	61 05       	cpc	r22, r1
    26cc:	08 94       	sec
    26ce:	08 95       	ret

000026d0 <__fp_zero>:
    26d0:	e8 94       	clt

000026d2 <__fp_szero>:
    26d2:	bb 27       	eor	r27, r27
    26d4:	66 27       	eor	r22, r22
    26d6:	77 27       	eor	r23, r23
    26d8:	cb 01       	movw	r24, r22
    26da:	97 f9       	bld	r25, 7
    26dc:	08 95       	ret

000026de <usart_getchar>:
    26de:	cf 93       	push	r28
    26e0:	df 93       	push	r29
    26e2:	1f 92       	push	r1
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
    26e8:	be 01       	movw	r22, r28
    26ea:	6f 5f       	subi	r22, 0xFF	; 255
    26ec:	7f 4f       	sbci	r23, 0xFF	; 255
    26ee:	80 91 16 08 	lds	r24, 0x0816	; 0x800816 <_com_serial_instance>
    26f2:	90 91 17 08 	lds	r25, 0x0817	; 0x800817 <_com_serial_instance+0x1>
    26f6:	4e d1       	rcall	.+668    	; 0x2994 <serial_get_byte>
    26f8:	81 11       	cpse	r24, r1
    26fa:	f6 cf       	rjmp	.-20     	; 0x26e8 <usart_getchar+0xa>
    26fc:	89 81       	ldd	r24, Y+1	; 0x01
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	0f 90       	pop	r0
    2702:	df 91       	pop	r29
    2704:	cf 91       	pop	r28
    2706:	08 95       	ret

00002708 <usart_putchar>:
    2708:	68 2f       	mov	r22, r24
    270a:	80 91 16 08 	lds	r24, 0x0816	; 0x800816 <_com_serial_instance>
    270e:	90 91 17 08 	lds	r25, 0x0817	; 0x800817 <_com_serial_instance+0x1>
    2712:	cb d0       	rcall	.+406    	; 0x28aa <serial_send_byte>
    2714:	80 e0       	ldi	r24, 0x00	; 0
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	08 95       	ret

0000271a <stdioCreate>:
    271a:	8f 92       	push	r8
    271c:	9f 92       	push	r9
    271e:	af 92       	push	r10
    2720:	cf 92       	push	r12
    2722:	ef 92       	push	r14
    2724:	0f 93       	push	r16
    2726:	81 2c       	mov	r8, r1
    2728:	91 2c       	mov	r9, r1
    272a:	68 94       	set
    272c:	aa 24       	eor	r10, r10
    272e:	a7 f8       	bld	r10, 7
    2730:	68 94       	set
    2732:	cc 24       	eor	r12, r12
    2734:	c7 f8       	bld	r12, 7
    2736:	e1 2c       	mov	r14, r1
    2738:	00 e0       	ldi	r16, 0x00	; 0
    273a:	23 e0       	ldi	r18, 0x03	; 3
    273c:	40 e0       	ldi	r20, 0x00	; 0
    273e:	51 ee       	ldi	r21, 0xE1	; 225
    2740:	60 e0       	ldi	r22, 0x00	; 0
    2742:	70 e0       	ldi	r23, 0x00	; 0
    2744:	13 d0       	rcall	.+38     	; 0x276c <serial_new_instance>
    2746:	90 93 17 08 	sts	0x0817, r25	; 0x800817 <_com_serial_instance+0x1>
    274a:	80 93 16 08 	sts	0x0816, r24	; 0x800816 <_com_serial_instance>
    274e:	eb ed       	ldi	r30, 0xDB	; 219
    2750:	f9 e0       	ldi	r31, 0x09	; 9
    2752:	86 e0       	ldi	r24, 0x06	; 6
    2754:	92 e0       	ldi	r25, 0x02	; 2
    2756:	91 83       	std	Z+1, r25	; 0x01
    2758:	80 83       	st	Z, r24
    275a:	93 83       	std	Z+3, r25	; 0x03
    275c:	82 83       	std	Z+2, r24	; 0x02
    275e:	0f 91       	pop	r16
    2760:	ef 90       	pop	r14
    2762:	cf 90       	pop	r12
    2764:	af 90       	pop	r10
    2766:	9f 90       	pop	r9
    2768:	8f 90       	pop	r8
    276a:	08 95       	ret

0000276c <serial_new_instance>:
    276c:	2f 92       	push	r2
    276e:	3f 92       	push	r3
    2770:	4f 92       	push	r4
    2772:	5f 92       	push	r5
    2774:	6f 92       	push	r6
    2776:	7f 92       	push	r7
    2778:	8f 92       	push	r8
    277a:	9f 92       	push	r9
    277c:	af 92       	push	r10
    277e:	cf 92       	push	r12
    2780:	ef 92       	push	r14
    2782:	ff 92       	push	r15
    2784:	0f 93       	push	r16
    2786:	1f 93       	push	r17
    2788:	cf 93       	push	r28
    278a:	df 93       	push	r29
    278c:	cd b7       	in	r28, 0x3d	; 61
    278e:	de b7       	in	r29, 0x3e	; 62
    2790:	f8 2e       	mov	r15, r24
    2792:	2a 01       	movw	r4, r20
    2794:	3b 01       	movw	r6, r22
    2796:	88 e0       	ldi	r24, 0x08	; 8
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <malloc>
    279e:	8c 01       	movw	r16, r24
    27a0:	8f 2d       	mov	r24, r15
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	88 0f       	add	r24, r24
    27a6:	99 1f       	adc	r25, r25
    27a8:	fc 01       	movw	r30, r24
    27aa:	e8 5e       	subi	r30, 0xE8	; 232
    27ac:	f7 4f       	sbci	r31, 0xF7	; 247
    27ae:	11 83       	std	Z+1, r17	; 0x01
    27b0:	00 83       	st	Z, r16
    27b2:	fc 01       	movw	r30, r24
    27b4:	ec 5e       	subi	r30, 0xEC	; 236
    27b6:	fd 4f       	sbci	r31, 0xFD	; 253
    27b8:	80 81       	ld	r24, Z
    27ba:	91 81       	ldd	r25, Z+1	; 0x01
    27bc:	d8 01       	movw	r26, r16
    27be:	8d 93       	st	X+, r24
    27c0:	9c 93       	st	X, r25
    27c2:	6c 2d       	mov	r22, r12
    27c4:	70 e0       	ldi	r23, 0x00	; 0
    27c6:	84 e0       	ldi	r24, 0x04	; 4
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	0e 94 41 22 	call	0x4482	; 0x4482 <calloc>
    27ce:	1c 01       	movw	r2, r24
    27d0:	61 e0       	ldi	r22, 0x01	; 1
    27d2:	70 e0       	ldi	r23, 0x00	; 0
    27d4:	86 e0       	ldi	r24, 0x06	; 6
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	0e 94 41 22 	call	0x4482	; 0x4482 <calloc>
    27dc:	7c 01       	movw	r14, r24
    27de:	4c 2d       	mov	r20, r12
    27e0:	b1 01       	movw	r22, r2
    27e2:	4c d3       	rcall	.+1688   	; 0x2e7c <fifo_init>
    27e4:	f8 01       	movw	r30, r16
    27e6:	f5 82       	std	Z+5, r15	; 0x05
    27e8:	e4 82       	std	Z+4, r14	; 0x04
    27ea:	6a 2d       	mov	r22, r10
    27ec:	70 e0       	ldi	r23, 0x00	; 0
    27ee:	84 e0       	ldi	r24, 0x04	; 4
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	0e 94 41 22 	call	0x4482	; 0x4482 <calloc>
    27f6:	1c 01       	movw	r2, r24
    27f8:	61 e0       	ldi	r22, 0x01	; 1
    27fa:	70 e0       	ldi	r23, 0x00	; 0
    27fc:	86 e0       	ldi	r24, 0x06	; 6
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	0e 94 41 22 	call	0x4482	; 0x4482 <calloc>
    2804:	7c 01       	movw	r14, r24
    2806:	4a 2d       	mov	r20, r10
    2808:	b1 01       	movw	r22, r2
    280a:	38 d3       	rcall	.+1648   	; 0x2e7c <fifo_init>
    280c:	d8 01       	movw	r26, r16
    280e:	13 96       	adiw	r26, 0x03	; 3
    2810:	fc 92       	st	X, r15
    2812:	ee 92       	st	-X, r14
    2814:	12 97       	sbiw	r26, 0x02	; 2
    2816:	17 96       	adiw	r26, 0x07	; 7
    2818:	9c 92       	st	X, r9
    281a:	8e 92       	st	-X, r8
    281c:	16 97       	sbiw	r26, 0x06	; 6
    281e:	ff b6       	in	r15, 0x3f	; 63
    2820:	f8 94       	cli
    2822:	ed 91       	ld	r30, X+
    2824:	fc 91       	ld	r31, X
    2826:	11 97       	sbiw	r26, 0x01	; 1
    2828:	36 97       	sbiw	r30, 0x06	; 6
    282a:	80 81       	ld	r24, Z
    282c:	82 60       	ori	r24, 0x02	; 2
    282e:	80 83       	st	Z, r24
    2830:	8d 90       	ld	r8, X+
    2832:	9c 90       	ld	r9, X
    2834:	c3 01       	movw	r24, r6
    2836:	b2 01       	movw	r22, r4
    2838:	0e 94 24 21 	call	0x4248	; 0x4248 <__floatunsisf>
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	40 e0       	ldi	r20, 0x00	; 0
    2842:	51 e4       	ldi	r21, 0x41	; 65
    2844:	0e 94 8d 21 	call	0x431a	; 0x431a <__mulsf3>
    2848:	9b 01       	movw	r18, r22
    284a:	ac 01       	movw	r20, r24
    284c:	60 e0       	ldi	r22, 0x00	; 0
    284e:	74 e2       	ldi	r23, 0x24	; 36
    2850:	84 e7       	ldi	r24, 0x74	; 116
    2852:	9b e4       	ldi	r25, 0x4B	; 75
    2854:	0e 94 b9 20 	call	0x4172	; 0x4172 <__divsf3>
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	40 e8       	ldi	r20, 0x80	; 128
    285e:	5f e3       	ldi	r21, 0x3F	; 63
    2860:	0e 94 52 20 	call	0x40a4	; 0x40a4 <__subsf3>
    2864:	e7 de       	rcall	.-562    	; 0x2634 <__fixunssfsi>
    2866:	f4 01       	movw	r30, r8
    2868:	32 97       	sbiw	r30, 0x02	; 2
    286a:	60 83       	st	Z, r22
    286c:	d8 01       	movw	r26, r16
    286e:	ed 91       	ld	r30, X+
    2870:	fc 91       	ld	r31, X
    2872:	11 97       	sbiw	r26, 0x01	; 1
    2874:	35 97       	sbiw	r30, 0x05	; 5
    2876:	88 e9       	ldi	r24, 0x98	; 152
    2878:	80 83       	st	Z, r24
    287a:	ed 91       	ld	r30, X+
    287c:	fc 91       	ld	r31, X
    287e:	34 97       	sbiw	r30, 0x04	; 4
    2880:	86 e0       	ldi	r24, 0x06	; 6
    2882:	80 83       	st	Z, r24
    2884:	ff be       	out	0x3f, r15	; 63
    2886:	c8 01       	movw	r24, r16
    2888:	df 91       	pop	r29
    288a:	cf 91       	pop	r28
    288c:	1f 91       	pop	r17
    288e:	0f 91       	pop	r16
    2890:	ff 90       	pop	r15
    2892:	ef 90       	pop	r14
    2894:	cf 90       	pop	r12
    2896:	af 90       	pop	r10
    2898:	9f 90       	pop	r9
    289a:	8f 90       	pop	r8
    289c:	7f 90       	pop	r7
    289e:	6f 90       	pop	r6
    28a0:	5f 90       	pop	r5
    28a2:	4f 90       	pop	r4
    28a4:	3f 90       	pop	r3
    28a6:	2f 90       	pop	r2
    28a8:	08 95       	ret

000028aa <serial_send_byte>:
    28aa:	cf 93       	push	r28
    28ac:	df 93       	push	r29
    28ae:	ec 01       	movw	r28, r24
    28b0:	ea 81       	ldd	r30, Y+2	; 0x02
    28b2:	fb 81       	ldd	r31, Y+3	; 0x03
    28b4:	93 81       	ldd	r25, Z+3	; 0x03
    28b6:	82 81       	ldd	r24, Z+2	; 0x02
    28b8:	25 81       	ldd	r18, Z+5	; 0x05
    28ba:	98 1b       	sub	r25, r24
    28bc:	92 23       	and	r25, r18
    28be:	84 81       	ldd	r24, Z+4	; 0x04
    28c0:	98 17       	cp	r25, r24
    28c2:	a1 f0       	breq	.+40     	; 0x28ec <serial_send_byte+0x42>
    28c4:	93 81       	ldd	r25, Z+3	; 0x03
    28c6:	26 95       	lsr	r18
    28c8:	29 23       	and	r18, r25
    28ca:	a0 81       	ld	r26, Z
    28cc:	b1 81       	ldd	r27, Z+1	; 0x01
    28ce:	a2 0f       	add	r26, r18
    28d0:	b1 1d       	adc	r27, r1
    28d2:	6c 93       	st	X, r22
    28d4:	9f 5f       	subi	r25, 0xFF	; 255
    28d6:	25 81       	ldd	r18, Z+5	; 0x05
    28d8:	92 23       	and	r25, r18
    28da:	93 83       	std	Z+3, r25	; 0x03
    28dc:	e8 81       	ld	r30, Y
    28de:	f9 81       	ldd	r31, Y+1	; 0x01
    28e0:	35 97       	sbiw	r30, 0x05	; 5
    28e2:	80 81       	ld	r24, Z
    28e4:	80 62       	ori	r24, 0x20	; 32
    28e6:	80 83       	st	Z, r24
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	01 c0       	rjmp	.+2      	; 0x28ee <serial_send_byte+0x44>
    28ec:	82 e0       	ldi	r24, 0x02	; 2
    28ee:	df 91       	pop	r29
    28f0:	cf 91       	pop	r28
    28f2:	08 95       	ret

000028f4 <serial_send_bytes>:
    28f4:	ef 92       	push	r14
    28f6:	ff 92       	push	r15
    28f8:	0f 93       	push	r16
    28fa:	1f 93       	push	r17
    28fc:	cf 93       	push	r28
    28fe:	df 93       	push	r29
    2900:	7c 01       	movw	r14, r24
    2902:	dc 01       	movw	r26, r24
    2904:	12 96       	adiw	r26, 0x02	; 2
    2906:	ed 91       	ld	r30, X+
    2908:	fc 91       	ld	r31, X
    290a:	13 97       	sbiw	r26, 0x03	; 3
    290c:	93 81       	ldd	r25, Z+3	; 0x03
    290e:	82 81       	ldd	r24, Z+2	; 0x02
    2910:	98 1b       	sub	r25, r24
    2912:	85 81       	ldd	r24, Z+5	; 0x05
    2914:	98 23       	and	r25, r24
    2916:	84 81       	ldd	r24, Z+4	; 0x04
    2918:	89 1b       	sub	r24, r25
    291a:	86 17       	cp	r24, r22
    291c:	98 f1       	brcs	.+102    	; 0x2984 <serial_send_bytes+0x90>
    291e:	66 23       	and	r22, r22
    2920:	41 f1       	breq	.+80     	; 0x2972 <serial_send_bytes+0x7e>
    2922:	84 2f       	mov	r24, r20
    2924:	95 2f       	mov	r25, r21
    2926:	dc 01       	movw	r26, r24
    2928:	61 50       	subi	r22, 0x01	; 1
    292a:	46 2f       	mov	r20, r22
    292c:	50 e0       	ldi	r21, 0x00	; 0
    292e:	4f 5f       	subi	r20, 0xFF	; 255
    2930:	5f 4f       	sbci	r21, 0xFF	; 255
    2932:	48 0f       	add	r20, r24
    2934:	59 1f       	adc	r21, r25
    2936:	e7 01       	movw	r28, r14
    2938:	ea 81       	ldd	r30, Y+2	; 0x02
    293a:	fb 81       	ldd	r31, Y+3	; 0x03
    293c:	93 81       	ldd	r25, Z+3	; 0x03
    293e:	82 81       	ldd	r24, Z+2	; 0x02
    2940:	25 81       	ldd	r18, Z+5	; 0x05
    2942:	98 1b       	sub	r25, r24
    2944:	92 23       	and	r25, r18
    2946:	84 81       	ldd	r24, Z+4	; 0x04
    2948:	98 17       	cp	r25, r24
    294a:	79 f0       	breq	.+30     	; 0x296a <serial_send_bytes+0x76>
    294c:	8c 91       	ld	r24, X
    294e:	93 81       	ldd	r25, Z+3	; 0x03
    2950:	26 95       	lsr	r18
    2952:	29 23       	and	r18, r25
    2954:	60 81       	ld	r22, Z
    2956:	71 81       	ldd	r23, Z+1	; 0x01
    2958:	8b 01       	movw	r16, r22
    295a:	02 0f       	add	r16, r18
    295c:	11 1d       	adc	r17, r1
    295e:	e8 01       	movw	r28, r16
    2960:	88 83       	st	Y, r24
    2962:	9f 5f       	subi	r25, 0xFF	; 255
    2964:	85 81       	ldd	r24, Z+5	; 0x05
    2966:	98 23       	and	r25, r24
    2968:	93 83       	std	Z+3, r25	; 0x03
    296a:	11 96       	adiw	r26, 0x01	; 1
    296c:	a4 17       	cp	r26, r20
    296e:	b5 07       	cpc	r27, r21
    2970:	11 f7       	brne	.-60     	; 0x2936 <serial_send_bytes+0x42>
    2972:	d7 01       	movw	r26, r14
    2974:	ed 91       	ld	r30, X+
    2976:	fc 91       	ld	r31, X
    2978:	35 97       	sbiw	r30, 0x05	; 5
    297a:	80 81       	ld	r24, Z
    297c:	80 62       	ori	r24, 0x20	; 32
    297e:	80 83       	st	Z, r24
    2980:	80 e0       	ldi	r24, 0x00	; 0
    2982:	01 c0       	rjmp	.+2      	; 0x2986 <serial_send_bytes+0x92>
    2984:	82 e0       	ldi	r24, 0x02	; 2
    2986:	df 91       	pop	r29
    2988:	cf 91       	pop	r28
    298a:	1f 91       	pop	r17
    298c:	0f 91       	pop	r16
    298e:	ff 90       	pop	r15
    2990:	ef 90       	pop	r14
    2992:	08 95       	ret

00002994 <serial_get_byte>:
    2994:	dc 01       	movw	r26, r24
    2996:	14 96       	adiw	r26, 0x04	; 4
    2998:	ed 91       	ld	r30, X+
    299a:	fc 91       	ld	r31, X
    299c:	15 97       	sbiw	r26, 0x05	; 5
    299e:	93 81       	ldd	r25, Z+3	; 0x03
    29a0:	82 81       	ldd	r24, Z+2	; 0x02
    29a2:	98 17       	cp	r25, r24
    29a4:	89 f0       	breq	.+34     	; 0x29c8 <serial_get_byte+0x34>
    29a6:	92 81       	ldd	r25, Z+2	; 0x02
    29a8:	85 81       	ldd	r24, Z+5	; 0x05
    29aa:	86 95       	lsr	r24
    29ac:	89 23       	and	r24, r25
    29ae:	a0 81       	ld	r26, Z
    29b0:	b1 81       	ldd	r27, Z+1	; 0x01
    29b2:	a8 0f       	add	r26, r24
    29b4:	b1 1d       	adc	r27, r1
    29b6:	8c 91       	ld	r24, X
    29b8:	db 01       	movw	r26, r22
    29ba:	8c 93       	st	X, r24
    29bc:	9f 5f       	subi	r25, 0xFF	; 255
    29be:	85 81       	ldd	r24, Z+5	; 0x05
    29c0:	98 23       	and	r25, r24
    29c2:	92 83       	std	Z+2, r25	; 0x02
    29c4:	80 e0       	ldi	r24, 0x00	; 0
    29c6:	08 95       	ret
    29c8:	83 e0       	ldi	r24, 0x03	; 3
    29ca:	08 95       	ret

000029cc <__vector_25>:
    29cc:	1f 92       	push	r1
    29ce:	0f 92       	push	r0
    29d0:	0f b6       	in	r0, 0x3f	; 63
    29d2:	0f 92       	push	r0
    29d4:	11 24       	eor	r1, r1
    29d6:	0b b6       	in	r0, 0x3b	; 59
    29d8:	0f 92       	push	r0
    29da:	2f 93       	push	r18
    29dc:	3f 93       	push	r19
    29de:	4f 93       	push	r20
    29e0:	5f 93       	push	r21
    29e2:	6f 93       	push	r22
    29e4:	7f 93       	push	r23
    29e6:	8f 93       	push	r24
    29e8:	9f 93       	push	r25
    29ea:	af 93       	push	r26
    29ec:	bf 93       	push	r27
    29ee:	cf 93       	push	r28
    29f0:	df 93       	push	r29
    29f2:	ef 93       	push	r30
    29f4:	ff 93       	push	r31
    29f6:	a0 91 18 08 	lds	r26, 0x0818	; 0x800818 <_ser_handle>
    29fa:	b0 91 19 08 	lds	r27, 0x0819	; 0x800819 <_ser_handle+0x1>
    29fe:	10 97       	sbiw	r26, 0x00	; 0
    2a00:	11 f1       	breq	.+68     	; 0x2a46 <__vector_25+0x7a>
    2a02:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    2a06:	14 96       	adiw	r26, 0x04	; 4
    2a08:	ed 91       	ld	r30, X+
    2a0a:	fc 91       	ld	r31, X
    2a0c:	15 97       	sbiw	r26, 0x05	; 5
    2a0e:	93 81       	ldd	r25, Z+3	; 0x03
    2a10:	82 81       	ldd	r24, Z+2	; 0x02
    2a12:	25 81       	ldd	r18, Z+5	; 0x05
    2a14:	98 1b       	sub	r25, r24
    2a16:	92 23       	and	r25, r18
    2a18:	84 81       	ldd	r24, Z+4	; 0x04
    2a1a:	98 17       	cp	r25, r24
    2a1c:	61 f0       	breq	.+24     	; 0x2a36 <__vector_25+0x6a>
    2a1e:	83 81       	ldd	r24, Z+3	; 0x03
    2a20:	26 95       	lsr	r18
    2a22:	28 23       	and	r18, r24
    2a24:	c0 81       	ld	r28, Z
    2a26:	d1 81       	ldd	r29, Z+1	; 0x01
    2a28:	c2 0f       	add	r28, r18
    2a2a:	d1 1d       	adc	r29, r1
    2a2c:	68 83       	st	Y, r22
    2a2e:	8f 5f       	subi	r24, 0xFF	; 255
    2a30:	95 81       	ldd	r25, Z+5	; 0x05
    2a32:	89 23       	and	r24, r25
    2a34:	83 83       	std	Z+3, r24	; 0x03
    2a36:	16 96       	adiw	r26, 0x06	; 6
    2a38:	ed 91       	ld	r30, X+
    2a3a:	fc 91       	ld	r31, X
    2a3c:	17 97       	sbiw	r26, 0x07	; 7
    2a3e:	30 97       	sbiw	r30, 0x00	; 0
    2a40:	11 f0       	breq	.+4      	; 0x2a46 <__vector_25+0x7a>
    2a42:	cd 01       	movw	r24, r26
    2a44:	19 95       	eicall
    2a46:	ff 91       	pop	r31
    2a48:	ef 91       	pop	r30
    2a4a:	df 91       	pop	r29
    2a4c:	cf 91       	pop	r28
    2a4e:	bf 91       	pop	r27
    2a50:	af 91       	pop	r26
    2a52:	9f 91       	pop	r25
    2a54:	8f 91       	pop	r24
    2a56:	7f 91       	pop	r23
    2a58:	6f 91       	pop	r22
    2a5a:	5f 91       	pop	r21
    2a5c:	4f 91       	pop	r20
    2a5e:	3f 91       	pop	r19
    2a60:	2f 91       	pop	r18
    2a62:	0f 90       	pop	r0
    2a64:	0b be       	out	0x3b, r0	; 59
    2a66:	0f 90       	pop	r0
    2a68:	0f be       	out	0x3f, r0	; 63
    2a6a:	0f 90       	pop	r0
    2a6c:	1f 90       	pop	r1
    2a6e:	18 95       	reti

00002a70 <__vector_26>:
    2a70:	1f 92       	push	r1
    2a72:	0f 92       	push	r0
    2a74:	0f b6       	in	r0, 0x3f	; 63
    2a76:	0f 92       	push	r0
    2a78:	11 24       	eor	r1, r1
    2a7a:	0b b6       	in	r0, 0x3b	; 59
    2a7c:	0f 92       	push	r0
    2a7e:	2f 93       	push	r18
    2a80:	8f 93       	push	r24
    2a82:	9f 93       	push	r25
    2a84:	af 93       	push	r26
    2a86:	bf 93       	push	r27
    2a88:	ef 93       	push	r30
    2a8a:	ff 93       	push	r31
    2a8c:	e0 91 18 08 	lds	r30, 0x0818	; 0x800818 <_ser_handle>
    2a90:	f0 91 19 08 	lds	r31, 0x0819	; 0x800819 <_ser_handle+0x1>
    2a94:	30 97       	sbiw	r30, 0x00	; 0
    2a96:	b9 f0       	breq	.+46     	; 0x2ac6 <__vector_26+0x56>
    2a98:	02 80       	ldd	r0, Z+2	; 0x02
    2a9a:	f3 81       	ldd	r31, Z+3	; 0x03
    2a9c:	e0 2d       	mov	r30, r0
    2a9e:	93 81       	ldd	r25, Z+3	; 0x03
    2aa0:	82 81       	ldd	r24, Z+2	; 0x02
    2aa2:	98 17       	cp	r25, r24
    2aa4:	b1 f0       	breq	.+44     	; 0x2ad2 <__vector_26+0x62>
    2aa6:	92 81       	ldd	r25, Z+2	; 0x02
    2aa8:	85 81       	ldd	r24, Z+5	; 0x05
    2aaa:	28 2f       	mov	r18, r24
    2aac:	26 95       	lsr	r18
    2aae:	29 23       	and	r18, r25
    2ab0:	a0 81       	ld	r26, Z
    2ab2:	b1 81       	ldd	r27, Z+1	; 0x01
    2ab4:	a2 0f       	add	r26, r18
    2ab6:	b1 1d       	adc	r27, r1
    2ab8:	2c 91       	ld	r18, X
    2aba:	9f 5f       	subi	r25, 0xFF	; 255
    2abc:	89 23       	and	r24, r25
    2abe:	82 83       	std	Z+2, r24	; 0x02
    2ac0:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    2ac4:	0b c0       	rjmp	.+22     	; 0x2adc <__vector_26+0x6c>
    2ac6:	e1 ec       	ldi	r30, 0xC1	; 193
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	80 81       	ld	r24, Z
    2acc:	8f 7d       	andi	r24, 0xDF	; 223
    2ace:	80 83       	st	Z, r24
    2ad0:	05 c0       	rjmp	.+10     	; 0x2adc <__vector_26+0x6c>
    2ad2:	e1 ec       	ldi	r30, 0xC1	; 193
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	80 81       	ld	r24, Z
    2ad8:	8f 7d       	andi	r24, 0xDF	; 223
    2ada:	80 83       	st	Z, r24
    2adc:	ff 91       	pop	r31
    2ade:	ef 91       	pop	r30
    2ae0:	bf 91       	pop	r27
    2ae2:	af 91       	pop	r26
    2ae4:	9f 91       	pop	r25
    2ae6:	8f 91       	pop	r24
    2ae8:	2f 91       	pop	r18
    2aea:	0f 90       	pop	r0
    2aec:	0b be       	out	0x3b, r0	; 59
    2aee:	0f 90       	pop	r0
    2af0:	0f be       	out	0x3f, r0	; 63
    2af2:	0f 90       	pop	r0
    2af4:	1f 90       	pop	r1
    2af6:	18 95       	reti

00002af8 <__vector_36>:
    2af8:	1f 92       	push	r1
    2afa:	0f 92       	push	r0
    2afc:	0f b6       	in	r0, 0x3f	; 63
    2afe:	0f 92       	push	r0
    2b00:	11 24       	eor	r1, r1
    2b02:	0b b6       	in	r0, 0x3b	; 59
    2b04:	0f 92       	push	r0
    2b06:	2f 93       	push	r18
    2b08:	3f 93       	push	r19
    2b0a:	4f 93       	push	r20
    2b0c:	5f 93       	push	r21
    2b0e:	6f 93       	push	r22
    2b10:	7f 93       	push	r23
    2b12:	8f 93       	push	r24
    2b14:	9f 93       	push	r25
    2b16:	af 93       	push	r26
    2b18:	bf 93       	push	r27
    2b1a:	cf 93       	push	r28
    2b1c:	df 93       	push	r29
    2b1e:	ef 93       	push	r30
    2b20:	ff 93       	push	r31
    2b22:	a0 91 1a 08 	lds	r26, 0x081A	; 0x80081a <_ser_handle+0x2>
    2b26:	b0 91 1b 08 	lds	r27, 0x081B	; 0x80081b <_ser_handle+0x3>
    2b2a:	10 97       	sbiw	r26, 0x00	; 0
    2b2c:	11 f1       	breq	.+68     	; 0x2b72 <__vector_36+0x7a>
    2b2e:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    2b32:	14 96       	adiw	r26, 0x04	; 4
    2b34:	ed 91       	ld	r30, X+
    2b36:	fc 91       	ld	r31, X
    2b38:	15 97       	sbiw	r26, 0x05	; 5
    2b3a:	93 81       	ldd	r25, Z+3	; 0x03
    2b3c:	82 81       	ldd	r24, Z+2	; 0x02
    2b3e:	25 81       	ldd	r18, Z+5	; 0x05
    2b40:	98 1b       	sub	r25, r24
    2b42:	92 23       	and	r25, r18
    2b44:	84 81       	ldd	r24, Z+4	; 0x04
    2b46:	98 17       	cp	r25, r24
    2b48:	61 f0       	breq	.+24     	; 0x2b62 <__vector_36+0x6a>
    2b4a:	83 81       	ldd	r24, Z+3	; 0x03
    2b4c:	26 95       	lsr	r18
    2b4e:	28 23       	and	r18, r24
    2b50:	c0 81       	ld	r28, Z
    2b52:	d1 81       	ldd	r29, Z+1	; 0x01
    2b54:	c2 0f       	add	r28, r18
    2b56:	d1 1d       	adc	r29, r1
    2b58:	68 83       	st	Y, r22
    2b5a:	8f 5f       	subi	r24, 0xFF	; 255
    2b5c:	95 81       	ldd	r25, Z+5	; 0x05
    2b5e:	89 23       	and	r24, r25
    2b60:	83 83       	std	Z+3, r24	; 0x03
    2b62:	16 96       	adiw	r26, 0x06	; 6
    2b64:	ed 91       	ld	r30, X+
    2b66:	fc 91       	ld	r31, X
    2b68:	17 97       	sbiw	r26, 0x07	; 7
    2b6a:	30 97       	sbiw	r30, 0x00	; 0
    2b6c:	11 f0       	breq	.+4      	; 0x2b72 <__vector_36+0x7a>
    2b6e:	cd 01       	movw	r24, r26
    2b70:	19 95       	eicall
    2b72:	ff 91       	pop	r31
    2b74:	ef 91       	pop	r30
    2b76:	df 91       	pop	r29
    2b78:	cf 91       	pop	r28
    2b7a:	bf 91       	pop	r27
    2b7c:	af 91       	pop	r26
    2b7e:	9f 91       	pop	r25
    2b80:	8f 91       	pop	r24
    2b82:	7f 91       	pop	r23
    2b84:	6f 91       	pop	r22
    2b86:	5f 91       	pop	r21
    2b88:	4f 91       	pop	r20
    2b8a:	3f 91       	pop	r19
    2b8c:	2f 91       	pop	r18
    2b8e:	0f 90       	pop	r0
    2b90:	0b be       	out	0x3b, r0	; 59
    2b92:	0f 90       	pop	r0
    2b94:	0f be       	out	0x3f, r0	; 63
    2b96:	0f 90       	pop	r0
    2b98:	1f 90       	pop	r1
    2b9a:	18 95       	reti

00002b9c <__vector_37>:
    2b9c:	1f 92       	push	r1
    2b9e:	0f 92       	push	r0
    2ba0:	0f b6       	in	r0, 0x3f	; 63
    2ba2:	0f 92       	push	r0
    2ba4:	11 24       	eor	r1, r1
    2ba6:	0b b6       	in	r0, 0x3b	; 59
    2ba8:	0f 92       	push	r0
    2baa:	2f 93       	push	r18
    2bac:	8f 93       	push	r24
    2bae:	9f 93       	push	r25
    2bb0:	af 93       	push	r26
    2bb2:	bf 93       	push	r27
    2bb4:	ef 93       	push	r30
    2bb6:	ff 93       	push	r31
    2bb8:	e0 91 1a 08 	lds	r30, 0x081A	; 0x80081a <_ser_handle+0x2>
    2bbc:	f0 91 1b 08 	lds	r31, 0x081B	; 0x80081b <_ser_handle+0x3>
    2bc0:	30 97       	sbiw	r30, 0x00	; 0
    2bc2:	b9 f0       	breq	.+46     	; 0x2bf2 <__vector_37+0x56>
    2bc4:	02 80       	ldd	r0, Z+2	; 0x02
    2bc6:	f3 81       	ldd	r31, Z+3	; 0x03
    2bc8:	e0 2d       	mov	r30, r0
    2bca:	93 81       	ldd	r25, Z+3	; 0x03
    2bcc:	82 81       	ldd	r24, Z+2	; 0x02
    2bce:	98 17       	cp	r25, r24
    2bd0:	b1 f0       	breq	.+44     	; 0x2bfe <__vector_37+0x62>
    2bd2:	92 81       	ldd	r25, Z+2	; 0x02
    2bd4:	85 81       	ldd	r24, Z+5	; 0x05
    2bd6:	28 2f       	mov	r18, r24
    2bd8:	26 95       	lsr	r18
    2bda:	29 23       	and	r18, r25
    2bdc:	a0 81       	ld	r26, Z
    2bde:	b1 81       	ldd	r27, Z+1	; 0x01
    2be0:	a2 0f       	add	r26, r18
    2be2:	b1 1d       	adc	r27, r1
    2be4:	2c 91       	ld	r18, X
    2be6:	9f 5f       	subi	r25, 0xFF	; 255
    2be8:	89 23       	and	r24, r25
    2bea:	82 83       	std	Z+2, r24	; 0x02
    2bec:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    2bf0:	0b c0       	rjmp	.+22     	; 0x2c08 <__vector_37+0x6c>
    2bf2:	e9 ec       	ldi	r30, 0xC9	; 201
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	80 81       	ld	r24, Z
    2bf8:	8f 7d       	andi	r24, 0xDF	; 223
    2bfa:	80 83       	st	Z, r24
    2bfc:	05 c0       	rjmp	.+10     	; 0x2c08 <__vector_37+0x6c>
    2bfe:	e9 ec       	ldi	r30, 0xC9	; 201
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	80 81       	ld	r24, Z
    2c04:	8f 7d       	andi	r24, 0xDF	; 223
    2c06:	80 83       	st	Z, r24
    2c08:	ff 91       	pop	r31
    2c0a:	ef 91       	pop	r30
    2c0c:	bf 91       	pop	r27
    2c0e:	af 91       	pop	r26
    2c10:	9f 91       	pop	r25
    2c12:	8f 91       	pop	r24
    2c14:	2f 91       	pop	r18
    2c16:	0f 90       	pop	r0
    2c18:	0b be       	out	0x3b, r0	; 59
    2c1a:	0f 90       	pop	r0
    2c1c:	0f be       	out	0x3f, r0	; 63
    2c1e:	0f 90       	pop	r0
    2c20:	1f 90       	pop	r1
    2c22:	18 95       	reti

00002c24 <__vector_51>:
    2c24:	1f 92       	push	r1
    2c26:	0f 92       	push	r0
    2c28:	0f b6       	in	r0, 0x3f	; 63
    2c2a:	0f 92       	push	r0
    2c2c:	11 24       	eor	r1, r1
    2c2e:	0b b6       	in	r0, 0x3b	; 59
    2c30:	0f 92       	push	r0
    2c32:	2f 93       	push	r18
    2c34:	3f 93       	push	r19
    2c36:	4f 93       	push	r20
    2c38:	5f 93       	push	r21
    2c3a:	6f 93       	push	r22
    2c3c:	7f 93       	push	r23
    2c3e:	8f 93       	push	r24
    2c40:	9f 93       	push	r25
    2c42:	af 93       	push	r26
    2c44:	bf 93       	push	r27
    2c46:	cf 93       	push	r28
    2c48:	df 93       	push	r29
    2c4a:	ef 93       	push	r30
    2c4c:	ff 93       	push	r31
    2c4e:	a0 91 1c 08 	lds	r26, 0x081C	; 0x80081c <_ser_handle+0x4>
    2c52:	b0 91 1d 08 	lds	r27, 0x081D	; 0x80081d <_ser_handle+0x5>
    2c56:	10 97       	sbiw	r26, 0x00	; 0
    2c58:	11 f1       	breq	.+68     	; 0x2c9e <__vector_51+0x7a>
    2c5a:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    2c5e:	14 96       	adiw	r26, 0x04	; 4
    2c60:	ed 91       	ld	r30, X+
    2c62:	fc 91       	ld	r31, X
    2c64:	15 97       	sbiw	r26, 0x05	; 5
    2c66:	93 81       	ldd	r25, Z+3	; 0x03
    2c68:	82 81       	ldd	r24, Z+2	; 0x02
    2c6a:	25 81       	ldd	r18, Z+5	; 0x05
    2c6c:	98 1b       	sub	r25, r24
    2c6e:	92 23       	and	r25, r18
    2c70:	84 81       	ldd	r24, Z+4	; 0x04
    2c72:	98 17       	cp	r25, r24
    2c74:	61 f0       	breq	.+24     	; 0x2c8e <__vector_51+0x6a>
    2c76:	83 81       	ldd	r24, Z+3	; 0x03
    2c78:	26 95       	lsr	r18
    2c7a:	28 23       	and	r18, r24
    2c7c:	c0 81       	ld	r28, Z
    2c7e:	d1 81       	ldd	r29, Z+1	; 0x01
    2c80:	c2 0f       	add	r28, r18
    2c82:	d1 1d       	adc	r29, r1
    2c84:	68 83       	st	Y, r22
    2c86:	8f 5f       	subi	r24, 0xFF	; 255
    2c88:	95 81       	ldd	r25, Z+5	; 0x05
    2c8a:	89 23       	and	r24, r25
    2c8c:	83 83       	std	Z+3, r24	; 0x03
    2c8e:	16 96       	adiw	r26, 0x06	; 6
    2c90:	ed 91       	ld	r30, X+
    2c92:	fc 91       	ld	r31, X
    2c94:	17 97       	sbiw	r26, 0x07	; 7
    2c96:	30 97       	sbiw	r30, 0x00	; 0
    2c98:	11 f0       	breq	.+4      	; 0x2c9e <__vector_51+0x7a>
    2c9a:	cd 01       	movw	r24, r26
    2c9c:	19 95       	eicall
    2c9e:	ff 91       	pop	r31
    2ca0:	ef 91       	pop	r30
    2ca2:	df 91       	pop	r29
    2ca4:	cf 91       	pop	r28
    2ca6:	bf 91       	pop	r27
    2ca8:	af 91       	pop	r26
    2caa:	9f 91       	pop	r25
    2cac:	8f 91       	pop	r24
    2cae:	7f 91       	pop	r23
    2cb0:	6f 91       	pop	r22
    2cb2:	5f 91       	pop	r21
    2cb4:	4f 91       	pop	r20
    2cb6:	3f 91       	pop	r19
    2cb8:	2f 91       	pop	r18
    2cba:	0f 90       	pop	r0
    2cbc:	0b be       	out	0x3b, r0	; 59
    2cbe:	0f 90       	pop	r0
    2cc0:	0f be       	out	0x3f, r0	; 63
    2cc2:	0f 90       	pop	r0
    2cc4:	1f 90       	pop	r1
    2cc6:	18 95       	reti

00002cc8 <__vector_52>:
    2cc8:	1f 92       	push	r1
    2cca:	0f 92       	push	r0
    2ccc:	0f b6       	in	r0, 0x3f	; 63
    2cce:	0f 92       	push	r0
    2cd0:	11 24       	eor	r1, r1
    2cd2:	0b b6       	in	r0, 0x3b	; 59
    2cd4:	0f 92       	push	r0
    2cd6:	2f 93       	push	r18
    2cd8:	8f 93       	push	r24
    2cda:	9f 93       	push	r25
    2cdc:	af 93       	push	r26
    2cde:	bf 93       	push	r27
    2ce0:	ef 93       	push	r30
    2ce2:	ff 93       	push	r31
    2ce4:	e0 91 1c 08 	lds	r30, 0x081C	; 0x80081c <_ser_handle+0x4>
    2ce8:	f0 91 1d 08 	lds	r31, 0x081D	; 0x80081d <_ser_handle+0x5>
    2cec:	30 97       	sbiw	r30, 0x00	; 0
    2cee:	b9 f0       	breq	.+46     	; 0x2d1e <__vector_52+0x56>
    2cf0:	02 80       	ldd	r0, Z+2	; 0x02
    2cf2:	f3 81       	ldd	r31, Z+3	; 0x03
    2cf4:	e0 2d       	mov	r30, r0
    2cf6:	93 81       	ldd	r25, Z+3	; 0x03
    2cf8:	82 81       	ldd	r24, Z+2	; 0x02
    2cfa:	98 17       	cp	r25, r24
    2cfc:	b1 f0       	breq	.+44     	; 0x2d2a <__vector_52+0x62>
    2cfe:	92 81       	ldd	r25, Z+2	; 0x02
    2d00:	85 81       	ldd	r24, Z+5	; 0x05
    2d02:	28 2f       	mov	r18, r24
    2d04:	26 95       	lsr	r18
    2d06:	29 23       	and	r18, r25
    2d08:	a0 81       	ld	r26, Z
    2d0a:	b1 81       	ldd	r27, Z+1	; 0x01
    2d0c:	a2 0f       	add	r26, r18
    2d0e:	b1 1d       	adc	r27, r1
    2d10:	2c 91       	ld	r18, X
    2d12:	9f 5f       	subi	r25, 0xFF	; 255
    2d14:	89 23       	and	r24, r25
    2d16:	82 83       	std	Z+2, r24	; 0x02
    2d18:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    2d1c:	0b c0       	rjmp	.+22     	; 0x2d34 <__vector_52+0x6c>
    2d1e:	e1 ed       	ldi	r30, 0xD1	; 209
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	80 81       	ld	r24, Z
    2d24:	8f 7d       	andi	r24, 0xDF	; 223
    2d26:	80 83       	st	Z, r24
    2d28:	05 c0       	rjmp	.+10     	; 0x2d34 <__vector_52+0x6c>
    2d2a:	e1 ed       	ldi	r30, 0xD1	; 209
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	80 81       	ld	r24, Z
    2d30:	8f 7d       	andi	r24, 0xDF	; 223
    2d32:	80 83       	st	Z, r24
    2d34:	ff 91       	pop	r31
    2d36:	ef 91       	pop	r30
    2d38:	bf 91       	pop	r27
    2d3a:	af 91       	pop	r26
    2d3c:	9f 91       	pop	r25
    2d3e:	8f 91       	pop	r24
    2d40:	2f 91       	pop	r18
    2d42:	0f 90       	pop	r0
    2d44:	0b be       	out	0x3b, r0	; 59
    2d46:	0f 90       	pop	r0
    2d48:	0f be       	out	0x3f, r0	; 63
    2d4a:	0f 90       	pop	r0
    2d4c:	1f 90       	pop	r1
    2d4e:	18 95       	reti

00002d50 <__vector_54>:
    2d50:	1f 92       	push	r1
    2d52:	0f 92       	push	r0
    2d54:	0f b6       	in	r0, 0x3f	; 63
    2d56:	0f 92       	push	r0
    2d58:	11 24       	eor	r1, r1
    2d5a:	0b b6       	in	r0, 0x3b	; 59
    2d5c:	0f 92       	push	r0
    2d5e:	2f 93       	push	r18
    2d60:	3f 93       	push	r19
    2d62:	4f 93       	push	r20
    2d64:	5f 93       	push	r21
    2d66:	6f 93       	push	r22
    2d68:	7f 93       	push	r23
    2d6a:	8f 93       	push	r24
    2d6c:	9f 93       	push	r25
    2d6e:	af 93       	push	r26
    2d70:	bf 93       	push	r27
    2d72:	cf 93       	push	r28
    2d74:	df 93       	push	r29
    2d76:	ef 93       	push	r30
    2d78:	ff 93       	push	r31
    2d7a:	a0 91 1e 08 	lds	r26, 0x081E	; 0x80081e <_ser_handle+0x6>
    2d7e:	b0 91 1f 08 	lds	r27, 0x081F	; 0x80081f <_ser_handle+0x7>
    2d82:	10 97       	sbiw	r26, 0x00	; 0
    2d84:	11 f1       	breq	.+68     	; 0x2dca <__vector_54+0x7a>
    2d86:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    2d8a:	14 96       	adiw	r26, 0x04	; 4
    2d8c:	ed 91       	ld	r30, X+
    2d8e:	fc 91       	ld	r31, X
    2d90:	15 97       	sbiw	r26, 0x05	; 5
    2d92:	93 81       	ldd	r25, Z+3	; 0x03
    2d94:	82 81       	ldd	r24, Z+2	; 0x02
    2d96:	25 81       	ldd	r18, Z+5	; 0x05
    2d98:	98 1b       	sub	r25, r24
    2d9a:	92 23       	and	r25, r18
    2d9c:	84 81       	ldd	r24, Z+4	; 0x04
    2d9e:	98 17       	cp	r25, r24
    2da0:	61 f0       	breq	.+24     	; 0x2dba <__vector_54+0x6a>
    2da2:	83 81       	ldd	r24, Z+3	; 0x03
    2da4:	26 95       	lsr	r18
    2da6:	28 23       	and	r18, r24
    2da8:	c0 81       	ld	r28, Z
    2daa:	d1 81       	ldd	r29, Z+1	; 0x01
    2dac:	c2 0f       	add	r28, r18
    2dae:	d1 1d       	adc	r29, r1
    2db0:	68 83       	st	Y, r22
    2db2:	8f 5f       	subi	r24, 0xFF	; 255
    2db4:	95 81       	ldd	r25, Z+5	; 0x05
    2db6:	89 23       	and	r24, r25
    2db8:	83 83       	std	Z+3, r24	; 0x03
    2dba:	16 96       	adiw	r26, 0x06	; 6
    2dbc:	ed 91       	ld	r30, X+
    2dbe:	fc 91       	ld	r31, X
    2dc0:	17 97       	sbiw	r26, 0x07	; 7
    2dc2:	30 97       	sbiw	r30, 0x00	; 0
    2dc4:	11 f0       	breq	.+4      	; 0x2dca <__vector_54+0x7a>
    2dc6:	cd 01       	movw	r24, r26
    2dc8:	19 95       	eicall
    2dca:	ff 91       	pop	r31
    2dcc:	ef 91       	pop	r30
    2dce:	df 91       	pop	r29
    2dd0:	cf 91       	pop	r28
    2dd2:	bf 91       	pop	r27
    2dd4:	af 91       	pop	r26
    2dd6:	9f 91       	pop	r25
    2dd8:	8f 91       	pop	r24
    2dda:	7f 91       	pop	r23
    2ddc:	6f 91       	pop	r22
    2dde:	5f 91       	pop	r21
    2de0:	4f 91       	pop	r20
    2de2:	3f 91       	pop	r19
    2de4:	2f 91       	pop	r18
    2de6:	0f 90       	pop	r0
    2de8:	0b be       	out	0x3b, r0	; 59
    2dea:	0f 90       	pop	r0
    2dec:	0f be       	out	0x3f, r0	; 63
    2dee:	0f 90       	pop	r0
    2df0:	1f 90       	pop	r1
    2df2:	18 95       	reti

00002df4 <__vector_55>:
    2df4:	1f 92       	push	r1
    2df6:	0f 92       	push	r0
    2df8:	0f b6       	in	r0, 0x3f	; 63
    2dfa:	0f 92       	push	r0
    2dfc:	11 24       	eor	r1, r1
    2dfe:	0b b6       	in	r0, 0x3b	; 59
    2e00:	0f 92       	push	r0
    2e02:	2f 93       	push	r18
    2e04:	8f 93       	push	r24
    2e06:	9f 93       	push	r25
    2e08:	af 93       	push	r26
    2e0a:	bf 93       	push	r27
    2e0c:	ef 93       	push	r30
    2e0e:	ff 93       	push	r31
    2e10:	e0 91 1e 08 	lds	r30, 0x081E	; 0x80081e <_ser_handle+0x6>
    2e14:	f0 91 1f 08 	lds	r31, 0x081F	; 0x80081f <_ser_handle+0x7>
    2e18:	30 97       	sbiw	r30, 0x00	; 0
    2e1a:	b9 f0       	breq	.+46     	; 0x2e4a <__vector_55+0x56>
    2e1c:	02 80       	ldd	r0, Z+2	; 0x02
    2e1e:	f3 81       	ldd	r31, Z+3	; 0x03
    2e20:	e0 2d       	mov	r30, r0
    2e22:	93 81       	ldd	r25, Z+3	; 0x03
    2e24:	82 81       	ldd	r24, Z+2	; 0x02
    2e26:	98 17       	cp	r25, r24
    2e28:	b1 f0       	breq	.+44     	; 0x2e56 <__vector_55+0x62>
    2e2a:	92 81       	ldd	r25, Z+2	; 0x02
    2e2c:	85 81       	ldd	r24, Z+5	; 0x05
    2e2e:	28 2f       	mov	r18, r24
    2e30:	26 95       	lsr	r18
    2e32:	29 23       	and	r18, r25
    2e34:	a0 81       	ld	r26, Z
    2e36:	b1 81       	ldd	r27, Z+1	; 0x01
    2e38:	a2 0f       	add	r26, r18
    2e3a:	b1 1d       	adc	r27, r1
    2e3c:	2c 91       	ld	r18, X
    2e3e:	9f 5f       	subi	r25, 0xFF	; 255
    2e40:	89 23       	and	r24, r25
    2e42:	82 83       	std	Z+2, r24	; 0x02
    2e44:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    2e48:	0b c0       	rjmp	.+22     	; 0x2e60 <__vector_55+0x6c>
    2e4a:	e1 e3       	ldi	r30, 0x31	; 49
    2e4c:	f1 e0       	ldi	r31, 0x01	; 1
    2e4e:	80 81       	ld	r24, Z
    2e50:	8f 7d       	andi	r24, 0xDF	; 223
    2e52:	80 83       	st	Z, r24
    2e54:	05 c0       	rjmp	.+10     	; 0x2e60 <__vector_55+0x6c>
    2e56:	e1 e3       	ldi	r30, 0x31	; 49
    2e58:	f1 e0       	ldi	r31, 0x01	; 1
    2e5a:	80 81       	ld	r24, Z
    2e5c:	8f 7d       	andi	r24, 0xDF	; 223
    2e5e:	80 83       	st	Z, r24
    2e60:	ff 91       	pop	r31
    2e62:	ef 91       	pop	r30
    2e64:	bf 91       	pop	r27
    2e66:	af 91       	pop	r26
    2e68:	9f 91       	pop	r25
    2e6a:	8f 91       	pop	r24
    2e6c:	2f 91       	pop	r18
    2e6e:	0f 90       	pop	r0
    2e70:	0b be       	out	0x3b, r0	; 59
    2e72:	0f 90       	pop	r0
    2e74:	0f be       	out	0x3f, r0	; 63
    2e76:	0f 90       	pop	r0
    2e78:	1f 90       	pop	r1
    2e7a:	18 95       	reti

00002e7c <fifo_init>:
    2e7c:	fc 01       	movw	r30, r24
    2e7e:	41 11       	cpse	r20, r1
    2e80:	02 c0       	rjmp	.+4      	; 0x2e86 <fifo_init+0xa>
    2e82:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <abort>
    2e86:	84 2f       	mov	r24, r20
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	9c 01       	movw	r18, r24
    2e8c:	21 50       	subi	r18, 0x01	; 1
    2e8e:	31 09       	sbc	r19, r1
    2e90:	82 23       	and	r24, r18
    2e92:	93 23       	and	r25, r19
    2e94:	89 2b       	or	r24, r25
    2e96:	11 f0       	breq	.+4      	; 0x2e9c <fifo_init+0x20>
    2e98:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <abort>
    2e9c:	41 38       	cpi	r20, 0x81	; 129
    2e9e:	10 f0       	brcs	.+4      	; 0x2ea4 <fifo_init+0x28>
    2ea0:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <abort>
    2ea4:	12 82       	std	Z+2, r1	; 0x02
    2ea6:	13 82       	std	Z+3, r1	; 0x03
    2ea8:	44 83       	std	Z+4, r20	; 0x04
    2eaa:	44 0f       	add	r20, r20
    2eac:	41 50       	subi	r20, 0x01	; 1
    2eae:	45 83       	std	Z+5, r20	; 0x05
    2eb0:	71 83       	std	Z+1, r23	; 0x01
    2eb2:	60 83       	st	Z, r22
    2eb4:	80 e0       	ldi	r24, 0x00	; 0
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	08 95       	ret

00002eba <hal_create>:
    2eba:	e1 ec       	ldi	r30, 0xC1	; 193
    2ebc:	f9 e0       	ldi	r31, 0x09	; 9
    2ebe:	24 e3       	ldi	r18, 0x34	; 52
    2ec0:	3c e1       	ldi	r19, 0x1C	; 28
    2ec2:	31 83       	std	Z+1, r19	; 0x01
    2ec4:	20 83       	st	Z, r18
    2ec6:	27 e3       	ldi	r18, 0x37	; 55
    2ec8:	3c e1       	ldi	r19, 0x1C	; 28
    2eca:	33 83       	std	Z+3, r19	; 0x03
    2ecc:	22 83       	std	Z+2, r18	; 0x02
    2ece:	22 e4       	ldi	r18, 0x42	; 66
    2ed0:	3c e1       	ldi	r19, 0x1C	; 28
    2ed2:	35 83       	std	Z+5, r19	; 0x05
    2ed4:	24 83       	std	Z+4, r18	; 0x04
    2ed6:	26 e4       	ldi	r18, 0x46	; 70
    2ed8:	3c e1       	ldi	r19, 0x1C	; 28
    2eda:	37 83       	std	Z+7, r19	; 0x07
    2edc:	26 83       	std	Z+6, r18	; 0x06
    2ede:	2c e4       	ldi	r18, 0x4C	; 76
    2ee0:	3c e1       	ldi	r19, 0x1C	; 28
    2ee2:	31 87       	std	Z+9, r19	; 0x09
    2ee4:	20 87       	std	Z+8, r18	; 0x08
    2ee6:	28 e5       	ldi	r18, 0x58	; 88
    2ee8:	3c e1       	ldi	r19, 0x1C	; 28
    2eea:	33 87       	std	Z+11, r19	; 0x0b
    2eec:	22 87       	std	Z+10, r18	; 0x0a
    2eee:	2d e5       	ldi	r18, 0x5D	; 93
    2ef0:	3c e1       	ldi	r19, 0x1C	; 28
    2ef2:	35 87       	std	Z+13, r19	; 0x0d
    2ef4:	24 87       	std	Z+12, r18	; 0x0c
    2ef6:	29 e6       	ldi	r18, 0x69	; 105
    2ef8:	3c e1       	ldi	r19, 0x1C	; 28
    2efa:	37 87       	std	Z+15, r19	; 0x0f
    2efc:	26 87       	std	Z+14, r18	; 0x0e
    2efe:	29 e4       	ldi	r18, 0x49	; 73
    2f00:	3c e1       	ldi	r19, 0x1C	; 28
    2f02:	31 8b       	std	Z+17, r19	; 0x11
    2f04:	20 8b       	std	Z+16, r18	; 0x10
    2f06:	2e e6       	ldi	r18, 0x6E	; 110
    2f08:	3c e1       	ldi	r19, 0x1C	; 28
    2f0a:	33 8b       	std	Z+19, r19	; 0x13
    2f0c:	22 8b       	std	Z+18, r18	; 0x12
    2f0e:	2b e7       	ldi	r18, 0x7B	; 123
    2f10:	3c e1       	ldi	r19, 0x1C	; 28
    2f12:	35 8b       	std	Z+21, r19	; 0x15
    2f14:	24 8b       	std	Z+20, r18	; 0x14
    2f16:	68 2f       	mov	r22, r24
    2f18:	cf 01       	movw	r24, r30
    2f1a:	39 c1       	rjmp	.+626    	; 0x318e <led_create>
    2f1c:	08 95       	ret

00002f1e <_hihTwiCallback>:
    2f1e:	65 30       	cpi	r22, 0x05	; 5
    2f20:	f1 f4       	brne	.+60     	; 0x2f5e <_hihTwiCallback+0x40>
    2f22:	fa 01       	movw	r30, r20
    2f24:	80 81       	ld	r24, Z
    2f26:	8f 73       	andi	r24, 0x3F	; 63
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	98 2f       	mov	r25, r24
    2f2c:	88 27       	eor	r24, r24
    2f2e:	21 81       	ldd	r18, Z+1	; 0x01
    2f30:	82 2b       	or	r24, r18
    2f32:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <_hum+0x1>
    2f36:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <_hum>
    2f3a:	82 81       	ldd	r24, Z+2	; 0x02
    2f3c:	f0 e4       	ldi	r31, 0x40	; 64
    2f3e:	8f 9f       	mul	r24, r31
    2f40:	c0 01       	movw	r24, r0
    2f42:	11 24       	eor	r1, r1
    2f44:	fa 01       	movw	r30, r20
    2f46:	23 81       	ldd	r18, Z+3	; 0x03
    2f48:	26 95       	lsr	r18
    2f4a:	26 95       	lsr	r18
    2f4c:	82 2b       	or	r24, r18
    2f4e:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <_temp+0x1>
    2f52:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_temp>
    2f56:	81 e0       	ldi	r24, 0x01	; 1
    2f58:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <_measuringIsReady>
    2f5c:	08 95       	ret
    2f5e:	64 30       	cpi	r22, 0x04	; 4
    2f60:	51 f0       	breq	.+20     	; 0x2f76 <_hihTwiCallback+0x58>
    2f62:	80 e0       	ldi	r24, 0x00	; 0
    2f64:	90 e4       	ldi	r25, 0x40	; 64
    2f66:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <_temp+0x1>
    2f6a:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_temp>
    2f6e:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <_hum+0x1>
    2f72:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <_hum>
    2f76:	08 95       	ret

00002f78 <hih8120Create>:
    2f78:	0f 93       	push	r16
    2f7a:	1f 93       	push	r17
    2f7c:	0f e8       	ldi	r16, 0x8F	; 143
    2f7e:	17 e1       	ldi	r17, 0x17	; 23
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	34 e2       	ldi	r19, 0x24	; 36
    2f84:	44 ef       	ldi	r20, 0xF4	; 244
    2f86:	50 e0       	ldi	r21, 0x00	; 0
    2f88:	60 e0       	ldi	r22, 0x00	; 0
    2f8a:	87 e2       	ldi	r24, 0x27	; 39
    2f8c:	ff d6       	rcall	.+3582   	; 0x3d8c <twiCreate>
    2f8e:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <_hih8120Handler+0x1>
    2f92:	80 93 21 08 	sts	0x0821, r24	; 0x800821 <_hih8120Handler>
    2f96:	21 e0       	ldi	r18, 0x01	; 1
    2f98:	89 2b       	or	r24, r25
    2f9a:	09 f0       	breq	.+2      	; 0x2f9e <hih8120Create+0x26>
    2f9c:	20 e0       	ldi	r18, 0x00	; 0
    2f9e:	82 2f       	mov	r24, r18
    2fa0:	1f 91       	pop	r17
    2fa2:	0f 91       	pop	r16
    2fa4:	08 95       	ret

00002fa6 <hih8120Wakeup>:
    2fa6:	80 91 21 08 	lds	r24, 0x0821	; 0x800821 <_hih8120Handler>
    2faa:	90 91 22 08 	lds	r25, 0x0822	; 0x800822 <_hih8120Handler+0x1>
    2fae:	00 97       	sbiw	r24, 0x00	; 0
    2fb0:	51 f0       	breq	.+20     	; 0x2fc6 <hih8120Wakeup+0x20>
    2fb2:	40 e0       	ldi	r20, 0x00	; 0
    2fb4:	60 e0       	ldi	r22, 0x00	; 0
    2fb6:	70 e0       	ldi	r23, 0x00	; 0
    2fb8:	3a d7       	rcall	.+3700   	; 0x3e2e <twiTransmit>
    2fba:	84 30       	cpi	r24, 0x04	; 4
    2fbc:	31 f4       	brne	.+12     	; 0x2fca <hih8120Wakeup+0x24>
    2fbe:	10 92 20 08 	sts	0x0820, r1	; 0x800820 <_measuringIsReady>
    2fc2:	80 e0       	ldi	r24, 0x00	; 0
    2fc4:	08 95       	ret
    2fc6:	82 e0       	ldi	r24, 0x02	; 2
    2fc8:	08 95       	ret
    2fca:	83 e0       	ldi	r24, 0x03	; 3
    2fcc:	08 95       	ret

00002fce <hih8120Meassure>:
    2fce:	80 91 21 08 	lds	r24, 0x0821	; 0x800821 <_hih8120Handler>
    2fd2:	90 91 22 08 	lds	r25, 0x0822	; 0x800822 <_hih8120Handler+0x1>
    2fd6:	00 97       	sbiw	r24, 0x00	; 0
    2fd8:	31 f0       	breq	.+12     	; 0x2fe6 <hih8120Meassure+0x18>
    2fda:	64 e0       	ldi	r22, 0x04	; 4
    2fdc:	73 d7       	rcall	.+3814   	; 0x3ec4 <twiReceive>
    2fde:	85 30       	cpi	r24, 0x05	; 5
    2fe0:	21 f0       	breq	.+8      	; 0x2fea <hih8120Meassure+0x1c>
    2fe2:	83 e0       	ldi	r24, 0x03	; 3
    2fe4:	08 95       	ret
    2fe6:	82 e0       	ldi	r24, 0x02	; 2
    2fe8:	08 95       	ret
    2fea:	80 e0       	ldi	r24, 0x00	; 0
    2fec:	08 95       	ret

00002fee <hih8120GetHumidity>:
    2fee:	60 91 1e 02 	lds	r22, 0x021E	; 0x80021e <_hum>
    2ff2:	70 91 1f 02 	lds	r23, 0x021F	; 0x80021f <_hum+0x1>
    2ff6:	80 e0       	ldi	r24, 0x00	; 0
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	0e 94 24 21 	call	0x4248	; 0x4248 <__floatunsisf>
    2ffe:	20 e0       	ldi	r18, 0x00	; 0
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	48 ec       	ldi	r20, 0xC8	; 200
    3004:	52 e4       	ldi	r21, 0x42	; 66
    3006:	0e 94 8d 21 	call	0x431a	; 0x431a <__mulsf3>
    300a:	20 e0       	ldi	r18, 0x00	; 0
    300c:	38 ef       	ldi	r19, 0xF8	; 248
    300e:	4f e7       	ldi	r20, 0x7F	; 127
    3010:	56 e4       	ldi	r21, 0x46	; 70
    3012:	0c 94 b9 20 	jmp	0x4172	; 0x4172 <__divsf3>
    3016:	08 95       	ret

00003018 <hih8120GetTemperature>:
    3018:	60 91 1c 02 	lds	r22, 0x021C	; 0x80021c <_temp>
    301c:	70 91 1d 02 	lds	r23, 0x021D	; 0x80021d <_temp+0x1>
    3020:	80 e0       	ldi	r24, 0x00	; 0
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	0e 94 24 21 	call	0x4248	; 0x4248 <__floatunsisf>
    3028:	20 e0       	ldi	r18, 0x00	; 0
    302a:	30 e0       	ldi	r19, 0x00	; 0
    302c:	45 e2       	ldi	r20, 0x25	; 37
    302e:	53 e4       	ldi	r21, 0x43	; 67
    3030:	0e 94 8d 21 	call	0x431a	; 0x431a <__mulsf3>
    3034:	20 e0       	ldi	r18, 0x00	; 0
    3036:	38 ef       	ldi	r19, 0xF8	; 248
    3038:	4f e7       	ldi	r20, 0x7F	; 127
    303a:	56 e4       	ldi	r21, 0x46	; 70
    303c:	0e 94 b9 20 	call	0x4172	; 0x4172 <__divsf3>
    3040:	20 e0       	ldi	r18, 0x00	; 0
    3042:	30 e0       	ldi	r19, 0x00	; 0
    3044:	40 e2       	ldi	r20, 0x20	; 32
    3046:	52 e4       	ldi	r21, 0x42	; 66
    3048:	0c 94 52 20 	jmp	0x40a4	; 0x40a4 <__subsf3>
    304c:	08 95       	ret

0000304e <_turn_off>:
    304e:	cf 93       	push	r28
    3050:	df 93       	push	r29
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	fc 01       	movw	r30, r24
    3056:	ee 0f       	add	r30, r30
    3058:	ff 1f       	adc	r31, r31
    305a:	e8 0f       	add	r30, r24
    305c:	f9 1f       	adc	r31, r25
    305e:	ee 0f       	add	r30, r30
    3060:	ff 1f       	adc	r31, r31
    3062:	ed 5d       	subi	r30, 0xDD	; 221
    3064:	f7 4f       	sbci	r31, 0xF7	; 247
    3066:	23 81       	ldd	r18, Z+3	; 0x03
    3068:	21 11       	cpse	r18, r1
    306a:	0a c0       	rjmp	.+20     	; 0x3080 <_turn_off+0x32>
    306c:	ef 01       	movw	r28, r30
    306e:	e0 91 c9 09 	lds	r30, 0x09C9	; 0x8009c9 <register_access+0x8>
    3072:	f0 91 ca 09 	lds	r31, 0x09CA	; 0x8009ca <register_access+0x9>
    3076:	6a 81       	ldd	r22, Y+2	; 0x02
    3078:	88 81       	ld	r24, Y
    307a:	99 81       	ldd	r25, Y+1	; 0x01
    307c:	19 95       	eicall
    307e:	12 c0       	rjmp	.+36     	; 0x30a4 <_turn_off+0x56>
    3080:	dc 01       	movw	r26, r24
    3082:	aa 0f       	add	r26, r26
    3084:	bb 1f       	adc	r27, r27
    3086:	ed 01       	movw	r28, r26
    3088:	c8 0f       	add	r28, r24
    308a:	d9 1f       	adc	r29, r25
    308c:	cc 0f       	add	r28, r28
    308e:	dd 1f       	adc	r29, r29
    3090:	cd 5d       	subi	r28, 0xDD	; 221
    3092:	d7 4f       	sbci	r29, 0xF7	; 247
    3094:	e0 91 d3 09 	lds	r30, 0x09D3	; 0x8009d3 <register_access+0x12>
    3098:	f0 91 d4 09 	lds	r31, 0x09D4	; 0x8009d4 <register_access+0x13>
    309c:	6a 81       	ldd	r22, Y+2	; 0x02
    309e:	88 81       	ld	r24, Y
    30a0:	99 81       	ldd	r25, Y+1	; 0x01
    30a2:	19 95       	eicall
    30a4:	df 91       	pop	r29
    30a6:	cf 91       	pop	r28
    30a8:	08 95       	ret

000030aa <_turn_on>:
    30aa:	cf 93       	push	r28
    30ac:	df 93       	push	r29
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	fc 01       	movw	r30, r24
    30b2:	ee 0f       	add	r30, r30
    30b4:	ff 1f       	adc	r31, r31
    30b6:	e8 0f       	add	r30, r24
    30b8:	f9 1f       	adc	r31, r25
    30ba:	ee 0f       	add	r30, r30
    30bc:	ff 1f       	adc	r31, r31
    30be:	ed 5d       	subi	r30, 0xDD	; 221
    30c0:	f7 4f       	sbci	r31, 0xF7	; 247
    30c2:	23 81       	ldd	r18, Z+3	; 0x03
    30c4:	21 11       	cpse	r18, r1
    30c6:	0a c0       	rjmp	.+20     	; 0x30dc <_turn_on+0x32>
    30c8:	ef 01       	movw	r28, r30
    30ca:	e0 91 d3 09 	lds	r30, 0x09D3	; 0x8009d3 <register_access+0x12>
    30ce:	f0 91 d4 09 	lds	r31, 0x09D4	; 0x8009d4 <register_access+0x13>
    30d2:	6a 81       	ldd	r22, Y+2	; 0x02
    30d4:	88 81       	ld	r24, Y
    30d6:	99 81       	ldd	r25, Y+1	; 0x01
    30d8:	19 95       	eicall
    30da:	12 c0       	rjmp	.+36     	; 0x3100 <_turn_on+0x56>
    30dc:	dc 01       	movw	r26, r24
    30de:	aa 0f       	add	r26, r26
    30e0:	bb 1f       	adc	r27, r27
    30e2:	ed 01       	movw	r28, r26
    30e4:	c8 0f       	add	r28, r24
    30e6:	d9 1f       	adc	r29, r25
    30e8:	cc 0f       	add	r28, r28
    30ea:	dd 1f       	adc	r29, r29
    30ec:	cd 5d       	subi	r28, 0xDD	; 221
    30ee:	d7 4f       	sbci	r29, 0xF7	; 247
    30f0:	e0 91 c9 09 	lds	r30, 0x09C9	; 0x8009c9 <register_access+0x8>
    30f4:	f0 91 ca 09 	lds	r31, 0x09CA	; 0x8009ca <register_access+0x9>
    30f8:	6a 81       	ldd	r22, Y+2	; 0x02
    30fa:	88 81       	ld	r24, Y
    30fc:	99 81       	ldd	r25, Y+1	; 0x01
    30fe:	19 95       	eicall
    3100:	df 91       	pop	r29
    3102:	cf 91       	pop	r28
    3104:	08 95       	ret

00003106 <_hal_led_task>:
    3106:	8b e9       	ldi	r24, 0x9B	; 155
    3108:	94 e0       	ldi	r25, 0x04	; 4
    310a:	0e 94 cd 23 	call	0x479a	; 0x479a <puts>
    310e:	0f 2e       	mov	r0, r31
    3110:	f1 ec       	ldi	r31, 0xC1	; 193
    3112:	cf 2e       	mov	r12, r31
    3114:	f9 e0       	ldi	r31, 0x09	; 9
    3116:	df 2e       	mov	r13, r31
    3118:	f0 2d       	mov	r31, r0
    311a:	04 e0       	ldi	r16, 0x04	; 4
    311c:	c3 e2       	ldi	r28, 0x23	; 35
    311e:	d8 e0       	ldi	r29, 0x08	; 8
    3120:	10 e0       	ldi	r17, 0x00	; 0
    3122:	8c 81       	ldd	r24, Y+4	; 0x04
    3124:	81 30       	cpi	r24, 0x01	; 1
    3126:	69 f0       	breq	.+26     	; 0x3142 <_hal_led_task+0x3c>
    3128:	e8 f0       	brcs	.+58     	; 0x3164 <_hal_led_task+0x5e>
    312a:	82 30       	cpi	r24, 0x02	; 2
    312c:	39 f5       	brne	.+78     	; 0x317c <_hal_led_task+0x76>
    312e:	d6 01       	movw	r26, r12
    3130:	1c 96       	adiw	r26, 0x0c	; 12
    3132:	ed 91       	ld	r30, X+
    3134:	fc 91       	ld	r31, X
    3136:	1d 97       	sbiw	r26, 0x0d	; 13
    3138:	6a 81       	ldd	r22, Y+2	; 0x02
    313a:	88 81       	ld	r24, Y
    313c:	99 81       	ldd	r25, Y+1	; 0x01
    313e:	19 95       	eicall
    3140:	1d c0       	rjmp	.+58     	; 0x317c <_hal_led_task+0x76>
    3142:	8d 81       	ldd	r24, Y+5	; 0x05
    3144:	8f 5f       	subi	r24, 0xFF	; 255
    3146:	8a 30       	cpi	r24, 0x0A	; 10
    3148:	10 f4       	brcc	.+4      	; 0x314e <_hal_led_task+0x48>
    314a:	8d 83       	std	Y+5, r24	; 0x05
    314c:	17 c0       	rjmp	.+46     	; 0x317c <_hal_led_task+0x76>
    314e:	1d 82       	std	Y+5, r1	; 0x05
    3150:	d6 01       	movw	r26, r12
    3152:	1c 96       	adiw	r26, 0x0c	; 12
    3154:	ed 91       	ld	r30, X+
    3156:	fc 91       	ld	r31, X
    3158:	1d 97       	sbiw	r26, 0x0d	; 13
    315a:	6a 81       	ldd	r22, Y+2	; 0x02
    315c:	88 81       	ld	r24, Y
    315e:	99 81       	ldd	r25, Y+1	; 0x01
    3160:	19 95       	eicall
    3162:	0c c0       	rjmp	.+24     	; 0x317c <_hal_led_task+0x76>
    3164:	8d 81       	ldd	r24, Y+5	; 0x05
    3166:	88 23       	and	r24, r24
    3168:	31 f0       	breq	.+12     	; 0x3176 <_hal_led_task+0x70>
    316a:	81 2f       	mov	r24, r17
    316c:	9e df       	rcall	.-196    	; 0x30aa <_turn_on>
    316e:	8d 81       	ldd	r24, Y+5	; 0x05
    3170:	81 50       	subi	r24, 0x01	; 1
    3172:	8d 83       	std	Y+5, r24	; 0x05
    3174:	03 c0       	rjmp	.+6      	; 0x317c <_hal_led_task+0x76>
    3176:	0c 83       	std	Y+4, r16	; 0x04
    3178:	81 2f       	mov	r24, r17
    317a:	69 df       	rcall	.-302    	; 0x304e <_turn_off>
    317c:	1f 5f       	subi	r17, 0xFF	; 255
    317e:	26 96       	adiw	r28, 0x06	; 6
    3180:	14 30       	cpi	r17, 0x04	; 4
    3182:	79 f6       	brne	.-98     	; 0x3122 <_hal_led_task+0x1c>
    3184:	85 e0       	ldi	r24, 0x05	; 5
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <vTaskDelay>
    318c:	c7 cf       	rjmp	.-114    	; 0x311c <_hal_led_task+0x16>

0000318e <led_create>:
    318e:	cf 92       	push	r12
    3190:	df 92       	push	r13
    3192:	ef 92       	push	r14
    3194:	ff 92       	push	r15
    3196:	0f 93       	push	r16
    3198:	1f 93       	push	r17
    319a:	cf 93       	push	r28
    319c:	df 93       	push	r29
    319e:	06 2f       	mov	r16, r22
    31a0:	0f 2e       	mov	r0, r31
    31a2:	f1 ec       	ldi	r31, 0xC1	; 193
    31a4:	ef 2e       	mov	r14, r31
    31a6:	f9 e0       	ldi	r31, 0x09	; 9
    31a8:	ff 2e       	mov	r15, r31
    31aa:	f0 2d       	mov	r31, r0
    31ac:	d7 01       	movw	r26, r14
    31ae:	18 96       	adiw	r26, 0x08	; 8
    31b0:	ed 91       	ld	r30, X+
    31b2:	fc 91       	ld	r31, X
    31b4:	19 97       	sbiw	r26, 0x09	; 9
    31b6:	66 e0       	ldi	r22, 0x06	; 6
    31b8:	87 e2       	ldi	r24, 0x27	; 39
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	19 95       	eicall
    31be:	c3 e2       	ldi	r28, 0x23	; 35
    31c0:	d8 e0       	ldi	r29, 0x08	; 8
    31c2:	0f 2e       	mov	r0, r31
    31c4:	f8 e2       	ldi	r31, 0x28	; 40
    31c6:	cf 2e       	mov	r12, r31
    31c8:	d1 2c       	mov	r13, r1
    31ca:	f0 2d       	mov	r31, r0
    31cc:	d9 82       	std	Y+1, r13	; 0x01
    31ce:	c8 82       	st	Y, r12
    31d0:	86 e0       	ldi	r24, 0x06	; 6
    31d2:	8a 83       	std	Y+2, r24	; 0x02
    31d4:	1b 82       	std	Y+3, r1	; 0x03
    31d6:	14 e0       	ldi	r17, 0x04	; 4
    31d8:	1c 83       	std	Y+4, r17	; 0x04
    31da:	80 e0       	ldi	r24, 0x00	; 0
    31dc:	38 df       	rcall	.-400    	; 0x304e <_turn_off>
    31de:	d7 01       	movw	r26, r14
    31e0:	18 96       	adiw	r26, 0x08	; 8
    31e2:	ed 91       	ld	r30, X+
    31e4:	fc 91       	ld	r31, X
    31e6:	19 97       	sbiw	r26, 0x09	; 9
    31e8:	67 e0       	ldi	r22, 0x07	; 7
    31ea:	87 e2       	ldi	r24, 0x27	; 39
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	19 95       	eicall
    31f0:	df 82       	std	Y+7, r13	; 0x07
    31f2:	ce 82       	std	Y+6, r12	; 0x06
    31f4:	87 e0       	ldi	r24, 0x07	; 7
    31f6:	88 87       	std	Y+8, r24	; 0x08
    31f8:	19 86       	std	Y+9, r1	; 0x09
    31fa:	1a 87       	std	Y+10, r17	; 0x0a
    31fc:	81 e0       	ldi	r24, 0x01	; 1
    31fe:	27 df       	rcall	.-434    	; 0x304e <_turn_off>
    3200:	d7 01       	movw	r26, r14
    3202:	18 96       	adiw	r26, 0x08	; 8
    3204:	ed 91       	ld	r30, X+
    3206:	fc 91       	ld	r31, X
    3208:	19 97       	sbiw	r26, 0x09	; 9
    320a:	65 e0       	ldi	r22, 0x05	; 5
    320c:	83 e3       	ldi	r24, 0x33	; 51
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	19 95       	eicall
    3212:	d7 01       	movw	r26, r14
    3214:	18 96       	adiw	r26, 0x08	; 8
    3216:	ed 91       	ld	r30, X+
    3218:	fc 91       	ld	r31, X
    321a:	19 97       	sbiw	r26, 0x09	; 9
    321c:	61 e0       	ldi	r22, 0x01	; 1
    321e:	84 e3       	ldi	r24, 0x34	; 52
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	19 95       	eicall
    3224:	84 e3       	ldi	r24, 0x34	; 52
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	9d 87       	std	Y+13, r25	; 0x0d
    322a:	8c 87       	std	Y+12, r24	; 0x0c
    322c:	85 e0       	ldi	r24, 0x05	; 5
    322e:	8e 87       	std	Y+14, r24	; 0x0e
    3230:	1f 86       	std	Y+15, r1	; 0x0f
    3232:	18 8b       	std	Y+16, r17	; 0x10
    3234:	82 e0       	ldi	r24, 0x02	; 2
    3236:	0b df       	rcall	.-490    	; 0x304e <_turn_off>
    3238:	d7 01       	movw	r26, r14
    323a:	18 96       	adiw	r26, 0x08	; 8
    323c:	ed 91       	ld	r30, X+
    323e:	fc 91       	ld	r31, X
    3240:	19 97       	sbiw	r26, 0x09	; 9
    3242:	64 e0       	ldi	r22, 0x04	; 4
    3244:	81 e0       	ldi	r24, 0x01	; 1
    3246:	91 e0       	ldi	r25, 0x01	; 1
    3248:	19 95       	eicall
    324a:	d7 01       	movw	r26, r14
    324c:	18 96       	adiw	r26, 0x08	; 8
    324e:	ed 91       	ld	r30, X+
    3250:	fc 91       	ld	r31, X
    3252:	19 97       	sbiw	r26, 0x09	; 9
    3254:	61 e0       	ldi	r22, 0x01	; 1
    3256:	82 e0       	ldi	r24, 0x02	; 2
    3258:	91 e0       	ldi	r25, 0x01	; 1
    325a:	19 95       	eicall
    325c:	82 e0       	ldi	r24, 0x02	; 2
    325e:	91 e0       	ldi	r25, 0x01	; 1
    3260:	9b 8b       	std	Y+19, r25	; 0x13
    3262:	8a 8b       	std	Y+18, r24	; 0x12
    3264:	1c 8b       	std	Y+20, r17	; 0x14
    3266:	1d 8a       	std	Y+21, r1	; 0x15
    3268:	1e 8b       	std	Y+22, r17	; 0x16
    326a:	83 e0       	ldi	r24, 0x03	; 3
    326c:	f0 de       	rcall	.-544    	; 0x304e <_turn_off>
    326e:	e1 2c       	mov	r14, r1
    3270:	f1 2c       	mov	r15, r1
    3272:	20 e0       	ldi	r18, 0x00	; 0
    3274:	30 e0       	ldi	r19, 0x00	; 0
    3276:	40 ec       	ldi	r20, 0xC0	; 192
    3278:	50 e0       	ldi	r21, 0x00	; 0
    327a:	62 eb       	ldi	r22, 0xB2	; 178
    327c:	74 e0       	ldi	r23, 0x04	; 4
    327e:	83 e8       	ldi	r24, 0x83	; 131
    3280:	98 e1       	ldi	r25, 0x18	; 24
    3282:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <xTaskCreate>
    3286:	df 91       	pop	r29
    3288:	cf 91       	pop	r28
    328a:	1f 91       	pop	r17
    328c:	0f 91       	pop	r16
    328e:	ff 90       	pop	r15
    3290:	ef 90       	pop	r14
    3292:	df 90       	pop	r13
    3294:	cf 90       	pop	r12
    3296:	08 95       	ret

00003298 <_serial_call_back>:
    3298:	0f 93       	push	r16
    329a:	1f 93       	push	r17
    329c:	cf 93       	push	r28
    329e:	df 93       	push	r29
    32a0:	1f 92       	push	r1
    32a2:	1f 92       	push	r1
    32a4:	cd b7       	in	r28, 0x3d	; 61
    32a6:	de b7       	in	r29, 0x3e	; 62
    32a8:	8c 01       	movw	r16, r24
    32aa:	19 82       	std	Y+1, r1	; 0x01
    32ac:	2d c0       	rjmp	.+90     	; 0x3308 <_serial_call_back+0x70>
    32ae:	e0 91 9f 08 	lds	r30, 0x089F	; 0x80089f <rec_buf_inp.2926>
    32b2:	ec 32       	cpi	r30, 0x2C	; 44
    32b4:	50 f4       	brcc	.+20     	; 0x32ca <_serial_call_back+0x32>
    32b6:	81 e0       	ldi	r24, 0x01	; 1
    32b8:	8e 0f       	add	r24, r30
    32ba:	80 93 9f 08 	sts	0x089F, r24	; 0x80089f <rec_buf_inp.2926>
    32be:	f0 e0       	ldi	r31, 0x00	; 0
    32c0:	ec 55       	subi	r30, 0x5C	; 92
    32c2:	f7 4f       	sbci	r31, 0xF7	; 247
    32c4:	8a 81       	ldd	r24, Y+2	; 0x02
    32c6:	80 83       	st	Z, r24
    32c8:	02 c0       	rjmp	.+4      	; 0x32ce <_serial_call_back+0x36>
    32ca:	10 92 9f 08 	sts	0x089F, r1	; 0x80089f <rec_buf_inp.2926>
    32ce:	8a 81       	ldd	r24, Y+2	; 0x02
    32d0:	8a 30       	cpi	r24, 0x0A	; 10
    32d2:	d1 f4       	brne	.+52     	; 0x3308 <_serial_call_back+0x70>
    32d4:	40 91 9f 08 	lds	r20, 0x089F	; 0x80089f <rec_buf_inp.2926>
    32d8:	50 e0       	ldi	r21, 0x00	; 0
    32da:	fa 01       	movw	r30, r20
    32dc:	ee 55       	subi	r30, 0x5E	; 94
    32de:	f7 4f       	sbci	r31, 0xF7	; 247
    32e0:	10 82       	st	Z, r1
    32e2:	41 50       	subi	r20, 0x01	; 1
    32e4:	51 09       	sbc	r21, r1
    32e6:	9e 01       	movw	r18, r28
    32e8:	2f 5f       	subi	r18, 0xFF	; 255
    32ea:	3f 4f       	sbci	r19, 0xFF	; 255
    32ec:	64 ea       	ldi	r22, 0xA4	; 164
    32ee:	78 e0       	ldi	r23, 0x08	; 8
    32f0:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <_reply_buffer_handle>
    32f4:	90 91 a1 08 	lds	r25, 0x08A1	; 0x8008a1 <_reply_buffer_handle+0x1>
    32f8:	0e 94 a9 0a 	call	0x1552	; 0x1552 <xStreamBufferSendFromISR>
    32fc:	89 81       	ldd	r24, Y+1	; 0x01
    32fe:	81 11       	cpse	r24, r1
    3300:	0e 94 df 05 	call	0xbbe	; 0xbbe <vPortYield>
    3304:	10 92 9f 08 	sts	0x089F, r1	; 0x80089f <rec_buf_inp.2926>
    3308:	be 01       	movw	r22, r28
    330a:	6e 5f       	subi	r22, 0xFE	; 254
    330c:	7f 4f       	sbci	r23, 0xFF	; 255
    330e:	c8 01       	movw	r24, r16
    3310:	41 db       	rcall	.-2430   	; 0x2994 <serial_get_byte>
    3312:	88 23       	and	r24, r24
    3314:	61 f2       	breq	.-104    	; 0x32ae <_serial_call_back+0x16>
    3316:	0f 90       	pop	r0
    3318:	0f 90       	pop	r0
    331a:	df 91       	pop	r29
    331c:	cf 91       	pop	r28
    331e:	1f 91       	pop	r17
    3320:	0f 91       	pop	r16
    3322:	08 95       	ret

00003324 <_upload_message>:
    3324:	0f 93       	push	r16
    3326:	1f 93       	push	r17
    3328:	cf 93       	push	r28
    332a:	df 93       	push	r29
    332c:	8c 01       	movw	r16, r24
    332e:	eb 01       	movw	r28, r22
    3330:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <_reply_buffer_handle>
    3334:	90 91 a1 08 	lds	r25, 0x08A1	; 0x8008a1 <_reply_buffer_handle+0x1>
    3338:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <xStreamBufferReset>
    333c:	b8 01       	movw	r22, r16
    333e:	8b e3       	ldi	r24, 0x3B	; 59
    3340:	98 e0       	ldi	r25, 0x08	; 8
    3342:	0e 94 9b 23 	call	0x4736	; 0x4736 <strcpy>
    3346:	20 97       	sbiw	r28, 0x00	; 0
    3348:	79 f0       	breq	.+30     	; 0x3368 <_upload_message+0x44>
    334a:	eb e3       	ldi	r30, 0x3B	; 59
    334c:	f8 e0       	ldi	r31, 0x08	; 8
    334e:	01 90       	ld	r0, Z+
    3350:	00 20       	and	r0, r0
    3352:	e9 f7       	brne	.-6      	; 0x334e <_upload_message+0x2a>
    3354:	31 97       	sbiw	r30, 0x01	; 1
    3356:	80 e2       	ldi	r24, 0x20	; 32
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	91 83       	std	Z+1, r25	; 0x01
    335c:	80 83       	st	Z, r24
    335e:	be 01       	movw	r22, r28
    3360:	8b e3       	ldi	r24, 0x3B	; 59
    3362:	98 e0       	ldi	r25, 0x08	; 8
    3364:	0e 94 90 23 	call	0x4720	; 0x4720 <strcat>
    3368:	eb e3       	ldi	r30, 0x3B	; 59
    336a:	f8 e0       	ldi	r31, 0x08	; 8
    336c:	df 01       	movw	r26, r30
    336e:	0d 90       	ld	r0, X+
    3370:	00 20       	and	r0, r0
    3372:	e9 f7       	brne	.-6      	; 0x336e <_upload_message+0x4a>
    3374:	11 97       	sbiw	r26, 0x01	; 1
    3376:	8d e0       	ldi	r24, 0x0D	; 13
    3378:	9a e0       	ldi	r25, 0x0A	; 10
    337a:	11 96       	adiw	r26, 0x01	; 1
    337c:	9c 93       	st	X, r25
    337e:	8e 93       	st	-X, r24
    3380:	12 96       	adiw	r26, 0x02	; 2
    3382:	1c 92       	st	X, r1
    3384:	01 90       	ld	r0, Z+
    3386:	00 20       	and	r0, r0
    3388:	e9 f7       	brne	.-6      	; 0x3384 <_upload_message+0x60>
    338a:	31 97       	sbiw	r30, 0x01	; 1
    338c:	eb 53       	subi	r30, 0x3B	; 59
    338e:	f8 40       	sbci	r31, 0x08	; 8
    3390:	ae 2f       	mov	r26, r30
    3392:	8b e3       	ldi	r24, 0x3B	; 59
    3394:	98 e0       	ldi	r25, 0x08	; 8
    3396:	ac 01       	movw	r20, r24
    3398:	6a 2f       	mov	r22, r26
    339a:	80 91 a2 08 	lds	r24, 0x08A2	; 0x8008a2 <_rn2483_serial>
    339e:	90 91 a3 08 	lds	r25, 0x08A3	; 0x8008a3 <_rn2483_serial+0x1>
    33a2:	a8 da       	rcall	.-2736   	; 0x28f4 <serial_send_bytes>
    33a4:	81 11       	cpse	r24, r1
    33a6:	0f c0       	rjmp	.+30     	; 0x33c6 <_upload_message+0xa2>
    33a8:	28 e2       	ldi	r18, 0x28	; 40
    33aa:	35 e0       	ldi	r19, 0x05	; 5
    33ac:	4d e2       	ldi	r20, 0x2D	; 45
    33ae:	50 e0       	ldi	r21, 0x00	; 0
    33b0:	6e ef       	ldi	r22, 0xFE	; 254
    33b2:	78 e0       	ldi	r23, 0x08	; 8
    33b4:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <_reply_buffer_handle>
    33b8:	90 91 a1 08 	lds	r25, 0x08A1	; 0x8008a1 <_reply_buffer_handle+0x1>
    33bc:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <xStreamBufferReceive>
    33c0:	8e ef       	ldi	r24, 0xFE	; 254
    33c2:	98 e0       	ldi	r25, 0x08	; 8
    33c4:	02 c0       	rjmp	.+4      	; 0x33ca <_upload_message+0xa6>
    33c6:	80 e0       	ldi	r24, 0x00	; 0
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	df 91       	pop	r29
    33cc:	cf 91       	pop	r28
    33ce:	1f 91       	pop	r17
    33d0:	0f 91       	pop	r16
    33d2:	08 95       	ret

000033d4 <_reply2return_code>:
    33d4:	af 92       	push	r10
    33d6:	bf 92       	push	r11
    33d8:	cf 92       	push	r12
    33da:	df 92       	push	r13
    33dc:	ef 92       	push	r14
    33de:	ff 92       	push	r15
    33e0:	0f 93       	push	r16
    33e2:	1f 93       	push	r17
    33e4:	cf 93       	push	r28
    33e6:	df 93       	push	r29
    33e8:	6c 01       	movw	r12, r24
    33ea:	fc 01       	movw	r30, r24
    33ec:	01 90       	ld	r0, Z+
    33ee:	00 20       	and	r0, r0
    33f0:	e9 f7       	brne	.-6      	; 0x33ec <_reply2return_code+0x18>
    33f2:	31 97       	sbiw	r30, 0x01	; 1
    33f4:	7f 01       	movw	r14, r30
    33f6:	e8 1a       	sub	r14, r24
    33f8:	f9 0a       	sbc	r15, r25
    33fa:	07 e5       	ldi	r16, 0x57	; 87
    33fc:	17 e0       	ldi	r17, 0x07	; 7
    33fe:	c0 e0       	ldi	r28, 0x00	; 0
    3400:	d0 e0       	ldi	r29, 0x00	; 0
    3402:	f8 01       	movw	r30, r16
    3404:	60 81       	ld	r22, Z
    3406:	71 81       	ldd	r23, Z+1	; 0x01
    3408:	a7 01       	movw	r20, r14
    340a:	c6 01       	movw	r24, r12
    340c:	0e 94 a2 23 	call	0x4744	; 0x4744 <strncasecmp>
    3410:	89 2b       	or	r24, r25
    3412:	49 f4       	brne	.+18     	; 0x3426 <_reply2return_code+0x52>
    3414:	fe 01       	movw	r30, r28
    3416:	ee 0f       	add	r30, r30
    3418:	ff 1f       	adc	r31, r31
    341a:	ec 0f       	add	r30, r28
    341c:	fd 1f       	adc	r31, r29
    341e:	ea 5a       	subi	r30, 0xAA	; 170
    3420:	f8 4f       	sbci	r31, 0xF8	; 248
    3422:	80 81       	ld	r24, Z
    3424:	07 c0       	rjmp	.+14     	; 0x3434 <_reply2return_code+0x60>
    3426:	21 96       	adiw	r28, 0x01	; 1
    3428:	0d 5f       	subi	r16, 0xFD	; 253
    342a:	1f 4f       	sbci	r17, 0xFF	; 255
    342c:	c1 31       	cpi	r28, 0x11	; 17
    342e:	d1 05       	cpc	r29, r1
    3430:	41 f7       	brne	.-48     	; 0x3402 <_reply2return_code+0x2e>
    3432:	80 e1       	ldi	r24, 0x10	; 16
    3434:	df 91       	pop	r29
    3436:	cf 91       	pop	r28
    3438:	1f 91       	pop	r17
    343a:	0f 91       	pop	r16
    343c:	ff 90       	pop	r15
    343e:	ef 90       	pop	r14
    3440:	df 90       	pop	r13
    3442:	cf 90       	pop	r12
    3444:	bf 90       	pop	r11
    3446:	af 90       	pop	r10
    3448:	08 95       	ret

0000344a <_upload_message_rc>:
    344a:	6c df       	rcall	.-296    	; 0x3324 <_upload_message>
    344c:	c3 cf       	rjmp	.-122    	; 0x33d4 <_reply2return_code>
    344e:	08 95       	ret

00003450 <lora_driver_flush_buffers>:
    3450:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <_reply_buffer_handle>
    3454:	90 91 a1 08 	lds	r25, 0x08A1	; 0x8008a1 <_reply_buffer_handle+0x1>
    3458:	0c 94 6a 0a 	jmp	0x14d4	; 0x14d4 <xStreamBufferReset>
    345c:	08 95       	ret

0000345e <lora_driver_create>:
    345e:	8f 92       	push	r8
    3460:	9f 92       	push	r9
    3462:	af 92       	push	r10
    3464:	cf 92       	push	r12
    3466:	ef 92       	push	r14
    3468:	0f 93       	push	r16
    346a:	cf 93       	push	r28
    346c:	c8 2f       	mov	r28, r24
    346e:	41 e0       	ldi	r20, 0x01	; 1
    3470:	60 e0       	ldi	r22, 0x00	; 0
    3472:	70 e0       	ldi	r23, 0x00	; 0
    3474:	88 ec       	ldi	r24, 0xC8	; 200
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	0e 94 3e 0a 	call	0x147c	; 0x147c <xStreamBufferGenericCreate>
    347c:	90 93 a1 08 	sts	0x08A1, r25	; 0x8008a1 <_reply_buffer_handle+0x1>
    3480:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <_reply_buffer_handle>
    3484:	0f 2e       	mov	r0, r31
    3486:	fc e4       	ldi	r31, 0x4C	; 76
    3488:	8f 2e       	mov	r8, r31
    348a:	f9 e1       	ldi	r31, 0x19	; 25
    348c:	9f 2e       	mov	r9, r31
    348e:	f0 2d       	mov	r31, r0
    3490:	68 94       	set
    3492:	aa 24       	eor	r10, r10
    3494:	a6 f8       	bld	r10, 6
    3496:	68 94       	set
    3498:	cc 24       	eor	r12, r12
    349a:	c6 f8       	bld	r12, 6
    349c:	e1 2c       	mov	r14, r1
    349e:	00 e0       	ldi	r16, 0x00	; 0
    34a0:	23 e0       	ldi	r18, 0x03	; 3
    34a2:	40 e0       	ldi	r20, 0x00	; 0
    34a4:	51 ee       	ldi	r21, 0xE1	; 225
    34a6:	60 e0       	ldi	r22, 0x00	; 0
    34a8:	70 e0       	ldi	r23, 0x00	; 0
    34aa:	8c 2f       	mov	r24, r28
    34ac:	5f d9       	rcall	.-3394   	; 0x276c <serial_new_instance>
    34ae:	90 93 a3 08 	sts	0x08A3, r25	; 0x8008a3 <_rn2483_serial+0x1>
    34b2:	80 93 a2 08 	sts	0x08A2, r24	; 0x8008a2 <_rn2483_serial>
    34b6:	e0 91 c9 09 	lds	r30, 0x09C9	; 0x8009c9 <register_access+0x8>
    34ba:	f0 91 ca 09 	lds	r31, 0x09CA	; 0x8009ca <register_access+0x9>
    34be:	64 e0       	ldi	r22, 0x04	; 4
    34c0:	87 e0       	ldi	r24, 0x07	; 7
    34c2:	91 e0       	ldi	r25, 0x01	; 1
    34c4:	19 95       	eicall
    34c6:	cf 91       	pop	r28
    34c8:	0f 91       	pop	r16
    34ca:	ef 90       	pop	r14
    34cc:	cf 90       	pop	r12
    34ce:	af 90       	pop	r10
    34d0:	9f 90       	pop	r9
    34d2:	8f 90       	pop	r8
    34d4:	08 95       	ret

000034d6 <lora_driver_reset_rn2483>:
    34d6:	88 23       	and	r24, r24
    34d8:	49 f0       	breq	.+18     	; 0x34ec <lora_driver_reset_rn2483+0x16>
    34da:	e0 91 d3 09 	lds	r30, 0x09D3	; 0x8009d3 <register_access+0x12>
    34de:	f0 91 d4 09 	lds	r31, 0x09D4	; 0x8009d4 <register_access+0x13>
    34e2:	64 e0       	ldi	r22, 0x04	; 4
    34e4:	88 e0       	ldi	r24, 0x08	; 8
    34e6:	91 e0       	ldi	r25, 0x01	; 1
    34e8:	19 95       	eicall
    34ea:	08 95       	ret
    34ec:	e0 91 c9 09 	lds	r30, 0x09C9	; 0x8009c9 <register_access+0x8>
    34f0:	f0 91 ca 09 	lds	r31, 0x09CA	; 0x8009ca <register_access+0x9>
    34f4:	64 e0       	ldi	r22, 0x04	; 4
    34f6:	88 e0       	ldi	r24, 0x08	; 8
    34f8:	91 e0       	ldi	r25, 0x01	; 1
    34fa:	19 95       	eicall
    34fc:	08 95       	ret

000034fe <lora_driver_rn2483_factory_reset>:
    34fe:	60 e0       	ldi	r22, 0x00	; 0
    3500:	70 e0       	ldi	r23, 0x00	; 0
    3502:	89 ed       	ldi	r24, 0xD9	; 217
    3504:	94 e0       	ldi	r25, 0x04	; 4
    3506:	0e df       	rcall	.-484    	; 0x3324 <_upload_message>
    3508:	ee ef       	ldi	r30, 0xFE	; 254
    350a:	f8 e0       	ldi	r31, 0x08	; 8
    350c:	01 90       	ld	r0, Z+
    350e:	00 20       	and	r0, r0
    3510:	e9 f7       	brne	.-6      	; 0x350c <lora_driver_rn2483_factory_reset+0xe>
    3512:	31 97       	sbiw	r30, 0x01	; 1
    3514:	ee 5f       	subi	r30, 0xFE	; 254
    3516:	f8 40       	sbci	r31, 0x08	; 8
    3518:	81 e0       	ldi	r24, 0x01	; 1
    351a:	75 97       	sbiw	r30, 0x15	; 21
    351c:	08 f0       	brcs	.+2      	; 0x3520 <lora_driver_rn2483_factory_reset+0x22>
    351e:	80 e0       	ldi	r24, 0x00	; 0
    3520:	08 95       	ret

00003522 <lora_driver_get_rn2483_hweui>:
    3522:	cf 93       	push	r28
    3524:	df 93       	push	r29
    3526:	ec 01       	movw	r28, r24
    3528:	60 e0       	ldi	r22, 0x00	; 0
    352a:	70 e0       	ldi	r23, 0x00	; 0
    352c:	8a ee       	ldi	r24, 0xEA	; 234
    352e:	94 e0       	ldi	r25, 0x04	; 4
    3530:	f9 de       	rcall	.-526    	; 0x3324 <_upload_message>
    3532:	ee ef       	ldi	r30, 0xFE	; 254
    3534:	f8 e0       	ldi	r31, 0x08	; 8
    3536:	01 90       	ld	r0, Z+
    3538:	00 20       	and	r0, r0
    353a:	e9 f7       	brne	.-6      	; 0x3536 <lora_driver_get_rn2483_hweui+0x14>
    353c:	ef 50       	subi	r30, 0x0F	; 15
    353e:	f9 40       	sbci	r31, 0x09	; 9
    3540:	39 f4       	brne	.+14     	; 0x3550 <lora_driver_get_rn2483_hweui+0x2e>
    3542:	6e ef       	ldi	r22, 0xFE	; 254
    3544:	78 e0       	ldi	r23, 0x08	; 8
    3546:	ce 01       	movw	r24, r28
    3548:	0e 94 9b 23 	call	0x4736	; 0x4736 <strcpy>
    354c:	80 e0       	ldi	r24, 0x00	; 0
    354e:	02 c0       	rjmp	.+4      	; 0x3554 <lora_driver_get_rn2483_hweui+0x32>
    3550:	18 82       	st	Y, r1
    3552:	81 e0       	ldi	r24, 0x01	; 1
    3554:	df 91       	pop	r29
    3556:	cf 91       	pop	r28
    3558:	08 95       	ret

0000355a <lora_driver_set_device_identifier>:
    355a:	fc 01       	movw	r30, r24
    355c:	01 90       	ld	r0, Z+
    355e:	00 20       	and	r0, r0
    3560:	e9 f7       	brne	.-6      	; 0x355c <lora_driver_set_device_identifier+0x2>
    3562:	9f 01       	movw	r18, r30
    3564:	21 51       	subi	r18, 0x11	; 17
    3566:	31 09       	sbc	r19, r1
    3568:	28 17       	cp	r18, r24
    356a:	39 07       	cpc	r19, r25
    356c:	29 f4       	brne	.+10     	; 0x3578 <lora_driver_set_device_identifier+0x1e>
    356e:	bc 01       	movw	r22, r24
    3570:	88 e1       	ldi	r24, 0x18	; 24
    3572:	95 e0       	ldi	r25, 0x05	; 5
    3574:	6a cf       	rjmp	.-300    	; 0x344a <_upload_message_rc>
    3576:	08 95       	ret
    3578:	89 e0       	ldi	r24, 0x09	; 9
    357a:	08 95       	ret

0000357c <lora_driver_set_application_identifier>:
    357c:	fc 01       	movw	r30, r24
    357e:	01 90       	ld	r0, Z+
    3580:	00 20       	and	r0, r0
    3582:	e9 f7       	brne	.-6      	; 0x357e <lora_driver_set_application_identifier+0x2>
    3584:	9f 01       	movw	r18, r30
    3586:	21 51       	subi	r18, 0x11	; 17
    3588:	31 09       	sbc	r19, r1
    358a:	28 17       	cp	r18, r24
    358c:	39 07       	cpc	r19, r25
    358e:	29 f4       	brne	.+10     	; 0x359a <lora_driver_set_application_identifier+0x1e>
    3590:	bc 01       	movw	r22, r24
    3592:	87 e2       	ldi	r24, 0x27	; 39
    3594:	95 e0       	ldi	r25, 0x05	; 5
    3596:	59 cf       	rjmp	.-334    	; 0x344a <_upload_message_rc>
    3598:	08 95       	ret
    359a:	89 e0       	ldi	r24, 0x09	; 9
    359c:	08 95       	ret

0000359e <lora_driver_set_application_key>:
    359e:	fc 01       	movw	r30, r24
    35a0:	01 90       	ld	r0, Z+
    35a2:	00 20       	and	r0, r0
    35a4:	e9 f7       	brne	.-6      	; 0x35a0 <lora_driver_set_application_key+0x2>
    35a6:	9f 01       	movw	r18, r30
    35a8:	21 52       	subi	r18, 0x21	; 33
    35aa:	31 09       	sbc	r19, r1
    35ac:	28 17       	cp	r18, r24
    35ae:	39 07       	cpc	r19, r25
    35b0:	29 f4       	brne	.+10     	; 0x35bc <lora_driver_set_application_key+0x1e>
    35b2:	bc 01       	movw	r22, r24
    35b4:	86 e3       	ldi	r24, 0x36	; 54
    35b6:	95 e0       	ldi	r25, 0x05	; 5
    35b8:	48 cf       	rjmp	.-368    	; 0x344a <_upload_message_rc>
    35ba:	08 95       	ret
    35bc:	89 e0       	ldi	r24, 0x09	; 9
    35be:	08 95       	ret

000035c0 <lora_driver_save_mac>:
    35c0:	60 e0       	ldi	r22, 0x00	; 0
    35c2:	70 e0       	ldi	r23, 0x00	; 0
    35c4:	85 e7       	ldi	r24, 0x75	; 117
    35c6:	95 e0       	ldi	r25, 0x05	; 5
    35c8:	40 cf       	rjmp	.-384    	; 0x344a <_upload_message_rc>
    35ca:	08 95       	ret

000035cc <lora_driver_join>:
    35cc:	e8 2f       	mov	r30, r24
    35ce:	f0 e0       	ldi	r31, 0x00	; 0
    35d0:	ee 0f       	add	r30, r30
    35d2:	ff 1f       	adc	r31, r31
    35d4:	ee 5a       	subi	r30, 0xAE	; 174
    35d6:	f8 4f       	sbci	r31, 0xF8	; 248
    35d8:	60 81       	ld	r22, Z
    35da:	71 81       	ldd	r23, Z+1	; 0x01
    35dc:	8e e7       	ldi	r24, 0x7E	; 126
    35de:	95 e0       	ldi	r25, 0x05	; 5
    35e0:	34 df       	rcall	.-408    	; 0x344a <_upload_message_rc>
    35e2:	81 11       	cpse	r24, r1
    35e4:	12 c0       	rjmp	.+36     	; 0x360a <lora_driver_join+0x3e>
    35e6:	28 e2       	ldi	r18, 0x28	; 40
    35e8:	35 e0       	ldi	r19, 0x05	; 5
    35ea:	4d e2       	ldi	r20, 0x2D	; 45
    35ec:	50 e0       	ldi	r21, 0x00	; 0
    35ee:	6e ef       	ldi	r22, 0xFE	; 254
    35f0:	78 e0       	ldi	r23, 0x08	; 8
    35f2:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <_reply_buffer_handle>
    35f6:	90 91 a1 08 	lds	r25, 0x08A1	; 0x8008a1 <_reply_buffer_handle+0x1>
    35fa:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <xStreamBufferReceive>
    35fe:	88 23       	and	r24, r24
    3600:	21 f0       	breq	.+8      	; 0x360a <lora_driver_join+0x3e>
    3602:	8e ef       	ldi	r24, 0xFE	; 254
    3604:	98 e0       	ldi	r25, 0x08	; 8
    3606:	e6 ce       	rjmp	.-564    	; 0x33d4 <_reply2return_code>
    3608:	08 95       	ret
    360a:	8e ef       	ldi	r24, 0xFE	; 254
    360c:	98 e0       	ldi	r25, 0x08	; 8
    360e:	e2 ce       	rjmp	.-572    	; 0x33d4 <_reply2return_code>
    3610:	08 95       	ret

00003612 <lora_driver_set_adaptive_data_rate>:
    3612:	81 30       	cpi	r24, 0x01	; 1
    3614:	19 f0       	breq	.+6      	; 0x361c <lora_driver_set_adaptive_data_rate+0xa>
    3616:	6d e9       	ldi	r22, 0x9D	; 157
    3618:	75 e0       	ldi	r23, 0x05	; 5
    361a:	02 c0       	rjmp	.+4      	; 0x3620 <lora_driver_set_adaptive_data_rate+0xe>
    361c:	66 e7       	ldi	r22, 0x76	; 118
    361e:	76 e0       	ldi	r23, 0x06	; 6
    3620:	81 ea       	ldi	r24, 0xA1	; 161
    3622:	95 e0       	ldi	r25, 0x05	; 5
    3624:	12 cf       	rjmp	.-476    	; 0x344a <_upload_message_rc>
    3626:	08 95       	ret

00003628 <lora_driver_set_data_rate>:
    3628:	88 30       	cpi	r24, 0x08	; 8
    362a:	c0 f4       	brcc	.+48     	; 0x365c <lora_driver_set_data_rate+0x34>
    362c:	1f 92       	push	r1
    362e:	8f 93       	push	r24
    3630:	89 eb       	ldi	r24, 0xB9	; 185
    3632:	95 e0       	ldi	r25, 0x05	; 5
    3634:	9f 93       	push	r25
    3636:	8f 93       	push	r24
    3638:	81 ed       	ldi	r24, 0xD1	; 209
    363a:	98 e0       	ldi	r25, 0x08	; 8
    363c:	9f 93       	push	r25
    363e:	8f 93       	push	r24
    3640:	0e 94 fd 23 	call	0x47fa	; 0x47fa <sprintf>
    3644:	60 e0       	ldi	r22, 0x00	; 0
    3646:	70 e0       	ldi	r23, 0x00	; 0
    3648:	81 ed       	ldi	r24, 0xD1	; 209
    364a:	98 e0       	ldi	r25, 0x08	; 8
    364c:	fe de       	rcall	.-516    	; 0x344a <_upload_message_rc>
    364e:	0f 90       	pop	r0
    3650:	0f 90       	pop	r0
    3652:	0f 90       	pop	r0
    3654:	0f 90       	pop	r0
    3656:	0f 90       	pop	r0
    3658:	0f 90       	pop	r0
    365a:	08 95       	ret
    365c:	89 e0       	ldi	r24, 0x09	; 9
    365e:	08 95       	ret

00003660 <lora_driver_configure_to_eu868>:
    3660:	2f 92       	push	r2
    3662:	3f 92       	push	r3
    3664:	4f 92       	push	r4
    3666:	5f 92       	push	r5
    3668:	6f 92       	push	r6
    366a:	7f 92       	push	r7
    366c:	8f 92       	push	r8
    366e:	9f 92       	push	r9
    3670:	af 92       	push	r10
    3672:	bf 92       	push	r11
    3674:	cf 92       	push	r12
    3676:	df 92       	push	r13
    3678:	ef 92       	push	r14
    367a:	ff 92       	push	r15
    367c:	0f 93       	push	r16
    367e:	1f 93       	push	r17
    3680:	cf 93       	push	r28
    3682:	df 93       	push	r29
    3684:	66 ee       	ldi	r22, 0xE6	; 230
    3686:	75 e0       	ldi	r23, 0x05	; 5
    3688:	82 ef       	ldi	r24, 0xF2	; 242
    368a:	95 e0       	ldi	r25, 0x05	; 5
    368c:	4b de       	rcall	.-874    	; 0x3324 <_upload_message>
    368e:	a2 de       	rcall	.-700    	; 0x33d4 <_reply2return_code>
    3690:	81 11       	cpse	r24, r1
    3692:	a6 c0       	rjmp	.+332    	; 0x37e0 <lora_driver_configure_to_eu868+0x180>
    3694:	6e ef       	ldi	r22, 0xFE	; 254
    3696:	75 e0       	ldi	r23, 0x05	; 5
    3698:	84 e0       	ldi	r24, 0x04	; 4
    369a:	96 e0       	ldi	r25, 0x06	; 6
    369c:	43 de       	rcall	.-890    	; 0x3324 <_upload_message>
    369e:	9a de       	rcall	.-716    	; 0x33d4 <_reply2return_code>
    36a0:	81 11       	cpse	r24, r1
    36a2:	9e c0       	rjmp	.+316    	; 0x37e0 <lora_driver_configure_to_eu868+0x180>
    36a4:	c0 e0       	ldi	r28, 0x00	; 0
    36a6:	d0 e0       	ldi	r29, 0x00	; 0
    36a8:	0f 2e       	mov	r0, r31
    36aa:	f0 e6       	ldi	r31, 0x60	; 96
    36ac:	8f 2e       	mov	r8, r31
    36ae:	f5 ee       	ldi	r31, 0xE5	; 229
    36b0:	9f 2e       	mov	r9, r31
    36b2:	fe ea       	ldi	r31, 0xAE	; 174
    36b4:	af 2e       	mov	r10, r31
    36b6:	f3 e3       	ldi	r31, 0x33	; 51
    36b8:	bf 2e       	mov	r11, r31
    36ba:	f0 2d       	mov	r31, r0
    36bc:	0f 2e       	mov	r0, r31
    36be:	f7 e1       	ldi	r31, 0x17	; 23
    36c0:	ef 2e       	mov	r14, r31
    36c2:	f6 e0       	ldi	r31, 0x06	; 6
    36c4:	ff 2e       	mov	r15, r31
    36c6:	f0 2d       	mov	r31, r0
    36c8:	01 ed       	ldi	r16, 0xD1	; 209
    36ca:	18 e0       	ldi	r17, 0x08	; 8
    36cc:	0f 2e       	mov	r0, r31
    36ce:	f0 e3       	ldi	r31, 0x30	; 48
    36d0:	cf 2e       	mov	r12, r31
    36d2:	f6 e0       	ldi	r31, 0x06	; 6
    36d4:	df 2e       	mov	r13, r31
    36d6:	f0 2d       	mov	r31, r0
    36d8:	0f 2e       	mov	r0, r31
    36da:	f7 e4       	ldi	r31, 0x47	; 71
    36dc:	6f 2e       	mov	r6, r31
    36de:	f6 e0       	ldi	r31, 0x06	; 6
    36e0:	7f 2e       	mov	r7, r31
    36e2:	f0 2d       	mov	r31, r0
    36e4:	0f 2e       	mov	r0, r31
    36e6:	f1 e6       	ldi	r31, 0x61	; 97
    36e8:	4f 2e       	mov	r4, r31
    36ea:	f6 e0       	ldi	r31, 0x06	; 6
    36ec:	5f 2e       	mov	r5, r31
    36ee:	f0 2d       	mov	r31, r0
    36f0:	df 93       	push	r29
    36f2:	cf 93       	push	r28
    36f4:	ff 92       	push	r15
    36f6:	ef 92       	push	r14
    36f8:	1f 93       	push	r17
    36fa:	0f 93       	push	r16
    36fc:	0e 94 fd 23 	call	0x47fa	; 0x47fa <sprintf>
    3700:	60 e0       	ldi	r22, 0x00	; 0
    3702:	70 e0       	ldi	r23, 0x00	; 0
    3704:	c8 01       	movw	r24, r16
    3706:	0e de       	rcall	.-996    	; 0x3324 <_upload_message>
    3708:	65 de       	rcall	.-822    	; 0x33d4 <_reply2return_code>
    370a:	0f 90       	pop	r0
    370c:	0f 90       	pop	r0
    370e:	0f 90       	pop	r0
    3710:	0f 90       	pop	r0
    3712:	0f 90       	pop	r0
    3714:	0f 90       	pop	r0
    3716:	81 11       	cpse	r24, r1
    3718:	63 c0       	rjmp	.+198    	; 0x37e0 <lora_driver_configure_to_eu868+0x180>
    371a:	c3 30       	cpi	r28, 0x03	; 3
    371c:	08 f4       	brcc	.+2      	; 0x3720 <lora_driver_configure_to_eu868+0xc0>
    371e:	4d c0       	rjmp	.+154    	; 0x37ba <lora_driver_configure_to_eu868+0x15a>
    3720:	bf 92       	push	r11
    3722:	af 92       	push	r10
    3724:	9f 92       	push	r9
    3726:	8f 92       	push	r8
    3728:	df 93       	push	r29
    372a:	cf 93       	push	r28
    372c:	df 92       	push	r13
    372e:	cf 92       	push	r12
    3730:	1f 93       	push	r17
    3732:	0f 93       	push	r16
    3734:	0e 94 fd 23 	call	0x47fa	; 0x47fa <sprintf>
    3738:	60 e0       	ldi	r22, 0x00	; 0
    373a:	70 e0       	ldi	r23, 0x00	; 0
    373c:	c8 01       	movw	r24, r16
    373e:	f2 dd       	rcall	.-1052   	; 0x3324 <_upload_message>
    3740:	49 de       	rcall	.-878    	; 0x33d4 <_reply2return_code>
    3742:	2d b7       	in	r18, 0x3d	; 61
    3744:	3e b7       	in	r19, 0x3e	; 62
    3746:	26 5f       	subi	r18, 0xF6	; 246
    3748:	3f 4f       	sbci	r19, 0xFF	; 255
    374a:	0f b6       	in	r0, 0x3f	; 63
    374c:	f8 94       	cli
    374e:	3e bf       	out	0x3e, r19	; 62
    3750:	0f be       	out	0x3f, r0	; 63
    3752:	2d bf       	out	0x3d, r18	; 61
    3754:	81 11       	cpse	r24, r1
    3756:	44 c0       	rjmp	.+136    	; 0x37e0 <lora_driver_configure_to_eu868+0x180>
    3758:	df 93       	push	r29
    375a:	cf 93       	push	r28
    375c:	7f 92       	push	r7
    375e:	6f 92       	push	r6
    3760:	1f 93       	push	r17
    3762:	0f 93       	push	r16
    3764:	0e 94 fd 23 	call	0x47fa	; 0x47fa <sprintf>
    3768:	60 e0       	ldi	r22, 0x00	; 0
    376a:	70 e0       	ldi	r23, 0x00	; 0
    376c:	c8 01       	movw	r24, r16
    376e:	da dd       	rcall	.-1100   	; 0x3324 <_upload_message>
    3770:	31 de       	rcall	.-926    	; 0x33d4 <_reply2return_code>
    3772:	0f 90       	pop	r0
    3774:	0f 90       	pop	r0
    3776:	0f 90       	pop	r0
    3778:	0f 90       	pop	r0
    377a:	0f 90       	pop	r0
    377c:	0f 90       	pop	r0
    377e:	81 11       	cpse	r24, r1
    3780:	2f c0       	rjmp	.+94     	; 0x37e0 <lora_driver_configure_to_eu868+0x180>
    3782:	df 93       	push	r29
    3784:	cf 93       	push	r28
    3786:	5f 92       	push	r5
    3788:	4f 92       	push	r4
    378a:	1f 93       	push	r17
    378c:	0f 93       	push	r16
    378e:	0e 94 fd 23 	call	0x47fa	; 0x47fa <sprintf>
    3792:	60 e0       	ldi	r22, 0x00	; 0
    3794:	70 e0       	ldi	r23, 0x00	; 0
    3796:	c8 01       	movw	r24, r16
    3798:	c5 dd       	rcall	.-1142   	; 0x3324 <_upload_message>
    379a:	1c de       	rcall	.-968    	; 0x33d4 <_reply2return_code>
    379c:	0f 90       	pop	r0
    379e:	0f 90       	pop	r0
    37a0:	0f 90       	pop	r0
    37a2:	0f 90       	pop	r0
    37a4:	0f 90       	pop	r0
    37a6:	0f 90       	pop	r0
    37a8:	81 11       	cpse	r24, r1
    37aa:	1a c0       	rjmp	.+52     	; 0x37e0 <lora_driver_configure_to_eu868+0x180>
    37ac:	30 e4       	ldi	r19, 0x40	; 64
    37ae:	83 0e       	add	r8, r19
    37b0:	3d e0       	ldi	r19, 0x0D	; 13
    37b2:	93 1e       	adc	r9, r19
    37b4:	33 e0       	ldi	r19, 0x03	; 3
    37b6:	a3 1e       	adc	r10, r19
    37b8:	b1 1c       	adc	r11, r1
    37ba:	21 96       	adiw	r28, 0x01	; 1
    37bc:	c8 30       	cpi	r28, 0x08	; 8
    37be:	d1 05       	cpc	r29, r1
    37c0:	09 f0       	breq	.+2      	; 0x37c4 <lora_driver_configure_to_eu868+0x164>
    37c2:	96 cf       	rjmp	.-212    	; 0x36f0 <lora_driver_configure_to_eu868+0x90>
    37c4:	60 e0       	ldi	r22, 0x00	; 0
    37c6:	70 e0       	ldi	r23, 0x00	; 0
    37c8:	89 e7       	ldi	r24, 0x79	; 121
    37ca:	96 e0       	ldi	r25, 0x06	; 6
    37cc:	ab dd       	rcall	.-1194   	; 0x3324 <_upload_message>
    37ce:	02 de       	rcall	.-1020   	; 0x33d4 <_reply2return_code>
    37d0:	81 11       	cpse	r24, r1
    37d2:	06 c0       	rjmp	.+12     	; 0x37e0 <lora_driver_configure_to_eu868+0x180>
    37d4:	60 e0       	ldi	r22, 0x00	; 0
    37d6:	70 e0       	ldi	r23, 0x00	; 0
    37d8:	8a e8       	ldi	r24, 0x8A	; 138
    37da:	96 e0       	ldi	r25, 0x06	; 6
    37dc:	a3 dd       	rcall	.-1210   	; 0x3324 <_upload_message>
    37de:	fa dd       	rcall	.-1036   	; 0x33d4 <_reply2return_code>
    37e0:	df 91       	pop	r29
    37e2:	cf 91       	pop	r28
    37e4:	1f 91       	pop	r17
    37e6:	0f 91       	pop	r16
    37e8:	ff 90       	pop	r15
    37ea:	ef 90       	pop	r14
    37ec:	df 90       	pop	r13
    37ee:	cf 90       	pop	r12
    37f0:	bf 90       	pop	r11
    37f2:	af 90       	pop	r10
    37f4:	9f 90       	pop	r9
    37f6:	8f 90       	pop	r8
    37f8:	7f 90       	pop	r7
    37fa:	6f 90       	pop	r6
    37fc:	5f 90       	pop	r5
    37fe:	4f 90       	pop	r4
    3800:	3f 90       	pop	r3
    3802:	2f 90       	pop	r2
    3804:	08 95       	ret

00003806 <lora_driver_set_otaa_identity>:
    3806:	ef 92       	push	r14
    3808:	ff 92       	push	r15
    380a:	0f 93       	push	r16
    380c:	1f 93       	push	r17
    380e:	cf 93       	push	r28
    3810:	df 93       	push	r29
    3812:	ec 01       	movw	r28, r24
    3814:	8b 01       	movw	r16, r22
    3816:	7a 01       	movw	r14, r20
    3818:	81 e0       	ldi	r24, 0x01	; 1
    381a:	fb de       	rcall	.-522    	; 0x3612 <lora_driver_set_adaptive_data_rate>
    381c:	81 11       	cpse	r24, r1
    381e:	11 c0       	rjmp	.+34     	; 0x3842 <lora_driver_set_otaa_identity+0x3c>
    3820:	ce 01       	movw	r24, r28
    3822:	ac de       	rcall	.-680    	; 0x357c <lora_driver_set_application_identifier>
    3824:	81 11       	cpse	r24, r1
    3826:	0d c0       	rjmp	.+26     	; 0x3842 <lora_driver_set_otaa_identity+0x3c>
    3828:	c8 01       	movw	r24, r16
    382a:	b9 de       	rcall	.-654    	; 0x359e <lora_driver_set_application_key>
    382c:	81 11       	cpse	r24, r1
    382e:	09 c0       	rjmp	.+18     	; 0x3842 <lora_driver_set_otaa_identity+0x3c>
    3830:	c7 01       	movw	r24, r14
    3832:	93 de       	rcall	.-730    	; 0x355a <lora_driver_set_device_identifier>
    3834:	81 11       	cpse	r24, r1
    3836:	05 c0       	rjmp	.+10     	; 0x3842 <lora_driver_set_otaa_identity+0x3c>
    3838:	85 e0       	ldi	r24, 0x05	; 5
    383a:	f6 de       	rcall	.-532    	; 0x3628 <lora_driver_set_data_rate>
    383c:	81 11       	cpse	r24, r1
    383e:	01 c0       	rjmp	.+2      	; 0x3842 <lora_driver_set_otaa_identity+0x3c>
    3840:	bf de       	rcall	.-642    	; 0x35c0 <lora_driver_save_mac>
    3842:	df 91       	pop	r29
    3844:	cf 91       	pop	r28
    3846:	1f 91       	pop	r17
    3848:	0f 91       	pop	r16
    384a:	ff 90       	pop	r15
    384c:	ef 90       	pop	r14
    384e:	08 95       	ret

00003850 <lora_driver_map_return_code_to_text>:
    3850:	90 e0       	ldi	r25, 0x00	; 0
    3852:	fc 01       	movw	r30, r24
    3854:	ee 0f       	add	r30, r30
    3856:	ff 1f       	adc	r31, r31
    3858:	8e 0f       	add	r24, r30
    385a:	9f 1f       	adc	r25, r31
    385c:	fc 01       	movw	r30, r24
    385e:	ea 5a       	subi	r30, 0xAA	; 170
    3860:	f8 4f       	sbci	r31, 0xF8	; 248
    3862:	81 81       	ldd	r24, Z+1	; 0x01
    3864:	92 81       	ldd	r25, Z+2	; 0x02
    3866:	08 95       	ret

00003868 <reg_read_register>:
    3868:	fc 01       	movw	r30, r24
    386a:	80 81       	ld	r24, Z
    386c:	08 95       	ret

0000386e <reg_read_bit>:
    386e:	fc 01       	movw	r30, r24
    3870:	20 81       	ld	r18, Z
    3872:	81 e0       	ldi	r24, 0x01	; 1
    3874:	90 e0       	ldi	r25, 0x00	; 0
    3876:	02 c0       	rjmp	.+4      	; 0x387c <reg_read_bit+0xe>
    3878:	88 0f       	add	r24, r24
    387a:	99 1f       	adc	r25, r25
    387c:	6a 95       	dec	r22
    387e:	e2 f7       	brpl	.-8      	; 0x3878 <reg_read_bit+0xa>
    3880:	82 23       	and	r24, r18
    3882:	08 95       	ret

00003884 <reg_read_bits>:
    3884:	fc 01       	movw	r30, r24
    3886:	80 81       	ld	r24, Z
    3888:	86 23       	and	r24, r22
    388a:	08 95       	ret

0000388c <reg_set_register>:
    388c:	fc 01       	movw	r30, r24
    388e:	60 83       	st	Z, r22
    3890:	08 95       	ret

00003892 <reg_clear_register>:
    3892:	fc 01       	movw	r30, r24
    3894:	10 82       	st	Z, r1
    3896:	08 95       	ret

00003898 <reg_set_bit>:
    3898:	fc 01       	movw	r30, r24
    389a:	40 81       	ld	r20, Z
    389c:	21 e0       	ldi	r18, 0x01	; 1
    389e:	30 e0       	ldi	r19, 0x00	; 0
    38a0:	02 c0       	rjmp	.+4      	; 0x38a6 <reg_set_bit+0xe>
    38a2:	22 0f       	add	r18, r18
    38a4:	33 1f       	adc	r19, r19
    38a6:	6a 95       	dec	r22
    38a8:	e2 f7       	brpl	.-8      	; 0x38a2 <reg_set_bit+0xa>
    38aa:	24 2b       	or	r18, r20
    38ac:	20 83       	st	Z, r18
    38ae:	08 95       	ret

000038b0 <reg_set_bits>:
    38b0:	fc 01       	movw	r30, r24
    38b2:	20 81       	ld	r18, Z
    38b4:	62 2b       	or	r22, r18
    38b6:	60 83       	st	Z, r22
    38b8:	08 95       	ret

000038ba <reg_toggle_bit>:
    38ba:	fc 01       	movw	r30, r24
    38bc:	40 81       	ld	r20, Z
    38be:	21 e0       	ldi	r18, 0x01	; 1
    38c0:	30 e0       	ldi	r19, 0x00	; 0
    38c2:	02 c0       	rjmp	.+4      	; 0x38c8 <reg_toggle_bit+0xe>
    38c4:	22 0f       	add	r18, r18
    38c6:	33 1f       	adc	r19, r19
    38c8:	6a 95       	dec	r22
    38ca:	e2 f7       	brpl	.-8      	; 0x38c4 <reg_toggle_bit+0xa>
    38cc:	24 27       	eor	r18, r20
    38ce:	20 83       	st	Z, r18
    38d0:	08 95       	ret

000038d2 <reg_toggle_bits>:
    38d2:	fc 01       	movw	r30, r24
    38d4:	20 81       	ld	r18, Z
    38d6:	62 27       	eor	r22, r18
    38d8:	60 83       	st	Z, r22
    38da:	08 95       	ret

000038dc <reg_clear_bit>:
    38dc:	fc 01       	movw	r30, r24
    38de:	90 81       	ld	r25, Z
    38e0:	21 e0       	ldi	r18, 0x01	; 1
    38e2:	30 e0       	ldi	r19, 0x00	; 0
    38e4:	02 c0       	rjmp	.+4      	; 0x38ea <reg_clear_bit+0xe>
    38e6:	22 0f       	add	r18, r18
    38e8:	33 1f       	adc	r19, r19
    38ea:	6a 95       	dec	r22
    38ec:	e2 f7       	brpl	.-8      	; 0x38e6 <reg_clear_bit+0xa>
    38ee:	20 95       	com	r18
    38f0:	29 23       	and	r18, r25
    38f2:	20 83       	st	Z, r18
    38f4:	08 95       	ret

000038f6 <reg_clear_bits>:
    38f6:	fc 01       	movw	r30, r24
    38f8:	90 81       	ld	r25, Z
    38fa:	60 95       	com	r22
    38fc:	69 23       	and	r22, r25
    38fe:	60 83       	st	Z, r22
    3900:	08 95       	ret

00003902 <_serial_call_back>:
    3902:	80 91 2e 09 	lds	r24, 0x092E	; 0x80092e <crc_sum.1941>
    3906:	86 0f       	add	r24, r22
    3908:	80 93 2e 09 	sts	0x092E, r24	; 0x80092e <crc_sum.1941>
    390c:	90 91 31 09 	lds	r25, 0x0931	; 0x800931 <_mh_state>
    3910:	91 30       	cpi	r25, 0x01	; 1
    3912:	79 f0       	breq	.+30     	; 0x3932 <_serial_call_back+0x30>
    3914:	28 f0       	brcs	.+10     	; 0x3920 <_serial_call_back+0x1e>
    3916:	92 30       	cpi	r25, 0x02	; 2
    3918:	a9 f0       	breq	.+42     	; 0x3944 <_serial_call_back+0x42>
    391a:	93 30       	cpi	r25, 0x03	; 3
    391c:	19 f1       	breq	.+70     	; 0x3964 <_serial_call_back+0x62>
    391e:	08 95       	ret
    3920:	6f 3f       	cpi	r22, 0xFF	; 255
    3922:	09 f0       	breq	.+2      	; 0x3926 <_serial_call_back+0x24>
    3924:	48 c0       	rjmp	.+144    	; 0x39b6 <_serial_call_back+0xb4>
    3926:	10 92 2e 09 	sts	0x092E, r1	; 0x80092e <crc_sum.1941>
    392a:	81 e0       	ldi	r24, 0x01	; 1
    392c:	80 93 31 09 	sts	0x0931, r24	; 0x800931 <_mh_state>
    3930:	08 95       	ret
    3932:	66 38       	cpi	r22, 0x86	; 134
    3934:	09 f0       	breq	.+2      	; 0x3938 <_serial_call_back+0x36>
    3936:	3f c0       	rjmp	.+126    	; 0x39b6 <_serial_call_back+0xb4>
    3938:	10 92 2d 09 	sts	0x092D, r1	; 0x80092d <inDex.1939>
    393c:	82 e0       	ldi	r24, 0x02	; 2
    393e:	80 93 31 09 	sts	0x0931, r24	; 0x800931 <_mh_state>
    3942:	08 95       	ret
    3944:	e0 91 2d 09 	lds	r30, 0x092D	; 0x80092d <inDex.1939>
    3948:	81 e0       	ldi	r24, 0x01	; 1
    394a:	8e 0f       	add	r24, r30
    394c:	80 93 2d 09 	sts	0x092D, r24	; 0x80092d <inDex.1939>
    3950:	f0 e0       	ldi	r31, 0x00	; 0
    3952:	e5 5d       	subi	r30, 0xD5	; 213
    3954:	f6 4f       	sbci	r31, 0xF6	; 246
    3956:	60 83       	st	Z, r22
    3958:	82 30       	cpi	r24, 0x02	; 2
    395a:	69 f5       	brne	.+90     	; 0x39b6 <_serial_call_back+0xb4>
    395c:	83 e0       	ldi	r24, 0x03	; 3
    395e:	80 93 31 09 	sts	0x0931, r24	; 0x800931 <_mh_state>
    3962:	08 95       	ret
    3964:	90 91 2d 09 	lds	r25, 0x092D	; 0x80092d <inDex.1939>
    3968:	21 e0       	ldi	r18, 0x01	; 1
    396a:	29 0f       	add	r18, r25
    396c:	20 93 2d 09 	sts	0x092D, r18	; 0x80092d <inDex.1939>
    3970:	96 30       	cpi	r25, 0x06	; 6
    3972:	09 f5       	brne	.+66     	; 0x39b6 <_serial_call_back+0xb4>
    3974:	81 11       	cpse	r24, r1
    3976:	0e c0       	rjmp	.+28     	; 0x3994 <_serial_call_back+0x92>
    3978:	eb e2       	ldi	r30, 0x2B	; 43
    397a:	f9 e0       	ldi	r31, 0x09	; 9
    397c:	80 81       	ld	r24, Z
    397e:	90 e0       	ldi	r25, 0x00	; 0
    3980:	98 2f       	mov	r25, r24
    3982:	88 27       	eor	r24, r24
    3984:	21 81       	ldd	r18, Z+1	; 0x01
    3986:	82 0f       	add	r24, r18
    3988:	91 1d       	adc	r25, r1
    398a:	90 93 33 09 	sts	0x0933, r25	; 0x800933 <_ppm+0x1>
    398e:	80 93 32 09 	sts	0x0932, r24	; 0x800932 <_ppm>
    3992:	04 c0       	rjmp	.+8      	; 0x399c <_serial_call_back+0x9a>
    3994:	10 92 33 09 	sts	0x0933, r1	; 0x800933 <_ppm+0x1>
    3998:	10 92 32 09 	sts	0x0932, r1	; 0x800932 <_ppm>
    399c:	10 92 31 09 	sts	0x0931, r1	; 0x800931 <_mh_state>
    39a0:	e0 91 2f 09 	lds	r30, 0x092F	; 0x80092f <_app_call_back>
    39a4:	f0 91 30 09 	lds	r31, 0x0930	; 0x800930 <_app_call_back+0x1>
    39a8:	30 97       	sbiw	r30, 0x00	; 0
    39aa:	29 f0       	breq	.+10     	; 0x39b6 <_serial_call_back+0xb4>
    39ac:	80 91 32 09 	lds	r24, 0x0932	; 0x800932 <_ppm>
    39b0:	90 91 33 09 	lds	r25, 0x0933	; 0x800933 <_ppm+0x1>
    39b4:	19 95       	eicall
    39b6:	08 95       	ret

000039b8 <mh_z19_create>:
    39b8:	8f 92       	push	r8
    39ba:	9f 92       	push	r9
    39bc:	af 92       	push	r10
    39be:	cf 92       	push	r12
    39c0:	ef 92       	push	r14
    39c2:	0f 93       	push	r16
    39c4:	cf 93       	push	r28
    39c6:	df 93       	push	r29
    39c8:	eb 01       	movw	r28, r22
    39ca:	0f 2e       	mov	r0, r31
    39cc:	f1 e8       	ldi	r31, 0x81	; 129
    39ce:	8f 2e       	mov	r8, r31
    39d0:	fc e1       	ldi	r31, 0x1C	; 28
    39d2:	9f 2e       	mov	r9, r31
    39d4:	f0 2d       	mov	r31, r0
    39d6:	68 94       	set
    39d8:	aa 24       	eor	r10, r10
    39da:	a4 f8       	bld	r10, 4
    39dc:	68 94       	set
    39de:	cc 24       	eor	r12, r12
    39e0:	c4 f8       	bld	r12, 4
    39e2:	e1 2c       	mov	r14, r1
    39e4:	00 e0       	ldi	r16, 0x00	; 0
    39e6:	23 e0       	ldi	r18, 0x03	; 3
    39e8:	40 e8       	ldi	r20, 0x80	; 128
    39ea:	55 e2       	ldi	r21, 0x25	; 37
    39ec:	60 e0       	ldi	r22, 0x00	; 0
    39ee:	70 e0       	ldi	r23, 0x00	; 0
    39f0:	0e 94 b6 13 	call	0x276c	; 0x276c <serial_new_instance>
    39f4:	90 93 35 09 	sts	0x0935, r25	; 0x800935 <_serial+0x1>
    39f8:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <_serial>
    39fc:	d0 93 30 09 	sts	0x0930, r29	; 0x800930 <_app_call_back+0x1>
    3a00:	c0 93 2f 09 	sts	0x092F, r28	; 0x80092f <_app_call_back>
    3a04:	df 91       	pop	r29
    3a06:	cf 91       	pop	r28
    3a08:	0f 91       	pop	r16
    3a0a:	ef 90       	pop	r14
    3a0c:	cf 90       	pop	r12
    3a0e:	af 90       	pop	r10
    3a10:	9f 90       	pop	r9
    3a12:	8f 90       	pop	r8
    3a14:	08 95       	ret

00003a16 <mh_z19_take_meassuring>:
    3a16:	cf 93       	push	r28
    3a18:	df 93       	push	r29
    3a1a:	cd b7       	in	r28, 0x3d	; 61
    3a1c:	de b7       	in	r29, 0x3e	; 62
    3a1e:	29 97       	sbiw	r28, 0x09	; 9
    3a20:	0f b6       	in	r0, 0x3f	; 63
    3a22:	f8 94       	cli
    3a24:	de bf       	out	0x3e, r29	; 62
    3a26:	0f be       	out	0x3f, r0	; 63
    3a28:	cd bf       	out	0x3d, r28	; 61
    3a2a:	89 e0       	ldi	r24, 0x09	; 9
    3a2c:	e1 e2       	ldi	r30, 0x21	; 33
    3a2e:	f2 e0       	ldi	r31, 0x02	; 2
    3a30:	9e 01       	movw	r18, r28
    3a32:	2f 5f       	subi	r18, 0xFF	; 255
    3a34:	3f 4f       	sbci	r19, 0xFF	; 255
    3a36:	d9 01       	movw	r26, r18
    3a38:	01 90       	ld	r0, Z+
    3a3a:	0d 92       	st	X+, r0
    3a3c:	8a 95       	dec	r24
    3a3e:	e1 f7       	brne	.-8      	; 0x3a38 <mh_z19_take_meassuring+0x22>
    3a40:	10 92 33 09 	sts	0x0933, r1	; 0x800933 <_ppm+0x1>
    3a44:	10 92 32 09 	sts	0x0932, r1	; 0x800932 <_ppm>
    3a48:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <_serial>
    3a4c:	90 91 35 09 	lds	r25, 0x0935	; 0x800935 <_serial+0x1>
    3a50:	00 97       	sbiw	r24, 0x00	; 0
    3a52:	39 f0       	breq	.+14     	; 0x3a62 <mh_z19_take_meassuring+0x4c>
    3a54:	42 2f       	mov	r20, r18
    3a56:	53 2f       	mov	r21, r19
    3a58:	69 e0       	ldi	r22, 0x09	; 9
    3a5a:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <serial_send_bytes>
    3a5e:	80 e0       	ldi	r24, 0x00	; 0
    3a60:	01 c0       	rjmp	.+2      	; 0x3a64 <mh_z19_take_meassuring+0x4e>
    3a62:	82 e0       	ldi	r24, 0x02	; 2
    3a64:	29 96       	adiw	r28, 0x09	; 9
    3a66:	0f b6       	in	r0, 0x3f	; 63
    3a68:	f8 94       	cli
    3a6a:	de bf       	out	0x3e, r29	; 62
    3a6c:	0f be       	out	0x3f, r0	; 63
    3a6e:	cd bf       	out	0x3d, r28	; 61
    3a70:	df 91       	pop	r29
    3a72:	cf 91       	pop	r28
    3a74:	08 95       	ret

00003a76 <_callBack>:
    3a76:	e0 91 3e 09 	lds	r30, 0x093E	; 0x80093e <_callBackFunction>
    3a7a:	f0 91 3f 09 	lds	r31, 0x093F	; 0x80093f <_callBackFunction+0x1>
    3a7e:	30 97       	sbiw	r30, 0x00	; 0
    3a80:	09 f0       	breq	.+2      	; 0x3a84 <_callBack+0xe>
    3a82:	19 95       	eicall
    3a84:	08 95       	ret

00003a86 <_tsl2591TwiCallback>:
    3a86:	64 50       	subi	r22, 0x04	; 4
    3a88:	62 30       	cpi	r22, 0x02	; 2
    3a8a:	08 f0       	brcs	.+2      	; 0x3a8e <_tsl2591TwiCallback+0x8>
    3a8c:	3b c0       	rjmp	.+118    	; 0x3b04 <_tsl2591TwiCallback+0x7e>
    3a8e:	20 91 3d 09 	lds	r18, 0x093D	; 0x80093d <_nextState>
    3a92:	22 30       	cpi	r18, 0x02	; 2
    3a94:	79 f0       	breq	.+30     	; 0x3ab4 <_tsl2591TwiCallback+0x2e>
    3a96:	18 f4       	brcc	.+6      	; 0x3a9e <_tsl2591TwiCallback+0x18>
    3a98:	21 30       	cpi	r18, 0x01	; 1
    3a9a:	31 f0       	breq	.+12     	; 0x3aa8 <_tsl2591TwiCallback+0x22>
    3a9c:	30 c0       	rjmp	.+96     	; 0x3afe <_tsl2591TwiCallback+0x78>
    3a9e:	23 30       	cpi	r18, 0x03	; 3
    3aa0:	81 f0       	breq	.+32     	; 0x3ac2 <_tsl2591TwiCallback+0x3c>
    3aa2:	24 30       	cpi	r18, 0x04	; 4
    3aa4:	a1 f0       	breq	.+40     	; 0x3ace <_tsl2591TwiCallback+0x48>
    3aa6:	2b c0       	rjmp	.+86     	; 0x3afe <_tsl2591TwiCallback+0x78>
    3aa8:	22 e0       	ldi	r18, 0x02	; 2
    3aaa:	20 93 3d 09 	sts	0x093D, r18	; 0x80093d <_nextState>
    3aae:	61 e0       	ldi	r22, 0x01	; 1
    3ab0:	09 c2       	rjmp	.+1042   	; 0x3ec4 <twiReceive>
    3ab2:	08 95       	ret
    3ab4:	fa 01       	movw	r30, r20
    3ab6:	80 81       	ld	r24, Z
    3ab8:	80 93 3a 09 	sts	0x093A, r24	; 0x80093a <_deviceId>
    3abc:	82 e0       	ldi	r24, 0x02	; 2
    3abe:	db cf       	rjmp	.-74     	; 0x3a76 <_callBack>
    3ac0:	08 95       	ret
    3ac2:	24 e0       	ldi	r18, 0x04	; 4
    3ac4:	20 93 3d 09 	sts	0x093D, r18	; 0x80093d <_nextState>
    3ac8:	64 e0       	ldi	r22, 0x04	; 4
    3aca:	fc c1       	rjmp	.+1016   	; 0x3ec4 <twiReceive>
    3acc:	08 95       	ret
    3ace:	fa 01       	movw	r30, r20
    3ad0:	81 81       	ldd	r24, Z+1	; 0x01
    3ad2:	90 e0       	ldi	r25, 0x00	; 0
    3ad4:	98 2f       	mov	r25, r24
    3ad6:	88 27       	eor	r24, r24
    3ad8:	20 81       	ld	r18, Z
    3ada:	82 2b       	or	r24, r18
    3adc:	90 93 39 09 	sts	0x0939, r25	; 0x800939 <_fullSpectrumRaw+0x1>
    3ae0:	80 93 38 09 	sts	0x0938, r24	; 0x800938 <_fullSpectrumRaw>
    3ae4:	83 81       	ldd	r24, Z+3	; 0x03
    3ae6:	90 e0       	ldi	r25, 0x00	; 0
    3ae8:	98 2f       	mov	r25, r24
    3aea:	88 27       	eor	r24, r24
    3aec:	22 81       	ldd	r18, Z+2	; 0x02
    3aee:	82 2b       	or	r24, r18
    3af0:	90 93 37 09 	sts	0x0937, r25	; 0x800937 <_infraredRaw+0x1>
    3af4:	80 93 36 09 	sts	0x0936, r24	; 0x800936 <_infraredRaw>
    3af8:	81 e0       	ldi	r24, 0x01	; 1
    3afa:	bd cf       	rjmp	.-134    	; 0x3a76 <_callBack>
    3afc:	08 95       	ret
    3afe:	80 e0       	ldi	r24, 0x00	; 0
    3b00:	ba cf       	rjmp	.-140    	; 0x3a76 <_callBack>
    3b02:	08 95       	ret
    3b04:	10 92 3d 09 	sts	0x093D, r1	; 0x80093d <_nextState>
    3b08:	86 e0       	ldi	r24, 0x06	; 6
    3b0a:	b5 cf       	rjmp	.-150    	; 0x3a76 <_callBack>
    3b0c:	08 95       	ret

00003b0e <_twiTransmit>:
    3b0e:	20 91 40 09 	lds	r18, 0x0940	; 0x800940 <_twiHandler>
    3b12:	30 91 41 09 	lds	r19, 0x0941	; 0x800941 <_twiHandler+0x1>
    3b16:	21 15       	cp	r18, r1
    3b18:	31 05       	cpc	r19, r1
    3b1a:	41 f0       	breq	.+16     	; 0x3b2c <_twiTransmit+0x1e>
    3b1c:	46 2f       	mov	r20, r22
    3b1e:	bc 01       	movw	r22, r24
    3b20:	c9 01       	movw	r24, r18
    3b22:	85 d1       	rcall	.+778    	; 0x3e2e <twiTransmit>
    3b24:	82 30       	cpi	r24, 0x02	; 2
    3b26:	21 f0       	breq	.+8      	; 0x3b30 <_twiTransmit+0x22>
    3b28:	80 e0       	ldi	r24, 0x00	; 0
    3b2a:	08 95       	ret
    3b2c:	87 e0       	ldi	r24, 0x07	; 7
    3b2e:	08 95       	ret
    3b30:	85 e0       	ldi	r24, 0x05	; 5
    3b32:	08 95       	ret

00003b34 <tsl2591Create>:
    3b34:	0f 93       	push	r16
    3b36:	1f 93       	push	r17
    3b38:	90 93 3f 09 	sts	0x093F, r25	; 0x80093f <_callBackFunction+0x1>
    3b3c:	80 93 3e 09 	sts	0x093E, r24	; 0x80093e <_callBackFunction>
    3b40:	03 e4       	ldi	r16, 0x43	; 67
    3b42:	1d e1       	ldi	r17, 0x1D	; 29
    3b44:	20 e0       	ldi	r18, 0x00	; 0
    3b46:	34 e2       	ldi	r19, 0x24	; 36
    3b48:	44 ef       	ldi	r20, 0xF4	; 244
    3b4a:	50 e0       	ldi	r21, 0x00	; 0
    3b4c:	60 e0       	ldi	r22, 0x00	; 0
    3b4e:	89 e2       	ldi	r24, 0x29	; 41
    3b50:	1d d1       	rcall	.+570    	; 0x3d8c <twiCreate>
    3b52:	90 93 41 09 	sts	0x0941, r25	; 0x800941 <_twiHandler+0x1>
    3b56:	80 93 40 09 	sts	0x0940, r24	; 0x800940 <_twiHandler>
    3b5a:	89 2b       	or	r24, r25
    3b5c:	11 f0       	breq	.+4      	; 0x3b62 <tsl2591Create+0x2e>
    3b5e:	80 e0       	ldi	r24, 0x00	; 0
    3b60:	01 c0       	rjmp	.+2      	; 0x3b64 <tsl2591Create+0x30>
    3b62:	88 e0       	ldi	r24, 0x08	; 8
    3b64:	1f 91       	pop	r17
    3b66:	0f 91       	pop	r16
    3b68:	08 95       	ret

00003b6a <tsl2591Enable>:
    3b6a:	cf 93       	push	r28
    3b6c:	df 93       	push	r29
    3b6e:	1f 92       	push	r1
    3b70:	1f 92       	push	r1
    3b72:	cd b7       	in	r28, 0x3d	; 61
    3b74:	de b7       	in	r29, 0x3e	; 62
    3b76:	80 ea       	ldi	r24, 0xA0	; 160
    3b78:	89 83       	std	Y+1, r24	; 0x01
    3b7a:	83 e0       	ldi	r24, 0x03	; 3
    3b7c:	8a 83       	std	Y+2, r24	; 0x02
    3b7e:	10 92 3d 09 	sts	0x093D, r1	; 0x80093d <_nextState>
    3b82:	62 e0       	ldi	r22, 0x02	; 2
    3b84:	ce 01       	movw	r24, r28
    3b86:	01 96       	adiw	r24, 0x01	; 1
    3b88:	c2 df       	rcall	.-124    	; 0x3b0e <_twiTransmit>
    3b8a:	0f 90       	pop	r0
    3b8c:	0f 90       	pop	r0
    3b8e:	df 91       	pop	r29
    3b90:	cf 91       	pop	r28
    3b92:	08 95       	ret

00003b94 <tsl2591FetchData>:
    3b94:	cf 93       	push	r28
    3b96:	df 93       	push	r29
    3b98:	1f 92       	push	r1
    3b9a:	cd b7       	in	r28, 0x3d	; 61
    3b9c:	de b7       	in	r29, 0x3e	; 62
    3b9e:	84 eb       	ldi	r24, 0xB4	; 180
    3ba0:	89 83       	std	Y+1, r24	; 0x01
    3ba2:	83 e0       	ldi	r24, 0x03	; 3
    3ba4:	80 93 3d 09 	sts	0x093D, r24	; 0x80093d <_nextState>
    3ba8:	61 e0       	ldi	r22, 0x01	; 1
    3baa:	ce 01       	movw	r24, r28
    3bac:	01 96       	adiw	r24, 0x01	; 1
    3bae:	af df       	rcall	.-162    	; 0x3b0e <_twiTransmit>
    3bb0:	0f 90       	pop	r0
    3bb2:	df 91       	pop	r29
    3bb4:	cf 91       	pop	r28
    3bb6:	08 95       	ret

00003bb8 <tsl2591GetLux>:
    3bb8:	2f 92       	push	r2
    3bba:	3f 92       	push	r3
    3bbc:	4f 92       	push	r4
    3bbe:	5f 92       	push	r5
    3bc0:	6f 92       	push	r6
    3bc2:	7f 92       	push	r7
    3bc4:	8f 92       	push	r8
    3bc6:	9f 92       	push	r9
    3bc8:	af 92       	push	r10
    3bca:	bf 92       	push	r11
    3bcc:	cf 92       	push	r12
    3bce:	df 92       	push	r13
    3bd0:	ef 92       	push	r14
    3bd2:	ff 92       	push	r15
    3bd4:	0f 93       	push	r16
    3bd6:	1f 93       	push	r17
    3bd8:	cf 93       	push	r28
    3bda:	df 93       	push	r29
    3bdc:	c0 91 36 09 	lds	r28, 0x0936	; 0x800936 <_infraredRaw>
    3be0:	d0 91 37 09 	lds	r29, 0x0937	; 0x800937 <_infraredRaw+0x1>
    3be4:	cf 3f       	cpi	r28, 0xFF	; 255
    3be6:	2f ef       	ldi	r18, 0xFF	; 255
    3be8:	d2 07       	cpc	r29, r18
    3bea:	41 f0       	breq	.+16     	; 0x3bfc <tsl2591GetLux+0x44>
    3bec:	60 91 38 09 	lds	r22, 0x0938	; 0x800938 <_fullSpectrumRaw>
    3bf0:	70 91 39 09 	lds	r23, 0x0939	; 0x800939 <_fullSpectrumRaw+0x1>
    3bf4:	6f 3f       	cpi	r22, 0xFF	; 255
    3bf6:	ef ef       	ldi	r30, 0xFF	; 255
    3bf8:	7e 07       	cpc	r23, r30
    3bfa:	59 f4       	brne	.+22     	; 0x3c12 <tsl2591GetLux+0x5a>
    3bfc:	4f ef       	ldi	r20, 0xFF	; 255
    3bfe:	5f ef       	ldi	r21, 0xFF	; 255
    3c00:	6f e7       	ldi	r22, 0x7F	; 127
    3c02:	7f e7       	ldi	r23, 0x7F	; 127
    3c04:	fc 01       	movw	r30, r24
    3c06:	40 83       	st	Z, r20
    3c08:	51 83       	std	Z+1, r21	; 0x01
    3c0a:	62 83       	std	Z+2, r22	; 0x02
    3c0c:	73 83       	std	Z+3, r23	; 0x03
    3c0e:	83 e0       	ldi	r24, 0x03	; 3
    3c10:	99 c0       	rjmp	.+306    	; 0x3d44 <tsl2591GetLux+0x18c>
    3c12:	1c 01       	movw	r2, r24
    3c14:	80 e0       	ldi	r24, 0x00	; 0
    3c16:	90 e0       	ldi	r25, 0x00	; 0
    3c18:	17 d3       	rcall	.+1582   	; 0x4248 <__floatunsisf>
    3c1a:	2b 01       	movw	r4, r22
    3c1c:	3c 01       	movw	r6, r24
    3c1e:	be 01       	movw	r22, r28
    3c20:	80 e0       	ldi	r24, 0x00	; 0
    3c22:	90 e0       	ldi	r25, 0x00	; 0
    3c24:	11 d3       	rcall	.+1570   	; 0x4248 <__floatunsisf>
    3c26:	4b 01       	movw	r8, r22
    3c28:	5c 01       	movw	r10, r24
    3c2a:	80 91 3b 09 	lds	r24, 0x093B	; 0x80093b <_currentIntegrationTime>
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	01 96       	adiw	r24, 0x01	; 1
    3c32:	24 e6       	ldi	r18, 0x64	; 100
    3c34:	28 9f       	mul	r18, r24
    3c36:	b0 01       	movw	r22, r0
    3c38:	29 9f       	mul	r18, r25
    3c3a:	70 0d       	add	r23, r0
    3c3c:	11 24       	eor	r1, r1
    3c3e:	80 91 3c 09 	lds	r24, 0x093C	; 0x80093c <_currentGain>
    3c42:	80 32       	cpi	r24, 0x20	; 32
    3c44:	69 f0       	breq	.+26     	; 0x3c60 <tsl2591GetLux+0xa8>
    3c46:	80 33       	cpi	r24, 0x30	; 48
    3c48:	a1 f0       	breq	.+40     	; 0x3c72 <tsl2591GetLux+0xba>
    3c4a:	80 31       	cpi	r24, 0x10	; 16
    3c4c:	e1 f4       	brne	.+56     	; 0x3c86 <tsl2591GetLux+0xce>
    3c4e:	0f 2e       	mov	r0, r31
    3c50:	c1 2c       	mov	r12, r1
    3c52:	d1 2c       	mov	r13, r1
    3c54:	f8 ec       	ldi	r31, 0xC8	; 200
    3c56:	ef 2e       	mov	r14, r31
    3c58:	f1 e4       	ldi	r31, 0x41	; 65
    3c5a:	ff 2e       	mov	r15, r31
    3c5c:	f0 2d       	mov	r31, r0
    3c5e:	1b c0       	rjmp	.+54     	; 0x3c96 <tsl2591GetLux+0xde>
    3c60:	0f 2e       	mov	r0, r31
    3c62:	c1 2c       	mov	r12, r1
    3c64:	d1 2c       	mov	r13, r1
    3c66:	f6 ed       	ldi	r31, 0xD6	; 214
    3c68:	ef 2e       	mov	r14, r31
    3c6a:	f3 e4       	ldi	r31, 0x43	; 67
    3c6c:	ff 2e       	mov	r15, r31
    3c6e:	f0 2d       	mov	r31, r0
    3c70:	12 c0       	rjmp	.+36     	; 0x3c96 <tsl2591GetLux+0xde>
    3c72:	0f 2e       	mov	r0, r31
    3c74:	c1 2c       	mov	r12, r1
    3c76:	f0 e5       	ldi	r31, 0x50	; 80
    3c78:	df 2e       	mov	r13, r31
    3c7a:	fa e1       	ldi	r31, 0x1A	; 26
    3c7c:	ef 2e       	mov	r14, r31
    3c7e:	f6 e4       	ldi	r31, 0x46	; 70
    3c80:	ff 2e       	mov	r15, r31
    3c82:	f0 2d       	mov	r31, r0
    3c84:	08 c0       	rjmp	.+16     	; 0x3c96 <tsl2591GetLux+0xde>
    3c86:	0f 2e       	mov	r0, r31
    3c88:	c1 2c       	mov	r12, r1
    3c8a:	d1 2c       	mov	r13, r1
    3c8c:	f0 e8       	ldi	r31, 0x80	; 128
    3c8e:	ef 2e       	mov	r14, r31
    3c90:	ff e3       	ldi	r31, 0x3F	; 63
    3c92:	ff 2e       	mov	r15, r31
    3c94:	f0 2d       	mov	r31, r0
    3c96:	07 2e       	mov	r0, r23
    3c98:	00 0c       	add	r0, r0
    3c9a:	88 0b       	sbc	r24, r24
    3c9c:	99 0b       	sbc	r25, r25
    3c9e:	d6 d2       	rcall	.+1452   	; 0x424c <__floatsisf>
    3ca0:	a7 01       	movw	r20, r14
    3ca2:	96 01       	movw	r18, r12
    3ca4:	3a d3       	rcall	.+1652   	; 0x431a <__mulsf3>
    3ca6:	20 e0       	ldi	r18, 0x00	; 0
    3ca8:	30 e0       	ldi	r19, 0x00	; 0
    3caa:	4c ec       	ldi	r20, 0xCC	; 204
    3cac:	53 e4       	ldi	r21, 0x43	; 67
    3cae:	61 d2       	rcall	.+1218   	; 0x4172 <__divsf3>
    3cb0:	6b 01       	movw	r12, r22
    3cb2:	7c 01       	movw	r14, r24
    3cb4:	25 e8       	ldi	r18, 0x85	; 133
    3cb6:	3b ee       	ldi	r19, 0xEB	; 235
    3cb8:	41 ed       	ldi	r20, 0xD1	; 209
    3cba:	5f e3       	ldi	r21, 0x3F	; 63
    3cbc:	c5 01       	movw	r24, r10
    3cbe:	b4 01       	movw	r22, r8
    3cc0:	2c d3       	rcall	.+1624   	; 0x431a <__mulsf3>
    3cc2:	9b 01       	movw	r18, r22
    3cc4:	ac 01       	movw	r20, r24
    3cc6:	c3 01       	movw	r24, r6
    3cc8:	b2 01       	movw	r22, r4
    3cca:	ec d1       	rcall	.+984    	; 0x40a4 <__subsf3>
    3ccc:	a7 01       	movw	r20, r14
    3cce:	96 01       	movw	r18, r12
    3cd0:	50 d2       	rcall	.+1184   	; 0x4172 <__divsf3>
    3cd2:	16 2f       	mov	r17, r22
    3cd4:	d7 2f       	mov	r29, r23
    3cd6:	c8 2f       	mov	r28, r24
    3cd8:	09 2f       	mov	r16, r25
    3cda:	2d e3       	ldi	r18, 0x3D	; 61
    3cdc:	3a e0       	ldi	r19, 0x0A	; 10
    3cde:	47 e1       	ldi	r20, 0x17	; 23
    3ce0:	5f e3       	ldi	r21, 0x3F	; 63
    3ce2:	c3 01       	movw	r24, r6
    3ce4:	b2 01       	movw	r22, r4
    3ce6:	19 d3       	rcall	.+1586   	; 0x431a <__mulsf3>
    3ce8:	2b 01       	movw	r4, r22
    3cea:	3c 01       	movw	r6, r24
    3cec:	26 ef       	ldi	r18, 0xF6	; 246
    3cee:	38 e2       	ldi	r19, 0x28	; 40
    3cf0:	4c e5       	ldi	r20, 0x5C	; 92
    3cf2:	5f e3       	ldi	r21, 0x3F	; 63
    3cf4:	c5 01       	movw	r24, r10
    3cf6:	b4 01       	movw	r22, r8
    3cf8:	10 d3       	rcall	.+1568   	; 0x431a <__mulsf3>
    3cfa:	9b 01       	movw	r18, r22
    3cfc:	ac 01       	movw	r20, r24
    3cfe:	c3 01       	movw	r24, r6
    3d00:	b2 01       	movw	r22, r4
    3d02:	d0 d1       	rcall	.+928    	; 0x40a4 <__subsf3>
    3d04:	a7 01       	movw	r20, r14
    3d06:	96 01       	movw	r18, r12
    3d08:	34 d2       	rcall	.+1128   	; 0x4172 <__divsf3>
    3d0a:	c6 2e       	mov	r12, r22
    3d0c:	d7 2e       	mov	r13, r23
    3d0e:	e8 2e       	mov	r14, r24
    3d10:	f9 2e       	mov	r15, r25
    3d12:	26 2f       	mov	r18, r22
    3d14:	37 2f       	mov	r19, r23
    3d16:	48 2f       	mov	r20, r24
    3d18:	59 2f       	mov	r21, r25
    3d1a:	61 2f       	mov	r22, r17
    3d1c:	7d 2f       	mov	r23, r29
    3d1e:	8c 2f       	mov	r24, r28
    3d20:	90 2f       	mov	r25, r16
    3d22:	f7 d2       	rcall	.+1518   	; 0x4312 <__gesf2>
    3d24:	18 16       	cp	r1, r24
    3d26:	24 f0       	brlt	.+8      	; 0x3d30 <tsl2591GetLux+0x178>
    3d28:	1c 2d       	mov	r17, r12
    3d2a:	dd 2d       	mov	r29, r13
    3d2c:	ce 2d       	mov	r28, r14
    3d2e:	0f 2d       	mov	r16, r15
    3d30:	41 2f       	mov	r20, r17
    3d32:	5d 2f       	mov	r21, r29
    3d34:	6c 2f       	mov	r22, r28
    3d36:	70 2f       	mov	r23, r16
    3d38:	f1 01       	movw	r30, r2
    3d3a:	40 83       	st	Z, r20
    3d3c:	51 83       	std	Z+1, r21	; 0x01
    3d3e:	62 83       	std	Z+2, r22	; 0x02
    3d40:	73 83       	std	Z+3, r23	; 0x03
    3d42:	80 e0       	ldi	r24, 0x00	; 0
    3d44:	df 91       	pop	r29
    3d46:	cf 91       	pop	r28
    3d48:	1f 91       	pop	r17
    3d4a:	0f 91       	pop	r16
    3d4c:	ff 90       	pop	r15
    3d4e:	ef 90       	pop	r14
    3d50:	df 90       	pop	r13
    3d52:	cf 90       	pop	r12
    3d54:	bf 90       	pop	r11
    3d56:	af 90       	pop	r10
    3d58:	9f 90       	pop	r9
    3d5a:	8f 90       	pop	r8
    3d5c:	7f 90       	pop	r7
    3d5e:	6f 90       	pop	r6
    3d60:	5f 90       	pop	r5
    3d62:	4f 90       	pop	r4
    3d64:	3f 90       	pop	r3
    3d66:	2f 90       	pop	r2
    3d68:	08 95       	ret

00003d6a <_initTwiInterface>:
    3d6a:	80 91 50 09 	lds	r24, 0x0950	; 0x800950 <_twiIsInitiated>
    3d6e:	81 11       	cpse	r24, r1
    3d70:	0c c0       	rjmp	.+24     	; 0x3d8a <_initTwiInterface+0x20>
    3d72:	8c e0       	ldi	r24, 0x0C	; 12
    3d74:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    3d78:	8f ef       	ldi	r24, 0xFF	; 255
    3d7a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3d7e:	84 e0       	ldi	r24, 0x04	; 4
    3d80:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3d84:	81 e0       	ldi	r24, 0x01	; 1
    3d86:	80 93 50 09 	sts	0x0950, r24	; 0x800950 <_twiIsInitiated>
    3d8a:	08 95       	ret

00003d8c <twiCreate>:
    3d8c:	af 92       	push	r10
    3d8e:	bf 92       	push	r11
    3d90:	cf 92       	push	r12
    3d92:	df 92       	push	r13
    3d94:	ef 92       	push	r14
    3d96:	ff 92       	push	r15
    3d98:	0f 93       	push	r16
    3d9a:	1f 93       	push	r17
    3d9c:	cf 93       	push	r28
    3d9e:	df 93       	push	r29
    3da0:	a8 2e       	mov	r10, r24
    3da2:	b6 2e       	mov	r11, r22
    3da4:	69 01       	movw	r12, r18
    3da6:	7a 01       	movw	r14, r20
    3da8:	84 e0       	ldi	r24, 0x04	; 4
    3daa:	90 e0       	ldi	r25, 0x00	; 0
    3dac:	84 d3       	rcall	.+1800   	; 0x44b6 <malloc>
    3dae:	ec 01       	movw	r28, r24
    3db0:	89 2b       	or	r24, r25
    3db2:	61 f1       	breq	.+88     	; 0x3e0c <twiCreate+0x80>
    3db4:	a8 82       	st	Y, r10
    3db6:	81 e0       	ldi	r24, 0x01	; 1
    3db8:	b8 12       	cpse	r11, r24
    3dba:	12 c0       	rjmp	.+36     	; 0x3de0 <twiCreate+0x54>
    3dbc:	c7 01       	movw	r24, r14
    3dbe:	b6 01       	movw	r22, r12
    3dc0:	20 ea       	ldi	r18, 0xA0	; 160
    3dc2:	36 e8       	ldi	r19, 0x86	; 134
    3dc4:	41 e0       	ldi	r20, 0x01	; 1
    3dc6:	50 e0       	ldi	r21, 0x00	; 0
    3dc8:	32 d3       	rcall	.+1636   	; 0x442e <__udivmodsi4>
    3dca:	da 01       	movw	r26, r20
    3dcc:	c9 01       	movw	r24, r18
    3dce:	40 97       	sbiw	r24, 0x10	; 16
    3dd0:	a1 09       	sbc	r26, r1
    3dd2:	b1 09       	sbc	r27, r1
    3dd4:	b6 95       	lsr	r27
    3dd6:	a7 95       	ror	r26
    3dd8:	97 95       	ror	r25
    3dda:	87 95       	ror	r24
    3ddc:	89 83       	std	Y+1, r24	; 0x01
    3dde:	11 c0       	rjmp	.+34     	; 0x3e02 <twiCreate+0x76>
    3de0:	c7 01       	movw	r24, r14
    3de2:	b6 01       	movw	r22, r12
    3de4:	20 e8       	ldi	r18, 0x80	; 128
    3de6:	3a e1       	ldi	r19, 0x1A	; 26
    3de8:	46 e0       	ldi	r20, 0x06	; 6
    3dea:	50 e0       	ldi	r21, 0x00	; 0
    3dec:	20 d3       	rcall	.+1600   	; 0x442e <__udivmodsi4>
    3dee:	da 01       	movw	r26, r20
    3df0:	c9 01       	movw	r24, r18
    3df2:	40 97       	sbiw	r24, 0x10	; 16
    3df4:	a1 09       	sbc	r26, r1
    3df6:	b1 09       	sbc	r27, r1
    3df8:	b6 95       	lsr	r27
    3dfa:	a7 95       	ror	r26
    3dfc:	97 95       	ror	r25
    3dfe:	87 95       	ror	r24
    3e00:	89 83       	std	Y+1, r24	; 0x01
    3e02:	1b 83       	std	Y+3, r17	; 0x03
    3e04:	0a 83       	std	Y+2, r16	; 0x02
    3e06:	8c 2f       	mov	r24, r28
    3e08:	9d 2f       	mov	r25, r29
    3e0a:	02 c0       	rjmp	.+4      	; 0x3e10 <twiCreate+0x84>
    3e0c:	80 e0       	ldi	r24, 0x00	; 0
    3e0e:	90 e0       	ldi	r25, 0x00	; 0
    3e10:	df 91       	pop	r29
    3e12:	cf 91       	pop	r28
    3e14:	1f 91       	pop	r17
    3e16:	0f 91       	pop	r16
    3e18:	ff 90       	pop	r15
    3e1a:	ef 90       	pop	r14
    3e1c:	df 90       	pop	r13
    3e1e:	cf 90       	pop	r12
    3e20:	bf 90       	pop	r11
    3e22:	af 90       	pop	r10
    3e24:	08 95       	ret

00003e26 <twiIsBusy>:
    3e26:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3e2a:	81 70       	andi	r24, 0x01	; 1
    3e2c:	08 95       	ret

00003e2e <twiTransmit>:
    3e2e:	ff 92       	push	r15
    3e30:	0f 93       	push	r16
    3e32:	1f 93       	push	r17
    3e34:	cf 93       	push	r28
    3e36:	df 93       	push	r29
    3e38:	00 97       	sbiw	r24, 0x00	; 0
    3e3a:	c9 f1       	breq	.+114    	; 0x3eae <twiTransmit+0x80>
    3e3c:	4a 30       	cpi	r20, 0x0A	; 10
    3e3e:	c8 f5       	brcc	.+114    	; 0x3eb2 <twiTransmit+0x84>
    3e40:	f4 2e       	mov	r15, r20
    3e42:	8b 01       	movw	r16, r22
    3e44:	ec 01       	movw	r28, r24
    3e46:	ef df       	rcall	.-34     	; 0x3e26 <twiIsBusy>
    3e48:	81 11       	cpse	r24, r1
    3e4a:	35 c0       	rjmp	.+106    	; 0x3eb6 <twiTransmit+0x88>
    3e4c:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <_twiCurrentHandler>
    3e50:	90 91 44 09 	lds	r25, 0x0944	; 0x800944 <_twiCurrentHandler+0x1>
    3e54:	c8 17       	cp	r28, r24
    3e56:	d9 07       	cpc	r29, r25
    3e58:	41 f0       	breq	.+16     	; 0x3e6a <twiTransmit+0x3c>
    3e5a:	87 df       	rcall	.-242    	; 0x3d6a <_initTwiInterface>
    3e5c:	89 81       	ldd	r24, Y+1	; 0x01
    3e5e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    3e62:	d0 93 44 09 	sts	0x0944, r29	; 0x800944 <_twiCurrentHandler+0x1>
    3e66:	c0 93 43 09 	sts	0x0943, r28	; 0x800943 <_twiCurrentHandler>
    3e6a:	81 e0       	ldi	r24, 0x01	; 1
    3e6c:	8f 0d       	add	r24, r15
    3e6e:	80 93 45 09 	sts	0x0945, r24	; 0x800945 <_twiMessageLen>
    3e72:	88 81       	ld	r24, Y
    3e74:	88 0f       	add	r24, r24
    3e76:	80 93 46 09 	sts	0x0946, r24	; 0x800946 <_twiMessageBuffer>
    3e7a:	ff 20       	and	r15, r15
    3e7c:	81 f0       	breq	.+32     	; 0x3e9e <twiTransmit+0x70>
    3e7e:	f8 01       	movw	r30, r16
    3e80:	a7 e4       	ldi	r26, 0x47	; 71
    3e82:	b9 e0       	ldi	r27, 0x09	; 9
    3e84:	4f ef       	ldi	r20, 0xFF	; 255
    3e86:	4f 0d       	add	r20, r15
    3e88:	64 2f       	mov	r22, r20
    3e8a:	70 e0       	ldi	r23, 0x00	; 0
    3e8c:	6f 5f       	subi	r22, 0xFF	; 255
    3e8e:	7f 4f       	sbci	r23, 0xFF	; 255
    3e90:	60 0f       	add	r22, r16
    3e92:	71 1f       	adc	r23, r17
    3e94:	81 91       	ld	r24, Z+
    3e96:	8d 93       	st	X+, r24
    3e98:	e6 17       	cp	r30, r22
    3e9a:	f7 07       	cpc	r31, r23
    3e9c:	d9 f7       	brne	.-10     	; 0x3e94 <twiTransmit+0x66>
    3e9e:	88 ef       	ldi	r24, 0xF8	; 248
    3ea0:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    3ea4:	85 ea       	ldi	r24, 0xA5	; 165
    3ea6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3eaa:	81 e0       	ldi	r24, 0x01	; 1
    3eac:	05 c0       	rjmp	.+10     	; 0x3eb8 <twiTransmit+0x8a>
    3eae:	86 e0       	ldi	r24, 0x06	; 6
    3eb0:	03 c0       	rjmp	.+6      	; 0x3eb8 <twiTransmit+0x8a>
    3eb2:	87 e0       	ldi	r24, 0x07	; 7
    3eb4:	01 c0       	rjmp	.+2      	; 0x3eb8 <twiTransmit+0x8a>
    3eb6:	82 e0       	ldi	r24, 0x02	; 2
    3eb8:	df 91       	pop	r29
    3eba:	cf 91       	pop	r28
    3ebc:	1f 91       	pop	r17
    3ebe:	0f 91       	pop	r16
    3ec0:	ff 90       	pop	r15
    3ec2:	08 95       	ret

00003ec4 <twiReceive>:
    3ec4:	1f 93       	push	r17
    3ec6:	cf 93       	push	r28
    3ec8:	df 93       	push	r29
    3eca:	00 97       	sbiw	r24, 0x00	; 0
    3ecc:	29 f1       	breq	.+74     	; 0x3f18 <twiReceive+0x54>
    3ece:	6b 30       	cpi	r22, 0x0B	; 11
    3ed0:	28 f5       	brcc	.+74     	; 0x3f1c <twiReceive+0x58>
    3ed2:	16 2f       	mov	r17, r22
    3ed4:	ec 01       	movw	r28, r24
    3ed6:	a7 df       	rcall	.-178    	; 0x3e26 <twiIsBusy>
    3ed8:	81 11       	cpse	r24, r1
    3eda:	22 c0       	rjmp	.+68     	; 0x3f20 <twiReceive+0x5c>
    3edc:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <_twiCurrentHandler>
    3ee0:	90 91 44 09 	lds	r25, 0x0944	; 0x800944 <_twiCurrentHandler+0x1>
    3ee4:	c8 17       	cp	r28, r24
    3ee6:	d9 07       	cpc	r29, r25
    3ee8:	41 f0       	breq	.+16     	; 0x3efa <twiReceive+0x36>
    3eea:	3f df       	rcall	.-386    	; 0x3d6a <_initTwiInterface>
    3eec:	89 81       	ldd	r24, Y+1	; 0x01
    3eee:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    3ef2:	d0 93 44 09 	sts	0x0944, r29	; 0x800944 <_twiCurrentHandler+0x1>
    3ef6:	c0 93 43 09 	sts	0x0943, r28	; 0x800943 <_twiCurrentHandler>
    3efa:	10 93 45 09 	sts	0x0945, r17	; 0x800945 <_twiMessageLen>
    3efe:	88 81       	ld	r24, Y
    3f00:	88 0f       	add	r24, r24
    3f02:	81 60       	ori	r24, 0x01	; 1
    3f04:	80 93 46 09 	sts	0x0946, r24	; 0x800946 <_twiMessageBuffer>
    3f08:	88 ef       	ldi	r24, 0xF8	; 248
    3f0a:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    3f0e:	85 ea       	ldi	r24, 0xA5	; 165
    3f10:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3f14:	81 e0       	ldi	r24, 0x01	; 1
    3f16:	05 c0       	rjmp	.+10     	; 0x3f22 <twiReceive+0x5e>
    3f18:	86 e0       	ldi	r24, 0x06	; 6
    3f1a:	03 c0       	rjmp	.+6      	; 0x3f22 <twiReceive+0x5e>
    3f1c:	87 e0       	ldi	r24, 0x07	; 7
    3f1e:	01 c0       	rjmp	.+2      	; 0x3f22 <twiReceive+0x5e>
    3f20:	82 e0       	ldi	r24, 0x02	; 2
    3f22:	df 91       	pop	r29
    3f24:	cf 91       	pop	r28
    3f26:	1f 91       	pop	r17
    3f28:	08 95       	ret

00003f2a <__vector_39>:
    3f2a:	1f 92       	push	r1
    3f2c:	0f 92       	push	r0
    3f2e:	0f b6       	in	r0, 0x3f	; 63
    3f30:	0f 92       	push	r0
    3f32:	11 24       	eor	r1, r1
    3f34:	0b b6       	in	r0, 0x3b	; 59
    3f36:	0f 92       	push	r0
    3f38:	2f 93       	push	r18
    3f3a:	3f 93       	push	r19
    3f3c:	4f 93       	push	r20
    3f3e:	5f 93       	push	r21
    3f40:	6f 93       	push	r22
    3f42:	7f 93       	push	r23
    3f44:	8f 93       	push	r24
    3f46:	9f 93       	push	r25
    3f48:	af 93       	push	r26
    3f4a:	bf 93       	push	r27
    3f4c:	ef 93       	push	r30
    3f4e:	ff 93       	push	r31
    3f50:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3f54:	8e 2f       	mov	r24, r30
    3f56:	90 e0       	ldi	r25, 0x00	; 0
    3f58:	fc 01       	movw	r30, r24
    3f5a:	38 97       	sbiw	r30, 0x08	; 8
    3f5c:	e1 35       	cpi	r30, 0x51	; 81
    3f5e:	f1 05       	cpc	r31, r1
    3f60:	08 f0       	brcs	.+2      	; 0x3f64 <__vector_39+0x3a>
    3f62:	75 c0       	rjmp	.+234    	; 0x404e <__vector_39+0x124>
    3f64:	88 27       	eor	r24, r24
    3f66:	e4 58       	subi	r30, 0x84	; 132
    3f68:	ff 4f       	sbci	r31, 0xFF	; 255
    3f6a:	8f 4f       	sbci	r24, 0xFF	; 255
    3f6c:	82 c2       	rjmp	.+1284   	; 0x4472 <__tablejump2__>
    3f6e:	10 92 42 09 	sts	0x0942, r1	; 0x800942 <_index.1885>
    3f72:	e0 91 42 09 	lds	r30, 0x0942	; 0x800942 <_index.1885>
    3f76:	80 91 45 09 	lds	r24, 0x0945	; 0x800945 <_twiMessageLen>
    3f7a:	e8 17       	cp	r30, r24
    3f7c:	70 f4       	brcc	.+28     	; 0x3f9a <__vector_39+0x70>
    3f7e:	81 e0       	ldi	r24, 0x01	; 1
    3f80:	8e 0f       	add	r24, r30
    3f82:	80 93 42 09 	sts	0x0942, r24	; 0x800942 <_index.1885>
    3f86:	f0 e0       	ldi	r31, 0x00	; 0
    3f88:	ea 5b       	subi	r30, 0xBA	; 186
    3f8a:	f6 4f       	sbci	r31, 0xF6	; 246
    3f8c:	80 81       	ld	r24, Z
    3f8e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3f92:	85 e8       	ldi	r24, 0x85	; 133
    3f94:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3f98:	72 c0       	rjmp	.+228    	; 0x407e <__vector_39+0x154>
    3f9a:	84 e9       	ldi	r24, 0x94	; 148
    3f9c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3fa0:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <_twiCurrentHandler>
    3fa4:	90 91 44 09 	lds	r25, 0x0944	; 0x800944 <_twiCurrentHandler+0x1>
    3fa8:	dc 01       	movw	r26, r24
    3faa:	12 96       	adiw	r26, 0x02	; 2
    3fac:	ed 91       	ld	r30, X+
    3fae:	fc 91       	ld	r31, X
    3fb0:	13 97       	sbiw	r26, 0x03	; 3
    3fb2:	30 97       	sbiw	r30, 0x00	; 0
    3fb4:	09 f4       	brne	.+2      	; 0x3fb8 <__vector_39+0x8e>
    3fb6:	63 c0       	rjmp	.+198    	; 0x407e <__vector_39+0x154>
    3fb8:	20 e0       	ldi	r18, 0x00	; 0
    3fba:	40 e0       	ldi	r20, 0x00	; 0
    3fbc:	50 e0       	ldi	r21, 0x00	; 0
    3fbe:	64 e0       	ldi	r22, 0x04	; 4
    3fc0:	19 95       	eicall
    3fc2:	5d c0       	rjmp	.+186    	; 0x407e <__vector_39+0x154>
    3fc4:	e0 91 42 09 	lds	r30, 0x0942	; 0x800942 <_index.1885>
    3fc8:	81 e0       	ldi	r24, 0x01	; 1
    3fca:	8e 0f       	add	r24, r30
    3fcc:	80 93 42 09 	sts	0x0942, r24	; 0x800942 <_index.1885>
    3fd0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3fd4:	f0 e0       	ldi	r31, 0x00	; 0
    3fd6:	ea 5b       	subi	r30, 0xBA	; 186
    3fd8:	f6 4f       	sbci	r31, 0xF6	; 246
    3fda:	80 83       	st	Z, r24
    3fdc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3fe0:	80 34       	cpi	r24, 0x40	; 64
    3fe2:	11 f4       	brne	.+4      	; 0x3fe8 <__vector_39+0xbe>
    3fe4:	10 92 42 09 	sts	0x0942, r1	; 0x800942 <_index.1885>
    3fe8:	20 91 42 09 	lds	r18, 0x0942	; 0x800942 <_index.1885>
    3fec:	30 e0       	ldi	r19, 0x00	; 0
    3fee:	80 91 45 09 	lds	r24, 0x0945	; 0x800945 <_twiMessageLen>
    3ff2:	90 e0       	ldi	r25, 0x00	; 0
    3ff4:	01 97       	sbiw	r24, 0x01	; 1
    3ff6:	28 17       	cp	r18, r24
    3ff8:	39 07       	cpc	r19, r25
    3ffa:	24 f4       	brge	.+8      	; 0x4004 <__vector_39+0xda>
    3ffc:	85 ec       	ldi	r24, 0xC5	; 197
    3ffe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4002:	3d c0       	rjmp	.+122    	; 0x407e <__vector_39+0x154>
    4004:	85 e8       	ldi	r24, 0x85	; 133
    4006:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    400a:	39 c0       	rjmp	.+114    	; 0x407e <__vector_39+0x154>
    400c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4010:	e0 91 42 09 	lds	r30, 0x0942	; 0x800942 <_index.1885>
    4014:	f0 e0       	ldi	r31, 0x00	; 0
    4016:	ea 5b       	subi	r30, 0xBA	; 186
    4018:	f6 4f       	sbci	r31, 0xF6	; 246
    401a:	80 83       	st	Z, r24
    401c:	84 e9       	ldi	r24, 0x94	; 148
    401e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4022:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <_twiCurrentHandler>
    4026:	90 91 44 09 	lds	r25, 0x0944	; 0x800944 <_twiCurrentHandler+0x1>
    402a:	dc 01       	movw	r26, r24
    402c:	12 96       	adiw	r26, 0x02	; 2
    402e:	ed 91       	ld	r30, X+
    4030:	fc 91       	ld	r31, X
    4032:	13 97       	sbiw	r26, 0x03	; 3
    4034:	30 97       	sbiw	r30, 0x00	; 0
    4036:	19 f1       	breq	.+70     	; 0x407e <__vector_39+0x154>
    4038:	20 91 45 09 	lds	r18, 0x0945	; 0x800945 <_twiMessageLen>
    403c:	46 e4       	ldi	r20, 0x46	; 70
    403e:	59 e0       	ldi	r21, 0x09	; 9
    4040:	65 e0       	ldi	r22, 0x05	; 5
    4042:	19 95       	eicall
    4044:	1c c0       	rjmp	.+56     	; 0x407e <__vector_39+0x154>
    4046:	85 ea       	ldi	r24, 0xA5	; 165
    4048:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    404c:	18 c0       	rjmp	.+48     	; 0x407e <__vector_39+0x154>
    404e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4052:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    4056:	84 e0       	ldi	r24, 0x04	; 4
    4058:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    405c:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <_twiCurrentHandler>
    4060:	90 91 44 09 	lds	r25, 0x0944	; 0x800944 <_twiCurrentHandler+0x1>
    4064:	dc 01       	movw	r26, r24
    4066:	12 96       	adiw	r26, 0x02	; 2
    4068:	ed 91       	ld	r30, X+
    406a:	fc 91       	ld	r31, X
    406c:	13 97       	sbiw	r26, 0x03	; 3
    406e:	30 97       	sbiw	r30, 0x00	; 0
    4070:	31 f0       	breq	.+12     	; 0x407e <__vector_39+0x154>
    4072:	20 e0       	ldi	r18, 0x00	; 0
    4074:	40 e0       	ldi	r20, 0x00	; 0
    4076:	50 e0       	ldi	r21, 0x00	; 0
    4078:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    407c:	19 95       	eicall
    407e:	ff 91       	pop	r31
    4080:	ef 91       	pop	r30
    4082:	bf 91       	pop	r27
    4084:	af 91       	pop	r26
    4086:	9f 91       	pop	r25
    4088:	8f 91       	pop	r24
    408a:	7f 91       	pop	r23
    408c:	6f 91       	pop	r22
    408e:	5f 91       	pop	r21
    4090:	4f 91       	pop	r20
    4092:	3f 91       	pop	r19
    4094:	2f 91       	pop	r18
    4096:	0f 90       	pop	r0
    4098:	0b be       	out	0x3b, r0	; 59
    409a:	0f 90       	pop	r0
    409c:	0f be       	out	0x3f, r0	; 63
    409e:	0f 90       	pop	r0
    40a0:	1f 90       	pop	r1
    40a2:	18 95       	reti

000040a4 <__subsf3>:
    40a4:	50 58       	subi	r21, 0x80	; 128

000040a6 <__addsf3>:
    40a6:	bb 27       	eor	r27, r27
    40a8:	aa 27       	eor	r26, r26
    40aa:	0e d0       	rcall	.+28     	; 0x40c8 <__addsf3x>
    40ac:	21 c1       	rjmp	.+578    	; 0x42f0 <__fp_round>
    40ae:	12 d1       	rcall	.+548    	; 0x42d4 <__fp_pscA>
    40b0:	30 f0       	brcs	.+12     	; 0x40be <__addsf3+0x18>
    40b2:	17 d1       	rcall	.+558    	; 0x42e2 <__fp_pscB>
    40b4:	20 f0       	brcs	.+8      	; 0x40be <__addsf3+0x18>
    40b6:	31 f4       	brne	.+12     	; 0x40c4 <__addsf3+0x1e>
    40b8:	9f 3f       	cpi	r25, 0xFF	; 255
    40ba:	11 f4       	brne	.+4      	; 0x40c0 <__addsf3+0x1a>
    40bc:	1e f4       	brtc	.+6      	; 0x40c4 <__addsf3+0x1e>
    40be:	07 c1       	rjmp	.+526    	; 0x42ce <__fp_nan>
    40c0:	0e f4       	brtc	.+2      	; 0x40c4 <__addsf3+0x1e>
    40c2:	e0 95       	com	r30
    40c4:	e7 fb       	bst	r30, 7
    40c6:	fd c0       	rjmp	.+506    	; 0x42c2 <__fp_inf>

000040c8 <__addsf3x>:
    40c8:	e9 2f       	mov	r30, r25
    40ca:	0e 94 46 13 	call	0x268c	; 0x268c <__fp_split3>
    40ce:	78 f3       	brcs	.-34     	; 0x40ae <__addsf3+0x8>
    40d0:	ba 17       	cp	r27, r26
    40d2:	62 07       	cpc	r22, r18
    40d4:	73 07       	cpc	r23, r19
    40d6:	84 07       	cpc	r24, r20
    40d8:	95 07       	cpc	r25, r21
    40da:	20 f0       	brcs	.+8      	; 0x40e4 <__addsf3x+0x1c>
    40dc:	79 f4       	brne	.+30     	; 0x40fc <__addsf3x+0x34>
    40de:	a6 f5       	brtc	.+104    	; 0x4148 <__addsf3x+0x80>
    40e0:	0c 94 68 13 	jmp	0x26d0	; 0x26d0 <__fp_zero>
    40e4:	0e f4       	brtc	.+2      	; 0x40e8 <__addsf3x+0x20>
    40e6:	e0 95       	com	r30
    40e8:	0b 2e       	mov	r0, r27
    40ea:	ba 2f       	mov	r27, r26
    40ec:	a0 2d       	mov	r26, r0
    40ee:	0b 01       	movw	r0, r22
    40f0:	b9 01       	movw	r22, r18
    40f2:	90 01       	movw	r18, r0
    40f4:	0c 01       	movw	r0, r24
    40f6:	ca 01       	movw	r24, r20
    40f8:	a0 01       	movw	r20, r0
    40fa:	11 24       	eor	r1, r1
    40fc:	ff 27       	eor	r31, r31
    40fe:	59 1b       	sub	r21, r25
    4100:	99 f0       	breq	.+38     	; 0x4128 <__addsf3x+0x60>
    4102:	59 3f       	cpi	r21, 0xF9	; 249
    4104:	50 f4       	brcc	.+20     	; 0x411a <__addsf3x+0x52>
    4106:	50 3e       	cpi	r21, 0xE0	; 224
    4108:	68 f1       	brcs	.+90     	; 0x4164 <__addsf3x+0x9c>
    410a:	1a 16       	cp	r1, r26
    410c:	f0 40       	sbci	r31, 0x00	; 0
    410e:	a2 2f       	mov	r26, r18
    4110:	23 2f       	mov	r18, r19
    4112:	34 2f       	mov	r19, r20
    4114:	44 27       	eor	r20, r20
    4116:	58 5f       	subi	r21, 0xF8	; 248
    4118:	f3 cf       	rjmp	.-26     	; 0x4100 <__addsf3x+0x38>
    411a:	46 95       	lsr	r20
    411c:	37 95       	ror	r19
    411e:	27 95       	ror	r18
    4120:	a7 95       	ror	r26
    4122:	f0 40       	sbci	r31, 0x00	; 0
    4124:	53 95       	inc	r21
    4126:	c9 f7       	brne	.-14     	; 0x411a <__addsf3x+0x52>
    4128:	7e f4       	brtc	.+30     	; 0x4148 <__addsf3x+0x80>
    412a:	1f 16       	cp	r1, r31
    412c:	ba 0b       	sbc	r27, r26
    412e:	62 0b       	sbc	r22, r18
    4130:	73 0b       	sbc	r23, r19
    4132:	84 0b       	sbc	r24, r20
    4134:	ba f0       	brmi	.+46     	; 0x4164 <__addsf3x+0x9c>
    4136:	91 50       	subi	r25, 0x01	; 1
    4138:	a1 f0       	breq	.+40     	; 0x4162 <__addsf3x+0x9a>
    413a:	ff 0f       	add	r31, r31
    413c:	bb 1f       	adc	r27, r27
    413e:	66 1f       	adc	r22, r22
    4140:	77 1f       	adc	r23, r23
    4142:	88 1f       	adc	r24, r24
    4144:	c2 f7       	brpl	.-16     	; 0x4136 <__addsf3x+0x6e>
    4146:	0e c0       	rjmp	.+28     	; 0x4164 <__addsf3x+0x9c>
    4148:	ba 0f       	add	r27, r26
    414a:	62 1f       	adc	r22, r18
    414c:	73 1f       	adc	r23, r19
    414e:	84 1f       	adc	r24, r20
    4150:	48 f4       	brcc	.+18     	; 0x4164 <__addsf3x+0x9c>
    4152:	87 95       	ror	r24
    4154:	77 95       	ror	r23
    4156:	67 95       	ror	r22
    4158:	b7 95       	ror	r27
    415a:	f7 95       	ror	r31
    415c:	9e 3f       	cpi	r25, 0xFE	; 254
    415e:	08 f0       	brcs	.+2      	; 0x4162 <__addsf3x+0x9a>
    4160:	b1 cf       	rjmp	.-158    	; 0x40c4 <__addsf3+0x1e>
    4162:	93 95       	inc	r25
    4164:	88 0f       	add	r24, r24
    4166:	08 f0       	brcs	.+2      	; 0x416a <__addsf3x+0xa2>
    4168:	99 27       	eor	r25, r25
    416a:	ee 0f       	add	r30, r30
    416c:	97 95       	ror	r25
    416e:	87 95       	ror	r24
    4170:	08 95       	ret

00004172 <__divsf3>:
    4172:	0d d0       	rcall	.+26     	; 0x418e <__divsf3x>
    4174:	bd c0       	rjmp	.+378    	; 0x42f0 <__fp_round>
    4176:	b5 d0       	rcall	.+362    	; 0x42e2 <__fp_pscB>
    4178:	48 f0       	brcs	.+18     	; 0x418c <__divsf3+0x1a>
    417a:	ac d0       	rcall	.+344    	; 0x42d4 <__fp_pscA>
    417c:	38 f0       	brcs	.+14     	; 0x418c <__divsf3+0x1a>
    417e:	21 f4       	brne	.+8      	; 0x4188 <__divsf3+0x16>
    4180:	5f 3f       	cpi	r21, 0xFF	; 255
    4182:	21 f0       	breq	.+8      	; 0x418c <__divsf3+0x1a>
    4184:	9e c0       	rjmp	.+316    	; 0x42c2 <__fp_inf>
    4186:	51 11       	cpse	r21, r1
    4188:	0c 94 69 13 	jmp	0x26d2	; 0x26d2 <__fp_szero>
    418c:	a0 c0       	rjmp	.+320    	; 0x42ce <__fp_nan>

0000418e <__divsf3x>:
    418e:	0e 94 46 13 	call	0x268c	; 0x268c <__fp_split3>
    4192:	88 f3       	brcs	.-30     	; 0x4176 <__divsf3+0x4>

00004194 <__divsf3_pse>:
    4194:	99 23       	and	r25, r25
    4196:	b9 f3       	breq	.-18     	; 0x4186 <__divsf3+0x14>
    4198:	55 23       	and	r21, r21
    419a:	a1 f3       	breq	.-24     	; 0x4184 <__divsf3+0x12>
    419c:	95 1b       	sub	r25, r21
    419e:	55 0b       	sbc	r21, r21
    41a0:	bb 27       	eor	r27, r27
    41a2:	aa 27       	eor	r26, r26
    41a4:	62 17       	cp	r22, r18
    41a6:	73 07       	cpc	r23, r19
    41a8:	84 07       	cpc	r24, r20
    41aa:	38 f0       	brcs	.+14     	; 0x41ba <__divsf3_pse+0x26>
    41ac:	9f 5f       	subi	r25, 0xFF	; 255
    41ae:	5f 4f       	sbci	r21, 0xFF	; 255
    41b0:	22 0f       	add	r18, r18
    41b2:	33 1f       	adc	r19, r19
    41b4:	44 1f       	adc	r20, r20
    41b6:	aa 1f       	adc	r26, r26
    41b8:	a9 f3       	breq	.-22     	; 0x41a4 <__divsf3_pse+0x10>
    41ba:	34 d0       	rcall	.+104    	; 0x4224 <__divsf3_pse+0x90>
    41bc:	0e 2e       	mov	r0, r30
    41be:	3a f0       	brmi	.+14     	; 0x41ce <__divsf3_pse+0x3a>
    41c0:	e0 e8       	ldi	r30, 0x80	; 128
    41c2:	31 d0       	rcall	.+98     	; 0x4226 <__divsf3_pse+0x92>
    41c4:	91 50       	subi	r25, 0x01	; 1
    41c6:	50 40       	sbci	r21, 0x00	; 0
    41c8:	e6 95       	lsr	r30
    41ca:	00 1c       	adc	r0, r0
    41cc:	ca f7       	brpl	.-14     	; 0x41c0 <__divsf3_pse+0x2c>
    41ce:	2a d0       	rcall	.+84     	; 0x4224 <__divsf3_pse+0x90>
    41d0:	fe 2f       	mov	r31, r30
    41d2:	28 d0       	rcall	.+80     	; 0x4224 <__divsf3_pse+0x90>
    41d4:	66 0f       	add	r22, r22
    41d6:	77 1f       	adc	r23, r23
    41d8:	88 1f       	adc	r24, r24
    41da:	bb 1f       	adc	r27, r27
    41dc:	26 17       	cp	r18, r22
    41de:	37 07       	cpc	r19, r23
    41e0:	48 07       	cpc	r20, r24
    41e2:	ab 07       	cpc	r26, r27
    41e4:	b0 e8       	ldi	r27, 0x80	; 128
    41e6:	09 f0       	breq	.+2      	; 0x41ea <__divsf3_pse+0x56>
    41e8:	bb 0b       	sbc	r27, r27
    41ea:	80 2d       	mov	r24, r0
    41ec:	bf 01       	movw	r22, r30
    41ee:	ff 27       	eor	r31, r31
    41f0:	93 58       	subi	r25, 0x83	; 131
    41f2:	5f 4f       	sbci	r21, 0xFF	; 255
    41f4:	32 f0       	brmi	.+12     	; 0x4202 <__divsf3_pse+0x6e>
    41f6:	9e 3f       	cpi	r25, 0xFE	; 254
    41f8:	51 05       	cpc	r21, r1
    41fa:	70 f0       	brcs	.+28     	; 0x4218 <__divsf3_pse+0x84>
    41fc:	62 c0       	rjmp	.+196    	; 0x42c2 <__fp_inf>
    41fe:	0c 94 69 13 	jmp	0x26d2	; 0x26d2 <__fp_szero>
    4202:	5f 3f       	cpi	r21, 0xFF	; 255
    4204:	e4 f3       	brlt	.-8      	; 0x41fe <__divsf3_pse+0x6a>
    4206:	98 3e       	cpi	r25, 0xE8	; 232
    4208:	d4 f3       	brlt	.-12     	; 0x41fe <__divsf3_pse+0x6a>
    420a:	86 95       	lsr	r24
    420c:	77 95       	ror	r23
    420e:	67 95       	ror	r22
    4210:	b7 95       	ror	r27
    4212:	f7 95       	ror	r31
    4214:	9f 5f       	subi	r25, 0xFF	; 255
    4216:	c9 f7       	brne	.-14     	; 0x420a <__divsf3_pse+0x76>
    4218:	88 0f       	add	r24, r24
    421a:	91 1d       	adc	r25, r1
    421c:	96 95       	lsr	r25
    421e:	87 95       	ror	r24
    4220:	97 f9       	bld	r25, 7
    4222:	08 95       	ret
    4224:	e1 e0       	ldi	r30, 0x01	; 1
    4226:	66 0f       	add	r22, r22
    4228:	77 1f       	adc	r23, r23
    422a:	88 1f       	adc	r24, r24
    422c:	bb 1f       	adc	r27, r27
    422e:	62 17       	cp	r22, r18
    4230:	73 07       	cpc	r23, r19
    4232:	84 07       	cpc	r24, r20
    4234:	ba 07       	cpc	r27, r26
    4236:	20 f0       	brcs	.+8      	; 0x4240 <__divsf3_pse+0xac>
    4238:	62 1b       	sub	r22, r18
    423a:	73 0b       	sbc	r23, r19
    423c:	84 0b       	sbc	r24, r20
    423e:	ba 0b       	sbc	r27, r26
    4240:	ee 1f       	adc	r30, r30
    4242:	88 f7       	brcc	.-30     	; 0x4226 <__divsf3_pse+0x92>
    4244:	e0 95       	com	r30
    4246:	08 95       	ret

00004248 <__floatunsisf>:
    4248:	e8 94       	clt
    424a:	09 c0       	rjmp	.+18     	; 0x425e <__floatsisf+0x12>

0000424c <__floatsisf>:
    424c:	97 fb       	bst	r25, 7
    424e:	3e f4       	brtc	.+14     	; 0x425e <__floatsisf+0x12>
    4250:	90 95       	com	r25
    4252:	80 95       	com	r24
    4254:	70 95       	com	r23
    4256:	61 95       	neg	r22
    4258:	7f 4f       	sbci	r23, 0xFF	; 255
    425a:	8f 4f       	sbci	r24, 0xFF	; 255
    425c:	9f 4f       	sbci	r25, 0xFF	; 255
    425e:	99 23       	and	r25, r25
    4260:	a9 f0       	breq	.+42     	; 0x428c <__floatsisf+0x40>
    4262:	f9 2f       	mov	r31, r25
    4264:	96 e9       	ldi	r25, 0x96	; 150
    4266:	bb 27       	eor	r27, r27
    4268:	93 95       	inc	r25
    426a:	f6 95       	lsr	r31
    426c:	87 95       	ror	r24
    426e:	77 95       	ror	r23
    4270:	67 95       	ror	r22
    4272:	b7 95       	ror	r27
    4274:	f1 11       	cpse	r31, r1
    4276:	f8 cf       	rjmp	.-16     	; 0x4268 <__floatsisf+0x1c>
    4278:	fa f4       	brpl	.+62     	; 0x42b8 <__floatsisf+0x6c>
    427a:	bb 0f       	add	r27, r27
    427c:	11 f4       	brne	.+4      	; 0x4282 <__floatsisf+0x36>
    427e:	60 ff       	sbrs	r22, 0
    4280:	1b c0       	rjmp	.+54     	; 0x42b8 <__floatsisf+0x6c>
    4282:	6f 5f       	subi	r22, 0xFF	; 255
    4284:	7f 4f       	sbci	r23, 0xFF	; 255
    4286:	8f 4f       	sbci	r24, 0xFF	; 255
    4288:	9f 4f       	sbci	r25, 0xFF	; 255
    428a:	16 c0       	rjmp	.+44     	; 0x42b8 <__floatsisf+0x6c>
    428c:	88 23       	and	r24, r24
    428e:	11 f0       	breq	.+4      	; 0x4294 <__floatsisf+0x48>
    4290:	96 e9       	ldi	r25, 0x96	; 150
    4292:	11 c0       	rjmp	.+34     	; 0x42b6 <__floatsisf+0x6a>
    4294:	77 23       	and	r23, r23
    4296:	21 f0       	breq	.+8      	; 0x42a0 <__floatsisf+0x54>
    4298:	9e e8       	ldi	r25, 0x8E	; 142
    429a:	87 2f       	mov	r24, r23
    429c:	76 2f       	mov	r23, r22
    429e:	05 c0       	rjmp	.+10     	; 0x42aa <__floatsisf+0x5e>
    42a0:	66 23       	and	r22, r22
    42a2:	71 f0       	breq	.+28     	; 0x42c0 <__floatsisf+0x74>
    42a4:	96 e8       	ldi	r25, 0x86	; 134
    42a6:	86 2f       	mov	r24, r22
    42a8:	70 e0       	ldi	r23, 0x00	; 0
    42aa:	60 e0       	ldi	r22, 0x00	; 0
    42ac:	2a f0       	brmi	.+10     	; 0x42b8 <__floatsisf+0x6c>
    42ae:	9a 95       	dec	r25
    42b0:	66 0f       	add	r22, r22
    42b2:	77 1f       	adc	r23, r23
    42b4:	88 1f       	adc	r24, r24
    42b6:	da f7       	brpl	.-10     	; 0x42ae <__floatsisf+0x62>
    42b8:	88 0f       	add	r24, r24
    42ba:	96 95       	lsr	r25
    42bc:	87 95       	ror	r24
    42be:	97 f9       	bld	r25, 7
    42c0:	08 95       	ret

000042c2 <__fp_inf>:
    42c2:	97 f9       	bld	r25, 7
    42c4:	9f 67       	ori	r25, 0x7F	; 127
    42c6:	80 e8       	ldi	r24, 0x80	; 128
    42c8:	70 e0       	ldi	r23, 0x00	; 0
    42ca:	60 e0       	ldi	r22, 0x00	; 0
    42cc:	08 95       	ret

000042ce <__fp_nan>:
    42ce:	9f ef       	ldi	r25, 0xFF	; 255
    42d0:	80 ec       	ldi	r24, 0xC0	; 192
    42d2:	08 95       	ret

000042d4 <__fp_pscA>:
    42d4:	00 24       	eor	r0, r0
    42d6:	0a 94       	dec	r0
    42d8:	16 16       	cp	r1, r22
    42da:	17 06       	cpc	r1, r23
    42dc:	18 06       	cpc	r1, r24
    42de:	09 06       	cpc	r0, r25
    42e0:	08 95       	ret

000042e2 <__fp_pscB>:
    42e2:	00 24       	eor	r0, r0
    42e4:	0a 94       	dec	r0
    42e6:	12 16       	cp	r1, r18
    42e8:	13 06       	cpc	r1, r19
    42ea:	14 06       	cpc	r1, r20
    42ec:	05 06       	cpc	r0, r21
    42ee:	08 95       	ret

000042f0 <__fp_round>:
    42f0:	09 2e       	mov	r0, r25
    42f2:	03 94       	inc	r0
    42f4:	00 0c       	add	r0, r0
    42f6:	11 f4       	brne	.+4      	; 0x42fc <__fp_round+0xc>
    42f8:	88 23       	and	r24, r24
    42fa:	52 f0       	brmi	.+20     	; 0x4310 <__fp_round+0x20>
    42fc:	bb 0f       	add	r27, r27
    42fe:	40 f4       	brcc	.+16     	; 0x4310 <__fp_round+0x20>
    4300:	bf 2b       	or	r27, r31
    4302:	11 f4       	brne	.+4      	; 0x4308 <__fp_round+0x18>
    4304:	60 ff       	sbrs	r22, 0
    4306:	04 c0       	rjmp	.+8      	; 0x4310 <__fp_round+0x20>
    4308:	6f 5f       	subi	r22, 0xFF	; 255
    430a:	7f 4f       	sbci	r23, 0xFF	; 255
    430c:	8f 4f       	sbci	r24, 0xFF	; 255
    430e:	9f 4f       	sbci	r25, 0xFF	; 255
    4310:	08 95       	ret

00004312 <__gesf2>:
    4312:	69 d0       	rcall	.+210    	; 0x43e6 <__fp_cmp>
    4314:	08 f4       	brcc	.+2      	; 0x4318 <__gesf2+0x6>
    4316:	8f ef       	ldi	r24, 0xFF	; 255
    4318:	08 95       	ret

0000431a <__mulsf3>:
    431a:	0c d0       	rcall	.+24     	; 0x4334 <__mulsf3x>
    431c:	e9 cf       	rjmp	.-46     	; 0x42f0 <__fp_round>
    431e:	da df       	rcall	.-76     	; 0x42d4 <__fp_pscA>
    4320:	28 f0       	brcs	.+10     	; 0x432c <__mulsf3+0x12>
    4322:	df df       	rcall	.-66     	; 0x42e2 <__fp_pscB>
    4324:	18 f0       	brcs	.+6      	; 0x432c <__mulsf3+0x12>
    4326:	95 23       	and	r25, r21
    4328:	09 f0       	breq	.+2      	; 0x432c <__mulsf3+0x12>
    432a:	cb cf       	rjmp	.-106    	; 0x42c2 <__fp_inf>
    432c:	d0 cf       	rjmp	.-96     	; 0x42ce <__fp_nan>
    432e:	11 24       	eor	r1, r1
    4330:	0c 94 69 13 	jmp	0x26d2	; 0x26d2 <__fp_szero>

00004334 <__mulsf3x>:
    4334:	0e 94 46 13 	call	0x268c	; 0x268c <__fp_split3>
    4338:	90 f3       	brcs	.-28     	; 0x431e <__mulsf3+0x4>

0000433a <__mulsf3_pse>:
    433a:	95 9f       	mul	r25, r21
    433c:	c1 f3       	breq	.-16     	; 0x432e <__mulsf3+0x14>
    433e:	95 0f       	add	r25, r21
    4340:	50 e0       	ldi	r21, 0x00	; 0
    4342:	55 1f       	adc	r21, r21
    4344:	62 9f       	mul	r22, r18
    4346:	f0 01       	movw	r30, r0
    4348:	72 9f       	mul	r23, r18
    434a:	bb 27       	eor	r27, r27
    434c:	f0 0d       	add	r31, r0
    434e:	b1 1d       	adc	r27, r1
    4350:	63 9f       	mul	r22, r19
    4352:	aa 27       	eor	r26, r26
    4354:	f0 0d       	add	r31, r0
    4356:	b1 1d       	adc	r27, r1
    4358:	aa 1f       	adc	r26, r26
    435a:	64 9f       	mul	r22, r20
    435c:	66 27       	eor	r22, r22
    435e:	b0 0d       	add	r27, r0
    4360:	a1 1d       	adc	r26, r1
    4362:	66 1f       	adc	r22, r22
    4364:	82 9f       	mul	r24, r18
    4366:	22 27       	eor	r18, r18
    4368:	b0 0d       	add	r27, r0
    436a:	a1 1d       	adc	r26, r1
    436c:	62 1f       	adc	r22, r18
    436e:	73 9f       	mul	r23, r19
    4370:	b0 0d       	add	r27, r0
    4372:	a1 1d       	adc	r26, r1
    4374:	62 1f       	adc	r22, r18
    4376:	83 9f       	mul	r24, r19
    4378:	a0 0d       	add	r26, r0
    437a:	61 1d       	adc	r22, r1
    437c:	22 1f       	adc	r18, r18
    437e:	74 9f       	mul	r23, r20
    4380:	33 27       	eor	r19, r19
    4382:	a0 0d       	add	r26, r0
    4384:	61 1d       	adc	r22, r1
    4386:	23 1f       	adc	r18, r19
    4388:	84 9f       	mul	r24, r20
    438a:	60 0d       	add	r22, r0
    438c:	21 1d       	adc	r18, r1
    438e:	82 2f       	mov	r24, r18
    4390:	76 2f       	mov	r23, r22
    4392:	6a 2f       	mov	r22, r26
    4394:	11 24       	eor	r1, r1
    4396:	9f 57       	subi	r25, 0x7F	; 127
    4398:	50 40       	sbci	r21, 0x00	; 0
    439a:	92 f0       	brmi	.+36     	; 0x43c0 <__mulsf3_pse+0x86>
    439c:	e9 f0       	breq	.+58     	; 0x43d8 <__mulsf3_pse+0x9e>
    439e:	88 23       	and	r24, r24
    43a0:	4a f0       	brmi	.+18     	; 0x43b4 <__mulsf3_pse+0x7a>
    43a2:	ee 0f       	add	r30, r30
    43a4:	ff 1f       	adc	r31, r31
    43a6:	bb 1f       	adc	r27, r27
    43a8:	66 1f       	adc	r22, r22
    43aa:	77 1f       	adc	r23, r23
    43ac:	88 1f       	adc	r24, r24
    43ae:	91 50       	subi	r25, 0x01	; 1
    43b0:	50 40       	sbci	r21, 0x00	; 0
    43b2:	a9 f7       	brne	.-22     	; 0x439e <__mulsf3_pse+0x64>
    43b4:	9e 3f       	cpi	r25, 0xFE	; 254
    43b6:	51 05       	cpc	r21, r1
    43b8:	78 f0       	brcs	.+30     	; 0x43d8 <__mulsf3_pse+0x9e>
    43ba:	83 cf       	rjmp	.-250    	; 0x42c2 <__fp_inf>
    43bc:	0c 94 69 13 	jmp	0x26d2	; 0x26d2 <__fp_szero>
    43c0:	5f 3f       	cpi	r21, 0xFF	; 255
    43c2:	e4 f3       	brlt	.-8      	; 0x43bc <__mulsf3_pse+0x82>
    43c4:	98 3e       	cpi	r25, 0xE8	; 232
    43c6:	d4 f3       	brlt	.-12     	; 0x43bc <__mulsf3_pse+0x82>
    43c8:	86 95       	lsr	r24
    43ca:	77 95       	ror	r23
    43cc:	67 95       	ror	r22
    43ce:	b7 95       	ror	r27
    43d0:	f7 95       	ror	r31
    43d2:	e7 95       	ror	r30
    43d4:	9f 5f       	subi	r25, 0xFF	; 255
    43d6:	c1 f7       	brne	.-16     	; 0x43c8 <__mulsf3_pse+0x8e>
    43d8:	fe 2b       	or	r31, r30
    43da:	88 0f       	add	r24, r24
    43dc:	91 1d       	adc	r25, r1
    43de:	96 95       	lsr	r25
    43e0:	87 95       	ror	r24
    43e2:	97 f9       	bld	r25, 7
    43e4:	08 95       	ret

000043e6 <__fp_cmp>:
    43e6:	99 0f       	add	r25, r25
    43e8:	00 08       	sbc	r0, r0
    43ea:	55 0f       	add	r21, r21
    43ec:	aa 0b       	sbc	r26, r26
    43ee:	e0 e8       	ldi	r30, 0x80	; 128
    43f0:	fe ef       	ldi	r31, 0xFE	; 254
    43f2:	16 16       	cp	r1, r22
    43f4:	17 06       	cpc	r1, r23
    43f6:	e8 07       	cpc	r30, r24
    43f8:	f9 07       	cpc	r31, r25
    43fa:	c0 f0       	brcs	.+48     	; 0x442c <__fp_cmp+0x46>
    43fc:	12 16       	cp	r1, r18
    43fe:	13 06       	cpc	r1, r19
    4400:	e4 07       	cpc	r30, r20
    4402:	f5 07       	cpc	r31, r21
    4404:	98 f0       	brcs	.+38     	; 0x442c <__fp_cmp+0x46>
    4406:	62 1b       	sub	r22, r18
    4408:	73 0b       	sbc	r23, r19
    440a:	84 0b       	sbc	r24, r20
    440c:	95 0b       	sbc	r25, r21
    440e:	39 f4       	brne	.+14     	; 0x441e <__fp_cmp+0x38>
    4410:	0a 26       	eor	r0, r26
    4412:	61 f0       	breq	.+24     	; 0x442c <__fp_cmp+0x46>
    4414:	23 2b       	or	r18, r19
    4416:	24 2b       	or	r18, r20
    4418:	25 2b       	or	r18, r21
    441a:	21 f4       	brne	.+8      	; 0x4424 <__fp_cmp+0x3e>
    441c:	08 95       	ret
    441e:	0a 26       	eor	r0, r26
    4420:	09 f4       	brne	.+2      	; 0x4424 <__fp_cmp+0x3e>
    4422:	a1 40       	sbci	r26, 0x01	; 1
    4424:	a6 95       	lsr	r26
    4426:	8f ef       	ldi	r24, 0xFF	; 255
    4428:	81 1d       	adc	r24, r1
    442a:	81 1d       	adc	r24, r1
    442c:	08 95       	ret

0000442e <__udivmodsi4>:
    442e:	a1 e2       	ldi	r26, 0x21	; 33
    4430:	1a 2e       	mov	r1, r26
    4432:	aa 1b       	sub	r26, r26
    4434:	bb 1b       	sub	r27, r27
    4436:	fd 01       	movw	r30, r26
    4438:	0d c0       	rjmp	.+26     	; 0x4454 <__udivmodsi4_ep>

0000443a <__udivmodsi4_loop>:
    443a:	aa 1f       	adc	r26, r26
    443c:	bb 1f       	adc	r27, r27
    443e:	ee 1f       	adc	r30, r30
    4440:	ff 1f       	adc	r31, r31
    4442:	a2 17       	cp	r26, r18
    4444:	b3 07       	cpc	r27, r19
    4446:	e4 07       	cpc	r30, r20
    4448:	f5 07       	cpc	r31, r21
    444a:	20 f0       	brcs	.+8      	; 0x4454 <__udivmodsi4_ep>
    444c:	a2 1b       	sub	r26, r18
    444e:	b3 0b       	sbc	r27, r19
    4450:	e4 0b       	sbc	r30, r20
    4452:	f5 0b       	sbc	r31, r21

00004454 <__udivmodsi4_ep>:
    4454:	66 1f       	adc	r22, r22
    4456:	77 1f       	adc	r23, r23
    4458:	88 1f       	adc	r24, r24
    445a:	99 1f       	adc	r25, r25
    445c:	1a 94       	dec	r1
    445e:	69 f7       	brne	.-38     	; 0x443a <__udivmodsi4_loop>
    4460:	60 95       	com	r22
    4462:	70 95       	com	r23
    4464:	80 95       	com	r24
    4466:	90 95       	com	r25
    4468:	9b 01       	movw	r18, r22
    446a:	ac 01       	movw	r20, r24
    446c:	bd 01       	movw	r22, r26
    446e:	cf 01       	movw	r24, r30
    4470:	08 95       	ret

00004472 <__tablejump2__>:
    4472:	ee 0f       	add	r30, r30
    4474:	ff 1f       	adc	r31, r31
    4476:	88 1f       	adc	r24, r24
    4478:	8b bf       	out	0x3b, r24	; 59
    447a:	07 90       	elpm	r0, Z+
    447c:	f6 91       	elpm	r31, Z
    447e:	e0 2d       	mov	r30, r0
    4480:	19 94       	eijmp

00004482 <calloc>:
    4482:	0f 93       	push	r16
    4484:	1f 93       	push	r17
    4486:	cf 93       	push	r28
    4488:	df 93       	push	r29
    448a:	86 9f       	mul	r24, r22
    448c:	80 01       	movw	r16, r0
    448e:	87 9f       	mul	r24, r23
    4490:	10 0d       	add	r17, r0
    4492:	96 9f       	mul	r25, r22
    4494:	10 0d       	add	r17, r0
    4496:	11 24       	eor	r1, r1
    4498:	c8 01       	movw	r24, r16
    449a:	0d d0       	rcall	.+26     	; 0x44b6 <malloc>
    449c:	ec 01       	movw	r28, r24
    449e:	00 97       	sbiw	r24, 0x00	; 0
    44a0:	21 f0       	breq	.+8      	; 0x44aa <calloc+0x28>
    44a2:	a8 01       	movw	r20, r16
    44a4:	60 e0       	ldi	r22, 0x00	; 0
    44a6:	70 e0       	ldi	r23, 0x00	; 0
    44a8:	34 d1       	rcall	.+616    	; 0x4712 <memset>
    44aa:	ce 01       	movw	r24, r28
    44ac:	df 91       	pop	r29
    44ae:	cf 91       	pop	r28
    44b0:	1f 91       	pop	r17
    44b2:	0f 91       	pop	r16
    44b4:	08 95       	ret

000044b6 <malloc>:
    44b6:	0f 93       	push	r16
    44b8:	1f 93       	push	r17
    44ba:	cf 93       	push	r28
    44bc:	df 93       	push	r29
    44be:	82 30       	cpi	r24, 0x02	; 2
    44c0:	91 05       	cpc	r25, r1
    44c2:	10 f4       	brcc	.+4      	; 0x44c8 <malloc+0x12>
    44c4:	82 e0       	ldi	r24, 0x02	; 2
    44c6:	90 e0       	ldi	r25, 0x00	; 0
    44c8:	e0 91 d9 09 	lds	r30, 0x09D9	; 0x8009d9 <__flp>
    44cc:	f0 91 da 09 	lds	r31, 0x09DA	; 0x8009da <__flp+0x1>
    44d0:	20 e0       	ldi	r18, 0x00	; 0
    44d2:	30 e0       	ldi	r19, 0x00	; 0
    44d4:	a0 e0       	ldi	r26, 0x00	; 0
    44d6:	b0 e0       	ldi	r27, 0x00	; 0
    44d8:	30 97       	sbiw	r30, 0x00	; 0
    44da:	19 f1       	breq	.+70     	; 0x4522 <malloc+0x6c>
    44dc:	40 81       	ld	r20, Z
    44de:	51 81       	ldd	r21, Z+1	; 0x01
    44e0:	02 81       	ldd	r16, Z+2	; 0x02
    44e2:	13 81       	ldd	r17, Z+3	; 0x03
    44e4:	48 17       	cp	r20, r24
    44e6:	59 07       	cpc	r21, r25
    44e8:	c8 f0       	brcs	.+50     	; 0x451c <malloc+0x66>
    44ea:	84 17       	cp	r24, r20
    44ec:	95 07       	cpc	r25, r21
    44ee:	69 f4       	brne	.+26     	; 0x450a <malloc+0x54>
    44f0:	10 97       	sbiw	r26, 0x00	; 0
    44f2:	31 f0       	breq	.+12     	; 0x4500 <malloc+0x4a>
    44f4:	12 96       	adiw	r26, 0x02	; 2
    44f6:	0c 93       	st	X, r16
    44f8:	12 97       	sbiw	r26, 0x02	; 2
    44fa:	13 96       	adiw	r26, 0x03	; 3
    44fc:	1c 93       	st	X, r17
    44fe:	27 c0       	rjmp	.+78     	; 0x454e <malloc+0x98>
    4500:	00 93 d9 09 	sts	0x09D9, r16	; 0x8009d9 <__flp>
    4504:	10 93 da 09 	sts	0x09DA, r17	; 0x8009da <__flp+0x1>
    4508:	22 c0       	rjmp	.+68     	; 0x454e <malloc+0x98>
    450a:	21 15       	cp	r18, r1
    450c:	31 05       	cpc	r19, r1
    450e:	19 f0       	breq	.+6      	; 0x4516 <malloc+0x60>
    4510:	42 17       	cp	r20, r18
    4512:	53 07       	cpc	r21, r19
    4514:	18 f4       	brcc	.+6      	; 0x451c <malloc+0x66>
    4516:	9a 01       	movw	r18, r20
    4518:	bd 01       	movw	r22, r26
    451a:	ef 01       	movw	r28, r30
    451c:	df 01       	movw	r26, r30
    451e:	f8 01       	movw	r30, r16
    4520:	db cf       	rjmp	.-74     	; 0x44d8 <malloc+0x22>
    4522:	21 15       	cp	r18, r1
    4524:	31 05       	cpc	r19, r1
    4526:	f9 f0       	breq	.+62     	; 0x4566 <malloc+0xb0>
    4528:	28 1b       	sub	r18, r24
    452a:	39 0b       	sbc	r19, r25
    452c:	24 30       	cpi	r18, 0x04	; 4
    452e:	31 05       	cpc	r19, r1
    4530:	80 f4       	brcc	.+32     	; 0x4552 <malloc+0x9c>
    4532:	8a 81       	ldd	r24, Y+2	; 0x02
    4534:	9b 81       	ldd	r25, Y+3	; 0x03
    4536:	61 15       	cp	r22, r1
    4538:	71 05       	cpc	r23, r1
    453a:	21 f0       	breq	.+8      	; 0x4544 <malloc+0x8e>
    453c:	fb 01       	movw	r30, r22
    453e:	93 83       	std	Z+3, r25	; 0x03
    4540:	82 83       	std	Z+2, r24	; 0x02
    4542:	04 c0       	rjmp	.+8      	; 0x454c <malloc+0x96>
    4544:	90 93 da 09 	sts	0x09DA, r25	; 0x8009da <__flp+0x1>
    4548:	80 93 d9 09 	sts	0x09D9, r24	; 0x8009d9 <__flp>
    454c:	fe 01       	movw	r30, r28
    454e:	32 96       	adiw	r30, 0x02	; 2
    4550:	44 c0       	rjmp	.+136    	; 0x45da <malloc+0x124>
    4552:	fe 01       	movw	r30, r28
    4554:	e2 0f       	add	r30, r18
    4556:	f3 1f       	adc	r31, r19
    4558:	81 93       	st	Z+, r24
    455a:	91 93       	st	Z+, r25
    455c:	22 50       	subi	r18, 0x02	; 2
    455e:	31 09       	sbc	r19, r1
    4560:	39 83       	std	Y+1, r19	; 0x01
    4562:	28 83       	st	Y, r18
    4564:	3a c0       	rjmp	.+116    	; 0x45da <malloc+0x124>
    4566:	20 91 d7 09 	lds	r18, 0x09D7	; 0x8009d7 <__brkval>
    456a:	30 91 d8 09 	lds	r19, 0x09D8	; 0x8009d8 <__brkval+0x1>
    456e:	23 2b       	or	r18, r19
    4570:	41 f4       	brne	.+16     	; 0x4582 <malloc+0xcc>
    4572:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    4576:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    457a:	30 93 d8 09 	sts	0x09D8, r19	; 0x8009d8 <__brkval+0x1>
    457e:	20 93 d7 09 	sts	0x09D7, r18	; 0x8009d7 <__brkval>
    4582:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    4586:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    458a:	21 15       	cp	r18, r1
    458c:	31 05       	cpc	r19, r1
    458e:	41 f4       	brne	.+16     	; 0x45a0 <malloc+0xea>
    4590:	2d b7       	in	r18, 0x3d	; 61
    4592:	3e b7       	in	r19, 0x3e	; 62
    4594:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4598:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    459c:	24 1b       	sub	r18, r20
    459e:	35 0b       	sbc	r19, r21
    45a0:	e0 91 d7 09 	lds	r30, 0x09D7	; 0x8009d7 <__brkval>
    45a4:	f0 91 d8 09 	lds	r31, 0x09D8	; 0x8009d8 <__brkval+0x1>
    45a8:	e2 17       	cp	r30, r18
    45aa:	f3 07       	cpc	r31, r19
    45ac:	a0 f4       	brcc	.+40     	; 0x45d6 <malloc+0x120>
    45ae:	2e 1b       	sub	r18, r30
    45b0:	3f 0b       	sbc	r19, r31
    45b2:	28 17       	cp	r18, r24
    45b4:	39 07       	cpc	r19, r25
    45b6:	78 f0       	brcs	.+30     	; 0x45d6 <malloc+0x120>
    45b8:	ac 01       	movw	r20, r24
    45ba:	4e 5f       	subi	r20, 0xFE	; 254
    45bc:	5f 4f       	sbci	r21, 0xFF	; 255
    45be:	24 17       	cp	r18, r20
    45c0:	35 07       	cpc	r19, r21
    45c2:	48 f0       	brcs	.+18     	; 0x45d6 <malloc+0x120>
    45c4:	4e 0f       	add	r20, r30
    45c6:	5f 1f       	adc	r21, r31
    45c8:	50 93 d8 09 	sts	0x09D8, r21	; 0x8009d8 <__brkval+0x1>
    45cc:	40 93 d7 09 	sts	0x09D7, r20	; 0x8009d7 <__brkval>
    45d0:	81 93       	st	Z+, r24
    45d2:	91 93       	st	Z+, r25
    45d4:	02 c0       	rjmp	.+4      	; 0x45da <malloc+0x124>
    45d6:	e0 e0       	ldi	r30, 0x00	; 0
    45d8:	f0 e0       	ldi	r31, 0x00	; 0
    45da:	cf 01       	movw	r24, r30
    45dc:	df 91       	pop	r29
    45de:	cf 91       	pop	r28
    45e0:	1f 91       	pop	r17
    45e2:	0f 91       	pop	r16
    45e4:	08 95       	ret

000045e6 <free>:
    45e6:	cf 93       	push	r28
    45e8:	df 93       	push	r29
    45ea:	00 97       	sbiw	r24, 0x00	; 0
    45ec:	09 f4       	brne	.+2      	; 0x45f0 <free+0xa>
    45ee:	81 c0       	rjmp	.+258    	; 0x46f2 <free+0x10c>
    45f0:	fc 01       	movw	r30, r24
    45f2:	32 97       	sbiw	r30, 0x02	; 2
    45f4:	13 82       	std	Z+3, r1	; 0x03
    45f6:	12 82       	std	Z+2, r1	; 0x02
    45f8:	a0 91 d9 09 	lds	r26, 0x09D9	; 0x8009d9 <__flp>
    45fc:	b0 91 da 09 	lds	r27, 0x09DA	; 0x8009da <__flp+0x1>
    4600:	10 97       	sbiw	r26, 0x00	; 0
    4602:	81 f4       	brne	.+32     	; 0x4624 <free+0x3e>
    4604:	20 81       	ld	r18, Z
    4606:	31 81       	ldd	r19, Z+1	; 0x01
    4608:	82 0f       	add	r24, r18
    460a:	93 1f       	adc	r25, r19
    460c:	20 91 d7 09 	lds	r18, 0x09D7	; 0x8009d7 <__brkval>
    4610:	30 91 d8 09 	lds	r19, 0x09D8	; 0x8009d8 <__brkval+0x1>
    4614:	28 17       	cp	r18, r24
    4616:	39 07       	cpc	r19, r25
    4618:	51 f5       	brne	.+84     	; 0x466e <free+0x88>
    461a:	f0 93 d8 09 	sts	0x09D8, r31	; 0x8009d8 <__brkval+0x1>
    461e:	e0 93 d7 09 	sts	0x09D7, r30	; 0x8009d7 <__brkval>
    4622:	67 c0       	rjmp	.+206    	; 0x46f2 <free+0x10c>
    4624:	ed 01       	movw	r28, r26
    4626:	20 e0       	ldi	r18, 0x00	; 0
    4628:	30 e0       	ldi	r19, 0x00	; 0
    462a:	ce 17       	cp	r28, r30
    462c:	df 07       	cpc	r29, r31
    462e:	40 f4       	brcc	.+16     	; 0x4640 <free+0x5a>
    4630:	4a 81       	ldd	r20, Y+2	; 0x02
    4632:	5b 81       	ldd	r21, Y+3	; 0x03
    4634:	9e 01       	movw	r18, r28
    4636:	41 15       	cp	r20, r1
    4638:	51 05       	cpc	r21, r1
    463a:	f1 f0       	breq	.+60     	; 0x4678 <free+0x92>
    463c:	ea 01       	movw	r28, r20
    463e:	f5 cf       	rjmp	.-22     	; 0x462a <free+0x44>
    4640:	d3 83       	std	Z+3, r29	; 0x03
    4642:	c2 83       	std	Z+2, r28	; 0x02
    4644:	40 81       	ld	r20, Z
    4646:	51 81       	ldd	r21, Z+1	; 0x01
    4648:	84 0f       	add	r24, r20
    464a:	95 1f       	adc	r25, r21
    464c:	c8 17       	cp	r28, r24
    464e:	d9 07       	cpc	r29, r25
    4650:	59 f4       	brne	.+22     	; 0x4668 <free+0x82>
    4652:	88 81       	ld	r24, Y
    4654:	99 81       	ldd	r25, Y+1	; 0x01
    4656:	84 0f       	add	r24, r20
    4658:	95 1f       	adc	r25, r21
    465a:	02 96       	adiw	r24, 0x02	; 2
    465c:	91 83       	std	Z+1, r25	; 0x01
    465e:	80 83       	st	Z, r24
    4660:	8a 81       	ldd	r24, Y+2	; 0x02
    4662:	9b 81       	ldd	r25, Y+3	; 0x03
    4664:	93 83       	std	Z+3, r25	; 0x03
    4666:	82 83       	std	Z+2, r24	; 0x02
    4668:	21 15       	cp	r18, r1
    466a:	31 05       	cpc	r19, r1
    466c:	29 f4       	brne	.+10     	; 0x4678 <free+0x92>
    466e:	f0 93 da 09 	sts	0x09DA, r31	; 0x8009da <__flp+0x1>
    4672:	e0 93 d9 09 	sts	0x09D9, r30	; 0x8009d9 <__flp>
    4676:	3d c0       	rjmp	.+122    	; 0x46f2 <free+0x10c>
    4678:	e9 01       	movw	r28, r18
    467a:	fb 83       	std	Y+3, r31	; 0x03
    467c:	ea 83       	std	Y+2, r30	; 0x02
    467e:	49 91       	ld	r20, Y+
    4680:	59 91       	ld	r21, Y+
    4682:	c4 0f       	add	r28, r20
    4684:	d5 1f       	adc	r29, r21
    4686:	ec 17       	cp	r30, r28
    4688:	fd 07       	cpc	r31, r29
    468a:	61 f4       	brne	.+24     	; 0x46a4 <free+0xbe>
    468c:	80 81       	ld	r24, Z
    468e:	91 81       	ldd	r25, Z+1	; 0x01
    4690:	84 0f       	add	r24, r20
    4692:	95 1f       	adc	r25, r21
    4694:	02 96       	adiw	r24, 0x02	; 2
    4696:	e9 01       	movw	r28, r18
    4698:	99 83       	std	Y+1, r25	; 0x01
    469a:	88 83       	st	Y, r24
    469c:	82 81       	ldd	r24, Z+2	; 0x02
    469e:	93 81       	ldd	r25, Z+3	; 0x03
    46a0:	9b 83       	std	Y+3, r25	; 0x03
    46a2:	8a 83       	std	Y+2, r24	; 0x02
    46a4:	e0 e0       	ldi	r30, 0x00	; 0
    46a6:	f0 e0       	ldi	r31, 0x00	; 0
    46a8:	12 96       	adiw	r26, 0x02	; 2
    46aa:	8d 91       	ld	r24, X+
    46ac:	9c 91       	ld	r25, X
    46ae:	13 97       	sbiw	r26, 0x03	; 3
    46b0:	00 97       	sbiw	r24, 0x00	; 0
    46b2:	19 f0       	breq	.+6      	; 0x46ba <free+0xd4>
    46b4:	fd 01       	movw	r30, r26
    46b6:	dc 01       	movw	r26, r24
    46b8:	f7 cf       	rjmp	.-18     	; 0x46a8 <free+0xc2>
    46ba:	8d 91       	ld	r24, X+
    46bc:	9c 91       	ld	r25, X
    46be:	11 97       	sbiw	r26, 0x01	; 1
    46c0:	9d 01       	movw	r18, r26
    46c2:	2e 5f       	subi	r18, 0xFE	; 254
    46c4:	3f 4f       	sbci	r19, 0xFF	; 255
    46c6:	82 0f       	add	r24, r18
    46c8:	93 1f       	adc	r25, r19
    46ca:	20 91 d7 09 	lds	r18, 0x09D7	; 0x8009d7 <__brkval>
    46ce:	30 91 d8 09 	lds	r19, 0x09D8	; 0x8009d8 <__brkval+0x1>
    46d2:	28 17       	cp	r18, r24
    46d4:	39 07       	cpc	r19, r25
    46d6:	69 f4       	brne	.+26     	; 0x46f2 <free+0x10c>
    46d8:	30 97       	sbiw	r30, 0x00	; 0
    46da:	29 f4       	brne	.+10     	; 0x46e6 <free+0x100>
    46dc:	10 92 da 09 	sts	0x09DA, r1	; 0x8009da <__flp+0x1>
    46e0:	10 92 d9 09 	sts	0x09D9, r1	; 0x8009d9 <__flp>
    46e4:	02 c0       	rjmp	.+4      	; 0x46ea <free+0x104>
    46e6:	13 82       	std	Z+3, r1	; 0x03
    46e8:	12 82       	std	Z+2, r1	; 0x02
    46ea:	b0 93 d8 09 	sts	0x09D8, r27	; 0x8009d8 <__brkval+0x1>
    46ee:	a0 93 d7 09 	sts	0x09D7, r26	; 0x8009d7 <__brkval>
    46f2:	df 91       	pop	r29
    46f4:	cf 91       	pop	r28
    46f6:	08 95       	ret

000046f8 <abort>:
    46f8:	81 e0       	ldi	r24, 0x01	; 1
    46fa:	90 e0       	ldi	r25, 0x00	; 0
    46fc:	f8 94       	cli
    46fe:	58 c3       	rjmp	.+1712   	; 0x4db0 <_exit>

00004700 <memcpy>:
    4700:	fb 01       	movw	r30, r22
    4702:	dc 01       	movw	r26, r24
    4704:	02 c0       	rjmp	.+4      	; 0x470a <memcpy+0xa>
    4706:	01 90       	ld	r0, Z+
    4708:	0d 92       	st	X+, r0
    470a:	41 50       	subi	r20, 0x01	; 1
    470c:	50 40       	sbci	r21, 0x00	; 0
    470e:	d8 f7       	brcc	.-10     	; 0x4706 <memcpy+0x6>
    4710:	08 95       	ret

00004712 <memset>:
    4712:	dc 01       	movw	r26, r24
    4714:	01 c0       	rjmp	.+2      	; 0x4718 <memset+0x6>
    4716:	6d 93       	st	X+, r22
    4718:	41 50       	subi	r20, 0x01	; 1
    471a:	50 40       	sbci	r21, 0x00	; 0
    471c:	e0 f7       	brcc	.-8      	; 0x4716 <memset+0x4>
    471e:	08 95       	ret

00004720 <strcat>:
    4720:	fb 01       	movw	r30, r22
    4722:	dc 01       	movw	r26, r24
    4724:	0d 90       	ld	r0, X+
    4726:	00 20       	and	r0, r0
    4728:	e9 f7       	brne	.-6      	; 0x4724 <strcat+0x4>
    472a:	11 97       	sbiw	r26, 0x01	; 1
    472c:	01 90       	ld	r0, Z+
    472e:	0d 92       	st	X+, r0
    4730:	00 20       	and	r0, r0
    4732:	e1 f7       	brne	.-8      	; 0x472c <strcat+0xc>
    4734:	08 95       	ret

00004736 <strcpy>:
    4736:	fb 01       	movw	r30, r22
    4738:	dc 01       	movw	r26, r24
    473a:	01 90       	ld	r0, Z+
    473c:	0d 92       	st	X+, r0
    473e:	00 20       	and	r0, r0
    4740:	e1 f7       	brne	.-8      	; 0x473a <strcpy+0x4>
    4742:	08 95       	ret

00004744 <strncasecmp>:
    4744:	fb 01       	movw	r30, r22
    4746:	dc 01       	movw	r26, r24
    4748:	41 50       	subi	r20, 0x01	; 1
    474a:	50 40       	sbci	r21, 0x00	; 0
    474c:	88 f0       	brcs	.+34     	; 0x4770 <strncasecmp+0x2c>
    474e:	8d 91       	ld	r24, X+
    4750:	81 34       	cpi	r24, 0x41	; 65
    4752:	1c f0       	brlt	.+6      	; 0x475a <strncasecmp+0x16>
    4754:	8b 35       	cpi	r24, 0x5B	; 91
    4756:	0c f4       	brge	.+2      	; 0x475a <strncasecmp+0x16>
    4758:	80 5e       	subi	r24, 0xE0	; 224
    475a:	61 91       	ld	r22, Z+
    475c:	61 34       	cpi	r22, 0x41	; 65
    475e:	1c f0       	brlt	.+6      	; 0x4766 <strncasecmp+0x22>
    4760:	6b 35       	cpi	r22, 0x5B	; 91
    4762:	0c f4       	brge	.+2      	; 0x4766 <strncasecmp+0x22>
    4764:	60 5e       	subi	r22, 0xE0	; 224
    4766:	86 1b       	sub	r24, r22
    4768:	61 11       	cpse	r22, r1
    476a:	71 f3       	breq	.-36     	; 0x4748 <strncasecmp+0x4>
    476c:	99 0b       	sbc	r25, r25
    476e:	08 95       	ret
    4770:	88 1b       	sub	r24, r24
    4772:	fc cf       	rjmp	.-8      	; 0x476c <strncasecmp+0x28>

00004774 <printf>:
    4774:	cf 93       	push	r28
    4776:	df 93       	push	r29
    4778:	cd b7       	in	r28, 0x3d	; 61
    477a:	de b7       	in	r29, 0x3e	; 62
    477c:	ae 01       	movw	r20, r28
    477e:	4a 5f       	subi	r20, 0xFA	; 250
    4780:	5f 4f       	sbci	r21, 0xFF	; 255
    4782:	fa 01       	movw	r30, r20
    4784:	61 91       	ld	r22, Z+
    4786:	71 91       	ld	r23, Z+
    4788:	af 01       	movw	r20, r30
    478a:	80 91 dd 09 	lds	r24, 0x09DD	; 0x8009dd <__iob+0x2>
    478e:	90 91 de 09 	lds	r25, 0x09DE	; 0x8009de <__iob+0x3>
    4792:	61 d0       	rcall	.+194    	; 0x4856 <vfprintf>
    4794:	df 91       	pop	r29
    4796:	cf 91       	pop	r28
    4798:	08 95       	ret

0000479a <puts>:
    479a:	0f 93       	push	r16
    479c:	1f 93       	push	r17
    479e:	cf 93       	push	r28
    47a0:	df 93       	push	r29
    47a2:	e0 91 dd 09 	lds	r30, 0x09DD	; 0x8009dd <__iob+0x2>
    47a6:	f0 91 de 09 	lds	r31, 0x09DE	; 0x8009de <__iob+0x3>
    47aa:	23 81       	ldd	r18, Z+3	; 0x03
    47ac:	21 ff       	sbrs	r18, 1
    47ae:	1b c0       	rjmp	.+54     	; 0x47e6 <puts+0x4c>
    47b0:	8c 01       	movw	r16, r24
    47b2:	d0 e0       	ldi	r29, 0x00	; 0
    47b4:	c0 e0       	ldi	r28, 0x00	; 0
    47b6:	f8 01       	movw	r30, r16
    47b8:	81 91       	ld	r24, Z+
    47ba:	8f 01       	movw	r16, r30
    47bc:	60 91 dd 09 	lds	r22, 0x09DD	; 0x8009dd <__iob+0x2>
    47c0:	70 91 de 09 	lds	r23, 0x09DE	; 0x8009de <__iob+0x3>
    47c4:	db 01       	movw	r26, r22
    47c6:	18 96       	adiw	r26, 0x08	; 8
    47c8:	ed 91       	ld	r30, X+
    47ca:	fc 91       	ld	r31, X
    47cc:	19 97       	sbiw	r26, 0x09	; 9
    47ce:	88 23       	and	r24, r24
    47d0:	31 f0       	breq	.+12     	; 0x47de <puts+0x44>
    47d2:	19 95       	eicall
    47d4:	89 2b       	or	r24, r25
    47d6:	79 f3       	breq	.-34     	; 0x47b6 <puts+0x1c>
    47d8:	df ef       	ldi	r29, 0xFF	; 255
    47da:	cf ef       	ldi	r28, 0xFF	; 255
    47dc:	ec cf       	rjmp	.-40     	; 0x47b6 <puts+0x1c>
    47de:	8a e0       	ldi	r24, 0x0A	; 10
    47e0:	19 95       	eicall
    47e2:	89 2b       	or	r24, r25
    47e4:	19 f0       	breq	.+6      	; 0x47ec <puts+0x52>
    47e6:	8f ef       	ldi	r24, 0xFF	; 255
    47e8:	9f ef       	ldi	r25, 0xFF	; 255
    47ea:	02 c0       	rjmp	.+4      	; 0x47f0 <puts+0x56>
    47ec:	8d 2f       	mov	r24, r29
    47ee:	9c 2f       	mov	r25, r28
    47f0:	df 91       	pop	r29
    47f2:	cf 91       	pop	r28
    47f4:	1f 91       	pop	r17
    47f6:	0f 91       	pop	r16
    47f8:	08 95       	ret

000047fa <sprintf>:
    47fa:	0f 93       	push	r16
    47fc:	1f 93       	push	r17
    47fe:	cf 93       	push	r28
    4800:	df 93       	push	r29
    4802:	cd b7       	in	r28, 0x3d	; 61
    4804:	de b7       	in	r29, 0x3e	; 62
    4806:	2e 97       	sbiw	r28, 0x0e	; 14
    4808:	0f b6       	in	r0, 0x3f	; 63
    480a:	f8 94       	cli
    480c:	de bf       	out	0x3e, r29	; 62
    480e:	0f be       	out	0x3f, r0	; 63
    4810:	cd bf       	out	0x3d, r28	; 61
    4812:	0e 89       	ldd	r16, Y+22	; 0x16
    4814:	1f 89       	ldd	r17, Y+23	; 0x17
    4816:	86 e0       	ldi	r24, 0x06	; 6
    4818:	8c 83       	std	Y+4, r24	; 0x04
    481a:	1a 83       	std	Y+2, r17	; 0x02
    481c:	09 83       	std	Y+1, r16	; 0x01
    481e:	8f ef       	ldi	r24, 0xFF	; 255
    4820:	9f e7       	ldi	r25, 0x7F	; 127
    4822:	9e 83       	std	Y+6, r25	; 0x06
    4824:	8d 83       	std	Y+5, r24	; 0x05
    4826:	ae 01       	movw	r20, r28
    4828:	46 5e       	subi	r20, 0xE6	; 230
    482a:	5f 4f       	sbci	r21, 0xFF	; 255
    482c:	68 8d       	ldd	r22, Y+24	; 0x18
    482e:	79 8d       	ldd	r23, Y+25	; 0x19
    4830:	ce 01       	movw	r24, r28
    4832:	01 96       	adiw	r24, 0x01	; 1
    4834:	10 d0       	rcall	.+32     	; 0x4856 <vfprintf>
    4836:	ef 81       	ldd	r30, Y+7	; 0x07
    4838:	f8 85       	ldd	r31, Y+8	; 0x08
    483a:	e0 0f       	add	r30, r16
    483c:	f1 1f       	adc	r31, r17
    483e:	10 82       	st	Z, r1
    4840:	2e 96       	adiw	r28, 0x0e	; 14
    4842:	0f b6       	in	r0, 0x3f	; 63
    4844:	f8 94       	cli
    4846:	de bf       	out	0x3e, r29	; 62
    4848:	0f be       	out	0x3f, r0	; 63
    484a:	cd bf       	out	0x3d, r28	; 61
    484c:	df 91       	pop	r29
    484e:	cf 91       	pop	r28
    4850:	1f 91       	pop	r17
    4852:	0f 91       	pop	r16
    4854:	08 95       	ret

00004856 <vfprintf>:
    4856:	2f 92       	push	r2
    4858:	3f 92       	push	r3
    485a:	4f 92       	push	r4
    485c:	5f 92       	push	r5
    485e:	6f 92       	push	r6
    4860:	7f 92       	push	r7
    4862:	8f 92       	push	r8
    4864:	9f 92       	push	r9
    4866:	af 92       	push	r10
    4868:	bf 92       	push	r11
    486a:	cf 92       	push	r12
    486c:	df 92       	push	r13
    486e:	ef 92       	push	r14
    4870:	ff 92       	push	r15
    4872:	0f 93       	push	r16
    4874:	1f 93       	push	r17
    4876:	cf 93       	push	r28
    4878:	df 93       	push	r29
    487a:	cd b7       	in	r28, 0x3d	; 61
    487c:	de b7       	in	r29, 0x3e	; 62
    487e:	2b 97       	sbiw	r28, 0x0b	; 11
    4880:	0f b6       	in	r0, 0x3f	; 63
    4882:	f8 94       	cli
    4884:	de bf       	out	0x3e, r29	; 62
    4886:	0f be       	out	0x3f, r0	; 63
    4888:	cd bf       	out	0x3d, r28	; 61
    488a:	6c 01       	movw	r12, r24
    488c:	7b 01       	movw	r14, r22
    488e:	8a 01       	movw	r16, r20
    4890:	fc 01       	movw	r30, r24
    4892:	17 82       	std	Z+7, r1	; 0x07
    4894:	16 82       	std	Z+6, r1	; 0x06
    4896:	83 81       	ldd	r24, Z+3	; 0x03
    4898:	81 ff       	sbrs	r24, 1
    489a:	bf c1       	rjmp	.+894    	; 0x4c1a <vfprintf+0x3c4>
    489c:	ce 01       	movw	r24, r28
    489e:	01 96       	adiw	r24, 0x01	; 1
    48a0:	3c 01       	movw	r6, r24
    48a2:	f6 01       	movw	r30, r12
    48a4:	93 81       	ldd	r25, Z+3	; 0x03
    48a6:	f7 01       	movw	r30, r14
    48a8:	93 fd       	sbrc	r25, 3
    48aa:	85 91       	lpm	r24, Z+
    48ac:	93 ff       	sbrs	r25, 3
    48ae:	81 91       	ld	r24, Z+
    48b0:	7f 01       	movw	r14, r30
    48b2:	88 23       	and	r24, r24
    48b4:	09 f4       	brne	.+2      	; 0x48b8 <vfprintf+0x62>
    48b6:	ad c1       	rjmp	.+858    	; 0x4c12 <vfprintf+0x3bc>
    48b8:	85 32       	cpi	r24, 0x25	; 37
    48ba:	39 f4       	brne	.+14     	; 0x48ca <vfprintf+0x74>
    48bc:	93 fd       	sbrc	r25, 3
    48be:	85 91       	lpm	r24, Z+
    48c0:	93 ff       	sbrs	r25, 3
    48c2:	81 91       	ld	r24, Z+
    48c4:	7f 01       	movw	r14, r30
    48c6:	85 32       	cpi	r24, 0x25	; 37
    48c8:	21 f4       	brne	.+8      	; 0x48d2 <vfprintf+0x7c>
    48ca:	b6 01       	movw	r22, r12
    48cc:	90 e0       	ldi	r25, 0x00	; 0
    48ce:	d6 d1       	rcall	.+940    	; 0x4c7c <fputc>
    48d0:	e8 cf       	rjmp	.-48     	; 0x48a2 <vfprintf+0x4c>
    48d2:	91 2c       	mov	r9, r1
    48d4:	21 2c       	mov	r2, r1
    48d6:	31 2c       	mov	r3, r1
    48d8:	ff e1       	ldi	r31, 0x1F	; 31
    48da:	f3 15       	cp	r31, r3
    48dc:	d8 f0       	brcs	.+54     	; 0x4914 <vfprintf+0xbe>
    48de:	8b 32       	cpi	r24, 0x2B	; 43
    48e0:	79 f0       	breq	.+30     	; 0x4900 <vfprintf+0xaa>
    48e2:	38 f4       	brcc	.+14     	; 0x48f2 <vfprintf+0x9c>
    48e4:	80 32       	cpi	r24, 0x20	; 32
    48e6:	79 f0       	breq	.+30     	; 0x4906 <vfprintf+0xb0>
    48e8:	83 32       	cpi	r24, 0x23	; 35
    48ea:	a1 f4       	brne	.+40     	; 0x4914 <vfprintf+0xbe>
    48ec:	23 2d       	mov	r18, r3
    48ee:	20 61       	ori	r18, 0x10	; 16
    48f0:	1d c0       	rjmp	.+58     	; 0x492c <vfprintf+0xd6>
    48f2:	8d 32       	cpi	r24, 0x2D	; 45
    48f4:	61 f0       	breq	.+24     	; 0x490e <vfprintf+0xb8>
    48f6:	80 33       	cpi	r24, 0x30	; 48
    48f8:	69 f4       	brne	.+26     	; 0x4914 <vfprintf+0xbe>
    48fa:	23 2d       	mov	r18, r3
    48fc:	21 60       	ori	r18, 0x01	; 1
    48fe:	16 c0       	rjmp	.+44     	; 0x492c <vfprintf+0xd6>
    4900:	83 2d       	mov	r24, r3
    4902:	82 60       	ori	r24, 0x02	; 2
    4904:	38 2e       	mov	r3, r24
    4906:	e3 2d       	mov	r30, r3
    4908:	e4 60       	ori	r30, 0x04	; 4
    490a:	3e 2e       	mov	r3, r30
    490c:	2a c0       	rjmp	.+84     	; 0x4962 <vfprintf+0x10c>
    490e:	f3 2d       	mov	r31, r3
    4910:	f8 60       	ori	r31, 0x08	; 8
    4912:	1d c0       	rjmp	.+58     	; 0x494e <vfprintf+0xf8>
    4914:	37 fc       	sbrc	r3, 7
    4916:	2d c0       	rjmp	.+90     	; 0x4972 <vfprintf+0x11c>
    4918:	20 ed       	ldi	r18, 0xD0	; 208
    491a:	28 0f       	add	r18, r24
    491c:	2a 30       	cpi	r18, 0x0A	; 10
    491e:	40 f0       	brcs	.+16     	; 0x4930 <vfprintf+0xda>
    4920:	8e 32       	cpi	r24, 0x2E	; 46
    4922:	b9 f4       	brne	.+46     	; 0x4952 <vfprintf+0xfc>
    4924:	36 fc       	sbrc	r3, 6
    4926:	75 c1       	rjmp	.+746    	; 0x4c12 <vfprintf+0x3bc>
    4928:	23 2d       	mov	r18, r3
    492a:	20 64       	ori	r18, 0x40	; 64
    492c:	32 2e       	mov	r3, r18
    492e:	19 c0       	rjmp	.+50     	; 0x4962 <vfprintf+0x10c>
    4930:	36 fe       	sbrs	r3, 6
    4932:	06 c0       	rjmp	.+12     	; 0x4940 <vfprintf+0xea>
    4934:	8a e0       	ldi	r24, 0x0A	; 10
    4936:	98 9e       	mul	r9, r24
    4938:	20 0d       	add	r18, r0
    493a:	11 24       	eor	r1, r1
    493c:	92 2e       	mov	r9, r18
    493e:	11 c0       	rjmp	.+34     	; 0x4962 <vfprintf+0x10c>
    4940:	ea e0       	ldi	r30, 0x0A	; 10
    4942:	2e 9e       	mul	r2, r30
    4944:	20 0d       	add	r18, r0
    4946:	11 24       	eor	r1, r1
    4948:	22 2e       	mov	r2, r18
    494a:	f3 2d       	mov	r31, r3
    494c:	f0 62       	ori	r31, 0x20	; 32
    494e:	3f 2e       	mov	r3, r31
    4950:	08 c0       	rjmp	.+16     	; 0x4962 <vfprintf+0x10c>
    4952:	8c 36       	cpi	r24, 0x6C	; 108
    4954:	21 f4       	brne	.+8      	; 0x495e <vfprintf+0x108>
    4956:	83 2d       	mov	r24, r3
    4958:	80 68       	ori	r24, 0x80	; 128
    495a:	38 2e       	mov	r3, r24
    495c:	02 c0       	rjmp	.+4      	; 0x4962 <vfprintf+0x10c>
    495e:	88 36       	cpi	r24, 0x68	; 104
    4960:	41 f4       	brne	.+16     	; 0x4972 <vfprintf+0x11c>
    4962:	f7 01       	movw	r30, r14
    4964:	93 fd       	sbrc	r25, 3
    4966:	85 91       	lpm	r24, Z+
    4968:	93 ff       	sbrs	r25, 3
    496a:	81 91       	ld	r24, Z+
    496c:	7f 01       	movw	r14, r30
    496e:	81 11       	cpse	r24, r1
    4970:	b3 cf       	rjmp	.-154    	; 0x48d8 <vfprintf+0x82>
    4972:	98 2f       	mov	r25, r24
    4974:	9f 7d       	andi	r25, 0xDF	; 223
    4976:	95 54       	subi	r25, 0x45	; 69
    4978:	93 30       	cpi	r25, 0x03	; 3
    497a:	28 f4       	brcc	.+10     	; 0x4986 <vfprintf+0x130>
    497c:	0c 5f       	subi	r16, 0xFC	; 252
    497e:	1f 4f       	sbci	r17, 0xFF	; 255
    4980:	9f e3       	ldi	r25, 0x3F	; 63
    4982:	99 83       	std	Y+1, r25	; 0x01
    4984:	0d c0       	rjmp	.+26     	; 0x49a0 <vfprintf+0x14a>
    4986:	83 36       	cpi	r24, 0x63	; 99
    4988:	31 f0       	breq	.+12     	; 0x4996 <vfprintf+0x140>
    498a:	83 37       	cpi	r24, 0x73	; 115
    498c:	71 f0       	breq	.+28     	; 0x49aa <vfprintf+0x154>
    498e:	83 35       	cpi	r24, 0x53	; 83
    4990:	09 f0       	breq	.+2      	; 0x4994 <vfprintf+0x13e>
    4992:	55 c0       	rjmp	.+170    	; 0x4a3e <vfprintf+0x1e8>
    4994:	20 c0       	rjmp	.+64     	; 0x49d6 <vfprintf+0x180>
    4996:	f8 01       	movw	r30, r16
    4998:	80 81       	ld	r24, Z
    499a:	89 83       	std	Y+1, r24	; 0x01
    499c:	0e 5f       	subi	r16, 0xFE	; 254
    499e:	1f 4f       	sbci	r17, 0xFF	; 255
    49a0:	88 24       	eor	r8, r8
    49a2:	83 94       	inc	r8
    49a4:	91 2c       	mov	r9, r1
    49a6:	53 01       	movw	r10, r6
    49a8:	12 c0       	rjmp	.+36     	; 0x49ce <vfprintf+0x178>
    49aa:	28 01       	movw	r4, r16
    49ac:	f2 e0       	ldi	r31, 0x02	; 2
    49ae:	4f 0e       	add	r4, r31
    49b0:	51 1c       	adc	r5, r1
    49b2:	f8 01       	movw	r30, r16
    49b4:	a0 80       	ld	r10, Z
    49b6:	b1 80       	ldd	r11, Z+1	; 0x01
    49b8:	36 fe       	sbrs	r3, 6
    49ba:	03 c0       	rjmp	.+6      	; 0x49c2 <vfprintf+0x16c>
    49bc:	69 2d       	mov	r22, r9
    49be:	70 e0       	ldi	r23, 0x00	; 0
    49c0:	02 c0       	rjmp	.+4      	; 0x49c6 <vfprintf+0x170>
    49c2:	6f ef       	ldi	r22, 0xFF	; 255
    49c4:	7f ef       	ldi	r23, 0xFF	; 255
    49c6:	c5 01       	movw	r24, r10
    49c8:	4e d1       	rcall	.+668    	; 0x4c66 <strnlen>
    49ca:	4c 01       	movw	r8, r24
    49cc:	82 01       	movw	r16, r4
    49ce:	f3 2d       	mov	r31, r3
    49d0:	ff 77       	andi	r31, 0x7F	; 127
    49d2:	3f 2e       	mov	r3, r31
    49d4:	15 c0       	rjmp	.+42     	; 0x4a00 <vfprintf+0x1aa>
    49d6:	28 01       	movw	r4, r16
    49d8:	22 e0       	ldi	r18, 0x02	; 2
    49da:	42 0e       	add	r4, r18
    49dc:	51 1c       	adc	r5, r1
    49de:	f8 01       	movw	r30, r16
    49e0:	a0 80       	ld	r10, Z
    49e2:	b1 80       	ldd	r11, Z+1	; 0x01
    49e4:	36 fe       	sbrs	r3, 6
    49e6:	03 c0       	rjmp	.+6      	; 0x49ee <vfprintf+0x198>
    49e8:	69 2d       	mov	r22, r9
    49ea:	70 e0       	ldi	r23, 0x00	; 0
    49ec:	02 c0       	rjmp	.+4      	; 0x49f2 <vfprintf+0x19c>
    49ee:	6f ef       	ldi	r22, 0xFF	; 255
    49f0:	7f ef       	ldi	r23, 0xFF	; 255
    49f2:	c5 01       	movw	r24, r10
    49f4:	2d d1       	rcall	.+602    	; 0x4c50 <strnlen_P>
    49f6:	4c 01       	movw	r8, r24
    49f8:	f3 2d       	mov	r31, r3
    49fa:	f0 68       	ori	r31, 0x80	; 128
    49fc:	3f 2e       	mov	r3, r31
    49fe:	82 01       	movw	r16, r4
    4a00:	33 fc       	sbrc	r3, 3
    4a02:	19 c0       	rjmp	.+50     	; 0x4a36 <vfprintf+0x1e0>
    4a04:	82 2d       	mov	r24, r2
    4a06:	90 e0       	ldi	r25, 0x00	; 0
    4a08:	88 16       	cp	r8, r24
    4a0a:	99 06       	cpc	r9, r25
    4a0c:	a0 f4       	brcc	.+40     	; 0x4a36 <vfprintf+0x1e0>
    4a0e:	b6 01       	movw	r22, r12
    4a10:	80 e2       	ldi	r24, 0x20	; 32
    4a12:	90 e0       	ldi	r25, 0x00	; 0
    4a14:	33 d1       	rcall	.+614    	; 0x4c7c <fputc>
    4a16:	2a 94       	dec	r2
    4a18:	f5 cf       	rjmp	.-22     	; 0x4a04 <vfprintf+0x1ae>
    4a1a:	f5 01       	movw	r30, r10
    4a1c:	37 fc       	sbrc	r3, 7
    4a1e:	85 91       	lpm	r24, Z+
    4a20:	37 fe       	sbrs	r3, 7
    4a22:	81 91       	ld	r24, Z+
    4a24:	5f 01       	movw	r10, r30
    4a26:	b6 01       	movw	r22, r12
    4a28:	90 e0       	ldi	r25, 0x00	; 0
    4a2a:	28 d1       	rcall	.+592    	; 0x4c7c <fputc>
    4a2c:	21 10       	cpse	r2, r1
    4a2e:	2a 94       	dec	r2
    4a30:	21 e0       	ldi	r18, 0x01	; 1
    4a32:	82 1a       	sub	r8, r18
    4a34:	91 08       	sbc	r9, r1
    4a36:	81 14       	cp	r8, r1
    4a38:	91 04       	cpc	r9, r1
    4a3a:	79 f7       	brne	.-34     	; 0x4a1a <vfprintf+0x1c4>
    4a3c:	e1 c0       	rjmp	.+450    	; 0x4c00 <vfprintf+0x3aa>
    4a3e:	84 36       	cpi	r24, 0x64	; 100
    4a40:	11 f0       	breq	.+4      	; 0x4a46 <vfprintf+0x1f0>
    4a42:	89 36       	cpi	r24, 0x69	; 105
    4a44:	39 f5       	brne	.+78     	; 0x4a94 <vfprintf+0x23e>
    4a46:	f8 01       	movw	r30, r16
    4a48:	37 fe       	sbrs	r3, 7
    4a4a:	07 c0       	rjmp	.+14     	; 0x4a5a <vfprintf+0x204>
    4a4c:	60 81       	ld	r22, Z
    4a4e:	71 81       	ldd	r23, Z+1	; 0x01
    4a50:	82 81       	ldd	r24, Z+2	; 0x02
    4a52:	93 81       	ldd	r25, Z+3	; 0x03
    4a54:	0c 5f       	subi	r16, 0xFC	; 252
    4a56:	1f 4f       	sbci	r17, 0xFF	; 255
    4a58:	08 c0       	rjmp	.+16     	; 0x4a6a <vfprintf+0x214>
    4a5a:	60 81       	ld	r22, Z
    4a5c:	71 81       	ldd	r23, Z+1	; 0x01
    4a5e:	07 2e       	mov	r0, r23
    4a60:	00 0c       	add	r0, r0
    4a62:	88 0b       	sbc	r24, r24
    4a64:	99 0b       	sbc	r25, r25
    4a66:	0e 5f       	subi	r16, 0xFE	; 254
    4a68:	1f 4f       	sbci	r17, 0xFF	; 255
    4a6a:	f3 2d       	mov	r31, r3
    4a6c:	ff 76       	andi	r31, 0x6F	; 111
    4a6e:	3f 2e       	mov	r3, r31
    4a70:	97 ff       	sbrs	r25, 7
    4a72:	09 c0       	rjmp	.+18     	; 0x4a86 <vfprintf+0x230>
    4a74:	90 95       	com	r25
    4a76:	80 95       	com	r24
    4a78:	70 95       	com	r23
    4a7a:	61 95       	neg	r22
    4a7c:	7f 4f       	sbci	r23, 0xFF	; 255
    4a7e:	8f 4f       	sbci	r24, 0xFF	; 255
    4a80:	9f 4f       	sbci	r25, 0xFF	; 255
    4a82:	f0 68       	ori	r31, 0x80	; 128
    4a84:	3f 2e       	mov	r3, r31
    4a86:	2a e0       	ldi	r18, 0x0A	; 10
    4a88:	30 e0       	ldi	r19, 0x00	; 0
    4a8a:	a3 01       	movw	r20, r6
    4a8c:	33 d1       	rcall	.+614    	; 0x4cf4 <__ultoa_invert>
    4a8e:	88 2e       	mov	r8, r24
    4a90:	86 18       	sub	r8, r6
    4a92:	44 c0       	rjmp	.+136    	; 0x4b1c <vfprintf+0x2c6>
    4a94:	85 37       	cpi	r24, 0x75	; 117
    4a96:	31 f4       	brne	.+12     	; 0x4aa4 <vfprintf+0x24e>
    4a98:	23 2d       	mov	r18, r3
    4a9a:	2f 7e       	andi	r18, 0xEF	; 239
    4a9c:	b2 2e       	mov	r11, r18
    4a9e:	2a e0       	ldi	r18, 0x0A	; 10
    4aa0:	30 e0       	ldi	r19, 0x00	; 0
    4aa2:	25 c0       	rjmp	.+74     	; 0x4aee <vfprintf+0x298>
    4aa4:	93 2d       	mov	r25, r3
    4aa6:	99 7f       	andi	r25, 0xF9	; 249
    4aa8:	b9 2e       	mov	r11, r25
    4aaa:	8f 36       	cpi	r24, 0x6F	; 111
    4aac:	c1 f0       	breq	.+48     	; 0x4ade <vfprintf+0x288>
    4aae:	18 f4       	brcc	.+6      	; 0x4ab6 <vfprintf+0x260>
    4ab0:	88 35       	cpi	r24, 0x58	; 88
    4ab2:	79 f0       	breq	.+30     	; 0x4ad2 <vfprintf+0x27c>
    4ab4:	ae c0       	rjmp	.+348    	; 0x4c12 <vfprintf+0x3bc>
    4ab6:	80 37       	cpi	r24, 0x70	; 112
    4ab8:	19 f0       	breq	.+6      	; 0x4ac0 <vfprintf+0x26a>
    4aba:	88 37       	cpi	r24, 0x78	; 120
    4abc:	21 f0       	breq	.+8      	; 0x4ac6 <vfprintf+0x270>
    4abe:	a9 c0       	rjmp	.+338    	; 0x4c12 <vfprintf+0x3bc>
    4ac0:	e9 2f       	mov	r30, r25
    4ac2:	e0 61       	ori	r30, 0x10	; 16
    4ac4:	be 2e       	mov	r11, r30
    4ac6:	b4 fe       	sbrs	r11, 4
    4ac8:	0d c0       	rjmp	.+26     	; 0x4ae4 <vfprintf+0x28e>
    4aca:	fb 2d       	mov	r31, r11
    4acc:	f4 60       	ori	r31, 0x04	; 4
    4ace:	bf 2e       	mov	r11, r31
    4ad0:	09 c0       	rjmp	.+18     	; 0x4ae4 <vfprintf+0x28e>
    4ad2:	34 fe       	sbrs	r3, 4
    4ad4:	0a c0       	rjmp	.+20     	; 0x4aea <vfprintf+0x294>
    4ad6:	29 2f       	mov	r18, r25
    4ad8:	26 60       	ori	r18, 0x06	; 6
    4ada:	b2 2e       	mov	r11, r18
    4adc:	06 c0       	rjmp	.+12     	; 0x4aea <vfprintf+0x294>
    4ade:	28 e0       	ldi	r18, 0x08	; 8
    4ae0:	30 e0       	ldi	r19, 0x00	; 0
    4ae2:	05 c0       	rjmp	.+10     	; 0x4aee <vfprintf+0x298>
    4ae4:	20 e1       	ldi	r18, 0x10	; 16
    4ae6:	30 e0       	ldi	r19, 0x00	; 0
    4ae8:	02 c0       	rjmp	.+4      	; 0x4aee <vfprintf+0x298>
    4aea:	20 e1       	ldi	r18, 0x10	; 16
    4aec:	32 e0       	ldi	r19, 0x02	; 2
    4aee:	f8 01       	movw	r30, r16
    4af0:	b7 fe       	sbrs	r11, 7
    4af2:	07 c0       	rjmp	.+14     	; 0x4b02 <vfprintf+0x2ac>
    4af4:	60 81       	ld	r22, Z
    4af6:	71 81       	ldd	r23, Z+1	; 0x01
    4af8:	82 81       	ldd	r24, Z+2	; 0x02
    4afa:	93 81       	ldd	r25, Z+3	; 0x03
    4afc:	0c 5f       	subi	r16, 0xFC	; 252
    4afe:	1f 4f       	sbci	r17, 0xFF	; 255
    4b00:	06 c0       	rjmp	.+12     	; 0x4b0e <vfprintf+0x2b8>
    4b02:	60 81       	ld	r22, Z
    4b04:	71 81       	ldd	r23, Z+1	; 0x01
    4b06:	80 e0       	ldi	r24, 0x00	; 0
    4b08:	90 e0       	ldi	r25, 0x00	; 0
    4b0a:	0e 5f       	subi	r16, 0xFE	; 254
    4b0c:	1f 4f       	sbci	r17, 0xFF	; 255
    4b0e:	a3 01       	movw	r20, r6
    4b10:	f1 d0       	rcall	.+482    	; 0x4cf4 <__ultoa_invert>
    4b12:	88 2e       	mov	r8, r24
    4b14:	86 18       	sub	r8, r6
    4b16:	fb 2d       	mov	r31, r11
    4b18:	ff 77       	andi	r31, 0x7F	; 127
    4b1a:	3f 2e       	mov	r3, r31
    4b1c:	36 fe       	sbrs	r3, 6
    4b1e:	0d c0       	rjmp	.+26     	; 0x4b3a <vfprintf+0x2e4>
    4b20:	23 2d       	mov	r18, r3
    4b22:	2e 7f       	andi	r18, 0xFE	; 254
    4b24:	a2 2e       	mov	r10, r18
    4b26:	89 14       	cp	r8, r9
    4b28:	58 f4       	brcc	.+22     	; 0x4b40 <vfprintf+0x2ea>
    4b2a:	34 fe       	sbrs	r3, 4
    4b2c:	0b c0       	rjmp	.+22     	; 0x4b44 <vfprintf+0x2ee>
    4b2e:	32 fc       	sbrc	r3, 2
    4b30:	09 c0       	rjmp	.+18     	; 0x4b44 <vfprintf+0x2ee>
    4b32:	83 2d       	mov	r24, r3
    4b34:	8e 7e       	andi	r24, 0xEE	; 238
    4b36:	a8 2e       	mov	r10, r24
    4b38:	05 c0       	rjmp	.+10     	; 0x4b44 <vfprintf+0x2ee>
    4b3a:	b8 2c       	mov	r11, r8
    4b3c:	a3 2c       	mov	r10, r3
    4b3e:	03 c0       	rjmp	.+6      	; 0x4b46 <vfprintf+0x2f0>
    4b40:	b8 2c       	mov	r11, r8
    4b42:	01 c0       	rjmp	.+2      	; 0x4b46 <vfprintf+0x2f0>
    4b44:	b9 2c       	mov	r11, r9
    4b46:	a4 fe       	sbrs	r10, 4
    4b48:	0f c0       	rjmp	.+30     	; 0x4b68 <vfprintf+0x312>
    4b4a:	fe 01       	movw	r30, r28
    4b4c:	e8 0d       	add	r30, r8
    4b4e:	f1 1d       	adc	r31, r1
    4b50:	80 81       	ld	r24, Z
    4b52:	80 33       	cpi	r24, 0x30	; 48
    4b54:	21 f4       	brne	.+8      	; 0x4b5e <vfprintf+0x308>
    4b56:	9a 2d       	mov	r25, r10
    4b58:	99 7e       	andi	r25, 0xE9	; 233
    4b5a:	a9 2e       	mov	r10, r25
    4b5c:	09 c0       	rjmp	.+18     	; 0x4b70 <vfprintf+0x31a>
    4b5e:	a2 fe       	sbrs	r10, 2
    4b60:	06 c0       	rjmp	.+12     	; 0x4b6e <vfprintf+0x318>
    4b62:	b3 94       	inc	r11
    4b64:	b3 94       	inc	r11
    4b66:	04 c0       	rjmp	.+8      	; 0x4b70 <vfprintf+0x31a>
    4b68:	8a 2d       	mov	r24, r10
    4b6a:	86 78       	andi	r24, 0x86	; 134
    4b6c:	09 f0       	breq	.+2      	; 0x4b70 <vfprintf+0x31a>
    4b6e:	b3 94       	inc	r11
    4b70:	a3 fc       	sbrc	r10, 3
    4b72:	10 c0       	rjmp	.+32     	; 0x4b94 <vfprintf+0x33e>
    4b74:	a0 fe       	sbrs	r10, 0
    4b76:	06 c0       	rjmp	.+12     	; 0x4b84 <vfprintf+0x32e>
    4b78:	b2 14       	cp	r11, r2
    4b7a:	80 f4       	brcc	.+32     	; 0x4b9c <vfprintf+0x346>
    4b7c:	28 0c       	add	r2, r8
    4b7e:	92 2c       	mov	r9, r2
    4b80:	9b 18       	sub	r9, r11
    4b82:	0d c0       	rjmp	.+26     	; 0x4b9e <vfprintf+0x348>
    4b84:	b2 14       	cp	r11, r2
    4b86:	58 f4       	brcc	.+22     	; 0x4b9e <vfprintf+0x348>
    4b88:	b6 01       	movw	r22, r12
    4b8a:	80 e2       	ldi	r24, 0x20	; 32
    4b8c:	90 e0       	ldi	r25, 0x00	; 0
    4b8e:	76 d0       	rcall	.+236    	; 0x4c7c <fputc>
    4b90:	b3 94       	inc	r11
    4b92:	f8 cf       	rjmp	.-16     	; 0x4b84 <vfprintf+0x32e>
    4b94:	b2 14       	cp	r11, r2
    4b96:	18 f4       	brcc	.+6      	; 0x4b9e <vfprintf+0x348>
    4b98:	2b 18       	sub	r2, r11
    4b9a:	02 c0       	rjmp	.+4      	; 0x4ba0 <vfprintf+0x34a>
    4b9c:	98 2c       	mov	r9, r8
    4b9e:	21 2c       	mov	r2, r1
    4ba0:	a4 fe       	sbrs	r10, 4
    4ba2:	0f c0       	rjmp	.+30     	; 0x4bc2 <vfprintf+0x36c>
    4ba4:	b6 01       	movw	r22, r12
    4ba6:	80 e3       	ldi	r24, 0x30	; 48
    4ba8:	90 e0       	ldi	r25, 0x00	; 0
    4baa:	68 d0       	rcall	.+208    	; 0x4c7c <fputc>
    4bac:	a2 fe       	sbrs	r10, 2
    4bae:	16 c0       	rjmp	.+44     	; 0x4bdc <vfprintf+0x386>
    4bb0:	a1 fc       	sbrc	r10, 1
    4bb2:	03 c0       	rjmp	.+6      	; 0x4bba <vfprintf+0x364>
    4bb4:	88 e7       	ldi	r24, 0x78	; 120
    4bb6:	90 e0       	ldi	r25, 0x00	; 0
    4bb8:	02 c0       	rjmp	.+4      	; 0x4bbe <vfprintf+0x368>
    4bba:	88 e5       	ldi	r24, 0x58	; 88
    4bbc:	90 e0       	ldi	r25, 0x00	; 0
    4bbe:	b6 01       	movw	r22, r12
    4bc0:	0c c0       	rjmp	.+24     	; 0x4bda <vfprintf+0x384>
    4bc2:	8a 2d       	mov	r24, r10
    4bc4:	86 78       	andi	r24, 0x86	; 134
    4bc6:	51 f0       	breq	.+20     	; 0x4bdc <vfprintf+0x386>
    4bc8:	a1 fe       	sbrs	r10, 1
    4bca:	02 c0       	rjmp	.+4      	; 0x4bd0 <vfprintf+0x37a>
    4bcc:	8b e2       	ldi	r24, 0x2B	; 43
    4bce:	01 c0       	rjmp	.+2      	; 0x4bd2 <vfprintf+0x37c>
    4bd0:	80 e2       	ldi	r24, 0x20	; 32
    4bd2:	a7 fc       	sbrc	r10, 7
    4bd4:	8d e2       	ldi	r24, 0x2D	; 45
    4bd6:	b6 01       	movw	r22, r12
    4bd8:	90 e0       	ldi	r25, 0x00	; 0
    4bda:	50 d0       	rcall	.+160    	; 0x4c7c <fputc>
    4bdc:	89 14       	cp	r8, r9
    4bde:	30 f4       	brcc	.+12     	; 0x4bec <vfprintf+0x396>
    4be0:	b6 01       	movw	r22, r12
    4be2:	80 e3       	ldi	r24, 0x30	; 48
    4be4:	90 e0       	ldi	r25, 0x00	; 0
    4be6:	4a d0       	rcall	.+148    	; 0x4c7c <fputc>
    4be8:	9a 94       	dec	r9
    4bea:	f8 cf       	rjmp	.-16     	; 0x4bdc <vfprintf+0x386>
    4bec:	8a 94       	dec	r8
    4bee:	f3 01       	movw	r30, r6
    4bf0:	e8 0d       	add	r30, r8
    4bf2:	f1 1d       	adc	r31, r1
    4bf4:	80 81       	ld	r24, Z
    4bf6:	b6 01       	movw	r22, r12
    4bf8:	90 e0       	ldi	r25, 0x00	; 0
    4bfa:	40 d0       	rcall	.+128    	; 0x4c7c <fputc>
    4bfc:	81 10       	cpse	r8, r1
    4bfe:	f6 cf       	rjmp	.-20     	; 0x4bec <vfprintf+0x396>
    4c00:	22 20       	and	r2, r2
    4c02:	09 f4       	brne	.+2      	; 0x4c06 <vfprintf+0x3b0>
    4c04:	4e ce       	rjmp	.-868    	; 0x48a2 <vfprintf+0x4c>
    4c06:	b6 01       	movw	r22, r12
    4c08:	80 e2       	ldi	r24, 0x20	; 32
    4c0a:	90 e0       	ldi	r25, 0x00	; 0
    4c0c:	37 d0       	rcall	.+110    	; 0x4c7c <fputc>
    4c0e:	2a 94       	dec	r2
    4c10:	f7 cf       	rjmp	.-18     	; 0x4c00 <vfprintf+0x3aa>
    4c12:	f6 01       	movw	r30, r12
    4c14:	86 81       	ldd	r24, Z+6	; 0x06
    4c16:	97 81       	ldd	r25, Z+7	; 0x07
    4c18:	02 c0       	rjmp	.+4      	; 0x4c1e <vfprintf+0x3c8>
    4c1a:	8f ef       	ldi	r24, 0xFF	; 255
    4c1c:	9f ef       	ldi	r25, 0xFF	; 255
    4c1e:	2b 96       	adiw	r28, 0x0b	; 11
    4c20:	0f b6       	in	r0, 0x3f	; 63
    4c22:	f8 94       	cli
    4c24:	de bf       	out	0x3e, r29	; 62
    4c26:	0f be       	out	0x3f, r0	; 63
    4c28:	cd bf       	out	0x3d, r28	; 61
    4c2a:	df 91       	pop	r29
    4c2c:	cf 91       	pop	r28
    4c2e:	1f 91       	pop	r17
    4c30:	0f 91       	pop	r16
    4c32:	ff 90       	pop	r15
    4c34:	ef 90       	pop	r14
    4c36:	df 90       	pop	r13
    4c38:	cf 90       	pop	r12
    4c3a:	bf 90       	pop	r11
    4c3c:	af 90       	pop	r10
    4c3e:	9f 90       	pop	r9
    4c40:	8f 90       	pop	r8
    4c42:	7f 90       	pop	r7
    4c44:	6f 90       	pop	r6
    4c46:	5f 90       	pop	r5
    4c48:	4f 90       	pop	r4
    4c4a:	3f 90       	pop	r3
    4c4c:	2f 90       	pop	r2
    4c4e:	08 95       	ret

00004c50 <strnlen_P>:
    4c50:	fc 01       	movw	r30, r24
    4c52:	05 90       	lpm	r0, Z+
    4c54:	61 50       	subi	r22, 0x01	; 1
    4c56:	70 40       	sbci	r23, 0x00	; 0
    4c58:	01 10       	cpse	r0, r1
    4c5a:	d8 f7       	brcc	.-10     	; 0x4c52 <strnlen_P+0x2>
    4c5c:	80 95       	com	r24
    4c5e:	90 95       	com	r25
    4c60:	8e 0f       	add	r24, r30
    4c62:	9f 1f       	adc	r25, r31
    4c64:	08 95       	ret

00004c66 <strnlen>:
    4c66:	fc 01       	movw	r30, r24
    4c68:	61 50       	subi	r22, 0x01	; 1
    4c6a:	70 40       	sbci	r23, 0x00	; 0
    4c6c:	01 90       	ld	r0, Z+
    4c6e:	01 10       	cpse	r0, r1
    4c70:	d8 f7       	brcc	.-10     	; 0x4c68 <strnlen+0x2>
    4c72:	80 95       	com	r24
    4c74:	90 95       	com	r25
    4c76:	8e 0f       	add	r24, r30
    4c78:	9f 1f       	adc	r25, r31
    4c7a:	08 95       	ret

00004c7c <fputc>:
    4c7c:	0f 93       	push	r16
    4c7e:	1f 93       	push	r17
    4c80:	cf 93       	push	r28
    4c82:	df 93       	push	r29
    4c84:	fb 01       	movw	r30, r22
    4c86:	23 81       	ldd	r18, Z+3	; 0x03
    4c88:	21 fd       	sbrc	r18, 1
    4c8a:	03 c0       	rjmp	.+6      	; 0x4c92 <fputc+0x16>
    4c8c:	8f ef       	ldi	r24, 0xFF	; 255
    4c8e:	9f ef       	ldi	r25, 0xFF	; 255
    4c90:	2c c0       	rjmp	.+88     	; 0x4cea <fputc+0x6e>
    4c92:	22 ff       	sbrs	r18, 2
    4c94:	16 c0       	rjmp	.+44     	; 0x4cc2 <fputc+0x46>
    4c96:	46 81       	ldd	r20, Z+6	; 0x06
    4c98:	57 81       	ldd	r21, Z+7	; 0x07
    4c9a:	24 81       	ldd	r18, Z+4	; 0x04
    4c9c:	35 81       	ldd	r19, Z+5	; 0x05
    4c9e:	42 17       	cp	r20, r18
    4ca0:	53 07       	cpc	r21, r19
    4ca2:	44 f4       	brge	.+16     	; 0x4cb4 <fputc+0x38>
    4ca4:	a0 81       	ld	r26, Z
    4ca6:	b1 81       	ldd	r27, Z+1	; 0x01
    4ca8:	9d 01       	movw	r18, r26
    4caa:	2f 5f       	subi	r18, 0xFF	; 255
    4cac:	3f 4f       	sbci	r19, 0xFF	; 255
    4cae:	31 83       	std	Z+1, r19	; 0x01
    4cb0:	20 83       	st	Z, r18
    4cb2:	8c 93       	st	X, r24
    4cb4:	26 81       	ldd	r18, Z+6	; 0x06
    4cb6:	37 81       	ldd	r19, Z+7	; 0x07
    4cb8:	2f 5f       	subi	r18, 0xFF	; 255
    4cba:	3f 4f       	sbci	r19, 0xFF	; 255
    4cbc:	37 83       	std	Z+7, r19	; 0x07
    4cbe:	26 83       	std	Z+6, r18	; 0x06
    4cc0:	14 c0       	rjmp	.+40     	; 0x4cea <fputc+0x6e>
    4cc2:	8b 01       	movw	r16, r22
    4cc4:	ec 01       	movw	r28, r24
    4cc6:	fb 01       	movw	r30, r22
    4cc8:	00 84       	ldd	r0, Z+8	; 0x08
    4cca:	f1 85       	ldd	r31, Z+9	; 0x09
    4ccc:	e0 2d       	mov	r30, r0
    4cce:	19 95       	eicall
    4cd0:	89 2b       	or	r24, r25
    4cd2:	e1 f6       	brne	.-72     	; 0x4c8c <fputc+0x10>
    4cd4:	d8 01       	movw	r26, r16
    4cd6:	16 96       	adiw	r26, 0x06	; 6
    4cd8:	8d 91       	ld	r24, X+
    4cda:	9c 91       	ld	r25, X
    4cdc:	17 97       	sbiw	r26, 0x07	; 7
    4cde:	01 96       	adiw	r24, 0x01	; 1
    4ce0:	17 96       	adiw	r26, 0x07	; 7
    4ce2:	9c 93       	st	X, r25
    4ce4:	8e 93       	st	-X, r24
    4ce6:	16 97       	sbiw	r26, 0x06	; 6
    4ce8:	ce 01       	movw	r24, r28
    4cea:	df 91       	pop	r29
    4cec:	cf 91       	pop	r28
    4cee:	1f 91       	pop	r17
    4cf0:	0f 91       	pop	r16
    4cf2:	08 95       	ret

00004cf4 <__ultoa_invert>:
    4cf4:	fa 01       	movw	r30, r20
    4cf6:	aa 27       	eor	r26, r26
    4cf8:	28 30       	cpi	r18, 0x08	; 8
    4cfa:	51 f1       	breq	.+84     	; 0x4d50 <__ultoa_invert+0x5c>
    4cfc:	20 31       	cpi	r18, 0x10	; 16
    4cfe:	81 f1       	breq	.+96     	; 0x4d60 <__ultoa_invert+0x6c>
    4d00:	e8 94       	clt
    4d02:	6f 93       	push	r22
    4d04:	6e 7f       	andi	r22, 0xFE	; 254
    4d06:	6e 5f       	subi	r22, 0xFE	; 254
    4d08:	7f 4f       	sbci	r23, 0xFF	; 255
    4d0a:	8f 4f       	sbci	r24, 0xFF	; 255
    4d0c:	9f 4f       	sbci	r25, 0xFF	; 255
    4d0e:	af 4f       	sbci	r26, 0xFF	; 255
    4d10:	b1 e0       	ldi	r27, 0x01	; 1
    4d12:	3e d0       	rcall	.+124    	; 0x4d90 <__ultoa_invert+0x9c>
    4d14:	b4 e0       	ldi	r27, 0x04	; 4
    4d16:	3c d0       	rcall	.+120    	; 0x4d90 <__ultoa_invert+0x9c>
    4d18:	67 0f       	add	r22, r23
    4d1a:	78 1f       	adc	r23, r24
    4d1c:	89 1f       	adc	r24, r25
    4d1e:	9a 1f       	adc	r25, r26
    4d20:	a1 1d       	adc	r26, r1
    4d22:	68 0f       	add	r22, r24
    4d24:	79 1f       	adc	r23, r25
    4d26:	8a 1f       	adc	r24, r26
    4d28:	91 1d       	adc	r25, r1
    4d2a:	a1 1d       	adc	r26, r1
    4d2c:	6a 0f       	add	r22, r26
    4d2e:	71 1d       	adc	r23, r1
    4d30:	81 1d       	adc	r24, r1
    4d32:	91 1d       	adc	r25, r1
    4d34:	a1 1d       	adc	r26, r1
    4d36:	20 d0       	rcall	.+64     	; 0x4d78 <__ultoa_invert+0x84>
    4d38:	09 f4       	brne	.+2      	; 0x4d3c <__ultoa_invert+0x48>
    4d3a:	68 94       	set
    4d3c:	3f 91       	pop	r19
    4d3e:	2a e0       	ldi	r18, 0x0A	; 10
    4d40:	26 9f       	mul	r18, r22
    4d42:	11 24       	eor	r1, r1
    4d44:	30 19       	sub	r19, r0
    4d46:	30 5d       	subi	r19, 0xD0	; 208
    4d48:	31 93       	st	Z+, r19
    4d4a:	de f6       	brtc	.-74     	; 0x4d02 <__ultoa_invert+0xe>
    4d4c:	cf 01       	movw	r24, r30
    4d4e:	08 95       	ret
    4d50:	46 2f       	mov	r20, r22
    4d52:	47 70       	andi	r20, 0x07	; 7
    4d54:	40 5d       	subi	r20, 0xD0	; 208
    4d56:	41 93       	st	Z+, r20
    4d58:	b3 e0       	ldi	r27, 0x03	; 3
    4d5a:	0f d0       	rcall	.+30     	; 0x4d7a <__ultoa_invert+0x86>
    4d5c:	c9 f7       	brne	.-14     	; 0x4d50 <__ultoa_invert+0x5c>
    4d5e:	f6 cf       	rjmp	.-20     	; 0x4d4c <__ultoa_invert+0x58>
    4d60:	46 2f       	mov	r20, r22
    4d62:	4f 70       	andi	r20, 0x0F	; 15
    4d64:	40 5d       	subi	r20, 0xD0	; 208
    4d66:	4a 33       	cpi	r20, 0x3A	; 58
    4d68:	18 f0       	brcs	.+6      	; 0x4d70 <__ultoa_invert+0x7c>
    4d6a:	49 5d       	subi	r20, 0xD9	; 217
    4d6c:	31 fd       	sbrc	r19, 1
    4d6e:	40 52       	subi	r20, 0x20	; 32
    4d70:	41 93       	st	Z+, r20
    4d72:	02 d0       	rcall	.+4      	; 0x4d78 <__ultoa_invert+0x84>
    4d74:	a9 f7       	brne	.-22     	; 0x4d60 <__ultoa_invert+0x6c>
    4d76:	ea cf       	rjmp	.-44     	; 0x4d4c <__ultoa_invert+0x58>
    4d78:	b4 e0       	ldi	r27, 0x04	; 4
    4d7a:	a6 95       	lsr	r26
    4d7c:	97 95       	ror	r25
    4d7e:	87 95       	ror	r24
    4d80:	77 95       	ror	r23
    4d82:	67 95       	ror	r22
    4d84:	ba 95       	dec	r27
    4d86:	c9 f7       	brne	.-14     	; 0x4d7a <__ultoa_invert+0x86>
    4d88:	00 97       	sbiw	r24, 0x00	; 0
    4d8a:	61 05       	cpc	r22, r1
    4d8c:	71 05       	cpc	r23, r1
    4d8e:	08 95       	ret
    4d90:	9b 01       	movw	r18, r22
    4d92:	ac 01       	movw	r20, r24
    4d94:	0a 2e       	mov	r0, r26
    4d96:	06 94       	lsr	r0
    4d98:	57 95       	ror	r21
    4d9a:	47 95       	ror	r20
    4d9c:	37 95       	ror	r19
    4d9e:	27 95       	ror	r18
    4da0:	ba 95       	dec	r27
    4da2:	c9 f7       	brne	.-14     	; 0x4d96 <__ultoa_invert+0xa2>
    4da4:	62 0f       	add	r22, r18
    4da6:	73 1f       	adc	r23, r19
    4da8:	84 1f       	adc	r24, r20
    4daa:	95 1f       	adc	r25, r21
    4dac:	a0 1d       	adc	r26, r0
    4dae:	08 95       	ret

00004db0 <_exit>:
    4db0:	f8 94       	cli

00004db2 <__stop_program>:
    4db2:	ff cf       	rjmp	.-2      	; 0x4db2 <__stop_program>
