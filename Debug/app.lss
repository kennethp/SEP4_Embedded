
app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005d0  00800200  00005066  000050fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005066  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000282  008007d0  008007d0  000056ca  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000056ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005728  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a88  00000000  00000000  00005768  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d529  00000000  00000000  000061f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000034de  00000000  00000000  00013719  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006504  00000000  00000000  00016bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002348  00000000  00000000  0001d0fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004572  00000000  00000000  0001f444  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c0db  00000000  00000000  000239b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ac0  00000000  00000000  0002fa91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	06 c2       	rjmp	.+1036   	; 0x40e <__ctors_end>
       2:	00 00       	nop
       4:	24 c2       	rjmp	.+1096   	; 0x44e <__bad_interrupt>
       6:	00 00       	nop
       8:	22 c2       	rjmp	.+1092   	; 0x44e <__bad_interrupt>
       a:	00 00       	nop
       c:	20 c2       	rjmp	.+1088   	; 0x44e <__bad_interrupt>
       e:	00 00       	nop
      10:	1e c2       	rjmp	.+1084   	; 0x44e <__bad_interrupt>
      12:	00 00       	nop
      14:	1c c2       	rjmp	.+1080   	; 0x44e <__bad_interrupt>
      16:	00 00       	nop
      18:	1a c2       	rjmp	.+1076   	; 0x44e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	18 c2       	rjmp	.+1072   	; 0x44e <__bad_interrupt>
      1e:	00 00       	nop
      20:	16 c2       	rjmp	.+1068   	; 0x44e <__bad_interrupt>
      22:	00 00       	nop
      24:	14 c2       	rjmp	.+1064   	; 0x44e <__bad_interrupt>
      26:	00 00       	nop
      28:	12 c2       	rjmp	.+1060   	; 0x44e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	10 c2       	rjmp	.+1056   	; 0x44e <__bad_interrupt>
      2e:	00 00       	nop
      30:	d4 c6       	rjmp	.+3496   	; 0xdda <__vector_12>
      32:	00 00       	nop
      34:	0c c2       	rjmp	.+1048   	; 0x44e <__bad_interrupt>
      36:	00 00       	nop
      38:	0a c2       	rjmp	.+1044   	; 0x44e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	08 c2       	rjmp	.+1040   	; 0x44e <__bad_interrupt>
      3e:	00 00       	nop
      40:	06 c2       	rjmp	.+1036   	; 0x44e <__bad_interrupt>
      42:	00 00       	nop
      44:	04 c2       	rjmp	.+1032   	; 0x44e <__bad_interrupt>
      46:	00 00       	nop
      48:	02 c2       	rjmp	.+1028   	; 0x44e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	00 c2       	rjmp	.+1024   	; 0x44e <__bad_interrupt>
      4e:	00 00       	nop
      50:	fe c1       	rjmp	.+1020   	; 0x44e <__bad_interrupt>
      52:	00 00       	nop
      54:	fc c1       	rjmp	.+1016   	; 0x44e <__bad_interrupt>
      56:	00 00       	nop
      58:	fa c1       	rjmp	.+1012   	; 0x44e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f8 c1       	rjmp	.+1008   	; 0x44e <__bad_interrupt>
      5e:	00 00       	nop
      60:	f6 c1       	rjmp	.+1004   	; 0x44e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 2f 15 	jmp	0x2a5e	; 0x2a5e <__vector_25>
      68:	0c 94 81 15 	jmp	0x2b02	; 0x2b02 <__vector_26>
      6c:	f0 c1       	rjmp	.+992    	; 0x44e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ee c1       	rjmp	.+988    	; 0x44e <__bad_interrupt>
      72:	00 00       	nop
      74:	ec c1       	rjmp	.+984    	; 0x44e <__bad_interrupt>
      76:	00 00       	nop
      78:	ea c1       	rjmp	.+980    	; 0x44e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e8 c1       	rjmp	.+976    	; 0x44e <__bad_interrupt>
      7e:	00 00       	nop
      80:	e6 c1       	rjmp	.+972    	; 0x44e <__bad_interrupt>
      82:	00 00       	nop
      84:	e4 c1       	rjmp	.+968    	; 0x44e <__bad_interrupt>
      86:	00 00       	nop
      88:	e2 c1       	rjmp	.+964    	; 0x44e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e0 c1       	rjmp	.+960    	; 0x44e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 c5 15 	jmp	0x2b8a	; 0x2b8a <__vector_36>
      94:	0c 94 17 16 	jmp	0x2c2e	; 0x2c2e <__vector_37>
      98:	da c1       	rjmp	.+948    	; 0x44e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 ee 20 	jmp	0x41dc	; 0x41dc <__vector_39>
      a0:	d6 c1       	rjmp	.+940    	; 0x44e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d4 c1       	rjmp	.+936    	; 0x44e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d2 c1       	rjmp	.+932    	; 0x44e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d0 c1       	rjmp	.+928    	; 0x44e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ce c1       	rjmp	.+924    	; 0x44e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cc c1       	rjmp	.+920    	; 0x44e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ca c1       	rjmp	.+916    	; 0x44e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c8 c1       	rjmp	.+912    	; 0x44e <__bad_interrupt>
      be:	00 00       	nop
      c0:	c6 c1       	rjmp	.+908    	; 0x44e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c4 c1       	rjmp	.+904    	; 0x44e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c2 c1       	rjmp	.+900    	; 0x44e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 5b 16 	jmp	0x2cb6	; 0x2cb6 <__vector_51>
      d0:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <__vector_52>
      d4:	bc c1       	rjmp	.+888    	; 0x44e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 f1 16 	jmp	0x2de2	; 0x2de2 <__vector_54>
      dc:	0c 94 43 17 	jmp	0x2e86	; 0x2e86 <__vector_55>
      e0:	b6 c1       	rjmp	.+876    	; 0x44e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	96 01       	movw	r18, r12
      e6:	96 01       	movw	r18, r12
      e8:	96 01       	movw	r18, r12
      ea:	c5 01       	movw	r24, r10
      ec:	cd 01       	movw	r24, r26
      ee:	dc 01       	movw	r26, r24
      f0:	96 01       	movw	r18, r12
      f2:	96 01       	movw	r18, r12
      f4:	c5 01       	movw	r24, r10
      f6:	cd 01       	movw	r24, r26
      f8:	10 21       	and	r17, r0
      fa:	80 21       	and	r24, r0
      fc:	80 21       	and	r24, r0
      fe:	80 21       	and	r24, r0
     100:	80 21       	and	r24, r0
     102:	80 21       	and	r24, r0
     104:	80 21       	and	r24, r0
     106:	80 21       	and	r24, r0
     108:	10 21       	and	r17, r0
     10a:	80 21       	and	r24, r0
     10c:	80 21       	and	r24, r0
     10e:	80 21       	and	r24, r0
     110:	80 21       	and	r24, r0
     112:	80 21       	and	r24, r0
     114:	80 21       	and	r24, r0
     116:	80 21       	and	r24, r0
     118:	12 21       	and	r17, r2
     11a:	80 21       	and	r24, r0
     11c:	80 21       	and	r24, r0
     11e:	80 21       	and	r24, r0
     120:	80 21       	and	r24, r0
     122:	80 21       	and	r24, r0
     124:	80 21       	and	r24, r0
     126:	80 21       	and	r24, r0
     128:	80 21       	and	r24, r0
     12a:	80 21       	and	r24, r0
     12c:	80 21       	and	r24, r0
     12e:	80 21       	and	r24, r0
     130:	80 21       	and	r24, r0
     132:	80 21       	and	r24, r0
     134:	80 21       	and	r24, r0
     136:	80 21       	and	r24, r0
     138:	12 21       	and	r17, r2
     13a:	80 21       	and	r24, r0
     13c:	80 21       	and	r24, r0
     13e:	80 21       	and	r24, r0
     140:	80 21       	and	r24, r0
     142:	80 21       	and	r24, r0
     144:	80 21       	and	r24, r0
     146:	80 21       	and	r24, r0
     148:	80 21       	and	r24, r0
     14a:	80 21       	and	r24, r0
     14c:	80 21       	and	r24, r0
     14e:	80 21       	and	r24, r0
     150:	80 21       	and	r24, r0
     152:	80 21       	and	r24, r0
     154:	80 21       	and	r24, r0
     156:	80 21       	and	r24, r0
     158:	7c 21       	and	r23, r12
     15a:	80 21       	and	r24, r0
     15c:	80 21       	and	r24, r0
     15e:	80 21       	and	r24, r0
     160:	80 21       	and	r24, r0
     162:	80 21       	and	r24, r0
     164:	80 21       	and	r24, r0
     166:	80 21       	and	r24, r0
     168:	47 21       	and	r20, r7
     16a:	80 21       	and	r24, r0
     16c:	80 21       	and	r24, r0
     16e:	80 21       	and	r24, r0
     170:	80 21       	and	r24, r0
     172:	80 21       	and	r24, r0
     174:	80 21       	and	r24, r0
     176:	80 21       	and	r24, r0
     178:	80 21       	and	r24, r0
     17a:	80 21       	and	r24, r0
     17c:	80 21       	and	r24, r0
     17e:	80 21       	and	r24, r0
     180:	80 21       	and	r24, r0
     182:	80 21       	and	r24, r0
     184:	80 21       	and	r24, r0
     186:	80 21       	and	r24, r0
     188:	3b 21       	and	r19, r11
     18a:	80 21       	and	r24, r0
     18c:	80 21       	and	r24, r0
     18e:	80 21       	and	r24, r0
     190:	80 21       	and	r24, r0
     192:	80 21       	and	r24, r0
     194:	80 21       	and	r24, r0
     196:	80 21       	and	r24, r0
     198:	5f 21       	and	r21, r15

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	02 ef       	ldi	r16, 0xF2	; 242
     19c:	17 e0       	ldi	r17, 0x07	; 7
     19e:	0f 2e       	mov	r0, r31
     1a0:	fa e1       	ldi	r31, 0x1A	; 26
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f8 e0       	ldi	r31, 0x08	; 8
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 f1 07 	lds	r24, 0x07F1	; 0x8007f1 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	15 96       	adiw	r26, 0x05	; 5
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	16 97       	sbiw	r26, 0x06	; 6
     1c2:	c6 81       	ldd	r28, Z+6	; 0x06
     1c4:	d7 81       	ldd	r29, Z+7	; 0x07
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	6d d4       	rcall	.+2266   	; 0xaa6 <uxListRemove>
     1cc:	80 91 e7 07 	lds	r24, 0x07E7	; 0x8007e7 <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 e7 07 	sts	0x07E7, r24	; 0x8007e7 <uxCurrentNumberOfTasks>
     1d6:	80 91 f1 07 	lds	r24, 0x07F1	; 0x8007f1 <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 f1 07 	sts	0x07F1, r24	; 0x8007f1 <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8f 89       	ldd	r24, Y+23	; 0x17
     1e6:	98 8d       	ldd	r25, Y+24	; 0x18
     1e8:	eb d3       	rcall	.+2006   	; 0x9c0 <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	e9 d3       	rcall	.+2002   	; 0x9c0 <vPortFree>
     1ee:	80 91 f1 07 	lds	r24, 0x07F1	; 0x8007f1 <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	08 f0       	brcs	.+2      	; 0x200 <prvIdleTask+0x66>
     1fe:	28 d5       	rcall	.+2640   	; 0xc50 <vPortYield>
     200:	0e 94 43 13 	call	0x2686	; 0x2686 <vApplicationIdleHook>
     204:	d2 cf       	rjmp	.-92     	; 0x1aa <prvIdleTask+0x10>

00000206 <prvTimerTask>:
     206:	cf 93       	push	r28
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     208:	df 93       	push	r29
     20a:	00 d0       	rcall	.+0      	; 0x20c <prvTimerTask+0x6>
     20c:	00 d0       	rcall	.+0      	; 0x20e <prvTimerTask+0x8>
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
     212:	ce 01       	movw	r24, r28
     214:	01 96       	adiw	r24, 0x01	; 1
     216:	4c 01       	movw	r8, r24
     218:	44 24       	eor	r4, r4
     21a:	43 94       	inc	r4
     21c:	e1 2c       	mov	r14, r1
     21e:	f1 2c       	mov	r15, r1
     220:	51 2c       	mov	r5, r1
     222:	c8 2e       	mov	r12, r24
     224:	d9 2c       	mov	r13, r9
     226:	e0 91 48 08 	lds	r30, 0x0848	; 0x800848 <pxCurrentTimerList>
     22a:	f0 91 49 08 	lds	r31, 0x0849	; 0x800849 <pxCurrentTimerList+0x1>
     22e:	80 81       	ld	r24, Z
     230:	88 23       	and	r24, r24
     232:	09 f4       	brne	.+2      	; 0x236 <prvTimerTask+0x30>
     234:	d8 c0       	rjmp	.+432    	; 0x3e6 <prvTimerTask+0x1e0>
     236:	05 80       	ldd	r0, Z+5	; 0x05
     238:	f6 81       	ldd	r31, Z+6	; 0x06
     23a:	e0 2d       	mov	r30, r0
     23c:	a0 80       	ld	r10, Z
     23e:	b1 80       	ldd	r11, Z+1	; 0x01
     240:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <vTaskSuspendAll>
     244:	c4 01       	movw	r24, r8
     246:	0e 94 d5 12 	call	0x25aa	; 0x25aa <prvSampleTimeNow>
     24a:	8c 01       	movw	r16, r24
     24c:	89 81       	ldd	r24, Y+1	; 0x01
     24e:	81 11       	cpse	r24, r1
     250:	49 c0       	rjmp	.+146    	; 0x2e4 <prvTimerTask+0xde>
     252:	0a 15       	cp	r16, r10
     254:	1b 05       	cpc	r17, r11
     256:	b0 f1       	brcs	.+108    	; 0x2c4 <prvTimerTask+0xbe>
     258:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <xTaskResumeAll>
     25c:	e0 91 48 08 	lds	r30, 0x0848	; 0x800848 <pxCurrentTimerList>
     260:	f0 91 49 08 	lds	r31, 0x0849	; 0x800849 <pxCurrentTimerList+0x1>
     264:	05 80       	ldd	r0, Z+5	; 0x05
     266:	f6 81       	ldd	r31, Z+6	; 0x06
     268:	e0 2d       	mov	r30, r0
     26a:	66 80       	ldd	r6, Z+6	; 0x06
     26c:	77 80       	ldd	r7, Z+7	; 0x07
     26e:	c3 01       	movw	r24, r6
     270:	02 96       	adiw	r24, 0x02	; 2
     272:	19 d4       	rcall	.+2098   	; 0xaa6 <uxListRemove>
     274:	d3 01       	movw	r26, r6
     276:	53 96       	adiw	r26, 0x13	; 19
     278:	8c 91       	ld	r24, X
     27a:	53 97       	sbiw	r26, 0x13	; 19
     27c:	82 ff       	sbrs	r24, 2
     27e:	17 c0       	rjmp	.+46     	; 0x2ae <prvTimerTask+0xa8>
     280:	1c 96       	adiw	r26, 0x0c	; 12
     282:	6d 91       	ld	r22, X+
     284:	7c 91       	ld	r23, X
     286:	1d 97       	sbiw	r26, 0x0d	; 13
     288:	6a 0d       	add	r22, r10
     28a:	7b 1d       	adc	r23, r11
     28c:	95 01       	movw	r18, r10
     28e:	a8 01       	movw	r20, r16
     290:	c3 01       	movw	r24, r6
     292:	0e 94 16 12 	call	0x242c	; 0x242c <prvInsertTimerInActiveList>
     296:	88 23       	and	r24, r24
     298:	69 f0       	breq	.+26     	; 0x2b4 <prvTimerTask+0xae>
     29a:	0e 2d       	mov	r16, r14
     29c:	1f 2d       	mov	r17, r15
     29e:	2e 2d       	mov	r18, r14
     2a0:	3f 2d       	mov	r19, r15
     2a2:	a5 01       	movw	r20, r10
     2a4:	65 2d       	mov	r22, r5
     2a6:	c3 01       	movw	r24, r6
     2a8:	0e 94 8e 12 	call	0x251c	; 0x251c <xTimerGenericCommand>
     2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <prvTimerTask+0xae>
     2ae:	8e 7f       	andi	r24, 0xFE	; 254
     2b0:	f3 01       	movw	r30, r6
     2b2:	83 8b       	std	Z+19, r24	; 0x13
     2b4:	d3 01       	movw	r26, r6
     2b6:	50 96       	adiw	r26, 0x10	; 16
     2b8:	ed 91       	ld	r30, X+
     2ba:	fc 91       	ld	r31, X
     2bc:	51 97       	sbiw	r26, 0x11	; 17
     2be:	c3 01       	movw	r24, r6
     2c0:	19 95       	eicall
     2c2:	85 c0       	rjmp	.+266    	; 0x3ce <prvTimerTask+0x1c8>
     2c4:	45 2d       	mov	r20, r5
     2c6:	b5 01       	movw	r22, r10
     2c8:	60 1b       	sub	r22, r16
     2ca:	71 0b       	sbc	r23, r17
     2cc:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <xTimerQueue>
     2d0:	90 91 45 08 	lds	r25, 0x0845	; 0x800845 <xTimerQueue+0x1>
     2d4:	0e 94 82 09 	call	0x1304	; 0x1304 <vQueueWaitForMessageRestricted>
     2d8:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <xTaskResumeAll>
     2dc:	81 11       	cpse	r24, r1
     2de:	77 c0       	rjmp	.+238    	; 0x3ce <prvTimerTask+0x1c8>
     2e0:	b7 d4       	rcall	.+2414   	; 0xc50 <vPortYield>
     2e2:	75 c0       	rjmp	.+234    	; 0x3ce <prvTimerTask+0x1c8>
     2e4:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <xTaskResumeAll>
     2e8:	72 c0       	rjmp	.+228    	; 0x3ce <prvTimerTask+0x1c8>
     2ea:	89 81       	ldd	r24, Y+1	; 0x01
     2ec:	88 23       	and	r24, r24
     2ee:	0c f4       	brge	.+2      	; 0x2f2 <prvTimerTask+0xec>
     2f0:	6e c0       	rjmp	.+220    	; 0x3ce <prvTimerTask+0x1c8>
     2f2:	ac 80       	ldd	r10, Y+4	; 0x04
     2f4:	bd 80       	ldd	r11, Y+5	; 0x05
     2f6:	f5 01       	movw	r30, r10
     2f8:	82 85       	ldd	r24, Z+10	; 0x0a
     2fa:	93 85       	ldd	r25, Z+11	; 0x0b
     2fc:	89 2b       	or	r24, r25
     2fe:	19 f0       	breq	.+6      	; 0x306 <prvTimerTask+0x100>
     300:	c5 01       	movw	r24, r10
     302:	02 96       	adiw	r24, 0x02	; 2
     304:	d0 d3       	rcall	.+1952   	; 0xaa6 <uxListRemove>
     306:	ce 01       	movw	r24, r28
     308:	06 96       	adiw	r24, 0x06	; 6
     30a:	0e 94 d5 12 	call	0x25aa	; 0x25aa <prvSampleTimeNow>
     30e:	ac 01       	movw	r20, r24
     310:	e9 81       	ldd	r30, Y+1	; 0x01
     312:	0e 2e       	mov	r0, r30
     314:	00 0c       	add	r0, r0
     316:	ff 0b       	sbc	r31, r31
     318:	ea 30       	cpi	r30, 0x0A	; 10
     31a:	f1 05       	cpc	r31, r1
     31c:	08 f0       	brcs	.+2      	; 0x320 <prvTimerTask+0x11a>
     31e:	57 c0       	rjmp	.+174    	; 0x3ce <prvTimerTask+0x1c8>
     320:	88 27       	eor	r24, r24
     322:	ee 58       	subi	r30, 0x8E	; 142
     324:	ff 4f       	sbci	r31, 0xFF	; 255
     326:	8f 4f       	sbci	r24, 0xFF	; 255
     328:	0c 94 92 23 	jmp	0x4724	; 0x4724 <__tablejump2__>
     32c:	d5 01       	movw	r26, r10
     32e:	53 96       	adiw	r26, 0x13	; 19
     330:	8c 91       	ld	r24, X
     332:	53 97       	sbiw	r26, 0x13	; 19
     334:	81 60       	ori	r24, 0x01	; 1
     336:	53 96       	adiw	r26, 0x13	; 19
     338:	8c 93       	st	X, r24
     33a:	53 97       	sbiw	r26, 0x13	; 19
     33c:	2a 81       	ldd	r18, Y+2	; 0x02
     33e:	3b 81       	ldd	r19, Y+3	; 0x03
     340:	1c 96       	adiw	r26, 0x0c	; 12
     342:	6d 91       	ld	r22, X+
     344:	7c 91       	ld	r23, X
     346:	1d 97       	sbiw	r26, 0x0d	; 13
     348:	62 0f       	add	r22, r18
     34a:	73 1f       	adc	r23, r19
     34c:	c5 01       	movw	r24, r10
     34e:	0e 94 16 12 	call	0x242c	; 0x242c <prvInsertTimerInActiveList>
     352:	88 23       	and	r24, r24
     354:	e1 f1       	breq	.+120    	; 0x3ce <prvTimerTask+0x1c8>
     356:	d5 01       	movw	r26, r10
     358:	50 96       	adiw	r26, 0x10	; 16
     35a:	ed 91       	ld	r30, X+
     35c:	fc 91       	ld	r31, X
     35e:	51 97       	sbiw	r26, 0x11	; 17
     360:	c5 01       	movw	r24, r10
     362:	19 95       	eicall
     364:	f5 01       	movw	r30, r10
     366:	83 89       	ldd	r24, Z+19	; 0x13
     368:	82 ff       	sbrs	r24, 2
     36a:	31 c0       	rjmp	.+98     	; 0x3ce <prvTimerTask+0x1c8>
     36c:	4a 81       	ldd	r20, Y+2	; 0x02
     36e:	5b 81       	ldd	r21, Y+3	; 0x03
     370:	84 85       	ldd	r24, Z+12	; 0x0c
     372:	95 85       	ldd	r25, Z+13	; 0x0d
     374:	48 0f       	add	r20, r24
     376:	59 1f       	adc	r21, r25
     378:	0e 2d       	mov	r16, r14
     37a:	1f 2d       	mov	r17, r15
     37c:	2e 2d       	mov	r18, r14
     37e:	3f 2d       	mov	r19, r15
     380:	65 2d       	mov	r22, r5
     382:	c5 01       	movw	r24, r10
     384:	0e 94 8e 12 	call	0x251c	; 0x251c <xTimerGenericCommand>
     388:	22 c0       	rjmp	.+68     	; 0x3ce <prvTimerTask+0x1c8>
     38a:	d5 01       	movw	r26, r10
     38c:	53 96       	adiw	r26, 0x13	; 19
     38e:	8c 91       	ld	r24, X
     390:	53 97       	sbiw	r26, 0x13	; 19
     392:	8e 7f       	andi	r24, 0xFE	; 254
     394:	53 96       	adiw	r26, 0x13	; 19
     396:	8c 93       	st	X, r24
     398:	1a c0       	rjmp	.+52     	; 0x3ce <prvTimerTask+0x1c8>
     39a:	f5 01       	movw	r30, r10
     39c:	83 89       	ldd	r24, Z+19	; 0x13
     39e:	81 60       	ori	r24, 0x01	; 1
     3a0:	83 8b       	std	Z+19, r24	; 0x13
     3a2:	6a 81       	ldd	r22, Y+2	; 0x02
     3a4:	7b 81       	ldd	r23, Y+3	; 0x03
     3a6:	75 87       	std	Z+13, r23	; 0x0d
     3a8:	64 87       	std	Z+12, r22	; 0x0c
     3aa:	64 0f       	add	r22, r20
     3ac:	75 1f       	adc	r23, r21
     3ae:	9a 01       	movw	r18, r20
     3b0:	c5 01       	movw	r24, r10
     3b2:	0e 94 16 12 	call	0x242c	; 0x242c <prvInsertTimerInActiveList>
     3b6:	0b c0       	rjmp	.+22     	; 0x3ce <prvTimerTask+0x1c8>
     3b8:	d5 01       	movw	r26, r10
     3ba:	53 96       	adiw	r26, 0x13	; 19
     3bc:	8c 91       	ld	r24, X
     3be:	81 fd       	sbrc	r24, 1
     3c0:	03 c0       	rjmp	.+6      	; 0x3c8 <prvTimerTask+0x1c2>
     3c2:	c5 01       	movw	r24, r10
     3c4:	fd d2       	rcall	.+1530   	; 0x9c0 <vPortFree>
     3c6:	03 c0       	rjmp	.+6      	; 0x3ce <prvTimerTask+0x1c8>
     3c8:	8e 7f       	andi	r24, 0xFE	; 254
     3ca:	f5 01       	movw	r30, r10
     3cc:	83 8b       	std	Z+19, r24	; 0x13
     3ce:	4e 2d       	mov	r20, r14
     3d0:	5f 2d       	mov	r21, r15
     3d2:	6c 2d       	mov	r22, r12
     3d4:	7d 2d       	mov	r23, r13
     3d6:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <xTimerQueue>
     3da:	90 91 45 08 	lds	r25, 0x0845	; 0x800845 <xTimerQueue+0x1>
     3de:	09 d7       	rcall	.+3602   	; 0x11f2 <xQueueReceive>
     3e0:	81 11       	cpse	r24, r1
     3e2:	83 cf       	rjmp	.-250    	; 0x2ea <prvTimerTask+0xe4>
     3e4:	20 cf       	rjmp	.-448    	; 0x226 <prvTimerTask+0x20>
     3e6:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <vTaskSuspendAll>
     3ea:	c4 01       	movw	r24, r8
     3ec:	0e 94 d5 12 	call	0x25aa	; 0x25aa <prvSampleTimeNow>
     3f0:	8c 01       	movw	r16, r24
     3f2:	89 81       	ldd	r24, Y+1	; 0x01
     3f4:	81 11       	cpse	r24, r1
     3f6:	76 cf       	rjmp	.-276    	; 0x2e4 <prvTimerTask+0xde>
     3f8:	e0 91 46 08 	lds	r30, 0x0846	; 0x800846 <pxOverflowTimerList>
     3fc:	f0 91 47 08 	lds	r31, 0x0847	; 0x800847 <pxOverflowTimerList+0x1>
     400:	80 81       	ld	r24, Z
     402:	44 2d       	mov	r20, r4
     404:	81 11       	cpse	r24, r1
     406:	45 2d       	mov	r20, r5
     408:	ae 2c       	mov	r10, r14
     40a:	bf 2c       	mov	r11, r15
     40c:	5c cf       	rjmp	.-328    	; 0x2c6 <prvTimerTask+0xc0>

0000040e <__ctors_end>:
     40e:	11 24       	eor	r1, r1
     410:	1f be       	out	0x3f, r1	; 63
     412:	cf ef       	ldi	r28, 0xFF	; 255
     414:	d1 e2       	ldi	r29, 0x21	; 33
     416:	de bf       	out	0x3e, r29	; 62
     418:	cd bf       	out	0x3d, r28	; 61
     41a:	00 e0       	ldi	r16, 0x00	; 0
     41c:	0c bf       	out	0x3c, r16	; 60

0000041e <__do_copy_data>:
     41e:	17 e0       	ldi	r17, 0x07	; 7
     420:	a0 e0       	ldi	r26, 0x00	; 0
     422:	b2 e0       	ldi	r27, 0x02	; 2
     424:	e6 e6       	ldi	r30, 0x66	; 102
     426:	f0 e5       	ldi	r31, 0x50	; 80
     428:	00 e0       	ldi	r16, 0x00	; 0
     42a:	0b bf       	out	0x3b, r16	; 59
     42c:	02 c0       	rjmp	.+4      	; 0x432 <__do_copy_data+0x14>
     42e:	07 90       	elpm	r0, Z+
     430:	0d 92       	st	X+, r0
     432:	a0 3d       	cpi	r26, 0xD0	; 208
     434:	b1 07       	cpc	r27, r17
     436:	d9 f7       	brne	.-10     	; 0x42e <__do_copy_data+0x10>

00000438 <__do_clear_bss>:
     438:	2a e0       	ldi	r18, 0x0A	; 10
     43a:	a0 ed       	ldi	r26, 0xD0	; 208
     43c:	b7 e0       	ldi	r27, 0x07	; 7
     43e:	01 c0       	rjmp	.+2      	; 0x442 <.do_clear_bss_start>

00000440 <.do_clear_bss_loop>:
     440:	1d 92       	st	X+, r1

00000442 <.do_clear_bss_start>:
     442:	a2 35       	cpi	r26, 0x52	; 82
     444:	b2 07       	cpc	r27, r18
     446:	e1 f7       	brne	.-8      	; 0x440 <.do_clear_bss_loop>
     448:	02 d2       	rcall	.+1028   	; 0x84e <main>
     44a:	0c 94 31 28 	jmp	0x5062	; 0x5062 <_exit>

0000044e <__bad_interrupt>:
     44e:	d8 cd       	rjmp	.-1104   	; 0x0 <__vectors>

00000450 <waterTask>:

void waterTask(void* pvParamters) {
	(void)pvParamters;

	while(1) {
		while(water > 0) {
     450:	80 91 c2 09 	lds	r24, 0x09C2	; 0x8009c2 <water>
     454:	90 91 c3 09 	lds	r25, 0x09C3	; 0x8009c3 <water+0x1>
     458:	18 16       	cp	r1, r24
     45a:	19 06       	cpc	r1, r25
     45c:	cc f7       	brge	.-14     	; 0x450 <waterTask>
			//set servo output high
			vTaskDelay(100 / portTICK_PERIOD_MS);
     45e:	86 e0       	ldi	r24, 0x06	; 6
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <vTaskDelay>
			water--;
     466:	80 91 c2 09 	lds	r24, 0x09C2	; 0x8009c2 <water>
     46a:	90 91 c3 09 	lds	r25, 0x09C3	; 0x8009c3 <water+0x1>
     46e:	01 97       	sbiw	r24, 0x01	; 1
     470:	90 93 c3 09 	sts	0x09C3, r25	; 0x8009c3 <water+0x1>
     474:	80 93 c2 09 	sts	0x09C2, r24	; 0x8009c2 <water>

void waterTask(void* pvParamters) {
	(void)pvParamters;

	while(1) {
		while(water > 0) {
     478:	18 16       	cp	r1, r24
     47a:	19 06       	cpc	r1, r25
     47c:	84 f3       	brlt	.-32     	; 0x45e <waterTask+0xe>
     47e:	e8 cf       	rjmp	.-48     	; 0x450 <waterTask>

00000480 <co2Callback>:

	vTaskDelete(NULL);
}

void co2Callback(uint16_t ppm) {
	co2 = ppm;
     480:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <co2>
     484:	90 93 29 0a 	sts	0x0A29, r25	; 0x800a29 <co2+0x1>
	printf("CO2 level: %u\n", ppm);
     488:	9f 93       	push	r25
     48a:	8f 93       	push	r24
     48c:	8e e4       	ldi	r24, 0x4E	; 78
     48e:	92 e0       	ldi	r25, 0x02	; 2
     490:	9f 93       	push	r25
     492:	8f 93       	push	r24
     494:	0e 94 13 25 	call	0x4a26	; 0x4a26 <printf>
}
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	0f 90       	pop	r0
     4a0:	08 95       	ret

000004a2 <tempSensorTask>:
	while(1) {
		vTaskDelay(1000 / portTICK_PERIOD_MS);
		
		int r = hih8120Wakeup();
		if(r != HIH8120_OK && r != HIH8120_TWI_BUSY) {
			printf("temp-wake error: %d\n", r);
     4a2:	0f 2e       	mov	r0, r31
     4a4:	fd e5       	ldi	r31, 0x5D	; 93
     4a6:	ef 2e       	mov	r14, r31
     4a8:	f2 e0       	ldi	r31, 0x02	; 2
     4aa:	ff 2e       	mov	r15, r31
     4ac:	f0 2d       	mov	r31, r0
		}
		
		vTaskDelay(100 / portTICK_PERIOD_MS);
		r = hih8120Meassure();
		if(r != HIH8120_OK && r != HIH8120_TWI_BUSY) {
			printf("Temp-read error: %d\n", r);
     4ae:	02 e7       	ldi	r16, 0x72	; 114
     4b0:	12 e0       	ldi	r17, 0x02	; 2
		}
		vTaskDelay(100 / portTICK_PERIOD_MS);

		humidity = hih8120GetHumidity();
		temperature = hih8120GetTemperature();
		printf("Hum: %d  Temp: %d\n", humidity, temperature);
     4b2:	c7 e8       	ldi	r28, 0x87	; 135
     4b4:	d2 e0       	ldi	r29, 0x02	; 2
void tempSensorTask(void* pvParameters) {
	(void)pvParameters;
	
	//Do temperature measurement
	while(1) {
		vTaskDelay(1000 / portTICK_PERIOD_MS);
     4b6:	8e e3       	ldi	r24, 0x3E	; 62
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <vTaskDelay>
		
		int r = hih8120Wakeup();
     4be:	0e 94 1d 18 	call	0x303a	; 0x303a <hih8120Wakeup>
     4c2:	28 2f       	mov	r18, r24
     4c4:	30 e0       	ldi	r19, 0x00	; 0
		if(r != HIH8120_OK && r != HIH8120_TWI_BUSY) {
     4c6:	21 15       	cp	r18, r1
     4c8:	31 05       	cpc	r19, r1
     4ca:	69 f0       	breq	.+26     	; 0x4e6 <tempSensorTask+0x44>
     4cc:	23 30       	cpi	r18, 0x03	; 3
     4ce:	31 05       	cpc	r19, r1
     4d0:	51 f0       	breq	.+20     	; 0x4e6 <tempSensorTask+0x44>
			printf("temp-wake error: %d\n", r);
     4d2:	1f 92       	push	r1
     4d4:	8f 93       	push	r24
     4d6:	ff 92       	push	r15
     4d8:	ef 92       	push	r14
     4da:	0e 94 13 25 	call	0x4a26	; 0x4a26 <printf>
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
     4e2:	0f 90       	pop	r0
     4e4:	0f 90       	pop	r0
		}
		
		vTaskDelay(100 / portTICK_PERIOD_MS);
     4e6:	86 e0       	ldi	r24, 0x06	; 6
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <vTaskDelay>
		r = hih8120Meassure();
     4ee:	0e 94 32 18 	call	0x3064	; 0x3064 <hih8120Meassure>
     4f2:	28 2f       	mov	r18, r24
     4f4:	30 e0       	ldi	r19, 0x00	; 0
		if(r != HIH8120_OK && r != HIH8120_TWI_BUSY) {
     4f6:	21 15       	cp	r18, r1
     4f8:	31 05       	cpc	r19, r1
     4fa:	69 f0       	breq	.+26     	; 0x516 <tempSensorTask+0x74>
     4fc:	23 30       	cpi	r18, 0x03	; 3
     4fe:	31 05       	cpc	r19, r1
     500:	51 f0       	breq	.+20     	; 0x516 <tempSensorTask+0x74>
			printf("Temp-read error: %d\n", r);
     502:	1f 92       	push	r1
     504:	8f 93       	push	r24
     506:	1f 93       	push	r17
     508:	0f 93       	push	r16
     50a:	0e 94 13 25 	call	0x4a26	; 0x4a26 <printf>
     50e:	0f 90       	pop	r0
     510:	0f 90       	pop	r0
     512:	0f 90       	pop	r0
     514:	0f 90       	pop	r0
		}
		vTaskDelay(100 / portTICK_PERIOD_MS);
     516:	86 e0       	ldi	r24, 0x06	; 6
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <vTaskDelay>

		humidity = hih8120GetHumidity();
     51e:	0e 94 43 18 	call	0x3086	; 0x3086 <hih8120GetHumidity>
     522:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__fixsfsi>
     526:	70 93 31 0a 	sts	0x0A31, r23	; 0x800a31 <humidity+0x1>
     52a:	60 93 30 0a 	sts	0x0A30, r22	; 0x800a30 <humidity>
		temperature = hih8120GetTemperature();
     52e:	0e 94 58 18 	call	0x30b0	; 0x30b0 <hih8120GetTemperature>
     532:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__fixsfsi>
     536:	60 93 2a 0a 	sts	0x0A2A, r22	; 0x800a2a <temperature>
     53a:	70 93 2b 0a 	sts	0x0A2B, r23	; 0x800a2b <temperature+0x1>
		printf("Hum: %d  Temp: %d\n", humidity, temperature);
     53e:	7f 93       	push	r23
     540:	6f 93       	push	r22
     542:	80 91 31 0a 	lds	r24, 0x0A31	; 0x800a31 <humidity+0x1>
     546:	8f 93       	push	r24
     548:	80 91 30 0a 	lds	r24, 0x0A30	; 0x800a30 <humidity>
     54c:	8f 93       	push	r24
     54e:	df 93       	push	r29
     550:	cf 93       	push	r28
     552:	0e 94 13 25 	call	0x4a26	; 0x4a26 <printf>
	}
     556:	0f 90       	pop	r0
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	a9 cf       	rjmp	.-174    	; 0x4b6 <tempSensorTask+0x14>

00000564 <co2SensorTask>:
	while(1) {
		vTaskDelay(1000 / portTICK_PERIOD_MS);

		int r = mh_z19_take_meassuring();
		if(r != MHZ19_OK) {
			printf("CO2 sensor: %d", r);
     564:	ca e9       	ldi	r28, 0x9A	; 154
     566:	d2 e0       	ldi	r29, 0x02	; 2

void co2SensorTask(void *pvParamters) {
	(void)pvParamters;

	while(1) {
		vTaskDelay(1000 / portTICK_PERIOD_MS);
     568:	8e e3       	ldi	r24, 0x3E	; 62
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <vTaskDelay>

		int r = mh_z19_take_meassuring();
     570:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <mh_z19_take_meassuring>
     574:	90 e0       	ldi	r25, 0x00	; 0
		if(r != MHZ19_OK) {
     576:	00 97       	sbiw	r24, 0x00	; 0
     578:	b9 f3       	breq	.-18     	; 0x568 <co2SensorTask+0x4>
			printf("CO2 sensor: %d", r);
     57a:	9f 93       	push	r25
     57c:	8f 93       	push	r24
     57e:	df 93       	push	r29
     580:	cf 93       	push	r28
     582:	0e 94 13 25 	call	0x4a26	; 0x4a26 <printf>
     586:	0f 90       	pop	r0
     588:	0f 90       	pop	r0
     58a:	0f 90       	pop	r0
     58c:	0f 90       	pop	r0
     58e:	ec cf       	rjmp	.-40     	; 0x568 <co2SensorTask+0x4>

00000590 <lightSensorTask>:

	while(1) {
		vTaskDelay(1000 / portTICK_PERIOD_MS);
		int r = tsl2591FetchData();
		if(r != TSL2591_OK) {
			printf("Failed to fetch light data: %d\n", r);
     590:	c9 ea       	ldi	r28, 0xA9	; 169
     592:	d2 e0       	ldi	r29, 0x02	; 2

void lightSensorTask(void* pvParameters) {
	(void)pvParameters;

	while(1) {
		vTaskDelay(1000 / portTICK_PERIOD_MS);
     594:	8e e3       	ldi	r24, 0x3E	; 62
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <vTaskDelay>
		int r = tsl2591FetchData();
     59c:	0e 94 23 1f 	call	0x3e46	; 0x3e46 <tsl2591FetchData>
     5a0:	90 e0       	ldi	r25, 0x00	; 0
		if(r != TSL2591_OK) {
     5a2:	00 97       	sbiw	r24, 0x00	; 0
     5a4:	b9 f3       	breq	.-18     	; 0x594 <lightSensorTask+0x4>
			printf("Failed to fetch light data: %d\n", r);
     5a6:	9f 93       	push	r25
     5a8:	8f 93       	push	r24
     5aa:	df 93       	push	r29
     5ac:	cf 93       	push	r28
     5ae:	0e 94 13 25 	call	0x4a26	; 0x4a26 <printf>
     5b2:	0f 90       	pop	r0
     5b4:	0f 90       	pop	r0
     5b6:	0f 90       	pop	r0
     5b8:	0f 90       	pop	r0
     5ba:	ec cf       	rjmp	.-40     	; 0x594 <lightSensorTask+0x4>

000005bc <lightCallback>:
	}

	vTaskDelete(NULL);
}

void lightCallback(tsl2591ReturnCode_t rc) {
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	00 d0       	rcall	.+0      	; 0x5c2 <lightCallback+0x6>
     5c2:	1f 92       	push	r1
     5c4:	cd b7       	in	r28, 0x3d	; 61
     5c6:	de b7       	in	r29, 0x3e	; 62
	float measure;
	if(rc != TSL2591_DATA_READY) {
     5c8:	81 30       	cpi	r24, 0x01	; 1
     5ca:	29 f0       	breq	.+10     	; 0x5d6 <lightCallback+0x1a>
		printf("Light sensor not ready\n");
     5cc:	89 ec       	ldi	r24, 0xC9	; 201
     5ce:	92 e0       	ldi	r25, 0x02	; 2
     5d0:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <puts>
     5d4:	25 c0       	rjmp	.+74     	; 0x620 <lightCallback+0x64>
		return;
	}
	if(TSL2591_OK == tsl2591GetLux(&measure)) {
     5d6:	ce 01       	movw	r24, r28
     5d8:	01 96       	adiw	r24, 0x01	; 1
     5da:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <tsl2591GetLux>
     5de:	81 11       	cpse	r24, r1
     5e0:	1b c0       	rjmp	.+54     	; 0x618 <lightCallback+0x5c>
		light = measure;
     5e2:	69 81       	ldd	r22, Y+1	; 0x01
     5e4:	7a 81       	ldd	r23, Y+2	; 0x02
     5e6:	8b 81       	ldd	r24, Y+3	; 0x03
     5e8:	9c 81       	ldd	r25, Y+4	; 0x04
     5ea:	60 93 2c 0a 	sts	0x0A2C, r22	; 0x800a2c <light>
     5ee:	70 93 2d 0a 	sts	0x0A2D, r23	; 0x800a2d <light+0x1>
     5f2:	80 93 2e 0a 	sts	0x0A2E, r24	; 0x800a2e <light+0x2>
     5f6:	90 93 2f 0a 	sts	0x0A2F, r25	; 0x800a2f <light+0x3>
		printf("Light: %d\n", (uint16_t) measure);
     5fa:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__fixunssfsi>
     5fe:	7f 93       	push	r23
     600:	6f 93       	push	r22
     602:	80 ee       	ldi	r24, 0xE0	; 224
     604:	92 e0       	ldi	r25, 0x02	; 2
     606:	9f 93       	push	r25
     608:	8f 93       	push	r24
     60a:	0e 94 13 25 	call	0x4a26	; 0x4a26 <printf>
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
     612:	0f 90       	pop	r0
     614:	0f 90       	pop	r0
     616:	04 c0       	rjmp	.+8      	; 0x620 <lightCallback+0x64>
	}
	else {
		printf("Lux overflow\n");
     618:	8b ee       	ldi	r24, 0xEB	; 235
     61a:	92 e0       	ldi	r25, 0x02	; 2
     61c:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <puts>
	}
}
     620:	0f 90       	pop	r0
     622:	0f 90       	pop	r0
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	08 95       	ret

0000062e <_loRa_setup>:

//added:



void _loRa_setup(void){
     62e:	ef 92       	push	r14
     630:	ff 92       	push	r15
     632:	1f 93       	push	r17
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
	
	e_LoRa_return_code_t rc;
	
	
	//For factory reset.
	printf("FactoryRest >%s<\n", 
     638:	0e 94 cb 1a 	call	0x3596	; 0x3596 <lora_driver_rn2483_factory_reset>
     63c:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <lora_driver_map_return_code_to_text>
     640:	9f 93       	push	r25
     642:	8f 93       	push	r24
     644:	88 ef       	ldi	r24, 0xF8	; 248
     646:	92 e0       	ldi	r25, 0x02	; 2
     648:	9f 93       	push	r25
     64a:	8f 93       	push	r24
     64c:	0e 94 13 25 	call	0x4a26	; 0x4a26 <printf>
	lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
	
	//Configure to EU868 LoRaWAN standards.
	printf("Configure to EU868 >%s<\n", 
     650:	0e 94 14 1c 	call	0x3828	; 0x3828 <lora_driver_configure_to_eu868>
     654:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <lora_driver_map_return_code_to_text>
     658:	9f 93       	push	r25
     65a:	8f 93       	push	r24
     65c:	8a e0       	ldi	r24, 0x0A	; 10
     65e:	93 e0       	ldi	r25, 0x03	; 3
     660:	9f 93       	push	r25
     662:	8f 93       	push	r24
     664:	0e 94 13 25 	call	0x4a26	; 0x4a26 <printf>
	lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
	
	//Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buff);
     668:	84 ec       	ldi	r24, 0xC4	; 196
     66a:	99 e0       	ldi	r25, 0x09	; 9
     66c:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI: %s >%s< \n", lora_driver_map_return_code_to_text(rc), _out_buff );
     670:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <lora_driver_map_return_code_to_text>
     674:	c4 ec       	ldi	r28, 0xC4	; 196
     676:	d9 e0       	ldi	r29, 0x09	; 9
     678:	df 93       	push	r29
     67a:	cf 93       	push	r28
     67c:	9f 93       	push	r25
     67e:	8f 93       	push	r24
     680:	83 e2       	ldi	r24, 0x23	; 35
     682:	93 e0       	ldi	r25, 0x03	; 3
     684:	9f 93       	push	r25
     686:	8f 93       	push	r24
     688:	0e 94 13 25 	call	0x4a26	; 0x4a26 <printf>
	
	
	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buff, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buff)));
     68c:	ce 01       	movw	r24, r28
     68e:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <lora_driver_set_device_identifier>
     692:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <lora_driver_map_return_code_to_text>
     696:	9f 93       	push	r25
     698:	8f 93       	push	r24
     69a:	df 93       	push	r29
     69c:	cf 93       	push	r28
     69e:	88 e3       	ldi	r24, 0x38	; 56
     6a0:	93 e0       	ldi	r25, 0x03	; 3
     6a2:	9f 93       	push	r25
     6a4:	8f 93       	push	r24
     6a6:	0e 94 13 25 	call	0x4a26	; 0x4a26 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buff, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buff)));
     6aa:	ae 01       	movw	r20, r28
     6ac:	6d e4       	ldi	r22, 0x4D	; 77
     6ae:	73 e0       	ldi	r23, 0x03	; 3
     6b0:	8e e6       	ldi	r24, 0x6E	; 110
     6b2:	93 e0       	ldi	r25, 0x03	; 3
     6b4:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <lora_driver_set_otaa_identity>
     6b8:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <lora_driver_map_return_code_to_text>
     6bc:	9f 93       	push	r25
     6be:	8f 93       	push	r24
     6c0:	df 93       	push	r29
     6c2:	cf 93       	push	r28
     6c4:	8d e4       	ldi	r24, 0x4D	; 77
     6c6:	93 e0       	ldi	r25, 0x03	; 3
     6c8:	9f 93       	push	r25
     6ca:	8f 93       	push	r24
     6cc:	8e e6       	ldi	r24, 0x6E	; 110
     6ce:	93 e0       	ldi	r25, 0x03	; 3
     6d0:	9f 93       	push	r25
     6d2:	8f 93       	push	r24
     6d4:	8f e7       	ldi	r24, 0x7F	; 127
     6d6:	93 e0       	ldi	r25, 0x03	; 3
     6d8:	9f 93       	push	r25
     6da:	8f 93       	push	r24
     6dc:	0e 94 13 25 	call	0x4a26	; 0x4a26 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
     6e0:	0e 94 2c 1b 	call	0x3658	; 0x3658 <lora_driver_save_mac>
     6e4:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <lora_driver_map_return_code_to_text>
     6e8:	9f 93       	push	r25
     6ea:	8f 93       	push	r24
     6ec:	85 eb       	ldi	r24, 0xB5	; 181
     6ee:	93 e0       	ldi	r25, 0x03	; 3
     6f0:	9f 93       	push	r25
     6f2:	8f 93       	push	r24
     6f4:	0e 94 13 25 	call	0x4a26	; 0x4a26 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
     6f8:	8d b7       	in	r24, 0x3d	; 61
     6fa:	9e b7       	in	r25, 0x3e	; 62
     6fc:	82 96       	adiw	r24, 0x22	; 34
     6fe:	0f b6       	in	r0, 0x3f	; 63
     700:	f8 94       	cli
     702:	9e bf       	out	0x3e, r25	; 62
     704:	0f be       	out	0x3f, r0	; 63
     706:	8d bf       	out	0x3d, r24	; 61
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	0e 94 ed 1b 	call	0x37da	; 0x37da <lora_driver_set_adaptive_data_rate>
     70e:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <lora_driver_map_return_code_to_text>
     712:	9f 93       	push	r25
     714:	8f 93       	push	r24
     716:	84 ec       	ldi	r24, 0xC4	; 196
     718:	93 e0       	ldi	r25, 0x03	; 3
     71a:	9f 93       	push	r25
     71c:	8f 93       	push	r24
     71e:	0e 94 13 25 	call	0x4a26	; 0x4a26 <printf>
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	0f 90       	pop	r0
     728:	0f 90       	pop	r0
     72a:	c5 e0       	ldi	r28, 0x05	; 5
     72c:	d0 e0       	ldi	r29, 0x00	; 0

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 5;
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     72e:	0f 2e       	mov	r0, r31
     730:	f5 ee       	ldi	r31, 0xE5	; 229
     732:	ef 2e       	mov	r14, r31
     734:	f3 e0       	ldi	r31, 0x03	; 3
     736:	ff 2e       	mov	r15, r31
     738:	f0 2d       	mov	r31, r0
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 5;
	do {
		rc = lora_driver_join(LoRa_OTAA);
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	0e 94 32 1b 	call	0x3664	; 0x3664 <lora_driver_join>
     740:	18 2f       	mov	r17, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     742:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <lora_driver_map_return_code_to_text>
     746:	9f 93       	push	r25
     748:	8f 93       	push	r24
     74a:	df 93       	push	r29
     74c:	cf 93       	push	r28
     74e:	ff 92       	push	r15
     750:	ef 92       	push	r14
     752:	0e 94 13 25 	call	0x4a26	; 0x4a26 <printf>

		if ( rc != LoRa_ACCEPTED)
     756:	0f 90       	pop	r0
     758:	0f 90       	pop	r0
     75a:	0f 90       	pop	r0
     75c:	0f 90       	pop	r0
     75e:	0f 90       	pop	r0
     760:	0f 90       	pop	r0
     762:	18 30       	cpi	r17, 0x08	; 8
     764:	31 f0       	breq	.+12     	; 0x772 <_loRa_setup+0x144>
		{
			// Make the red led pulse to tell something went wrong
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     766:	8f e2       	ldi	r24, 0x2F	; 47
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <vTaskDelay>
     76e:	21 97       	sbiw	r28, 0x01	; 1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     770:	21 f7       	brne	.-56     	; 0x73a <_loRa_setup+0x10c>

}
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	1f 91       	pop	r17
     778:	ff 90       	pop	r15
     77a:	ef 90       	pop	r14
     77c:	08 95       	ret

0000077e <loRaWanTask>:

void loRaWanTask(void* pvParamters){
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
     782:	cd b7       	in	r28, 0x3d	; 61
     784:	de b7       	in	r29, 0x3e	; 62
     786:	66 97       	sbiw	r28, 0x16	; 22
     788:	0f b6       	in	r0, 0x3f	; 63
     78a:	f8 94       	cli
     78c:	de bf       	out	0x3e, r29	; 62
     78e:	0f be       	out	0x3f, r0	; 63
     790:	cd bf       	out	0x3d, r28	; 61

	//for resetting the LoRaWAN hardware.
	lora_driver_reset_rn2483(1);
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	0e 94 b7 1a 	call	0x356e	; 0x356e <lora_driver_reset_rn2483>
	vTaskDelay(2);
     798:	82 e0       	ldi	r24, 0x02	; 2
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <vTaskDelay>
	lora_driver_reset_rn2483(0);
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	0e 94 b7 1a 	call	0x356e	; 0x356e <lora_driver_reset_rn2483>
	vTaskDelay(150);
     7a6:	86 e9       	ldi	r24, 0x96	; 150
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <vTaskDelay>
	lora_driver_flush_buffers();
     7ae:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <lora_driver_flush_buffers>
	
	_loRa_setup();
     7b2:	3d df       	rcall	.-390    	; 0x62e <_loRa_setup>
	vTaskDelay(pdMS_TO_TICKS(200UL));
     7b4:	8c e0       	ldi	r24, 0x0C	; 12
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <vTaskDelay>
	
	lora_payload_t _uplink_payload;
	
	_uplink_payload.len = 6;
     7bc:	86 e0       	ldi	r24, 0x06	; 6
     7be:	8a 83       	std	Y+2, r24	; 0x02
	_uplink_payload.port_no = 5;
     7c0:	85 e0       	ldi	r24, 0x05	; 5
     7c2:	89 83       	std	Y+1, r24	; 0x01
	
	while(1){
		
		vTaskDelay(pdMS_TO_TICKS(5000UL));
		
		_uplink_payload.bytes[0] = humidity;
     7c4:	0f 2e       	mov	r0, r31
     7c6:	f0 e3       	ldi	r31, 0x30	; 48
     7c8:	af 2e       	mov	r10, r31
     7ca:	fa e0       	ldi	r31, 0x0A	; 10
     7cc:	bf 2e       	mov	r11, r31
     7ce:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[1] = temperature;
     7d0:	0f 2e       	mov	r0, r31
     7d2:	fa e2       	ldi	r31, 0x2A	; 42
     7d4:	cf 2e       	mov	r12, r31
     7d6:	fa e0       	ldi	r31, 0x0A	; 10
     7d8:	df 2e       	mov	r13, r31
     7da:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[2] = co2 >> 8;
		_uplink_payload.bytes[3] = co2 & 0xFF;
		_uplink_payload.bytes[4] = light;
		_uplink_payload.bytes[5] = water;
     7dc:	0f 2e       	mov	r0, r31
     7de:	f2 ec       	ldi	r31, 0xC2	; 194
     7e0:	ef 2e       	mov	r14, r31
     7e2:	f9 e0       	ldi	r31, 0x09	; 9
     7e4:	ff 2e       	mov	r15, r31
     7e6:	f0 2d       	mov	r31, r0
		
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
     7e8:	05 e0       	ldi	r16, 0x05	; 5
     7ea:	14 e0       	ldi	r17, 0x04	; 4
	_uplink_payload.port_no = 5;
	
	
	while(1){
		
		vTaskDelay(pdMS_TO_TICKS(5000UL));
     7ec:	8f e2       	ldi	r24, 0x2F	; 47
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <vTaskDelay>
		
		_uplink_payload.bytes[0] = humidity;
     7f4:	f5 01       	movw	r30, r10
     7f6:	80 81       	ld	r24, Z
     7f8:	8b 83       	std	Y+3, r24	; 0x03
		_uplink_payload.bytes[1] = temperature;
     7fa:	f6 01       	movw	r30, r12
     7fc:	80 81       	ld	r24, Z
     7fe:	8c 83       	std	Y+4, r24	; 0x04
		_uplink_payload.bytes[2] = co2 >> 8;
     800:	80 91 28 0a 	lds	r24, 0x0A28	; 0x800a28 <co2>
     804:	90 91 29 0a 	lds	r25, 0x0A29	; 0x800a29 <co2+0x1>
     808:	9d 83       	std	Y+5, r25	; 0x05
		_uplink_payload.bytes[3] = co2 & 0xFF;
     80a:	8e 83       	std	Y+6, r24	; 0x06
		_uplink_payload.bytes[4] = light;
     80c:	60 91 2c 0a 	lds	r22, 0x0A2C	; 0x800a2c <light>
     810:	70 91 2d 0a 	lds	r23, 0x0A2D	; 0x800a2d <light+0x1>
     814:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <light+0x2>
     818:	90 91 2f 0a 	lds	r25, 0x0A2F	; 0x800a2f <light+0x3>
     81c:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__fixunssfsi>
     820:	6f 83       	std	Y+7, r22	; 0x07
		_uplink_payload.bytes[5] = water;
     822:	f7 01       	movw	r30, r14
     824:	80 81       	ld	r24, Z
     826:	88 87       	std	Y+8, r24	; 0x08
		
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
     828:	be 01       	movw	r22, r28
     82a:	6f 5f       	subi	r22, 0xFF	; 255
     82c:	7f 4f       	sbci	r23, 0xFF	; 255
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	0e 94 55 1b 	call	0x36aa	; 0x36aa <lora_driver_sent_upload_message>
     834:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <lora_driver_map_return_code_to_text>
     838:	9f 93       	push	r25
     83a:	8f 93       	push	r24
     83c:	1f 93       	push	r17
     83e:	0f 93       	push	r16
     840:	0e 94 13 25 	call	0x4a26	; 0x4a26 <printf>
     844:	0f 90       	pop	r0
     846:	0f 90       	pop	r0
     848:	0f 90       	pop	r0
     84a:	0f 90       	pop	r0
     84c:	cf cf       	rjmp	.-98     	; 0x7ec <loRaWanTask+0x6e>

0000084e <main>:
	vTaskDelete(NULL);
}
	
//

int main() {
     84e:	ef 92       	push	r14
     850:	ff 92       	push	r15
     852:	0f 93       	push	r16
	
	hal_create(LED_TASK_PRIORITY);
     854:	83 e0       	ldi	r24, 0x03	; 3
     856:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <hal_create>
	lora_driver_create(ser_USART1);
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <lora_driver_create>
	stdioCreate(0);
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	0e 94 d6 13 	call	0x27ac	; 0x27ac <stdioCreate>
	sei();
     866:	78 94       	sei

	
	xTaskCreate(tempSensorTask, "Temperature measurement", configMINIMAL_STACK_SIZE, NULL, TEMP_TASK_PRIORITY, &tempSensorHandle);
     868:	0f 2e       	mov	r0, r31
     86a:	f8 ed       	ldi	r31, 0xD8	; 216
     86c:	ef 2e       	mov	r14, r31
     86e:	f7 e0       	ldi	r31, 0x07	; 7
     870:	ff 2e       	mov	r15, r31
     872:	f0 2d       	mov	r31, r0
     874:	01 e0       	ldi	r16, 0x01	; 1
     876:	20 e0       	ldi	r18, 0x00	; 0
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	40 ec       	ldi	r20, 0xC0	; 192
     87c:	50 e0       	ldi	r21, 0x00	; 0
     87e:	6a e1       	ldi	r22, 0x1A	; 26
     880:	74 e0       	ldi	r23, 0x04	; 4
     882:	81 e5       	ldi	r24, 0x51	; 81
     884:	92 e0       	ldi	r25, 0x02	; 2
     886:	fd d7       	rcall	.+4090   	; 0x1882 <xTaskCreate>
	xTaskCreate(co2SensorTask, "CO2 measurement", configMINIMAL_STACK_SIZE, NULL, CO2_TASK_PRIORITY, &co2SensorHandle);
     888:	0f 2e       	mov	r0, r31
     88a:	f6 ed       	ldi	r31, 0xD6	; 214
     88c:	ef 2e       	mov	r14, r31
     88e:	f7 e0       	ldi	r31, 0x07	; 7
     890:	ff 2e       	mov	r15, r31
     892:	f0 2d       	mov	r31, r0
     894:	20 e0       	ldi	r18, 0x00	; 0
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	40 ec       	ldi	r20, 0xC0	; 192
     89a:	50 e0       	ldi	r21, 0x00	; 0
     89c:	62 e3       	ldi	r22, 0x32	; 50
     89e:	74 e0       	ldi	r23, 0x04	; 4
     8a0:	82 eb       	ldi	r24, 0xB2	; 178
     8a2:	92 e0       	ldi	r25, 0x02	; 2
     8a4:	ee d7       	rcall	.+4060   	; 0x1882 <xTaskCreate>
	xTaskCreate(lightSensorTask, "Light measurement", configMINIMAL_STACK_SIZE, NULL, LIGHT_TASK_PRIORITY, &lightSensorHandle);
     8a6:	0f 2e       	mov	r0, r31
     8a8:	f4 ed       	ldi	r31, 0xD4	; 212
     8aa:	ef 2e       	mov	r14, r31
     8ac:	f7 e0       	ldi	r31, 0x07	; 7
     8ae:	ff 2e       	mov	r15, r31
     8b0:	f0 2d       	mov	r31, r0
     8b2:	20 e0       	ldi	r18, 0x00	; 0
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	40 ec       	ldi	r20, 0xC0	; 192
     8b8:	50 e0       	ldi	r21, 0x00	; 0
     8ba:	62 e4       	ldi	r22, 0x42	; 66
     8bc:	74 e0       	ldi	r23, 0x04	; 4
     8be:	88 ec       	ldi	r24, 0xC8	; 200
     8c0:	92 e0       	ldi	r25, 0x02	; 2
     8c2:	df d7       	rcall	.+4030   	; 0x1882 <xTaskCreate>
	xTaskCreate(waterTask, "Water servo", configMINIMAL_STACK_SIZE, NULL, WATER_TASK_PRIORITY, &WaterHandle);
     8c4:	0f 2e       	mov	r0, r31
     8c6:	f2 ed       	ldi	r31, 0xD2	; 210
     8c8:	ef 2e       	mov	r14, r31
     8ca:	f7 e0       	ldi	r31, 0x07	; 7
     8cc:	ff 2e       	mov	r15, r31
     8ce:	f0 2d       	mov	r31, r0
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	40 ec       	ldi	r20, 0xC0	; 192
     8d6:	50 e0       	ldi	r21, 0x00	; 0
     8d8:	64 e5       	ldi	r22, 0x54	; 84
     8da:	74 e0       	ldi	r23, 0x04	; 4
     8dc:	88 e2       	ldi	r24, 0x28	; 40
     8de:	92 e0       	ldi	r25, 0x02	; 2
     8e0:	d0 d7       	rcall	.+4000   	; 0x1882 <xTaskCreate>
	
	//added:
	xTaskCreate(loRaWanTask, "Led", configMINIMAL_STACK_SIZE, NULL,LED_TASK_PRIORITY, &loRaWanHandle);
     8e2:	0f 2e       	mov	r0, r31
     8e4:	f0 ed       	ldi	r31, 0xD0	; 208
     8e6:	ef 2e       	mov	r14, r31
     8e8:	f7 e0       	ldi	r31, 0x07	; 7
     8ea:	ff 2e       	mov	r15, r31
     8ec:	f0 2d       	mov	r31, r0
     8ee:	03 e0       	ldi	r16, 0x03	; 3
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	40 ec       	ldi	r20, 0xC0	; 192
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	60 e6       	ldi	r22, 0x60	; 96
     8fa:	74 e0       	ldi	r23, 0x04	; 4
     8fc:	8f eb       	ldi	r24, 0xBF	; 191
     8fe:	93 e0       	ldi	r25, 0x03	; 3
     900:	c0 d7       	rcall	.+3968   	; 0x1882 <xTaskCreate>
	//
	stdioCreate(0);
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	0e 94 d6 13 	call	0x27ac	; 0x27ac <stdioCreate>
	sei();
     908:	78 94       	sei
	//setup temperature/humidity sensor
	if(HIH8120_OK != hih8120Create()) {
     90a:	0e 94 05 18 	call	0x300a	; 0x300a <hih8120Create>
     90e:	81 11       	cpse	r24, r1
     910:	2a c0       	rjmp	.+84     	; 0x966 <main+0x118>
		printf("Failed to initialize temperature sensor\n");
		return 1;
	}

	//setup co2 sensor
	mh_z19_create(ser_USART3, co2Callback);
     912:	60 e4       	ldi	r22, 0x40	; 64
     914:	72 e0       	ldi	r23, 0x02	; 2
     916:	83 e0       	ldi	r24, 0x03	; 3
     918:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <mh_z19_create>

	//setup light sensor
	int r = tsl2591Create(lightCallback);
     91c:	8e ed       	ldi	r24, 0xDE	; 222
     91e:	92 e0       	ldi	r25, 0x02	; 2
     920:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <tsl2591Create>
	if(r != TSL2591_OK) {
     924:	88 23       	and	r24, r24
     926:	61 f0       	breq	.+24     	; 0x940 <main+0xf2>
		printf("Failed to initialize light sensor: %d\n", r);
     928:	1f 92       	push	r1
     92a:	8f 93       	push	r24
     92c:	8c e8       	ldi	r24, 0x8C	; 140
     92e:	94 e0       	ldi	r25, 0x04	; 4
     930:	9f 93       	push	r25
     932:	8f 93       	push	r24
     934:	0e 94 13 25 	call	0x4a26	; 0x4a26 <printf>
     938:	0f 90       	pop	r0
     93a:	0f 90       	pop	r0
     93c:	0f 90       	pop	r0
     93e:	0f 90       	pop	r0
	}

	r = tsl2591Enable();
     940:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <tsl2591Enable>
	if(r != TSL2591_OK) {
     944:	88 23       	and	r24, r24
     946:	61 f0       	breq	.+24     	; 0x960 <main+0x112>
		printf("Failed to enable light sensor %d\n", r);
     948:	1f 92       	push	r1
     94a:	8f 93       	push	r24
     94c:	83 eb       	ldi	r24, 0xB3	; 179
     94e:	94 e0       	ldi	r25, 0x04	; 4
     950:	9f 93       	push	r25
     952:	8f 93       	push	r24
     954:	0e 94 13 25 	call	0x4a26	; 0x4a26 <printf>
     958:	0f 90       	pop	r0
     95a:	0f 90       	pop	r0
     95c:	0f 90       	pop	r0
     95e:	0f 90       	pop	r0
	}
	
	vTaskStartScheduler();
     960:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <vTaskStartScheduler>
     964:	ff cf       	rjmp	.-2      	; 0x964 <main+0x116>
	//
	stdioCreate(0);
	sei();
	//setup temperature/humidity sensor
	if(HIH8120_OK != hih8120Create()) {
		printf("Failed to initialize temperature sensor\n");
     966:	84 e6       	ldi	r24, 0x64	; 100
     968:	94 e0       	ldi	r25, 0x04	; 4
     96a:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <puts>
	vTaskStartScheduler();
	
	while(1) {
		;
	}
}
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	0f 91       	pop	r16
     974:	ff 90       	pop	r15
     976:	ef 90       	pop	r14
     978:	08 95       	ret

0000097a <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     97a:	e8 e0       	ldi	r30, 0x08	; 8
     97c:	f1 e0       	ldi	r31, 0x01	; 1
     97e:	90 81       	ld	r25, Z
     980:	90 7f       	andi	r25, 0xF0	; 240
     982:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     984:	90 81       	ld	r25, Z
     986:	8f 70       	andi	r24, 0x0F	; 15
     988:	98 2b       	or	r25, r24
     98a:	90 83       	st	Z, r25
     98c:	08 95       	ret

0000098e <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     98e:	e8 e0       	ldi	r30, 0x08	; 8
     990:	f1 e0       	ldi	r31, 0x01	; 1
     992:	80 81       	ld	r24, Z
     994:	80 7f       	andi	r24, 0xF0	; 240
     996:	80 83       	st	Z, r24
     998:	08 95       	ret

0000099a <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
     99e:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
     9a0:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     9a4:	ce 01       	movw	r24, r28
     9a6:	0e 94 b4 23 	call	0x4768	; 0x4768 <malloc>
     9aa:	ec 01       	movw	r28, r24
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     9ac:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
     9b0:	20 97       	sbiw	r28, 0x00	; 0
     9b2:	11 f4       	brne	.+4      	; 0x9b8 <pvPortMalloc+0x1e>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
     9b4:	0e 94 44 13 	call	0x2688	; 0x2688 <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
     9b8:	ce 01       	movw	r24, r28
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	08 95       	ret

000009c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
    if( pv )
     9c4:	00 97       	sbiw	r24, 0x00	; 0
     9c6:	41 f0       	breq	.+16     	; 0x9d8 <vPortFree+0x18>
     9c8:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
     9ca:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <vTaskSuspendAll>
        {
            free( pv );
     9ce:	ce 01       	movw	r24, r28
     9d0:	0e 94 4c 24 	call	0x4898	; 0x4898 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
     9d4:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <xTaskResumeAll>
    }
}
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	08 95       	ret

000009de <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     9de:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     9e0:	03 96       	adiw	r24, 0x03	; 3
     9e2:	92 83       	std	Z+2, r25	; 0x02
     9e4:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     9e6:	2f ef       	ldi	r18, 0xFF	; 255
     9e8:	3f ef       	ldi	r19, 0xFF	; 255
     9ea:	34 83       	std	Z+4, r19	; 0x04
     9ec:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     9ee:	96 83       	std	Z+6, r25	; 0x06
     9f0:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     9f2:	90 87       	std	Z+8, r25	; 0x08
     9f4:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     9f6:	10 82       	st	Z, r1
     9f8:	08 95       	ret

000009fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     9fa:	fc 01       	movw	r30, r24
     9fc:	11 86       	std	Z+9, r1	; 0x09
     9fe:	10 86       	std	Z+8, r1	; 0x08
     a00:	08 95       	ret

00000a02 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	9c 01       	movw	r18, r24
     a08:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     a0a:	dc 01       	movw	r26, r24
     a0c:	11 96       	adiw	r26, 0x01	; 1
     a0e:	cd 91       	ld	r28, X+
     a10:	dc 91       	ld	r29, X
     a12:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     a14:	d3 83       	std	Z+3, r29	; 0x03
     a16:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     a18:	8c 81       	ldd	r24, Y+4	; 0x04
     a1a:	9d 81       	ldd	r25, Y+5	; 0x05
     a1c:	95 83       	std	Z+5, r25	; 0x05
     a1e:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     a20:	8c 81       	ldd	r24, Y+4	; 0x04
     a22:	9d 81       	ldd	r25, Y+5	; 0x05
     a24:	dc 01       	movw	r26, r24
     a26:	13 96       	adiw	r26, 0x03	; 3
     a28:	7c 93       	st	X, r23
     a2a:	6e 93       	st	-X, r22
     a2c:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     a2e:	7d 83       	std	Y+5, r23	; 0x05
     a30:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     a32:	31 87       	std	Z+9, r19	; 0x09
     a34:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     a36:	f9 01       	movw	r30, r18
     a38:	80 81       	ld	r24, Z
     a3a:	8f 5f       	subi	r24, 0xFF	; 255
     a3c:	80 83       	st	Z, r24
}
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	08 95       	ret

00000a44 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     a44:	cf 93       	push	r28
     a46:	df 93       	push	r29
     a48:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     a4a:	48 81       	ld	r20, Y
     a4c:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     a4e:	4f 3f       	cpi	r20, 0xFF	; 255
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	52 07       	cpc	r21, r18
     a54:	21 f4       	brne	.+8      	; 0xa5e <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     a56:	fc 01       	movw	r30, r24
     a58:	a7 81       	ldd	r26, Z+7	; 0x07
     a5a:	b0 85       	ldd	r27, Z+8	; 0x08
     a5c:	0d c0       	rjmp	.+26     	; 0xa78 <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     a5e:	dc 01       	movw	r26, r24
     a60:	13 96       	adiw	r26, 0x03	; 3
     a62:	01 c0       	rjmp	.+2      	; 0xa66 <vListInsert+0x22>
     a64:	df 01       	movw	r26, r30
     a66:	12 96       	adiw	r26, 0x02	; 2
     a68:	ed 91       	ld	r30, X+
     a6a:	fc 91       	ld	r31, X
     a6c:	13 97       	sbiw	r26, 0x03	; 3
     a6e:	20 81       	ld	r18, Z
     a70:	31 81       	ldd	r19, Z+1	; 0x01
     a72:	42 17       	cp	r20, r18
     a74:	53 07       	cpc	r21, r19
     a76:	b0 f7       	brcc	.-20     	; 0xa64 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     a78:	12 96       	adiw	r26, 0x02	; 2
     a7a:	ed 91       	ld	r30, X+
     a7c:	fc 91       	ld	r31, X
     a7e:	13 97       	sbiw	r26, 0x03	; 3
     a80:	fb 83       	std	Y+3, r31	; 0x03
     a82:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     a84:	d5 83       	std	Z+5, r29	; 0x05
     a86:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     a88:	bd 83       	std	Y+5, r27	; 0x05
     a8a:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     a8c:	13 96       	adiw	r26, 0x03	; 3
     a8e:	dc 93       	st	X, r29
     a90:	ce 93       	st	-X, r28
     a92:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     a94:	99 87       	std	Y+9, r25	; 0x09
     a96:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     a98:	fc 01       	movw	r30, r24
     a9a:	20 81       	ld	r18, Z
     a9c:	2f 5f       	subi	r18, 0xFF	; 255
     a9e:	20 83       	st	Z, r18
}
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	08 95       	ret

00000aa6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     aac:	a0 85       	ldd	r26, Z+8	; 0x08
     aae:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     ab0:	c2 81       	ldd	r28, Z+2	; 0x02
     ab2:	d3 81       	ldd	r29, Z+3	; 0x03
     ab4:	84 81       	ldd	r24, Z+4	; 0x04
     ab6:	95 81       	ldd	r25, Z+5	; 0x05
     ab8:	9d 83       	std	Y+5, r25	; 0x05
     aba:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     abc:	c4 81       	ldd	r28, Z+4	; 0x04
     abe:	d5 81       	ldd	r29, Z+5	; 0x05
     ac0:	82 81       	ldd	r24, Z+2	; 0x02
     ac2:	93 81       	ldd	r25, Z+3	; 0x03
     ac4:	9b 83       	std	Y+3, r25	; 0x03
     ac6:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     ac8:	11 96       	adiw	r26, 0x01	; 1
     aca:	8d 91       	ld	r24, X+
     acc:	9c 91       	ld	r25, X
     ace:	12 97       	sbiw	r26, 0x02	; 2
     ad0:	e8 17       	cp	r30, r24
     ad2:	f9 07       	cpc	r31, r25
     ad4:	31 f4       	brne	.+12     	; 0xae2 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     ad6:	84 81       	ldd	r24, Z+4	; 0x04
     ad8:	95 81       	ldd	r25, Z+5	; 0x05
     ada:	12 96       	adiw	r26, 0x02	; 2
     adc:	9c 93       	st	X, r25
     ade:	8e 93       	st	-X, r24
     ae0:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     ae2:	11 86       	std	Z+9, r1	; 0x09
     ae4:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     ae6:	8c 91       	ld	r24, X
     ae8:	81 50       	subi	r24, 0x01	; 1
     aea:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     aec:	8c 91       	ld	r24, X
}
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	08 95       	ret

00000af4 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     af4:	31 e1       	ldi	r19, 0x11	; 17
     af6:	fc 01       	movw	r30, r24
     af8:	30 83       	st	Z, r19
     afa:	31 97       	sbiw	r30, 0x01	; 1
     afc:	22 e2       	ldi	r18, 0x22	; 34
     afe:	20 83       	st	Z, r18
     b00:	31 97       	sbiw	r30, 0x01	; 1
     b02:	a3 e3       	ldi	r26, 0x33	; 51
     b04:	a0 83       	st	Z, r26
     b06:	31 97       	sbiw	r30, 0x01	; 1
     b08:	60 83       	st	Z, r22
     b0a:	31 97       	sbiw	r30, 0x01	; 1
     b0c:	70 83       	st	Z, r23
     b0e:	31 97       	sbiw	r30, 0x01	; 1
     b10:	10 82       	st	Z, r1
     b12:	31 97       	sbiw	r30, 0x01	; 1
     b14:	10 82       	st	Z, r1
     b16:	31 97       	sbiw	r30, 0x01	; 1
     b18:	60 e8       	ldi	r22, 0x80	; 128
     b1a:	60 83       	st	Z, r22
     b1c:	31 97       	sbiw	r30, 0x01	; 1
     b1e:	10 82       	st	Z, r1
     b20:	31 97       	sbiw	r30, 0x01	; 1
     b22:	10 82       	st	Z, r1
     b24:	31 97       	sbiw	r30, 0x01	; 1
     b26:	10 82       	st	Z, r1
     b28:	31 97       	sbiw	r30, 0x01	; 1
     b2a:	62 e0       	ldi	r22, 0x02	; 2
     b2c:	60 83       	st	Z, r22
     b2e:	31 97       	sbiw	r30, 0x01	; 1
     b30:	63 e0       	ldi	r22, 0x03	; 3
     b32:	60 83       	st	Z, r22
     b34:	31 97       	sbiw	r30, 0x01	; 1
     b36:	64 e0       	ldi	r22, 0x04	; 4
     b38:	60 83       	st	Z, r22
     b3a:	31 97       	sbiw	r30, 0x01	; 1
     b3c:	65 e0       	ldi	r22, 0x05	; 5
     b3e:	60 83       	st	Z, r22
     b40:	31 97       	sbiw	r30, 0x01	; 1
     b42:	66 e0       	ldi	r22, 0x06	; 6
     b44:	60 83       	st	Z, r22
     b46:	31 97       	sbiw	r30, 0x01	; 1
     b48:	67 e0       	ldi	r22, 0x07	; 7
     b4a:	60 83       	st	Z, r22
     b4c:	31 97       	sbiw	r30, 0x01	; 1
     b4e:	68 e0       	ldi	r22, 0x08	; 8
     b50:	60 83       	st	Z, r22
     b52:	31 97       	sbiw	r30, 0x01	; 1
     b54:	69 e0       	ldi	r22, 0x09	; 9
     b56:	60 83       	st	Z, r22
     b58:	31 97       	sbiw	r30, 0x01	; 1
     b5a:	60 e1       	ldi	r22, 0x10	; 16
     b5c:	60 83       	st	Z, r22
     b5e:	31 97       	sbiw	r30, 0x01	; 1
     b60:	30 83       	st	Z, r19
     b62:	31 97       	sbiw	r30, 0x01	; 1
     b64:	32 e1       	ldi	r19, 0x12	; 18
     b66:	30 83       	st	Z, r19
     b68:	31 97       	sbiw	r30, 0x01	; 1
     b6a:	33 e1       	ldi	r19, 0x13	; 19
     b6c:	30 83       	st	Z, r19
     b6e:	31 97       	sbiw	r30, 0x01	; 1
     b70:	34 e1       	ldi	r19, 0x14	; 20
     b72:	30 83       	st	Z, r19
     b74:	31 97       	sbiw	r30, 0x01	; 1
     b76:	35 e1       	ldi	r19, 0x15	; 21
     b78:	30 83       	st	Z, r19
     b7a:	31 97       	sbiw	r30, 0x01	; 1
     b7c:	36 e1       	ldi	r19, 0x16	; 22
     b7e:	30 83       	st	Z, r19
     b80:	31 97       	sbiw	r30, 0x01	; 1
     b82:	37 e1       	ldi	r19, 0x17	; 23
     b84:	30 83       	st	Z, r19
     b86:	31 97       	sbiw	r30, 0x01	; 1
     b88:	38 e1       	ldi	r19, 0x18	; 24
     b8a:	30 83       	st	Z, r19
     b8c:	31 97       	sbiw	r30, 0x01	; 1
     b8e:	39 e1       	ldi	r19, 0x19	; 25
     b90:	30 83       	st	Z, r19
     b92:	31 97       	sbiw	r30, 0x01	; 1
     b94:	30 e2       	ldi	r19, 0x20	; 32
     b96:	30 83       	st	Z, r19
     b98:	31 97       	sbiw	r30, 0x01	; 1
     b9a:	31 e2       	ldi	r19, 0x21	; 33
     b9c:	30 83       	st	Z, r19
     b9e:	31 97       	sbiw	r30, 0x01	; 1
     ba0:	20 83       	st	Z, r18
     ba2:	31 97       	sbiw	r30, 0x01	; 1
     ba4:	23 e2       	ldi	r18, 0x23	; 35
     ba6:	20 83       	st	Z, r18
     ba8:	31 97       	sbiw	r30, 0x01	; 1
     baa:	40 83       	st	Z, r20
     bac:	31 97       	sbiw	r30, 0x01	; 1
     bae:	50 83       	st	Z, r21
     bb0:	31 97       	sbiw	r30, 0x01	; 1
     bb2:	26 e2       	ldi	r18, 0x26	; 38
     bb4:	20 83       	st	Z, r18
     bb6:	31 97       	sbiw	r30, 0x01	; 1
     bb8:	27 e2       	ldi	r18, 0x27	; 39
     bba:	20 83       	st	Z, r18
     bbc:	31 97       	sbiw	r30, 0x01	; 1
     bbe:	28 e2       	ldi	r18, 0x28	; 40
     bc0:	20 83       	st	Z, r18
     bc2:	31 97       	sbiw	r30, 0x01	; 1
     bc4:	29 e2       	ldi	r18, 0x29	; 41
     bc6:	20 83       	st	Z, r18
     bc8:	31 97       	sbiw	r30, 0x01	; 1
     bca:	20 e3       	ldi	r18, 0x30	; 48
     bcc:	20 83       	st	Z, r18
     bce:	31 97       	sbiw	r30, 0x01	; 1
     bd0:	21 e3       	ldi	r18, 0x31	; 49
     bd2:	20 83       	st	Z, r18
     bd4:	89 97       	sbiw	r24, 0x29	; 41
     bd6:	08 95       	ret

00000bd8 <xPortStartScheduler>:
     bd8:	a8 95       	wdr
     bda:	90 ec       	ldi	r25, 0xC0	; 192
     bdc:	88 e1       	ldi	r24, 0x18	; 24
     bde:	0f b6       	in	r0, 0x3f	; 63
     be0:	f8 94       	cli
     be2:	a8 95       	wdr
     be4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     bee:	a0 91 3e 08 	lds	r26, 0x083E	; 0x80083e <pxCurrentTCB>
     bf2:	b0 91 3f 08 	lds	r27, 0x083F	; 0x80083f <pxCurrentTCB+0x1>
     bf6:	cd 91       	ld	r28, X+
     bf8:	cd bf       	out	0x3d, r28	; 61
     bfa:	dd 91       	ld	r29, X+
     bfc:	de bf       	out	0x3e, r29	; 62
     bfe:	ff 91       	pop	r31
     c00:	ef 91       	pop	r30
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	bf 91       	pop	r27
     c08:	af 91       	pop	r26
     c0a:	9f 91       	pop	r25
     c0c:	8f 91       	pop	r24
     c0e:	7f 91       	pop	r23
     c10:	6f 91       	pop	r22
     c12:	5f 91       	pop	r21
     c14:	4f 91       	pop	r20
     c16:	3f 91       	pop	r19
     c18:	2f 91       	pop	r18
     c1a:	1f 91       	pop	r17
     c1c:	0f 91       	pop	r16
     c1e:	ff 90       	pop	r15
     c20:	ef 90       	pop	r14
     c22:	df 90       	pop	r13
     c24:	cf 90       	pop	r12
     c26:	bf 90       	pop	r11
     c28:	af 90       	pop	r10
     c2a:	9f 90       	pop	r9
     c2c:	8f 90       	pop	r8
     c2e:	7f 90       	pop	r7
     c30:	6f 90       	pop	r6
     c32:	5f 90       	pop	r5
     c34:	4f 90       	pop	r4
     c36:	3f 90       	pop	r3
     c38:	2f 90       	pop	r2
     c3a:	1f 90       	pop	r1
     c3c:	0f 90       	pop	r0
     c3e:	0c be       	out	0x3c, r0	; 60
     c40:	0f 90       	pop	r0
     c42:	0b be       	out	0x3b, r0	; 59
     c44:	0f 90       	pop	r0
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	0f 90       	pop	r0
     c4a:	08 95       	ret
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	08 95       	ret

00000c50 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     c50:	0f 92       	push	r0
     c52:	0f b6       	in	r0, 0x3f	; 63
     c54:	f8 94       	cli
     c56:	0f 92       	push	r0
     c58:	0b b6       	in	r0, 0x3b	; 59
     c5a:	0f 92       	push	r0
     c5c:	0c b6       	in	r0, 0x3c	; 60
     c5e:	0f 92       	push	r0
     c60:	1f 92       	push	r1
     c62:	11 24       	eor	r1, r1
     c64:	2f 92       	push	r2
     c66:	3f 92       	push	r3
     c68:	4f 92       	push	r4
     c6a:	5f 92       	push	r5
     c6c:	6f 92       	push	r6
     c6e:	7f 92       	push	r7
     c70:	8f 92       	push	r8
     c72:	9f 92       	push	r9
     c74:	af 92       	push	r10
     c76:	bf 92       	push	r11
     c78:	cf 92       	push	r12
     c7a:	df 92       	push	r13
     c7c:	ef 92       	push	r14
     c7e:	ff 92       	push	r15
     c80:	0f 93       	push	r16
     c82:	1f 93       	push	r17
     c84:	2f 93       	push	r18
     c86:	3f 93       	push	r19
     c88:	4f 93       	push	r20
     c8a:	5f 93       	push	r21
     c8c:	6f 93       	push	r22
     c8e:	7f 93       	push	r23
     c90:	8f 93       	push	r24
     c92:	9f 93       	push	r25
     c94:	af 93       	push	r26
     c96:	bf 93       	push	r27
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
     c9c:	ef 93       	push	r30
     c9e:	ff 93       	push	r31
     ca0:	a0 91 3e 08 	lds	r26, 0x083E	; 0x80083e <pxCurrentTCB>
     ca4:	b0 91 3f 08 	lds	r27, 0x083F	; 0x80083f <pxCurrentTCB+0x1>
     ca8:	0d b6       	in	r0, 0x3d	; 61
     caa:	0d 92       	st	X+, r0
     cac:	0e b6       	in	r0, 0x3e	; 62
     cae:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     cb0:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     cb4:	a0 91 3e 08 	lds	r26, 0x083E	; 0x80083e <pxCurrentTCB>
     cb8:	b0 91 3f 08 	lds	r27, 0x083F	; 0x80083f <pxCurrentTCB+0x1>
     cbc:	cd 91       	ld	r28, X+
     cbe:	cd bf       	out	0x3d, r28	; 61
     cc0:	dd 91       	ld	r29, X+
     cc2:	de bf       	out	0x3e, r29	; 62
     cc4:	ff 91       	pop	r31
     cc6:	ef 91       	pop	r30
     cc8:	df 91       	pop	r29
     cca:	cf 91       	pop	r28
     ccc:	bf 91       	pop	r27
     cce:	af 91       	pop	r26
     cd0:	9f 91       	pop	r25
     cd2:	8f 91       	pop	r24
     cd4:	7f 91       	pop	r23
     cd6:	6f 91       	pop	r22
     cd8:	5f 91       	pop	r21
     cda:	4f 91       	pop	r20
     cdc:	3f 91       	pop	r19
     cde:	2f 91       	pop	r18
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	cf 90       	pop	r12
     cec:	bf 90       	pop	r11
     cee:	af 90       	pop	r10
     cf0:	9f 90       	pop	r9
     cf2:	8f 90       	pop	r8
     cf4:	7f 90       	pop	r7
     cf6:	6f 90       	pop	r6
     cf8:	5f 90       	pop	r5
     cfa:	4f 90       	pop	r4
     cfc:	3f 90       	pop	r3
     cfe:	2f 90       	pop	r2
     d00:	1f 90       	pop	r1
     d02:	0f 90       	pop	r0
     d04:	0c be       	out	0x3c, r0	; 60
     d06:	0f 90       	pop	r0
     d08:	0b be       	out	0x3b, r0	; 59
     d0a:	0f 90       	pop	r0
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     d10:	08 95       	ret

00000d12 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     d12:	0f 92       	push	r0
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	f8 94       	cli
     d18:	0f 92       	push	r0
     d1a:	0b b6       	in	r0, 0x3b	; 59
     d1c:	0f 92       	push	r0
     d1e:	0c b6       	in	r0, 0x3c	; 60
     d20:	0f 92       	push	r0
     d22:	1f 92       	push	r1
     d24:	11 24       	eor	r1, r1
     d26:	2f 92       	push	r2
     d28:	3f 92       	push	r3
     d2a:	4f 92       	push	r4
     d2c:	5f 92       	push	r5
     d2e:	6f 92       	push	r6
     d30:	7f 92       	push	r7
     d32:	8f 92       	push	r8
     d34:	9f 92       	push	r9
     d36:	af 92       	push	r10
     d38:	bf 92       	push	r11
     d3a:	cf 92       	push	r12
     d3c:	df 92       	push	r13
     d3e:	ef 92       	push	r14
     d40:	ff 92       	push	r15
     d42:	0f 93       	push	r16
     d44:	1f 93       	push	r17
     d46:	2f 93       	push	r18
     d48:	3f 93       	push	r19
     d4a:	4f 93       	push	r20
     d4c:	5f 93       	push	r21
     d4e:	6f 93       	push	r22
     d50:	7f 93       	push	r23
     d52:	8f 93       	push	r24
     d54:	9f 93       	push	r25
     d56:	af 93       	push	r26
     d58:	bf 93       	push	r27
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	ef 93       	push	r30
     d60:	ff 93       	push	r31
     d62:	a0 91 3e 08 	lds	r26, 0x083E	; 0x80083e <pxCurrentTCB>
     d66:	b0 91 3f 08 	lds	r27, 0x083F	; 0x80083f <pxCurrentTCB+0x1>
     d6a:	0d b6       	in	r0, 0x3d	; 61
     d6c:	0d 92       	st	X+, r0
     d6e:	0e b6       	in	r0, 0x3e	; 62
     d70:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     d72:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     d74:	d8 d6       	rcall	.+3504   	; 0x1b26 <xTaskIncrementTick>
     d76:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     d78:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
     d7c:	a0 91 3e 08 	lds	r26, 0x083E	; 0x80083e <pxCurrentTCB>
     d80:	b0 91 3f 08 	lds	r27, 0x083F	; 0x80083f <pxCurrentTCB+0x1>
     d84:	cd 91       	ld	r28, X+
     d86:	cd bf       	out	0x3d, r28	; 61
     d88:	dd 91       	ld	r29, X+
     d8a:	de bf       	out	0x3e, r29	; 62
     d8c:	ff 91       	pop	r31
     d8e:	ef 91       	pop	r30
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	bf 91       	pop	r27
     d96:	af 91       	pop	r26
     d98:	9f 91       	pop	r25
     d9a:	8f 91       	pop	r24
     d9c:	7f 91       	pop	r23
     d9e:	6f 91       	pop	r22
     da0:	5f 91       	pop	r21
     da2:	4f 91       	pop	r20
     da4:	3f 91       	pop	r19
     da6:	2f 91       	pop	r18
     da8:	1f 91       	pop	r17
     daa:	0f 91       	pop	r16
     dac:	ff 90       	pop	r15
     dae:	ef 90       	pop	r14
     db0:	df 90       	pop	r13
     db2:	cf 90       	pop	r12
     db4:	bf 90       	pop	r11
     db6:	af 90       	pop	r10
     db8:	9f 90       	pop	r9
     dba:	8f 90       	pop	r8
     dbc:	7f 90       	pop	r7
     dbe:	6f 90       	pop	r6
     dc0:	5f 90       	pop	r5
     dc2:	4f 90       	pop	r4
     dc4:	3f 90       	pop	r3
     dc6:	2f 90       	pop	r2
     dc8:	1f 90       	pop	r1
     dca:	0f 90       	pop	r0
     dcc:	0c be       	out	0x3c, r0	; 60
     dce:	0f 90       	pop	r0
     dd0:	0b be       	out	0x3b, r0	; 59
     dd2:	0f 90       	pop	r0
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     dd8:	08 95       	ret

00000dda <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     dda:	9b df       	rcall	.-202    	; 0xd12 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     ddc:	18 95       	reti

00000dde <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	f8 94       	cli
     de2:	0f 92       	push	r0
     de4:	fc 01       	movw	r30, r24
     de6:	92 8d       	ldd	r25, Z+26	; 0x1a
     de8:	0f 90       	pop	r0
     dea:	0f be       	out	0x3f, r0	; 63
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	91 11       	cpse	r25, r1
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	08 95       	ret

00000df4 <prvCopyDataToQueue>:
     df4:	0f 93       	push	r16
     df6:	1f 93       	push	r17
     df8:	cf 93       	push	r28
     dfa:	df 93       	push	r29
     dfc:	ec 01       	movw	r28, r24
     dfe:	04 2f       	mov	r16, r20
     e00:	1a 8d       	ldd	r17, Y+26	; 0x1a
     e02:	4c 8d       	ldd	r20, Y+28	; 0x1c
     e04:	41 11       	cpse	r20, r1
     e06:	0c c0       	rjmp	.+24     	; 0xe20 <prvCopyDataToQueue+0x2c>
     e08:	88 81       	ld	r24, Y
     e0a:	99 81       	ldd	r25, Y+1	; 0x01
     e0c:	89 2b       	or	r24, r25
     e0e:	09 f0       	breq	.+2      	; 0xe12 <prvCopyDataToQueue+0x1e>
     e10:	42 c0       	rjmp	.+132    	; 0xe96 <prvCopyDataToQueue+0xa2>
     e12:	8c 81       	ldd	r24, Y+4	; 0x04
     e14:	9d 81       	ldd	r25, Y+5	; 0x05
     e16:	0e 94 31 10 	call	0x2062	; 0x2062 <xTaskPriorityDisinherit>
     e1a:	1d 82       	std	Y+5, r1	; 0x05
     e1c:	1c 82       	std	Y+4, r1	; 0x04
     e1e:	42 c0       	rjmp	.+132    	; 0xea4 <prvCopyDataToQueue+0xb0>
     e20:	01 11       	cpse	r16, r1
     e22:	17 c0       	rjmp	.+46     	; 0xe52 <prvCopyDataToQueue+0x5e>
     e24:	50 e0       	ldi	r21, 0x00	; 0
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	9b 81       	ldd	r25, Y+3	; 0x03
     e2a:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <memcpy>
     e2e:	2c 8d       	ldd	r18, Y+28	; 0x1c
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	9b 81       	ldd	r25, Y+3	; 0x03
     e34:	82 0f       	add	r24, r18
     e36:	91 1d       	adc	r25, r1
     e38:	9b 83       	std	Y+3, r25	; 0x03
     e3a:	8a 83       	std	Y+2, r24	; 0x02
     e3c:	2c 81       	ldd	r18, Y+4	; 0x04
     e3e:	3d 81       	ldd	r19, Y+5	; 0x05
     e40:	82 17       	cp	r24, r18
     e42:	93 07       	cpc	r25, r19
     e44:	50 f1       	brcs	.+84     	; 0xe9a <prvCopyDataToQueue+0xa6>
     e46:	88 81       	ld	r24, Y
     e48:	99 81       	ldd	r25, Y+1	; 0x01
     e4a:	9b 83       	std	Y+3, r25	; 0x03
     e4c:	8a 83       	std	Y+2, r24	; 0x02
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	29 c0       	rjmp	.+82     	; 0xea4 <prvCopyDataToQueue+0xb0>
     e52:	50 e0       	ldi	r21, 0x00	; 0
     e54:	8e 81       	ldd	r24, Y+6	; 0x06
     e56:	9f 81       	ldd	r25, Y+7	; 0x07
     e58:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <memcpy>
     e5c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	91 95       	neg	r25
     e62:	81 95       	neg	r24
     e64:	91 09       	sbc	r25, r1
     e66:	2e 81       	ldd	r18, Y+6	; 0x06
     e68:	3f 81       	ldd	r19, Y+7	; 0x07
     e6a:	28 0f       	add	r18, r24
     e6c:	39 1f       	adc	r19, r25
     e6e:	3f 83       	std	Y+7, r19	; 0x07
     e70:	2e 83       	std	Y+6, r18	; 0x06
     e72:	48 81       	ld	r20, Y
     e74:	59 81       	ldd	r21, Y+1	; 0x01
     e76:	24 17       	cp	r18, r20
     e78:	35 07       	cpc	r19, r21
     e7a:	30 f4       	brcc	.+12     	; 0xe88 <prvCopyDataToQueue+0x94>
     e7c:	2c 81       	ldd	r18, Y+4	; 0x04
     e7e:	3d 81       	ldd	r19, Y+5	; 0x05
     e80:	82 0f       	add	r24, r18
     e82:	93 1f       	adc	r25, r19
     e84:	9f 83       	std	Y+7, r25	; 0x07
     e86:	8e 83       	std	Y+6, r24	; 0x06
     e88:	02 30       	cpi	r16, 0x02	; 2
     e8a:	49 f4       	brne	.+18     	; 0xe9e <prvCopyDataToQueue+0xaa>
     e8c:	11 23       	and	r17, r17
     e8e:	49 f0       	breq	.+18     	; 0xea2 <prvCopyDataToQueue+0xae>
     e90:	11 50       	subi	r17, 0x01	; 1
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	07 c0       	rjmp	.+14     	; 0xea4 <prvCopyDataToQueue+0xb0>
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	05 c0       	rjmp	.+10     	; 0xea4 <prvCopyDataToQueue+0xb0>
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	03 c0       	rjmp	.+6      	; 0xea4 <prvCopyDataToQueue+0xb0>
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	01 c0       	rjmp	.+2      	; 0xea4 <prvCopyDataToQueue+0xb0>
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	1f 5f       	subi	r17, 0xFF	; 255
     ea6:	1a 8f       	std	Y+26, r17	; 0x1a
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	1f 91       	pop	r17
     eae:	0f 91       	pop	r16
     eb0:	08 95       	ret

00000eb2 <prvCopyDataFromQueue>:
     eb2:	fc 01       	movw	r30, r24
     eb4:	44 8d       	ldd	r20, Z+28	; 0x1c
     eb6:	44 23       	and	r20, r20
     eb8:	a9 f0       	breq	.+42     	; 0xee4 <prvCopyDataFromQueue+0x32>
     eba:	50 e0       	ldi	r21, 0x00	; 0
     ebc:	26 81       	ldd	r18, Z+6	; 0x06
     ebe:	37 81       	ldd	r19, Z+7	; 0x07
     ec0:	24 0f       	add	r18, r20
     ec2:	35 1f       	adc	r19, r21
     ec4:	37 83       	std	Z+7, r19	; 0x07
     ec6:	26 83       	std	Z+6, r18	; 0x06
     ec8:	84 81       	ldd	r24, Z+4	; 0x04
     eca:	95 81       	ldd	r25, Z+5	; 0x05
     ecc:	28 17       	cp	r18, r24
     ece:	39 07       	cpc	r19, r25
     ed0:	20 f0       	brcs	.+8      	; 0xeda <prvCopyDataFromQueue+0x28>
     ed2:	80 81       	ld	r24, Z
     ed4:	91 81       	ldd	r25, Z+1	; 0x01
     ed6:	97 83       	std	Z+7, r25	; 0x07
     ed8:	86 83       	std	Z+6, r24	; 0x06
     eda:	cb 01       	movw	r24, r22
     edc:	66 81       	ldd	r22, Z+6	; 0x06
     ede:	77 81       	ldd	r23, Z+7	; 0x07
     ee0:	0c 94 d9 24 	jmp	0x49b2	; 0x49b2 <memcpy>
     ee4:	08 95       	ret

00000ee6 <prvUnlockQueue>:
     ee6:	ef 92       	push	r14
     ee8:	ff 92       	push	r15
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
     eee:	cf 93       	push	r28
     ef0:	8c 01       	movw	r16, r24
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	0f 92       	push	r0
     ef8:	fc 01       	movw	r30, r24
     efa:	c6 8d       	ldd	r28, Z+30	; 0x1e
     efc:	1c 16       	cp	r1, r28
     efe:	ac f4       	brge	.+42     	; 0xf2a <prvUnlockQueue+0x44>
     f00:	81 89       	ldd	r24, Z+17	; 0x11
     f02:	81 11       	cpse	r24, r1
     f04:	06 c0       	rjmp	.+12     	; 0xf12 <prvUnlockQueue+0x2c>
     f06:	11 c0       	rjmp	.+34     	; 0xf2a <prvUnlockQueue+0x44>
     f08:	f8 01       	movw	r30, r16
     f0a:	81 89       	ldd	r24, Z+17	; 0x11
     f0c:	81 11       	cpse	r24, r1
     f0e:	05 c0       	rjmp	.+10     	; 0xf1a <prvUnlockQueue+0x34>
     f10:	0c c0       	rjmp	.+24     	; 0xf2a <prvUnlockQueue+0x44>
     f12:	78 01       	movw	r14, r16
     f14:	f1 e1       	ldi	r31, 0x11	; 17
     f16:	ef 0e       	add	r14, r31
     f18:	f1 1c       	adc	r15, r1
     f1a:	c7 01       	movw	r24, r14
     f1c:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <xTaskRemoveFromEventList>
     f20:	81 11       	cpse	r24, r1
     f22:	0e 94 1a 10 	call	0x2034	; 0x2034 <vTaskMissedYield>
     f26:	c1 50       	subi	r28, 0x01	; 1
     f28:	79 f7       	brne	.-34     	; 0xf08 <prvUnlockQueue+0x22>
     f2a:	8f ef       	ldi	r24, 0xFF	; 255
     f2c:	f8 01       	movw	r30, r16
     f2e:	86 8f       	std	Z+30, r24	; 0x1e
     f30:	0f 90       	pop	r0
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	f8 94       	cli
     f38:	0f 92       	push	r0
     f3a:	c5 8d       	ldd	r28, Z+29	; 0x1d
     f3c:	1c 16       	cp	r1, r28
     f3e:	a4 f4       	brge	.+40     	; 0xf68 <prvUnlockQueue+0x82>
     f40:	80 85       	ldd	r24, Z+8	; 0x08
     f42:	81 11       	cpse	r24, r1
     f44:	06 c0       	rjmp	.+12     	; 0xf52 <prvUnlockQueue+0x6c>
     f46:	10 c0       	rjmp	.+32     	; 0xf68 <prvUnlockQueue+0x82>
     f48:	f8 01       	movw	r30, r16
     f4a:	80 85       	ldd	r24, Z+8	; 0x08
     f4c:	81 11       	cpse	r24, r1
     f4e:	05 c0       	rjmp	.+10     	; 0xf5a <prvUnlockQueue+0x74>
     f50:	0b c0       	rjmp	.+22     	; 0xf68 <prvUnlockQueue+0x82>
     f52:	78 01       	movw	r14, r16
     f54:	f8 e0       	ldi	r31, 0x08	; 8
     f56:	ef 0e       	add	r14, r31
     f58:	f1 1c       	adc	r15, r1
     f5a:	c7 01       	movw	r24, r14
     f5c:	e3 d7       	rcall	.+4038   	; 0x1f24 <xTaskRemoveFromEventList>
     f5e:	81 11       	cpse	r24, r1
     f60:	0e 94 1a 10 	call	0x2034	; 0x2034 <vTaskMissedYield>
     f64:	c1 50       	subi	r28, 0x01	; 1
     f66:	81 f7       	brne	.-32     	; 0xf48 <prvUnlockQueue+0x62>
     f68:	8f ef       	ldi	r24, 0xFF	; 255
     f6a:	f8 01       	movw	r30, r16
     f6c:	85 8f       	std	Z+29, r24	; 0x1d
     f6e:	0f 90       	pop	r0
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	cf 91       	pop	r28
     f74:	1f 91       	pop	r17
     f76:	0f 91       	pop	r16
     f78:	ff 90       	pop	r15
     f7a:	ef 90       	pop	r14
     f7c:	08 95       	ret

00000f7e <xQueueGenericReset>:
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
     f82:	ec 01       	movw	r28, r24
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	0f 92       	push	r0
     f8a:	e8 81       	ld	r30, Y
     f8c:	f9 81       	ldd	r31, Y+1	; 0x01
     f8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f90:	2c 8d       	ldd	r18, Y+28	; 0x1c
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	82 9f       	mul	r24, r18
     f98:	a0 01       	movw	r20, r0
     f9a:	83 9f       	mul	r24, r19
     f9c:	50 0d       	add	r21, r0
     f9e:	92 9f       	mul	r25, r18
     fa0:	50 0d       	add	r21, r0
     fa2:	11 24       	eor	r1, r1
     fa4:	4e 0f       	add	r20, r30
     fa6:	5f 1f       	adc	r21, r31
     fa8:	5d 83       	std	Y+5, r21	; 0x05
     faa:	4c 83       	std	Y+4, r20	; 0x04
     fac:	1a 8e       	std	Y+26, r1	; 0x1a
     fae:	fb 83       	std	Y+3, r31	; 0x03
     fb0:	ea 83       	std	Y+2, r30	; 0x02
     fb2:	01 97       	sbiw	r24, 0x01	; 1
     fb4:	82 9f       	mul	r24, r18
     fb6:	a0 01       	movw	r20, r0
     fb8:	83 9f       	mul	r24, r19
     fba:	50 0d       	add	r21, r0
     fbc:	92 9f       	mul	r25, r18
     fbe:	50 0d       	add	r21, r0
     fc0:	11 24       	eor	r1, r1
     fc2:	cf 01       	movw	r24, r30
     fc4:	84 0f       	add	r24, r20
     fc6:	95 1f       	adc	r25, r21
     fc8:	9f 83       	std	Y+7, r25	; 0x07
     fca:	8e 83       	std	Y+6, r24	; 0x06
     fcc:	8f ef       	ldi	r24, 0xFF	; 255
     fce:	8d 8f       	std	Y+29, r24	; 0x1d
     fd0:	8e 8f       	std	Y+30, r24	; 0x1e
     fd2:	61 11       	cpse	r22, r1
     fd4:	0a c0       	rjmp	.+20     	; 0xfea <xQueueGenericReset+0x6c>
     fd6:	88 85       	ldd	r24, Y+8	; 0x08
     fd8:	88 23       	and	r24, r24
     fda:	69 f0       	breq	.+26     	; 0xff6 <xQueueGenericReset+0x78>
     fdc:	ce 01       	movw	r24, r28
     fde:	08 96       	adiw	r24, 0x08	; 8
     fe0:	a1 d7       	rcall	.+3906   	; 0x1f24 <xTaskRemoveFromEventList>
     fe2:	88 23       	and	r24, r24
     fe4:	41 f0       	breq	.+16     	; 0xff6 <xQueueGenericReset+0x78>
     fe6:	34 de       	rcall	.-920    	; 0xc50 <vPortYield>
     fe8:	06 c0       	rjmp	.+12     	; 0xff6 <xQueueGenericReset+0x78>
     fea:	ce 01       	movw	r24, r28
     fec:	08 96       	adiw	r24, 0x08	; 8
     fee:	f7 dc       	rcall	.-1554   	; 0x9de <vListInitialise>
     ff0:	ce 01       	movw	r24, r28
     ff2:	41 96       	adiw	r24, 0x11	; 17
     ff4:	f4 dc       	rcall	.-1560   	; 0x9de <vListInitialise>
     ff6:	0f 90       	pop	r0
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	08 95       	ret

00001002 <xQueueGenericCreate>:
    1002:	ff 92       	push	r15
    1004:	0f 93       	push	r16
    1006:	1f 93       	push	r17
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	08 2f       	mov	r16, r24
    100e:	16 2f       	mov	r17, r22
    1010:	f4 2e       	mov	r15, r20
    1012:	66 23       	and	r22, r22
    1014:	b9 f0       	breq	.+46     	; 0x1044 <xQueueGenericCreate+0x42>
    1016:	86 9f       	mul	r24, r22
    1018:	c0 01       	movw	r24, r0
    101a:	11 24       	eor	r1, r1
    101c:	81 96       	adiw	r24, 0x21	; 33
    101e:	bd dc       	rcall	.-1670   	; 0x99a <pvPortMalloc>
    1020:	ec 01       	movw	r28, r24
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	41 f4       	brne	.+16     	; 0x1036 <xQueueGenericCreate+0x34>
    1026:	14 c0       	rjmp	.+40     	; 0x1050 <xQueueGenericCreate+0x4e>
    1028:	0b 8f       	std	Y+27, r16	; 0x1b
    102a:	1c 8f       	std	Y+28, r17	; 0x1c
    102c:	61 e0       	ldi	r22, 0x01	; 1
    102e:	ce 01       	movw	r24, r28
    1030:	a6 df       	rcall	.-180    	; 0xf7e <xQueueGenericReset>
    1032:	f8 a2       	std	Y+32, r15	; 0x20
    1034:	0d c0       	rjmp	.+26     	; 0x1050 <xQueueGenericCreate+0x4e>
    1036:	81 96       	adiw	r24, 0x21	; 33
    1038:	99 83       	std	Y+1, r25	; 0x01
    103a:	88 83       	st	Y, r24
    103c:	f5 cf       	rjmp	.-22     	; 0x1028 <xQueueGenericCreate+0x26>
    103e:	d9 83       	std	Y+1, r29	; 0x01
    1040:	c8 83       	st	Y, r28
    1042:	f2 cf       	rjmp	.-28     	; 0x1028 <xQueueGenericCreate+0x26>
    1044:	81 e2       	ldi	r24, 0x21	; 33
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	a8 dc       	rcall	.-1712   	; 0x99a <pvPortMalloc>
    104a:	ec 01       	movw	r28, r24
    104c:	89 2b       	or	r24, r25
    104e:	b9 f7       	brne	.-18     	; 0x103e <xQueueGenericCreate+0x3c>
    1050:	ce 01       	movw	r24, r28
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	1f 91       	pop	r17
    1058:	0f 91       	pop	r16
    105a:	ff 90       	pop	r15
    105c:	08 95       	ret

0000105e <xQueueGenericSend>:
    105e:	9f 92       	push	r9
    1060:	af 92       	push	r10
    1062:	bf 92       	push	r11
    1064:	cf 92       	push	r12
    1066:	df 92       	push	r13
    1068:	ef 92       	push	r14
    106a:	ff 92       	push	r15
    106c:	0f 93       	push	r16
    106e:	1f 93       	push	r17
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
    1074:	00 d0       	rcall	.+0      	; 0x1076 <xQueueGenericSend+0x18>
    1076:	1f 92       	push	r1
    1078:	1f 92       	push	r1
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	8c 01       	movw	r16, r24
    1080:	6b 01       	movw	r12, r22
    1082:	5d 83       	std	Y+5, r21	; 0x05
    1084:	4c 83       	std	Y+4, r20	; 0x04
    1086:	a2 2e       	mov	r10, r18
    1088:	b1 2c       	mov	r11, r1
    108a:	99 24       	eor	r9, r9
    108c:	93 94       	inc	r9
    108e:	7c 01       	movw	r14, r24
    1090:	88 e0       	ldi	r24, 0x08	; 8
    1092:	e8 0e       	add	r14, r24
    1094:	f1 1c       	adc	r15, r1
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	0f 92       	push	r0
    109c:	f8 01       	movw	r30, r16
    109e:	92 8d       	ldd	r25, Z+26	; 0x1a
    10a0:	83 8d       	ldd	r24, Z+27	; 0x1b
    10a2:	98 17       	cp	r25, r24
    10a4:	18 f0       	brcs	.+6      	; 0x10ac <xQueueGenericSend+0x4e>
    10a6:	f2 e0       	ldi	r31, 0x02	; 2
    10a8:	af 12       	cpse	r10, r31
    10aa:	15 c0       	rjmp	.+42     	; 0x10d6 <xQueueGenericSend+0x78>
    10ac:	4a 2d       	mov	r20, r10
    10ae:	b6 01       	movw	r22, r12
    10b0:	c8 01       	movw	r24, r16
    10b2:	a0 de       	rcall	.-704    	; 0xdf4 <prvCopyDataToQueue>
    10b4:	f8 01       	movw	r30, r16
    10b6:	91 89       	ldd	r25, Z+17	; 0x11
    10b8:	99 23       	and	r25, r25
    10ba:	39 f0       	breq	.+14     	; 0x10ca <xQueueGenericSend+0x6c>
    10bc:	c8 01       	movw	r24, r16
    10be:	41 96       	adiw	r24, 0x11	; 17
    10c0:	31 d7       	rcall	.+3682   	; 0x1f24 <xTaskRemoveFromEventList>
    10c2:	88 23       	and	r24, r24
    10c4:	21 f0       	breq	.+8      	; 0x10ce <xQueueGenericSend+0x70>
    10c6:	c4 dd       	rcall	.-1144   	; 0xc50 <vPortYield>
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <xQueueGenericSend+0x70>
    10ca:	81 11       	cpse	r24, r1
    10cc:	c1 dd       	rcall	.-1150   	; 0xc50 <vPortYield>
    10ce:	0f 90       	pop	r0
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	45 c0       	rjmp	.+138    	; 0x1160 <xQueueGenericSend+0x102>
    10d6:	8c 81       	ldd	r24, Y+4	; 0x04
    10d8:	9d 81       	ldd	r25, Y+5	; 0x05
    10da:	89 2b       	or	r24, r25
    10dc:	21 f4       	brne	.+8      	; 0x10e6 <xQueueGenericSend+0x88>
    10de:	0f 90       	pop	r0
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	3d c0       	rjmp	.+122    	; 0x1160 <xQueueGenericSend+0x102>
    10e6:	b1 10       	cpse	r11, r1
    10e8:	04 c0       	rjmp	.+8      	; 0x10f2 <xQueueGenericSend+0x94>
    10ea:	ce 01       	movw	r24, r28
    10ec:	01 96       	adiw	r24, 0x01	; 1
    10ee:	62 d7       	rcall	.+3780   	; 0x1fb4 <vTaskInternalSetTimeOutState>
    10f0:	b9 2c       	mov	r11, r9
    10f2:	0f 90       	pop	r0
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	07 d5       	rcall	.+2574   	; 0x1b06 <vTaskSuspendAll>
    10f8:	0f b6       	in	r0, 0x3f	; 63
    10fa:	f8 94       	cli
    10fc:	0f 92       	push	r0
    10fe:	f8 01       	movw	r30, r16
    1100:	85 8d       	ldd	r24, Z+29	; 0x1d
    1102:	8f 3f       	cpi	r24, 0xFF	; 255
    1104:	09 f4       	brne	.+2      	; 0x1108 <xQueueGenericSend+0xaa>
    1106:	15 8e       	std	Z+29, r1	; 0x1d
    1108:	f8 01       	movw	r30, r16
    110a:	86 8d       	ldd	r24, Z+30	; 0x1e
    110c:	8f 3f       	cpi	r24, 0xFF	; 255
    110e:	09 f4       	brne	.+2      	; 0x1112 <xQueueGenericSend+0xb4>
    1110:	16 8e       	std	Z+30, r1	; 0x1e
    1112:	0f 90       	pop	r0
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	be 01       	movw	r22, r28
    1118:	6c 5f       	subi	r22, 0xFC	; 252
    111a:	7f 4f       	sbci	r23, 0xFF	; 255
    111c:	ce 01       	movw	r24, r28
    111e:	01 96       	adiw	r24, 0x01	; 1
    1120:	54 d7       	rcall	.+3752   	; 0x1fca <xTaskCheckForTimeOut>
    1122:	81 11       	cpse	r24, r1
    1124:	19 c0       	rjmp	.+50     	; 0x1158 <xQueueGenericSend+0xfa>
    1126:	0f b6       	in	r0, 0x3f	; 63
    1128:	f8 94       	cli
    112a:	0f 92       	push	r0
    112c:	f8 01       	movw	r30, r16
    112e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1130:	83 8d       	ldd	r24, Z+27	; 0x1b
    1132:	0f 90       	pop	r0
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	98 13       	cpse	r25, r24
    1138:	0b c0       	rjmp	.+22     	; 0x1150 <xQueueGenericSend+0xf2>
    113a:	6c 81       	ldd	r22, Y+4	; 0x04
    113c:	7d 81       	ldd	r23, Y+5	; 0x05
    113e:	c7 01       	movw	r24, r14
    1140:	c8 d6       	rcall	.+3472   	; 0x1ed2 <vTaskPlaceOnEventList>
    1142:	c8 01       	movw	r24, r16
    1144:	d0 de       	rcall	.-608    	; 0xee6 <prvUnlockQueue>
    1146:	a9 d5       	rcall	.+2898   	; 0x1c9a <xTaskResumeAll>
    1148:	81 11       	cpse	r24, r1
    114a:	a5 cf       	rjmp	.-182    	; 0x1096 <xQueueGenericSend+0x38>
    114c:	81 dd       	rcall	.-1278   	; 0xc50 <vPortYield>
    114e:	a3 cf       	rjmp	.-186    	; 0x1096 <xQueueGenericSend+0x38>
    1150:	c8 01       	movw	r24, r16
    1152:	c9 de       	rcall	.-622    	; 0xee6 <prvUnlockQueue>
    1154:	a2 d5       	rcall	.+2884   	; 0x1c9a <xTaskResumeAll>
    1156:	9f cf       	rjmp	.-194    	; 0x1096 <xQueueGenericSend+0x38>
    1158:	c8 01       	movw	r24, r16
    115a:	c5 de       	rcall	.-630    	; 0xee6 <prvUnlockQueue>
    115c:	9e d5       	rcall	.+2876   	; 0x1c9a <xTaskResumeAll>
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	ff 90       	pop	r15
    1174:	ef 90       	pop	r14
    1176:	df 90       	pop	r13
    1178:	cf 90       	pop	r12
    117a:	bf 90       	pop	r11
    117c:	af 90       	pop	r10
    117e:	9f 90       	pop	r9
    1180:	08 95       	ret

00001182 <xQueueGenericSendFromISR>:
    1182:	ef 92       	push	r14
    1184:	ff 92       	push	r15
    1186:	0f 93       	push	r16
    1188:	1f 93       	push	r17
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	8a 01       	movw	r16, r20
    1190:	fc 01       	movw	r30, r24
    1192:	52 8d       	ldd	r21, Z+26	; 0x1a
    1194:	33 8d       	ldd	r19, Z+27	; 0x1b
    1196:	53 17       	cp	r21, r19
    1198:	10 f0       	brcs	.+4      	; 0x119e <xQueueGenericSendFromISR+0x1c>
    119a:	22 30       	cpi	r18, 0x02	; 2
    119c:	e1 f4       	brne	.+56     	; 0x11d6 <xQueueGenericSendFromISR+0x54>
    119e:	42 2f       	mov	r20, r18
    11a0:	78 01       	movw	r14, r16
    11a2:	ec 01       	movw	r28, r24
    11a4:	1e 8d       	ldd	r17, Y+30	; 0x1e
    11a6:	26 de       	rcall	.-948    	; 0xdf4 <prvCopyDataToQueue>
    11a8:	1f 3f       	cpi	r17, 0xFF	; 255
    11aa:	79 f4       	brne	.+30     	; 0x11ca <xQueueGenericSendFromISR+0x48>
    11ac:	89 89       	ldd	r24, Y+17	; 0x11
    11ae:	88 23       	and	r24, r24
    11b0:	a1 f0       	breq	.+40     	; 0x11da <xQueueGenericSendFromISR+0x58>
    11b2:	ce 01       	movw	r24, r28
    11b4:	41 96       	adiw	r24, 0x11	; 17
    11b6:	b6 d6       	rcall	.+3436   	; 0x1f24 <xTaskRemoveFromEventList>
    11b8:	88 23       	and	r24, r24
    11ba:	89 f0       	breq	.+34     	; 0x11de <xQueueGenericSendFromISR+0x5c>
    11bc:	e1 14       	cp	r14, r1
    11be:	f1 04       	cpc	r15, r1
    11c0:	81 f0       	breq	.+32     	; 0x11e2 <xQueueGenericSendFromISR+0x60>
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	f7 01       	movw	r30, r14
    11c6:	80 83       	st	Z, r24
    11c8:	0d c0       	rjmp	.+26     	; 0x11e4 <xQueueGenericSendFromISR+0x62>
    11ca:	ff 24       	eor	r15, r15
    11cc:	f3 94       	inc	r15
    11ce:	f1 0e       	add	r15, r17
    11d0:	fe 8e       	std	Y+30, r15	; 0x1e
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	07 c0       	rjmp	.+14     	; 0x11e4 <xQueueGenericSendFromISR+0x62>
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	05 c0       	rjmp	.+10     	; 0x11e4 <xQueueGenericSendFromISR+0x62>
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	03 c0       	rjmp	.+6      	; 0x11e4 <xQueueGenericSendFromISR+0x62>
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	01 c0       	rjmp	.+2      	; 0x11e4 <xQueueGenericSendFromISR+0x62>
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	df 91       	pop	r29
    11e6:	cf 91       	pop	r28
    11e8:	1f 91       	pop	r17
    11ea:	0f 91       	pop	r16
    11ec:	ff 90       	pop	r15
    11ee:	ef 90       	pop	r14
    11f0:	08 95       	ret

000011f2 <xQueueReceive>:
    11f2:	9f 92       	push	r9
    11f4:	af 92       	push	r10
    11f6:	bf 92       	push	r11
    11f8:	cf 92       	push	r12
    11fa:	df 92       	push	r13
    11fc:	ef 92       	push	r14
    11fe:	ff 92       	push	r15
    1200:	0f 93       	push	r16
    1202:	1f 93       	push	r17
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
    1208:	00 d0       	rcall	.+0      	; 0x120a <xQueueReceive+0x18>
    120a:	1f 92       	push	r1
    120c:	1f 92       	push	r1
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	8c 01       	movw	r16, r24
    1214:	5b 01       	movw	r10, r22
    1216:	5d 83       	std	Y+5, r21	; 0x05
    1218:	4c 83       	std	Y+4, r20	; 0x04
    121a:	e1 2c       	mov	r14, r1
    121c:	99 24       	eor	r9, r9
    121e:	93 94       	inc	r9
    1220:	6c 01       	movw	r12, r24
    1222:	81 e1       	ldi	r24, 0x11	; 17
    1224:	c8 0e       	add	r12, r24
    1226:	d1 1c       	adc	r13, r1
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	0f 92       	push	r0
    122e:	f8 01       	movw	r30, r16
    1230:	f2 8c       	ldd	r15, Z+26	; 0x1a
    1232:	ff 20       	and	r15, r15
    1234:	91 f0       	breq	.+36     	; 0x125a <xQueueReceive+0x68>
    1236:	b5 01       	movw	r22, r10
    1238:	c8 01       	movw	r24, r16
    123a:	3b de       	rcall	.-906    	; 0xeb2 <prvCopyDataFromQueue>
    123c:	fa 94       	dec	r15
    123e:	f8 01       	movw	r30, r16
    1240:	f2 8e       	std	Z+26, r15	; 0x1a
    1242:	80 85       	ldd	r24, Z+8	; 0x08
    1244:	88 23       	and	r24, r24
    1246:	29 f0       	breq	.+10     	; 0x1252 <xQueueReceive+0x60>
    1248:	c8 01       	movw	r24, r16
    124a:	08 96       	adiw	r24, 0x08	; 8
    124c:	6b d6       	rcall	.+3286   	; 0x1f24 <xTaskRemoveFromEventList>
    124e:	81 11       	cpse	r24, r1
    1250:	ff dc       	rcall	.-1538   	; 0xc50 <vPortYield>
    1252:	0f 90       	pop	r0
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	44 c0       	rjmp	.+136    	; 0x12e2 <xQueueReceive+0xf0>
    125a:	8c 81       	ldd	r24, Y+4	; 0x04
    125c:	9d 81       	ldd	r25, Y+5	; 0x05
    125e:	89 2b       	or	r24, r25
    1260:	21 f4       	brne	.+8      	; 0x126a <xQueueReceive+0x78>
    1262:	0f 90       	pop	r0
    1264:	0f be       	out	0x3f, r0	; 63
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	3c c0       	rjmp	.+120    	; 0x12e2 <xQueueReceive+0xf0>
    126a:	e1 10       	cpse	r14, r1
    126c:	04 c0       	rjmp	.+8      	; 0x1276 <xQueueReceive+0x84>
    126e:	ce 01       	movw	r24, r28
    1270:	01 96       	adiw	r24, 0x01	; 1
    1272:	a0 d6       	rcall	.+3392   	; 0x1fb4 <vTaskInternalSetTimeOutState>
    1274:	e9 2c       	mov	r14, r9
    1276:	0f 90       	pop	r0
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	45 d4       	rcall	.+2186   	; 0x1b06 <vTaskSuspendAll>
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	0f 92       	push	r0
    1282:	f8 01       	movw	r30, r16
    1284:	85 8d       	ldd	r24, Z+29	; 0x1d
    1286:	8f 3f       	cpi	r24, 0xFF	; 255
    1288:	09 f4       	brne	.+2      	; 0x128c <xQueueReceive+0x9a>
    128a:	15 8e       	std	Z+29, r1	; 0x1d
    128c:	f8 01       	movw	r30, r16
    128e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1290:	8f 3f       	cpi	r24, 0xFF	; 255
    1292:	09 f4       	brne	.+2      	; 0x1296 <xQueueReceive+0xa4>
    1294:	16 8e       	std	Z+30, r1	; 0x1e
    1296:	0f 90       	pop	r0
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	be 01       	movw	r22, r28
    129c:	6c 5f       	subi	r22, 0xFC	; 252
    129e:	7f 4f       	sbci	r23, 0xFF	; 255
    12a0:	ce 01       	movw	r24, r28
    12a2:	01 96       	adiw	r24, 0x01	; 1
    12a4:	92 d6       	rcall	.+3364   	; 0x1fca <xTaskCheckForTimeOut>
    12a6:	81 11       	cpse	r24, r1
    12a8:	13 c0       	rjmp	.+38     	; 0x12d0 <xQueueReceive+0xde>
    12aa:	c8 01       	movw	r24, r16
    12ac:	98 dd       	rcall	.-1232   	; 0xdde <prvIsQueueEmpty>
    12ae:	88 23       	and	r24, r24
    12b0:	59 f0       	breq	.+22     	; 0x12c8 <xQueueReceive+0xd6>
    12b2:	6c 81       	ldd	r22, Y+4	; 0x04
    12b4:	7d 81       	ldd	r23, Y+5	; 0x05
    12b6:	c6 01       	movw	r24, r12
    12b8:	0c d6       	rcall	.+3096   	; 0x1ed2 <vTaskPlaceOnEventList>
    12ba:	c8 01       	movw	r24, r16
    12bc:	14 de       	rcall	.-984    	; 0xee6 <prvUnlockQueue>
    12be:	ed d4       	rcall	.+2522   	; 0x1c9a <xTaskResumeAll>
    12c0:	81 11       	cpse	r24, r1
    12c2:	b2 cf       	rjmp	.-156    	; 0x1228 <xQueueReceive+0x36>
    12c4:	c5 dc       	rcall	.-1654   	; 0xc50 <vPortYield>
    12c6:	b0 cf       	rjmp	.-160    	; 0x1228 <xQueueReceive+0x36>
    12c8:	c8 01       	movw	r24, r16
    12ca:	0d de       	rcall	.-998    	; 0xee6 <prvUnlockQueue>
    12cc:	e6 d4       	rcall	.+2508   	; 0x1c9a <xTaskResumeAll>
    12ce:	ac cf       	rjmp	.-168    	; 0x1228 <xQueueReceive+0x36>
    12d0:	c8 01       	movw	r24, r16
    12d2:	09 de       	rcall	.-1006   	; 0xee6 <prvUnlockQueue>
    12d4:	e2 d4       	rcall	.+2500   	; 0x1c9a <xTaskResumeAll>
    12d6:	c8 01       	movw	r24, r16
    12d8:	82 dd       	rcall	.-1276   	; 0xdde <prvIsQueueEmpty>
    12da:	88 23       	and	r24, r24
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <xQueueReceive+0xee>
    12de:	a4 cf       	rjmp	.-184    	; 0x1228 <xQueueReceive+0x36>
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	df 91       	pop	r29
    12ee:	cf 91       	pop	r28
    12f0:	1f 91       	pop	r17
    12f2:	0f 91       	pop	r16
    12f4:	ff 90       	pop	r15
    12f6:	ef 90       	pop	r14
    12f8:	df 90       	pop	r13
    12fa:	cf 90       	pop	r12
    12fc:	bf 90       	pop	r11
    12fe:	af 90       	pop	r10
    1300:	9f 90       	pop	r9
    1302:	08 95       	ret

00001304 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    1304:	cf 93       	push	r28
    1306:	df 93       	push	r29
    1308:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	f8 94       	cli
    130e:	0f 92       	push	r0
    1310:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1312:	8f 3f       	cpi	r24, 0xFF	; 255
    1314:	09 f4       	brne	.+2      	; 0x1318 <vQueueWaitForMessageRestricted+0x14>
    1316:	1d 8e       	std	Y+29, r1	; 0x1d
    1318:	8e 8d       	ldd	r24, Y+30	; 0x1e
    131a:	8f 3f       	cpi	r24, 0xFF	; 255
    131c:	09 f4       	brne	.+2      	; 0x1320 <vQueueWaitForMessageRestricted+0x1c>
    131e:	1e 8e       	std	Y+30, r1	; 0x1e
    1320:	0f 90       	pop	r0
    1322:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1324:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1326:	81 11       	cpse	r24, r1
    1328:	03 c0       	rjmp	.+6      	; 0x1330 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    132a:	ce 01       	movw	r24, r28
    132c:	41 96       	adiw	r24, 0x11	; 17
    132e:	e2 d5       	rcall	.+3012   	; 0x1ef4 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1330:	ce 01       	movw	r24, r28
    1332:	d9 dd       	rcall	.-1102   	; 0xee6 <prvUnlockQueue>
    }
    1334:	df 91       	pop	r29
    1336:	cf 91       	pop	r28
    1338:	08 95       	ret

0000133a <prvBytesInBuffer>:
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    133a:	fc 01       	movw	r30, r24
    133c:	44 81       	ldd	r20, Z+4	; 0x04
    133e:	55 81       	ldd	r21, Z+5	; 0x05
    1340:	22 81       	ldd	r18, Z+2	; 0x02
    1342:	33 81       	ldd	r19, Z+3	; 0x03
    1344:	24 0f       	add	r18, r20
    1346:	35 1f       	adc	r19, r21
    1348:	80 81       	ld	r24, Z
    134a:	91 81       	ldd	r25, Z+1	; 0x01
    134c:	b9 01       	movw	r22, r18
    134e:	68 1b       	sub	r22, r24
    1350:	79 0b       	sbc	r23, r25
    1352:	cb 01       	movw	r24, r22
    1354:	64 17       	cp	r22, r20
    1356:	75 07       	cpc	r23, r21
    1358:	10 f0       	brcs	.+4      	; 0x135e <prvBytesInBuffer+0x24>
    135a:	84 1b       	sub	r24, r20
    135c:	95 0b       	sbc	r25, r21
    135e:	08 95       	ret

00001360 <prvWriteBytesToBuffer>:
    1360:	af 92       	push	r10
    1362:	bf 92       	push	r11
    1364:	cf 92       	push	r12
    1366:	df 92       	push	r13
    1368:	ef 92       	push	r14
    136a:	ff 92       	push	r15
    136c:	0f 93       	push	r16
    136e:	1f 93       	push	r17
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
    1374:	6c 01       	movw	r12, r24
    1376:	5b 01       	movw	r10, r22
    1378:	7a 01       	movw	r14, r20
    137a:	fc 01       	movw	r30, r24
    137c:	c2 81       	ldd	r28, Z+2	; 0x02
    137e:	d3 81       	ldd	r29, Z+3	; 0x03
    1380:	04 81       	ldd	r16, Z+4	; 0x04
    1382:	15 81       	ldd	r17, Z+5	; 0x05
    1384:	0c 1b       	sub	r16, r28
    1386:	1d 0b       	sbc	r17, r29
    1388:	40 17       	cp	r20, r16
    138a:	51 07       	cpc	r21, r17
    138c:	08 f4       	brcc	.+2      	; 0x1390 <prvWriteBytesToBuffer+0x30>
    138e:	8a 01       	movw	r16, r20
    1390:	f6 01       	movw	r30, r12
    1392:	84 85       	ldd	r24, Z+12	; 0x0c
    1394:	95 85       	ldd	r25, Z+13	; 0x0d
    1396:	a8 01       	movw	r20, r16
    1398:	b5 01       	movw	r22, r10
    139a:	8c 0f       	add	r24, r28
    139c:	9d 1f       	adc	r25, r29
    139e:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <memcpy>
    13a2:	0e 15       	cp	r16, r14
    13a4:	1f 05       	cpc	r17, r15
    13a6:	58 f4       	brcc	.+22     	; 0x13be <prvWriteBytesToBuffer+0x5e>
    13a8:	a7 01       	movw	r20, r14
    13aa:	40 1b       	sub	r20, r16
    13ac:	51 0b       	sbc	r21, r17
    13ae:	b5 01       	movw	r22, r10
    13b0:	60 0f       	add	r22, r16
    13b2:	71 1f       	adc	r23, r17
    13b4:	f6 01       	movw	r30, r12
    13b6:	84 85       	ldd	r24, Z+12	; 0x0c
    13b8:	95 85       	ldd	r25, Z+13	; 0x0d
    13ba:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <memcpy>
    13be:	ce 01       	movw	r24, r28
    13c0:	8e 0d       	add	r24, r14
    13c2:	9f 1d       	adc	r25, r15
    13c4:	f6 01       	movw	r30, r12
    13c6:	24 81       	ldd	r18, Z+4	; 0x04
    13c8:	35 81       	ldd	r19, Z+5	; 0x05
    13ca:	82 17       	cp	r24, r18
    13cc:	93 07       	cpc	r25, r19
    13ce:	10 f0       	brcs	.+4      	; 0x13d4 <prvWriteBytesToBuffer+0x74>
    13d0:	82 1b       	sub	r24, r18
    13d2:	93 0b       	sbc	r25, r19
    13d4:	f6 01       	movw	r30, r12
    13d6:	93 83       	std	Z+3, r25	; 0x03
    13d8:	82 83       	std	Z+2, r24	; 0x02
    13da:	c7 01       	movw	r24, r14
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
    13e0:	1f 91       	pop	r17
    13e2:	0f 91       	pop	r16
    13e4:	ff 90       	pop	r15
    13e6:	ef 90       	pop	r14
    13e8:	df 90       	pop	r13
    13ea:	cf 90       	pop	r12
    13ec:	bf 90       	pop	r11
    13ee:	af 90       	pop	r10
    13f0:	08 95       	ret

000013f2 <prvWriteMessageToBuffer>:
    13f2:	cf 92       	push	r12
    13f4:	df 92       	push	r13
    13f6:	ef 92       	push	r14
    13f8:	ff 92       	push	r15
    13fa:	0f 93       	push	r16
    13fc:	1f 93       	push	r17
    13fe:	cf 93       	push	r28
    1400:	df 93       	push	r29
    1402:	1f 92       	push	r1
    1404:	1f 92       	push	r1
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	5a 83       	std	Y+2, r21	; 0x02
    140c:	49 83       	std	Y+1, r20	; 0x01
    140e:	21 15       	cp	r18, r1
    1410:	31 05       	cpc	r19, r1
    1412:	c9 f0       	breq	.+50     	; 0x1446 <prvWriteMessageToBuffer+0x54>
    1414:	6b 01       	movw	r12, r22
    1416:	7c 01       	movw	r14, r24
    1418:	fc 01       	movw	r30, r24
    141a:	86 85       	ldd	r24, Z+14	; 0x0e
    141c:	80 fd       	sbrc	r24, 0
    141e:	08 c0       	rjmp	.+16     	; 0x1430 <prvWriteMessageToBuffer+0x3e>
    1420:	ca 01       	movw	r24, r20
    1422:	24 17       	cp	r18, r20
    1424:	35 07       	cpc	r19, r21
    1426:	08 f4       	brcc	.+2      	; 0x142a <prvWriteMessageToBuffer+0x38>
    1428:	c9 01       	movw	r24, r18
    142a:	9a 83       	std	Y+2, r25	; 0x02
    142c:	89 83       	std	Y+1, r24	; 0x01
    142e:	11 c0       	rjmp	.+34     	; 0x1452 <prvWriteMessageToBuffer+0x60>
    1430:	20 17       	cp	r18, r16
    1432:	31 07       	cpc	r19, r17
    1434:	58 f0       	brcs	.+22     	; 0x144c <prvWriteMessageToBuffer+0x5a>
    1436:	42 e0       	ldi	r20, 0x02	; 2
    1438:	50 e0       	ldi	r21, 0x00	; 0
    143a:	be 01       	movw	r22, r28
    143c:	6f 5f       	subi	r22, 0xFF	; 255
    143e:	7f 4f       	sbci	r23, 0xFF	; 255
    1440:	c7 01       	movw	r24, r14
    1442:	8e df       	rcall	.-228    	; 0x1360 <prvWriteBytesToBuffer>
    1444:	06 c0       	rjmp	.+12     	; 0x1452 <prvWriteMessageToBuffer+0x60>
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	08 c0       	rjmp	.+16     	; 0x145c <prvWriteMessageToBuffer+0x6a>
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	05 c0       	rjmp	.+10     	; 0x145c <prvWriteMessageToBuffer+0x6a>
    1452:	49 81       	ldd	r20, Y+1	; 0x01
    1454:	5a 81       	ldd	r21, Y+2	; 0x02
    1456:	b6 01       	movw	r22, r12
    1458:	c7 01       	movw	r24, r14
    145a:	82 df       	rcall	.-252    	; 0x1360 <prvWriteBytesToBuffer>
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	df 91       	pop	r29
    1462:	cf 91       	pop	r28
    1464:	1f 91       	pop	r17
    1466:	0f 91       	pop	r16
    1468:	ff 90       	pop	r15
    146a:	ef 90       	pop	r14
    146c:	df 90       	pop	r13
    146e:	cf 90       	pop	r12
    1470:	08 95       	ret

00001472 <prvReadBytesFromBuffer>:
    1472:	af 92       	push	r10
    1474:	bf 92       	push	r11
    1476:	cf 92       	push	r12
    1478:	df 92       	push	r13
    147a:	ef 92       	push	r14
    147c:	ff 92       	push	r15
    147e:	0f 93       	push	r16
    1480:	1f 93       	push	r17
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	7c 01       	movw	r14, r24
    1488:	5b 01       	movw	r10, r22
    148a:	e9 01       	movw	r28, r18
    148c:	42 17       	cp	r20, r18
    148e:	53 07       	cpc	r21, r19
    1490:	08 f4       	brcc	.+2      	; 0x1494 <prvReadBytesFromBuffer+0x22>
    1492:	ea 01       	movw	r28, r20
    1494:	20 97       	sbiw	r28, 0x00	; 0
    1496:	79 f1       	breq	.+94     	; 0x14f6 <prvReadBytesFromBuffer+0x84>
    1498:	f7 01       	movw	r30, r14
    149a:	00 81       	ld	r16, Z
    149c:	11 81       	ldd	r17, Z+1	; 0x01
    149e:	c4 80       	ldd	r12, Z+4	; 0x04
    14a0:	d5 80       	ldd	r13, Z+5	; 0x05
    14a2:	c0 1a       	sub	r12, r16
    14a4:	d1 0a       	sbc	r13, r17
    14a6:	cc 15       	cp	r28, r12
    14a8:	dd 05       	cpc	r29, r13
    14aa:	08 f4       	brcc	.+2      	; 0x14ae <prvReadBytesFromBuffer+0x3c>
    14ac:	6e 01       	movw	r12, r28
    14ae:	f7 01       	movw	r30, r14
    14b0:	64 85       	ldd	r22, Z+12	; 0x0c
    14b2:	75 85       	ldd	r23, Z+13	; 0x0d
    14b4:	60 0f       	add	r22, r16
    14b6:	71 1f       	adc	r23, r17
    14b8:	a6 01       	movw	r20, r12
    14ba:	c5 01       	movw	r24, r10
    14bc:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <memcpy>
    14c0:	cc 16       	cp	r12, r28
    14c2:	dd 06       	cpc	r13, r29
    14c4:	58 f4       	brcc	.+22     	; 0x14dc <prvReadBytesFromBuffer+0x6a>
    14c6:	ae 01       	movw	r20, r28
    14c8:	4c 19       	sub	r20, r12
    14ca:	5d 09       	sbc	r21, r13
    14cc:	f7 01       	movw	r30, r14
    14ce:	64 85       	ldd	r22, Z+12	; 0x0c
    14d0:	75 85       	ldd	r23, Z+13	; 0x0d
    14d2:	c5 01       	movw	r24, r10
    14d4:	8c 0d       	add	r24, r12
    14d6:	9d 1d       	adc	r25, r13
    14d8:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <memcpy>
    14dc:	0c 0f       	add	r16, r28
    14de:	1d 1f       	adc	r17, r29
    14e0:	f7 01       	movw	r30, r14
    14e2:	84 81       	ldd	r24, Z+4	; 0x04
    14e4:	95 81       	ldd	r25, Z+5	; 0x05
    14e6:	08 17       	cp	r16, r24
    14e8:	19 07       	cpc	r17, r25
    14ea:	10 f0       	brcs	.+4      	; 0x14f0 <prvReadBytesFromBuffer+0x7e>
    14ec:	08 1b       	sub	r16, r24
    14ee:	19 0b       	sbc	r17, r25
    14f0:	f7 01       	movw	r30, r14
    14f2:	11 83       	std	Z+1, r17	; 0x01
    14f4:	00 83       	st	Z, r16
    14f6:	ce 01       	movw	r24, r28
    14f8:	df 91       	pop	r29
    14fa:	cf 91       	pop	r28
    14fc:	1f 91       	pop	r17
    14fe:	0f 91       	pop	r16
    1500:	ff 90       	pop	r15
    1502:	ef 90       	pop	r14
    1504:	df 90       	pop	r13
    1506:	cf 90       	pop	r12
    1508:	bf 90       	pop	r11
    150a:	af 90       	pop	r10
    150c:	08 95       	ret

0000150e <xStreamBufferGenericCreate>:
    150e:	ef 92       	push	r14
    1510:	ff 92       	push	r15
    1512:	1f 93       	push	r17
    1514:	cf 93       	push	r28
    1516:	df 93       	push	r29
    1518:	eb 01       	movw	r28, r22
    151a:	11 e0       	ldi	r17, 0x01	; 1
    151c:	41 30       	cpi	r20, 0x01	; 1
    151e:	09 f0       	breq	.+2      	; 0x1522 <xStreamBufferGenericCreate+0x14>
    1520:	10 e0       	ldi	r17, 0x00	; 0
    1522:	20 97       	sbiw	r28, 0x00	; 0
    1524:	11 f4       	brne	.+4      	; 0x152a <xStreamBufferGenericCreate+0x1c>
    1526:	c1 e0       	ldi	r28, 0x01	; 1
    1528:	d0 e0       	ldi	r29, 0x00	; 0
    152a:	7c 01       	movw	r14, r24
    152c:	2f ef       	ldi	r18, 0xFF	; 255
    152e:	e2 1a       	sub	r14, r18
    1530:	f2 0a       	sbc	r15, r18
    1532:	41 96       	adiw	r24, 0x11	; 17
    1534:	32 da       	rcall	.-2972   	; 0x99a <pvPortMalloc>
    1536:	00 97       	sbiw	r24, 0x00	; 0
    1538:	81 f0       	breq	.+32     	; 0x155a <xStreamBufferGenericCreate+0x4c>
    153a:	20 e1       	ldi	r18, 0x10	; 16
    153c:	fc 01       	movw	r30, r24
    153e:	11 92       	st	Z+, r1
    1540:	2a 95       	dec	r18
    1542:	e9 f7       	brne	.-6      	; 0x153e <xStreamBufferGenericCreate+0x30>
    1544:	9c 01       	movw	r18, r24
    1546:	20 5f       	subi	r18, 0xF0	; 240
    1548:	3f 4f       	sbci	r19, 0xFF	; 255
    154a:	fc 01       	movw	r30, r24
    154c:	35 87       	std	Z+13, r19	; 0x0d
    154e:	24 87       	std	Z+12, r18	; 0x0c
    1550:	f5 82       	std	Z+5, r15	; 0x05
    1552:	e4 82       	std	Z+4, r14	; 0x04
    1554:	d7 83       	std	Z+7, r29	; 0x07
    1556:	c6 83       	std	Z+6, r28	; 0x06
    1558:	16 87       	std	Z+14, r17	; 0x0e
    155a:	df 91       	pop	r29
    155c:	cf 91       	pop	r28
    155e:	1f 91       	pop	r17
    1560:	ff 90       	pop	r15
    1562:	ef 90       	pop	r14
    1564:	08 95       	ret

00001566 <xStreamBufferReset>:
    1566:	cf 93       	push	r28
    1568:	df 93       	push	r29
    156a:	fc 01       	movw	r30, r24
    156c:	27 85       	ldd	r18, Z+15	; 0x0f
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	f8 94       	cli
    1572:	0f 92       	push	r0
    1574:	80 85       	ldd	r24, Z+8	; 0x08
    1576:	91 85       	ldd	r25, Z+9	; 0x09
    1578:	89 2b       	or	r24, r25
    157a:	d1 f4       	brne	.+52     	; 0x15b0 <xStreamBufferReset+0x4a>
    157c:	82 85       	ldd	r24, Z+10	; 0x0a
    157e:	93 85       	ldd	r25, Z+11	; 0x0b
    1580:	89 2b       	or	r24, r25
    1582:	c1 f4       	brne	.+48     	; 0x15b4 <xStreamBufferReset+0x4e>
    1584:	86 85       	ldd	r24, Z+14	; 0x0e
    1586:	46 81       	ldd	r20, Z+6	; 0x06
    1588:	57 81       	ldd	r21, Z+7	; 0x07
    158a:	64 81       	ldd	r22, Z+4	; 0x04
    158c:	75 81       	ldd	r23, Z+5	; 0x05
    158e:	a4 85       	ldd	r26, Z+12	; 0x0c
    1590:	b5 85       	ldd	r27, Z+13	; 0x0d
    1592:	90 e1       	ldi	r25, 0x10	; 16
    1594:	ef 01       	movw	r28, r30
    1596:	19 92       	st	Y+, r1
    1598:	9a 95       	dec	r25
    159a:	e9 f7       	brne	.-6      	; 0x1596 <xStreamBufferReset+0x30>
    159c:	b5 87       	std	Z+13, r27	; 0x0d
    159e:	a4 87       	std	Z+12, r26	; 0x0c
    15a0:	75 83       	std	Z+5, r23	; 0x05
    15a2:	64 83       	std	Z+4, r22	; 0x04
    15a4:	57 83       	std	Z+7, r21	; 0x07
    15a6:	46 83       	std	Z+6, r20	; 0x06
    15a8:	86 87       	std	Z+14, r24	; 0x0e
    15aa:	27 87       	std	Z+15, r18	; 0x0f
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	03 c0       	rjmp	.+6      	; 0x15b6 <xStreamBufferReset+0x50>
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	01 c0       	rjmp	.+2      	; 0x15b6 <xStreamBufferReset+0x50>
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	0f 90       	pop	r0
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	df 91       	pop	r29
    15bc:	cf 91       	pop	r28
    15be:	08 95       	ret

000015c0 <xStreamBufferSpacesAvailable>:
    15c0:	fc 01       	movw	r30, r24
    15c2:	24 81       	ldd	r18, Z+4	; 0x04
    15c4:	35 81       	ldd	r19, Z+5	; 0x05
    15c6:	80 81       	ld	r24, Z
    15c8:	91 81       	ldd	r25, Z+1	; 0x01
    15ca:	42 81       	ldd	r20, Z+2	; 0x02
    15cc:	53 81       	ldd	r21, Z+3	; 0x03
    15ce:	82 0f       	add	r24, r18
    15d0:	93 1f       	adc	r25, r19
    15d2:	01 97       	sbiw	r24, 0x01	; 1
    15d4:	84 1b       	sub	r24, r20
    15d6:	95 0b       	sbc	r25, r21
    15d8:	82 17       	cp	r24, r18
    15da:	93 07       	cpc	r25, r19
    15dc:	10 f0       	brcs	.+4      	; 0x15e2 <xStreamBufferSpacesAvailable+0x22>
    15de:	82 1b       	sub	r24, r18
    15e0:	93 0b       	sbc	r25, r19
    15e2:	08 95       	ret

000015e4 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    15e4:	af 92       	push	r10
    15e6:	bf 92       	push	r11
    15e8:	cf 92       	push	r12
    15ea:	df 92       	push	r13
    15ec:	ef 92       	push	r14
    15ee:	ff 92       	push	r15
    15f0:	0f 93       	push	r16
    15f2:	1f 93       	push	r17
    15f4:	cf 93       	push	r28
    15f6:	df 93       	push	r29
    15f8:	ec 01       	movw	r28, r24
    15fa:	5b 01       	movw	r10, r22
    15fc:	6a 01       	movw	r12, r20
    15fe:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1600:	8e 85       	ldd	r24, Y+14	; 0x0e
    1602:	80 ff       	sbrs	r24, 0
    1604:	04 c0       	rjmp	.+8      	; 0x160e <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1606:	8a 01       	movw	r16, r20
    1608:	0e 5f       	subi	r16, 0xFE	; 254
    160a:	1f 4f       	sbci	r17, 0xFF	; 255
    160c:	01 c0       	rjmp	.+2      	; 0x1610 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    160e:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1610:	ce 01       	movw	r24, r28
    1612:	d6 df       	rcall	.-84     	; 0x15c0 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1614:	9c 01       	movw	r18, r24
    1616:	a6 01       	movw	r20, r12
    1618:	b5 01       	movw	r22, r10
    161a:	ce 01       	movw	r24, r28
    161c:	ea de       	rcall	.-556    	; 0x13f2 <prvWriteMessageToBuffer>
    161e:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1620:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1622:	b1 f0       	breq	.+44     	; 0x1650 <xStreamBufferSendFromISR+0x6c>
    1624:	ce 01       	movw	r24, r28
    1626:	89 de       	rcall	.-750    	; 0x133a <prvBytesInBuffer>
    1628:	2e 81       	ldd	r18, Y+6	; 0x06
    162a:	3f 81       	ldd	r19, Y+7	; 0x07
    162c:	82 17       	cp	r24, r18
    162e:	93 07       	cpc	r25, r19
    1630:	78 f0       	brcs	.+30     	; 0x1650 <xStreamBufferSendFromISR+0x6c>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1632:	88 85       	ldd	r24, Y+8	; 0x08
    1634:	99 85       	ldd	r25, Y+9	; 0x09
    1636:	89 2b       	or	r24, r25
    1638:	59 f0       	breq	.+22     	; 0x1650 <xStreamBufferSendFromISR+0x6c>
    163a:	88 85       	ldd	r24, Y+8	; 0x08
    163c:	99 85       	ldd	r25, Y+9	; 0x09
    163e:	00 e0       	ldi	r16, 0x00	; 0
    1640:	10 e0       	ldi	r17, 0x00	; 0
    1642:	20 e0       	ldi	r18, 0x00	; 0
    1644:	40 e0       	ldi	r20, 0x00	; 0
    1646:	50 e0       	ldi	r21, 0x00	; 0
    1648:	ba 01       	movw	r22, r20
    164a:	4c d6       	rcall	.+3224   	; 0x22e4 <xTaskGenericNotifyFromISR>
    164c:	19 86       	std	Y+9, r1	; 0x09
    164e:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1650:	c6 01       	movw	r24, r12
    1652:	df 91       	pop	r29
    1654:	cf 91       	pop	r28
    1656:	1f 91       	pop	r17
    1658:	0f 91       	pop	r16
    165a:	ff 90       	pop	r15
    165c:	ef 90       	pop	r14
    165e:	df 90       	pop	r13
    1660:	cf 90       	pop	r12
    1662:	bf 90       	pop	r11
    1664:	af 90       	pop	r10
    1666:	08 95       	ret

00001668 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1668:	6f 92       	push	r6
    166a:	7f 92       	push	r7
    166c:	8f 92       	push	r8
    166e:	9f 92       	push	r9
    1670:	af 92       	push	r10
    1672:	bf 92       	push	r11
    1674:	cf 92       	push	r12
    1676:	df 92       	push	r13
    1678:	ef 92       	push	r14
    167a:	ff 92       	push	r15
    167c:	0f 93       	push	r16
    167e:	1f 93       	push	r17
    1680:	cf 93       	push	r28
    1682:	df 93       	push	r29
    1684:	1f 92       	push	r1
    1686:	1f 92       	push	r1
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
    168c:	6c 01       	movw	r12, r24
    168e:	3b 01       	movw	r6, r22
    1690:	4a 01       	movw	r8, r20
    1692:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1694:	fc 01       	movw	r30, r24
    1696:	86 85       	ldd	r24, Z+14	; 0x0e
    1698:	80 fd       	sbrc	r24, 0
    169a:	03 c0       	rjmp	.+6      	; 0x16a2 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    169c:	a1 2c       	mov	r10, r1
    169e:	b1 2c       	mov	r11, r1
    16a0:	04 c0       	rjmp	.+8      	; 0x16aa <xStreamBufferReceive+0x42>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    16a2:	68 94       	set
    16a4:	aa 24       	eor	r10, r10
    16a6:	a1 f8       	bld	r10, 1
    16a8:	b1 2c       	mov	r11, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    16aa:	e1 14       	cp	r14, r1
    16ac:	f1 04       	cpc	r15, r1
    16ae:	29 f1       	breq	.+74     	; 0x16fa <xStreamBufferReceive+0x92>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    16b0:	0f b6       	in	r0, 0x3f	; 63
    16b2:	f8 94       	cli
    16b4:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    16b6:	c6 01       	movw	r24, r12
    16b8:	40 de       	rcall	.-896    	; 0x133a <prvBytesInBuffer>
    16ba:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    16bc:	a8 16       	cp	r10, r24
    16be:	b9 06       	cpc	r11, r25
    16c0:	38 f0       	brcs	.+14     	; 0x16d0 <xStreamBufferReceive+0x68>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	90 e0       	ldi	r25, 0x00	; 0

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    16c6:	9e d6       	rcall	.+3388   	; 0x2404 <xTaskNotifyStateClear>
    16c8:	b9 d4       	rcall	.+2418   	; 0x203c <xTaskGetCurrentTaskHandle>
    16ca:	f6 01       	movw	r30, r12
    16cc:	91 87       	std	Z+9, r25	; 0x09
    16ce:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    16d0:	0f 90       	pop	r0
    16d2:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    16d4:	a0 16       	cp	r10, r16
    16d6:	b1 06       	cpc	r11, r17
    16d8:	b0 f0       	brcs	.+44     	; 0x1706 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    16da:	00 e0       	ldi	r16, 0x00	; 0
    16dc:	10 e0       	ldi	r17, 0x00	; 0
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	a9 01       	movw	r20, r18
    16e4:	60 e0       	ldi	r22, 0x00	; 0
    16e6:	70 e0       	ldi	r23, 0x00	; 0
    16e8:	cb 01       	movw	r24, r22
    16ea:	fb d4       	rcall	.+2550   	; 0x20e2 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    16ec:	f6 01       	movw	r30, r12
    16ee:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    16f0:	10 86       	std	Z+8, r1	; 0x08
    16f2:	c6 01       	movw	r24, r12
    16f4:	22 de       	rcall	.-956    	; 0x133a <prvBytesInBuffer>
    16f6:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    16f8:	03 c0       	rjmp	.+6      	; 0x1700 <xStreamBufferReceive+0x98>
    16fa:	c6 01       	movw	r24, r12
    16fc:	1e de       	rcall	.-964    	; 0x133a <prvBytesInBuffer>
    16fe:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1700:	a0 16       	cp	r10, r16
    1702:	b1 06       	cpc	r11, r17
    1704:	b8 f5       	brcc	.+110    	; 0x1774 <xStreamBufferReceive+0x10c>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    1706:	a1 14       	cp	r10, r1
    1708:	b1 04       	cpc	r11, r1
    170a:	c1 f0       	breq	.+48     	; 0x173c <xStreamBufferReceive+0xd4>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    170c:	f6 01       	movw	r30, r12
    170e:	e0 80       	ld	r14, Z
    1710:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    1712:	98 01       	movw	r18, r16
    1714:	a5 01       	movw	r20, r10
    1716:	be 01       	movw	r22, r28
    1718:	6f 5f       	subi	r22, 0xFF	; 255
    171a:	7f 4f       	sbci	r23, 0xFF	; 255
    171c:	c6 01       	movw	r24, r12
    171e:	a9 de       	rcall	.-686    	; 0x1472 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    1720:	89 81       	ldd	r24, Y+1	; 0x01
    1722:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    1724:	0a 19       	sub	r16, r10
    1726:	1b 09       	sbc	r17, r11

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    1728:	88 16       	cp	r8, r24
    172a:	99 06       	cpc	r9, r25
    172c:	30 f4       	brcc	.+12     	; 0x173a <xStreamBufferReceive+0xd2>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    172e:	f6 01       	movw	r30, r12
    1730:	f1 82       	std	Z+1, r15	; 0x01
    1732:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    1734:	81 2c       	mov	r8, r1
    1736:	91 2c       	mov	r9, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    1738:	01 c0       	rjmp	.+2      	; 0x173c <xStreamBufferReceive+0xd4>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    173a:	4c 01       	movw	r8, r24
    173c:	98 01       	movw	r18, r16
    173e:	a4 01       	movw	r20, r8
    1740:	b3 01       	movw	r22, r6
    1742:	c6 01       	movw	r24, r12
    1744:	96 de       	rcall	.-724    	; 0x1472 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1746:	7c 01       	movw	r14, r24
    1748:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    174a:	b1 f0       	breq	.+44     	; 0x1778 <xStreamBufferReceive+0x110>
    174c:	dc d1       	rcall	.+952    	; 0x1b06 <vTaskSuspendAll>
    174e:	f6 01       	movw	r30, r12
    1750:	82 85       	ldd	r24, Z+10	; 0x0a
    1752:	93 85       	ldd	r25, Z+11	; 0x0b
    1754:	89 2b       	or	r24, r25
    1756:	61 f0       	breq	.+24     	; 0x1770 <xStreamBufferReceive+0x108>
    1758:	82 85       	ldd	r24, Z+10	; 0x0a
    175a:	93 85       	ldd	r25, Z+11	; 0x0b
    175c:	00 e0       	ldi	r16, 0x00	; 0
    175e:	10 e0       	ldi	r17, 0x00	; 0
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	40 e0       	ldi	r20, 0x00	; 0
    1764:	50 e0       	ldi	r21, 0x00	; 0
    1766:	ba 01       	movw	r22, r20
    1768:	3f d5       	rcall	.+2686   	; 0x21e8 <xTaskGenericNotify>
    176a:	f6 01       	movw	r30, r12
    176c:	13 86       	std	Z+11, r1	; 0x0b
    176e:	12 86       	std	Z+10, r1	; 0x0a
    1770:	94 d2       	rcall	.+1320   	; 0x1c9a <xTaskResumeAll>
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <xStreamBufferReceive+0x110>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1774:	e1 2c       	mov	r14, r1
    1776:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1778:	c7 01       	movw	r24, r14
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	df 91       	pop	r29
    1780:	cf 91       	pop	r28
    1782:	1f 91       	pop	r17
    1784:	0f 91       	pop	r16
    1786:	ff 90       	pop	r15
    1788:	ef 90       	pop	r14
    178a:	df 90       	pop	r13
    178c:	cf 90       	pop	r12
    178e:	bf 90       	pop	r11
    1790:	af 90       	pop	r10
    1792:	9f 90       	pop	r9
    1794:	8f 90       	pop	r8
    1796:	7f 90       	pop	r7
    1798:	6f 90       	pop	r6
    179a:	08 95       	ret

0000179c <prvResetNextTaskUnblockTime>:
    179c:	e0 91 06 08 	lds	r30, 0x0806	; 0x800806 <pxDelayedTaskList>
    17a0:	f0 91 07 08 	lds	r31, 0x0807	; 0x800807 <pxDelayedTaskList+0x1>
    17a4:	80 81       	ld	r24, Z
    17a6:	81 11       	cpse	r24, r1
    17a8:	07 c0       	rjmp	.+14     	; 0x17b8 <prvResetNextTaskUnblockTime+0x1c>
    17aa:	8f ef       	ldi	r24, 0xFF	; 255
    17ac:	9f ef       	ldi	r25, 0xFF	; 255
    17ae:	90 93 de 07 	sts	0x07DE, r25	; 0x8007de <xNextTaskUnblockTime+0x1>
    17b2:	80 93 dd 07 	sts	0x07DD, r24	; 0x8007dd <xNextTaskUnblockTime>
    17b6:	08 95       	ret
    17b8:	e0 91 06 08 	lds	r30, 0x0806	; 0x800806 <pxDelayedTaskList>
    17bc:	f0 91 07 08 	lds	r31, 0x0807	; 0x800807 <pxDelayedTaskList+0x1>
    17c0:	05 80       	ldd	r0, Z+5	; 0x05
    17c2:	f6 81       	ldd	r31, Z+6	; 0x06
    17c4:	e0 2d       	mov	r30, r0
    17c6:	06 80       	ldd	r0, Z+6	; 0x06
    17c8:	f7 81       	ldd	r31, Z+7	; 0x07
    17ca:	e0 2d       	mov	r30, r0
    17cc:	82 81       	ldd	r24, Z+2	; 0x02
    17ce:	93 81       	ldd	r25, Z+3	; 0x03
    17d0:	90 93 de 07 	sts	0x07DE, r25	; 0x8007de <xNextTaskUnblockTime+0x1>
    17d4:	80 93 dd 07 	sts	0x07DD, r24	; 0x8007dd <xNextTaskUnblockTime>
    17d8:	08 95       	ret

000017da <prvAddCurrentTaskToDelayedList>:
    17da:	ff 92       	push	r15
    17dc:	0f 93       	push	r16
    17de:	1f 93       	push	r17
    17e0:	cf 93       	push	r28
    17e2:	df 93       	push	r29
    17e4:	ec 01       	movw	r28, r24
    17e6:	f6 2e       	mov	r15, r22
    17e8:	00 91 e5 07 	lds	r16, 0x07E5	; 0x8007e5 <xTickCount>
    17ec:	10 91 e6 07 	lds	r17, 0x07E6	; 0x8007e6 <xTickCount+0x1>
    17f0:	80 91 3e 08 	lds	r24, 0x083E	; 0x80083e <pxCurrentTCB>
    17f4:	90 91 3f 08 	lds	r25, 0x083F	; 0x80083f <pxCurrentTCB+0x1>
    17f8:	02 96       	adiw	r24, 0x02	; 2
    17fa:	55 d9       	rcall	.-3414   	; 0xaa6 <uxListRemove>
    17fc:	cf 3f       	cpi	r28, 0xFF	; 255
    17fe:	8f ef       	ldi	r24, 0xFF	; 255
    1800:	d8 07       	cpc	r29, r24
    1802:	61 f4       	brne	.+24     	; 0x181c <prvAddCurrentTaskToDelayedList+0x42>
    1804:	ff 20       	and	r15, r15
    1806:	51 f0       	breq	.+20     	; 0x181c <prvAddCurrentTaskToDelayedList+0x42>
    1808:	60 91 3e 08 	lds	r22, 0x083E	; 0x80083e <pxCurrentTCB>
    180c:	70 91 3f 08 	lds	r23, 0x083F	; 0x80083f <pxCurrentTCB+0x1>
    1810:	6e 5f       	subi	r22, 0xFE	; 254
    1812:	7f 4f       	sbci	r23, 0xFF	; 255
    1814:	88 ee       	ldi	r24, 0xE8	; 232
    1816:	97 e0       	ldi	r25, 0x07	; 7
    1818:	f4 d8       	rcall	.-3608   	; 0xa02 <vListInsertEnd>
    181a:	2d c0       	rjmp	.+90     	; 0x1876 <prvAddCurrentTaskToDelayedList+0x9c>
    181c:	c0 0f       	add	r28, r16
    181e:	d1 1f       	adc	r29, r17
    1820:	e0 91 3e 08 	lds	r30, 0x083E	; 0x80083e <pxCurrentTCB>
    1824:	f0 91 3f 08 	lds	r31, 0x083F	; 0x80083f <pxCurrentTCB+0x1>
    1828:	d3 83       	std	Z+3, r29	; 0x03
    182a:	c2 83       	std	Z+2, r28	; 0x02
    182c:	c0 17       	cp	r28, r16
    182e:	d1 07       	cpc	r29, r17
    1830:	60 f4       	brcc	.+24     	; 0x184a <prvAddCurrentTaskToDelayedList+0x70>
    1832:	60 91 3e 08 	lds	r22, 0x083E	; 0x80083e <pxCurrentTCB>
    1836:	70 91 3f 08 	lds	r23, 0x083F	; 0x80083f <pxCurrentTCB+0x1>
    183a:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <pxOverflowDelayedTaskList>
    183e:	90 91 05 08 	lds	r25, 0x0805	; 0x800805 <pxOverflowDelayedTaskList+0x1>
    1842:	6e 5f       	subi	r22, 0xFE	; 254
    1844:	7f 4f       	sbci	r23, 0xFF	; 255
    1846:	fe d8       	rcall	.-3588   	; 0xa44 <vListInsert>
    1848:	16 c0       	rjmp	.+44     	; 0x1876 <prvAddCurrentTaskToDelayedList+0x9c>
    184a:	60 91 3e 08 	lds	r22, 0x083E	; 0x80083e <pxCurrentTCB>
    184e:	70 91 3f 08 	lds	r23, 0x083F	; 0x80083f <pxCurrentTCB+0x1>
    1852:	80 91 06 08 	lds	r24, 0x0806	; 0x800806 <pxDelayedTaskList>
    1856:	90 91 07 08 	lds	r25, 0x0807	; 0x800807 <pxDelayedTaskList+0x1>
    185a:	6e 5f       	subi	r22, 0xFE	; 254
    185c:	7f 4f       	sbci	r23, 0xFF	; 255
    185e:	f2 d8       	rcall	.-3612   	; 0xa44 <vListInsert>
    1860:	80 91 dd 07 	lds	r24, 0x07DD	; 0x8007dd <xNextTaskUnblockTime>
    1864:	90 91 de 07 	lds	r25, 0x07DE	; 0x8007de <xNextTaskUnblockTime+0x1>
    1868:	c8 17       	cp	r28, r24
    186a:	d9 07       	cpc	r29, r25
    186c:	20 f4       	brcc	.+8      	; 0x1876 <prvAddCurrentTaskToDelayedList+0x9c>
    186e:	d0 93 de 07 	sts	0x07DE, r29	; 0x8007de <xNextTaskUnblockTime+0x1>
    1872:	c0 93 dd 07 	sts	0x07DD, r28	; 0x8007dd <xNextTaskUnblockTime>
    1876:	df 91       	pop	r29
    1878:	cf 91       	pop	r28
    187a:	1f 91       	pop	r17
    187c:	0f 91       	pop	r16
    187e:	ff 90       	pop	r15
    1880:	08 95       	ret

00001882 <xTaskCreate>:
    1882:	4f 92       	push	r4
    1884:	5f 92       	push	r5
    1886:	6f 92       	push	r6
    1888:	7f 92       	push	r7
    188a:	8f 92       	push	r8
    188c:	9f 92       	push	r9
    188e:	af 92       	push	r10
    1890:	bf 92       	push	r11
    1892:	cf 92       	push	r12
    1894:	df 92       	push	r13
    1896:	ef 92       	push	r14
    1898:	ff 92       	push	r15
    189a:	0f 93       	push	r16
    189c:	cf 93       	push	r28
    189e:	df 93       	push	r29
    18a0:	4c 01       	movw	r8, r24
    18a2:	6b 01       	movw	r12, r22
    18a4:	5a 01       	movw	r10, r20
    18a6:	29 01       	movw	r4, r18
    18a8:	ca 01       	movw	r24, r20
    18aa:	77 d8       	rcall	.-3858   	; 0x99a <pvPortMalloc>
    18ac:	3c 01       	movw	r6, r24
    18ae:	89 2b       	or	r24, r25
    18b0:	09 f4       	brne	.+2      	; 0x18b4 <xTaskCreate+0x32>
    18b2:	e6 c0       	rjmp	.+460    	; 0x1a80 <xTaskCreate+0x1fe>
    18b4:	8c e2       	ldi	r24, 0x2C	; 44
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	70 d8       	rcall	.-3872   	; 0x99a <pvPortMalloc>
    18ba:	ec 01       	movw	r28, r24
    18bc:	89 2b       	or	r24, r25
    18be:	99 f0       	breq	.+38     	; 0x18e6 <xTaskCreate+0x64>
    18c0:	78 8e       	std	Y+24, r7	; 0x18
    18c2:	6f 8a       	std	Y+23, r6	; 0x17
    18c4:	a5 01       	movw	r20, r10
    18c6:	65 ea       	ldi	r22, 0xA5	; 165
    18c8:	70 e0       	ldi	r23, 0x00	; 0
    18ca:	c3 01       	movw	r24, r6
    18cc:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <memset>
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	a8 1a       	sub	r10, r24
    18d4:	b1 08       	sbc	r11, r1
    18d6:	8f 89       	ldd	r24, Y+23	; 0x17
    18d8:	98 8d       	ldd	r25, Y+24	; 0x18
    18da:	a8 0e       	add	r10, r24
    18dc:	b9 1e       	adc	r11, r25
    18de:	c1 14       	cp	r12, r1
    18e0:	d1 04       	cpc	r13, r1
    18e2:	21 f4       	brne	.+8      	; 0x18ec <xTaskCreate+0x6a>
    18e4:	1f c0       	rjmp	.+62     	; 0x1924 <xTaskCreate+0xa2>
    18e6:	c3 01       	movw	r24, r6
    18e8:	6b d8       	rcall	.-3882   	; 0x9c0 <vPortFree>
    18ea:	ca c0       	rjmp	.+404    	; 0x1a80 <xTaskCreate+0x1fe>
    18ec:	d6 01       	movw	r26, r12
    18ee:	8c 91       	ld	r24, X
    18f0:	89 8f       	std	Y+25, r24	; 0x19
    18f2:	8c 91       	ld	r24, X
    18f4:	88 23       	and	r24, r24
    18f6:	a1 f0       	breq	.+40     	; 0x1920 <xTaskCreate+0x9e>
    18f8:	ae 01       	movw	r20, r28
    18fa:	46 5e       	subi	r20, 0xE6	; 230
    18fc:	5f 4f       	sbci	r21, 0xFF	; 255
    18fe:	f6 01       	movw	r30, r12
    1900:	31 96       	adiw	r30, 0x01	; 1
    1902:	b8 e0       	ldi	r27, 0x08	; 8
    1904:	cb 0e       	add	r12, r27
    1906:	d1 1c       	adc	r13, r1
    1908:	cf 01       	movw	r24, r30
    190a:	21 91       	ld	r18, Z+
    190c:	da 01       	movw	r26, r20
    190e:	2d 93       	st	X+, r18
    1910:	ad 01       	movw	r20, r26
    1912:	dc 01       	movw	r26, r24
    1914:	8c 91       	ld	r24, X
    1916:	88 23       	and	r24, r24
    1918:	19 f0       	breq	.+6      	; 0x1920 <xTaskCreate+0x9e>
    191a:	ec 15       	cp	r30, r12
    191c:	fd 05       	cpc	r31, r13
    191e:	a1 f7       	brne	.-24     	; 0x1908 <xTaskCreate+0x86>
    1920:	18 a2       	std	Y+32, r1	; 0x20
    1922:	01 c0       	rjmp	.+2      	; 0x1926 <xTaskCreate+0xa4>
    1924:	19 8e       	std	Y+25, r1	; 0x19
    1926:	04 30       	cpi	r16, 0x04	; 4
    1928:	08 f0       	brcs	.+2      	; 0x192c <xTaskCreate+0xaa>
    192a:	03 e0       	ldi	r16, 0x03	; 3
    192c:	0e 8b       	std	Y+22, r16	; 0x16
    192e:	0b a3       	std	Y+35, r16	; 0x23
    1930:	1c a2       	std	Y+36, r1	; 0x24
    1932:	6e 01       	movw	r12, r28
    1934:	b2 e0       	ldi	r27, 0x02	; 2
    1936:	cb 0e       	add	r12, r27
    1938:	d1 1c       	adc	r13, r1
    193a:	c6 01       	movw	r24, r12
    193c:	5e d8       	rcall	.-3908   	; 0x9fa <vListInitialiseItem>
    193e:	ce 01       	movw	r24, r28
    1940:	0c 96       	adiw	r24, 0x0c	; 12
    1942:	5b d8       	rcall	.-3914   	; 0x9fa <vListInitialiseItem>
    1944:	d9 87       	std	Y+9, r29	; 0x09
    1946:	c8 87       	std	Y+8, r28	; 0x08
    1948:	84 e0       	ldi	r24, 0x04	; 4
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	80 1b       	sub	r24, r16
    194e:	91 09       	sbc	r25, r1
    1950:	9d 87       	std	Y+13, r25	; 0x0d
    1952:	8c 87       	std	Y+12, r24	; 0x0c
    1954:	db 8b       	std	Y+19, r29	; 0x13
    1956:	ca 8b       	std	Y+18, r28	; 0x12
    1958:	1e a2       	std	Y+38, r1	; 0x26
    195a:	1d a2       	std	Y+37, r1	; 0x25
    195c:	1f a2       	std	Y+39, r1	; 0x27
    195e:	18 a6       	std	Y+40, r1	; 0x28
    1960:	19 a6       	std	Y+41, r1	; 0x29
    1962:	1a a6       	std	Y+42, r1	; 0x2a
    1964:	1b a6       	std	Y+43, r1	; 0x2b
    1966:	a2 01       	movw	r20, r4
    1968:	b4 01       	movw	r22, r8
    196a:	c5 01       	movw	r24, r10
    196c:	c3 d8       	rcall	.-3706   	; 0xaf4 <pxPortInitialiseStack>
    196e:	99 83       	std	Y+1, r25	; 0x01
    1970:	88 83       	st	Y, r24
    1972:	e1 14       	cp	r14, r1
    1974:	f1 04       	cpc	r15, r1
    1976:	19 f0       	breq	.+6      	; 0x197e <xTaskCreate+0xfc>
    1978:	f7 01       	movw	r30, r14
    197a:	d1 83       	std	Z+1, r29	; 0x01
    197c:	c0 83       	st	Z, r28
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	f8 94       	cli
    1982:	0f 92       	push	r0
    1984:	80 91 e7 07 	lds	r24, 0x07E7	; 0x8007e7 <uxCurrentNumberOfTasks>
    1988:	8f 5f       	subi	r24, 0xFF	; 255
    198a:	80 93 e7 07 	sts	0x07E7, r24	; 0x8007e7 <uxCurrentNumberOfTasks>
    198e:	80 91 3e 08 	lds	r24, 0x083E	; 0x80083e <pxCurrentTCB>
    1992:	90 91 3f 08 	lds	r25, 0x083F	; 0x80083f <pxCurrentTCB+0x1>
    1996:	89 2b       	or	r24, r25
    1998:	91 f5       	brne	.+100    	; 0x19fe <xTaskCreate+0x17c>
    199a:	d0 93 3f 08 	sts	0x083F, r29	; 0x80083f <pxCurrentTCB+0x1>
    199e:	c0 93 3e 08 	sts	0x083E, r28	; 0x80083e <pxCurrentTCB>
    19a2:	80 91 e7 07 	lds	r24, 0x07E7	; 0x8007e7 <uxCurrentNumberOfTasks>
    19a6:	81 30       	cpi	r24, 0x01	; 1
    19a8:	09 f0       	breq	.+2      	; 0x19ac <xTaskCreate+0x12a>
    19aa:	39 c0       	rjmp	.+114    	; 0x1a1e <xTaskCreate+0x19c>
    19ac:	8a e1       	ldi	r24, 0x1A	; 26
    19ae:	98 e0       	ldi	r25, 0x08	; 8
    19b0:	16 d8       	rcall	.-4052   	; 0x9de <vListInitialise>
    19b2:	83 e2       	ldi	r24, 0x23	; 35
    19b4:	98 e0       	ldi	r25, 0x08	; 8
    19b6:	13 d8       	rcall	.-4058   	; 0x9de <vListInitialise>
    19b8:	8c e2       	ldi	r24, 0x2C	; 44
    19ba:	98 e0       	ldi	r25, 0x08	; 8
    19bc:	10 d8       	rcall	.-4064   	; 0x9de <vListInitialise>
    19be:	85 e3       	ldi	r24, 0x35	; 53
    19c0:	98 e0       	ldi	r25, 0x08	; 8
    19c2:	0d d8       	rcall	.-4070   	; 0x9de <vListInitialise>
    19c4:	81 e1       	ldi	r24, 0x11	; 17
    19c6:	98 e0       	ldi	r25, 0x08	; 8
    19c8:	0a d8       	rcall	.-4076   	; 0x9de <vListInitialise>
    19ca:	88 e0       	ldi	r24, 0x08	; 8
    19cc:	98 e0       	ldi	r25, 0x08	; 8
    19ce:	07 d8       	rcall	.-4082   	; 0x9de <vListInitialise>
    19d0:	8b ef       	ldi	r24, 0xFB	; 251
    19d2:	97 e0       	ldi	r25, 0x07	; 7
    19d4:	04 d8       	rcall	.-4088   	; 0x9de <vListInitialise>
    19d6:	82 ef       	ldi	r24, 0xF2	; 242
    19d8:	97 e0       	ldi	r25, 0x07	; 7
    19da:	01 d8       	rcall	.-4094   	; 0x9de <vListInitialise>
    19dc:	88 ee       	ldi	r24, 0xE8	; 232
    19de:	97 e0       	ldi	r25, 0x07	; 7
    19e0:	0e 94 ef 04 	call	0x9de	; 0x9de <vListInitialise>
    19e4:	81 e1       	ldi	r24, 0x11	; 17
    19e6:	98 e0       	ldi	r25, 0x08	; 8
    19e8:	90 93 07 08 	sts	0x0807, r25	; 0x800807 <pxDelayedTaskList+0x1>
    19ec:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <pxDelayedTaskList>
    19f0:	88 e0       	ldi	r24, 0x08	; 8
    19f2:	98 e0       	ldi	r25, 0x08	; 8
    19f4:	90 93 05 08 	sts	0x0805, r25	; 0x800805 <pxOverflowDelayedTaskList+0x1>
    19f8:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <pxOverflowDelayedTaskList>
    19fc:	10 c0       	rjmp	.+32     	; 0x1a1e <xTaskCreate+0x19c>
    19fe:	80 91 e3 07 	lds	r24, 0x07E3	; 0x8007e3 <xSchedulerRunning>
    1a02:	81 11       	cpse	r24, r1
    1a04:	0c c0       	rjmp	.+24     	; 0x1a1e <xTaskCreate+0x19c>
    1a06:	e0 91 3e 08 	lds	r30, 0x083E	; 0x80083e <pxCurrentTCB>
    1a0a:	f0 91 3f 08 	lds	r31, 0x083F	; 0x80083f <pxCurrentTCB+0x1>
    1a0e:	96 89       	ldd	r25, Z+22	; 0x16
    1a10:	8e 89       	ldd	r24, Y+22	; 0x16
    1a12:	89 17       	cp	r24, r25
    1a14:	20 f0       	brcs	.+8      	; 0x1a1e <xTaskCreate+0x19c>
    1a16:	d0 93 3f 08 	sts	0x083F, r29	; 0x80083f <pxCurrentTCB+0x1>
    1a1a:	c0 93 3e 08 	sts	0x083E, r28	; 0x80083e <pxCurrentTCB>
    1a1e:	80 91 df 07 	lds	r24, 0x07DF	; 0x8007df <uxTaskNumber>
    1a22:	8f 5f       	subi	r24, 0xFF	; 255
    1a24:	80 93 df 07 	sts	0x07DF, r24	; 0x8007df <uxTaskNumber>
    1a28:	89 a3       	std	Y+33, r24	; 0x21
    1a2a:	8e 89       	ldd	r24, Y+22	; 0x16
    1a2c:	90 91 e4 07 	lds	r25, 0x07E4	; 0x8007e4 <uxTopReadyPriority>
    1a30:	98 17       	cp	r25, r24
    1a32:	10 f4       	brcc	.+4      	; 0x1a38 <xTaskCreate+0x1b6>
    1a34:	80 93 e4 07 	sts	0x07E4, r24	; 0x8007e4 <uxTopReadyPriority>
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	9c 01       	movw	r18, r24
    1a3c:	22 0f       	add	r18, r18
    1a3e:	33 1f       	adc	r19, r19
    1a40:	22 0f       	add	r18, r18
    1a42:	33 1f       	adc	r19, r19
    1a44:	22 0f       	add	r18, r18
    1a46:	33 1f       	adc	r19, r19
    1a48:	82 0f       	add	r24, r18
    1a4a:	93 1f       	adc	r25, r19
    1a4c:	b6 01       	movw	r22, r12
    1a4e:	86 5e       	subi	r24, 0xE6	; 230
    1a50:	97 4f       	sbci	r25, 0xF7	; 247
    1a52:	0e 94 01 05 	call	0xa02	; 0xa02 <vListInsertEnd>
    1a56:	0f 90       	pop	r0
    1a58:	0f be       	out	0x3f, r0	; 63
    1a5a:	80 91 e3 07 	lds	r24, 0x07E3	; 0x8007e3 <xSchedulerRunning>
    1a5e:	88 23       	and	r24, r24
    1a60:	59 f0       	breq	.+22     	; 0x1a78 <xTaskCreate+0x1f6>
    1a62:	e0 91 3e 08 	lds	r30, 0x083E	; 0x80083e <pxCurrentTCB>
    1a66:	f0 91 3f 08 	lds	r31, 0x083F	; 0x80083f <pxCurrentTCB+0x1>
    1a6a:	96 89       	ldd	r25, Z+22	; 0x16
    1a6c:	8e 89       	ldd	r24, Y+22	; 0x16
    1a6e:	98 17       	cp	r25, r24
    1a70:	28 f4       	brcc	.+10     	; 0x1a7c <xTaskCreate+0x1fa>
    1a72:	ee d8       	rcall	.-3620   	; 0xc50 <vPortYield>
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	05 c0       	rjmp	.+10     	; 0x1a82 <xTaskCreate+0x200>
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	03 c0       	rjmp	.+6      	; 0x1a82 <xTaskCreate+0x200>
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	01 c0       	rjmp	.+2      	; 0x1a82 <xTaskCreate+0x200>
    1a80:	8f ef       	ldi	r24, 0xFF	; 255
    1a82:	df 91       	pop	r29
    1a84:	cf 91       	pop	r28
    1a86:	0f 91       	pop	r16
    1a88:	ff 90       	pop	r15
    1a8a:	ef 90       	pop	r14
    1a8c:	df 90       	pop	r13
    1a8e:	cf 90       	pop	r12
    1a90:	bf 90       	pop	r11
    1a92:	af 90       	pop	r10
    1a94:	9f 90       	pop	r9
    1a96:	8f 90       	pop	r8
    1a98:	7f 90       	pop	r7
    1a9a:	6f 90       	pop	r6
    1a9c:	5f 90       	pop	r5
    1a9e:	4f 90       	pop	r4
    1aa0:	08 95       	ret

00001aa2 <vTaskStartScheduler>:
    1aa2:	ef 92       	push	r14
    1aa4:	ff 92       	push	r15
    1aa6:	0f 93       	push	r16
    1aa8:	0f 2e       	mov	r0, r31
    1aaa:	fb ed       	ldi	r31, 0xDB	; 219
    1aac:	ef 2e       	mov	r14, r31
    1aae:	f7 e0       	ldi	r31, 0x07	; 7
    1ab0:	ff 2e       	mov	r15, r31
    1ab2:	f0 2d       	mov	r31, r0
    1ab4:	00 e0       	ldi	r16, 0x00	; 0
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	40 ec       	ldi	r20, 0xC0	; 192
    1abc:	50 e0       	ldi	r21, 0x00	; 0
    1abe:	65 ed       	ldi	r22, 0xD5	; 213
    1ac0:	74 e0       	ldi	r23, 0x04	; 4
    1ac2:	8d ec       	ldi	r24, 0xCD	; 205
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	dd de       	rcall	.-582    	; 0x1882 <xTaskCreate>
    1ac8:	81 30       	cpi	r24, 0x01	; 1
    1aca:	c9 f4       	brne	.+50     	; 0x1afe <vTaskStartScheduler+0x5c>
    1acc:	07 d5       	rcall	.+2574   	; 0x24dc <xTimerCreateTimerTask>
    1ace:	81 30       	cpi	r24, 0x01	; 1
    1ad0:	b1 f4       	brne	.+44     	; 0x1afe <vTaskStartScheduler+0x5c>
    1ad2:	f8 94       	cli
    1ad4:	8f ef       	ldi	r24, 0xFF	; 255
    1ad6:	9f ef       	ldi	r25, 0xFF	; 255
    1ad8:	90 93 de 07 	sts	0x07DE, r25	; 0x8007de <xNextTaskUnblockTime+0x1>
    1adc:	80 93 dd 07 	sts	0x07DD, r24	; 0x8007dd <xNextTaskUnblockTime>
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	80 93 e3 07 	sts	0x07E3, r24	; 0x8007e3 <xSchedulerRunning>
    1ae6:	10 92 e6 07 	sts	0x07E6, r1	; 0x8007e6 <xTickCount+0x1>
    1aea:	10 92 e5 07 	sts	0x07E5, r1	; 0x8007e5 <xTickCount>
    1aee:	e0 91 3e 08 	lds	r30, 0x083E	; 0x80083e <pxCurrentTCB>
    1af2:	f0 91 3f 08 	lds	r31, 0x083F	; 0x80083f <pxCurrentTCB+0x1>
    1af6:	85 a1       	ldd	r24, Z+37	; 0x25
    1af8:	0e 94 bd 04 	call	0x97a	; 0x97a <task_switch_in>
    1afc:	6d d8       	rcall	.-3878   	; 0xbd8 <xPortStartScheduler>
    1afe:	0f 91       	pop	r16
    1b00:	ff 90       	pop	r15
    1b02:	ef 90       	pop	r14
    1b04:	08 95       	ret

00001b06 <vTaskSuspendAll>:
    1b06:	80 91 da 07 	lds	r24, 0x07DA	; 0x8007da <uxSchedulerSuspended>
    1b0a:	8f 5f       	subi	r24, 0xFF	; 255
    1b0c:	80 93 da 07 	sts	0x07DA, r24	; 0x8007da <uxSchedulerSuspended>
    1b10:	08 95       	ret

00001b12 <xTaskGetTickCount>:
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	f8 94       	cli
    1b16:	0f 92       	push	r0
    1b18:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <xTickCount>
    1b1c:	90 91 e6 07 	lds	r25, 0x07E6	; 0x8007e6 <xTickCount+0x1>
    1b20:	0f 90       	pop	r0
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	08 95       	ret

00001b26 <xTaskIncrementTick>:
    1b26:	cf 92       	push	r12
    1b28:	df 92       	push	r13
    1b2a:	ef 92       	push	r14
    1b2c:	ff 92       	push	r15
    1b2e:	0f 93       	push	r16
    1b30:	1f 93       	push	r17
    1b32:	cf 93       	push	r28
    1b34:	df 93       	push	r29
    1b36:	80 91 da 07 	lds	r24, 0x07DA	; 0x8007da <uxSchedulerSuspended>
    1b3a:	81 11       	cpse	r24, r1
    1b3c:	98 c0       	rjmp	.+304    	; 0x1c6e <xTaskIncrementTick+0x148>
    1b3e:	e0 90 e5 07 	lds	r14, 0x07E5	; 0x8007e5 <xTickCount>
    1b42:	f0 90 e6 07 	lds	r15, 0x07E6	; 0x8007e6 <xTickCount+0x1>
    1b46:	8f ef       	ldi	r24, 0xFF	; 255
    1b48:	e8 1a       	sub	r14, r24
    1b4a:	f8 0a       	sbc	r15, r24
    1b4c:	f0 92 e6 07 	sts	0x07E6, r15	; 0x8007e6 <xTickCount+0x1>
    1b50:	e0 92 e5 07 	sts	0x07E5, r14	; 0x8007e5 <xTickCount>
    1b54:	e1 14       	cp	r14, r1
    1b56:	f1 04       	cpc	r15, r1
    1b58:	b1 f4       	brne	.+44     	; 0x1b86 <xTaskIncrementTick+0x60>
    1b5a:	80 91 06 08 	lds	r24, 0x0806	; 0x800806 <pxDelayedTaskList>
    1b5e:	90 91 07 08 	lds	r25, 0x0807	; 0x800807 <pxDelayedTaskList+0x1>
    1b62:	20 91 04 08 	lds	r18, 0x0804	; 0x800804 <pxOverflowDelayedTaskList>
    1b66:	30 91 05 08 	lds	r19, 0x0805	; 0x800805 <pxOverflowDelayedTaskList+0x1>
    1b6a:	30 93 07 08 	sts	0x0807, r19	; 0x800807 <pxDelayedTaskList+0x1>
    1b6e:	20 93 06 08 	sts	0x0806, r18	; 0x800806 <pxDelayedTaskList>
    1b72:	90 93 05 08 	sts	0x0805, r25	; 0x800805 <pxOverflowDelayedTaskList+0x1>
    1b76:	80 93 04 08 	sts	0x0804, r24	; 0x800804 <pxOverflowDelayedTaskList>
    1b7a:	80 91 e0 07 	lds	r24, 0x07E0	; 0x8007e0 <xNumOfOverflows>
    1b7e:	8f 5f       	subi	r24, 0xFF	; 255
    1b80:	80 93 e0 07 	sts	0x07E0, r24	; 0x8007e0 <xNumOfOverflows>
    1b84:	0b de       	rcall	.-1002   	; 0x179c <prvResetNextTaskUnblockTime>
    1b86:	80 91 dd 07 	lds	r24, 0x07DD	; 0x8007dd <xNextTaskUnblockTime>
    1b8a:	90 91 de 07 	lds	r25, 0x07DE	; 0x8007de <xNextTaskUnblockTime+0x1>
    1b8e:	e8 16       	cp	r14, r24
    1b90:	f9 06       	cpc	r15, r25
    1b92:	10 f4       	brcc	.+4      	; 0x1b98 <xTaskIncrementTick+0x72>
    1b94:	d1 2c       	mov	r13, r1
    1b96:	53 c0       	rjmp	.+166    	; 0x1c3e <xTaskIncrementTick+0x118>
    1b98:	d1 2c       	mov	r13, r1
    1b9a:	cc 24       	eor	r12, r12
    1b9c:	c3 94       	inc	r12
    1b9e:	e0 91 06 08 	lds	r30, 0x0806	; 0x800806 <pxDelayedTaskList>
    1ba2:	f0 91 07 08 	lds	r31, 0x0807	; 0x800807 <pxDelayedTaskList+0x1>
    1ba6:	80 81       	ld	r24, Z
    1ba8:	81 11       	cpse	r24, r1
    1baa:	07 c0       	rjmp	.+14     	; 0x1bba <xTaskIncrementTick+0x94>
    1bac:	8f ef       	ldi	r24, 0xFF	; 255
    1bae:	9f ef       	ldi	r25, 0xFF	; 255
    1bb0:	90 93 de 07 	sts	0x07DE, r25	; 0x8007de <xNextTaskUnblockTime+0x1>
    1bb4:	80 93 dd 07 	sts	0x07DD, r24	; 0x8007dd <xNextTaskUnblockTime>
    1bb8:	42 c0       	rjmp	.+132    	; 0x1c3e <xTaskIncrementTick+0x118>
    1bba:	e0 91 06 08 	lds	r30, 0x0806	; 0x800806 <pxDelayedTaskList>
    1bbe:	f0 91 07 08 	lds	r31, 0x0807	; 0x800807 <pxDelayedTaskList+0x1>
    1bc2:	05 80       	ldd	r0, Z+5	; 0x05
    1bc4:	f6 81       	ldd	r31, Z+6	; 0x06
    1bc6:	e0 2d       	mov	r30, r0
    1bc8:	c6 81       	ldd	r28, Z+6	; 0x06
    1bca:	d7 81       	ldd	r29, Z+7	; 0x07
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	9b 81       	ldd	r25, Y+3	; 0x03
    1bd0:	e8 16       	cp	r14, r24
    1bd2:	f9 06       	cpc	r15, r25
    1bd4:	28 f4       	brcc	.+10     	; 0x1be0 <xTaskIncrementTick+0xba>
    1bd6:	90 93 de 07 	sts	0x07DE, r25	; 0x8007de <xNextTaskUnblockTime+0x1>
    1bda:	80 93 dd 07 	sts	0x07DD, r24	; 0x8007dd <xNextTaskUnblockTime>
    1bde:	2f c0       	rjmp	.+94     	; 0x1c3e <xTaskIncrementTick+0x118>
    1be0:	8e 01       	movw	r16, r28
    1be2:	0e 5f       	subi	r16, 0xFE	; 254
    1be4:	1f 4f       	sbci	r17, 0xFF	; 255
    1be6:	c8 01       	movw	r24, r16
    1be8:	0e 94 53 05 	call	0xaa6	; 0xaa6 <uxListRemove>
    1bec:	8c 89       	ldd	r24, Y+20	; 0x14
    1bee:	9d 89       	ldd	r25, Y+21	; 0x15
    1bf0:	89 2b       	or	r24, r25
    1bf2:	21 f0       	breq	.+8      	; 0x1bfc <xTaskIncrementTick+0xd6>
    1bf4:	ce 01       	movw	r24, r28
    1bf6:	0c 96       	adiw	r24, 0x0c	; 12
    1bf8:	0e 94 53 05 	call	0xaa6	; 0xaa6 <uxListRemove>
    1bfc:	8e 89       	ldd	r24, Y+22	; 0x16
    1bfe:	90 91 e4 07 	lds	r25, 0x07E4	; 0x8007e4 <uxTopReadyPriority>
    1c02:	98 17       	cp	r25, r24
    1c04:	10 f4       	brcc	.+4      	; 0x1c0a <xTaskIncrementTick+0xe4>
    1c06:	80 93 e4 07 	sts	0x07E4, r24	; 0x8007e4 <uxTopReadyPriority>
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	9c 01       	movw	r18, r24
    1c0e:	22 0f       	add	r18, r18
    1c10:	33 1f       	adc	r19, r19
    1c12:	22 0f       	add	r18, r18
    1c14:	33 1f       	adc	r19, r19
    1c16:	22 0f       	add	r18, r18
    1c18:	33 1f       	adc	r19, r19
    1c1a:	82 0f       	add	r24, r18
    1c1c:	93 1f       	adc	r25, r19
    1c1e:	b8 01       	movw	r22, r16
    1c20:	86 5e       	subi	r24, 0xE6	; 230
    1c22:	97 4f       	sbci	r25, 0xF7	; 247
    1c24:	0e 94 01 05 	call	0xa02	; 0xa02 <vListInsertEnd>
    1c28:	e0 91 3e 08 	lds	r30, 0x083E	; 0x80083e <pxCurrentTCB>
    1c2c:	f0 91 3f 08 	lds	r31, 0x083F	; 0x80083f <pxCurrentTCB+0x1>
    1c30:	9e 89       	ldd	r25, Y+22	; 0x16
    1c32:	86 89       	ldd	r24, Z+22	; 0x16
    1c34:	98 17       	cp	r25, r24
    1c36:	08 f4       	brcc	.+2      	; 0x1c3a <xTaskIncrementTick+0x114>
    1c38:	b2 cf       	rjmp	.-156    	; 0x1b9e <xTaskIncrementTick+0x78>
    1c3a:	dc 2c       	mov	r13, r12
    1c3c:	b0 cf       	rjmp	.-160    	; 0x1b9e <xTaskIncrementTick+0x78>
    1c3e:	e0 91 3e 08 	lds	r30, 0x083E	; 0x80083e <pxCurrentTCB>
    1c42:	f0 91 3f 08 	lds	r31, 0x083F	; 0x80083f <pxCurrentTCB+0x1>
    1c46:	86 89       	ldd	r24, Z+22	; 0x16
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	fc 01       	movw	r30, r24
    1c4c:	ee 0f       	add	r30, r30
    1c4e:	ff 1f       	adc	r31, r31
    1c50:	ee 0f       	add	r30, r30
    1c52:	ff 1f       	adc	r31, r31
    1c54:	ee 0f       	add	r30, r30
    1c56:	ff 1f       	adc	r31, r31
    1c58:	8e 0f       	add	r24, r30
    1c5a:	9f 1f       	adc	r25, r31
    1c5c:	fc 01       	movw	r30, r24
    1c5e:	e6 5e       	subi	r30, 0xE6	; 230
    1c60:	f7 4f       	sbci	r31, 0xF7	; 247
    1c62:	80 81       	ld	r24, Z
    1c64:	82 30       	cpi	r24, 0x02	; 2
    1c66:	48 f0       	brcs	.+18     	; 0x1c7a <xTaskIncrementTick+0x154>
    1c68:	dd 24       	eor	r13, r13
    1c6a:	d3 94       	inc	r13
    1c6c:	06 c0       	rjmp	.+12     	; 0x1c7a <xTaskIncrementTick+0x154>
    1c6e:	80 91 e2 07 	lds	r24, 0x07E2	; 0x8007e2 <uxPendedTicks>
    1c72:	8f 5f       	subi	r24, 0xFF	; 255
    1c74:	80 93 e2 07 	sts	0x07E2, r24	; 0x8007e2 <uxPendedTicks>
    1c78:	d1 2c       	mov	r13, r1
    1c7a:	80 91 e1 07 	lds	r24, 0x07E1	; 0x8007e1 <xYieldPending>
    1c7e:	88 23       	and	r24, r24
    1c80:	11 f0       	breq	.+4      	; 0x1c86 <xTaskIncrementTick+0x160>
    1c82:	dd 24       	eor	r13, r13
    1c84:	d3 94       	inc	r13
    1c86:	8d 2d       	mov	r24, r13
    1c88:	df 91       	pop	r29
    1c8a:	cf 91       	pop	r28
    1c8c:	1f 91       	pop	r17
    1c8e:	0f 91       	pop	r16
    1c90:	ff 90       	pop	r15
    1c92:	ef 90       	pop	r14
    1c94:	df 90       	pop	r13
    1c96:	cf 90       	pop	r12
    1c98:	08 95       	ret

00001c9a <xTaskResumeAll>:
    1c9a:	df 92       	push	r13
    1c9c:	ef 92       	push	r14
    1c9e:	ff 92       	push	r15
    1ca0:	0f 93       	push	r16
    1ca2:	1f 93       	push	r17
    1ca4:	cf 93       	push	r28
    1ca6:	df 93       	push	r29
    1ca8:	0f b6       	in	r0, 0x3f	; 63
    1caa:	f8 94       	cli
    1cac:	0f 92       	push	r0
    1cae:	80 91 da 07 	lds	r24, 0x07DA	; 0x8007da <uxSchedulerSuspended>
    1cb2:	81 50       	subi	r24, 0x01	; 1
    1cb4:	80 93 da 07 	sts	0x07DA, r24	; 0x8007da <uxSchedulerSuspended>
    1cb8:	80 91 da 07 	lds	r24, 0x07DA	; 0x8007da <uxSchedulerSuspended>
    1cbc:	81 11       	cpse	r24, r1
    1cbe:	5d c0       	rjmp	.+186    	; 0x1d7a <xTaskResumeAll+0xe0>
    1cc0:	80 91 e7 07 	lds	r24, 0x07E7	; 0x8007e7 <uxCurrentNumberOfTasks>
    1cc4:	81 11       	cpse	r24, r1
    1cc6:	33 c0       	rjmp	.+102    	; 0x1d2e <xTaskResumeAll+0x94>
    1cc8:	5b c0       	rjmp	.+182    	; 0x1d80 <xTaskResumeAll+0xe6>
    1cca:	d7 01       	movw	r26, r14
    1ccc:	15 96       	adiw	r26, 0x05	; 5
    1cce:	ed 91       	ld	r30, X+
    1cd0:	fc 91       	ld	r31, X
    1cd2:	16 97       	sbiw	r26, 0x06	; 6
    1cd4:	c6 81       	ldd	r28, Z+6	; 0x06
    1cd6:	d7 81       	ldd	r29, Z+7	; 0x07
    1cd8:	ce 01       	movw	r24, r28
    1cda:	0c 96       	adiw	r24, 0x0c	; 12
    1cdc:	0e 94 53 05 	call	0xaa6	; 0xaa6 <uxListRemove>
    1ce0:	8e 01       	movw	r16, r28
    1ce2:	0e 5f       	subi	r16, 0xFE	; 254
    1ce4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce6:	c8 01       	movw	r24, r16
    1ce8:	0e 94 53 05 	call	0xaa6	; 0xaa6 <uxListRemove>
    1cec:	8e 89       	ldd	r24, Y+22	; 0x16
    1cee:	90 91 e4 07 	lds	r25, 0x07E4	; 0x8007e4 <uxTopReadyPriority>
    1cf2:	98 17       	cp	r25, r24
    1cf4:	10 f4       	brcc	.+4      	; 0x1cfa <xTaskResumeAll+0x60>
    1cf6:	80 93 e4 07 	sts	0x07E4, r24	; 0x8007e4 <uxTopReadyPriority>
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	9c 01       	movw	r18, r24
    1cfe:	22 0f       	add	r18, r18
    1d00:	33 1f       	adc	r19, r19
    1d02:	22 0f       	add	r18, r18
    1d04:	33 1f       	adc	r19, r19
    1d06:	22 0f       	add	r18, r18
    1d08:	33 1f       	adc	r19, r19
    1d0a:	82 0f       	add	r24, r18
    1d0c:	93 1f       	adc	r25, r19
    1d0e:	b8 01       	movw	r22, r16
    1d10:	86 5e       	subi	r24, 0xE6	; 230
    1d12:	97 4f       	sbci	r25, 0xF7	; 247
    1d14:	0e 94 01 05 	call	0xa02	; 0xa02 <vListInsertEnd>
    1d18:	e0 91 3e 08 	lds	r30, 0x083E	; 0x80083e <pxCurrentTCB>
    1d1c:	f0 91 3f 08 	lds	r31, 0x083F	; 0x80083f <pxCurrentTCB+0x1>
    1d20:	9e 89       	ldd	r25, Y+22	; 0x16
    1d22:	86 89       	ldd	r24, Z+22	; 0x16
    1d24:	98 17       	cp	r25, r24
    1d26:	68 f0       	brcs	.+26     	; 0x1d42 <xTaskResumeAll+0xa8>
    1d28:	d0 92 e1 07 	sts	0x07E1, r13	; 0x8007e1 <xYieldPending>
    1d2c:	0a c0       	rjmp	.+20     	; 0x1d42 <xTaskResumeAll+0xa8>
    1d2e:	c0 e0       	ldi	r28, 0x00	; 0
    1d30:	d0 e0       	ldi	r29, 0x00	; 0
    1d32:	0f 2e       	mov	r0, r31
    1d34:	fb ef       	ldi	r31, 0xFB	; 251
    1d36:	ef 2e       	mov	r14, r31
    1d38:	f7 e0       	ldi	r31, 0x07	; 7
    1d3a:	ff 2e       	mov	r15, r31
    1d3c:	f0 2d       	mov	r31, r0
    1d3e:	dd 24       	eor	r13, r13
    1d40:	d3 94       	inc	r13
    1d42:	f7 01       	movw	r30, r14
    1d44:	80 81       	ld	r24, Z
    1d46:	81 11       	cpse	r24, r1
    1d48:	c0 cf       	rjmp	.-128    	; 0x1cca <xTaskResumeAll+0x30>
    1d4a:	cd 2b       	or	r28, r29
    1d4c:	09 f0       	breq	.+2      	; 0x1d50 <xTaskResumeAll+0xb6>
    1d4e:	26 dd       	rcall	.-1460   	; 0x179c <prvResetNextTaskUnblockTime>
    1d50:	c0 91 e2 07 	lds	r28, 0x07E2	; 0x8007e2 <uxPendedTicks>
    1d54:	cc 23       	and	r28, r28
    1d56:	49 f0       	breq	.+18     	; 0x1d6a <xTaskResumeAll+0xd0>
    1d58:	d1 e0       	ldi	r29, 0x01	; 1
    1d5a:	e5 de       	rcall	.-566    	; 0x1b26 <xTaskIncrementTick>
    1d5c:	81 11       	cpse	r24, r1
    1d5e:	d0 93 e1 07 	sts	0x07E1, r29	; 0x8007e1 <xYieldPending>
    1d62:	c1 50       	subi	r28, 0x01	; 1
    1d64:	d1 f7       	brne	.-12     	; 0x1d5a <xTaskResumeAll+0xc0>
    1d66:	10 92 e2 07 	sts	0x07E2, r1	; 0x8007e2 <uxPendedTicks>
    1d6a:	80 91 e1 07 	lds	r24, 0x07E1	; 0x8007e1 <xYieldPending>
    1d6e:	88 23       	and	r24, r24
    1d70:	31 f0       	breq	.+12     	; 0x1d7e <xTaskResumeAll+0xe4>
    1d72:	0e 94 28 06 	call	0xc50	; 0xc50 <vPortYield>
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	03 c0       	rjmp	.+6      	; 0x1d80 <xTaskResumeAll+0xe6>
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	01 c0       	rjmp	.+2      	; 0x1d80 <xTaskResumeAll+0xe6>
    1d7e:	80 e0       	ldi	r24, 0x00	; 0
    1d80:	0f 90       	pop	r0
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	df 91       	pop	r29
    1d86:	cf 91       	pop	r28
    1d88:	1f 91       	pop	r17
    1d8a:	0f 91       	pop	r16
    1d8c:	ff 90       	pop	r15
    1d8e:	ef 90       	pop	r14
    1d90:	df 90       	pop	r13
    1d92:	08 95       	ret

00001d94 <vTaskDelay>:
    1d94:	cf 93       	push	r28
    1d96:	df 93       	push	r29
    1d98:	ec 01       	movw	r28, r24
    1d9a:	89 2b       	or	r24, r25
    1d9c:	39 f0       	breq	.+14     	; 0x1dac <vTaskDelay+0x18>
    1d9e:	b3 de       	rcall	.-666    	; 0x1b06 <vTaskSuspendAll>
    1da0:	60 e0       	ldi	r22, 0x00	; 0
    1da2:	ce 01       	movw	r24, r28
    1da4:	1a dd       	rcall	.-1484   	; 0x17da <prvAddCurrentTaskToDelayedList>
    1da6:	79 df       	rcall	.-270    	; 0x1c9a <xTaskResumeAll>
    1da8:	81 11       	cpse	r24, r1
    1daa:	02 c0       	rjmp	.+4      	; 0x1db0 <vTaskDelay+0x1c>
    1dac:	0e 94 28 06 	call	0xc50	; 0xc50 <vPortYield>
    1db0:	df 91       	pop	r29
    1db2:	cf 91       	pop	r28
    1db4:	08 95       	ret

00001db6 <vTaskSwitchContext>:
    1db6:	80 91 da 07 	lds	r24, 0x07DA	; 0x8007da <uxSchedulerSuspended>
    1dba:	88 23       	and	r24, r24
    1dbc:	21 f0       	breq	.+8      	; 0x1dc6 <vTaskSwitchContext+0x10>
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	80 93 e1 07 	sts	0x07E1, r24	; 0x8007e1 <xYieldPending>
    1dc4:	08 95       	ret
    1dc6:	10 92 e1 07 	sts	0x07E1, r1	; 0x8007e1 <xYieldPending>
    1dca:	e0 91 3e 08 	lds	r30, 0x083E	; 0x80083e <pxCurrentTCB>
    1dce:	f0 91 3f 08 	lds	r31, 0x083F	; 0x80083f <pxCurrentTCB+0x1>
    1dd2:	85 a1       	ldd	r24, Z+37	; 0x25
    1dd4:	0e 94 c7 04 	call	0x98e	; 0x98e <task_switch_out>
    1dd8:	a0 91 3e 08 	lds	r26, 0x083E	; 0x80083e <pxCurrentTCB>
    1ddc:	b0 91 3f 08 	lds	r27, 0x083F	; 0x80083f <pxCurrentTCB+0x1>
    1de0:	e0 91 3e 08 	lds	r30, 0x083E	; 0x80083e <pxCurrentTCB>
    1de4:	f0 91 3f 08 	lds	r31, 0x083F	; 0x80083f <pxCurrentTCB+0x1>
    1de8:	2d 91       	ld	r18, X+
    1dea:	3c 91       	ld	r19, X
    1dec:	87 89       	ldd	r24, Z+23	; 0x17
    1dee:	90 8d       	ldd	r25, Z+24	; 0x18
    1df0:	82 17       	cp	r24, r18
    1df2:	93 07       	cpc	r25, r19
    1df4:	58 f0       	brcs	.+22     	; 0x1e0c <vTaskSwitchContext+0x56>
    1df6:	60 91 3e 08 	lds	r22, 0x083E	; 0x80083e <pxCurrentTCB>
    1dfa:	70 91 3f 08 	lds	r23, 0x083F	; 0x80083f <pxCurrentTCB+0x1>
    1dfe:	80 91 3e 08 	lds	r24, 0x083E	; 0x80083e <pxCurrentTCB>
    1e02:	90 91 3f 08 	lds	r25, 0x083F	; 0x80083f <pxCurrentTCB+0x1>
    1e06:	67 5e       	subi	r22, 0xE7	; 231
    1e08:	7f 4f       	sbci	r23, 0xFF	; 255
    1e0a:	4b d4       	rcall	.+2198   	; 0x26a2 <vApplicationStackOverflowHook>
    1e0c:	20 91 e4 07 	lds	r18, 0x07E4	; 0x8007e4 <uxTopReadyPriority>
    1e10:	82 2f       	mov	r24, r18
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	fc 01       	movw	r30, r24
    1e16:	ee 0f       	add	r30, r30
    1e18:	ff 1f       	adc	r31, r31
    1e1a:	ee 0f       	add	r30, r30
    1e1c:	ff 1f       	adc	r31, r31
    1e1e:	ee 0f       	add	r30, r30
    1e20:	ff 1f       	adc	r31, r31
    1e22:	e8 0f       	add	r30, r24
    1e24:	f9 1f       	adc	r31, r25
    1e26:	e6 5e       	subi	r30, 0xE6	; 230
    1e28:	f7 4f       	sbci	r31, 0xF7	; 247
    1e2a:	30 81       	ld	r19, Z
    1e2c:	31 11       	cpse	r19, r1
    1e2e:	11 c0       	rjmp	.+34     	; 0x1e52 <vTaskSwitchContext+0x9c>
    1e30:	21 50       	subi	r18, 0x01	; 1
    1e32:	82 2f       	mov	r24, r18
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	fc 01       	movw	r30, r24
    1e38:	ee 0f       	add	r30, r30
    1e3a:	ff 1f       	adc	r31, r31
    1e3c:	ee 0f       	add	r30, r30
    1e3e:	ff 1f       	adc	r31, r31
    1e40:	ee 0f       	add	r30, r30
    1e42:	ff 1f       	adc	r31, r31
    1e44:	e8 0f       	add	r30, r24
    1e46:	f9 1f       	adc	r31, r25
    1e48:	e6 5e       	subi	r30, 0xE6	; 230
    1e4a:	f7 4f       	sbci	r31, 0xF7	; 247
    1e4c:	30 81       	ld	r19, Z
    1e4e:	33 23       	and	r19, r19
    1e50:	79 f3       	breq	.-34     	; 0x1e30 <vTaskSwitchContext+0x7a>
    1e52:	ac 01       	movw	r20, r24
    1e54:	44 0f       	add	r20, r20
    1e56:	55 1f       	adc	r21, r21
    1e58:	44 0f       	add	r20, r20
    1e5a:	55 1f       	adc	r21, r21
    1e5c:	44 0f       	add	r20, r20
    1e5e:	55 1f       	adc	r21, r21
    1e60:	48 0f       	add	r20, r24
    1e62:	59 1f       	adc	r21, r25
    1e64:	da 01       	movw	r26, r20
    1e66:	a6 5e       	subi	r26, 0xE6	; 230
    1e68:	b7 4f       	sbci	r27, 0xF7	; 247
    1e6a:	11 96       	adiw	r26, 0x01	; 1
    1e6c:	ed 91       	ld	r30, X+
    1e6e:	fc 91       	ld	r31, X
    1e70:	12 97       	sbiw	r26, 0x02	; 2
    1e72:	02 80       	ldd	r0, Z+2	; 0x02
    1e74:	f3 81       	ldd	r31, Z+3	; 0x03
    1e76:	e0 2d       	mov	r30, r0
    1e78:	12 96       	adiw	r26, 0x02	; 2
    1e7a:	fc 93       	st	X, r31
    1e7c:	ee 93       	st	-X, r30
    1e7e:	11 97       	sbiw	r26, 0x01	; 1
    1e80:	43 5e       	subi	r20, 0xE3	; 227
    1e82:	57 4f       	sbci	r21, 0xF7	; 247
    1e84:	e4 17       	cp	r30, r20
    1e86:	f5 07       	cpc	r31, r21
    1e88:	29 f4       	brne	.+10     	; 0x1e94 <vTaskSwitchContext+0xde>
    1e8a:	42 81       	ldd	r20, Z+2	; 0x02
    1e8c:	53 81       	ldd	r21, Z+3	; 0x03
    1e8e:	fd 01       	movw	r30, r26
    1e90:	52 83       	std	Z+2, r21	; 0x02
    1e92:	41 83       	std	Z+1, r20	; 0x01
    1e94:	fc 01       	movw	r30, r24
    1e96:	ee 0f       	add	r30, r30
    1e98:	ff 1f       	adc	r31, r31
    1e9a:	ee 0f       	add	r30, r30
    1e9c:	ff 1f       	adc	r31, r31
    1e9e:	ee 0f       	add	r30, r30
    1ea0:	ff 1f       	adc	r31, r31
    1ea2:	8e 0f       	add	r24, r30
    1ea4:	9f 1f       	adc	r25, r31
    1ea6:	fc 01       	movw	r30, r24
    1ea8:	e6 5e       	subi	r30, 0xE6	; 230
    1eaa:	f7 4f       	sbci	r31, 0xF7	; 247
    1eac:	01 80       	ldd	r0, Z+1	; 0x01
    1eae:	f2 81       	ldd	r31, Z+2	; 0x02
    1eb0:	e0 2d       	mov	r30, r0
    1eb2:	86 81       	ldd	r24, Z+6	; 0x06
    1eb4:	97 81       	ldd	r25, Z+7	; 0x07
    1eb6:	90 93 3f 08 	sts	0x083F, r25	; 0x80083f <pxCurrentTCB+0x1>
    1eba:	80 93 3e 08 	sts	0x083E, r24	; 0x80083e <pxCurrentTCB>
    1ebe:	20 93 e4 07 	sts	0x07E4, r18	; 0x8007e4 <uxTopReadyPriority>
    1ec2:	e0 91 3e 08 	lds	r30, 0x083E	; 0x80083e <pxCurrentTCB>
    1ec6:	f0 91 3f 08 	lds	r31, 0x083F	; 0x80083f <pxCurrentTCB+0x1>
    1eca:	85 a1       	ldd	r24, Z+37	; 0x25
    1ecc:	0c 94 bd 04 	jmp	0x97a	; 0x97a <task_switch_in>
    1ed0:	08 95       	ret

00001ed2 <vTaskPlaceOnEventList>:
    1ed2:	cf 93       	push	r28
    1ed4:	df 93       	push	r29
    1ed6:	eb 01       	movw	r28, r22
    1ed8:	60 91 3e 08 	lds	r22, 0x083E	; 0x80083e <pxCurrentTCB>
    1edc:	70 91 3f 08 	lds	r23, 0x083F	; 0x80083f <pxCurrentTCB+0x1>
    1ee0:	64 5f       	subi	r22, 0xF4	; 244
    1ee2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee4:	0e 94 22 05 	call	0xa44	; 0xa44 <vListInsert>
    1ee8:	61 e0       	ldi	r22, 0x01	; 1
    1eea:	ce 01       	movw	r24, r28
    1eec:	76 dc       	rcall	.-1812   	; 0x17da <prvAddCurrentTaskToDelayedList>
    1eee:	df 91       	pop	r29
    1ef0:	cf 91       	pop	r28
    1ef2:	08 95       	ret

00001ef4 <vTaskPlaceOnEventListRestricted>:
    1ef4:	0f 93       	push	r16
    1ef6:	1f 93       	push	r17
    1ef8:	cf 93       	push	r28
    1efa:	8b 01       	movw	r16, r22
    1efc:	c4 2f       	mov	r28, r20
    1efe:	60 91 3e 08 	lds	r22, 0x083E	; 0x80083e <pxCurrentTCB>
    1f02:	70 91 3f 08 	lds	r23, 0x083F	; 0x80083f <pxCurrentTCB+0x1>
    1f06:	64 5f       	subi	r22, 0xF4	; 244
    1f08:	7f 4f       	sbci	r23, 0xFF	; 255
    1f0a:	0e 94 01 05 	call	0xa02	; 0xa02 <vListInsertEnd>
    1f0e:	cc 23       	and	r28, r28
    1f10:	11 f0       	breq	.+4      	; 0x1f16 <vTaskPlaceOnEventListRestricted+0x22>
    1f12:	0f ef       	ldi	r16, 0xFF	; 255
    1f14:	1f ef       	ldi	r17, 0xFF	; 255
    1f16:	6c 2f       	mov	r22, r28
    1f18:	c8 01       	movw	r24, r16
    1f1a:	5f dc       	rcall	.-1858   	; 0x17da <prvAddCurrentTaskToDelayedList>
    1f1c:	cf 91       	pop	r28
    1f1e:	1f 91       	pop	r17
    1f20:	0f 91       	pop	r16
    1f22:	08 95       	ret

00001f24 <xTaskRemoveFromEventList>:
    1f24:	0f 93       	push	r16
    1f26:	1f 93       	push	r17
    1f28:	cf 93       	push	r28
    1f2a:	df 93       	push	r29
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	15 96       	adiw	r26, 0x05	; 5
    1f30:	ed 91       	ld	r30, X+
    1f32:	fc 91       	ld	r31, X
    1f34:	16 97       	sbiw	r26, 0x06	; 6
    1f36:	c6 81       	ldd	r28, Z+6	; 0x06
    1f38:	d7 81       	ldd	r29, Z+7	; 0x07
    1f3a:	8e 01       	movw	r16, r28
    1f3c:	04 5f       	subi	r16, 0xF4	; 244
    1f3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f40:	c8 01       	movw	r24, r16
    1f42:	0e 94 53 05 	call	0xaa6	; 0xaa6 <uxListRemove>
    1f46:	80 91 da 07 	lds	r24, 0x07DA	; 0x8007da <uxSchedulerSuspended>
    1f4a:	81 11       	cpse	r24, r1
    1f4c:	1c c0       	rjmp	.+56     	; 0x1f86 <xTaskRemoveFromEventList+0x62>
    1f4e:	0a 50       	subi	r16, 0x0A	; 10
    1f50:	11 09       	sbc	r17, r1
    1f52:	c8 01       	movw	r24, r16
    1f54:	0e 94 53 05 	call	0xaa6	; 0xaa6 <uxListRemove>
    1f58:	8e 89       	ldd	r24, Y+22	; 0x16
    1f5a:	90 91 e4 07 	lds	r25, 0x07E4	; 0x8007e4 <uxTopReadyPriority>
    1f5e:	98 17       	cp	r25, r24
    1f60:	10 f4       	brcc	.+4      	; 0x1f66 <xTaskRemoveFromEventList+0x42>
    1f62:	80 93 e4 07 	sts	0x07E4, r24	; 0x8007e4 <uxTopReadyPriority>
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	9c 01       	movw	r18, r24
    1f6a:	22 0f       	add	r18, r18
    1f6c:	33 1f       	adc	r19, r19
    1f6e:	22 0f       	add	r18, r18
    1f70:	33 1f       	adc	r19, r19
    1f72:	22 0f       	add	r18, r18
    1f74:	33 1f       	adc	r19, r19
    1f76:	82 0f       	add	r24, r18
    1f78:	93 1f       	adc	r25, r19
    1f7a:	b8 01       	movw	r22, r16
    1f7c:	86 5e       	subi	r24, 0xE6	; 230
    1f7e:	97 4f       	sbci	r25, 0xF7	; 247
    1f80:	0e 94 01 05 	call	0xa02	; 0xa02 <vListInsertEnd>
    1f84:	05 c0       	rjmp	.+10     	; 0x1f90 <xTaskRemoveFromEventList+0x6c>
    1f86:	b8 01       	movw	r22, r16
    1f88:	8b ef       	ldi	r24, 0xFB	; 251
    1f8a:	97 e0       	ldi	r25, 0x07	; 7
    1f8c:	0e 94 01 05 	call	0xa02	; 0xa02 <vListInsertEnd>
    1f90:	e0 91 3e 08 	lds	r30, 0x083E	; 0x80083e <pxCurrentTCB>
    1f94:	f0 91 3f 08 	lds	r31, 0x083F	; 0x80083f <pxCurrentTCB+0x1>
    1f98:	9e 89       	ldd	r25, Y+22	; 0x16
    1f9a:	86 89       	ldd	r24, Z+22	; 0x16
    1f9c:	89 17       	cp	r24, r25
    1f9e:	20 f4       	brcc	.+8      	; 0x1fa8 <xTaskRemoveFromEventList+0x84>
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	80 93 e1 07 	sts	0x07E1, r24	; 0x8007e1 <xYieldPending>
    1fa6:	01 c0       	rjmp	.+2      	; 0x1faa <xTaskRemoveFromEventList+0x86>
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	df 91       	pop	r29
    1fac:	cf 91       	pop	r28
    1fae:	1f 91       	pop	r17
    1fb0:	0f 91       	pop	r16
    1fb2:	08 95       	ret

00001fb4 <vTaskInternalSetTimeOutState>:
    1fb4:	20 91 e0 07 	lds	r18, 0x07E0	; 0x8007e0 <xNumOfOverflows>
    1fb8:	fc 01       	movw	r30, r24
    1fba:	20 83       	st	Z, r18
    1fbc:	20 91 e5 07 	lds	r18, 0x07E5	; 0x8007e5 <xTickCount>
    1fc0:	30 91 e6 07 	lds	r19, 0x07E6	; 0x8007e6 <xTickCount+0x1>
    1fc4:	32 83       	std	Z+2, r19	; 0x02
    1fc6:	21 83       	std	Z+1, r18	; 0x01
    1fc8:	08 95       	ret

00001fca <xTaskCheckForTimeOut>:
    1fca:	cf 93       	push	r28
    1fcc:	df 93       	push	r29
    1fce:	0f b6       	in	r0, 0x3f	; 63
    1fd0:	f8 94       	cli
    1fd2:	0f 92       	push	r0
    1fd4:	20 91 e5 07 	lds	r18, 0x07E5	; 0x8007e5 <xTickCount>
    1fd8:	30 91 e6 07 	lds	r19, 0x07E6	; 0x8007e6 <xTickCount+0x1>
    1fdc:	db 01       	movw	r26, r22
    1fde:	4d 91       	ld	r20, X+
    1fe0:	5c 91       	ld	r21, X
    1fe2:	4f 3f       	cpi	r20, 0xFF	; 255
    1fe4:	bf ef       	ldi	r27, 0xFF	; 255
    1fe6:	5b 07       	cpc	r21, r27
    1fe8:	e9 f0       	breq	.+58     	; 0x2024 <xTaskCheckForTimeOut+0x5a>
    1fea:	ec 01       	movw	r28, r24
    1fec:	e9 81       	ldd	r30, Y+1	; 0x01
    1fee:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff0:	a0 91 e0 07 	lds	r26, 0x07E0	; 0x8007e0 <xNumOfOverflows>
    1ff4:	b8 81       	ld	r27, Y
    1ff6:	ba 17       	cp	r27, r26
    1ff8:	19 f0       	breq	.+6      	; 0x2000 <xTaskCheckForTimeOut+0x36>
    1ffa:	2e 17       	cp	r18, r30
    1ffc:	3f 07       	cpc	r19, r31
    1ffe:	a0 f4       	brcc	.+40     	; 0x2028 <xTaskCheckForTimeOut+0x5e>
    2000:	2e 1b       	sub	r18, r30
    2002:	3f 0b       	sbc	r19, r31
    2004:	24 17       	cp	r18, r20
    2006:	35 07       	cpc	r19, r21
    2008:	40 f4       	brcc	.+16     	; 0x201a <xTaskCheckForTimeOut+0x50>
    200a:	fb 01       	movw	r30, r22
    200c:	42 1b       	sub	r20, r18
    200e:	53 0b       	sbc	r21, r19
    2010:	51 83       	std	Z+1, r21	; 0x01
    2012:	40 83       	st	Z, r20
    2014:	cf df       	rcall	.-98     	; 0x1fb4 <vTaskInternalSetTimeOutState>
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	08 c0       	rjmp	.+16     	; 0x202a <xTaskCheckForTimeOut+0x60>
    201a:	fb 01       	movw	r30, r22
    201c:	11 82       	std	Z+1, r1	; 0x01
    201e:	10 82       	st	Z, r1
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	03 c0       	rjmp	.+6      	; 0x202a <xTaskCheckForTimeOut+0x60>
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	01 c0       	rjmp	.+2      	; 0x202a <xTaskCheckForTimeOut+0x60>
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	0f 90       	pop	r0
    202c:	0f be       	out	0x3f, r0	; 63
    202e:	df 91       	pop	r29
    2030:	cf 91       	pop	r28
    2032:	08 95       	ret

00002034 <vTaskMissedYield>:
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	80 93 e1 07 	sts	0x07E1, r24	; 0x8007e1 <xYieldPending>
    203a:	08 95       	ret

0000203c <xTaskGetCurrentTaskHandle>:
    203c:	80 91 3e 08 	lds	r24, 0x083E	; 0x80083e <pxCurrentTCB>
    2040:	90 91 3f 08 	lds	r25, 0x083F	; 0x80083f <pxCurrentTCB+0x1>
    2044:	08 95       	ret

00002046 <xTaskGetSchedulerState>:
    2046:	80 91 e3 07 	lds	r24, 0x07E3	; 0x8007e3 <xSchedulerRunning>
    204a:	88 23       	and	r24, r24
    204c:	31 f0       	breq	.+12     	; 0x205a <xTaskGetSchedulerState+0x14>
    204e:	80 91 da 07 	lds	r24, 0x07DA	; 0x8007da <uxSchedulerSuspended>
    2052:	88 23       	and	r24, r24
    2054:	21 f0       	breq	.+8      	; 0x205e <xTaskGetSchedulerState+0x18>
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	08 95       	ret
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	08 95       	ret
    205e:	82 e0       	ldi	r24, 0x02	; 2
    2060:	08 95       	ret

00002062 <xTaskPriorityDisinherit>:
    2062:	0f 93       	push	r16
    2064:	1f 93       	push	r17
    2066:	cf 93       	push	r28
    2068:	df 93       	push	r29
    206a:	fc 01       	movw	r30, r24
    206c:	89 2b       	or	r24, r25
    206e:	79 f1       	breq	.+94     	; 0x20ce <xTaskPriorityDisinherit+0x6c>
    2070:	84 a1       	ldd	r24, Z+36	; 0x24
    2072:	81 50       	subi	r24, 0x01	; 1
    2074:	84 a3       	std	Z+36, r24	; 0x24
    2076:	26 89       	ldd	r18, Z+22	; 0x16
    2078:	93 a1       	ldd	r25, Z+35	; 0x23
    207a:	29 17       	cp	r18, r25
    207c:	51 f1       	breq	.+84     	; 0x20d2 <xTaskPriorityDisinherit+0x70>
    207e:	81 11       	cpse	r24, r1
    2080:	2a c0       	rjmp	.+84     	; 0x20d6 <xTaskPriorityDisinherit+0x74>
    2082:	ef 01       	movw	r28, r30
    2084:	8f 01       	movw	r16, r30
    2086:	0e 5f       	subi	r16, 0xFE	; 254
    2088:	1f 4f       	sbci	r17, 0xFF	; 255
    208a:	c8 01       	movw	r24, r16
    208c:	0e 94 53 05 	call	0xaa6	; 0xaa6 <uxListRemove>
    2090:	8b a1       	ldd	r24, Y+35	; 0x23
    2092:	8e 8b       	std	Y+22, r24	; 0x16
    2094:	24 e0       	ldi	r18, 0x04	; 4
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	28 1b       	sub	r18, r24
    209a:	31 09       	sbc	r19, r1
    209c:	3d 87       	std	Y+13, r19	; 0x0d
    209e:	2c 87       	std	Y+12, r18	; 0x0c
    20a0:	90 91 e4 07 	lds	r25, 0x07E4	; 0x8007e4 <uxTopReadyPriority>
    20a4:	98 17       	cp	r25, r24
    20a6:	10 f4       	brcc	.+4      	; 0x20ac <xTaskPriorityDisinherit+0x4a>
    20a8:	80 93 e4 07 	sts	0x07E4, r24	; 0x8007e4 <uxTopReadyPriority>
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	9c 01       	movw	r18, r24
    20b0:	22 0f       	add	r18, r18
    20b2:	33 1f       	adc	r19, r19
    20b4:	22 0f       	add	r18, r18
    20b6:	33 1f       	adc	r19, r19
    20b8:	22 0f       	add	r18, r18
    20ba:	33 1f       	adc	r19, r19
    20bc:	82 0f       	add	r24, r18
    20be:	93 1f       	adc	r25, r19
    20c0:	b8 01       	movw	r22, r16
    20c2:	86 5e       	subi	r24, 0xE6	; 230
    20c4:	97 4f       	sbci	r25, 0xF7	; 247
    20c6:	0e 94 01 05 	call	0xa02	; 0xa02 <vListInsertEnd>
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	05 c0       	rjmp	.+10     	; 0x20d8 <xTaskPriorityDisinherit+0x76>
    20ce:	80 e0       	ldi	r24, 0x00	; 0
    20d0:	03 c0       	rjmp	.+6      	; 0x20d8 <xTaskPriorityDisinherit+0x76>
    20d2:	80 e0       	ldi	r24, 0x00	; 0
    20d4:	01 c0       	rjmp	.+2      	; 0x20d8 <xTaskPriorityDisinherit+0x76>
    20d6:	80 e0       	ldi	r24, 0x00	; 0
    20d8:	df 91       	pop	r29
    20da:	cf 91       	pop	r28
    20dc:	1f 91       	pop	r17
    20de:	0f 91       	pop	r16
    20e0:	08 95       	ret

000020e2 <xTaskNotifyWait>:
    20e2:	4f 92       	push	r4
    20e4:	5f 92       	push	r5
    20e6:	6f 92       	push	r6
    20e8:	7f 92       	push	r7
    20ea:	8f 92       	push	r8
    20ec:	9f 92       	push	r9
    20ee:	af 92       	push	r10
    20f0:	bf 92       	push	r11
    20f2:	ef 92       	push	r14
    20f4:	ff 92       	push	r15
    20f6:	0f 93       	push	r16
    20f8:	1f 93       	push	r17
    20fa:	49 01       	movw	r8, r18
    20fc:	5a 01       	movw	r10, r20
    20fe:	0f b6       	in	r0, 0x3f	; 63
    2100:	f8 94       	cli
    2102:	0f 92       	push	r0
    2104:	e0 91 3e 08 	lds	r30, 0x083E	; 0x80083e <pxCurrentTCB>
    2108:	f0 91 3f 08 	lds	r31, 0x083F	; 0x80083f <pxCurrentTCB+0x1>
    210c:	23 a5       	ldd	r18, Z+43	; 0x2b
    210e:	22 30       	cpi	r18, 0x02	; 2
    2110:	21 f1       	breq	.+72     	; 0x215a <xTaskNotifyWait+0x78>
    2112:	e0 91 3e 08 	lds	r30, 0x083E	; 0x80083e <pxCurrentTCB>
    2116:	f0 91 3f 08 	lds	r31, 0x083F	; 0x80083f <pxCurrentTCB+0x1>
    211a:	47 a0       	ldd	r4, Z+39	; 0x27
    211c:	50 a4       	ldd	r5, Z+40	; 0x28
    211e:	61 a4       	ldd	r6, Z+41	; 0x29
    2120:	72 a4       	ldd	r7, Z+42	; 0x2a
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	80 95       	com	r24
    2128:	90 95       	com	r25
    212a:	a0 95       	com	r26
    212c:	b0 95       	com	r27
    212e:	84 21       	and	r24, r4
    2130:	95 21       	and	r25, r5
    2132:	a6 21       	and	r26, r6
    2134:	b7 21       	and	r27, r7
    2136:	87 a3       	std	Z+39, r24	; 0x27
    2138:	90 a7       	std	Z+40, r25	; 0x28
    213a:	a1 a7       	std	Z+41, r26	; 0x29
    213c:	b2 a7       	std	Z+42, r27	; 0x2a
    213e:	e0 91 3e 08 	lds	r30, 0x083E	; 0x80083e <pxCurrentTCB>
    2142:	f0 91 3f 08 	lds	r31, 0x083F	; 0x80083f <pxCurrentTCB+0x1>
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	83 a7       	std	Z+43, r24	; 0x2b
    214a:	e1 14       	cp	r14, r1
    214c:	f1 04       	cpc	r15, r1
    214e:	29 f0       	breq	.+10     	; 0x215a <xTaskNotifyWait+0x78>
    2150:	61 e0       	ldi	r22, 0x01	; 1
    2152:	c7 01       	movw	r24, r14
    2154:	42 db       	rcall	.-2428   	; 0x17da <prvAddCurrentTaskToDelayedList>
    2156:	0e 94 28 06 	call	0xc50	; 0xc50 <vPortYield>
    215a:	0f 90       	pop	r0
    215c:	0f be       	out	0x3f, r0	; 63
    215e:	0f b6       	in	r0, 0x3f	; 63
    2160:	f8 94       	cli
    2162:	0f 92       	push	r0
    2164:	01 15       	cp	r16, r1
    2166:	11 05       	cpc	r17, r1
    2168:	69 f0       	breq	.+26     	; 0x2184 <xTaskNotifyWait+0xa2>
    216a:	e0 91 3e 08 	lds	r30, 0x083E	; 0x80083e <pxCurrentTCB>
    216e:	f0 91 3f 08 	lds	r31, 0x083F	; 0x80083f <pxCurrentTCB+0x1>
    2172:	87 a1       	ldd	r24, Z+39	; 0x27
    2174:	90 a5       	ldd	r25, Z+40	; 0x28
    2176:	a1 a5       	ldd	r26, Z+41	; 0x29
    2178:	b2 a5       	ldd	r27, Z+42	; 0x2a
    217a:	f8 01       	movw	r30, r16
    217c:	80 83       	st	Z, r24
    217e:	91 83       	std	Z+1, r25	; 0x01
    2180:	a2 83       	std	Z+2, r26	; 0x02
    2182:	b3 83       	std	Z+3, r27	; 0x03
    2184:	e0 91 3e 08 	lds	r30, 0x083E	; 0x80083e <pxCurrentTCB>
    2188:	f0 91 3f 08 	lds	r31, 0x083F	; 0x80083f <pxCurrentTCB+0x1>
    218c:	83 a5       	ldd	r24, Z+43	; 0x2b
    218e:	82 30       	cpi	r24, 0x02	; 2
    2190:	b1 f4       	brne	.+44     	; 0x21be <xTaskNotifyWait+0xdc>
    2192:	e0 91 3e 08 	lds	r30, 0x083E	; 0x80083e <pxCurrentTCB>
    2196:	f0 91 3f 08 	lds	r31, 0x083F	; 0x80083f <pxCurrentTCB+0x1>
    219a:	87 a1       	ldd	r24, Z+39	; 0x27
    219c:	90 a5       	ldd	r25, Z+40	; 0x28
    219e:	a1 a5       	ldd	r26, Z+41	; 0x29
    21a0:	b2 a5       	ldd	r27, Z+42	; 0x2a
    21a2:	80 94       	com	r8
    21a4:	90 94       	com	r9
    21a6:	a0 94       	com	r10
    21a8:	b0 94       	com	r11
    21aa:	88 22       	and	r8, r24
    21ac:	99 22       	and	r9, r25
    21ae:	aa 22       	and	r10, r26
    21b0:	bb 22       	and	r11, r27
    21b2:	87 a2       	std	Z+39, r8	; 0x27
    21b4:	90 a6       	std	Z+40, r9	; 0x28
    21b6:	a1 a6       	std	Z+41, r10	; 0x29
    21b8:	b2 a6       	std	Z+42, r11	; 0x2a
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	01 c0       	rjmp	.+2      	; 0x21c0 <xTaskNotifyWait+0xde>
    21be:	80 e0       	ldi	r24, 0x00	; 0
    21c0:	e0 91 3e 08 	lds	r30, 0x083E	; 0x80083e <pxCurrentTCB>
    21c4:	f0 91 3f 08 	lds	r31, 0x083F	; 0x80083f <pxCurrentTCB+0x1>
    21c8:	13 a6       	std	Z+43, r1	; 0x2b
    21ca:	0f 90       	pop	r0
    21cc:	0f be       	out	0x3f, r0	; 63
    21ce:	1f 91       	pop	r17
    21d0:	0f 91       	pop	r16
    21d2:	ff 90       	pop	r15
    21d4:	ef 90       	pop	r14
    21d6:	bf 90       	pop	r11
    21d8:	af 90       	pop	r10
    21da:	9f 90       	pop	r9
    21dc:	8f 90       	pop	r8
    21de:	7f 90       	pop	r7
    21e0:	6f 90       	pop	r6
    21e2:	5f 90       	pop	r5
    21e4:	4f 90       	pop	r4
    21e6:	08 95       	ret

000021e8 <xTaskGenericNotify>:
    21e8:	0f 93       	push	r16
    21ea:	1f 93       	push	r17
    21ec:	cf 93       	push	r28
    21ee:	df 93       	push	r29
    21f0:	fc 01       	movw	r30, r24
    21f2:	0f b6       	in	r0, 0x3f	; 63
    21f4:	f8 94       	cli
    21f6:	0f 92       	push	r0
    21f8:	01 15       	cp	r16, r1
    21fa:	11 05       	cpc	r17, r1
    21fc:	49 f0       	breq	.+18     	; 0x2210 <__stack+0x11>
    21fe:	87 a1       	ldd	r24, Z+39	; 0x27
    2200:	90 a5       	ldd	r25, Z+40	; 0x28
    2202:	a1 a5       	ldd	r26, Z+41	; 0x29
    2204:	b2 a5       	ldd	r27, Z+42	; 0x2a
    2206:	e8 01       	movw	r28, r16
    2208:	88 83       	st	Y, r24
    220a:	99 83       	std	Y+1, r25	; 0x01
    220c:	aa 83       	std	Y+2, r26	; 0x02
    220e:	bb 83       	std	Y+3, r27	; 0x03
    2210:	83 a5       	ldd	r24, Z+43	; 0x2b
    2212:	92 e0       	ldi	r25, 0x02	; 2
    2214:	93 a7       	std	Z+43, r25	; 0x2b
    2216:	22 30       	cpi	r18, 0x02	; 2
    2218:	b1 f0       	breq	.+44     	; 0x2246 <__stack+0x47>
    221a:	18 f4       	brcc	.+6      	; 0x2222 <__stack+0x23>
    221c:	21 30       	cpi	r18, 0x01	; 1
    221e:	31 f0       	breq	.+12     	; 0x222c <__stack+0x2d>
    2220:	2a c0       	rjmp	.+84     	; 0x2276 <__stack+0x77>
    2222:	23 30       	cpi	r18, 0x03	; 3
    2224:	e9 f0       	breq	.+58     	; 0x2260 <__stack+0x61>
    2226:	24 30       	cpi	r18, 0x04	; 4
    2228:	01 f1       	breq	.+64     	; 0x226a <__stack+0x6b>
    222a:	25 c0       	rjmp	.+74     	; 0x2276 <__stack+0x77>
    222c:	07 a1       	ldd	r16, Z+39	; 0x27
    222e:	10 a5       	ldd	r17, Z+40	; 0x28
    2230:	21 a5       	ldd	r18, Z+41	; 0x29
    2232:	32 a5       	ldd	r19, Z+42	; 0x2a
    2234:	40 2b       	or	r20, r16
    2236:	51 2b       	or	r21, r17
    2238:	62 2b       	or	r22, r18
    223a:	73 2b       	or	r23, r19
    223c:	47 a3       	std	Z+39, r20	; 0x27
    223e:	50 a7       	std	Z+40, r21	; 0x28
    2240:	61 a7       	std	Z+41, r22	; 0x29
    2242:	72 a7       	std	Z+42, r23	; 0x2a
    2244:	18 c0       	rjmp	.+48     	; 0x2276 <__stack+0x77>
    2246:	47 a1       	ldd	r20, Z+39	; 0x27
    2248:	50 a5       	ldd	r21, Z+40	; 0x28
    224a:	61 a5       	ldd	r22, Z+41	; 0x29
    224c:	72 a5       	ldd	r23, Z+42	; 0x2a
    224e:	4f 5f       	subi	r20, 0xFF	; 255
    2250:	5f 4f       	sbci	r21, 0xFF	; 255
    2252:	6f 4f       	sbci	r22, 0xFF	; 255
    2254:	7f 4f       	sbci	r23, 0xFF	; 255
    2256:	47 a3       	std	Z+39, r20	; 0x27
    2258:	50 a7       	std	Z+40, r21	; 0x28
    225a:	61 a7       	std	Z+41, r22	; 0x29
    225c:	72 a7       	std	Z+42, r23	; 0x2a
    225e:	0b c0       	rjmp	.+22     	; 0x2276 <__stack+0x77>
    2260:	47 a3       	std	Z+39, r20	; 0x27
    2262:	50 a7       	std	Z+40, r21	; 0x28
    2264:	61 a7       	std	Z+41, r22	; 0x29
    2266:	72 a7       	std	Z+42, r23	; 0x2a
    2268:	06 c0       	rjmp	.+12     	; 0x2276 <__stack+0x77>
    226a:	82 30       	cpi	r24, 0x02	; 2
    226c:	79 f1       	breq	.+94     	; 0x22cc <__stack+0xcd>
    226e:	47 a3       	std	Z+39, r20	; 0x27
    2270:	50 a7       	std	Z+40, r21	; 0x28
    2272:	61 a7       	std	Z+41, r22	; 0x29
    2274:	72 a7       	std	Z+42, r23	; 0x2a
    2276:	81 30       	cpi	r24, 0x01	; 1
    2278:	59 f5       	brne	.+86     	; 0x22d0 <__stack+0xd1>
    227a:	ef 01       	movw	r28, r30
    227c:	8f 01       	movw	r16, r30
    227e:	0e 5f       	subi	r16, 0xFE	; 254
    2280:	1f 4f       	sbci	r17, 0xFF	; 255
    2282:	c8 01       	movw	r24, r16
    2284:	0e 94 53 05 	call	0xaa6	; 0xaa6 <uxListRemove>
    2288:	8e 89       	ldd	r24, Y+22	; 0x16
    228a:	90 91 e4 07 	lds	r25, 0x07E4	; 0x8007e4 <uxTopReadyPriority>
    228e:	98 17       	cp	r25, r24
    2290:	10 f4       	brcc	.+4      	; 0x2296 <__stack+0x97>
    2292:	80 93 e4 07 	sts	0x07E4, r24	; 0x8007e4 <uxTopReadyPriority>
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	9c 01       	movw	r18, r24
    229a:	22 0f       	add	r18, r18
    229c:	33 1f       	adc	r19, r19
    229e:	22 0f       	add	r18, r18
    22a0:	33 1f       	adc	r19, r19
    22a2:	22 0f       	add	r18, r18
    22a4:	33 1f       	adc	r19, r19
    22a6:	82 0f       	add	r24, r18
    22a8:	93 1f       	adc	r25, r19
    22aa:	b8 01       	movw	r22, r16
    22ac:	86 5e       	subi	r24, 0xE6	; 230
    22ae:	97 4f       	sbci	r25, 0xF7	; 247
    22b0:	0e 94 01 05 	call	0xa02	; 0xa02 <vListInsertEnd>
    22b4:	e0 91 3e 08 	lds	r30, 0x083E	; 0x80083e <pxCurrentTCB>
    22b8:	f0 91 3f 08 	lds	r31, 0x083F	; 0x80083f <pxCurrentTCB+0x1>
    22bc:	9e 89       	ldd	r25, Y+22	; 0x16
    22be:	86 89       	ldd	r24, Z+22	; 0x16
    22c0:	89 17       	cp	r24, r25
    22c2:	40 f4       	brcc	.+16     	; 0x22d4 <__stack+0xd5>
    22c4:	0e 94 28 06 	call	0xc50	; 0xc50 <vPortYield>
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	05 c0       	rjmp	.+10     	; 0x22d6 <__stack+0xd7>
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	03 c0       	rjmp	.+6      	; 0x22d6 <__stack+0xd7>
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	01 c0       	rjmp	.+2      	; 0x22d6 <__stack+0xd7>
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	0f 90       	pop	r0
    22d8:	0f be       	out	0x3f, r0	; 63
    22da:	df 91       	pop	r29
    22dc:	cf 91       	pop	r28
    22de:	1f 91       	pop	r17
    22e0:	0f 91       	pop	r16
    22e2:	08 95       	ret

000022e4 <xTaskGenericNotifyFromISR>:
    22e4:	ef 92       	push	r14
    22e6:	ff 92       	push	r15
    22e8:	0f 93       	push	r16
    22ea:	1f 93       	push	r17
    22ec:	cf 93       	push	r28
    22ee:	df 93       	push	r29
    22f0:	fc 01       	movw	r30, r24
    22f2:	01 15       	cp	r16, r1
    22f4:	11 05       	cpc	r17, r1
    22f6:	49 f0       	breq	.+18     	; 0x230a <xTaskGenericNotifyFromISR+0x26>
    22f8:	87 a1       	ldd	r24, Z+39	; 0x27
    22fa:	90 a5       	ldd	r25, Z+40	; 0x28
    22fc:	a1 a5       	ldd	r26, Z+41	; 0x29
    22fe:	b2 a5       	ldd	r27, Z+42	; 0x2a
    2300:	e8 01       	movw	r28, r16
    2302:	88 83       	st	Y, r24
    2304:	99 83       	std	Y+1, r25	; 0x01
    2306:	aa 83       	std	Y+2, r26	; 0x02
    2308:	bb 83       	std	Y+3, r27	; 0x03
    230a:	83 a5       	ldd	r24, Z+43	; 0x2b
    230c:	92 e0       	ldi	r25, 0x02	; 2
    230e:	93 a7       	std	Z+43, r25	; 0x2b
    2310:	22 30       	cpi	r18, 0x02	; 2
    2312:	b1 f0       	breq	.+44     	; 0x2340 <xTaskGenericNotifyFromISR+0x5c>
    2314:	18 f4       	brcc	.+6      	; 0x231c <xTaskGenericNotifyFromISR+0x38>
    2316:	21 30       	cpi	r18, 0x01	; 1
    2318:	31 f0       	breq	.+12     	; 0x2326 <xTaskGenericNotifyFromISR+0x42>
    231a:	2b c0       	rjmp	.+86     	; 0x2372 <xTaskGenericNotifyFromISR+0x8e>
    231c:	23 30       	cpi	r18, 0x03	; 3
    231e:	e9 f0       	breq	.+58     	; 0x235a <xTaskGenericNotifyFromISR+0x76>
    2320:	24 30       	cpi	r18, 0x04	; 4
    2322:	01 f1       	breq	.+64     	; 0x2364 <xTaskGenericNotifyFromISR+0x80>
    2324:	26 c0       	rjmp	.+76     	; 0x2372 <xTaskGenericNotifyFromISR+0x8e>
    2326:	07 a1       	ldd	r16, Z+39	; 0x27
    2328:	10 a5       	ldd	r17, Z+40	; 0x28
    232a:	21 a5       	ldd	r18, Z+41	; 0x29
    232c:	32 a5       	ldd	r19, Z+42	; 0x2a
    232e:	40 2b       	or	r20, r16
    2330:	51 2b       	or	r21, r17
    2332:	62 2b       	or	r22, r18
    2334:	73 2b       	or	r23, r19
    2336:	47 a3       	std	Z+39, r20	; 0x27
    2338:	50 a7       	std	Z+40, r21	; 0x28
    233a:	61 a7       	std	Z+41, r22	; 0x29
    233c:	72 a7       	std	Z+42, r23	; 0x2a
    233e:	19 c0       	rjmp	.+50     	; 0x2372 <xTaskGenericNotifyFromISR+0x8e>
    2340:	47 a1       	ldd	r20, Z+39	; 0x27
    2342:	50 a5       	ldd	r21, Z+40	; 0x28
    2344:	61 a5       	ldd	r22, Z+41	; 0x29
    2346:	72 a5       	ldd	r23, Z+42	; 0x2a
    2348:	4f 5f       	subi	r20, 0xFF	; 255
    234a:	5f 4f       	sbci	r21, 0xFF	; 255
    234c:	6f 4f       	sbci	r22, 0xFF	; 255
    234e:	7f 4f       	sbci	r23, 0xFF	; 255
    2350:	47 a3       	std	Z+39, r20	; 0x27
    2352:	50 a7       	std	Z+40, r21	; 0x28
    2354:	61 a7       	std	Z+41, r22	; 0x29
    2356:	72 a7       	std	Z+42, r23	; 0x2a
    2358:	0c c0       	rjmp	.+24     	; 0x2372 <xTaskGenericNotifyFromISR+0x8e>
    235a:	47 a3       	std	Z+39, r20	; 0x27
    235c:	50 a7       	std	Z+40, r21	; 0x28
    235e:	61 a7       	std	Z+41, r22	; 0x29
    2360:	72 a7       	std	Z+42, r23	; 0x2a
    2362:	07 c0       	rjmp	.+14     	; 0x2372 <xTaskGenericNotifyFromISR+0x8e>
    2364:	82 30       	cpi	r24, 0x02	; 2
    2366:	09 f4       	brne	.+2      	; 0x236a <xTaskGenericNotifyFromISR+0x86>
    2368:	41 c0       	rjmp	.+130    	; 0x23ec <xTaskGenericNotifyFromISR+0x108>
    236a:	47 a3       	std	Z+39, r20	; 0x27
    236c:	50 a7       	std	Z+40, r21	; 0x28
    236e:	61 a7       	std	Z+41, r22	; 0x29
    2370:	72 a7       	std	Z+42, r23	; 0x2a
    2372:	81 30       	cpi	r24, 0x01	; 1
    2374:	e9 f5       	brne	.+122    	; 0x23f0 <xTaskGenericNotifyFromISR+0x10c>
    2376:	ef 01       	movw	r28, r30
    2378:	80 91 da 07 	lds	r24, 0x07DA	; 0x8007da <uxSchedulerSuspended>
    237c:	81 11       	cpse	r24, r1
    237e:	1d c0       	rjmp	.+58     	; 0x23ba <xTaskGenericNotifyFromISR+0xd6>
    2380:	8f 01       	movw	r16, r30
    2382:	0e 5f       	subi	r16, 0xFE	; 254
    2384:	1f 4f       	sbci	r17, 0xFF	; 255
    2386:	c8 01       	movw	r24, r16
    2388:	0e 94 53 05 	call	0xaa6	; 0xaa6 <uxListRemove>
    238c:	8e 89       	ldd	r24, Y+22	; 0x16
    238e:	90 91 e4 07 	lds	r25, 0x07E4	; 0x8007e4 <uxTopReadyPriority>
    2392:	98 17       	cp	r25, r24
    2394:	10 f4       	brcc	.+4      	; 0x239a <xTaskGenericNotifyFromISR+0xb6>
    2396:	80 93 e4 07 	sts	0x07E4, r24	; 0x8007e4 <uxTopReadyPriority>
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	9c 01       	movw	r18, r24
    239e:	22 0f       	add	r18, r18
    23a0:	33 1f       	adc	r19, r19
    23a2:	22 0f       	add	r18, r18
    23a4:	33 1f       	adc	r19, r19
    23a6:	22 0f       	add	r18, r18
    23a8:	33 1f       	adc	r19, r19
    23aa:	82 0f       	add	r24, r18
    23ac:	93 1f       	adc	r25, r19
    23ae:	b8 01       	movw	r22, r16
    23b0:	86 5e       	subi	r24, 0xE6	; 230
    23b2:	97 4f       	sbci	r25, 0xF7	; 247
    23b4:	0e 94 01 05 	call	0xa02	; 0xa02 <vListInsertEnd>
    23b8:	07 c0       	rjmp	.+14     	; 0x23c8 <xTaskGenericNotifyFromISR+0xe4>
    23ba:	bf 01       	movw	r22, r30
    23bc:	64 5f       	subi	r22, 0xF4	; 244
    23be:	7f 4f       	sbci	r23, 0xFF	; 255
    23c0:	8b ef       	ldi	r24, 0xFB	; 251
    23c2:	97 e0       	ldi	r25, 0x07	; 7
    23c4:	0e 94 01 05 	call	0xa02	; 0xa02 <vListInsertEnd>
    23c8:	e0 91 3e 08 	lds	r30, 0x083E	; 0x80083e <pxCurrentTCB>
    23cc:	f0 91 3f 08 	lds	r31, 0x083F	; 0x80083f <pxCurrentTCB+0x1>
    23d0:	9e 89       	ldd	r25, Y+22	; 0x16
    23d2:	86 89       	ldd	r24, Z+22	; 0x16
    23d4:	89 17       	cp	r24, r25
    23d6:	70 f4       	brcc	.+28     	; 0x23f4 <xTaskGenericNotifyFromISR+0x110>
    23d8:	e1 14       	cp	r14, r1
    23da:	f1 04       	cpc	r15, r1
    23dc:	19 f0       	breq	.+6      	; 0x23e4 <xTaskGenericNotifyFromISR+0x100>
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	f7 01       	movw	r30, r14
    23e2:	80 83       	st	Z, r24
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	80 93 e1 07 	sts	0x07E1, r24	; 0x8007e1 <xYieldPending>
    23ea:	05 c0       	rjmp	.+10     	; 0x23f6 <xTaskGenericNotifyFromISR+0x112>
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	03 c0       	rjmp	.+6      	; 0x23f6 <xTaskGenericNotifyFromISR+0x112>
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	01 c0       	rjmp	.+2      	; 0x23f6 <xTaskGenericNotifyFromISR+0x112>
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	df 91       	pop	r29
    23f8:	cf 91       	pop	r28
    23fa:	1f 91       	pop	r17
    23fc:	0f 91       	pop	r16
    23fe:	ff 90       	pop	r15
    2400:	ef 90       	pop	r14
    2402:	08 95       	ret

00002404 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2404:	00 97       	sbiw	r24, 0x00	; 0
    2406:	21 f4       	brne	.+8      	; 0x2410 <xTaskNotifyStateClear+0xc>
    2408:	80 91 3e 08 	lds	r24, 0x083E	; 0x80083e <pxCurrentTCB>
    240c:	90 91 3f 08 	lds	r25, 0x083F	; 0x80083f <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2410:	0f b6       	in	r0, 0x3f	; 63
    2412:	f8 94       	cli
    2414:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    2416:	fc 01       	movw	r30, r24
    2418:	23 a5       	ldd	r18, Z+43	; 0x2b
    241a:	22 30       	cpi	r18, 0x02	; 2
    241c:	19 f4       	brne	.+6      	; 0x2424 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    241e:	13 a6       	std	Z+43, r1	; 0x2b
                xReturn = pdPASS;
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	01 c0       	rjmp	.+2      	; 0x2426 <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    2424:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2426:	0f 90       	pop	r0
    2428:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    242a:	08 95       	ret

0000242c <prvInsertTimerInActiveList>:
    242c:	fc 01       	movw	r30, r24
    242e:	73 83       	std	Z+3, r23	; 0x03
    2430:	62 83       	std	Z+2, r22	; 0x02
    2432:	91 87       	std	Z+9, r25	; 0x09
    2434:	80 87       	std	Z+8, r24	; 0x08
    2436:	46 17       	cp	r20, r22
    2438:	57 07       	cpc	r21, r23
    243a:	90 f0       	brcs	.+36     	; 0x2460 <prvInsertTimerInActiveList+0x34>
    243c:	42 1b       	sub	r20, r18
    243e:	53 0b       	sbc	r21, r19
    2440:	84 85       	ldd	r24, Z+12	; 0x0c
    2442:	95 85       	ldd	r25, Z+13	; 0x0d
    2444:	48 17       	cp	r20, r24
    2446:	59 07       	cpc	r21, r25
    2448:	e0 f4       	brcc	.+56     	; 0x2482 <prvInsertTimerInActiveList+0x56>
    244a:	bf 01       	movw	r22, r30
    244c:	6e 5f       	subi	r22, 0xFE	; 254
    244e:	7f 4f       	sbci	r23, 0xFF	; 255
    2450:	80 91 46 08 	lds	r24, 0x0846	; 0x800846 <pxOverflowTimerList>
    2454:	90 91 47 08 	lds	r25, 0x0847	; 0x800847 <pxOverflowTimerList+0x1>
    2458:	0e 94 22 05 	call	0xa44	; 0xa44 <vListInsert>
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	08 95       	ret
    2460:	42 17       	cp	r20, r18
    2462:	53 07       	cpc	r21, r19
    2464:	18 f4       	brcc	.+6      	; 0x246c <prvInsertTimerInActiveList+0x40>
    2466:	62 17       	cp	r22, r18
    2468:	73 07       	cpc	r23, r19
    246a:	68 f4       	brcc	.+26     	; 0x2486 <prvInsertTimerInActiveList+0x5a>
    246c:	bf 01       	movw	r22, r30
    246e:	6e 5f       	subi	r22, 0xFE	; 254
    2470:	7f 4f       	sbci	r23, 0xFF	; 255
    2472:	80 91 48 08 	lds	r24, 0x0848	; 0x800848 <pxCurrentTimerList>
    2476:	90 91 49 08 	lds	r25, 0x0849	; 0x800849 <pxCurrentTimerList+0x1>
    247a:	0e 94 22 05 	call	0xa44	; 0xa44 <vListInsert>
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	08 95       	ret
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	08 95       	ret
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	08 95       	ret

0000248a <prvCheckForValidListAndQueue>:
    248a:	0f b6       	in	r0, 0x3f	; 63
    248c:	f8 94       	cli
    248e:	0f 92       	push	r0
    2490:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <xTimerQueue>
    2494:	90 91 45 08 	lds	r25, 0x0845	; 0x800845 <xTimerQueue+0x1>
    2498:	89 2b       	or	r24, r25
    249a:	e9 f4       	brne	.+58     	; 0x24d6 <prvCheckForValidListAndQueue+0x4c>
    249c:	83 e5       	ldi	r24, 0x53	; 83
    249e:	98 e0       	ldi	r25, 0x08	; 8
    24a0:	0e 94 ef 04 	call	0x9de	; 0x9de <vListInitialise>
    24a4:	8a e4       	ldi	r24, 0x4A	; 74
    24a6:	98 e0       	ldi	r25, 0x08	; 8
    24a8:	0e 94 ef 04 	call	0x9de	; 0x9de <vListInitialise>
    24ac:	83 e5       	ldi	r24, 0x53	; 83
    24ae:	98 e0       	ldi	r25, 0x08	; 8
    24b0:	90 93 49 08 	sts	0x0849, r25	; 0x800849 <pxCurrentTimerList+0x1>
    24b4:	80 93 48 08 	sts	0x0848, r24	; 0x800848 <pxCurrentTimerList>
    24b8:	8a e4       	ldi	r24, 0x4A	; 74
    24ba:	98 e0       	ldi	r25, 0x08	; 8
    24bc:	90 93 47 08 	sts	0x0847, r25	; 0x800847 <pxOverflowTimerList+0x1>
    24c0:	80 93 46 08 	sts	0x0846, r24	; 0x800846 <pxOverflowTimerList>
    24c4:	40 e0       	ldi	r20, 0x00	; 0
    24c6:	65 e0       	ldi	r22, 0x05	; 5
    24c8:	8a e0       	ldi	r24, 0x0A	; 10
    24ca:	0e 94 01 08 	call	0x1002	; 0x1002 <xQueueGenericCreate>
    24ce:	90 93 45 08 	sts	0x0845, r25	; 0x800845 <xTimerQueue+0x1>
    24d2:	80 93 44 08 	sts	0x0844, r24	; 0x800844 <xTimerQueue>
    24d6:	0f 90       	pop	r0
    24d8:	0f be       	out	0x3f, r0	; 63
    24da:	08 95       	ret

000024dc <xTimerCreateTimerTask>:
    24dc:	ef 92       	push	r14
    24de:	ff 92       	push	r15
    24e0:	0f 93       	push	r16
    24e2:	d3 df       	rcall	.-90     	; 0x248a <prvCheckForValidListAndQueue>
    24e4:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <xTimerQueue>
    24e8:	90 91 45 08 	lds	r25, 0x0845	; 0x800845 <xTimerQueue+0x1>
    24ec:	89 2b       	or	r24, r25
    24ee:	89 f0       	breq	.+34     	; 0x2512 <xTimerCreateTimerTask+0x36>
    24f0:	0f 2e       	mov	r0, r31
    24f2:	f2 e4       	ldi	r31, 0x42	; 66
    24f4:	ef 2e       	mov	r14, r31
    24f6:	f8 e0       	ldi	r31, 0x08	; 8
    24f8:	ff 2e       	mov	r15, r31
    24fa:	f0 2d       	mov	r31, r0
    24fc:	06 e0       	ldi	r16, 0x06	; 6
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	45 e5       	ldi	r20, 0x55	; 85
    2504:	50 e0       	ldi	r21, 0x00	; 0
    2506:	6a ed       	ldi	r22, 0xDA	; 218
    2508:	74 e0       	ldi	r23, 0x04	; 4
    250a:	83 e0       	ldi	r24, 0x03	; 3
    250c:	91 e0       	ldi	r25, 0x01	; 1
    250e:	b9 d9       	rcall	.-3214   	; 0x1882 <xTaskCreate>
    2510:	01 c0       	rjmp	.+2      	; 0x2514 <xTimerCreateTimerTask+0x38>
    2512:	80 e0       	ldi	r24, 0x00	; 0
    2514:	0f 91       	pop	r16
    2516:	ff 90       	pop	r15
    2518:	ef 90       	pop	r14
    251a:	08 95       	ret

0000251c <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    251c:	0f 93       	push	r16
    251e:	1f 93       	push	r17
    2520:	cf 93       	push	r28
    2522:	df 93       	push	r29
    2524:	00 d0       	rcall	.+0      	; 0x2526 <xTimerGenericCommand+0xa>
    2526:	1f 92       	push	r1
    2528:	1f 92       	push	r1
    252a:	cd b7       	in	r28, 0x3d	; 61
    252c:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    252e:	e0 91 44 08 	lds	r30, 0x0844	; 0x800844 <xTimerQueue>
    2532:	f0 91 45 08 	lds	r31, 0x0845	; 0x800845 <xTimerQueue+0x1>
    2536:	30 97       	sbiw	r30, 0x00	; 0
    2538:	69 f1       	breq	.+90     	; 0x2594 <xTimerGenericCommand+0x78>
    253a:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    253c:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    253e:	5b 83       	std	Y+3, r21	; 0x03
    2540:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    2542:	9d 83       	std	Y+5, r25	; 0x05
    2544:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2546:	66 30       	cpi	r22, 0x06	; 6
    2548:	e4 f4       	brge	.+56     	; 0x2582 <xTimerGenericCommand+0x66>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    254a:	7d dd       	rcall	.-1286   	; 0x2046 <xTaskGetSchedulerState>
    254c:	82 30       	cpi	r24, 0x02	; 2
    254e:	61 f4       	brne	.+24     	; 0x2568 <xTimerGenericCommand+0x4c>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	a8 01       	movw	r20, r16
    2554:	be 01       	movw	r22, r28
    2556:	6f 5f       	subi	r22, 0xFF	; 255
    2558:	7f 4f       	sbci	r23, 0xFF	; 255
    255a:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <xTimerQueue>
    255e:	90 91 45 08 	lds	r25, 0x0845	; 0x800845 <xTimerQueue+0x1>
    2562:	0e 94 2f 08 	call	0x105e	; 0x105e <xQueueGenericSend>
    2566:	17 c0       	rjmp	.+46     	; 0x2596 <xTimerGenericCommand+0x7a>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	40 e0       	ldi	r20, 0x00	; 0
    256c:	50 e0       	ldi	r21, 0x00	; 0
    256e:	be 01       	movw	r22, r28
    2570:	6f 5f       	subi	r22, 0xFF	; 255
    2572:	7f 4f       	sbci	r23, 0xFF	; 255
    2574:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <xTimerQueue>
    2578:	90 91 45 08 	lds	r25, 0x0845	; 0x800845 <xTimerQueue+0x1>
    257c:	0e 94 2f 08 	call	0x105e	; 0x105e <xQueueGenericSend>
    2580:	0a c0       	rjmp	.+20     	; 0x2596 <xTimerGenericCommand+0x7a>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	ad 01       	movw	r20, r26
    2586:	be 01       	movw	r22, r28
    2588:	6f 5f       	subi	r22, 0xFF	; 255
    258a:	7f 4f       	sbci	r23, 0xFF	; 255
    258c:	cf 01       	movw	r24, r30
    258e:	0e 94 c1 08 	call	0x1182	; 0x1182 <xQueueGenericSendFromISR>
    2592:	01 c0       	rjmp	.+2      	; 0x2596 <xTimerGenericCommand+0x7a>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    2594:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    2596:	0f 90       	pop	r0
    2598:	0f 90       	pop	r0
    259a:	0f 90       	pop	r0
    259c:	0f 90       	pop	r0
    259e:	0f 90       	pop	r0
    25a0:	df 91       	pop	r29
    25a2:	cf 91       	pop	r28
    25a4:	1f 91       	pop	r17
    25a6:	0f 91       	pop	r16
    25a8:	08 95       	ret

000025aa <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    25aa:	af 92       	push	r10
    25ac:	bf 92       	push	r11
    25ae:	cf 92       	push	r12
    25b0:	df 92       	push	r13
    25b2:	ef 92       	push	r14
    25b4:	ff 92       	push	r15
    25b6:	0f 93       	push	r16
    25b8:	1f 93       	push	r17
    25ba:	cf 93       	push	r28
    25bc:	df 93       	push	r29
    25be:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    25c0:	a8 da       	rcall	.-2736   	; 0x1b12 <xTaskGetTickCount>
    25c2:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    25c4:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <xLastTime.2432>
    25c8:	90 91 41 08 	lds	r25, 0x0841	; 0x800841 <xLastTime.2432+0x1>
    25cc:	e8 16       	cp	r14, r24
    25ce:	f9 06       	cpc	r15, r25
    25d0:	08 f0       	brcs	.+2      	; 0x25d4 <prvSampleTimeNow+0x2a>
    25d2:	47 c0       	rjmp	.+142    	; 0x2662 <prvSampleTimeNow+0xb8>
    25d4:	2f c0       	rjmp	.+94     	; 0x2634 <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    25d6:	05 80       	ldd	r0, Z+5	; 0x05
    25d8:	f6 81       	ldd	r31, Z+6	; 0x06
    25da:	e0 2d       	mov	r30, r0
    25dc:	a0 80       	ld	r10, Z
    25de:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    25e0:	c6 81       	ldd	r28, Z+6	; 0x06
    25e2:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    25e4:	8e 01       	movw	r16, r28
    25e6:	0e 5f       	subi	r16, 0xFE	; 254
    25e8:	1f 4f       	sbci	r17, 0xFF	; 255
    25ea:	c8 01       	movw	r24, r16
    25ec:	0e 94 53 05 	call	0xaa6	; 0xaa6 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    25f0:	e8 89       	ldd	r30, Y+16	; 0x10
    25f2:	f9 89       	ldd	r31, Y+17	; 0x11
    25f4:	ce 01       	movw	r24, r28
    25f6:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    25f8:	8b 89       	ldd	r24, Y+19	; 0x13
    25fa:	82 ff       	sbrs	r24, 2
    25fc:	1b c0       	rjmp	.+54     	; 0x2634 <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    25fe:	8c 85       	ldd	r24, Y+12	; 0x0c
    2600:	9d 85       	ldd	r25, Y+13	; 0x0d
    2602:	8a 0d       	add	r24, r10
    2604:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    2606:	a8 16       	cp	r10, r24
    2608:	b9 06       	cpc	r11, r25
    260a:	60 f4       	brcc	.+24     	; 0x2624 <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    260c:	9b 83       	std	Y+3, r25	; 0x03
    260e:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2610:	d9 87       	std	Y+9, r29	; 0x09
    2612:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2614:	b8 01       	movw	r22, r16
    2616:	80 91 48 08 	lds	r24, 0x0848	; 0x800848 <pxCurrentTimerList>
    261a:	90 91 49 08 	lds	r25, 0x0849	; 0x800849 <pxCurrentTimerList+0x1>
    261e:	0e 94 22 05 	call	0xa44	; 0xa44 <vListInsert>
    2622:	08 c0       	rjmp	.+16     	; 0x2634 <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2624:	00 e0       	ldi	r16, 0x00	; 0
    2626:	10 e0       	ldi	r17, 0x00	; 0
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	a5 01       	movw	r20, r10
    262e:	60 e0       	ldi	r22, 0x00	; 0
    2630:	ce 01       	movw	r24, r28
    2632:	74 df       	rcall	.-280    	; 0x251c <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2634:	e0 91 48 08 	lds	r30, 0x0848	; 0x800848 <pxCurrentTimerList>
    2638:	f0 91 49 08 	lds	r31, 0x0849	; 0x800849 <pxCurrentTimerList+0x1>
    263c:	80 81       	ld	r24, Z
    263e:	81 11       	cpse	r24, r1
    2640:	ca cf       	rjmp	.-108    	; 0x25d6 <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    2642:	80 91 46 08 	lds	r24, 0x0846	; 0x800846 <pxOverflowTimerList>
    2646:	90 91 47 08 	lds	r25, 0x0847	; 0x800847 <pxOverflowTimerList+0x1>
    264a:	90 93 49 08 	sts	0x0849, r25	; 0x800849 <pxCurrentTimerList+0x1>
    264e:	80 93 48 08 	sts	0x0848, r24	; 0x800848 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    2652:	f0 93 47 08 	sts	0x0847, r31	; 0x800847 <pxOverflowTimerList+0x1>
    2656:	e0 93 46 08 	sts	0x0846, r30	; 0x800846 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	f6 01       	movw	r30, r12
    265e:	80 83       	st	Z, r24
    2660:	02 c0       	rjmp	.+4      	; 0x2666 <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    2662:	f6 01       	movw	r30, r12
    2664:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    2666:	f0 92 41 08 	sts	0x0841, r15	; 0x800841 <xLastTime.2432+0x1>
    266a:	e0 92 40 08 	sts	0x0840, r14	; 0x800840 <xLastTime.2432>

    return xTimeNow;
}
    266e:	c7 01       	movw	r24, r14
    2670:	df 91       	pop	r29
    2672:	cf 91       	pop	r28
    2674:	1f 91       	pop	r17
    2676:	0f 91       	pop	r16
    2678:	ff 90       	pop	r15
    267a:	ef 90       	pop	r14
    267c:	df 90       	pop	r13
    267e:	cf 90       	pop	r12
    2680:	bf 90       	pop	r11
    2682:	af 90       	pop	r10
    2684:	08 95       	ret

00002686 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2686:	08 95       	ret

00002688 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2688:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    268a:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    268c:	2f ef       	ldi	r18, 0xFF	; 255
    268e:	80 e7       	ldi	r24, 0x70	; 112
    2690:	92 e0       	ldi	r25, 0x02	; 2
    2692:	21 50       	subi	r18, 0x01	; 1
    2694:	80 40       	sbci	r24, 0x00	; 0
    2696:	90 40       	sbci	r25, 0x00	; 0
    2698:	e1 f7       	brne	.-8      	; 0x2692 <vApplicationMallocFailedHook+0xa>
    269a:	00 c0       	rjmp	.+0      	; 0x269c <vApplicationMallocFailedHook+0x14>
    269c:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    269e:	1f 9a       	sbi	0x03, 7	; 3
    26a0:	f5 cf       	rjmp	.-22     	; 0x268c <vApplicationMallocFailedHook+0x4>

000026a2 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    26a2:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    26a4:	2f 9a       	sbi	0x05, 7	; 5
    26a6:	2f ef       	ldi	r18, 0xFF	; 255
    26a8:	87 ea       	ldi	r24, 0xA7	; 167
    26aa:	91 e6       	ldi	r25, 0x61	; 97
    26ac:	21 50       	subi	r18, 0x01	; 1
    26ae:	80 40       	sbci	r24, 0x00	; 0
    26b0:	90 40       	sbci	r25, 0x00	; 0
    26b2:	e1 f7       	brne	.-8      	; 0x26ac <vApplicationStackOverflowHook+0xa>
    26b4:	00 c0       	rjmp	.+0      	; 0x26b6 <vApplicationStackOverflowHook+0x14>
    26b6:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    26b8:	1f 9a       	sbi	0x03, 7	; 3
    26ba:	f5 cf       	rjmp	.-22     	; 0x26a6 <vApplicationStackOverflowHook+0x4>

000026bc <__fixsfsi>:
    26bc:	04 d0       	rcall	.+8      	; 0x26c6 <__fixunssfsi>
    26be:	68 94       	set
    26c0:	b1 11       	cpse	r27, r1
    26c2:	50 c0       	rjmp	.+160    	; 0x2764 <__fp_szero>
    26c4:	08 95       	ret

000026c6 <__fixunssfsi>:
    26c6:	33 d0       	rcall	.+102    	; 0x272e <__fp_splitA>
    26c8:	88 f0       	brcs	.+34     	; 0x26ec <__fixunssfsi+0x26>
    26ca:	9f 57       	subi	r25, 0x7F	; 127
    26cc:	90 f0       	brcs	.+36     	; 0x26f2 <__fixunssfsi+0x2c>
    26ce:	b9 2f       	mov	r27, r25
    26d0:	99 27       	eor	r25, r25
    26d2:	b7 51       	subi	r27, 0x17	; 23
    26d4:	a0 f0       	brcs	.+40     	; 0x26fe <__fixunssfsi+0x38>
    26d6:	d1 f0       	breq	.+52     	; 0x270c <__fixunssfsi+0x46>
    26d8:	66 0f       	add	r22, r22
    26da:	77 1f       	adc	r23, r23
    26dc:	88 1f       	adc	r24, r24
    26de:	99 1f       	adc	r25, r25
    26e0:	1a f0       	brmi	.+6      	; 0x26e8 <__fixunssfsi+0x22>
    26e2:	ba 95       	dec	r27
    26e4:	c9 f7       	brne	.-14     	; 0x26d8 <__fixunssfsi+0x12>
    26e6:	12 c0       	rjmp	.+36     	; 0x270c <__fixunssfsi+0x46>
    26e8:	b1 30       	cpi	r27, 0x01	; 1
    26ea:	81 f0       	breq	.+32     	; 0x270c <__fixunssfsi+0x46>
    26ec:	3a d0       	rcall	.+116    	; 0x2762 <__fp_zero>
    26ee:	b1 e0       	ldi	r27, 0x01	; 1
    26f0:	08 95       	ret
    26f2:	37 c0       	rjmp	.+110    	; 0x2762 <__fp_zero>
    26f4:	67 2f       	mov	r22, r23
    26f6:	78 2f       	mov	r23, r24
    26f8:	88 27       	eor	r24, r24
    26fa:	b8 5f       	subi	r27, 0xF8	; 248
    26fc:	39 f0       	breq	.+14     	; 0x270c <__fixunssfsi+0x46>
    26fe:	b9 3f       	cpi	r27, 0xF9	; 249
    2700:	cc f3       	brlt	.-14     	; 0x26f4 <__fixunssfsi+0x2e>
    2702:	86 95       	lsr	r24
    2704:	77 95       	ror	r23
    2706:	67 95       	ror	r22
    2708:	b3 95       	inc	r27
    270a:	d9 f7       	brne	.-10     	; 0x2702 <__fixunssfsi+0x3c>
    270c:	3e f4       	brtc	.+14     	; 0x271c <__fixunssfsi+0x56>
    270e:	90 95       	com	r25
    2710:	80 95       	com	r24
    2712:	70 95       	com	r23
    2714:	61 95       	neg	r22
    2716:	7f 4f       	sbci	r23, 0xFF	; 255
    2718:	8f 4f       	sbci	r24, 0xFF	; 255
    271a:	9f 4f       	sbci	r25, 0xFF	; 255
    271c:	08 95       	ret

0000271e <__fp_split3>:
    271e:	57 fd       	sbrc	r21, 7
    2720:	90 58       	subi	r25, 0x80	; 128
    2722:	44 0f       	add	r20, r20
    2724:	55 1f       	adc	r21, r21
    2726:	59 f0       	breq	.+22     	; 0x273e <__fp_splitA+0x10>
    2728:	5f 3f       	cpi	r21, 0xFF	; 255
    272a:	71 f0       	breq	.+28     	; 0x2748 <__fp_splitA+0x1a>
    272c:	47 95       	ror	r20

0000272e <__fp_splitA>:
    272e:	88 0f       	add	r24, r24
    2730:	97 fb       	bst	r25, 7
    2732:	99 1f       	adc	r25, r25
    2734:	61 f0       	breq	.+24     	; 0x274e <__fp_splitA+0x20>
    2736:	9f 3f       	cpi	r25, 0xFF	; 255
    2738:	79 f0       	breq	.+30     	; 0x2758 <__fp_splitA+0x2a>
    273a:	87 95       	ror	r24
    273c:	08 95       	ret
    273e:	12 16       	cp	r1, r18
    2740:	13 06       	cpc	r1, r19
    2742:	14 06       	cpc	r1, r20
    2744:	55 1f       	adc	r21, r21
    2746:	f2 cf       	rjmp	.-28     	; 0x272c <__fp_split3+0xe>
    2748:	46 95       	lsr	r20
    274a:	f1 df       	rcall	.-30     	; 0x272e <__fp_splitA>
    274c:	08 c0       	rjmp	.+16     	; 0x275e <__fp_splitA+0x30>
    274e:	16 16       	cp	r1, r22
    2750:	17 06       	cpc	r1, r23
    2752:	18 06       	cpc	r1, r24
    2754:	99 1f       	adc	r25, r25
    2756:	f1 cf       	rjmp	.-30     	; 0x273a <__fp_splitA+0xc>
    2758:	86 95       	lsr	r24
    275a:	71 05       	cpc	r23, r1
    275c:	61 05       	cpc	r22, r1
    275e:	08 94       	sec
    2760:	08 95       	ret

00002762 <__fp_zero>:
    2762:	e8 94       	clt

00002764 <__fp_szero>:
    2764:	bb 27       	eor	r27, r27
    2766:	66 27       	eor	r22, r22
    2768:	77 27       	eor	r23, r23
    276a:	cb 01       	movw	r24, r22
    276c:	97 f9       	bld	r25, 7
    276e:	08 95       	ret

00002770 <usart_getchar>:
    2770:	cf 93       	push	r28
    2772:	df 93       	push	r29
    2774:	1f 92       	push	r1
    2776:	cd b7       	in	r28, 0x3d	; 61
    2778:	de b7       	in	r29, 0x3e	; 62
    277a:	be 01       	movw	r22, r28
    277c:	6f 5f       	subi	r22, 0xFF	; 255
    277e:	7f 4f       	sbci	r23, 0xFF	; 255
    2780:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <_com_serial_instance>
    2784:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <_com_serial_instance+0x1>
    2788:	4e d1       	rcall	.+668    	; 0x2a26 <serial_get_byte>
    278a:	81 11       	cpse	r24, r1
    278c:	f6 cf       	rjmp	.-20     	; 0x277a <usart_getchar+0xa>
    278e:	89 81       	ldd	r24, Y+1	; 0x01
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	0f 90       	pop	r0
    2794:	df 91       	pop	r29
    2796:	cf 91       	pop	r28
    2798:	08 95       	ret

0000279a <usart_putchar>:
    279a:	68 2f       	mov	r22, r24
    279c:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <_com_serial_instance>
    27a0:	90 91 5d 08 	lds	r25, 0x085D	; 0x80085d <_com_serial_instance+0x1>
    27a4:	cb d0       	rcall	.+406    	; 0x293c <serial_send_byte>
    27a6:	80 e0       	ldi	r24, 0x00	; 0
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	08 95       	ret

000027ac <stdioCreate>:
    27ac:	8f 92       	push	r8
    27ae:	9f 92       	push	r9
    27b0:	af 92       	push	r10
    27b2:	cf 92       	push	r12
    27b4:	ef 92       	push	r14
    27b6:	0f 93       	push	r16
    27b8:	81 2c       	mov	r8, r1
    27ba:	91 2c       	mov	r9, r1
    27bc:	68 94       	set
    27be:	aa 24       	eor	r10, r10
    27c0:	a7 f8       	bld	r10, 7
    27c2:	68 94       	set
    27c4:	cc 24       	eor	r12, r12
    27c6:	c7 f8       	bld	r12, 7
    27c8:	e1 2c       	mov	r14, r1
    27ca:	00 e0       	ldi	r16, 0x00	; 0
    27cc:	23 e0       	ldi	r18, 0x03	; 3
    27ce:	40 e0       	ldi	r20, 0x00	; 0
    27d0:	51 ee       	ldi	r21, 0xE1	; 225
    27d2:	60 e0       	ldi	r22, 0x00	; 0
    27d4:	70 e0       	ldi	r23, 0x00	; 0
    27d6:	13 d0       	rcall	.+38     	; 0x27fe <serial_new_instance>
    27d8:	90 93 5d 08 	sts	0x085D, r25	; 0x80085d <_com_serial_instance+0x1>
    27dc:	80 93 5c 08 	sts	0x085C, r24	; 0x80085c <_com_serial_instance>
    27e0:	ec e4       	ldi	r30, 0x4C	; 76
    27e2:	fa e0       	ldi	r31, 0x0A	; 10
    27e4:	86 e0       	ldi	r24, 0x06	; 6
    27e6:	92 e0       	ldi	r25, 0x02	; 2
    27e8:	91 83       	std	Z+1, r25	; 0x01
    27ea:	80 83       	st	Z, r24
    27ec:	93 83       	std	Z+3, r25	; 0x03
    27ee:	82 83       	std	Z+2, r24	; 0x02
    27f0:	0f 91       	pop	r16
    27f2:	ef 90       	pop	r14
    27f4:	cf 90       	pop	r12
    27f6:	af 90       	pop	r10
    27f8:	9f 90       	pop	r9
    27fa:	8f 90       	pop	r8
    27fc:	08 95       	ret

000027fe <serial_new_instance>:
    27fe:	2f 92       	push	r2
    2800:	3f 92       	push	r3
    2802:	4f 92       	push	r4
    2804:	5f 92       	push	r5
    2806:	6f 92       	push	r6
    2808:	7f 92       	push	r7
    280a:	8f 92       	push	r8
    280c:	9f 92       	push	r9
    280e:	af 92       	push	r10
    2810:	cf 92       	push	r12
    2812:	ef 92       	push	r14
    2814:	ff 92       	push	r15
    2816:	0f 93       	push	r16
    2818:	1f 93       	push	r17
    281a:	cf 93       	push	r28
    281c:	df 93       	push	r29
    281e:	cd b7       	in	r28, 0x3d	; 61
    2820:	de b7       	in	r29, 0x3e	; 62
    2822:	f8 2e       	mov	r15, r24
    2824:	2a 01       	movw	r4, r20
    2826:	3b 01       	movw	r6, r22
    2828:	88 e0       	ldi	r24, 0x08	; 8
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	0e 94 b4 23 	call	0x4768	; 0x4768 <malloc>
    2830:	8c 01       	movw	r16, r24
    2832:	8f 2d       	mov	r24, r15
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	88 0f       	add	r24, r24
    2838:	99 1f       	adc	r25, r25
    283a:	fc 01       	movw	r30, r24
    283c:	e2 5a       	subi	r30, 0xA2	; 162
    283e:	f7 4f       	sbci	r31, 0xF7	; 247
    2840:	11 83       	std	Z+1, r17	; 0x01
    2842:	00 83       	st	Z, r16
    2844:	fc 01       	movw	r30, r24
    2846:	ec 5e       	subi	r30, 0xEC	; 236
    2848:	fd 4f       	sbci	r31, 0xFD	; 253
    284a:	80 81       	ld	r24, Z
    284c:	91 81       	ldd	r25, Z+1	; 0x01
    284e:	d8 01       	movw	r26, r16
    2850:	8d 93       	st	X+, r24
    2852:	9c 93       	st	X, r25
    2854:	6c 2d       	mov	r22, r12
    2856:	70 e0       	ldi	r23, 0x00	; 0
    2858:	84 e0       	ldi	r24, 0x04	; 4
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	0e 94 9a 23 	call	0x4734	; 0x4734 <calloc>
    2860:	1c 01       	movw	r2, r24
    2862:	61 e0       	ldi	r22, 0x01	; 1
    2864:	70 e0       	ldi	r23, 0x00	; 0
    2866:	86 e0       	ldi	r24, 0x06	; 6
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	0e 94 9a 23 	call	0x4734	; 0x4734 <calloc>
    286e:	7c 01       	movw	r14, r24
    2870:	4c 2d       	mov	r20, r12
    2872:	b1 01       	movw	r22, r2
    2874:	4c d3       	rcall	.+1688   	; 0x2f0e <fifo_init>
    2876:	f8 01       	movw	r30, r16
    2878:	f5 82       	std	Z+5, r15	; 0x05
    287a:	e4 82       	std	Z+4, r14	; 0x04
    287c:	6a 2d       	mov	r22, r10
    287e:	70 e0       	ldi	r23, 0x00	; 0
    2880:	84 e0       	ldi	r24, 0x04	; 4
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	0e 94 9a 23 	call	0x4734	; 0x4734 <calloc>
    2888:	1c 01       	movw	r2, r24
    288a:	61 e0       	ldi	r22, 0x01	; 1
    288c:	70 e0       	ldi	r23, 0x00	; 0
    288e:	86 e0       	ldi	r24, 0x06	; 6
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	0e 94 9a 23 	call	0x4734	; 0x4734 <calloc>
    2896:	7c 01       	movw	r14, r24
    2898:	4a 2d       	mov	r20, r10
    289a:	b1 01       	movw	r22, r2
    289c:	38 d3       	rcall	.+1648   	; 0x2f0e <fifo_init>
    289e:	d8 01       	movw	r26, r16
    28a0:	13 96       	adiw	r26, 0x03	; 3
    28a2:	fc 92       	st	X, r15
    28a4:	ee 92       	st	-X, r14
    28a6:	12 97       	sbiw	r26, 0x02	; 2
    28a8:	17 96       	adiw	r26, 0x07	; 7
    28aa:	9c 92       	st	X, r9
    28ac:	8e 92       	st	-X, r8
    28ae:	16 97       	sbiw	r26, 0x06	; 6
    28b0:	ff b6       	in	r15, 0x3f	; 63
    28b2:	f8 94       	cli
    28b4:	ed 91       	ld	r30, X+
    28b6:	fc 91       	ld	r31, X
    28b8:	11 97       	sbiw	r26, 0x01	; 1
    28ba:	36 97       	sbiw	r30, 0x06	; 6
    28bc:	80 81       	ld	r24, Z
    28be:	82 60       	ori	r24, 0x02	; 2
    28c0:	80 83       	st	Z, r24
    28c2:	8d 90       	ld	r8, X+
    28c4:	9c 90       	ld	r9, X
    28c6:	c3 01       	movw	r24, r6
    28c8:	b2 01       	movw	r22, r4
    28ca:	0e 94 7d 22 	call	0x44fa	; 0x44fa <__floatunsisf>
    28ce:	20 e0       	ldi	r18, 0x00	; 0
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	40 e0       	ldi	r20, 0x00	; 0
    28d4:	51 e4       	ldi	r21, 0x41	; 65
    28d6:	0e 94 e6 22 	call	0x45cc	; 0x45cc <__mulsf3>
    28da:	9b 01       	movw	r18, r22
    28dc:	ac 01       	movw	r20, r24
    28de:	60 e0       	ldi	r22, 0x00	; 0
    28e0:	74 e2       	ldi	r23, 0x24	; 36
    28e2:	84 e7       	ldi	r24, 0x74	; 116
    28e4:	9b e4       	ldi	r25, 0x4B	; 75
    28e6:	0e 94 12 22 	call	0x4424	; 0x4424 <__divsf3>
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	40 e8       	ldi	r20, 0x80	; 128
    28f0:	5f e3       	ldi	r21, 0x3F	; 63
    28f2:	0e 94 ab 21 	call	0x4356	; 0x4356 <__subsf3>
    28f6:	e7 de       	rcall	.-562    	; 0x26c6 <__fixunssfsi>
    28f8:	f4 01       	movw	r30, r8
    28fa:	32 97       	sbiw	r30, 0x02	; 2
    28fc:	60 83       	st	Z, r22
    28fe:	d8 01       	movw	r26, r16
    2900:	ed 91       	ld	r30, X+
    2902:	fc 91       	ld	r31, X
    2904:	11 97       	sbiw	r26, 0x01	; 1
    2906:	35 97       	sbiw	r30, 0x05	; 5
    2908:	88 e9       	ldi	r24, 0x98	; 152
    290a:	80 83       	st	Z, r24
    290c:	ed 91       	ld	r30, X+
    290e:	fc 91       	ld	r31, X
    2910:	34 97       	sbiw	r30, 0x04	; 4
    2912:	86 e0       	ldi	r24, 0x06	; 6
    2914:	80 83       	st	Z, r24
    2916:	ff be       	out	0x3f, r15	; 63
    2918:	c8 01       	movw	r24, r16
    291a:	df 91       	pop	r29
    291c:	cf 91       	pop	r28
    291e:	1f 91       	pop	r17
    2920:	0f 91       	pop	r16
    2922:	ff 90       	pop	r15
    2924:	ef 90       	pop	r14
    2926:	cf 90       	pop	r12
    2928:	af 90       	pop	r10
    292a:	9f 90       	pop	r9
    292c:	8f 90       	pop	r8
    292e:	7f 90       	pop	r7
    2930:	6f 90       	pop	r6
    2932:	5f 90       	pop	r5
    2934:	4f 90       	pop	r4
    2936:	3f 90       	pop	r3
    2938:	2f 90       	pop	r2
    293a:	08 95       	ret

0000293c <serial_send_byte>:
    293c:	cf 93       	push	r28
    293e:	df 93       	push	r29
    2940:	ec 01       	movw	r28, r24
    2942:	ea 81       	ldd	r30, Y+2	; 0x02
    2944:	fb 81       	ldd	r31, Y+3	; 0x03
    2946:	93 81       	ldd	r25, Z+3	; 0x03
    2948:	82 81       	ldd	r24, Z+2	; 0x02
    294a:	25 81       	ldd	r18, Z+5	; 0x05
    294c:	98 1b       	sub	r25, r24
    294e:	92 23       	and	r25, r18
    2950:	84 81       	ldd	r24, Z+4	; 0x04
    2952:	98 17       	cp	r25, r24
    2954:	a1 f0       	breq	.+40     	; 0x297e <serial_send_byte+0x42>
    2956:	93 81       	ldd	r25, Z+3	; 0x03
    2958:	26 95       	lsr	r18
    295a:	29 23       	and	r18, r25
    295c:	a0 81       	ld	r26, Z
    295e:	b1 81       	ldd	r27, Z+1	; 0x01
    2960:	a2 0f       	add	r26, r18
    2962:	b1 1d       	adc	r27, r1
    2964:	6c 93       	st	X, r22
    2966:	9f 5f       	subi	r25, 0xFF	; 255
    2968:	25 81       	ldd	r18, Z+5	; 0x05
    296a:	92 23       	and	r25, r18
    296c:	93 83       	std	Z+3, r25	; 0x03
    296e:	e8 81       	ld	r30, Y
    2970:	f9 81       	ldd	r31, Y+1	; 0x01
    2972:	35 97       	sbiw	r30, 0x05	; 5
    2974:	80 81       	ld	r24, Z
    2976:	80 62       	ori	r24, 0x20	; 32
    2978:	80 83       	st	Z, r24
    297a:	80 e0       	ldi	r24, 0x00	; 0
    297c:	01 c0       	rjmp	.+2      	; 0x2980 <serial_send_byte+0x44>
    297e:	82 e0       	ldi	r24, 0x02	; 2
    2980:	df 91       	pop	r29
    2982:	cf 91       	pop	r28
    2984:	08 95       	ret

00002986 <serial_send_bytes>:
    2986:	ef 92       	push	r14
    2988:	ff 92       	push	r15
    298a:	0f 93       	push	r16
    298c:	1f 93       	push	r17
    298e:	cf 93       	push	r28
    2990:	df 93       	push	r29
    2992:	7c 01       	movw	r14, r24
    2994:	dc 01       	movw	r26, r24
    2996:	12 96       	adiw	r26, 0x02	; 2
    2998:	ed 91       	ld	r30, X+
    299a:	fc 91       	ld	r31, X
    299c:	13 97       	sbiw	r26, 0x03	; 3
    299e:	93 81       	ldd	r25, Z+3	; 0x03
    29a0:	82 81       	ldd	r24, Z+2	; 0x02
    29a2:	98 1b       	sub	r25, r24
    29a4:	85 81       	ldd	r24, Z+5	; 0x05
    29a6:	98 23       	and	r25, r24
    29a8:	84 81       	ldd	r24, Z+4	; 0x04
    29aa:	89 1b       	sub	r24, r25
    29ac:	86 17       	cp	r24, r22
    29ae:	98 f1       	brcs	.+102    	; 0x2a16 <serial_send_bytes+0x90>
    29b0:	66 23       	and	r22, r22
    29b2:	41 f1       	breq	.+80     	; 0x2a04 <serial_send_bytes+0x7e>
    29b4:	84 2f       	mov	r24, r20
    29b6:	95 2f       	mov	r25, r21
    29b8:	dc 01       	movw	r26, r24
    29ba:	61 50       	subi	r22, 0x01	; 1
    29bc:	46 2f       	mov	r20, r22
    29be:	50 e0       	ldi	r21, 0x00	; 0
    29c0:	4f 5f       	subi	r20, 0xFF	; 255
    29c2:	5f 4f       	sbci	r21, 0xFF	; 255
    29c4:	48 0f       	add	r20, r24
    29c6:	59 1f       	adc	r21, r25
    29c8:	e7 01       	movw	r28, r14
    29ca:	ea 81       	ldd	r30, Y+2	; 0x02
    29cc:	fb 81       	ldd	r31, Y+3	; 0x03
    29ce:	93 81       	ldd	r25, Z+3	; 0x03
    29d0:	82 81       	ldd	r24, Z+2	; 0x02
    29d2:	25 81       	ldd	r18, Z+5	; 0x05
    29d4:	98 1b       	sub	r25, r24
    29d6:	92 23       	and	r25, r18
    29d8:	84 81       	ldd	r24, Z+4	; 0x04
    29da:	98 17       	cp	r25, r24
    29dc:	79 f0       	breq	.+30     	; 0x29fc <serial_send_bytes+0x76>
    29de:	8c 91       	ld	r24, X
    29e0:	93 81       	ldd	r25, Z+3	; 0x03
    29e2:	26 95       	lsr	r18
    29e4:	29 23       	and	r18, r25
    29e6:	60 81       	ld	r22, Z
    29e8:	71 81       	ldd	r23, Z+1	; 0x01
    29ea:	8b 01       	movw	r16, r22
    29ec:	02 0f       	add	r16, r18
    29ee:	11 1d       	adc	r17, r1
    29f0:	e8 01       	movw	r28, r16
    29f2:	88 83       	st	Y, r24
    29f4:	9f 5f       	subi	r25, 0xFF	; 255
    29f6:	85 81       	ldd	r24, Z+5	; 0x05
    29f8:	98 23       	and	r25, r24
    29fa:	93 83       	std	Z+3, r25	; 0x03
    29fc:	11 96       	adiw	r26, 0x01	; 1
    29fe:	a4 17       	cp	r26, r20
    2a00:	b5 07       	cpc	r27, r21
    2a02:	11 f7       	brne	.-60     	; 0x29c8 <serial_send_bytes+0x42>
    2a04:	d7 01       	movw	r26, r14
    2a06:	ed 91       	ld	r30, X+
    2a08:	fc 91       	ld	r31, X
    2a0a:	35 97       	sbiw	r30, 0x05	; 5
    2a0c:	80 81       	ld	r24, Z
    2a0e:	80 62       	ori	r24, 0x20	; 32
    2a10:	80 83       	st	Z, r24
    2a12:	80 e0       	ldi	r24, 0x00	; 0
    2a14:	01 c0       	rjmp	.+2      	; 0x2a18 <serial_send_bytes+0x92>
    2a16:	82 e0       	ldi	r24, 0x02	; 2
    2a18:	df 91       	pop	r29
    2a1a:	cf 91       	pop	r28
    2a1c:	1f 91       	pop	r17
    2a1e:	0f 91       	pop	r16
    2a20:	ff 90       	pop	r15
    2a22:	ef 90       	pop	r14
    2a24:	08 95       	ret

00002a26 <serial_get_byte>:
    2a26:	dc 01       	movw	r26, r24
    2a28:	14 96       	adiw	r26, 0x04	; 4
    2a2a:	ed 91       	ld	r30, X+
    2a2c:	fc 91       	ld	r31, X
    2a2e:	15 97       	sbiw	r26, 0x05	; 5
    2a30:	93 81       	ldd	r25, Z+3	; 0x03
    2a32:	82 81       	ldd	r24, Z+2	; 0x02
    2a34:	98 17       	cp	r25, r24
    2a36:	89 f0       	breq	.+34     	; 0x2a5a <serial_get_byte+0x34>
    2a38:	92 81       	ldd	r25, Z+2	; 0x02
    2a3a:	85 81       	ldd	r24, Z+5	; 0x05
    2a3c:	86 95       	lsr	r24
    2a3e:	89 23       	and	r24, r25
    2a40:	a0 81       	ld	r26, Z
    2a42:	b1 81       	ldd	r27, Z+1	; 0x01
    2a44:	a8 0f       	add	r26, r24
    2a46:	b1 1d       	adc	r27, r1
    2a48:	8c 91       	ld	r24, X
    2a4a:	db 01       	movw	r26, r22
    2a4c:	8c 93       	st	X, r24
    2a4e:	9f 5f       	subi	r25, 0xFF	; 255
    2a50:	85 81       	ldd	r24, Z+5	; 0x05
    2a52:	98 23       	and	r25, r24
    2a54:	92 83       	std	Z+2, r25	; 0x02
    2a56:	80 e0       	ldi	r24, 0x00	; 0
    2a58:	08 95       	ret
    2a5a:	83 e0       	ldi	r24, 0x03	; 3
    2a5c:	08 95       	ret

00002a5e <__vector_25>:
    2a5e:	1f 92       	push	r1
    2a60:	0f 92       	push	r0
    2a62:	0f b6       	in	r0, 0x3f	; 63
    2a64:	0f 92       	push	r0
    2a66:	11 24       	eor	r1, r1
    2a68:	0b b6       	in	r0, 0x3b	; 59
    2a6a:	0f 92       	push	r0
    2a6c:	2f 93       	push	r18
    2a6e:	3f 93       	push	r19
    2a70:	4f 93       	push	r20
    2a72:	5f 93       	push	r21
    2a74:	6f 93       	push	r22
    2a76:	7f 93       	push	r23
    2a78:	8f 93       	push	r24
    2a7a:	9f 93       	push	r25
    2a7c:	af 93       	push	r26
    2a7e:	bf 93       	push	r27
    2a80:	cf 93       	push	r28
    2a82:	df 93       	push	r29
    2a84:	ef 93       	push	r30
    2a86:	ff 93       	push	r31
    2a88:	a0 91 5e 08 	lds	r26, 0x085E	; 0x80085e <_ser_handle>
    2a8c:	b0 91 5f 08 	lds	r27, 0x085F	; 0x80085f <_ser_handle+0x1>
    2a90:	10 97       	sbiw	r26, 0x00	; 0
    2a92:	11 f1       	breq	.+68     	; 0x2ad8 <__vector_25+0x7a>
    2a94:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    2a98:	14 96       	adiw	r26, 0x04	; 4
    2a9a:	ed 91       	ld	r30, X+
    2a9c:	fc 91       	ld	r31, X
    2a9e:	15 97       	sbiw	r26, 0x05	; 5
    2aa0:	93 81       	ldd	r25, Z+3	; 0x03
    2aa2:	82 81       	ldd	r24, Z+2	; 0x02
    2aa4:	25 81       	ldd	r18, Z+5	; 0x05
    2aa6:	98 1b       	sub	r25, r24
    2aa8:	92 23       	and	r25, r18
    2aaa:	84 81       	ldd	r24, Z+4	; 0x04
    2aac:	98 17       	cp	r25, r24
    2aae:	61 f0       	breq	.+24     	; 0x2ac8 <__vector_25+0x6a>
    2ab0:	83 81       	ldd	r24, Z+3	; 0x03
    2ab2:	26 95       	lsr	r18
    2ab4:	28 23       	and	r18, r24
    2ab6:	c0 81       	ld	r28, Z
    2ab8:	d1 81       	ldd	r29, Z+1	; 0x01
    2aba:	c2 0f       	add	r28, r18
    2abc:	d1 1d       	adc	r29, r1
    2abe:	68 83       	st	Y, r22
    2ac0:	8f 5f       	subi	r24, 0xFF	; 255
    2ac2:	95 81       	ldd	r25, Z+5	; 0x05
    2ac4:	89 23       	and	r24, r25
    2ac6:	83 83       	std	Z+3, r24	; 0x03
    2ac8:	16 96       	adiw	r26, 0x06	; 6
    2aca:	ed 91       	ld	r30, X+
    2acc:	fc 91       	ld	r31, X
    2ace:	17 97       	sbiw	r26, 0x07	; 7
    2ad0:	30 97       	sbiw	r30, 0x00	; 0
    2ad2:	11 f0       	breq	.+4      	; 0x2ad8 <__vector_25+0x7a>
    2ad4:	cd 01       	movw	r24, r26
    2ad6:	19 95       	eicall
    2ad8:	ff 91       	pop	r31
    2ada:	ef 91       	pop	r30
    2adc:	df 91       	pop	r29
    2ade:	cf 91       	pop	r28
    2ae0:	bf 91       	pop	r27
    2ae2:	af 91       	pop	r26
    2ae4:	9f 91       	pop	r25
    2ae6:	8f 91       	pop	r24
    2ae8:	7f 91       	pop	r23
    2aea:	6f 91       	pop	r22
    2aec:	5f 91       	pop	r21
    2aee:	4f 91       	pop	r20
    2af0:	3f 91       	pop	r19
    2af2:	2f 91       	pop	r18
    2af4:	0f 90       	pop	r0
    2af6:	0b be       	out	0x3b, r0	; 59
    2af8:	0f 90       	pop	r0
    2afa:	0f be       	out	0x3f, r0	; 63
    2afc:	0f 90       	pop	r0
    2afe:	1f 90       	pop	r1
    2b00:	18 95       	reti

00002b02 <__vector_26>:
    2b02:	1f 92       	push	r1
    2b04:	0f 92       	push	r0
    2b06:	0f b6       	in	r0, 0x3f	; 63
    2b08:	0f 92       	push	r0
    2b0a:	11 24       	eor	r1, r1
    2b0c:	0b b6       	in	r0, 0x3b	; 59
    2b0e:	0f 92       	push	r0
    2b10:	2f 93       	push	r18
    2b12:	8f 93       	push	r24
    2b14:	9f 93       	push	r25
    2b16:	af 93       	push	r26
    2b18:	bf 93       	push	r27
    2b1a:	ef 93       	push	r30
    2b1c:	ff 93       	push	r31
    2b1e:	e0 91 5e 08 	lds	r30, 0x085E	; 0x80085e <_ser_handle>
    2b22:	f0 91 5f 08 	lds	r31, 0x085F	; 0x80085f <_ser_handle+0x1>
    2b26:	30 97       	sbiw	r30, 0x00	; 0
    2b28:	b9 f0       	breq	.+46     	; 0x2b58 <__vector_26+0x56>
    2b2a:	02 80       	ldd	r0, Z+2	; 0x02
    2b2c:	f3 81       	ldd	r31, Z+3	; 0x03
    2b2e:	e0 2d       	mov	r30, r0
    2b30:	93 81       	ldd	r25, Z+3	; 0x03
    2b32:	82 81       	ldd	r24, Z+2	; 0x02
    2b34:	98 17       	cp	r25, r24
    2b36:	b1 f0       	breq	.+44     	; 0x2b64 <__vector_26+0x62>
    2b38:	92 81       	ldd	r25, Z+2	; 0x02
    2b3a:	85 81       	ldd	r24, Z+5	; 0x05
    2b3c:	28 2f       	mov	r18, r24
    2b3e:	26 95       	lsr	r18
    2b40:	29 23       	and	r18, r25
    2b42:	a0 81       	ld	r26, Z
    2b44:	b1 81       	ldd	r27, Z+1	; 0x01
    2b46:	a2 0f       	add	r26, r18
    2b48:	b1 1d       	adc	r27, r1
    2b4a:	2c 91       	ld	r18, X
    2b4c:	9f 5f       	subi	r25, 0xFF	; 255
    2b4e:	89 23       	and	r24, r25
    2b50:	82 83       	std	Z+2, r24	; 0x02
    2b52:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    2b56:	0b c0       	rjmp	.+22     	; 0x2b6e <__vector_26+0x6c>
    2b58:	e1 ec       	ldi	r30, 0xC1	; 193
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	80 81       	ld	r24, Z
    2b5e:	8f 7d       	andi	r24, 0xDF	; 223
    2b60:	80 83       	st	Z, r24
    2b62:	05 c0       	rjmp	.+10     	; 0x2b6e <__vector_26+0x6c>
    2b64:	e1 ec       	ldi	r30, 0xC1	; 193
    2b66:	f0 e0       	ldi	r31, 0x00	; 0
    2b68:	80 81       	ld	r24, Z
    2b6a:	8f 7d       	andi	r24, 0xDF	; 223
    2b6c:	80 83       	st	Z, r24
    2b6e:	ff 91       	pop	r31
    2b70:	ef 91       	pop	r30
    2b72:	bf 91       	pop	r27
    2b74:	af 91       	pop	r26
    2b76:	9f 91       	pop	r25
    2b78:	8f 91       	pop	r24
    2b7a:	2f 91       	pop	r18
    2b7c:	0f 90       	pop	r0
    2b7e:	0b be       	out	0x3b, r0	; 59
    2b80:	0f 90       	pop	r0
    2b82:	0f be       	out	0x3f, r0	; 63
    2b84:	0f 90       	pop	r0
    2b86:	1f 90       	pop	r1
    2b88:	18 95       	reti

00002b8a <__vector_36>:
    2b8a:	1f 92       	push	r1
    2b8c:	0f 92       	push	r0
    2b8e:	0f b6       	in	r0, 0x3f	; 63
    2b90:	0f 92       	push	r0
    2b92:	11 24       	eor	r1, r1
    2b94:	0b b6       	in	r0, 0x3b	; 59
    2b96:	0f 92       	push	r0
    2b98:	2f 93       	push	r18
    2b9a:	3f 93       	push	r19
    2b9c:	4f 93       	push	r20
    2b9e:	5f 93       	push	r21
    2ba0:	6f 93       	push	r22
    2ba2:	7f 93       	push	r23
    2ba4:	8f 93       	push	r24
    2ba6:	9f 93       	push	r25
    2ba8:	af 93       	push	r26
    2baa:	bf 93       	push	r27
    2bac:	cf 93       	push	r28
    2bae:	df 93       	push	r29
    2bb0:	ef 93       	push	r30
    2bb2:	ff 93       	push	r31
    2bb4:	a0 91 60 08 	lds	r26, 0x0860	; 0x800860 <_ser_handle+0x2>
    2bb8:	b0 91 61 08 	lds	r27, 0x0861	; 0x800861 <_ser_handle+0x3>
    2bbc:	10 97       	sbiw	r26, 0x00	; 0
    2bbe:	11 f1       	breq	.+68     	; 0x2c04 <__vector_36+0x7a>
    2bc0:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    2bc4:	14 96       	adiw	r26, 0x04	; 4
    2bc6:	ed 91       	ld	r30, X+
    2bc8:	fc 91       	ld	r31, X
    2bca:	15 97       	sbiw	r26, 0x05	; 5
    2bcc:	93 81       	ldd	r25, Z+3	; 0x03
    2bce:	82 81       	ldd	r24, Z+2	; 0x02
    2bd0:	25 81       	ldd	r18, Z+5	; 0x05
    2bd2:	98 1b       	sub	r25, r24
    2bd4:	92 23       	and	r25, r18
    2bd6:	84 81       	ldd	r24, Z+4	; 0x04
    2bd8:	98 17       	cp	r25, r24
    2bda:	61 f0       	breq	.+24     	; 0x2bf4 <__vector_36+0x6a>
    2bdc:	83 81       	ldd	r24, Z+3	; 0x03
    2bde:	26 95       	lsr	r18
    2be0:	28 23       	and	r18, r24
    2be2:	c0 81       	ld	r28, Z
    2be4:	d1 81       	ldd	r29, Z+1	; 0x01
    2be6:	c2 0f       	add	r28, r18
    2be8:	d1 1d       	adc	r29, r1
    2bea:	68 83       	st	Y, r22
    2bec:	8f 5f       	subi	r24, 0xFF	; 255
    2bee:	95 81       	ldd	r25, Z+5	; 0x05
    2bf0:	89 23       	and	r24, r25
    2bf2:	83 83       	std	Z+3, r24	; 0x03
    2bf4:	16 96       	adiw	r26, 0x06	; 6
    2bf6:	ed 91       	ld	r30, X+
    2bf8:	fc 91       	ld	r31, X
    2bfa:	17 97       	sbiw	r26, 0x07	; 7
    2bfc:	30 97       	sbiw	r30, 0x00	; 0
    2bfe:	11 f0       	breq	.+4      	; 0x2c04 <__vector_36+0x7a>
    2c00:	cd 01       	movw	r24, r26
    2c02:	19 95       	eicall
    2c04:	ff 91       	pop	r31
    2c06:	ef 91       	pop	r30
    2c08:	df 91       	pop	r29
    2c0a:	cf 91       	pop	r28
    2c0c:	bf 91       	pop	r27
    2c0e:	af 91       	pop	r26
    2c10:	9f 91       	pop	r25
    2c12:	8f 91       	pop	r24
    2c14:	7f 91       	pop	r23
    2c16:	6f 91       	pop	r22
    2c18:	5f 91       	pop	r21
    2c1a:	4f 91       	pop	r20
    2c1c:	3f 91       	pop	r19
    2c1e:	2f 91       	pop	r18
    2c20:	0f 90       	pop	r0
    2c22:	0b be       	out	0x3b, r0	; 59
    2c24:	0f 90       	pop	r0
    2c26:	0f be       	out	0x3f, r0	; 63
    2c28:	0f 90       	pop	r0
    2c2a:	1f 90       	pop	r1
    2c2c:	18 95       	reti

00002c2e <__vector_37>:
    2c2e:	1f 92       	push	r1
    2c30:	0f 92       	push	r0
    2c32:	0f b6       	in	r0, 0x3f	; 63
    2c34:	0f 92       	push	r0
    2c36:	11 24       	eor	r1, r1
    2c38:	0b b6       	in	r0, 0x3b	; 59
    2c3a:	0f 92       	push	r0
    2c3c:	2f 93       	push	r18
    2c3e:	8f 93       	push	r24
    2c40:	9f 93       	push	r25
    2c42:	af 93       	push	r26
    2c44:	bf 93       	push	r27
    2c46:	ef 93       	push	r30
    2c48:	ff 93       	push	r31
    2c4a:	e0 91 60 08 	lds	r30, 0x0860	; 0x800860 <_ser_handle+0x2>
    2c4e:	f0 91 61 08 	lds	r31, 0x0861	; 0x800861 <_ser_handle+0x3>
    2c52:	30 97       	sbiw	r30, 0x00	; 0
    2c54:	b9 f0       	breq	.+46     	; 0x2c84 <__vector_37+0x56>
    2c56:	02 80       	ldd	r0, Z+2	; 0x02
    2c58:	f3 81       	ldd	r31, Z+3	; 0x03
    2c5a:	e0 2d       	mov	r30, r0
    2c5c:	93 81       	ldd	r25, Z+3	; 0x03
    2c5e:	82 81       	ldd	r24, Z+2	; 0x02
    2c60:	98 17       	cp	r25, r24
    2c62:	b1 f0       	breq	.+44     	; 0x2c90 <__vector_37+0x62>
    2c64:	92 81       	ldd	r25, Z+2	; 0x02
    2c66:	85 81       	ldd	r24, Z+5	; 0x05
    2c68:	28 2f       	mov	r18, r24
    2c6a:	26 95       	lsr	r18
    2c6c:	29 23       	and	r18, r25
    2c6e:	a0 81       	ld	r26, Z
    2c70:	b1 81       	ldd	r27, Z+1	; 0x01
    2c72:	a2 0f       	add	r26, r18
    2c74:	b1 1d       	adc	r27, r1
    2c76:	2c 91       	ld	r18, X
    2c78:	9f 5f       	subi	r25, 0xFF	; 255
    2c7a:	89 23       	and	r24, r25
    2c7c:	82 83       	std	Z+2, r24	; 0x02
    2c7e:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    2c82:	0b c0       	rjmp	.+22     	; 0x2c9a <__vector_37+0x6c>
    2c84:	e9 ec       	ldi	r30, 0xC9	; 201
    2c86:	f0 e0       	ldi	r31, 0x00	; 0
    2c88:	80 81       	ld	r24, Z
    2c8a:	8f 7d       	andi	r24, 0xDF	; 223
    2c8c:	80 83       	st	Z, r24
    2c8e:	05 c0       	rjmp	.+10     	; 0x2c9a <__vector_37+0x6c>
    2c90:	e9 ec       	ldi	r30, 0xC9	; 201
    2c92:	f0 e0       	ldi	r31, 0x00	; 0
    2c94:	80 81       	ld	r24, Z
    2c96:	8f 7d       	andi	r24, 0xDF	; 223
    2c98:	80 83       	st	Z, r24
    2c9a:	ff 91       	pop	r31
    2c9c:	ef 91       	pop	r30
    2c9e:	bf 91       	pop	r27
    2ca0:	af 91       	pop	r26
    2ca2:	9f 91       	pop	r25
    2ca4:	8f 91       	pop	r24
    2ca6:	2f 91       	pop	r18
    2ca8:	0f 90       	pop	r0
    2caa:	0b be       	out	0x3b, r0	; 59
    2cac:	0f 90       	pop	r0
    2cae:	0f be       	out	0x3f, r0	; 63
    2cb0:	0f 90       	pop	r0
    2cb2:	1f 90       	pop	r1
    2cb4:	18 95       	reti

00002cb6 <__vector_51>:
    2cb6:	1f 92       	push	r1
    2cb8:	0f 92       	push	r0
    2cba:	0f b6       	in	r0, 0x3f	; 63
    2cbc:	0f 92       	push	r0
    2cbe:	11 24       	eor	r1, r1
    2cc0:	0b b6       	in	r0, 0x3b	; 59
    2cc2:	0f 92       	push	r0
    2cc4:	2f 93       	push	r18
    2cc6:	3f 93       	push	r19
    2cc8:	4f 93       	push	r20
    2cca:	5f 93       	push	r21
    2ccc:	6f 93       	push	r22
    2cce:	7f 93       	push	r23
    2cd0:	8f 93       	push	r24
    2cd2:	9f 93       	push	r25
    2cd4:	af 93       	push	r26
    2cd6:	bf 93       	push	r27
    2cd8:	cf 93       	push	r28
    2cda:	df 93       	push	r29
    2cdc:	ef 93       	push	r30
    2cde:	ff 93       	push	r31
    2ce0:	a0 91 62 08 	lds	r26, 0x0862	; 0x800862 <_ser_handle+0x4>
    2ce4:	b0 91 63 08 	lds	r27, 0x0863	; 0x800863 <_ser_handle+0x5>
    2ce8:	10 97       	sbiw	r26, 0x00	; 0
    2cea:	11 f1       	breq	.+68     	; 0x2d30 <__vector_51+0x7a>
    2cec:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    2cf0:	14 96       	adiw	r26, 0x04	; 4
    2cf2:	ed 91       	ld	r30, X+
    2cf4:	fc 91       	ld	r31, X
    2cf6:	15 97       	sbiw	r26, 0x05	; 5
    2cf8:	93 81       	ldd	r25, Z+3	; 0x03
    2cfa:	82 81       	ldd	r24, Z+2	; 0x02
    2cfc:	25 81       	ldd	r18, Z+5	; 0x05
    2cfe:	98 1b       	sub	r25, r24
    2d00:	92 23       	and	r25, r18
    2d02:	84 81       	ldd	r24, Z+4	; 0x04
    2d04:	98 17       	cp	r25, r24
    2d06:	61 f0       	breq	.+24     	; 0x2d20 <__vector_51+0x6a>
    2d08:	83 81       	ldd	r24, Z+3	; 0x03
    2d0a:	26 95       	lsr	r18
    2d0c:	28 23       	and	r18, r24
    2d0e:	c0 81       	ld	r28, Z
    2d10:	d1 81       	ldd	r29, Z+1	; 0x01
    2d12:	c2 0f       	add	r28, r18
    2d14:	d1 1d       	adc	r29, r1
    2d16:	68 83       	st	Y, r22
    2d18:	8f 5f       	subi	r24, 0xFF	; 255
    2d1a:	95 81       	ldd	r25, Z+5	; 0x05
    2d1c:	89 23       	and	r24, r25
    2d1e:	83 83       	std	Z+3, r24	; 0x03
    2d20:	16 96       	adiw	r26, 0x06	; 6
    2d22:	ed 91       	ld	r30, X+
    2d24:	fc 91       	ld	r31, X
    2d26:	17 97       	sbiw	r26, 0x07	; 7
    2d28:	30 97       	sbiw	r30, 0x00	; 0
    2d2a:	11 f0       	breq	.+4      	; 0x2d30 <__vector_51+0x7a>
    2d2c:	cd 01       	movw	r24, r26
    2d2e:	19 95       	eicall
    2d30:	ff 91       	pop	r31
    2d32:	ef 91       	pop	r30
    2d34:	df 91       	pop	r29
    2d36:	cf 91       	pop	r28
    2d38:	bf 91       	pop	r27
    2d3a:	af 91       	pop	r26
    2d3c:	9f 91       	pop	r25
    2d3e:	8f 91       	pop	r24
    2d40:	7f 91       	pop	r23
    2d42:	6f 91       	pop	r22
    2d44:	5f 91       	pop	r21
    2d46:	4f 91       	pop	r20
    2d48:	3f 91       	pop	r19
    2d4a:	2f 91       	pop	r18
    2d4c:	0f 90       	pop	r0
    2d4e:	0b be       	out	0x3b, r0	; 59
    2d50:	0f 90       	pop	r0
    2d52:	0f be       	out	0x3f, r0	; 63
    2d54:	0f 90       	pop	r0
    2d56:	1f 90       	pop	r1
    2d58:	18 95       	reti

00002d5a <__vector_52>:
    2d5a:	1f 92       	push	r1
    2d5c:	0f 92       	push	r0
    2d5e:	0f b6       	in	r0, 0x3f	; 63
    2d60:	0f 92       	push	r0
    2d62:	11 24       	eor	r1, r1
    2d64:	0b b6       	in	r0, 0x3b	; 59
    2d66:	0f 92       	push	r0
    2d68:	2f 93       	push	r18
    2d6a:	8f 93       	push	r24
    2d6c:	9f 93       	push	r25
    2d6e:	af 93       	push	r26
    2d70:	bf 93       	push	r27
    2d72:	ef 93       	push	r30
    2d74:	ff 93       	push	r31
    2d76:	e0 91 62 08 	lds	r30, 0x0862	; 0x800862 <_ser_handle+0x4>
    2d7a:	f0 91 63 08 	lds	r31, 0x0863	; 0x800863 <_ser_handle+0x5>
    2d7e:	30 97       	sbiw	r30, 0x00	; 0
    2d80:	b9 f0       	breq	.+46     	; 0x2db0 <__vector_52+0x56>
    2d82:	02 80       	ldd	r0, Z+2	; 0x02
    2d84:	f3 81       	ldd	r31, Z+3	; 0x03
    2d86:	e0 2d       	mov	r30, r0
    2d88:	93 81       	ldd	r25, Z+3	; 0x03
    2d8a:	82 81       	ldd	r24, Z+2	; 0x02
    2d8c:	98 17       	cp	r25, r24
    2d8e:	b1 f0       	breq	.+44     	; 0x2dbc <__vector_52+0x62>
    2d90:	92 81       	ldd	r25, Z+2	; 0x02
    2d92:	85 81       	ldd	r24, Z+5	; 0x05
    2d94:	28 2f       	mov	r18, r24
    2d96:	26 95       	lsr	r18
    2d98:	29 23       	and	r18, r25
    2d9a:	a0 81       	ld	r26, Z
    2d9c:	b1 81       	ldd	r27, Z+1	; 0x01
    2d9e:	a2 0f       	add	r26, r18
    2da0:	b1 1d       	adc	r27, r1
    2da2:	2c 91       	ld	r18, X
    2da4:	9f 5f       	subi	r25, 0xFF	; 255
    2da6:	89 23       	and	r24, r25
    2da8:	82 83       	std	Z+2, r24	; 0x02
    2daa:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    2dae:	0b c0       	rjmp	.+22     	; 0x2dc6 <__vector_52+0x6c>
    2db0:	e1 ed       	ldi	r30, 0xD1	; 209
    2db2:	f0 e0       	ldi	r31, 0x00	; 0
    2db4:	80 81       	ld	r24, Z
    2db6:	8f 7d       	andi	r24, 0xDF	; 223
    2db8:	80 83       	st	Z, r24
    2dba:	05 c0       	rjmp	.+10     	; 0x2dc6 <__vector_52+0x6c>
    2dbc:	e1 ed       	ldi	r30, 0xD1	; 209
    2dbe:	f0 e0       	ldi	r31, 0x00	; 0
    2dc0:	80 81       	ld	r24, Z
    2dc2:	8f 7d       	andi	r24, 0xDF	; 223
    2dc4:	80 83       	st	Z, r24
    2dc6:	ff 91       	pop	r31
    2dc8:	ef 91       	pop	r30
    2dca:	bf 91       	pop	r27
    2dcc:	af 91       	pop	r26
    2dce:	9f 91       	pop	r25
    2dd0:	8f 91       	pop	r24
    2dd2:	2f 91       	pop	r18
    2dd4:	0f 90       	pop	r0
    2dd6:	0b be       	out	0x3b, r0	; 59
    2dd8:	0f 90       	pop	r0
    2dda:	0f be       	out	0x3f, r0	; 63
    2ddc:	0f 90       	pop	r0
    2dde:	1f 90       	pop	r1
    2de0:	18 95       	reti

00002de2 <__vector_54>:
    2de2:	1f 92       	push	r1
    2de4:	0f 92       	push	r0
    2de6:	0f b6       	in	r0, 0x3f	; 63
    2de8:	0f 92       	push	r0
    2dea:	11 24       	eor	r1, r1
    2dec:	0b b6       	in	r0, 0x3b	; 59
    2dee:	0f 92       	push	r0
    2df0:	2f 93       	push	r18
    2df2:	3f 93       	push	r19
    2df4:	4f 93       	push	r20
    2df6:	5f 93       	push	r21
    2df8:	6f 93       	push	r22
    2dfa:	7f 93       	push	r23
    2dfc:	8f 93       	push	r24
    2dfe:	9f 93       	push	r25
    2e00:	af 93       	push	r26
    2e02:	bf 93       	push	r27
    2e04:	cf 93       	push	r28
    2e06:	df 93       	push	r29
    2e08:	ef 93       	push	r30
    2e0a:	ff 93       	push	r31
    2e0c:	a0 91 64 08 	lds	r26, 0x0864	; 0x800864 <_ser_handle+0x6>
    2e10:	b0 91 65 08 	lds	r27, 0x0865	; 0x800865 <_ser_handle+0x7>
    2e14:	10 97       	sbiw	r26, 0x00	; 0
    2e16:	11 f1       	breq	.+68     	; 0x2e5c <__vector_54+0x7a>
    2e18:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    2e1c:	14 96       	adiw	r26, 0x04	; 4
    2e1e:	ed 91       	ld	r30, X+
    2e20:	fc 91       	ld	r31, X
    2e22:	15 97       	sbiw	r26, 0x05	; 5
    2e24:	93 81       	ldd	r25, Z+3	; 0x03
    2e26:	82 81       	ldd	r24, Z+2	; 0x02
    2e28:	25 81       	ldd	r18, Z+5	; 0x05
    2e2a:	98 1b       	sub	r25, r24
    2e2c:	92 23       	and	r25, r18
    2e2e:	84 81       	ldd	r24, Z+4	; 0x04
    2e30:	98 17       	cp	r25, r24
    2e32:	61 f0       	breq	.+24     	; 0x2e4c <__vector_54+0x6a>
    2e34:	83 81       	ldd	r24, Z+3	; 0x03
    2e36:	26 95       	lsr	r18
    2e38:	28 23       	and	r18, r24
    2e3a:	c0 81       	ld	r28, Z
    2e3c:	d1 81       	ldd	r29, Z+1	; 0x01
    2e3e:	c2 0f       	add	r28, r18
    2e40:	d1 1d       	adc	r29, r1
    2e42:	68 83       	st	Y, r22
    2e44:	8f 5f       	subi	r24, 0xFF	; 255
    2e46:	95 81       	ldd	r25, Z+5	; 0x05
    2e48:	89 23       	and	r24, r25
    2e4a:	83 83       	std	Z+3, r24	; 0x03
    2e4c:	16 96       	adiw	r26, 0x06	; 6
    2e4e:	ed 91       	ld	r30, X+
    2e50:	fc 91       	ld	r31, X
    2e52:	17 97       	sbiw	r26, 0x07	; 7
    2e54:	30 97       	sbiw	r30, 0x00	; 0
    2e56:	11 f0       	breq	.+4      	; 0x2e5c <__vector_54+0x7a>
    2e58:	cd 01       	movw	r24, r26
    2e5a:	19 95       	eicall
    2e5c:	ff 91       	pop	r31
    2e5e:	ef 91       	pop	r30
    2e60:	df 91       	pop	r29
    2e62:	cf 91       	pop	r28
    2e64:	bf 91       	pop	r27
    2e66:	af 91       	pop	r26
    2e68:	9f 91       	pop	r25
    2e6a:	8f 91       	pop	r24
    2e6c:	7f 91       	pop	r23
    2e6e:	6f 91       	pop	r22
    2e70:	5f 91       	pop	r21
    2e72:	4f 91       	pop	r20
    2e74:	3f 91       	pop	r19
    2e76:	2f 91       	pop	r18
    2e78:	0f 90       	pop	r0
    2e7a:	0b be       	out	0x3b, r0	; 59
    2e7c:	0f 90       	pop	r0
    2e7e:	0f be       	out	0x3f, r0	; 63
    2e80:	0f 90       	pop	r0
    2e82:	1f 90       	pop	r1
    2e84:	18 95       	reti

00002e86 <__vector_55>:
    2e86:	1f 92       	push	r1
    2e88:	0f 92       	push	r0
    2e8a:	0f b6       	in	r0, 0x3f	; 63
    2e8c:	0f 92       	push	r0
    2e8e:	11 24       	eor	r1, r1
    2e90:	0b b6       	in	r0, 0x3b	; 59
    2e92:	0f 92       	push	r0
    2e94:	2f 93       	push	r18
    2e96:	8f 93       	push	r24
    2e98:	9f 93       	push	r25
    2e9a:	af 93       	push	r26
    2e9c:	bf 93       	push	r27
    2e9e:	ef 93       	push	r30
    2ea0:	ff 93       	push	r31
    2ea2:	e0 91 64 08 	lds	r30, 0x0864	; 0x800864 <_ser_handle+0x6>
    2ea6:	f0 91 65 08 	lds	r31, 0x0865	; 0x800865 <_ser_handle+0x7>
    2eaa:	30 97       	sbiw	r30, 0x00	; 0
    2eac:	b9 f0       	breq	.+46     	; 0x2edc <__vector_55+0x56>
    2eae:	02 80       	ldd	r0, Z+2	; 0x02
    2eb0:	f3 81       	ldd	r31, Z+3	; 0x03
    2eb2:	e0 2d       	mov	r30, r0
    2eb4:	93 81       	ldd	r25, Z+3	; 0x03
    2eb6:	82 81       	ldd	r24, Z+2	; 0x02
    2eb8:	98 17       	cp	r25, r24
    2eba:	b1 f0       	breq	.+44     	; 0x2ee8 <__vector_55+0x62>
    2ebc:	92 81       	ldd	r25, Z+2	; 0x02
    2ebe:	85 81       	ldd	r24, Z+5	; 0x05
    2ec0:	28 2f       	mov	r18, r24
    2ec2:	26 95       	lsr	r18
    2ec4:	29 23       	and	r18, r25
    2ec6:	a0 81       	ld	r26, Z
    2ec8:	b1 81       	ldd	r27, Z+1	; 0x01
    2eca:	a2 0f       	add	r26, r18
    2ecc:	b1 1d       	adc	r27, r1
    2ece:	2c 91       	ld	r18, X
    2ed0:	9f 5f       	subi	r25, 0xFF	; 255
    2ed2:	89 23       	and	r24, r25
    2ed4:	82 83       	std	Z+2, r24	; 0x02
    2ed6:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    2eda:	0b c0       	rjmp	.+22     	; 0x2ef2 <__vector_55+0x6c>
    2edc:	e1 e3       	ldi	r30, 0x31	; 49
    2ede:	f1 e0       	ldi	r31, 0x01	; 1
    2ee0:	80 81       	ld	r24, Z
    2ee2:	8f 7d       	andi	r24, 0xDF	; 223
    2ee4:	80 83       	st	Z, r24
    2ee6:	05 c0       	rjmp	.+10     	; 0x2ef2 <__vector_55+0x6c>
    2ee8:	e1 e3       	ldi	r30, 0x31	; 49
    2eea:	f1 e0       	ldi	r31, 0x01	; 1
    2eec:	80 81       	ld	r24, Z
    2eee:	8f 7d       	andi	r24, 0xDF	; 223
    2ef0:	80 83       	st	Z, r24
    2ef2:	ff 91       	pop	r31
    2ef4:	ef 91       	pop	r30
    2ef6:	bf 91       	pop	r27
    2ef8:	af 91       	pop	r26
    2efa:	9f 91       	pop	r25
    2efc:	8f 91       	pop	r24
    2efe:	2f 91       	pop	r18
    2f00:	0f 90       	pop	r0
    2f02:	0b be       	out	0x3b, r0	; 59
    2f04:	0f 90       	pop	r0
    2f06:	0f be       	out	0x3f, r0	; 63
    2f08:	0f 90       	pop	r0
    2f0a:	1f 90       	pop	r1
    2f0c:	18 95       	reti

00002f0e <fifo_init>:
    2f0e:	fc 01       	movw	r30, r24
    2f10:	41 11       	cpse	r20, r1
    2f12:	02 c0       	rjmp	.+4      	; 0x2f18 <fifo_init+0xa>
    2f14:	0e 94 d5 24 	call	0x49aa	; 0x49aa <abort>
    2f18:	84 2f       	mov	r24, r20
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	9c 01       	movw	r18, r24
    2f1e:	21 50       	subi	r18, 0x01	; 1
    2f20:	31 09       	sbc	r19, r1
    2f22:	82 23       	and	r24, r18
    2f24:	93 23       	and	r25, r19
    2f26:	89 2b       	or	r24, r25
    2f28:	11 f0       	breq	.+4      	; 0x2f2e <fifo_init+0x20>
    2f2a:	0e 94 d5 24 	call	0x49aa	; 0x49aa <abort>
    2f2e:	41 38       	cpi	r20, 0x81	; 129
    2f30:	10 f0       	brcs	.+4      	; 0x2f36 <fifo_init+0x28>
    2f32:	0e 94 d5 24 	call	0x49aa	; 0x49aa <abort>
    2f36:	12 82       	std	Z+2, r1	; 0x02
    2f38:	13 82       	std	Z+3, r1	; 0x03
    2f3a:	44 83       	std	Z+4, r20	; 0x04
    2f3c:	44 0f       	add	r20, r20
    2f3e:	41 50       	subi	r20, 0x01	; 1
    2f40:	45 83       	std	Z+5, r20	; 0x05
    2f42:	71 83       	std	Z+1, r23	; 0x01
    2f44:	60 83       	st	Z, r22
    2f46:	80 e0       	ldi	r24, 0x00	; 0
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	08 95       	ret

00002f4c <hal_create>:
    2f4c:	e2 e3       	ldi	r30, 0x32	; 50
    2f4e:	fa e0       	ldi	r31, 0x0A	; 10
    2f50:	2d e8       	ldi	r18, 0x8D	; 141
    2f52:	3d e1       	ldi	r19, 0x1D	; 29
    2f54:	31 83       	std	Z+1, r19	; 0x01
    2f56:	20 83       	st	Z, r18
    2f58:	20 e9       	ldi	r18, 0x90	; 144
    2f5a:	3d e1       	ldi	r19, 0x1D	; 29
    2f5c:	33 83       	std	Z+3, r19	; 0x03
    2f5e:	22 83       	std	Z+2, r18	; 0x02
    2f60:	2b e9       	ldi	r18, 0x9B	; 155
    2f62:	3d e1       	ldi	r19, 0x1D	; 29
    2f64:	35 83       	std	Z+5, r19	; 0x05
    2f66:	24 83       	std	Z+4, r18	; 0x04
    2f68:	2f e9       	ldi	r18, 0x9F	; 159
    2f6a:	3d e1       	ldi	r19, 0x1D	; 29
    2f6c:	37 83       	std	Z+7, r19	; 0x07
    2f6e:	26 83       	std	Z+6, r18	; 0x06
    2f70:	25 ea       	ldi	r18, 0xA5	; 165
    2f72:	3d e1       	ldi	r19, 0x1D	; 29
    2f74:	31 87       	std	Z+9, r19	; 0x09
    2f76:	20 87       	std	Z+8, r18	; 0x08
    2f78:	21 eb       	ldi	r18, 0xB1	; 177
    2f7a:	3d e1       	ldi	r19, 0x1D	; 29
    2f7c:	33 87       	std	Z+11, r19	; 0x0b
    2f7e:	22 87       	std	Z+10, r18	; 0x0a
    2f80:	26 eb       	ldi	r18, 0xB6	; 182
    2f82:	3d e1       	ldi	r19, 0x1D	; 29
    2f84:	35 87       	std	Z+13, r19	; 0x0d
    2f86:	24 87       	std	Z+12, r18	; 0x0c
    2f88:	22 ec       	ldi	r18, 0xC2	; 194
    2f8a:	3d e1       	ldi	r19, 0x1D	; 29
    2f8c:	37 87       	std	Z+15, r19	; 0x0f
    2f8e:	26 87       	std	Z+14, r18	; 0x0e
    2f90:	22 ea       	ldi	r18, 0xA2	; 162
    2f92:	3d e1       	ldi	r19, 0x1D	; 29
    2f94:	31 8b       	std	Z+17, r19	; 0x11
    2f96:	20 8b       	std	Z+16, r18	; 0x10
    2f98:	27 ec       	ldi	r18, 0xC7	; 199
    2f9a:	3d e1       	ldi	r19, 0x1D	; 29
    2f9c:	33 8b       	std	Z+19, r19	; 0x13
    2f9e:	22 8b       	std	Z+18, r18	; 0x12
    2fa0:	24 ed       	ldi	r18, 0xD4	; 212
    2fa2:	3d e1       	ldi	r19, 0x1D	; 29
    2fa4:	35 8b       	std	Z+21, r19	; 0x15
    2fa6:	24 8b       	std	Z+20, r18	; 0x14
    2fa8:	68 2f       	mov	r22, r24
    2faa:	cf 01       	movw	r24, r30
    2fac:	3c c1       	rjmp	.+632    	; 0x3226 <led_create>
    2fae:	08 95       	ret

00002fb0 <_hihTwiCallback>:
    2fb0:	65 30       	cpi	r22, 0x05	; 5
    2fb2:	f1 f4       	brne	.+60     	; 0x2ff0 <_hihTwiCallback+0x40>
    2fb4:	fa 01       	movw	r30, r20
    2fb6:	80 81       	ld	r24, Z
    2fb8:	8f 73       	andi	r24, 0x3F	; 63
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	98 2f       	mov	r25, r24
    2fbe:	88 27       	eor	r24, r24
    2fc0:	21 81       	ldd	r18, Z+1	; 0x01
    2fc2:	82 2b       	or	r24, r18
    2fc4:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <_hum+0x1>
    2fc8:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <_hum>
    2fcc:	82 81       	ldd	r24, Z+2	; 0x02
    2fce:	f0 e4       	ldi	r31, 0x40	; 64
    2fd0:	8f 9f       	mul	r24, r31
    2fd2:	c0 01       	movw	r24, r0
    2fd4:	11 24       	eor	r1, r1
    2fd6:	fa 01       	movw	r30, r20
    2fd8:	23 81       	ldd	r18, Z+3	; 0x03
    2fda:	26 95       	lsr	r18
    2fdc:	26 95       	lsr	r18
    2fde:	82 2b       	or	r24, r18
    2fe0:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <_temp+0x1>
    2fe4:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_temp>
    2fe8:	81 e0       	ldi	r24, 0x01	; 1
    2fea:	80 93 66 08 	sts	0x0866, r24	; 0x800866 <_measuringIsReady>
    2fee:	08 95       	ret
    2ff0:	64 30       	cpi	r22, 0x04	; 4
    2ff2:	51 f0       	breq	.+20     	; 0x3008 <_hihTwiCallback+0x58>
    2ff4:	80 e0       	ldi	r24, 0x00	; 0
    2ff6:	90 e4       	ldi	r25, 0x40	; 64
    2ff8:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <_temp+0x1>
    2ffc:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_temp>
    3000:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <_hum+0x1>
    3004:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <_hum>
    3008:	08 95       	ret

0000300a <hih8120Create>:
    300a:	0f 93       	push	r16
    300c:	1f 93       	push	r17
    300e:	08 ed       	ldi	r16, 0xD8	; 216
    3010:	17 e1       	ldi	r17, 0x17	; 23
    3012:	20 e0       	ldi	r18, 0x00	; 0
    3014:	34 e2       	ldi	r19, 0x24	; 36
    3016:	44 ef       	ldi	r20, 0xF4	; 244
    3018:	50 e0       	ldi	r21, 0x00	; 0
    301a:	60 e0       	ldi	r22, 0x00	; 0
    301c:	87 e2       	ldi	r24, 0x27	; 39
    301e:	0e 94 1f 20 	call	0x403e	; 0x403e <twiCreate>
    3022:	90 93 68 08 	sts	0x0868, r25	; 0x800868 <_hih8120Handler+0x1>
    3026:	80 93 67 08 	sts	0x0867, r24	; 0x800867 <_hih8120Handler>
    302a:	21 e0       	ldi	r18, 0x01	; 1
    302c:	89 2b       	or	r24, r25
    302e:	09 f0       	breq	.+2      	; 0x3032 <hih8120Create+0x28>
    3030:	20 e0       	ldi	r18, 0x00	; 0
    3032:	82 2f       	mov	r24, r18
    3034:	1f 91       	pop	r17
    3036:	0f 91       	pop	r16
    3038:	08 95       	ret

0000303a <hih8120Wakeup>:
    303a:	80 91 67 08 	lds	r24, 0x0867	; 0x800867 <_hih8120Handler>
    303e:	90 91 68 08 	lds	r25, 0x0868	; 0x800868 <_hih8120Handler+0x1>
    3042:	00 97       	sbiw	r24, 0x00	; 0
    3044:	59 f0       	breq	.+22     	; 0x305c <hih8120Wakeup+0x22>
    3046:	40 e0       	ldi	r20, 0x00	; 0
    3048:	60 e0       	ldi	r22, 0x00	; 0
    304a:	70 e0       	ldi	r23, 0x00	; 0
    304c:	0e 94 70 20 	call	0x40e0	; 0x40e0 <twiTransmit>
    3050:	84 30       	cpi	r24, 0x04	; 4
    3052:	31 f4       	brne	.+12     	; 0x3060 <hih8120Wakeup+0x26>
    3054:	10 92 66 08 	sts	0x0866, r1	; 0x800866 <_measuringIsReady>
    3058:	80 e0       	ldi	r24, 0x00	; 0
    305a:	08 95       	ret
    305c:	82 e0       	ldi	r24, 0x02	; 2
    305e:	08 95       	ret
    3060:	83 e0       	ldi	r24, 0x03	; 3
    3062:	08 95       	ret

00003064 <hih8120Meassure>:
    3064:	80 91 67 08 	lds	r24, 0x0867	; 0x800867 <_hih8120Handler>
    3068:	90 91 68 08 	lds	r25, 0x0868	; 0x800868 <_hih8120Handler+0x1>
    306c:	00 97       	sbiw	r24, 0x00	; 0
    306e:	39 f0       	breq	.+14     	; 0x307e <hih8120Meassure+0x1a>
    3070:	64 e0       	ldi	r22, 0x04	; 4
    3072:	0e 94 bb 20 	call	0x4176	; 0x4176 <twiReceive>
    3076:	85 30       	cpi	r24, 0x05	; 5
    3078:	21 f0       	breq	.+8      	; 0x3082 <hih8120Meassure+0x1e>
    307a:	83 e0       	ldi	r24, 0x03	; 3
    307c:	08 95       	ret
    307e:	82 e0       	ldi	r24, 0x02	; 2
    3080:	08 95       	ret
    3082:	80 e0       	ldi	r24, 0x00	; 0
    3084:	08 95       	ret

00003086 <hih8120GetHumidity>:
    3086:	60 91 1e 02 	lds	r22, 0x021E	; 0x80021e <_hum>
    308a:	70 91 1f 02 	lds	r23, 0x021F	; 0x80021f <_hum+0x1>
    308e:	80 e0       	ldi	r24, 0x00	; 0
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	0e 94 7d 22 	call	0x44fa	; 0x44fa <__floatunsisf>
    3096:	20 e0       	ldi	r18, 0x00	; 0
    3098:	30 e0       	ldi	r19, 0x00	; 0
    309a:	48 ec       	ldi	r20, 0xC8	; 200
    309c:	52 e4       	ldi	r21, 0x42	; 66
    309e:	0e 94 e6 22 	call	0x45cc	; 0x45cc <__mulsf3>
    30a2:	20 e0       	ldi	r18, 0x00	; 0
    30a4:	38 ef       	ldi	r19, 0xF8	; 248
    30a6:	4f e7       	ldi	r20, 0x7F	; 127
    30a8:	56 e4       	ldi	r21, 0x46	; 70
    30aa:	0c 94 12 22 	jmp	0x4424	; 0x4424 <__divsf3>
    30ae:	08 95       	ret

000030b0 <hih8120GetTemperature>:
    30b0:	60 91 1c 02 	lds	r22, 0x021C	; 0x80021c <_temp>
    30b4:	70 91 1d 02 	lds	r23, 0x021D	; 0x80021d <_temp+0x1>
    30b8:	80 e0       	ldi	r24, 0x00	; 0
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	0e 94 7d 22 	call	0x44fa	; 0x44fa <__floatunsisf>
    30c0:	20 e0       	ldi	r18, 0x00	; 0
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	45 e2       	ldi	r20, 0x25	; 37
    30c6:	53 e4       	ldi	r21, 0x43	; 67
    30c8:	0e 94 e6 22 	call	0x45cc	; 0x45cc <__mulsf3>
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	38 ef       	ldi	r19, 0xF8	; 248
    30d0:	4f e7       	ldi	r20, 0x7F	; 127
    30d2:	56 e4       	ldi	r21, 0x46	; 70
    30d4:	0e 94 12 22 	call	0x4424	; 0x4424 <__divsf3>
    30d8:	20 e0       	ldi	r18, 0x00	; 0
    30da:	30 e0       	ldi	r19, 0x00	; 0
    30dc:	40 e2       	ldi	r20, 0x20	; 32
    30de:	52 e4       	ldi	r21, 0x42	; 66
    30e0:	0c 94 ab 21 	jmp	0x4356	; 0x4356 <__subsf3>
    30e4:	08 95       	ret

000030e6 <_turn_off>:
    30e6:	cf 93       	push	r28
    30e8:	df 93       	push	r29
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	fc 01       	movw	r30, r24
    30ee:	ee 0f       	add	r30, r30
    30f0:	ff 1f       	adc	r31, r31
    30f2:	e8 0f       	add	r30, r24
    30f4:	f9 1f       	adc	r31, r25
    30f6:	ee 0f       	add	r30, r30
    30f8:	ff 1f       	adc	r31, r31
    30fa:	e7 59       	subi	r30, 0x97	; 151
    30fc:	f7 4f       	sbci	r31, 0xF7	; 247
    30fe:	23 81       	ldd	r18, Z+3	; 0x03
    3100:	21 11       	cpse	r18, r1
    3102:	0a c0       	rjmp	.+20     	; 0x3118 <_turn_off+0x32>
    3104:	ef 01       	movw	r28, r30
    3106:	e0 91 3a 0a 	lds	r30, 0x0A3A	; 0x800a3a <register_access+0x8>
    310a:	f0 91 3b 0a 	lds	r31, 0x0A3B	; 0x800a3b <register_access+0x9>
    310e:	6a 81       	ldd	r22, Y+2	; 0x02
    3110:	88 81       	ld	r24, Y
    3112:	99 81       	ldd	r25, Y+1	; 0x01
    3114:	19 95       	eicall
    3116:	12 c0       	rjmp	.+36     	; 0x313c <_turn_off+0x56>
    3118:	dc 01       	movw	r26, r24
    311a:	aa 0f       	add	r26, r26
    311c:	bb 1f       	adc	r27, r27
    311e:	ed 01       	movw	r28, r26
    3120:	c8 0f       	add	r28, r24
    3122:	d9 1f       	adc	r29, r25
    3124:	cc 0f       	add	r28, r28
    3126:	dd 1f       	adc	r29, r29
    3128:	c7 59       	subi	r28, 0x97	; 151
    312a:	d7 4f       	sbci	r29, 0xF7	; 247
    312c:	e0 91 44 0a 	lds	r30, 0x0A44	; 0x800a44 <register_access+0x12>
    3130:	f0 91 45 0a 	lds	r31, 0x0A45	; 0x800a45 <register_access+0x13>
    3134:	6a 81       	ldd	r22, Y+2	; 0x02
    3136:	88 81       	ld	r24, Y
    3138:	99 81       	ldd	r25, Y+1	; 0x01
    313a:	19 95       	eicall
    313c:	df 91       	pop	r29
    313e:	cf 91       	pop	r28
    3140:	08 95       	ret

00003142 <_turn_on>:
    3142:	cf 93       	push	r28
    3144:	df 93       	push	r29
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	fc 01       	movw	r30, r24
    314a:	ee 0f       	add	r30, r30
    314c:	ff 1f       	adc	r31, r31
    314e:	e8 0f       	add	r30, r24
    3150:	f9 1f       	adc	r31, r25
    3152:	ee 0f       	add	r30, r30
    3154:	ff 1f       	adc	r31, r31
    3156:	e7 59       	subi	r30, 0x97	; 151
    3158:	f7 4f       	sbci	r31, 0xF7	; 247
    315a:	23 81       	ldd	r18, Z+3	; 0x03
    315c:	21 11       	cpse	r18, r1
    315e:	0a c0       	rjmp	.+20     	; 0x3174 <_turn_on+0x32>
    3160:	ef 01       	movw	r28, r30
    3162:	e0 91 44 0a 	lds	r30, 0x0A44	; 0x800a44 <register_access+0x12>
    3166:	f0 91 45 0a 	lds	r31, 0x0A45	; 0x800a45 <register_access+0x13>
    316a:	6a 81       	ldd	r22, Y+2	; 0x02
    316c:	88 81       	ld	r24, Y
    316e:	99 81       	ldd	r25, Y+1	; 0x01
    3170:	19 95       	eicall
    3172:	12 c0       	rjmp	.+36     	; 0x3198 <_turn_on+0x56>
    3174:	dc 01       	movw	r26, r24
    3176:	aa 0f       	add	r26, r26
    3178:	bb 1f       	adc	r27, r27
    317a:	ed 01       	movw	r28, r26
    317c:	c8 0f       	add	r28, r24
    317e:	d9 1f       	adc	r29, r25
    3180:	cc 0f       	add	r28, r28
    3182:	dd 1f       	adc	r29, r29
    3184:	c7 59       	subi	r28, 0x97	; 151
    3186:	d7 4f       	sbci	r29, 0xF7	; 247
    3188:	e0 91 3a 0a 	lds	r30, 0x0A3A	; 0x800a3a <register_access+0x8>
    318c:	f0 91 3b 0a 	lds	r31, 0x0A3B	; 0x800a3b <register_access+0x9>
    3190:	6a 81       	ldd	r22, Y+2	; 0x02
    3192:	88 81       	ld	r24, Y
    3194:	99 81       	ldd	r25, Y+1	; 0x01
    3196:	19 95       	eicall
    3198:	df 91       	pop	r29
    319a:	cf 91       	pop	r28
    319c:	08 95       	ret

0000319e <_hal_led_task>:
    319e:	82 ee       	ldi	r24, 0xE2	; 226
    31a0:	94 e0       	ldi	r25, 0x04	; 4
    31a2:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <puts>
    31a6:	0f 2e       	mov	r0, r31
    31a8:	f2 e3       	ldi	r31, 0x32	; 50
    31aa:	cf 2e       	mov	r12, r31
    31ac:	fa e0       	ldi	r31, 0x0A	; 10
    31ae:	df 2e       	mov	r13, r31
    31b0:	f0 2d       	mov	r31, r0
    31b2:	04 e0       	ldi	r16, 0x04	; 4
    31b4:	c9 e6       	ldi	r28, 0x69	; 105
    31b6:	d8 e0       	ldi	r29, 0x08	; 8
    31b8:	10 e0       	ldi	r17, 0x00	; 0
    31ba:	8c 81       	ldd	r24, Y+4	; 0x04
    31bc:	81 30       	cpi	r24, 0x01	; 1
    31be:	69 f0       	breq	.+26     	; 0x31da <_hal_led_task+0x3c>
    31c0:	e8 f0       	brcs	.+58     	; 0x31fc <_hal_led_task+0x5e>
    31c2:	82 30       	cpi	r24, 0x02	; 2
    31c4:	39 f5       	brne	.+78     	; 0x3214 <_hal_led_task+0x76>
    31c6:	d6 01       	movw	r26, r12
    31c8:	1c 96       	adiw	r26, 0x0c	; 12
    31ca:	ed 91       	ld	r30, X+
    31cc:	fc 91       	ld	r31, X
    31ce:	1d 97       	sbiw	r26, 0x0d	; 13
    31d0:	6a 81       	ldd	r22, Y+2	; 0x02
    31d2:	88 81       	ld	r24, Y
    31d4:	99 81       	ldd	r25, Y+1	; 0x01
    31d6:	19 95       	eicall
    31d8:	1d c0       	rjmp	.+58     	; 0x3214 <_hal_led_task+0x76>
    31da:	8d 81       	ldd	r24, Y+5	; 0x05
    31dc:	8f 5f       	subi	r24, 0xFF	; 255
    31de:	8a 30       	cpi	r24, 0x0A	; 10
    31e0:	10 f4       	brcc	.+4      	; 0x31e6 <_hal_led_task+0x48>
    31e2:	8d 83       	std	Y+5, r24	; 0x05
    31e4:	17 c0       	rjmp	.+46     	; 0x3214 <_hal_led_task+0x76>
    31e6:	1d 82       	std	Y+5, r1	; 0x05
    31e8:	d6 01       	movw	r26, r12
    31ea:	1c 96       	adiw	r26, 0x0c	; 12
    31ec:	ed 91       	ld	r30, X+
    31ee:	fc 91       	ld	r31, X
    31f0:	1d 97       	sbiw	r26, 0x0d	; 13
    31f2:	6a 81       	ldd	r22, Y+2	; 0x02
    31f4:	88 81       	ld	r24, Y
    31f6:	99 81       	ldd	r25, Y+1	; 0x01
    31f8:	19 95       	eicall
    31fa:	0c c0       	rjmp	.+24     	; 0x3214 <_hal_led_task+0x76>
    31fc:	8d 81       	ldd	r24, Y+5	; 0x05
    31fe:	88 23       	and	r24, r24
    3200:	31 f0       	breq	.+12     	; 0x320e <_hal_led_task+0x70>
    3202:	81 2f       	mov	r24, r17
    3204:	9e df       	rcall	.-196    	; 0x3142 <_turn_on>
    3206:	8d 81       	ldd	r24, Y+5	; 0x05
    3208:	81 50       	subi	r24, 0x01	; 1
    320a:	8d 83       	std	Y+5, r24	; 0x05
    320c:	03 c0       	rjmp	.+6      	; 0x3214 <_hal_led_task+0x76>
    320e:	0c 83       	std	Y+4, r16	; 0x04
    3210:	81 2f       	mov	r24, r17
    3212:	69 df       	rcall	.-302    	; 0x30e6 <_turn_off>
    3214:	1f 5f       	subi	r17, 0xFF	; 255
    3216:	26 96       	adiw	r28, 0x06	; 6
    3218:	14 30       	cpi	r17, 0x04	; 4
    321a:	79 f6       	brne	.-98     	; 0x31ba <_hal_led_task+0x1c>
    321c:	85 e0       	ldi	r24, 0x05	; 5
    321e:	90 e0       	ldi	r25, 0x00	; 0
    3220:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <vTaskDelay>
    3224:	c7 cf       	rjmp	.-114    	; 0x31b4 <_hal_led_task+0x16>

00003226 <led_create>:
    3226:	cf 92       	push	r12
    3228:	df 92       	push	r13
    322a:	ef 92       	push	r14
    322c:	ff 92       	push	r15
    322e:	0f 93       	push	r16
    3230:	1f 93       	push	r17
    3232:	cf 93       	push	r28
    3234:	df 93       	push	r29
    3236:	06 2f       	mov	r16, r22
    3238:	0f 2e       	mov	r0, r31
    323a:	f2 e3       	ldi	r31, 0x32	; 50
    323c:	ef 2e       	mov	r14, r31
    323e:	fa e0       	ldi	r31, 0x0A	; 10
    3240:	ff 2e       	mov	r15, r31
    3242:	f0 2d       	mov	r31, r0
    3244:	d7 01       	movw	r26, r14
    3246:	18 96       	adiw	r26, 0x08	; 8
    3248:	ed 91       	ld	r30, X+
    324a:	fc 91       	ld	r31, X
    324c:	19 97       	sbiw	r26, 0x09	; 9
    324e:	66 e0       	ldi	r22, 0x06	; 6
    3250:	87 e2       	ldi	r24, 0x27	; 39
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	19 95       	eicall
    3256:	c9 e6       	ldi	r28, 0x69	; 105
    3258:	d8 e0       	ldi	r29, 0x08	; 8
    325a:	0f 2e       	mov	r0, r31
    325c:	f8 e2       	ldi	r31, 0x28	; 40
    325e:	cf 2e       	mov	r12, r31
    3260:	d1 2c       	mov	r13, r1
    3262:	f0 2d       	mov	r31, r0
    3264:	d9 82       	std	Y+1, r13	; 0x01
    3266:	c8 82       	st	Y, r12
    3268:	86 e0       	ldi	r24, 0x06	; 6
    326a:	8a 83       	std	Y+2, r24	; 0x02
    326c:	1b 82       	std	Y+3, r1	; 0x03
    326e:	14 e0       	ldi	r17, 0x04	; 4
    3270:	1c 83       	std	Y+4, r17	; 0x04
    3272:	80 e0       	ldi	r24, 0x00	; 0
    3274:	38 df       	rcall	.-400    	; 0x30e6 <_turn_off>
    3276:	d7 01       	movw	r26, r14
    3278:	18 96       	adiw	r26, 0x08	; 8
    327a:	ed 91       	ld	r30, X+
    327c:	fc 91       	ld	r31, X
    327e:	19 97       	sbiw	r26, 0x09	; 9
    3280:	67 e0       	ldi	r22, 0x07	; 7
    3282:	87 e2       	ldi	r24, 0x27	; 39
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	19 95       	eicall
    3288:	df 82       	std	Y+7, r13	; 0x07
    328a:	ce 82       	std	Y+6, r12	; 0x06
    328c:	87 e0       	ldi	r24, 0x07	; 7
    328e:	88 87       	std	Y+8, r24	; 0x08
    3290:	19 86       	std	Y+9, r1	; 0x09
    3292:	1a 87       	std	Y+10, r17	; 0x0a
    3294:	81 e0       	ldi	r24, 0x01	; 1
    3296:	27 df       	rcall	.-434    	; 0x30e6 <_turn_off>
    3298:	d7 01       	movw	r26, r14
    329a:	18 96       	adiw	r26, 0x08	; 8
    329c:	ed 91       	ld	r30, X+
    329e:	fc 91       	ld	r31, X
    32a0:	19 97       	sbiw	r26, 0x09	; 9
    32a2:	65 e0       	ldi	r22, 0x05	; 5
    32a4:	83 e3       	ldi	r24, 0x33	; 51
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	19 95       	eicall
    32aa:	d7 01       	movw	r26, r14
    32ac:	18 96       	adiw	r26, 0x08	; 8
    32ae:	ed 91       	ld	r30, X+
    32b0:	fc 91       	ld	r31, X
    32b2:	19 97       	sbiw	r26, 0x09	; 9
    32b4:	61 e0       	ldi	r22, 0x01	; 1
    32b6:	84 e3       	ldi	r24, 0x34	; 52
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	19 95       	eicall
    32bc:	84 e3       	ldi	r24, 0x34	; 52
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	9d 87       	std	Y+13, r25	; 0x0d
    32c2:	8c 87       	std	Y+12, r24	; 0x0c
    32c4:	85 e0       	ldi	r24, 0x05	; 5
    32c6:	8e 87       	std	Y+14, r24	; 0x0e
    32c8:	1f 86       	std	Y+15, r1	; 0x0f
    32ca:	18 8b       	std	Y+16, r17	; 0x10
    32cc:	82 e0       	ldi	r24, 0x02	; 2
    32ce:	0b df       	rcall	.-490    	; 0x30e6 <_turn_off>
    32d0:	d7 01       	movw	r26, r14
    32d2:	18 96       	adiw	r26, 0x08	; 8
    32d4:	ed 91       	ld	r30, X+
    32d6:	fc 91       	ld	r31, X
    32d8:	19 97       	sbiw	r26, 0x09	; 9
    32da:	64 e0       	ldi	r22, 0x04	; 4
    32dc:	81 e0       	ldi	r24, 0x01	; 1
    32de:	91 e0       	ldi	r25, 0x01	; 1
    32e0:	19 95       	eicall
    32e2:	d7 01       	movw	r26, r14
    32e4:	18 96       	adiw	r26, 0x08	; 8
    32e6:	ed 91       	ld	r30, X+
    32e8:	fc 91       	ld	r31, X
    32ea:	19 97       	sbiw	r26, 0x09	; 9
    32ec:	61 e0       	ldi	r22, 0x01	; 1
    32ee:	82 e0       	ldi	r24, 0x02	; 2
    32f0:	91 e0       	ldi	r25, 0x01	; 1
    32f2:	19 95       	eicall
    32f4:	82 e0       	ldi	r24, 0x02	; 2
    32f6:	91 e0       	ldi	r25, 0x01	; 1
    32f8:	9b 8b       	std	Y+19, r25	; 0x13
    32fa:	8a 8b       	std	Y+18, r24	; 0x12
    32fc:	1c 8b       	std	Y+20, r17	; 0x14
    32fe:	1d 8a       	std	Y+21, r1	; 0x15
    3300:	1e 8b       	std	Y+22, r17	; 0x16
    3302:	83 e0       	ldi	r24, 0x03	; 3
    3304:	f0 de       	rcall	.-544    	; 0x30e6 <_turn_off>
    3306:	e1 2c       	mov	r14, r1
    3308:	f1 2c       	mov	r15, r1
    330a:	20 e0       	ldi	r18, 0x00	; 0
    330c:	30 e0       	ldi	r19, 0x00	; 0
    330e:	40 ec       	ldi	r20, 0xC0	; 192
    3310:	50 e0       	ldi	r21, 0x00	; 0
    3312:	69 ef       	ldi	r22, 0xF9	; 249
    3314:	74 e0       	ldi	r23, 0x04	; 4
    3316:	8f ec       	ldi	r24, 0xCF	; 207
    3318:	98 e1       	ldi	r25, 0x18	; 24
    331a:	0e 94 41 0c 	call	0x1882	; 0x1882 <xTaskCreate>
    331e:	df 91       	pop	r29
    3320:	cf 91       	pop	r28
    3322:	1f 91       	pop	r17
    3324:	0f 91       	pop	r16
    3326:	ff 90       	pop	r15
    3328:	ef 90       	pop	r14
    332a:	df 90       	pop	r13
    332c:	cf 90       	pop	r12
    332e:	08 95       	ret

00003330 <_serial_call_back>:
    3330:	0f 93       	push	r16
    3332:	1f 93       	push	r17
    3334:	cf 93       	push	r28
    3336:	df 93       	push	r29
    3338:	1f 92       	push	r1
    333a:	1f 92       	push	r1
    333c:	cd b7       	in	r28, 0x3d	; 61
    333e:	de b7       	in	r29, 0x3e	; 62
    3340:	8c 01       	movw	r16, r24
    3342:	19 82       	std	Y+1, r1	; 0x01
    3344:	2d c0       	rjmp	.+90     	; 0x33a0 <_serial_call_back+0x70>
    3346:	e0 91 e5 08 	lds	r30, 0x08E5	; 0x8008e5 <rec_buf_inp.2926>
    334a:	ec 32       	cpi	r30, 0x2C	; 44
    334c:	50 f4       	brcc	.+20     	; 0x3362 <_serial_call_back+0x32>
    334e:	81 e0       	ldi	r24, 0x01	; 1
    3350:	8e 0f       	add	r24, r30
    3352:	80 93 e5 08 	sts	0x08E5, r24	; 0x8008e5 <rec_buf_inp.2926>
    3356:	f0 e0       	ldi	r31, 0x00	; 0
    3358:	eb 5e       	subi	r30, 0xEB	; 235
    335a:	f6 4f       	sbci	r31, 0xF6	; 246
    335c:	8a 81       	ldd	r24, Y+2	; 0x02
    335e:	80 83       	st	Z, r24
    3360:	02 c0       	rjmp	.+4      	; 0x3366 <_serial_call_back+0x36>
    3362:	10 92 e5 08 	sts	0x08E5, r1	; 0x8008e5 <rec_buf_inp.2926>
    3366:	8a 81       	ldd	r24, Y+2	; 0x02
    3368:	8a 30       	cpi	r24, 0x0A	; 10
    336a:	d1 f4       	brne	.+52     	; 0x33a0 <_serial_call_back+0x70>
    336c:	40 91 e5 08 	lds	r20, 0x08E5	; 0x8008e5 <rec_buf_inp.2926>
    3370:	50 e0       	ldi	r21, 0x00	; 0
    3372:	fa 01       	movw	r30, r20
    3374:	ed 5e       	subi	r30, 0xED	; 237
    3376:	f6 4f       	sbci	r31, 0xF6	; 246
    3378:	10 82       	st	Z, r1
    337a:	41 50       	subi	r20, 0x01	; 1
    337c:	51 09       	sbc	r21, r1
    337e:	9e 01       	movw	r18, r28
    3380:	2f 5f       	subi	r18, 0xFF	; 255
    3382:	3f 4f       	sbci	r19, 0xFF	; 255
    3384:	65 e1       	ldi	r22, 0x15	; 21
    3386:	79 e0       	ldi	r23, 0x09	; 9
    3388:	80 91 e6 08 	lds	r24, 0x08E6	; 0x8008e6 <_reply_buffer_handle>
    338c:	90 91 e7 08 	lds	r25, 0x08E7	; 0x8008e7 <_reply_buffer_handle+0x1>
    3390:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <xStreamBufferSendFromISR>
    3394:	89 81       	ldd	r24, Y+1	; 0x01
    3396:	81 11       	cpse	r24, r1
    3398:	0e 94 28 06 	call	0xc50	; 0xc50 <vPortYield>
    339c:	10 92 e5 08 	sts	0x08E5, r1	; 0x8008e5 <rec_buf_inp.2926>
    33a0:	be 01       	movw	r22, r28
    33a2:	6e 5f       	subi	r22, 0xFE	; 254
    33a4:	7f 4f       	sbci	r23, 0xFF	; 255
    33a6:	c8 01       	movw	r24, r16
    33a8:	3e db       	rcall	.-2436   	; 0x2a26 <serial_get_byte>
    33aa:	88 23       	and	r24, r24
    33ac:	61 f2       	breq	.-104    	; 0x3346 <_serial_call_back+0x16>
    33ae:	0f 90       	pop	r0
    33b0:	0f 90       	pop	r0
    33b2:	df 91       	pop	r29
    33b4:	cf 91       	pop	r28
    33b6:	1f 91       	pop	r17
    33b8:	0f 91       	pop	r16
    33ba:	08 95       	ret

000033bc <_upload_message>:
    33bc:	0f 93       	push	r16
    33be:	1f 93       	push	r17
    33c0:	cf 93       	push	r28
    33c2:	df 93       	push	r29
    33c4:	8c 01       	movw	r16, r24
    33c6:	eb 01       	movw	r28, r22
    33c8:	80 91 e6 08 	lds	r24, 0x08E6	; 0x8008e6 <_reply_buffer_handle>
    33cc:	90 91 e7 08 	lds	r25, 0x08E7	; 0x8008e7 <_reply_buffer_handle+0x1>
    33d0:	0e 94 b3 0a 	call	0x1566	; 0x1566 <xStreamBufferReset>
    33d4:	b8 01       	movw	r22, r16
    33d6:	81 e8       	ldi	r24, 0x81	; 129
    33d8:	98 e0       	ldi	r25, 0x08	; 8
    33da:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <strcpy>
    33de:	20 97       	sbiw	r28, 0x00	; 0
    33e0:	79 f0       	breq	.+30     	; 0x3400 <_upload_message+0x44>
    33e2:	e1 e8       	ldi	r30, 0x81	; 129
    33e4:	f8 e0       	ldi	r31, 0x08	; 8
    33e6:	01 90       	ld	r0, Z+
    33e8:	00 20       	and	r0, r0
    33ea:	e9 f7       	brne	.-6      	; 0x33e6 <_upload_message+0x2a>
    33ec:	31 97       	sbiw	r30, 0x01	; 1
    33ee:	80 e2       	ldi	r24, 0x20	; 32
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	91 83       	std	Z+1, r25	; 0x01
    33f4:	80 83       	st	Z, r24
    33f6:	be 01       	movw	r22, r28
    33f8:	81 e8       	ldi	r24, 0x81	; 129
    33fa:	98 e0       	ldi	r25, 0x08	; 8
    33fc:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <strcat>
    3400:	e1 e8       	ldi	r30, 0x81	; 129
    3402:	f8 e0       	ldi	r31, 0x08	; 8
    3404:	df 01       	movw	r26, r30
    3406:	0d 90       	ld	r0, X+
    3408:	00 20       	and	r0, r0
    340a:	e9 f7       	brne	.-6      	; 0x3406 <_upload_message+0x4a>
    340c:	11 97       	sbiw	r26, 0x01	; 1
    340e:	8d e0       	ldi	r24, 0x0D	; 13
    3410:	9a e0       	ldi	r25, 0x0A	; 10
    3412:	11 96       	adiw	r26, 0x01	; 1
    3414:	9c 93       	st	X, r25
    3416:	8e 93       	st	-X, r24
    3418:	12 96       	adiw	r26, 0x02	; 2
    341a:	1c 92       	st	X, r1
    341c:	01 90       	ld	r0, Z+
    341e:	00 20       	and	r0, r0
    3420:	e9 f7       	brne	.-6      	; 0x341c <_upload_message+0x60>
    3422:	31 97       	sbiw	r30, 0x01	; 1
    3424:	e1 58       	subi	r30, 0x81	; 129
    3426:	f8 40       	sbci	r31, 0x08	; 8
    3428:	ae 2f       	mov	r26, r30
    342a:	81 e8       	ldi	r24, 0x81	; 129
    342c:	98 e0       	ldi	r25, 0x08	; 8
    342e:	ac 01       	movw	r20, r24
    3430:	6a 2f       	mov	r22, r26
    3432:	80 91 e8 08 	lds	r24, 0x08E8	; 0x8008e8 <_rn2483_serial>
    3436:	90 91 e9 08 	lds	r25, 0x08E9	; 0x8008e9 <_rn2483_serial+0x1>
    343a:	a5 da       	rcall	.-2742   	; 0x2986 <serial_send_bytes>
    343c:	81 11       	cpse	r24, r1
    343e:	0f c0       	rjmp	.+30     	; 0x345e <_upload_message+0xa2>
    3440:	28 e2       	ldi	r18, 0x28	; 40
    3442:	35 e0       	ldi	r19, 0x05	; 5
    3444:	4d e2       	ldi	r20, 0x2D	; 45
    3446:	50 e0       	ldi	r21, 0x00	; 0
    3448:	6f e6       	ldi	r22, 0x6F	; 111
    344a:	79 e0       	ldi	r23, 0x09	; 9
    344c:	80 91 e6 08 	lds	r24, 0x08E6	; 0x8008e6 <_reply_buffer_handle>
    3450:	90 91 e7 08 	lds	r25, 0x08E7	; 0x8008e7 <_reply_buffer_handle+0x1>
    3454:	0e 94 34 0b 	call	0x1668	; 0x1668 <xStreamBufferReceive>
    3458:	8f e6       	ldi	r24, 0x6F	; 111
    345a:	99 e0       	ldi	r25, 0x09	; 9
    345c:	02 c0       	rjmp	.+4      	; 0x3462 <_upload_message+0xa6>
    345e:	80 e0       	ldi	r24, 0x00	; 0
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	df 91       	pop	r29
    3464:	cf 91       	pop	r28
    3466:	1f 91       	pop	r17
    3468:	0f 91       	pop	r16
    346a:	08 95       	ret

0000346c <_reply2return_code>:
    346c:	af 92       	push	r10
    346e:	bf 92       	push	r11
    3470:	cf 92       	push	r12
    3472:	df 92       	push	r13
    3474:	ef 92       	push	r14
    3476:	ff 92       	push	r15
    3478:	0f 93       	push	r16
    347a:	1f 93       	push	r17
    347c:	cf 93       	push	r28
    347e:	df 93       	push	r29
    3480:	6c 01       	movw	r12, r24
    3482:	fc 01       	movw	r30, r24
    3484:	01 90       	ld	r0, Z+
    3486:	00 20       	and	r0, r0
    3488:	e9 f7       	brne	.-6      	; 0x3484 <_reply2return_code+0x18>
    348a:	31 97       	sbiw	r30, 0x01	; 1
    348c:	7f 01       	movw	r14, r30
    348e:	e8 1a       	sub	r14, r24
    3490:	f9 0a       	sbc	r15, r25
    3492:	0e e9       	ldi	r16, 0x9E	; 158
    3494:	17 e0       	ldi	r17, 0x07	; 7
    3496:	c0 e0       	ldi	r28, 0x00	; 0
    3498:	d0 e0       	ldi	r29, 0x00	; 0
    349a:	f8 01       	movw	r30, r16
    349c:	60 81       	ld	r22, Z
    349e:	71 81       	ldd	r23, Z+1	; 0x01
    34a0:	a7 01       	movw	r20, r14
    34a2:	c6 01       	movw	r24, r12
    34a4:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <strncasecmp>
    34a8:	89 2b       	or	r24, r25
    34aa:	49 f4       	brne	.+18     	; 0x34be <_reply2return_code+0x52>
    34ac:	fe 01       	movw	r30, r28
    34ae:	ee 0f       	add	r30, r30
    34b0:	ff 1f       	adc	r31, r31
    34b2:	ec 0f       	add	r30, r28
    34b4:	fd 1f       	adc	r31, r29
    34b6:	e3 56       	subi	r30, 0x63	; 99
    34b8:	f8 4f       	sbci	r31, 0xF8	; 248
    34ba:	80 81       	ld	r24, Z
    34bc:	07 c0       	rjmp	.+14     	; 0x34cc <_reply2return_code+0x60>
    34be:	21 96       	adiw	r28, 0x01	; 1
    34c0:	0d 5f       	subi	r16, 0xFD	; 253
    34c2:	1f 4f       	sbci	r17, 0xFF	; 255
    34c4:	c1 31       	cpi	r28, 0x11	; 17
    34c6:	d1 05       	cpc	r29, r1
    34c8:	41 f7       	brne	.-48     	; 0x349a <_reply2return_code+0x2e>
    34ca:	80 e1       	ldi	r24, 0x10	; 16
    34cc:	df 91       	pop	r29
    34ce:	cf 91       	pop	r28
    34d0:	1f 91       	pop	r17
    34d2:	0f 91       	pop	r16
    34d4:	ff 90       	pop	r15
    34d6:	ef 90       	pop	r14
    34d8:	df 90       	pop	r13
    34da:	cf 90       	pop	r12
    34dc:	bf 90       	pop	r11
    34de:	af 90       	pop	r10
    34e0:	08 95       	ret

000034e2 <_upload_message_rc>:
    34e2:	6c df       	rcall	.-296    	; 0x33bc <_upload_message>
    34e4:	c3 cf       	rjmp	.-122    	; 0x346c <_reply2return_code>
    34e6:	08 95       	ret

000034e8 <lora_driver_flush_buffers>:
    34e8:	80 91 e6 08 	lds	r24, 0x08E6	; 0x8008e6 <_reply_buffer_handle>
    34ec:	90 91 e7 08 	lds	r25, 0x08E7	; 0x8008e7 <_reply_buffer_handle+0x1>
    34f0:	0c 94 b3 0a 	jmp	0x1566	; 0x1566 <xStreamBufferReset>
    34f4:	08 95       	ret

000034f6 <lora_driver_create>:
    34f6:	8f 92       	push	r8
    34f8:	9f 92       	push	r9
    34fa:	af 92       	push	r10
    34fc:	cf 92       	push	r12
    34fe:	ef 92       	push	r14
    3500:	0f 93       	push	r16
    3502:	cf 93       	push	r28
    3504:	c8 2f       	mov	r28, r24
    3506:	41 e0       	ldi	r20, 0x01	; 1
    3508:	60 e0       	ldi	r22, 0x00	; 0
    350a:	70 e0       	ldi	r23, 0x00	; 0
    350c:	88 ec       	ldi	r24, 0xC8	; 200
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	0e 94 87 0a 	call	0x150e	; 0x150e <xStreamBufferGenericCreate>
    3514:	90 93 e7 08 	sts	0x08E7, r25	; 0x8008e7 <_reply_buffer_handle+0x1>
    3518:	80 93 e6 08 	sts	0x08E6, r24	; 0x8008e6 <_reply_buffer_handle>
    351c:	0f 2e       	mov	r0, r31
    351e:	f8 e9       	ldi	r31, 0x98	; 152
    3520:	8f 2e       	mov	r8, r31
    3522:	f9 e1       	ldi	r31, 0x19	; 25
    3524:	9f 2e       	mov	r9, r31
    3526:	f0 2d       	mov	r31, r0
    3528:	68 94       	set
    352a:	aa 24       	eor	r10, r10
    352c:	a6 f8       	bld	r10, 6
    352e:	68 94       	set
    3530:	cc 24       	eor	r12, r12
    3532:	c6 f8       	bld	r12, 6
    3534:	e1 2c       	mov	r14, r1
    3536:	00 e0       	ldi	r16, 0x00	; 0
    3538:	23 e0       	ldi	r18, 0x03	; 3
    353a:	40 e0       	ldi	r20, 0x00	; 0
    353c:	51 ee       	ldi	r21, 0xE1	; 225
    353e:	60 e0       	ldi	r22, 0x00	; 0
    3540:	70 e0       	ldi	r23, 0x00	; 0
    3542:	8c 2f       	mov	r24, r28
    3544:	5c d9       	rcall	.-3400   	; 0x27fe <serial_new_instance>
    3546:	90 93 e9 08 	sts	0x08E9, r25	; 0x8008e9 <_rn2483_serial+0x1>
    354a:	80 93 e8 08 	sts	0x08E8, r24	; 0x8008e8 <_rn2483_serial>
    354e:	e0 91 3a 0a 	lds	r30, 0x0A3A	; 0x800a3a <register_access+0x8>
    3552:	f0 91 3b 0a 	lds	r31, 0x0A3B	; 0x800a3b <register_access+0x9>
    3556:	64 e0       	ldi	r22, 0x04	; 4
    3558:	87 e0       	ldi	r24, 0x07	; 7
    355a:	91 e0       	ldi	r25, 0x01	; 1
    355c:	19 95       	eicall
    355e:	cf 91       	pop	r28
    3560:	0f 91       	pop	r16
    3562:	ef 90       	pop	r14
    3564:	cf 90       	pop	r12
    3566:	af 90       	pop	r10
    3568:	9f 90       	pop	r9
    356a:	8f 90       	pop	r8
    356c:	08 95       	ret

0000356e <lora_driver_reset_rn2483>:
    356e:	88 23       	and	r24, r24
    3570:	49 f0       	breq	.+18     	; 0x3584 <lora_driver_reset_rn2483+0x16>
    3572:	e0 91 44 0a 	lds	r30, 0x0A44	; 0x800a44 <register_access+0x12>
    3576:	f0 91 45 0a 	lds	r31, 0x0A45	; 0x800a45 <register_access+0x13>
    357a:	64 e0       	ldi	r22, 0x04	; 4
    357c:	88 e0       	ldi	r24, 0x08	; 8
    357e:	91 e0       	ldi	r25, 0x01	; 1
    3580:	19 95       	eicall
    3582:	08 95       	ret
    3584:	e0 91 3a 0a 	lds	r30, 0x0A3A	; 0x800a3a <register_access+0x8>
    3588:	f0 91 3b 0a 	lds	r31, 0x0A3B	; 0x800a3b <register_access+0x9>
    358c:	64 e0       	ldi	r22, 0x04	; 4
    358e:	88 e0       	ldi	r24, 0x08	; 8
    3590:	91 e0       	ldi	r25, 0x01	; 1
    3592:	19 95       	eicall
    3594:	08 95       	ret

00003596 <lora_driver_rn2483_factory_reset>:
    3596:	60 e0       	ldi	r22, 0x00	; 0
    3598:	70 e0       	ldi	r23, 0x00	; 0
    359a:	80 e2       	ldi	r24, 0x20	; 32
    359c:	95 e0       	ldi	r25, 0x05	; 5
    359e:	0e df       	rcall	.-484    	; 0x33bc <_upload_message>
    35a0:	ef e6       	ldi	r30, 0x6F	; 111
    35a2:	f9 e0       	ldi	r31, 0x09	; 9
    35a4:	01 90       	ld	r0, Z+
    35a6:	00 20       	and	r0, r0
    35a8:	e9 f7       	brne	.-6      	; 0x35a4 <lora_driver_rn2483_factory_reset+0xe>
    35aa:	31 97       	sbiw	r30, 0x01	; 1
    35ac:	ef 56       	subi	r30, 0x6F	; 111
    35ae:	f9 40       	sbci	r31, 0x09	; 9
    35b0:	81 e0       	ldi	r24, 0x01	; 1
    35b2:	75 97       	sbiw	r30, 0x15	; 21
    35b4:	08 f0       	brcs	.+2      	; 0x35b8 <lora_driver_rn2483_factory_reset+0x22>
    35b6:	80 e0       	ldi	r24, 0x00	; 0
    35b8:	08 95       	ret

000035ba <lora_driver_get_rn2483_hweui>:
    35ba:	cf 93       	push	r28
    35bc:	df 93       	push	r29
    35be:	ec 01       	movw	r28, r24
    35c0:	60 e0       	ldi	r22, 0x00	; 0
    35c2:	70 e0       	ldi	r23, 0x00	; 0
    35c4:	81 e3       	ldi	r24, 0x31	; 49
    35c6:	95 e0       	ldi	r25, 0x05	; 5
    35c8:	f9 de       	rcall	.-526    	; 0x33bc <_upload_message>
    35ca:	ef e6       	ldi	r30, 0x6F	; 111
    35cc:	f9 e0       	ldi	r31, 0x09	; 9
    35ce:	01 90       	ld	r0, Z+
    35d0:	00 20       	and	r0, r0
    35d2:	e9 f7       	brne	.-6      	; 0x35ce <lora_driver_get_rn2483_hweui+0x14>
    35d4:	e0 58       	subi	r30, 0x80	; 128
    35d6:	f9 40       	sbci	r31, 0x09	; 9
    35d8:	39 f4       	brne	.+14     	; 0x35e8 <lora_driver_get_rn2483_hweui+0x2e>
    35da:	6f e6       	ldi	r22, 0x6F	; 111
    35dc:	79 e0       	ldi	r23, 0x09	; 9
    35de:	ce 01       	movw	r24, r28
    35e0:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <strcpy>
    35e4:	80 e0       	ldi	r24, 0x00	; 0
    35e6:	02 c0       	rjmp	.+4      	; 0x35ec <lora_driver_get_rn2483_hweui+0x32>
    35e8:	18 82       	st	Y, r1
    35ea:	81 e0       	ldi	r24, 0x01	; 1
    35ec:	df 91       	pop	r29
    35ee:	cf 91       	pop	r28
    35f0:	08 95       	ret

000035f2 <lora_driver_set_device_identifier>:
    35f2:	fc 01       	movw	r30, r24
    35f4:	01 90       	ld	r0, Z+
    35f6:	00 20       	and	r0, r0
    35f8:	e9 f7       	brne	.-6      	; 0x35f4 <lora_driver_set_device_identifier+0x2>
    35fa:	9f 01       	movw	r18, r30
    35fc:	21 51       	subi	r18, 0x11	; 17
    35fe:	31 09       	sbc	r19, r1
    3600:	28 17       	cp	r18, r24
    3602:	39 07       	cpc	r19, r25
    3604:	29 f4       	brne	.+10     	; 0x3610 <lora_driver_set_device_identifier+0x1e>
    3606:	bc 01       	movw	r22, r24
    3608:	8f e5       	ldi	r24, 0x5F	; 95
    360a:	95 e0       	ldi	r25, 0x05	; 5
    360c:	6a cf       	rjmp	.-300    	; 0x34e2 <_upload_message_rc>
    360e:	08 95       	ret
    3610:	89 e0       	ldi	r24, 0x09	; 9
    3612:	08 95       	ret

00003614 <lora_driver_set_application_identifier>:
    3614:	fc 01       	movw	r30, r24
    3616:	01 90       	ld	r0, Z+
    3618:	00 20       	and	r0, r0
    361a:	e9 f7       	brne	.-6      	; 0x3616 <lora_driver_set_application_identifier+0x2>
    361c:	9f 01       	movw	r18, r30
    361e:	21 51       	subi	r18, 0x11	; 17
    3620:	31 09       	sbc	r19, r1
    3622:	28 17       	cp	r18, r24
    3624:	39 07       	cpc	r19, r25
    3626:	29 f4       	brne	.+10     	; 0x3632 <lora_driver_set_application_identifier+0x1e>
    3628:	bc 01       	movw	r22, r24
    362a:	8e e6       	ldi	r24, 0x6E	; 110
    362c:	95 e0       	ldi	r25, 0x05	; 5
    362e:	59 cf       	rjmp	.-334    	; 0x34e2 <_upload_message_rc>
    3630:	08 95       	ret
    3632:	89 e0       	ldi	r24, 0x09	; 9
    3634:	08 95       	ret

00003636 <lora_driver_set_application_key>:
    3636:	fc 01       	movw	r30, r24
    3638:	01 90       	ld	r0, Z+
    363a:	00 20       	and	r0, r0
    363c:	e9 f7       	brne	.-6      	; 0x3638 <lora_driver_set_application_key+0x2>
    363e:	9f 01       	movw	r18, r30
    3640:	21 52       	subi	r18, 0x21	; 33
    3642:	31 09       	sbc	r19, r1
    3644:	28 17       	cp	r18, r24
    3646:	39 07       	cpc	r19, r25
    3648:	29 f4       	brne	.+10     	; 0x3654 <lora_driver_set_application_key+0x1e>
    364a:	bc 01       	movw	r22, r24
    364c:	8d e7       	ldi	r24, 0x7D	; 125
    364e:	95 e0       	ldi	r25, 0x05	; 5
    3650:	48 cf       	rjmp	.-368    	; 0x34e2 <_upload_message_rc>
    3652:	08 95       	ret
    3654:	89 e0       	ldi	r24, 0x09	; 9
    3656:	08 95       	ret

00003658 <lora_driver_save_mac>:
    3658:	60 e0       	ldi	r22, 0x00	; 0
    365a:	70 e0       	ldi	r23, 0x00	; 0
    365c:	8c eb       	ldi	r24, 0xBC	; 188
    365e:	95 e0       	ldi	r25, 0x05	; 5
    3660:	40 cf       	rjmp	.-384    	; 0x34e2 <_upload_message_rc>
    3662:	08 95       	ret

00003664 <lora_driver_join>:
    3664:	e8 2f       	mov	r30, r24
    3666:	f0 e0       	ldi	r31, 0x00	; 0
    3668:	ee 0f       	add	r30, r30
    366a:	ff 1f       	adc	r31, r31
    366c:	e7 56       	subi	r30, 0x67	; 103
    366e:	f8 4f       	sbci	r31, 0xF8	; 248
    3670:	60 81       	ld	r22, Z
    3672:	71 81       	ldd	r23, Z+1	; 0x01
    3674:	85 ec       	ldi	r24, 0xC5	; 197
    3676:	95 e0       	ldi	r25, 0x05	; 5
    3678:	34 df       	rcall	.-408    	; 0x34e2 <_upload_message_rc>
    367a:	81 11       	cpse	r24, r1
    367c:	12 c0       	rjmp	.+36     	; 0x36a2 <lora_driver_join+0x3e>
    367e:	28 e2       	ldi	r18, 0x28	; 40
    3680:	35 e0       	ldi	r19, 0x05	; 5
    3682:	4d e2       	ldi	r20, 0x2D	; 45
    3684:	50 e0       	ldi	r21, 0x00	; 0
    3686:	6f e6       	ldi	r22, 0x6F	; 111
    3688:	79 e0       	ldi	r23, 0x09	; 9
    368a:	80 91 e6 08 	lds	r24, 0x08E6	; 0x8008e6 <_reply_buffer_handle>
    368e:	90 91 e7 08 	lds	r25, 0x08E7	; 0x8008e7 <_reply_buffer_handle+0x1>
    3692:	0e 94 34 0b 	call	0x1668	; 0x1668 <xStreamBufferReceive>
    3696:	88 23       	and	r24, r24
    3698:	21 f0       	breq	.+8      	; 0x36a2 <lora_driver_join+0x3e>
    369a:	8f e6       	ldi	r24, 0x6F	; 111
    369c:	99 e0       	ldi	r25, 0x09	; 9
    369e:	e6 ce       	rjmp	.-564    	; 0x346c <_reply2return_code>
    36a0:	08 95       	ret
    36a2:	8f e6       	ldi	r24, 0x6F	; 111
    36a4:	99 e0       	ldi	r25, 0x09	; 9
    36a6:	e2 ce       	rjmp	.-572    	; 0x346c <_reply2return_code>
    36a8:	08 95       	ret

000036aa <lora_driver_sent_upload_message>:
    36aa:	cf 93       	push	r28
    36ac:	df 93       	push	r29
    36ae:	1f 92       	push	r1
    36b0:	cd b7       	in	r28, 0x3d	; 61
    36b2:	de b7       	in	r29, 0x3e	; 62
    36b4:	db 01       	movw	r26, r22
    36b6:	11 96       	adiw	r26, 0x01	; 1
    36b8:	9c 91       	ld	r25, X
    36ba:	11 97       	sbiw	r26, 0x01	; 1
    36bc:	95 31       	cpi	r25, 0x15	; 21
    36be:	08 f0       	brcs	.+2      	; 0x36c2 <lora_driver_sent_upload_message+0x18>
    36c0:	87 c0       	rjmp	.+270    	; 0x37d0 <lora_driver_sent_upload_message+0x126>
    36c2:	99 23       	and	r25, r25
    36c4:	81 f1       	breq	.+96     	; 0x3726 <lora_driver_sent_upload_message+0x7c>
    36c6:	60 e0       	ldi	r22, 0x00	; 0
    36c8:	70 e0       	ldi	r23, 0x00	; 0
    36ca:	27 2f       	mov	r18, r23
    36cc:	30 e0       	ldi	r19, 0x00	; 0
    36ce:	46 2f       	mov	r20, r22
    36d0:	50 e0       	ldi	r21, 0x00	; 0
    36d2:	fd 01       	movw	r30, r26
    36d4:	e4 0f       	add	r30, r20
    36d6:	f5 1f       	adc	r31, r21
    36d8:	92 81       	ldd	r25, Z+2	; 0x02
    36da:	92 95       	swap	r25
    36dc:	9f 70       	andi	r25, 0x0F	; 15
    36de:	9a 30       	cpi	r25, 0x0A	; 10
    36e0:	10 f0       	brcs	.+4      	; 0x36e6 <lora_driver_sent_upload_message+0x3c>
    36e2:	99 5c       	subi	r25, 0xC9	; 201
    36e4:	01 c0       	rjmp	.+2      	; 0x36e8 <lora_driver_sent_upload_message+0x3e>
    36e6:	90 5d       	subi	r25, 0xD0	; 208
    36e8:	f9 01       	movw	r30, r18
    36ea:	e0 50       	subi	r30, 0x00	; 0
    36ec:	f7 4f       	sbci	r31, 0xF7	; 247
    36ee:	90 83       	st	Z, r25
    36f0:	2f 5f       	subi	r18, 0xFF	; 255
    36f2:	3f 4f       	sbci	r19, 0xFF	; 255
    36f4:	fd 01       	movw	r30, r26
    36f6:	e4 0f       	add	r30, r20
    36f8:	f5 1f       	adc	r31, r21
    36fa:	92 81       	ldd	r25, Z+2	; 0x02
    36fc:	9f 70       	andi	r25, 0x0F	; 15
    36fe:	49 2f       	mov	r20, r25
    3700:	50 e0       	ldi	r21, 0x00	; 0
    3702:	4a 30       	cpi	r20, 0x0A	; 10
    3704:	51 05       	cpc	r21, r1
    3706:	14 f0       	brlt	.+4      	; 0x370c <lora_driver_sent_upload_message+0x62>
    3708:	99 5c       	subi	r25, 0xC9	; 201
    370a:	01 c0       	rjmp	.+2      	; 0x370e <lora_driver_sent_upload_message+0x64>
    370c:	90 5d       	subi	r25, 0xD0	; 208
    370e:	f9 01       	movw	r30, r18
    3710:	e0 50       	subi	r30, 0x00	; 0
    3712:	f7 4f       	sbci	r31, 0xF7	; 247
    3714:	90 83       	st	Z, r25
    3716:	7e 5f       	subi	r23, 0xFE	; 254
    3718:	6f 5f       	subi	r22, 0xFF	; 255
    371a:	11 96       	adiw	r26, 0x01	; 1
    371c:	9c 91       	ld	r25, X
    371e:	11 97       	sbiw	r26, 0x01	; 1
    3720:	69 17       	cp	r22, r25
    3722:	98 f2       	brcs	.-90     	; 0x36ca <lora_driver_sent_upload_message+0x20>
    3724:	01 c0       	rjmp	.+2      	; 0x3728 <lora_driver_sent_upload_message+0x7e>
    3726:	70 e0       	ldi	r23, 0x00	; 0
    3728:	e7 2f       	mov	r30, r23
    372a:	f0 e0       	ldi	r31, 0x00	; 0
    372c:	e0 50       	subi	r30, 0x00	; 0
    372e:	f7 4f       	sbci	r31, 0xF7	; 247
    3730:	10 82       	st	Z, r1
    3732:	4c 91       	ld	r20, X
    3734:	81 11       	cpse	r24, r1
    3736:	03 c0       	rjmp	.+6      	; 0x373e <lora_driver_sent_upload_message+0x94>
    3738:	8e ec       	ldi	r24, 0xCE	; 206
    373a:	95 e0       	ldi	r25, 0x05	; 5
    373c:	02 c0       	rjmp	.+4      	; 0x3742 <lora_driver_sent_upload_message+0x98>
    373e:	80 ed       	ldi	r24, 0xD0	; 208
    3740:	95 e0       	ldi	r25, 0x05	; 5
    3742:	20 e0       	ldi	r18, 0x00	; 0
    3744:	39 e0       	ldi	r19, 0x09	; 9
    3746:	3f 93       	push	r19
    3748:	2f 93       	push	r18
    374a:	1f 92       	push	r1
    374c:	4f 93       	push	r20
    374e:	9f 93       	push	r25
    3750:	8f 93       	push	r24
    3752:	84 ed       	ldi	r24, 0xD4	; 212
    3754:	95 e0       	ldi	r25, 0x05	; 5
    3756:	9f 93       	push	r25
    3758:	8f 93       	push	r24
    375a:	82 e4       	ldi	r24, 0x42	; 66
    375c:	99 e0       	ldi	r25, 0x09	; 9
    375e:	9f 93       	push	r25
    3760:	8f 93       	push	r24
    3762:	0e 94 56 25 	call	0x4aac	; 0x4aac <sprintf>
    3766:	60 e0       	ldi	r22, 0x00	; 0
    3768:	70 e0       	ldi	r23, 0x00	; 0
    376a:	82 e4       	ldi	r24, 0x42	; 66
    376c:	99 e0       	ldi	r25, 0x09	; 9
    376e:	b9 de       	rcall	.-654    	; 0x34e2 <_upload_message_rc>
    3770:	0f b6       	in	r0, 0x3f	; 63
    3772:	f8 94       	cli
    3774:	de bf       	out	0x3e, r29	; 62
    3776:	0f be       	out	0x3f, r0	; 63
    3778:	cd bf       	out	0x3d, r28	; 61
    377a:	8e 30       	cpi	r24, 0x0E	; 14
    377c:	51 f5       	brne	.+84     	; 0x37d2 <lora_driver_sent_upload_message+0x128>
    377e:	87 e0       	ldi	r24, 0x07	; 7
    3780:	89 83       	std	Y+1, r24	; 0x01
    3782:	be 01       	movw	r22, r28
    3784:	6f 5f       	subi	r22, 0xFF	; 255
    3786:	7f 4f       	sbci	r23, 0xFF	; 255
    3788:	8f e6       	ldi	r24, 0x6F	; 111
    378a:	99 e0       	ldi	r25, 0x09	; 9
    378c:	51 d1       	rcall	.+674    	; 0x3a30 <decode_port_no>
    378e:	80 93 ea 08 	sts	0x08EA, r24	; 0x8008ea <_downlink_payload>
    3792:	e9 81       	ldd	r30, Y+1	; 0x01
    3794:	f0 e0       	ldi	r31, 0x00	; 0
    3796:	e1 59       	subi	r30, 0x91	; 145
    3798:	f6 4f       	sbci	r31, 0xF6	; 246
    379a:	df 01       	movw	r26, r30
    379c:	0d 90       	ld	r0, X+
    379e:	00 20       	and	r0, r0
    37a0:	e9 f7       	brne	.-6      	; 0x379c <lora_driver_sent_upload_message+0xf2>
    37a2:	11 97       	sbiw	r26, 0x01	; 1
    37a4:	ae 1b       	sub	r26, r30
    37a6:	bf 0b       	sbc	r27, r31
    37a8:	aa 23       	and	r26, r26
    37aa:	81 f0       	breq	.+32     	; 0x37cc <lora_driver_sent_upload_message+0x122>
    37ac:	bb 27       	eor	r27, r27
    37ae:	11 97       	sbiw	r26, 0x01	; 1
    37b0:	cd 01       	movw	r24, r26
    37b2:	0a f4       	brpl	.+2      	; 0x37b6 <lora_driver_sent_upload_message+0x10c>
    37b4:	01 96       	adiw	r24, 0x01	; 1
    37b6:	95 95       	asr	r25
    37b8:	87 95       	ror	r24
    37ba:	80 93 eb 08 	sts	0x08EB, r24	; 0x8008eb <_downlink_payload+0x1>
    37be:	af 01       	movw	r20, r30
    37c0:	4f 5f       	subi	r20, 0xFF	; 255
    37c2:	5f 4f       	sbci	r21, 0xFF	; 255
    37c4:	64 e1       	ldi	r22, 0x14	; 20
    37c6:	8c ee       	ldi	r24, 0xEC	; 236
    37c8:	98 e0       	ldi	r25, 0x08	; 8
    37ca:	5e d1       	rcall	.+700    	; 0x3a88 <decode_hexadecimal_string_bytes>
    37cc:	8e e0       	ldi	r24, 0x0E	; 14
    37ce:	01 c0       	rjmp	.+2      	; 0x37d2 <lora_driver_sent_upload_message+0x128>
    37d0:	84 e1       	ldi	r24, 0x14	; 20
    37d2:	0f 90       	pop	r0
    37d4:	df 91       	pop	r29
    37d6:	cf 91       	pop	r28
    37d8:	08 95       	ret

000037da <lora_driver_set_adaptive_data_rate>:
    37da:	81 30       	cpi	r24, 0x01	; 1
    37dc:	19 f0       	breq	.+6      	; 0x37e4 <lora_driver_set_adaptive_data_rate+0xa>
    37de:	64 ee       	ldi	r22, 0xE4	; 228
    37e0:	75 e0       	ldi	r23, 0x05	; 5
    37e2:	02 c0       	rjmp	.+4      	; 0x37e8 <lora_driver_set_adaptive_data_rate+0xe>
    37e4:	6d eb       	ldi	r22, 0xBD	; 189
    37e6:	76 e0       	ldi	r23, 0x06	; 6
    37e8:	88 ee       	ldi	r24, 0xE8	; 232
    37ea:	95 e0       	ldi	r25, 0x05	; 5
    37ec:	7a ce       	rjmp	.-780    	; 0x34e2 <_upload_message_rc>
    37ee:	08 95       	ret

000037f0 <lora_driver_set_data_rate>:
    37f0:	88 30       	cpi	r24, 0x08	; 8
    37f2:	c0 f4       	brcc	.+48     	; 0x3824 <lora_driver_set_data_rate+0x34>
    37f4:	1f 92       	push	r1
    37f6:	8f 93       	push	r24
    37f8:	80 e0       	ldi	r24, 0x00	; 0
    37fa:	96 e0       	ldi	r25, 0x06	; 6
    37fc:	9f 93       	push	r25
    37fe:	8f 93       	push	r24
    3800:	82 e4       	ldi	r24, 0x42	; 66
    3802:	99 e0       	ldi	r25, 0x09	; 9
    3804:	9f 93       	push	r25
    3806:	8f 93       	push	r24
    3808:	0e 94 56 25 	call	0x4aac	; 0x4aac <sprintf>
    380c:	60 e0       	ldi	r22, 0x00	; 0
    380e:	70 e0       	ldi	r23, 0x00	; 0
    3810:	82 e4       	ldi	r24, 0x42	; 66
    3812:	99 e0       	ldi	r25, 0x09	; 9
    3814:	66 de       	rcall	.-820    	; 0x34e2 <_upload_message_rc>
    3816:	0f 90       	pop	r0
    3818:	0f 90       	pop	r0
    381a:	0f 90       	pop	r0
    381c:	0f 90       	pop	r0
    381e:	0f 90       	pop	r0
    3820:	0f 90       	pop	r0
    3822:	08 95       	ret
    3824:	89 e0       	ldi	r24, 0x09	; 9
    3826:	08 95       	ret

00003828 <lora_driver_configure_to_eu868>:
    3828:	2f 92       	push	r2
    382a:	3f 92       	push	r3
    382c:	4f 92       	push	r4
    382e:	5f 92       	push	r5
    3830:	6f 92       	push	r6
    3832:	7f 92       	push	r7
    3834:	8f 92       	push	r8
    3836:	9f 92       	push	r9
    3838:	af 92       	push	r10
    383a:	bf 92       	push	r11
    383c:	cf 92       	push	r12
    383e:	df 92       	push	r13
    3840:	ef 92       	push	r14
    3842:	ff 92       	push	r15
    3844:	0f 93       	push	r16
    3846:	1f 93       	push	r17
    3848:	cf 93       	push	r28
    384a:	df 93       	push	r29
    384c:	6d e2       	ldi	r22, 0x2D	; 45
    384e:	76 e0       	ldi	r23, 0x06	; 6
    3850:	89 e3       	ldi	r24, 0x39	; 57
    3852:	96 e0       	ldi	r25, 0x06	; 6
    3854:	b3 dd       	rcall	.-1178   	; 0x33bc <_upload_message>
    3856:	0a de       	rcall	.-1004   	; 0x346c <_reply2return_code>
    3858:	81 11       	cpse	r24, r1
    385a:	a6 c0       	rjmp	.+332    	; 0x39a8 <lora_driver_configure_to_eu868+0x180>
    385c:	65 e4       	ldi	r22, 0x45	; 69
    385e:	76 e0       	ldi	r23, 0x06	; 6
    3860:	8b e4       	ldi	r24, 0x4B	; 75
    3862:	96 e0       	ldi	r25, 0x06	; 6
    3864:	ab dd       	rcall	.-1194   	; 0x33bc <_upload_message>
    3866:	02 de       	rcall	.-1020   	; 0x346c <_reply2return_code>
    3868:	81 11       	cpse	r24, r1
    386a:	9e c0       	rjmp	.+316    	; 0x39a8 <lora_driver_configure_to_eu868+0x180>
    386c:	c0 e0       	ldi	r28, 0x00	; 0
    386e:	d0 e0       	ldi	r29, 0x00	; 0
    3870:	0f 2e       	mov	r0, r31
    3872:	f0 e6       	ldi	r31, 0x60	; 96
    3874:	8f 2e       	mov	r8, r31
    3876:	f5 ee       	ldi	r31, 0xE5	; 229
    3878:	9f 2e       	mov	r9, r31
    387a:	fe ea       	ldi	r31, 0xAE	; 174
    387c:	af 2e       	mov	r10, r31
    387e:	f3 e3       	ldi	r31, 0x33	; 51
    3880:	bf 2e       	mov	r11, r31
    3882:	f0 2d       	mov	r31, r0
    3884:	0f 2e       	mov	r0, r31
    3886:	fe e5       	ldi	r31, 0x5E	; 94
    3888:	ef 2e       	mov	r14, r31
    388a:	f6 e0       	ldi	r31, 0x06	; 6
    388c:	ff 2e       	mov	r15, r31
    388e:	f0 2d       	mov	r31, r0
    3890:	02 e4       	ldi	r16, 0x42	; 66
    3892:	19 e0       	ldi	r17, 0x09	; 9
    3894:	0f 2e       	mov	r0, r31
    3896:	f7 e7       	ldi	r31, 0x77	; 119
    3898:	cf 2e       	mov	r12, r31
    389a:	f6 e0       	ldi	r31, 0x06	; 6
    389c:	df 2e       	mov	r13, r31
    389e:	f0 2d       	mov	r31, r0
    38a0:	0f 2e       	mov	r0, r31
    38a2:	fe e8       	ldi	r31, 0x8E	; 142
    38a4:	6f 2e       	mov	r6, r31
    38a6:	f6 e0       	ldi	r31, 0x06	; 6
    38a8:	7f 2e       	mov	r7, r31
    38aa:	f0 2d       	mov	r31, r0
    38ac:	0f 2e       	mov	r0, r31
    38ae:	f8 ea       	ldi	r31, 0xA8	; 168
    38b0:	4f 2e       	mov	r4, r31
    38b2:	f6 e0       	ldi	r31, 0x06	; 6
    38b4:	5f 2e       	mov	r5, r31
    38b6:	f0 2d       	mov	r31, r0
    38b8:	df 93       	push	r29
    38ba:	cf 93       	push	r28
    38bc:	ff 92       	push	r15
    38be:	ef 92       	push	r14
    38c0:	1f 93       	push	r17
    38c2:	0f 93       	push	r16
    38c4:	0e 94 56 25 	call	0x4aac	; 0x4aac <sprintf>
    38c8:	60 e0       	ldi	r22, 0x00	; 0
    38ca:	70 e0       	ldi	r23, 0x00	; 0
    38cc:	c8 01       	movw	r24, r16
    38ce:	76 dd       	rcall	.-1300   	; 0x33bc <_upload_message>
    38d0:	cd dd       	rcall	.-1126   	; 0x346c <_reply2return_code>
    38d2:	0f 90       	pop	r0
    38d4:	0f 90       	pop	r0
    38d6:	0f 90       	pop	r0
    38d8:	0f 90       	pop	r0
    38da:	0f 90       	pop	r0
    38dc:	0f 90       	pop	r0
    38de:	81 11       	cpse	r24, r1
    38e0:	63 c0       	rjmp	.+198    	; 0x39a8 <lora_driver_configure_to_eu868+0x180>
    38e2:	c3 30       	cpi	r28, 0x03	; 3
    38e4:	08 f4       	brcc	.+2      	; 0x38e8 <lora_driver_configure_to_eu868+0xc0>
    38e6:	4d c0       	rjmp	.+154    	; 0x3982 <lora_driver_configure_to_eu868+0x15a>
    38e8:	bf 92       	push	r11
    38ea:	af 92       	push	r10
    38ec:	9f 92       	push	r9
    38ee:	8f 92       	push	r8
    38f0:	df 93       	push	r29
    38f2:	cf 93       	push	r28
    38f4:	df 92       	push	r13
    38f6:	cf 92       	push	r12
    38f8:	1f 93       	push	r17
    38fa:	0f 93       	push	r16
    38fc:	0e 94 56 25 	call	0x4aac	; 0x4aac <sprintf>
    3900:	60 e0       	ldi	r22, 0x00	; 0
    3902:	70 e0       	ldi	r23, 0x00	; 0
    3904:	c8 01       	movw	r24, r16
    3906:	5a dd       	rcall	.-1356   	; 0x33bc <_upload_message>
    3908:	b1 dd       	rcall	.-1182   	; 0x346c <_reply2return_code>
    390a:	2d b7       	in	r18, 0x3d	; 61
    390c:	3e b7       	in	r19, 0x3e	; 62
    390e:	26 5f       	subi	r18, 0xF6	; 246
    3910:	3f 4f       	sbci	r19, 0xFF	; 255
    3912:	0f b6       	in	r0, 0x3f	; 63
    3914:	f8 94       	cli
    3916:	3e bf       	out	0x3e, r19	; 62
    3918:	0f be       	out	0x3f, r0	; 63
    391a:	2d bf       	out	0x3d, r18	; 61
    391c:	81 11       	cpse	r24, r1
    391e:	44 c0       	rjmp	.+136    	; 0x39a8 <lora_driver_configure_to_eu868+0x180>
    3920:	df 93       	push	r29
    3922:	cf 93       	push	r28
    3924:	7f 92       	push	r7
    3926:	6f 92       	push	r6
    3928:	1f 93       	push	r17
    392a:	0f 93       	push	r16
    392c:	0e 94 56 25 	call	0x4aac	; 0x4aac <sprintf>
    3930:	60 e0       	ldi	r22, 0x00	; 0
    3932:	70 e0       	ldi	r23, 0x00	; 0
    3934:	c8 01       	movw	r24, r16
    3936:	42 dd       	rcall	.-1404   	; 0x33bc <_upload_message>
    3938:	99 dd       	rcall	.-1230   	; 0x346c <_reply2return_code>
    393a:	0f 90       	pop	r0
    393c:	0f 90       	pop	r0
    393e:	0f 90       	pop	r0
    3940:	0f 90       	pop	r0
    3942:	0f 90       	pop	r0
    3944:	0f 90       	pop	r0
    3946:	81 11       	cpse	r24, r1
    3948:	2f c0       	rjmp	.+94     	; 0x39a8 <lora_driver_configure_to_eu868+0x180>
    394a:	df 93       	push	r29
    394c:	cf 93       	push	r28
    394e:	5f 92       	push	r5
    3950:	4f 92       	push	r4
    3952:	1f 93       	push	r17
    3954:	0f 93       	push	r16
    3956:	0e 94 56 25 	call	0x4aac	; 0x4aac <sprintf>
    395a:	60 e0       	ldi	r22, 0x00	; 0
    395c:	70 e0       	ldi	r23, 0x00	; 0
    395e:	c8 01       	movw	r24, r16
    3960:	2d dd       	rcall	.-1446   	; 0x33bc <_upload_message>
    3962:	84 dd       	rcall	.-1272   	; 0x346c <_reply2return_code>
    3964:	0f 90       	pop	r0
    3966:	0f 90       	pop	r0
    3968:	0f 90       	pop	r0
    396a:	0f 90       	pop	r0
    396c:	0f 90       	pop	r0
    396e:	0f 90       	pop	r0
    3970:	81 11       	cpse	r24, r1
    3972:	1a c0       	rjmp	.+52     	; 0x39a8 <lora_driver_configure_to_eu868+0x180>
    3974:	30 e4       	ldi	r19, 0x40	; 64
    3976:	83 0e       	add	r8, r19
    3978:	3d e0       	ldi	r19, 0x0D	; 13
    397a:	93 1e       	adc	r9, r19
    397c:	33 e0       	ldi	r19, 0x03	; 3
    397e:	a3 1e       	adc	r10, r19
    3980:	b1 1c       	adc	r11, r1
    3982:	21 96       	adiw	r28, 0x01	; 1
    3984:	c8 30       	cpi	r28, 0x08	; 8
    3986:	d1 05       	cpc	r29, r1
    3988:	09 f0       	breq	.+2      	; 0x398c <lora_driver_configure_to_eu868+0x164>
    398a:	96 cf       	rjmp	.-212    	; 0x38b8 <lora_driver_configure_to_eu868+0x90>
    398c:	60 e0       	ldi	r22, 0x00	; 0
    398e:	70 e0       	ldi	r23, 0x00	; 0
    3990:	80 ec       	ldi	r24, 0xC0	; 192
    3992:	96 e0       	ldi	r25, 0x06	; 6
    3994:	13 dd       	rcall	.-1498   	; 0x33bc <_upload_message>
    3996:	6a dd       	rcall	.-1324   	; 0x346c <_reply2return_code>
    3998:	81 11       	cpse	r24, r1
    399a:	06 c0       	rjmp	.+12     	; 0x39a8 <lora_driver_configure_to_eu868+0x180>
    399c:	60 e0       	ldi	r22, 0x00	; 0
    399e:	70 e0       	ldi	r23, 0x00	; 0
    39a0:	81 ed       	ldi	r24, 0xD1	; 209
    39a2:	96 e0       	ldi	r25, 0x06	; 6
    39a4:	0b dd       	rcall	.-1514   	; 0x33bc <_upload_message>
    39a6:	62 dd       	rcall	.-1340   	; 0x346c <_reply2return_code>
    39a8:	df 91       	pop	r29
    39aa:	cf 91       	pop	r28
    39ac:	1f 91       	pop	r17
    39ae:	0f 91       	pop	r16
    39b0:	ff 90       	pop	r15
    39b2:	ef 90       	pop	r14
    39b4:	df 90       	pop	r13
    39b6:	cf 90       	pop	r12
    39b8:	bf 90       	pop	r11
    39ba:	af 90       	pop	r10
    39bc:	9f 90       	pop	r9
    39be:	8f 90       	pop	r8
    39c0:	7f 90       	pop	r7
    39c2:	6f 90       	pop	r6
    39c4:	5f 90       	pop	r5
    39c6:	4f 90       	pop	r4
    39c8:	3f 90       	pop	r3
    39ca:	2f 90       	pop	r2
    39cc:	08 95       	ret

000039ce <lora_driver_set_otaa_identity>:
    39ce:	ef 92       	push	r14
    39d0:	ff 92       	push	r15
    39d2:	0f 93       	push	r16
    39d4:	1f 93       	push	r17
    39d6:	cf 93       	push	r28
    39d8:	df 93       	push	r29
    39da:	ec 01       	movw	r28, r24
    39dc:	8b 01       	movw	r16, r22
    39de:	7a 01       	movw	r14, r20
    39e0:	81 e0       	ldi	r24, 0x01	; 1
    39e2:	fb de       	rcall	.-522    	; 0x37da <lora_driver_set_adaptive_data_rate>
    39e4:	81 11       	cpse	r24, r1
    39e6:	11 c0       	rjmp	.+34     	; 0x3a0a <lora_driver_set_otaa_identity+0x3c>
    39e8:	ce 01       	movw	r24, r28
    39ea:	14 de       	rcall	.-984    	; 0x3614 <lora_driver_set_application_identifier>
    39ec:	81 11       	cpse	r24, r1
    39ee:	0d c0       	rjmp	.+26     	; 0x3a0a <lora_driver_set_otaa_identity+0x3c>
    39f0:	c8 01       	movw	r24, r16
    39f2:	21 de       	rcall	.-958    	; 0x3636 <lora_driver_set_application_key>
    39f4:	81 11       	cpse	r24, r1
    39f6:	09 c0       	rjmp	.+18     	; 0x3a0a <lora_driver_set_otaa_identity+0x3c>
    39f8:	c7 01       	movw	r24, r14
    39fa:	fb dd       	rcall	.-1034   	; 0x35f2 <lora_driver_set_device_identifier>
    39fc:	81 11       	cpse	r24, r1
    39fe:	05 c0       	rjmp	.+10     	; 0x3a0a <lora_driver_set_otaa_identity+0x3c>
    3a00:	85 e0       	ldi	r24, 0x05	; 5
    3a02:	f6 de       	rcall	.-532    	; 0x37f0 <lora_driver_set_data_rate>
    3a04:	81 11       	cpse	r24, r1
    3a06:	01 c0       	rjmp	.+2      	; 0x3a0a <lora_driver_set_otaa_identity+0x3c>
    3a08:	27 de       	rcall	.-946    	; 0x3658 <lora_driver_save_mac>
    3a0a:	df 91       	pop	r29
    3a0c:	cf 91       	pop	r28
    3a0e:	1f 91       	pop	r17
    3a10:	0f 91       	pop	r16
    3a12:	ff 90       	pop	r15
    3a14:	ef 90       	pop	r14
    3a16:	08 95       	ret

00003a18 <lora_driver_map_return_code_to_text>:
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	fc 01       	movw	r30, r24
    3a1c:	ee 0f       	add	r30, r30
    3a1e:	ff 1f       	adc	r31, r31
    3a20:	8e 0f       	add	r24, r30
    3a22:	9f 1f       	adc	r25, r31
    3a24:	fc 01       	movw	r30, r24
    3a26:	e3 56       	subi	r30, 0x63	; 99
    3a28:	f8 4f       	sbci	r31, 0xF8	; 248
    3a2a:	81 81       	ldd	r24, Z+1	; 0x01
    3a2c:	92 81       	ldd	r25, Z+2	; 0x02
    3a2e:	08 95       	ret

00003a30 <decode_port_no>:
    3a30:	dc 01       	movw	r26, r24
    3a32:	00 97       	sbiw	r24, 0x00	; 0
    3a34:	29 f1       	breq	.+74     	; 0x3a80 <decode_port_no+0x50>
    3a36:	fb 01       	movw	r30, r22
    3a38:	20 81       	ld	r18, Z
    3a3a:	fc 01       	movw	r30, r24
    3a3c:	01 90       	ld	r0, Z+
    3a3e:	00 20       	and	r0, r0
    3a40:	e9 f7       	brne	.-6      	; 0x3a3c <decode_port_no+0xc>
    3a42:	31 97       	sbiw	r30, 0x01	; 1
    3a44:	e8 1b       	sub	r30, r24
    3a46:	f9 0b       	sbc	r31, r25
    3a48:	82 2f       	mov	r24, r18
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	e8 17       	cp	r30, r24
    3a4e:	f9 07       	cpc	r31, r25
    3a50:	c8 f0       	brcs	.+50     	; 0x3a84 <decode_port_no+0x54>
    3a52:	80 e0       	ldi	r24, 0x00	; 0
    3a54:	08 c0       	rjmp	.+16     	; 0x3a66 <decode_port_no+0x36>
    3a56:	88 0f       	add	r24, r24
    3a58:	38 2f       	mov	r19, r24
    3a5a:	33 0f       	add	r19, r19
    3a5c:	33 0f       	add	r19, r19
    3a5e:	83 0f       	add	r24, r19
    3a60:	80 53       	subi	r24, 0x30	; 48
    3a62:	89 0f       	add	r24, r25
    3a64:	2f 5f       	subi	r18, 0xFF	; 255
    3a66:	fd 01       	movw	r30, r26
    3a68:	e2 0f       	add	r30, r18
    3a6a:	f1 1d       	adc	r31, r1
    3a6c:	90 81       	ld	r25, Z
    3a6e:	30 ed       	ldi	r19, 0xD0	; 208
    3a70:	39 0f       	add	r19, r25
    3a72:	3a 30       	cpi	r19, 0x0A	; 10
    3a74:	10 f4       	brcc	.+4      	; 0x3a7a <decode_port_no+0x4a>
    3a76:	91 11       	cpse	r25, r1
    3a78:	ee cf       	rjmp	.-36     	; 0x3a56 <decode_port_no+0x26>
    3a7a:	fb 01       	movw	r30, r22
    3a7c:	20 83       	st	Z, r18
    3a7e:	08 95       	ret
    3a80:	80 e0       	ldi	r24, 0x00	; 0
    3a82:	08 95       	ret
    3a84:	80 e0       	ldi	r24, 0x00	; 0
    3a86:	08 95       	ret

00003a88 <decode_hexadecimal_string_bytes>:
    3a88:	0f 93       	push	r16
    3a8a:	1f 93       	push	r17
    3a8c:	cf 93       	push	r28
    3a8e:	df 93       	push	r29
    3a90:	dc 01       	movw	r26, r24
    3a92:	ea 01       	movw	r28, r20
    3a94:	20 97       	sbiw	r28, 0x00	; 0
    3a96:	e1 f1       	breq	.+120    	; 0x3b10 <decode_hexadecimal_string_bytes+0x88>
    3a98:	fa 01       	movw	r30, r20
    3a9a:	01 90       	ld	r0, Z+
    3a9c:	00 20       	and	r0, r0
    3a9e:	e9 f7       	brne	.-6      	; 0x3a9a <decode_hexadecimal_string_bytes+0x12>
    3aa0:	31 97       	sbiw	r30, 0x01	; 1
    3aa2:	e4 1b       	sub	r30, r20
    3aa4:	f5 0b       	sbc	r31, r21
    3aa6:	32 97       	sbiw	r30, 0x02	; 2
    3aa8:	10 f5       	brcc	.+68     	; 0x3aee <decode_hexadecimal_string_bytes+0x66>
    3aaa:	32 c0       	rjmp	.+100    	; 0x3b10 <decode_hexadecimal_string_bytes+0x88>
    3aac:	8d 01       	movw	r16, r26
    3aae:	04 0f       	add	r16, r20
    3ab0:	15 1f       	adc	r17, r21
    3ab2:	30 e0       	ldi	r19, 0x00	; 0
    3ab4:	ae 01       	movw	r20, r28
    3ab6:	42 0f       	add	r20, r18
    3ab8:	53 1f       	adc	r21, r19
    3aba:	fa 01       	movw	r30, r20
    3abc:	90 81       	ld	r25, Z
    3abe:	91 34       	cpi	r25, 0x41	; 65
    3ac0:	28 f0       	brcs	.+10     	; 0x3acc <decode_hexadecimal_string_bytes+0x44>
    3ac2:	97 53       	subi	r25, 0x37	; 55
    3ac4:	59 2f       	mov	r21, r25
    3ac6:	52 95       	swap	r21
    3ac8:	50 7f       	andi	r21, 0xF0	; 240
    3aca:	03 c0       	rjmp	.+6      	; 0x3ad2 <decode_hexadecimal_string_bytes+0x4a>
    3acc:	59 2f       	mov	r21, r25
    3ace:	52 95       	swap	r21
    3ad0:	50 7f       	andi	r21, 0xF0	; 240
    3ad2:	2c 0f       	add	r18, r28
    3ad4:	3d 1f       	adc	r19, r29
    3ad6:	f9 01       	movw	r30, r18
    3ad8:	91 81       	ldd	r25, Z+1	; 0x01
    3ada:	91 34       	cpi	r25, 0x41	; 65
    3adc:	10 f0       	brcs	.+4      	; 0x3ae2 <decode_hexadecimal_string_bytes+0x5a>
    3ade:	97 53       	subi	r25, 0x37	; 55
    3ae0:	01 c0       	rjmp	.+2      	; 0x3ae4 <decode_hexadecimal_string_bytes+0x5c>
    3ae2:	90 53       	subi	r25, 0x30	; 48
    3ae4:	95 0f       	add	r25, r21
    3ae6:	f8 01       	movw	r30, r16
    3ae8:	90 83       	st	Z, r25
    3aea:	8f 5f       	subi	r24, 0xFF	; 255
    3aec:	01 c0       	rjmp	.+2      	; 0x3af0 <decode_hexadecimal_string_bytes+0x68>
    3aee:	80 e0       	ldi	r24, 0x00	; 0
    3af0:	28 2f       	mov	r18, r24
    3af2:	22 0f       	add	r18, r18
    3af4:	48 2f       	mov	r20, r24
    3af6:	50 e0       	ldi	r21, 0x00	; 0
    3af8:	fe 01       	movw	r30, r28
    3afa:	01 90       	ld	r0, Z+
    3afc:	00 20       	and	r0, r0
    3afe:	e9 f7       	brne	.-6      	; 0x3afa <decode_hexadecimal_string_bytes+0x72>
    3b00:	31 97       	sbiw	r30, 0x01	; 1
    3b02:	ec 1b       	sub	r30, r28
    3b04:	fd 0b       	sbc	r31, r29
    3b06:	4e 17       	cp	r20, r30
    3b08:	5f 07       	cpc	r21, r31
    3b0a:	10 f4       	brcc	.+4      	; 0x3b10 <decode_hexadecimal_string_bytes+0x88>
    3b0c:	86 13       	cpse	r24, r22
    3b0e:	ce cf       	rjmp	.-100    	; 0x3aac <decode_hexadecimal_string_bytes+0x24>
    3b10:	df 91       	pop	r29
    3b12:	cf 91       	pop	r28
    3b14:	1f 91       	pop	r17
    3b16:	0f 91       	pop	r16
    3b18:	08 95       	ret

00003b1a <reg_read_register>:
    3b1a:	fc 01       	movw	r30, r24
    3b1c:	80 81       	ld	r24, Z
    3b1e:	08 95       	ret

00003b20 <reg_read_bit>:
    3b20:	fc 01       	movw	r30, r24
    3b22:	20 81       	ld	r18, Z
    3b24:	81 e0       	ldi	r24, 0x01	; 1
    3b26:	90 e0       	ldi	r25, 0x00	; 0
    3b28:	02 c0       	rjmp	.+4      	; 0x3b2e <reg_read_bit+0xe>
    3b2a:	88 0f       	add	r24, r24
    3b2c:	99 1f       	adc	r25, r25
    3b2e:	6a 95       	dec	r22
    3b30:	e2 f7       	brpl	.-8      	; 0x3b2a <reg_read_bit+0xa>
    3b32:	82 23       	and	r24, r18
    3b34:	08 95       	ret

00003b36 <reg_read_bits>:
    3b36:	fc 01       	movw	r30, r24
    3b38:	80 81       	ld	r24, Z
    3b3a:	86 23       	and	r24, r22
    3b3c:	08 95       	ret

00003b3e <reg_set_register>:
    3b3e:	fc 01       	movw	r30, r24
    3b40:	60 83       	st	Z, r22
    3b42:	08 95       	ret

00003b44 <reg_clear_register>:
    3b44:	fc 01       	movw	r30, r24
    3b46:	10 82       	st	Z, r1
    3b48:	08 95       	ret

00003b4a <reg_set_bit>:
    3b4a:	fc 01       	movw	r30, r24
    3b4c:	40 81       	ld	r20, Z
    3b4e:	21 e0       	ldi	r18, 0x01	; 1
    3b50:	30 e0       	ldi	r19, 0x00	; 0
    3b52:	02 c0       	rjmp	.+4      	; 0x3b58 <reg_set_bit+0xe>
    3b54:	22 0f       	add	r18, r18
    3b56:	33 1f       	adc	r19, r19
    3b58:	6a 95       	dec	r22
    3b5a:	e2 f7       	brpl	.-8      	; 0x3b54 <reg_set_bit+0xa>
    3b5c:	24 2b       	or	r18, r20
    3b5e:	20 83       	st	Z, r18
    3b60:	08 95       	ret

00003b62 <reg_set_bits>:
    3b62:	fc 01       	movw	r30, r24
    3b64:	20 81       	ld	r18, Z
    3b66:	62 2b       	or	r22, r18
    3b68:	60 83       	st	Z, r22
    3b6a:	08 95       	ret

00003b6c <reg_toggle_bit>:
    3b6c:	fc 01       	movw	r30, r24
    3b6e:	40 81       	ld	r20, Z
    3b70:	21 e0       	ldi	r18, 0x01	; 1
    3b72:	30 e0       	ldi	r19, 0x00	; 0
    3b74:	02 c0       	rjmp	.+4      	; 0x3b7a <reg_toggle_bit+0xe>
    3b76:	22 0f       	add	r18, r18
    3b78:	33 1f       	adc	r19, r19
    3b7a:	6a 95       	dec	r22
    3b7c:	e2 f7       	brpl	.-8      	; 0x3b76 <reg_toggle_bit+0xa>
    3b7e:	24 27       	eor	r18, r20
    3b80:	20 83       	st	Z, r18
    3b82:	08 95       	ret

00003b84 <reg_toggle_bits>:
    3b84:	fc 01       	movw	r30, r24
    3b86:	20 81       	ld	r18, Z
    3b88:	62 27       	eor	r22, r18
    3b8a:	60 83       	st	Z, r22
    3b8c:	08 95       	ret

00003b8e <reg_clear_bit>:
    3b8e:	fc 01       	movw	r30, r24
    3b90:	90 81       	ld	r25, Z
    3b92:	21 e0       	ldi	r18, 0x01	; 1
    3b94:	30 e0       	ldi	r19, 0x00	; 0
    3b96:	02 c0       	rjmp	.+4      	; 0x3b9c <reg_clear_bit+0xe>
    3b98:	22 0f       	add	r18, r18
    3b9a:	33 1f       	adc	r19, r19
    3b9c:	6a 95       	dec	r22
    3b9e:	e2 f7       	brpl	.-8      	; 0x3b98 <reg_clear_bit+0xa>
    3ba0:	20 95       	com	r18
    3ba2:	29 23       	and	r18, r25
    3ba4:	20 83       	st	Z, r18
    3ba6:	08 95       	ret

00003ba8 <reg_clear_bits>:
    3ba8:	fc 01       	movw	r30, r24
    3baa:	90 81       	ld	r25, Z
    3bac:	60 95       	com	r22
    3bae:	69 23       	and	r22, r25
    3bb0:	60 83       	st	Z, r22
    3bb2:	08 95       	ret

00003bb4 <_serial_call_back>:
    3bb4:	80 91 9f 09 	lds	r24, 0x099F	; 0x80099f <crc_sum.1941>
    3bb8:	86 0f       	add	r24, r22
    3bba:	80 93 9f 09 	sts	0x099F, r24	; 0x80099f <crc_sum.1941>
    3bbe:	90 91 a2 09 	lds	r25, 0x09A2	; 0x8009a2 <_mh_state>
    3bc2:	91 30       	cpi	r25, 0x01	; 1
    3bc4:	79 f0       	breq	.+30     	; 0x3be4 <_serial_call_back+0x30>
    3bc6:	28 f0       	brcs	.+10     	; 0x3bd2 <_serial_call_back+0x1e>
    3bc8:	92 30       	cpi	r25, 0x02	; 2
    3bca:	a9 f0       	breq	.+42     	; 0x3bf6 <_serial_call_back+0x42>
    3bcc:	93 30       	cpi	r25, 0x03	; 3
    3bce:	19 f1       	breq	.+70     	; 0x3c16 <_serial_call_back+0x62>
    3bd0:	08 95       	ret
    3bd2:	6f 3f       	cpi	r22, 0xFF	; 255
    3bd4:	09 f0       	breq	.+2      	; 0x3bd8 <_serial_call_back+0x24>
    3bd6:	48 c0       	rjmp	.+144    	; 0x3c68 <_serial_call_back+0xb4>
    3bd8:	10 92 9f 09 	sts	0x099F, r1	; 0x80099f <crc_sum.1941>
    3bdc:	81 e0       	ldi	r24, 0x01	; 1
    3bde:	80 93 a2 09 	sts	0x09A2, r24	; 0x8009a2 <_mh_state>
    3be2:	08 95       	ret
    3be4:	66 38       	cpi	r22, 0x86	; 134
    3be6:	09 f0       	breq	.+2      	; 0x3bea <_serial_call_back+0x36>
    3be8:	3f c0       	rjmp	.+126    	; 0x3c68 <_serial_call_back+0xb4>
    3bea:	10 92 9e 09 	sts	0x099E, r1	; 0x80099e <inDex.1939>
    3bee:	82 e0       	ldi	r24, 0x02	; 2
    3bf0:	80 93 a2 09 	sts	0x09A2, r24	; 0x8009a2 <_mh_state>
    3bf4:	08 95       	ret
    3bf6:	e0 91 9e 09 	lds	r30, 0x099E	; 0x80099e <inDex.1939>
    3bfa:	81 e0       	ldi	r24, 0x01	; 1
    3bfc:	8e 0f       	add	r24, r30
    3bfe:	80 93 9e 09 	sts	0x099E, r24	; 0x80099e <inDex.1939>
    3c02:	f0 e0       	ldi	r31, 0x00	; 0
    3c04:	e4 56       	subi	r30, 0x64	; 100
    3c06:	f6 4f       	sbci	r31, 0xF6	; 246
    3c08:	60 83       	st	Z, r22
    3c0a:	82 30       	cpi	r24, 0x02	; 2
    3c0c:	69 f5       	brne	.+90     	; 0x3c68 <_serial_call_back+0xb4>
    3c0e:	83 e0       	ldi	r24, 0x03	; 3
    3c10:	80 93 a2 09 	sts	0x09A2, r24	; 0x8009a2 <_mh_state>
    3c14:	08 95       	ret
    3c16:	90 91 9e 09 	lds	r25, 0x099E	; 0x80099e <inDex.1939>
    3c1a:	21 e0       	ldi	r18, 0x01	; 1
    3c1c:	29 0f       	add	r18, r25
    3c1e:	20 93 9e 09 	sts	0x099E, r18	; 0x80099e <inDex.1939>
    3c22:	96 30       	cpi	r25, 0x06	; 6
    3c24:	09 f5       	brne	.+66     	; 0x3c68 <_serial_call_back+0xb4>
    3c26:	81 11       	cpse	r24, r1
    3c28:	0e c0       	rjmp	.+28     	; 0x3c46 <_serial_call_back+0x92>
    3c2a:	ec e9       	ldi	r30, 0x9C	; 156
    3c2c:	f9 e0       	ldi	r31, 0x09	; 9
    3c2e:	80 81       	ld	r24, Z
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	98 2f       	mov	r25, r24
    3c34:	88 27       	eor	r24, r24
    3c36:	21 81       	ldd	r18, Z+1	; 0x01
    3c38:	82 0f       	add	r24, r18
    3c3a:	91 1d       	adc	r25, r1
    3c3c:	90 93 a4 09 	sts	0x09A4, r25	; 0x8009a4 <_ppm+0x1>
    3c40:	80 93 a3 09 	sts	0x09A3, r24	; 0x8009a3 <_ppm>
    3c44:	04 c0       	rjmp	.+8      	; 0x3c4e <_serial_call_back+0x9a>
    3c46:	10 92 a4 09 	sts	0x09A4, r1	; 0x8009a4 <_ppm+0x1>
    3c4a:	10 92 a3 09 	sts	0x09A3, r1	; 0x8009a3 <_ppm>
    3c4e:	10 92 a2 09 	sts	0x09A2, r1	; 0x8009a2 <_mh_state>
    3c52:	e0 91 a0 09 	lds	r30, 0x09A0	; 0x8009a0 <_app_call_back>
    3c56:	f0 91 a1 09 	lds	r31, 0x09A1	; 0x8009a1 <_app_call_back+0x1>
    3c5a:	30 97       	sbiw	r30, 0x00	; 0
    3c5c:	29 f0       	breq	.+10     	; 0x3c68 <_serial_call_back+0xb4>
    3c5e:	80 91 a3 09 	lds	r24, 0x09A3	; 0x8009a3 <_ppm>
    3c62:	90 91 a4 09 	lds	r25, 0x09A4	; 0x8009a4 <_ppm+0x1>
    3c66:	19 95       	eicall
    3c68:	08 95       	ret

00003c6a <mh_z19_create>:
    3c6a:	8f 92       	push	r8
    3c6c:	9f 92       	push	r9
    3c6e:	af 92       	push	r10
    3c70:	cf 92       	push	r12
    3c72:	ef 92       	push	r14
    3c74:	0f 93       	push	r16
    3c76:	cf 93       	push	r28
    3c78:	df 93       	push	r29
    3c7a:	eb 01       	movw	r28, r22
    3c7c:	0f 2e       	mov	r0, r31
    3c7e:	fa ed       	ldi	r31, 0xDA	; 218
    3c80:	8f 2e       	mov	r8, r31
    3c82:	fd e1       	ldi	r31, 0x1D	; 29
    3c84:	9f 2e       	mov	r9, r31
    3c86:	f0 2d       	mov	r31, r0
    3c88:	68 94       	set
    3c8a:	aa 24       	eor	r10, r10
    3c8c:	a4 f8       	bld	r10, 4
    3c8e:	68 94       	set
    3c90:	cc 24       	eor	r12, r12
    3c92:	c4 f8       	bld	r12, 4
    3c94:	e1 2c       	mov	r14, r1
    3c96:	00 e0       	ldi	r16, 0x00	; 0
    3c98:	23 e0       	ldi	r18, 0x03	; 3
    3c9a:	40 e8       	ldi	r20, 0x80	; 128
    3c9c:	55 e2       	ldi	r21, 0x25	; 37
    3c9e:	60 e0       	ldi	r22, 0x00	; 0
    3ca0:	70 e0       	ldi	r23, 0x00	; 0
    3ca2:	0e 94 ff 13 	call	0x27fe	; 0x27fe <serial_new_instance>
    3ca6:	90 93 a6 09 	sts	0x09A6, r25	; 0x8009a6 <_serial+0x1>
    3caa:	80 93 a5 09 	sts	0x09A5, r24	; 0x8009a5 <_serial>
    3cae:	d0 93 a1 09 	sts	0x09A1, r29	; 0x8009a1 <_app_call_back+0x1>
    3cb2:	c0 93 a0 09 	sts	0x09A0, r28	; 0x8009a0 <_app_call_back>
    3cb6:	df 91       	pop	r29
    3cb8:	cf 91       	pop	r28
    3cba:	0f 91       	pop	r16
    3cbc:	ef 90       	pop	r14
    3cbe:	cf 90       	pop	r12
    3cc0:	af 90       	pop	r10
    3cc2:	9f 90       	pop	r9
    3cc4:	8f 90       	pop	r8
    3cc6:	08 95       	ret

00003cc8 <mh_z19_take_meassuring>:
    3cc8:	cf 93       	push	r28
    3cca:	df 93       	push	r29
    3ccc:	cd b7       	in	r28, 0x3d	; 61
    3cce:	de b7       	in	r29, 0x3e	; 62
    3cd0:	29 97       	sbiw	r28, 0x09	; 9
    3cd2:	0f b6       	in	r0, 0x3f	; 63
    3cd4:	f8 94       	cli
    3cd6:	de bf       	out	0x3e, r29	; 62
    3cd8:	0f be       	out	0x3f, r0	; 63
    3cda:	cd bf       	out	0x3d, r28	; 61
    3cdc:	89 e0       	ldi	r24, 0x09	; 9
    3cde:	e1 e2       	ldi	r30, 0x21	; 33
    3ce0:	f2 e0       	ldi	r31, 0x02	; 2
    3ce2:	9e 01       	movw	r18, r28
    3ce4:	2f 5f       	subi	r18, 0xFF	; 255
    3ce6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ce8:	d9 01       	movw	r26, r18
    3cea:	01 90       	ld	r0, Z+
    3cec:	0d 92       	st	X+, r0
    3cee:	8a 95       	dec	r24
    3cf0:	e1 f7       	brne	.-8      	; 0x3cea <mh_z19_take_meassuring+0x22>
    3cf2:	10 92 a4 09 	sts	0x09A4, r1	; 0x8009a4 <_ppm+0x1>
    3cf6:	10 92 a3 09 	sts	0x09A3, r1	; 0x8009a3 <_ppm>
    3cfa:	80 91 a5 09 	lds	r24, 0x09A5	; 0x8009a5 <_serial>
    3cfe:	90 91 a6 09 	lds	r25, 0x09A6	; 0x8009a6 <_serial+0x1>
    3d02:	00 97       	sbiw	r24, 0x00	; 0
    3d04:	39 f0       	breq	.+14     	; 0x3d14 <mh_z19_take_meassuring+0x4c>
    3d06:	42 2f       	mov	r20, r18
    3d08:	53 2f       	mov	r21, r19
    3d0a:	69 e0       	ldi	r22, 0x09	; 9
    3d0c:	0e 94 c3 14 	call	0x2986	; 0x2986 <serial_send_bytes>
    3d10:	80 e0       	ldi	r24, 0x00	; 0
    3d12:	01 c0       	rjmp	.+2      	; 0x3d16 <mh_z19_take_meassuring+0x4e>
    3d14:	82 e0       	ldi	r24, 0x02	; 2
    3d16:	29 96       	adiw	r28, 0x09	; 9
    3d18:	0f b6       	in	r0, 0x3f	; 63
    3d1a:	f8 94       	cli
    3d1c:	de bf       	out	0x3e, r29	; 62
    3d1e:	0f be       	out	0x3f, r0	; 63
    3d20:	cd bf       	out	0x3d, r28	; 61
    3d22:	df 91       	pop	r29
    3d24:	cf 91       	pop	r28
    3d26:	08 95       	ret

00003d28 <_callBack>:
    3d28:	e0 91 af 09 	lds	r30, 0x09AF	; 0x8009af <_callBackFunction>
    3d2c:	f0 91 b0 09 	lds	r31, 0x09B0	; 0x8009b0 <_callBackFunction+0x1>
    3d30:	30 97       	sbiw	r30, 0x00	; 0
    3d32:	09 f0       	breq	.+2      	; 0x3d36 <_callBack+0xe>
    3d34:	19 95       	eicall
    3d36:	08 95       	ret

00003d38 <_tsl2591TwiCallback>:
    3d38:	64 50       	subi	r22, 0x04	; 4
    3d3a:	62 30       	cpi	r22, 0x02	; 2
    3d3c:	08 f0       	brcs	.+2      	; 0x3d40 <_tsl2591TwiCallback+0x8>
    3d3e:	3b c0       	rjmp	.+118    	; 0x3db6 <_tsl2591TwiCallback+0x7e>
    3d40:	20 91 ae 09 	lds	r18, 0x09AE	; 0x8009ae <_nextState>
    3d44:	22 30       	cpi	r18, 0x02	; 2
    3d46:	79 f0       	breq	.+30     	; 0x3d66 <_tsl2591TwiCallback+0x2e>
    3d48:	18 f4       	brcc	.+6      	; 0x3d50 <_tsl2591TwiCallback+0x18>
    3d4a:	21 30       	cpi	r18, 0x01	; 1
    3d4c:	31 f0       	breq	.+12     	; 0x3d5a <_tsl2591TwiCallback+0x22>
    3d4e:	30 c0       	rjmp	.+96     	; 0x3db0 <_tsl2591TwiCallback+0x78>
    3d50:	23 30       	cpi	r18, 0x03	; 3
    3d52:	81 f0       	breq	.+32     	; 0x3d74 <_tsl2591TwiCallback+0x3c>
    3d54:	24 30       	cpi	r18, 0x04	; 4
    3d56:	a1 f0       	breq	.+40     	; 0x3d80 <_tsl2591TwiCallback+0x48>
    3d58:	2b c0       	rjmp	.+86     	; 0x3db0 <_tsl2591TwiCallback+0x78>
    3d5a:	22 e0       	ldi	r18, 0x02	; 2
    3d5c:	20 93 ae 09 	sts	0x09AE, r18	; 0x8009ae <_nextState>
    3d60:	61 e0       	ldi	r22, 0x01	; 1
    3d62:	09 c2       	rjmp	.+1042   	; 0x4176 <twiReceive>
    3d64:	08 95       	ret
    3d66:	fa 01       	movw	r30, r20
    3d68:	80 81       	ld	r24, Z
    3d6a:	80 93 ab 09 	sts	0x09AB, r24	; 0x8009ab <_deviceId>
    3d6e:	82 e0       	ldi	r24, 0x02	; 2
    3d70:	db cf       	rjmp	.-74     	; 0x3d28 <_callBack>
    3d72:	08 95       	ret
    3d74:	24 e0       	ldi	r18, 0x04	; 4
    3d76:	20 93 ae 09 	sts	0x09AE, r18	; 0x8009ae <_nextState>
    3d7a:	64 e0       	ldi	r22, 0x04	; 4
    3d7c:	fc c1       	rjmp	.+1016   	; 0x4176 <twiReceive>
    3d7e:	08 95       	ret
    3d80:	fa 01       	movw	r30, r20
    3d82:	81 81       	ldd	r24, Z+1	; 0x01
    3d84:	90 e0       	ldi	r25, 0x00	; 0
    3d86:	98 2f       	mov	r25, r24
    3d88:	88 27       	eor	r24, r24
    3d8a:	20 81       	ld	r18, Z
    3d8c:	82 2b       	or	r24, r18
    3d8e:	90 93 aa 09 	sts	0x09AA, r25	; 0x8009aa <_fullSpectrumRaw+0x1>
    3d92:	80 93 a9 09 	sts	0x09A9, r24	; 0x8009a9 <_fullSpectrumRaw>
    3d96:	83 81       	ldd	r24, Z+3	; 0x03
    3d98:	90 e0       	ldi	r25, 0x00	; 0
    3d9a:	98 2f       	mov	r25, r24
    3d9c:	88 27       	eor	r24, r24
    3d9e:	22 81       	ldd	r18, Z+2	; 0x02
    3da0:	82 2b       	or	r24, r18
    3da2:	90 93 a8 09 	sts	0x09A8, r25	; 0x8009a8 <_infraredRaw+0x1>
    3da6:	80 93 a7 09 	sts	0x09A7, r24	; 0x8009a7 <_infraredRaw>
    3daa:	81 e0       	ldi	r24, 0x01	; 1
    3dac:	bd cf       	rjmp	.-134    	; 0x3d28 <_callBack>
    3dae:	08 95       	ret
    3db0:	80 e0       	ldi	r24, 0x00	; 0
    3db2:	ba cf       	rjmp	.-140    	; 0x3d28 <_callBack>
    3db4:	08 95       	ret
    3db6:	10 92 ae 09 	sts	0x09AE, r1	; 0x8009ae <_nextState>
    3dba:	86 e0       	ldi	r24, 0x06	; 6
    3dbc:	b5 cf       	rjmp	.-150    	; 0x3d28 <_callBack>
    3dbe:	08 95       	ret

00003dc0 <_twiTransmit>:
    3dc0:	20 91 b1 09 	lds	r18, 0x09B1	; 0x8009b1 <_twiHandler>
    3dc4:	30 91 b2 09 	lds	r19, 0x09B2	; 0x8009b2 <_twiHandler+0x1>
    3dc8:	21 15       	cp	r18, r1
    3dca:	31 05       	cpc	r19, r1
    3dcc:	41 f0       	breq	.+16     	; 0x3dde <_twiTransmit+0x1e>
    3dce:	46 2f       	mov	r20, r22
    3dd0:	bc 01       	movw	r22, r24
    3dd2:	c9 01       	movw	r24, r18
    3dd4:	85 d1       	rcall	.+778    	; 0x40e0 <twiTransmit>
    3dd6:	82 30       	cpi	r24, 0x02	; 2
    3dd8:	21 f0       	breq	.+8      	; 0x3de2 <_twiTransmit+0x22>
    3dda:	80 e0       	ldi	r24, 0x00	; 0
    3ddc:	08 95       	ret
    3dde:	87 e0       	ldi	r24, 0x07	; 7
    3de0:	08 95       	ret
    3de2:	85 e0       	ldi	r24, 0x05	; 5
    3de4:	08 95       	ret

00003de6 <tsl2591Create>:
    3de6:	0f 93       	push	r16
    3de8:	1f 93       	push	r17
    3dea:	90 93 b0 09 	sts	0x09B0, r25	; 0x8009b0 <_callBackFunction+0x1>
    3dee:	80 93 af 09 	sts	0x09AF, r24	; 0x8009af <_callBackFunction>
    3df2:	0c e9       	ldi	r16, 0x9C	; 156
    3df4:	1e e1       	ldi	r17, 0x1E	; 30
    3df6:	20 e0       	ldi	r18, 0x00	; 0
    3df8:	34 e2       	ldi	r19, 0x24	; 36
    3dfa:	44 ef       	ldi	r20, 0xF4	; 244
    3dfc:	50 e0       	ldi	r21, 0x00	; 0
    3dfe:	60 e0       	ldi	r22, 0x00	; 0
    3e00:	89 e2       	ldi	r24, 0x29	; 41
    3e02:	1d d1       	rcall	.+570    	; 0x403e <twiCreate>
    3e04:	90 93 b2 09 	sts	0x09B2, r25	; 0x8009b2 <_twiHandler+0x1>
    3e08:	80 93 b1 09 	sts	0x09B1, r24	; 0x8009b1 <_twiHandler>
    3e0c:	89 2b       	or	r24, r25
    3e0e:	11 f0       	breq	.+4      	; 0x3e14 <tsl2591Create+0x2e>
    3e10:	80 e0       	ldi	r24, 0x00	; 0
    3e12:	01 c0       	rjmp	.+2      	; 0x3e16 <tsl2591Create+0x30>
    3e14:	88 e0       	ldi	r24, 0x08	; 8
    3e16:	1f 91       	pop	r17
    3e18:	0f 91       	pop	r16
    3e1a:	08 95       	ret

00003e1c <tsl2591Enable>:
    3e1c:	cf 93       	push	r28
    3e1e:	df 93       	push	r29
    3e20:	1f 92       	push	r1
    3e22:	1f 92       	push	r1
    3e24:	cd b7       	in	r28, 0x3d	; 61
    3e26:	de b7       	in	r29, 0x3e	; 62
    3e28:	80 ea       	ldi	r24, 0xA0	; 160
    3e2a:	89 83       	std	Y+1, r24	; 0x01
    3e2c:	83 e0       	ldi	r24, 0x03	; 3
    3e2e:	8a 83       	std	Y+2, r24	; 0x02
    3e30:	10 92 ae 09 	sts	0x09AE, r1	; 0x8009ae <_nextState>
    3e34:	62 e0       	ldi	r22, 0x02	; 2
    3e36:	ce 01       	movw	r24, r28
    3e38:	01 96       	adiw	r24, 0x01	; 1
    3e3a:	c2 df       	rcall	.-124    	; 0x3dc0 <_twiTransmit>
    3e3c:	0f 90       	pop	r0
    3e3e:	0f 90       	pop	r0
    3e40:	df 91       	pop	r29
    3e42:	cf 91       	pop	r28
    3e44:	08 95       	ret

00003e46 <tsl2591FetchData>:
    3e46:	cf 93       	push	r28
    3e48:	df 93       	push	r29
    3e4a:	1f 92       	push	r1
    3e4c:	cd b7       	in	r28, 0x3d	; 61
    3e4e:	de b7       	in	r29, 0x3e	; 62
    3e50:	84 eb       	ldi	r24, 0xB4	; 180
    3e52:	89 83       	std	Y+1, r24	; 0x01
    3e54:	83 e0       	ldi	r24, 0x03	; 3
    3e56:	80 93 ae 09 	sts	0x09AE, r24	; 0x8009ae <_nextState>
    3e5a:	61 e0       	ldi	r22, 0x01	; 1
    3e5c:	ce 01       	movw	r24, r28
    3e5e:	01 96       	adiw	r24, 0x01	; 1
    3e60:	af df       	rcall	.-162    	; 0x3dc0 <_twiTransmit>
    3e62:	0f 90       	pop	r0
    3e64:	df 91       	pop	r29
    3e66:	cf 91       	pop	r28
    3e68:	08 95       	ret

00003e6a <tsl2591GetLux>:
    3e6a:	2f 92       	push	r2
    3e6c:	3f 92       	push	r3
    3e6e:	4f 92       	push	r4
    3e70:	5f 92       	push	r5
    3e72:	6f 92       	push	r6
    3e74:	7f 92       	push	r7
    3e76:	8f 92       	push	r8
    3e78:	9f 92       	push	r9
    3e7a:	af 92       	push	r10
    3e7c:	bf 92       	push	r11
    3e7e:	cf 92       	push	r12
    3e80:	df 92       	push	r13
    3e82:	ef 92       	push	r14
    3e84:	ff 92       	push	r15
    3e86:	0f 93       	push	r16
    3e88:	1f 93       	push	r17
    3e8a:	cf 93       	push	r28
    3e8c:	df 93       	push	r29
    3e8e:	c0 91 a7 09 	lds	r28, 0x09A7	; 0x8009a7 <_infraredRaw>
    3e92:	d0 91 a8 09 	lds	r29, 0x09A8	; 0x8009a8 <_infraredRaw+0x1>
    3e96:	cf 3f       	cpi	r28, 0xFF	; 255
    3e98:	2f ef       	ldi	r18, 0xFF	; 255
    3e9a:	d2 07       	cpc	r29, r18
    3e9c:	41 f0       	breq	.+16     	; 0x3eae <tsl2591GetLux+0x44>
    3e9e:	60 91 a9 09 	lds	r22, 0x09A9	; 0x8009a9 <_fullSpectrumRaw>
    3ea2:	70 91 aa 09 	lds	r23, 0x09AA	; 0x8009aa <_fullSpectrumRaw+0x1>
    3ea6:	6f 3f       	cpi	r22, 0xFF	; 255
    3ea8:	ef ef       	ldi	r30, 0xFF	; 255
    3eaa:	7e 07       	cpc	r23, r30
    3eac:	59 f4       	brne	.+22     	; 0x3ec4 <tsl2591GetLux+0x5a>
    3eae:	4f ef       	ldi	r20, 0xFF	; 255
    3eb0:	5f ef       	ldi	r21, 0xFF	; 255
    3eb2:	6f e7       	ldi	r22, 0x7F	; 127
    3eb4:	7f e7       	ldi	r23, 0x7F	; 127
    3eb6:	fc 01       	movw	r30, r24
    3eb8:	40 83       	st	Z, r20
    3eba:	51 83       	std	Z+1, r21	; 0x01
    3ebc:	62 83       	std	Z+2, r22	; 0x02
    3ebe:	73 83       	std	Z+3, r23	; 0x03
    3ec0:	83 e0       	ldi	r24, 0x03	; 3
    3ec2:	99 c0       	rjmp	.+306    	; 0x3ff6 <tsl2591GetLux+0x18c>
    3ec4:	1c 01       	movw	r2, r24
    3ec6:	80 e0       	ldi	r24, 0x00	; 0
    3ec8:	90 e0       	ldi	r25, 0x00	; 0
    3eca:	17 d3       	rcall	.+1582   	; 0x44fa <__floatunsisf>
    3ecc:	2b 01       	movw	r4, r22
    3ece:	3c 01       	movw	r6, r24
    3ed0:	be 01       	movw	r22, r28
    3ed2:	80 e0       	ldi	r24, 0x00	; 0
    3ed4:	90 e0       	ldi	r25, 0x00	; 0
    3ed6:	11 d3       	rcall	.+1570   	; 0x44fa <__floatunsisf>
    3ed8:	4b 01       	movw	r8, r22
    3eda:	5c 01       	movw	r10, r24
    3edc:	80 91 ac 09 	lds	r24, 0x09AC	; 0x8009ac <_currentIntegrationTime>
    3ee0:	90 e0       	ldi	r25, 0x00	; 0
    3ee2:	01 96       	adiw	r24, 0x01	; 1
    3ee4:	24 e6       	ldi	r18, 0x64	; 100
    3ee6:	28 9f       	mul	r18, r24
    3ee8:	b0 01       	movw	r22, r0
    3eea:	29 9f       	mul	r18, r25
    3eec:	70 0d       	add	r23, r0
    3eee:	11 24       	eor	r1, r1
    3ef0:	80 91 ad 09 	lds	r24, 0x09AD	; 0x8009ad <_currentGain>
    3ef4:	80 32       	cpi	r24, 0x20	; 32
    3ef6:	69 f0       	breq	.+26     	; 0x3f12 <tsl2591GetLux+0xa8>
    3ef8:	80 33       	cpi	r24, 0x30	; 48
    3efa:	a1 f0       	breq	.+40     	; 0x3f24 <tsl2591GetLux+0xba>
    3efc:	80 31       	cpi	r24, 0x10	; 16
    3efe:	e1 f4       	brne	.+56     	; 0x3f38 <tsl2591GetLux+0xce>
    3f00:	0f 2e       	mov	r0, r31
    3f02:	c1 2c       	mov	r12, r1
    3f04:	d1 2c       	mov	r13, r1
    3f06:	f8 ec       	ldi	r31, 0xC8	; 200
    3f08:	ef 2e       	mov	r14, r31
    3f0a:	f1 e4       	ldi	r31, 0x41	; 65
    3f0c:	ff 2e       	mov	r15, r31
    3f0e:	f0 2d       	mov	r31, r0
    3f10:	1b c0       	rjmp	.+54     	; 0x3f48 <tsl2591GetLux+0xde>
    3f12:	0f 2e       	mov	r0, r31
    3f14:	c1 2c       	mov	r12, r1
    3f16:	d1 2c       	mov	r13, r1
    3f18:	f6 ed       	ldi	r31, 0xD6	; 214
    3f1a:	ef 2e       	mov	r14, r31
    3f1c:	f3 e4       	ldi	r31, 0x43	; 67
    3f1e:	ff 2e       	mov	r15, r31
    3f20:	f0 2d       	mov	r31, r0
    3f22:	12 c0       	rjmp	.+36     	; 0x3f48 <tsl2591GetLux+0xde>
    3f24:	0f 2e       	mov	r0, r31
    3f26:	c1 2c       	mov	r12, r1
    3f28:	f0 e5       	ldi	r31, 0x50	; 80
    3f2a:	df 2e       	mov	r13, r31
    3f2c:	fa e1       	ldi	r31, 0x1A	; 26
    3f2e:	ef 2e       	mov	r14, r31
    3f30:	f6 e4       	ldi	r31, 0x46	; 70
    3f32:	ff 2e       	mov	r15, r31
    3f34:	f0 2d       	mov	r31, r0
    3f36:	08 c0       	rjmp	.+16     	; 0x3f48 <tsl2591GetLux+0xde>
    3f38:	0f 2e       	mov	r0, r31
    3f3a:	c1 2c       	mov	r12, r1
    3f3c:	d1 2c       	mov	r13, r1
    3f3e:	f0 e8       	ldi	r31, 0x80	; 128
    3f40:	ef 2e       	mov	r14, r31
    3f42:	ff e3       	ldi	r31, 0x3F	; 63
    3f44:	ff 2e       	mov	r15, r31
    3f46:	f0 2d       	mov	r31, r0
    3f48:	07 2e       	mov	r0, r23
    3f4a:	00 0c       	add	r0, r0
    3f4c:	88 0b       	sbc	r24, r24
    3f4e:	99 0b       	sbc	r25, r25
    3f50:	d6 d2       	rcall	.+1452   	; 0x44fe <__floatsisf>
    3f52:	a7 01       	movw	r20, r14
    3f54:	96 01       	movw	r18, r12
    3f56:	3a d3       	rcall	.+1652   	; 0x45cc <__mulsf3>
    3f58:	20 e0       	ldi	r18, 0x00	; 0
    3f5a:	30 e0       	ldi	r19, 0x00	; 0
    3f5c:	4c ec       	ldi	r20, 0xCC	; 204
    3f5e:	53 e4       	ldi	r21, 0x43	; 67
    3f60:	61 d2       	rcall	.+1218   	; 0x4424 <__divsf3>
    3f62:	6b 01       	movw	r12, r22
    3f64:	7c 01       	movw	r14, r24
    3f66:	25 e8       	ldi	r18, 0x85	; 133
    3f68:	3b ee       	ldi	r19, 0xEB	; 235
    3f6a:	41 ed       	ldi	r20, 0xD1	; 209
    3f6c:	5f e3       	ldi	r21, 0x3F	; 63
    3f6e:	c5 01       	movw	r24, r10
    3f70:	b4 01       	movw	r22, r8
    3f72:	2c d3       	rcall	.+1624   	; 0x45cc <__mulsf3>
    3f74:	9b 01       	movw	r18, r22
    3f76:	ac 01       	movw	r20, r24
    3f78:	c3 01       	movw	r24, r6
    3f7a:	b2 01       	movw	r22, r4
    3f7c:	ec d1       	rcall	.+984    	; 0x4356 <__subsf3>
    3f7e:	a7 01       	movw	r20, r14
    3f80:	96 01       	movw	r18, r12
    3f82:	50 d2       	rcall	.+1184   	; 0x4424 <__divsf3>
    3f84:	16 2f       	mov	r17, r22
    3f86:	d7 2f       	mov	r29, r23
    3f88:	c8 2f       	mov	r28, r24
    3f8a:	09 2f       	mov	r16, r25
    3f8c:	2d e3       	ldi	r18, 0x3D	; 61
    3f8e:	3a e0       	ldi	r19, 0x0A	; 10
    3f90:	47 e1       	ldi	r20, 0x17	; 23
    3f92:	5f e3       	ldi	r21, 0x3F	; 63
    3f94:	c3 01       	movw	r24, r6
    3f96:	b2 01       	movw	r22, r4
    3f98:	19 d3       	rcall	.+1586   	; 0x45cc <__mulsf3>
    3f9a:	2b 01       	movw	r4, r22
    3f9c:	3c 01       	movw	r6, r24
    3f9e:	26 ef       	ldi	r18, 0xF6	; 246
    3fa0:	38 e2       	ldi	r19, 0x28	; 40
    3fa2:	4c e5       	ldi	r20, 0x5C	; 92
    3fa4:	5f e3       	ldi	r21, 0x3F	; 63
    3fa6:	c5 01       	movw	r24, r10
    3fa8:	b4 01       	movw	r22, r8
    3faa:	10 d3       	rcall	.+1568   	; 0x45cc <__mulsf3>
    3fac:	9b 01       	movw	r18, r22
    3fae:	ac 01       	movw	r20, r24
    3fb0:	c3 01       	movw	r24, r6
    3fb2:	b2 01       	movw	r22, r4
    3fb4:	d0 d1       	rcall	.+928    	; 0x4356 <__subsf3>
    3fb6:	a7 01       	movw	r20, r14
    3fb8:	96 01       	movw	r18, r12
    3fba:	34 d2       	rcall	.+1128   	; 0x4424 <__divsf3>
    3fbc:	c6 2e       	mov	r12, r22
    3fbe:	d7 2e       	mov	r13, r23
    3fc0:	e8 2e       	mov	r14, r24
    3fc2:	f9 2e       	mov	r15, r25
    3fc4:	26 2f       	mov	r18, r22
    3fc6:	37 2f       	mov	r19, r23
    3fc8:	48 2f       	mov	r20, r24
    3fca:	59 2f       	mov	r21, r25
    3fcc:	61 2f       	mov	r22, r17
    3fce:	7d 2f       	mov	r23, r29
    3fd0:	8c 2f       	mov	r24, r28
    3fd2:	90 2f       	mov	r25, r16
    3fd4:	f7 d2       	rcall	.+1518   	; 0x45c4 <__gesf2>
    3fd6:	18 16       	cp	r1, r24
    3fd8:	24 f0       	brlt	.+8      	; 0x3fe2 <tsl2591GetLux+0x178>
    3fda:	1c 2d       	mov	r17, r12
    3fdc:	dd 2d       	mov	r29, r13
    3fde:	ce 2d       	mov	r28, r14
    3fe0:	0f 2d       	mov	r16, r15
    3fe2:	41 2f       	mov	r20, r17
    3fe4:	5d 2f       	mov	r21, r29
    3fe6:	6c 2f       	mov	r22, r28
    3fe8:	70 2f       	mov	r23, r16
    3fea:	f1 01       	movw	r30, r2
    3fec:	40 83       	st	Z, r20
    3fee:	51 83       	std	Z+1, r21	; 0x01
    3ff0:	62 83       	std	Z+2, r22	; 0x02
    3ff2:	73 83       	std	Z+3, r23	; 0x03
    3ff4:	80 e0       	ldi	r24, 0x00	; 0
    3ff6:	df 91       	pop	r29
    3ff8:	cf 91       	pop	r28
    3ffa:	1f 91       	pop	r17
    3ffc:	0f 91       	pop	r16
    3ffe:	ff 90       	pop	r15
    4000:	ef 90       	pop	r14
    4002:	df 90       	pop	r13
    4004:	cf 90       	pop	r12
    4006:	bf 90       	pop	r11
    4008:	af 90       	pop	r10
    400a:	9f 90       	pop	r9
    400c:	8f 90       	pop	r8
    400e:	7f 90       	pop	r7
    4010:	6f 90       	pop	r6
    4012:	5f 90       	pop	r5
    4014:	4f 90       	pop	r4
    4016:	3f 90       	pop	r3
    4018:	2f 90       	pop	r2
    401a:	08 95       	ret

0000401c <_initTwiInterface>:
    401c:	80 91 c1 09 	lds	r24, 0x09C1	; 0x8009c1 <_twiIsInitiated>
    4020:	81 11       	cpse	r24, r1
    4022:	0c c0       	rjmp	.+24     	; 0x403c <_initTwiInterface+0x20>
    4024:	8c e0       	ldi	r24, 0x0C	; 12
    4026:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    402a:	8f ef       	ldi	r24, 0xFF	; 255
    402c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4030:	84 e0       	ldi	r24, 0x04	; 4
    4032:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4036:	81 e0       	ldi	r24, 0x01	; 1
    4038:	80 93 c1 09 	sts	0x09C1, r24	; 0x8009c1 <_twiIsInitiated>
    403c:	08 95       	ret

0000403e <twiCreate>:
    403e:	af 92       	push	r10
    4040:	bf 92       	push	r11
    4042:	cf 92       	push	r12
    4044:	df 92       	push	r13
    4046:	ef 92       	push	r14
    4048:	ff 92       	push	r15
    404a:	0f 93       	push	r16
    404c:	1f 93       	push	r17
    404e:	cf 93       	push	r28
    4050:	df 93       	push	r29
    4052:	a8 2e       	mov	r10, r24
    4054:	b6 2e       	mov	r11, r22
    4056:	69 01       	movw	r12, r18
    4058:	7a 01       	movw	r14, r20
    405a:	84 e0       	ldi	r24, 0x04	; 4
    405c:	90 e0       	ldi	r25, 0x00	; 0
    405e:	84 d3       	rcall	.+1800   	; 0x4768 <malloc>
    4060:	ec 01       	movw	r28, r24
    4062:	89 2b       	or	r24, r25
    4064:	61 f1       	breq	.+88     	; 0x40be <twiCreate+0x80>
    4066:	a8 82       	st	Y, r10
    4068:	81 e0       	ldi	r24, 0x01	; 1
    406a:	b8 12       	cpse	r11, r24
    406c:	12 c0       	rjmp	.+36     	; 0x4092 <twiCreate+0x54>
    406e:	c7 01       	movw	r24, r14
    4070:	b6 01       	movw	r22, r12
    4072:	20 ea       	ldi	r18, 0xA0	; 160
    4074:	36 e8       	ldi	r19, 0x86	; 134
    4076:	41 e0       	ldi	r20, 0x01	; 1
    4078:	50 e0       	ldi	r21, 0x00	; 0
    407a:	32 d3       	rcall	.+1636   	; 0x46e0 <__udivmodsi4>
    407c:	da 01       	movw	r26, r20
    407e:	c9 01       	movw	r24, r18
    4080:	40 97       	sbiw	r24, 0x10	; 16
    4082:	a1 09       	sbc	r26, r1
    4084:	b1 09       	sbc	r27, r1
    4086:	b6 95       	lsr	r27
    4088:	a7 95       	ror	r26
    408a:	97 95       	ror	r25
    408c:	87 95       	ror	r24
    408e:	89 83       	std	Y+1, r24	; 0x01
    4090:	11 c0       	rjmp	.+34     	; 0x40b4 <twiCreate+0x76>
    4092:	c7 01       	movw	r24, r14
    4094:	b6 01       	movw	r22, r12
    4096:	20 e8       	ldi	r18, 0x80	; 128
    4098:	3a e1       	ldi	r19, 0x1A	; 26
    409a:	46 e0       	ldi	r20, 0x06	; 6
    409c:	50 e0       	ldi	r21, 0x00	; 0
    409e:	20 d3       	rcall	.+1600   	; 0x46e0 <__udivmodsi4>
    40a0:	da 01       	movw	r26, r20
    40a2:	c9 01       	movw	r24, r18
    40a4:	40 97       	sbiw	r24, 0x10	; 16
    40a6:	a1 09       	sbc	r26, r1
    40a8:	b1 09       	sbc	r27, r1
    40aa:	b6 95       	lsr	r27
    40ac:	a7 95       	ror	r26
    40ae:	97 95       	ror	r25
    40b0:	87 95       	ror	r24
    40b2:	89 83       	std	Y+1, r24	; 0x01
    40b4:	1b 83       	std	Y+3, r17	; 0x03
    40b6:	0a 83       	std	Y+2, r16	; 0x02
    40b8:	8c 2f       	mov	r24, r28
    40ba:	9d 2f       	mov	r25, r29
    40bc:	02 c0       	rjmp	.+4      	; 0x40c2 <twiCreate+0x84>
    40be:	80 e0       	ldi	r24, 0x00	; 0
    40c0:	90 e0       	ldi	r25, 0x00	; 0
    40c2:	df 91       	pop	r29
    40c4:	cf 91       	pop	r28
    40c6:	1f 91       	pop	r17
    40c8:	0f 91       	pop	r16
    40ca:	ff 90       	pop	r15
    40cc:	ef 90       	pop	r14
    40ce:	df 90       	pop	r13
    40d0:	cf 90       	pop	r12
    40d2:	bf 90       	pop	r11
    40d4:	af 90       	pop	r10
    40d6:	08 95       	ret

000040d8 <twiIsBusy>:
    40d8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    40dc:	81 70       	andi	r24, 0x01	; 1
    40de:	08 95       	ret

000040e0 <twiTransmit>:
    40e0:	ff 92       	push	r15
    40e2:	0f 93       	push	r16
    40e4:	1f 93       	push	r17
    40e6:	cf 93       	push	r28
    40e8:	df 93       	push	r29
    40ea:	00 97       	sbiw	r24, 0x00	; 0
    40ec:	c9 f1       	breq	.+114    	; 0x4160 <twiTransmit+0x80>
    40ee:	4a 30       	cpi	r20, 0x0A	; 10
    40f0:	c8 f5       	brcc	.+114    	; 0x4164 <twiTransmit+0x84>
    40f2:	f4 2e       	mov	r15, r20
    40f4:	8b 01       	movw	r16, r22
    40f6:	ec 01       	movw	r28, r24
    40f8:	ef df       	rcall	.-34     	; 0x40d8 <twiIsBusy>
    40fa:	81 11       	cpse	r24, r1
    40fc:	35 c0       	rjmp	.+106    	; 0x4168 <twiTransmit+0x88>
    40fe:	80 91 b4 09 	lds	r24, 0x09B4	; 0x8009b4 <_twiCurrentHandler>
    4102:	90 91 b5 09 	lds	r25, 0x09B5	; 0x8009b5 <_twiCurrentHandler+0x1>
    4106:	c8 17       	cp	r28, r24
    4108:	d9 07       	cpc	r29, r25
    410a:	41 f0       	breq	.+16     	; 0x411c <twiTransmit+0x3c>
    410c:	87 df       	rcall	.-242    	; 0x401c <_initTwiInterface>
    410e:	89 81       	ldd	r24, Y+1	; 0x01
    4110:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4114:	d0 93 b5 09 	sts	0x09B5, r29	; 0x8009b5 <_twiCurrentHandler+0x1>
    4118:	c0 93 b4 09 	sts	0x09B4, r28	; 0x8009b4 <_twiCurrentHandler>
    411c:	81 e0       	ldi	r24, 0x01	; 1
    411e:	8f 0d       	add	r24, r15
    4120:	80 93 b6 09 	sts	0x09B6, r24	; 0x8009b6 <_twiMessageLen>
    4124:	88 81       	ld	r24, Y
    4126:	88 0f       	add	r24, r24
    4128:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <_twiMessageBuffer>
    412c:	ff 20       	and	r15, r15
    412e:	81 f0       	breq	.+32     	; 0x4150 <twiTransmit+0x70>
    4130:	f8 01       	movw	r30, r16
    4132:	a8 eb       	ldi	r26, 0xB8	; 184
    4134:	b9 e0       	ldi	r27, 0x09	; 9
    4136:	4f ef       	ldi	r20, 0xFF	; 255
    4138:	4f 0d       	add	r20, r15
    413a:	64 2f       	mov	r22, r20
    413c:	70 e0       	ldi	r23, 0x00	; 0
    413e:	6f 5f       	subi	r22, 0xFF	; 255
    4140:	7f 4f       	sbci	r23, 0xFF	; 255
    4142:	60 0f       	add	r22, r16
    4144:	71 1f       	adc	r23, r17
    4146:	81 91       	ld	r24, Z+
    4148:	8d 93       	st	X+, r24
    414a:	e6 17       	cp	r30, r22
    414c:	f7 07       	cpc	r31, r23
    414e:	d9 f7       	brne	.-10     	; 0x4146 <twiTransmit+0x66>
    4150:	88 ef       	ldi	r24, 0xF8	; 248
    4152:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    4156:	85 ea       	ldi	r24, 0xA5	; 165
    4158:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    415c:	81 e0       	ldi	r24, 0x01	; 1
    415e:	05 c0       	rjmp	.+10     	; 0x416a <twiTransmit+0x8a>
    4160:	86 e0       	ldi	r24, 0x06	; 6
    4162:	03 c0       	rjmp	.+6      	; 0x416a <twiTransmit+0x8a>
    4164:	87 e0       	ldi	r24, 0x07	; 7
    4166:	01 c0       	rjmp	.+2      	; 0x416a <twiTransmit+0x8a>
    4168:	82 e0       	ldi	r24, 0x02	; 2
    416a:	df 91       	pop	r29
    416c:	cf 91       	pop	r28
    416e:	1f 91       	pop	r17
    4170:	0f 91       	pop	r16
    4172:	ff 90       	pop	r15
    4174:	08 95       	ret

00004176 <twiReceive>:
    4176:	1f 93       	push	r17
    4178:	cf 93       	push	r28
    417a:	df 93       	push	r29
    417c:	00 97       	sbiw	r24, 0x00	; 0
    417e:	29 f1       	breq	.+74     	; 0x41ca <twiReceive+0x54>
    4180:	6b 30       	cpi	r22, 0x0B	; 11
    4182:	28 f5       	brcc	.+74     	; 0x41ce <twiReceive+0x58>
    4184:	16 2f       	mov	r17, r22
    4186:	ec 01       	movw	r28, r24
    4188:	a7 df       	rcall	.-178    	; 0x40d8 <twiIsBusy>
    418a:	81 11       	cpse	r24, r1
    418c:	22 c0       	rjmp	.+68     	; 0x41d2 <twiReceive+0x5c>
    418e:	80 91 b4 09 	lds	r24, 0x09B4	; 0x8009b4 <_twiCurrentHandler>
    4192:	90 91 b5 09 	lds	r25, 0x09B5	; 0x8009b5 <_twiCurrentHandler+0x1>
    4196:	c8 17       	cp	r28, r24
    4198:	d9 07       	cpc	r29, r25
    419a:	41 f0       	breq	.+16     	; 0x41ac <twiReceive+0x36>
    419c:	3f df       	rcall	.-386    	; 0x401c <_initTwiInterface>
    419e:	89 81       	ldd	r24, Y+1	; 0x01
    41a0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    41a4:	d0 93 b5 09 	sts	0x09B5, r29	; 0x8009b5 <_twiCurrentHandler+0x1>
    41a8:	c0 93 b4 09 	sts	0x09B4, r28	; 0x8009b4 <_twiCurrentHandler>
    41ac:	10 93 b6 09 	sts	0x09B6, r17	; 0x8009b6 <_twiMessageLen>
    41b0:	88 81       	ld	r24, Y
    41b2:	88 0f       	add	r24, r24
    41b4:	81 60       	ori	r24, 0x01	; 1
    41b6:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <_twiMessageBuffer>
    41ba:	88 ef       	ldi	r24, 0xF8	; 248
    41bc:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    41c0:	85 ea       	ldi	r24, 0xA5	; 165
    41c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    41c6:	81 e0       	ldi	r24, 0x01	; 1
    41c8:	05 c0       	rjmp	.+10     	; 0x41d4 <twiReceive+0x5e>
    41ca:	86 e0       	ldi	r24, 0x06	; 6
    41cc:	03 c0       	rjmp	.+6      	; 0x41d4 <twiReceive+0x5e>
    41ce:	87 e0       	ldi	r24, 0x07	; 7
    41d0:	01 c0       	rjmp	.+2      	; 0x41d4 <twiReceive+0x5e>
    41d2:	82 e0       	ldi	r24, 0x02	; 2
    41d4:	df 91       	pop	r29
    41d6:	cf 91       	pop	r28
    41d8:	1f 91       	pop	r17
    41da:	08 95       	ret

000041dc <__vector_39>:
    41dc:	1f 92       	push	r1
    41de:	0f 92       	push	r0
    41e0:	0f b6       	in	r0, 0x3f	; 63
    41e2:	0f 92       	push	r0
    41e4:	11 24       	eor	r1, r1
    41e6:	0b b6       	in	r0, 0x3b	; 59
    41e8:	0f 92       	push	r0
    41ea:	2f 93       	push	r18
    41ec:	3f 93       	push	r19
    41ee:	4f 93       	push	r20
    41f0:	5f 93       	push	r21
    41f2:	6f 93       	push	r22
    41f4:	7f 93       	push	r23
    41f6:	8f 93       	push	r24
    41f8:	9f 93       	push	r25
    41fa:	af 93       	push	r26
    41fc:	bf 93       	push	r27
    41fe:	ef 93       	push	r30
    4200:	ff 93       	push	r31
    4202:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4206:	8e 2f       	mov	r24, r30
    4208:	90 e0       	ldi	r25, 0x00	; 0
    420a:	fc 01       	movw	r30, r24
    420c:	38 97       	sbiw	r30, 0x08	; 8
    420e:	e1 35       	cpi	r30, 0x51	; 81
    4210:	f1 05       	cpc	r31, r1
    4212:	08 f0       	brcs	.+2      	; 0x4216 <__vector_39+0x3a>
    4214:	75 c0       	rjmp	.+234    	; 0x4300 <__vector_39+0x124>
    4216:	88 27       	eor	r24, r24
    4218:	e4 58       	subi	r30, 0x84	; 132
    421a:	ff 4f       	sbci	r31, 0xFF	; 255
    421c:	8f 4f       	sbci	r24, 0xFF	; 255
    421e:	82 c2       	rjmp	.+1284   	; 0x4724 <__tablejump2__>
    4220:	10 92 b3 09 	sts	0x09B3, r1	; 0x8009b3 <_index.1885>
    4224:	e0 91 b3 09 	lds	r30, 0x09B3	; 0x8009b3 <_index.1885>
    4228:	80 91 b6 09 	lds	r24, 0x09B6	; 0x8009b6 <_twiMessageLen>
    422c:	e8 17       	cp	r30, r24
    422e:	70 f4       	brcc	.+28     	; 0x424c <__vector_39+0x70>
    4230:	81 e0       	ldi	r24, 0x01	; 1
    4232:	8e 0f       	add	r24, r30
    4234:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <_index.1885>
    4238:	f0 e0       	ldi	r31, 0x00	; 0
    423a:	e9 54       	subi	r30, 0x49	; 73
    423c:	f6 4f       	sbci	r31, 0xF6	; 246
    423e:	80 81       	ld	r24, Z
    4240:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4244:	85 e8       	ldi	r24, 0x85	; 133
    4246:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    424a:	72 c0       	rjmp	.+228    	; 0x4330 <__vector_39+0x154>
    424c:	84 e9       	ldi	r24, 0x94	; 148
    424e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4252:	80 91 b4 09 	lds	r24, 0x09B4	; 0x8009b4 <_twiCurrentHandler>
    4256:	90 91 b5 09 	lds	r25, 0x09B5	; 0x8009b5 <_twiCurrentHandler+0x1>
    425a:	dc 01       	movw	r26, r24
    425c:	12 96       	adiw	r26, 0x02	; 2
    425e:	ed 91       	ld	r30, X+
    4260:	fc 91       	ld	r31, X
    4262:	13 97       	sbiw	r26, 0x03	; 3
    4264:	30 97       	sbiw	r30, 0x00	; 0
    4266:	09 f4       	brne	.+2      	; 0x426a <__vector_39+0x8e>
    4268:	63 c0       	rjmp	.+198    	; 0x4330 <__vector_39+0x154>
    426a:	20 e0       	ldi	r18, 0x00	; 0
    426c:	40 e0       	ldi	r20, 0x00	; 0
    426e:	50 e0       	ldi	r21, 0x00	; 0
    4270:	64 e0       	ldi	r22, 0x04	; 4
    4272:	19 95       	eicall
    4274:	5d c0       	rjmp	.+186    	; 0x4330 <__vector_39+0x154>
    4276:	e0 91 b3 09 	lds	r30, 0x09B3	; 0x8009b3 <_index.1885>
    427a:	81 e0       	ldi	r24, 0x01	; 1
    427c:	8e 0f       	add	r24, r30
    427e:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <_index.1885>
    4282:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4286:	f0 e0       	ldi	r31, 0x00	; 0
    4288:	e9 54       	subi	r30, 0x49	; 73
    428a:	f6 4f       	sbci	r31, 0xF6	; 246
    428c:	80 83       	st	Z, r24
    428e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4292:	80 34       	cpi	r24, 0x40	; 64
    4294:	11 f4       	brne	.+4      	; 0x429a <__vector_39+0xbe>
    4296:	10 92 b3 09 	sts	0x09B3, r1	; 0x8009b3 <_index.1885>
    429a:	20 91 b3 09 	lds	r18, 0x09B3	; 0x8009b3 <_index.1885>
    429e:	30 e0       	ldi	r19, 0x00	; 0
    42a0:	80 91 b6 09 	lds	r24, 0x09B6	; 0x8009b6 <_twiMessageLen>
    42a4:	90 e0       	ldi	r25, 0x00	; 0
    42a6:	01 97       	sbiw	r24, 0x01	; 1
    42a8:	28 17       	cp	r18, r24
    42aa:	39 07       	cpc	r19, r25
    42ac:	24 f4       	brge	.+8      	; 0x42b6 <__vector_39+0xda>
    42ae:	85 ec       	ldi	r24, 0xC5	; 197
    42b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    42b4:	3d c0       	rjmp	.+122    	; 0x4330 <__vector_39+0x154>
    42b6:	85 e8       	ldi	r24, 0x85	; 133
    42b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    42bc:	39 c0       	rjmp	.+114    	; 0x4330 <__vector_39+0x154>
    42be:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    42c2:	e0 91 b3 09 	lds	r30, 0x09B3	; 0x8009b3 <_index.1885>
    42c6:	f0 e0       	ldi	r31, 0x00	; 0
    42c8:	e9 54       	subi	r30, 0x49	; 73
    42ca:	f6 4f       	sbci	r31, 0xF6	; 246
    42cc:	80 83       	st	Z, r24
    42ce:	84 e9       	ldi	r24, 0x94	; 148
    42d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    42d4:	80 91 b4 09 	lds	r24, 0x09B4	; 0x8009b4 <_twiCurrentHandler>
    42d8:	90 91 b5 09 	lds	r25, 0x09B5	; 0x8009b5 <_twiCurrentHandler+0x1>
    42dc:	dc 01       	movw	r26, r24
    42de:	12 96       	adiw	r26, 0x02	; 2
    42e0:	ed 91       	ld	r30, X+
    42e2:	fc 91       	ld	r31, X
    42e4:	13 97       	sbiw	r26, 0x03	; 3
    42e6:	30 97       	sbiw	r30, 0x00	; 0
    42e8:	19 f1       	breq	.+70     	; 0x4330 <__vector_39+0x154>
    42ea:	20 91 b6 09 	lds	r18, 0x09B6	; 0x8009b6 <_twiMessageLen>
    42ee:	47 eb       	ldi	r20, 0xB7	; 183
    42f0:	59 e0       	ldi	r21, 0x09	; 9
    42f2:	65 e0       	ldi	r22, 0x05	; 5
    42f4:	19 95       	eicall
    42f6:	1c c0       	rjmp	.+56     	; 0x4330 <__vector_39+0x154>
    42f8:	85 ea       	ldi	r24, 0xA5	; 165
    42fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    42fe:	18 c0       	rjmp	.+48     	; 0x4330 <__vector_39+0x154>
    4300:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4304:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    4308:	84 e0       	ldi	r24, 0x04	; 4
    430a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    430e:	80 91 b4 09 	lds	r24, 0x09B4	; 0x8009b4 <_twiCurrentHandler>
    4312:	90 91 b5 09 	lds	r25, 0x09B5	; 0x8009b5 <_twiCurrentHandler+0x1>
    4316:	dc 01       	movw	r26, r24
    4318:	12 96       	adiw	r26, 0x02	; 2
    431a:	ed 91       	ld	r30, X+
    431c:	fc 91       	ld	r31, X
    431e:	13 97       	sbiw	r26, 0x03	; 3
    4320:	30 97       	sbiw	r30, 0x00	; 0
    4322:	31 f0       	breq	.+12     	; 0x4330 <__vector_39+0x154>
    4324:	20 e0       	ldi	r18, 0x00	; 0
    4326:	40 e0       	ldi	r20, 0x00	; 0
    4328:	50 e0       	ldi	r21, 0x00	; 0
    432a:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    432e:	19 95       	eicall
    4330:	ff 91       	pop	r31
    4332:	ef 91       	pop	r30
    4334:	bf 91       	pop	r27
    4336:	af 91       	pop	r26
    4338:	9f 91       	pop	r25
    433a:	8f 91       	pop	r24
    433c:	7f 91       	pop	r23
    433e:	6f 91       	pop	r22
    4340:	5f 91       	pop	r21
    4342:	4f 91       	pop	r20
    4344:	3f 91       	pop	r19
    4346:	2f 91       	pop	r18
    4348:	0f 90       	pop	r0
    434a:	0b be       	out	0x3b, r0	; 59
    434c:	0f 90       	pop	r0
    434e:	0f be       	out	0x3f, r0	; 63
    4350:	0f 90       	pop	r0
    4352:	1f 90       	pop	r1
    4354:	18 95       	reti

00004356 <__subsf3>:
    4356:	50 58       	subi	r21, 0x80	; 128

00004358 <__addsf3>:
    4358:	bb 27       	eor	r27, r27
    435a:	aa 27       	eor	r26, r26
    435c:	0e d0       	rcall	.+28     	; 0x437a <__addsf3x>
    435e:	21 c1       	rjmp	.+578    	; 0x45a2 <__fp_round>
    4360:	12 d1       	rcall	.+548    	; 0x4586 <__fp_pscA>
    4362:	30 f0       	brcs	.+12     	; 0x4370 <__addsf3+0x18>
    4364:	17 d1       	rcall	.+558    	; 0x4594 <__fp_pscB>
    4366:	20 f0       	brcs	.+8      	; 0x4370 <__addsf3+0x18>
    4368:	31 f4       	brne	.+12     	; 0x4376 <__addsf3+0x1e>
    436a:	9f 3f       	cpi	r25, 0xFF	; 255
    436c:	11 f4       	brne	.+4      	; 0x4372 <__addsf3+0x1a>
    436e:	1e f4       	brtc	.+6      	; 0x4376 <__addsf3+0x1e>
    4370:	07 c1       	rjmp	.+526    	; 0x4580 <__fp_nan>
    4372:	0e f4       	brtc	.+2      	; 0x4376 <__addsf3+0x1e>
    4374:	e0 95       	com	r30
    4376:	e7 fb       	bst	r30, 7
    4378:	fd c0       	rjmp	.+506    	; 0x4574 <__fp_inf>

0000437a <__addsf3x>:
    437a:	e9 2f       	mov	r30, r25
    437c:	0e 94 8f 13 	call	0x271e	; 0x271e <__fp_split3>
    4380:	78 f3       	brcs	.-34     	; 0x4360 <__addsf3+0x8>
    4382:	ba 17       	cp	r27, r26
    4384:	62 07       	cpc	r22, r18
    4386:	73 07       	cpc	r23, r19
    4388:	84 07       	cpc	r24, r20
    438a:	95 07       	cpc	r25, r21
    438c:	20 f0       	brcs	.+8      	; 0x4396 <__addsf3x+0x1c>
    438e:	79 f4       	brne	.+30     	; 0x43ae <__addsf3x+0x34>
    4390:	a6 f5       	brtc	.+104    	; 0x43fa <__addsf3x+0x80>
    4392:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__fp_zero>
    4396:	0e f4       	brtc	.+2      	; 0x439a <__addsf3x+0x20>
    4398:	e0 95       	com	r30
    439a:	0b 2e       	mov	r0, r27
    439c:	ba 2f       	mov	r27, r26
    439e:	a0 2d       	mov	r26, r0
    43a0:	0b 01       	movw	r0, r22
    43a2:	b9 01       	movw	r22, r18
    43a4:	90 01       	movw	r18, r0
    43a6:	0c 01       	movw	r0, r24
    43a8:	ca 01       	movw	r24, r20
    43aa:	a0 01       	movw	r20, r0
    43ac:	11 24       	eor	r1, r1
    43ae:	ff 27       	eor	r31, r31
    43b0:	59 1b       	sub	r21, r25
    43b2:	99 f0       	breq	.+38     	; 0x43da <__addsf3x+0x60>
    43b4:	59 3f       	cpi	r21, 0xF9	; 249
    43b6:	50 f4       	brcc	.+20     	; 0x43cc <__addsf3x+0x52>
    43b8:	50 3e       	cpi	r21, 0xE0	; 224
    43ba:	68 f1       	brcs	.+90     	; 0x4416 <__addsf3x+0x9c>
    43bc:	1a 16       	cp	r1, r26
    43be:	f0 40       	sbci	r31, 0x00	; 0
    43c0:	a2 2f       	mov	r26, r18
    43c2:	23 2f       	mov	r18, r19
    43c4:	34 2f       	mov	r19, r20
    43c6:	44 27       	eor	r20, r20
    43c8:	58 5f       	subi	r21, 0xF8	; 248
    43ca:	f3 cf       	rjmp	.-26     	; 0x43b2 <__addsf3x+0x38>
    43cc:	46 95       	lsr	r20
    43ce:	37 95       	ror	r19
    43d0:	27 95       	ror	r18
    43d2:	a7 95       	ror	r26
    43d4:	f0 40       	sbci	r31, 0x00	; 0
    43d6:	53 95       	inc	r21
    43d8:	c9 f7       	brne	.-14     	; 0x43cc <__addsf3x+0x52>
    43da:	7e f4       	brtc	.+30     	; 0x43fa <__addsf3x+0x80>
    43dc:	1f 16       	cp	r1, r31
    43de:	ba 0b       	sbc	r27, r26
    43e0:	62 0b       	sbc	r22, r18
    43e2:	73 0b       	sbc	r23, r19
    43e4:	84 0b       	sbc	r24, r20
    43e6:	ba f0       	brmi	.+46     	; 0x4416 <__addsf3x+0x9c>
    43e8:	91 50       	subi	r25, 0x01	; 1
    43ea:	a1 f0       	breq	.+40     	; 0x4414 <__addsf3x+0x9a>
    43ec:	ff 0f       	add	r31, r31
    43ee:	bb 1f       	adc	r27, r27
    43f0:	66 1f       	adc	r22, r22
    43f2:	77 1f       	adc	r23, r23
    43f4:	88 1f       	adc	r24, r24
    43f6:	c2 f7       	brpl	.-16     	; 0x43e8 <__addsf3x+0x6e>
    43f8:	0e c0       	rjmp	.+28     	; 0x4416 <__addsf3x+0x9c>
    43fa:	ba 0f       	add	r27, r26
    43fc:	62 1f       	adc	r22, r18
    43fe:	73 1f       	adc	r23, r19
    4400:	84 1f       	adc	r24, r20
    4402:	48 f4       	brcc	.+18     	; 0x4416 <__addsf3x+0x9c>
    4404:	87 95       	ror	r24
    4406:	77 95       	ror	r23
    4408:	67 95       	ror	r22
    440a:	b7 95       	ror	r27
    440c:	f7 95       	ror	r31
    440e:	9e 3f       	cpi	r25, 0xFE	; 254
    4410:	08 f0       	brcs	.+2      	; 0x4414 <__addsf3x+0x9a>
    4412:	b1 cf       	rjmp	.-158    	; 0x4376 <__addsf3+0x1e>
    4414:	93 95       	inc	r25
    4416:	88 0f       	add	r24, r24
    4418:	08 f0       	brcs	.+2      	; 0x441c <__addsf3x+0xa2>
    441a:	99 27       	eor	r25, r25
    441c:	ee 0f       	add	r30, r30
    441e:	97 95       	ror	r25
    4420:	87 95       	ror	r24
    4422:	08 95       	ret

00004424 <__divsf3>:
    4424:	0d d0       	rcall	.+26     	; 0x4440 <__divsf3x>
    4426:	bd c0       	rjmp	.+378    	; 0x45a2 <__fp_round>
    4428:	b5 d0       	rcall	.+362    	; 0x4594 <__fp_pscB>
    442a:	48 f0       	brcs	.+18     	; 0x443e <__divsf3+0x1a>
    442c:	ac d0       	rcall	.+344    	; 0x4586 <__fp_pscA>
    442e:	38 f0       	brcs	.+14     	; 0x443e <__divsf3+0x1a>
    4430:	21 f4       	brne	.+8      	; 0x443a <__divsf3+0x16>
    4432:	5f 3f       	cpi	r21, 0xFF	; 255
    4434:	21 f0       	breq	.+8      	; 0x443e <__divsf3+0x1a>
    4436:	9e c0       	rjmp	.+316    	; 0x4574 <__fp_inf>
    4438:	51 11       	cpse	r21, r1
    443a:	0c 94 b2 13 	jmp	0x2764	; 0x2764 <__fp_szero>
    443e:	a0 c0       	rjmp	.+320    	; 0x4580 <__fp_nan>

00004440 <__divsf3x>:
    4440:	0e 94 8f 13 	call	0x271e	; 0x271e <__fp_split3>
    4444:	88 f3       	brcs	.-30     	; 0x4428 <__divsf3+0x4>

00004446 <__divsf3_pse>:
    4446:	99 23       	and	r25, r25
    4448:	b9 f3       	breq	.-18     	; 0x4438 <__divsf3+0x14>
    444a:	55 23       	and	r21, r21
    444c:	a1 f3       	breq	.-24     	; 0x4436 <__divsf3+0x12>
    444e:	95 1b       	sub	r25, r21
    4450:	55 0b       	sbc	r21, r21
    4452:	bb 27       	eor	r27, r27
    4454:	aa 27       	eor	r26, r26
    4456:	62 17       	cp	r22, r18
    4458:	73 07       	cpc	r23, r19
    445a:	84 07       	cpc	r24, r20
    445c:	38 f0       	brcs	.+14     	; 0x446c <__divsf3_pse+0x26>
    445e:	9f 5f       	subi	r25, 0xFF	; 255
    4460:	5f 4f       	sbci	r21, 0xFF	; 255
    4462:	22 0f       	add	r18, r18
    4464:	33 1f       	adc	r19, r19
    4466:	44 1f       	adc	r20, r20
    4468:	aa 1f       	adc	r26, r26
    446a:	a9 f3       	breq	.-22     	; 0x4456 <__divsf3_pse+0x10>
    446c:	34 d0       	rcall	.+104    	; 0x44d6 <__divsf3_pse+0x90>
    446e:	0e 2e       	mov	r0, r30
    4470:	3a f0       	brmi	.+14     	; 0x4480 <__divsf3_pse+0x3a>
    4472:	e0 e8       	ldi	r30, 0x80	; 128
    4474:	31 d0       	rcall	.+98     	; 0x44d8 <__divsf3_pse+0x92>
    4476:	91 50       	subi	r25, 0x01	; 1
    4478:	50 40       	sbci	r21, 0x00	; 0
    447a:	e6 95       	lsr	r30
    447c:	00 1c       	adc	r0, r0
    447e:	ca f7       	brpl	.-14     	; 0x4472 <__divsf3_pse+0x2c>
    4480:	2a d0       	rcall	.+84     	; 0x44d6 <__divsf3_pse+0x90>
    4482:	fe 2f       	mov	r31, r30
    4484:	28 d0       	rcall	.+80     	; 0x44d6 <__divsf3_pse+0x90>
    4486:	66 0f       	add	r22, r22
    4488:	77 1f       	adc	r23, r23
    448a:	88 1f       	adc	r24, r24
    448c:	bb 1f       	adc	r27, r27
    448e:	26 17       	cp	r18, r22
    4490:	37 07       	cpc	r19, r23
    4492:	48 07       	cpc	r20, r24
    4494:	ab 07       	cpc	r26, r27
    4496:	b0 e8       	ldi	r27, 0x80	; 128
    4498:	09 f0       	breq	.+2      	; 0x449c <__divsf3_pse+0x56>
    449a:	bb 0b       	sbc	r27, r27
    449c:	80 2d       	mov	r24, r0
    449e:	bf 01       	movw	r22, r30
    44a0:	ff 27       	eor	r31, r31
    44a2:	93 58       	subi	r25, 0x83	; 131
    44a4:	5f 4f       	sbci	r21, 0xFF	; 255
    44a6:	32 f0       	brmi	.+12     	; 0x44b4 <__divsf3_pse+0x6e>
    44a8:	9e 3f       	cpi	r25, 0xFE	; 254
    44aa:	51 05       	cpc	r21, r1
    44ac:	70 f0       	brcs	.+28     	; 0x44ca <__divsf3_pse+0x84>
    44ae:	62 c0       	rjmp	.+196    	; 0x4574 <__fp_inf>
    44b0:	0c 94 b2 13 	jmp	0x2764	; 0x2764 <__fp_szero>
    44b4:	5f 3f       	cpi	r21, 0xFF	; 255
    44b6:	e4 f3       	brlt	.-8      	; 0x44b0 <__divsf3_pse+0x6a>
    44b8:	98 3e       	cpi	r25, 0xE8	; 232
    44ba:	d4 f3       	brlt	.-12     	; 0x44b0 <__divsf3_pse+0x6a>
    44bc:	86 95       	lsr	r24
    44be:	77 95       	ror	r23
    44c0:	67 95       	ror	r22
    44c2:	b7 95       	ror	r27
    44c4:	f7 95       	ror	r31
    44c6:	9f 5f       	subi	r25, 0xFF	; 255
    44c8:	c9 f7       	brne	.-14     	; 0x44bc <__divsf3_pse+0x76>
    44ca:	88 0f       	add	r24, r24
    44cc:	91 1d       	adc	r25, r1
    44ce:	96 95       	lsr	r25
    44d0:	87 95       	ror	r24
    44d2:	97 f9       	bld	r25, 7
    44d4:	08 95       	ret
    44d6:	e1 e0       	ldi	r30, 0x01	; 1
    44d8:	66 0f       	add	r22, r22
    44da:	77 1f       	adc	r23, r23
    44dc:	88 1f       	adc	r24, r24
    44de:	bb 1f       	adc	r27, r27
    44e0:	62 17       	cp	r22, r18
    44e2:	73 07       	cpc	r23, r19
    44e4:	84 07       	cpc	r24, r20
    44e6:	ba 07       	cpc	r27, r26
    44e8:	20 f0       	brcs	.+8      	; 0x44f2 <__divsf3_pse+0xac>
    44ea:	62 1b       	sub	r22, r18
    44ec:	73 0b       	sbc	r23, r19
    44ee:	84 0b       	sbc	r24, r20
    44f0:	ba 0b       	sbc	r27, r26
    44f2:	ee 1f       	adc	r30, r30
    44f4:	88 f7       	brcc	.-30     	; 0x44d8 <__divsf3_pse+0x92>
    44f6:	e0 95       	com	r30
    44f8:	08 95       	ret

000044fa <__floatunsisf>:
    44fa:	e8 94       	clt
    44fc:	09 c0       	rjmp	.+18     	; 0x4510 <__floatsisf+0x12>

000044fe <__floatsisf>:
    44fe:	97 fb       	bst	r25, 7
    4500:	3e f4       	brtc	.+14     	; 0x4510 <__floatsisf+0x12>
    4502:	90 95       	com	r25
    4504:	80 95       	com	r24
    4506:	70 95       	com	r23
    4508:	61 95       	neg	r22
    450a:	7f 4f       	sbci	r23, 0xFF	; 255
    450c:	8f 4f       	sbci	r24, 0xFF	; 255
    450e:	9f 4f       	sbci	r25, 0xFF	; 255
    4510:	99 23       	and	r25, r25
    4512:	a9 f0       	breq	.+42     	; 0x453e <__floatsisf+0x40>
    4514:	f9 2f       	mov	r31, r25
    4516:	96 e9       	ldi	r25, 0x96	; 150
    4518:	bb 27       	eor	r27, r27
    451a:	93 95       	inc	r25
    451c:	f6 95       	lsr	r31
    451e:	87 95       	ror	r24
    4520:	77 95       	ror	r23
    4522:	67 95       	ror	r22
    4524:	b7 95       	ror	r27
    4526:	f1 11       	cpse	r31, r1
    4528:	f8 cf       	rjmp	.-16     	; 0x451a <__floatsisf+0x1c>
    452a:	fa f4       	brpl	.+62     	; 0x456a <__floatsisf+0x6c>
    452c:	bb 0f       	add	r27, r27
    452e:	11 f4       	brne	.+4      	; 0x4534 <__floatsisf+0x36>
    4530:	60 ff       	sbrs	r22, 0
    4532:	1b c0       	rjmp	.+54     	; 0x456a <__floatsisf+0x6c>
    4534:	6f 5f       	subi	r22, 0xFF	; 255
    4536:	7f 4f       	sbci	r23, 0xFF	; 255
    4538:	8f 4f       	sbci	r24, 0xFF	; 255
    453a:	9f 4f       	sbci	r25, 0xFF	; 255
    453c:	16 c0       	rjmp	.+44     	; 0x456a <__floatsisf+0x6c>
    453e:	88 23       	and	r24, r24
    4540:	11 f0       	breq	.+4      	; 0x4546 <__floatsisf+0x48>
    4542:	96 e9       	ldi	r25, 0x96	; 150
    4544:	11 c0       	rjmp	.+34     	; 0x4568 <__floatsisf+0x6a>
    4546:	77 23       	and	r23, r23
    4548:	21 f0       	breq	.+8      	; 0x4552 <__floatsisf+0x54>
    454a:	9e e8       	ldi	r25, 0x8E	; 142
    454c:	87 2f       	mov	r24, r23
    454e:	76 2f       	mov	r23, r22
    4550:	05 c0       	rjmp	.+10     	; 0x455c <__floatsisf+0x5e>
    4552:	66 23       	and	r22, r22
    4554:	71 f0       	breq	.+28     	; 0x4572 <__floatsisf+0x74>
    4556:	96 e8       	ldi	r25, 0x86	; 134
    4558:	86 2f       	mov	r24, r22
    455a:	70 e0       	ldi	r23, 0x00	; 0
    455c:	60 e0       	ldi	r22, 0x00	; 0
    455e:	2a f0       	brmi	.+10     	; 0x456a <__floatsisf+0x6c>
    4560:	9a 95       	dec	r25
    4562:	66 0f       	add	r22, r22
    4564:	77 1f       	adc	r23, r23
    4566:	88 1f       	adc	r24, r24
    4568:	da f7       	brpl	.-10     	; 0x4560 <__floatsisf+0x62>
    456a:	88 0f       	add	r24, r24
    456c:	96 95       	lsr	r25
    456e:	87 95       	ror	r24
    4570:	97 f9       	bld	r25, 7
    4572:	08 95       	ret

00004574 <__fp_inf>:
    4574:	97 f9       	bld	r25, 7
    4576:	9f 67       	ori	r25, 0x7F	; 127
    4578:	80 e8       	ldi	r24, 0x80	; 128
    457a:	70 e0       	ldi	r23, 0x00	; 0
    457c:	60 e0       	ldi	r22, 0x00	; 0
    457e:	08 95       	ret

00004580 <__fp_nan>:
    4580:	9f ef       	ldi	r25, 0xFF	; 255
    4582:	80 ec       	ldi	r24, 0xC0	; 192
    4584:	08 95       	ret

00004586 <__fp_pscA>:
    4586:	00 24       	eor	r0, r0
    4588:	0a 94       	dec	r0
    458a:	16 16       	cp	r1, r22
    458c:	17 06       	cpc	r1, r23
    458e:	18 06       	cpc	r1, r24
    4590:	09 06       	cpc	r0, r25
    4592:	08 95       	ret

00004594 <__fp_pscB>:
    4594:	00 24       	eor	r0, r0
    4596:	0a 94       	dec	r0
    4598:	12 16       	cp	r1, r18
    459a:	13 06       	cpc	r1, r19
    459c:	14 06       	cpc	r1, r20
    459e:	05 06       	cpc	r0, r21
    45a0:	08 95       	ret

000045a2 <__fp_round>:
    45a2:	09 2e       	mov	r0, r25
    45a4:	03 94       	inc	r0
    45a6:	00 0c       	add	r0, r0
    45a8:	11 f4       	brne	.+4      	; 0x45ae <__fp_round+0xc>
    45aa:	88 23       	and	r24, r24
    45ac:	52 f0       	brmi	.+20     	; 0x45c2 <__fp_round+0x20>
    45ae:	bb 0f       	add	r27, r27
    45b0:	40 f4       	brcc	.+16     	; 0x45c2 <__fp_round+0x20>
    45b2:	bf 2b       	or	r27, r31
    45b4:	11 f4       	brne	.+4      	; 0x45ba <__fp_round+0x18>
    45b6:	60 ff       	sbrs	r22, 0
    45b8:	04 c0       	rjmp	.+8      	; 0x45c2 <__fp_round+0x20>
    45ba:	6f 5f       	subi	r22, 0xFF	; 255
    45bc:	7f 4f       	sbci	r23, 0xFF	; 255
    45be:	8f 4f       	sbci	r24, 0xFF	; 255
    45c0:	9f 4f       	sbci	r25, 0xFF	; 255
    45c2:	08 95       	ret

000045c4 <__gesf2>:
    45c4:	69 d0       	rcall	.+210    	; 0x4698 <__fp_cmp>
    45c6:	08 f4       	brcc	.+2      	; 0x45ca <__gesf2+0x6>
    45c8:	8f ef       	ldi	r24, 0xFF	; 255
    45ca:	08 95       	ret

000045cc <__mulsf3>:
    45cc:	0c d0       	rcall	.+24     	; 0x45e6 <__mulsf3x>
    45ce:	e9 cf       	rjmp	.-46     	; 0x45a2 <__fp_round>
    45d0:	da df       	rcall	.-76     	; 0x4586 <__fp_pscA>
    45d2:	28 f0       	brcs	.+10     	; 0x45de <__mulsf3+0x12>
    45d4:	df df       	rcall	.-66     	; 0x4594 <__fp_pscB>
    45d6:	18 f0       	brcs	.+6      	; 0x45de <__mulsf3+0x12>
    45d8:	95 23       	and	r25, r21
    45da:	09 f0       	breq	.+2      	; 0x45de <__mulsf3+0x12>
    45dc:	cb cf       	rjmp	.-106    	; 0x4574 <__fp_inf>
    45de:	d0 cf       	rjmp	.-96     	; 0x4580 <__fp_nan>
    45e0:	11 24       	eor	r1, r1
    45e2:	0c 94 b2 13 	jmp	0x2764	; 0x2764 <__fp_szero>

000045e6 <__mulsf3x>:
    45e6:	0e 94 8f 13 	call	0x271e	; 0x271e <__fp_split3>
    45ea:	90 f3       	brcs	.-28     	; 0x45d0 <__mulsf3+0x4>

000045ec <__mulsf3_pse>:
    45ec:	95 9f       	mul	r25, r21
    45ee:	c1 f3       	breq	.-16     	; 0x45e0 <__mulsf3+0x14>
    45f0:	95 0f       	add	r25, r21
    45f2:	50 e0       	ldi	r21, 0x00	; 0
    45f4:	55 1f       	adc	r21, r21
    45f6:	62 9f       	mul	r22, r18
    45f8:	f0 01       	movw	r30, r0
    45fa:	72 9f       	mul	r23, r18
    45fc:	bb 27       	eor	r27, r27
    45fe:	f0 0d       	add	r31, r0
    4600:	b1 1d       	adc	r27, r1
    4602:	63 9f       	mul	r22, r19
    4604:	aa 27       	eor	r26, r26
    4606:	f0 0d       	add	r31, r0
    4608:	b1 1d       	adc	r27, r1
    460a:	aa 1f       	adc	r26, r26
    460c:	64 9f       	mul	r22, r20
    460e:	66 27       	eor	r22, r22
    4610:	b0 0d       	add	r27, r0
    4612:	a1 1d       	adc	r26, r1
    4614:	66 1f       	adc	r22, r22
    4616:	82 9f       	mul	r24, r18
    4618:	22 27       	eor	r18, r18
    461a:	b0 0d       	add	r27, r0
    461c:	a1 1d       	adc	r26, r1
    461e:	62 1f       	adc	r22, r18
    4620:	73 9f       	mul	r23, r19
    4622:	b0 0d       	add	r27, r0
    4624:	a1 1d       	adc	r26, r1
    4626:	62 1f       	adc	r22, r18
    4628:	83 9f       	mul	r24, r19
    462a:	a0 0d       	add	r26, r0
    462c:	61 1d       	adc	r22, r1
    462e:	22 1f       	adc	r18, r18
    4630:	74 9f       	mul	r23, r20
    4632:	33 27       	eor	r19, r19
    4634:	a0 0d       	add	r26, r0
    4636:	61 1d       	adc	r22, r1
    4638:	23 1f       	adc	r18, r19
    463a:	84 9f       	mul	r24, r20
    463c:	60 0d       	add	r22, r0
    463e:	21 1d       	adc	r18, r1
    4640:	82 2f       	mov	r24, r18
    4642:	76 2f       	mov	r23, r22
    4644:	6a 2f       	mov	r22, r26
    4646:	11 24       	eor	r1, r1
    4648:	9f 57       	subi	r25, 0x7F	; 127
    464a:	50 40       	sbci	r21, 0x00	; 0
    464c:	92 f0       	brmi	.+36     	; 0x4672 <__mulsf3_pse+0x86>
    464e:	e9 f0       	breq	.+58     	; 0x468a <__mulsf3_pse+0x9e>
    4650:	88 23       	and	r24, r24
    4652:	4a f0       	brmi	.+18     	; 0x4666 <__mulsf3_pse+0x7a>
    4654:	ee 0f       	add	r30, r30
    4656:	ff 1f       	adc	r31, r31
    4658:	bb 1f       	adc	r27, r27
    465a:	66 1f       	adc	r22, r22
    465c:	77 1f       	adc	r23, r23
    465e:	88 1f       	adc	r24, r24
    4660:	91 50       	subi	r25, 0x01	; 1
    4662:	50 40       	sbci	r21, 0x00	; 0
    4664:	a9 f7       	brne	.-22     	; 0x4650 <__mulsf3_pse+0x64>
    4666:	9e 3f       	cpi	r25, 0xFE	; 254
    4668:	51 05       	cpc	r21, r1
    466a:	78 f0       	brcs	.+30     	; 0x468a <__mulsf3_pse+0x9e>
    466c:	83 cf       	rjmp	.-250    	; 0x4574 <__fp_inf>
    466e:	0c 94 b2 13 	jmp	0x2764	; 0x2764 <__fp_szero>
    4672:	5f 3f       	cpi	r21, 0xFF	; 255
    4674:	e4 f3       	brlt	.-8      	; 0x466e <__mulsf3_pse+0x82>
    4676:	98 3e       	cpi	r25, 0xE8	; 232
    4678:	d4 f3       	brlt	.-12     	; 0x466e <__mulsf3_pse+0x82>
    467a:	86 95       	lsr	r24
    467c:	77 95       	ror	r23
    467e:	67 95       	ror	r22
    4680:	b7 95       	ror	r27
    4682:	f7 95       	ror	r31
    4684:	e7 95       	ror	r30
    4686:	9f 5f       	subi	r25, 0xFF	; 255
    4688:	c1 f7       	brne	.-16     	; 0x467a <__mulsf3_pse+0x8e>
    468a:	fe 2b       	or	r31, r30
    468c:	88 0f       	add	r24, r24
    468e:	91 1d       	adc	r25, r1
    4690:	96 95       	lsr	r25
    4692:	87 95       	ror	r24
    4694:	97 f9       	bld	r25, 7
    4696:	08 95       	ret

00004698 <__fp_cmp>:
    4698:	99 0f       	add	r25, r25
    469a:	00 08       	sbc	r0, r0
    469c:	55 0f       	add	r21, r21
    469e:	aa 0b       	sbc	r26, r26
    46a0:	e0 e8       	ldi	r30, 0x80	; 128
    46a2:	fe ef       	ldi	r31, 0xFE	; 254
    46a4:	16 16       	cp	r1, r22
    46a6:	17 06       	cpc	r1, r23
    46a8:	e8 07       	cpc	r30, r24
    46aa:	f9 07       	cpc	r31, r25
    46ac:	c0 f0       	brcs	.+48     	; 0x46de <__fp_cmp+0x46>
    46ae:	12 16       	cp	r1, r18
    46b0:	13 06       	cpc	r1, r19
    46b2:	e4 07       	cpc	r30, r20
    46b4:	f5 07       	cpc	r31, r21
    46b6:	98 f0       	brcs	.+38     	; 0x46de <__fp_cmp+0x46>
    46b8:	62 1b       	sub	r22, r18
    46ba:	73 0b       	sbc	r23, r19
    46bc:	84 0b       	sbc	r24, r20
    46be:	95 0b       	sbc	r25, r21
    46c0:	39 f4       	brne	.+14     	; 0x46d0 <__fp_cmp+0x38>
    46c2:	0a 26       	eor	r0, r26
    46c4:	61 f0       	breq	.+24     	; 0x46de <__fp_cmp+0x46>
    46c6:	23 2b       	or	r18, r19
    46c8:	24 2b       	or	r18, r20
    46ca:	25 2b       	or	r18, r21
    46cc:	21 f4       	brne	.+8      	; 0x46d6 <__fp_cmp+0x3e>
    46ce:	08 95       	ret
    46d0:	0a 26       	eor	r0, r26
    46d2:	09 f4       	brne	.+2      	; 0x46d6 <__fp_cmp+0x3e>
    46d4:	a1 40       	sbci	r26, 0x01	; 1
    46d6:	a6 95       	lsr	r26
    46d8:	8f ef       	ldi	r24, 0xFF	; 255
    46da:	81 1d       	adc	r24, r1
    46dc:	81 1d       	adc	r24, r1
    46de:	08 95       	ret

000046e0 <__udivmodsi4>:
    46e0:	a1 e2       	ldi	r26, 0x21	; 33
    46e2:	1a 2e       	mov	r1, r26
    46e4:	aa 1b       	sub	r26, r26
    46e6:	bb 1b       	sub	r27, r27
    46e8:	fd 01       	movw	r30, r26
    46ea:	0d c0       	rjmp	.+26     	; 0x4706 <__udivmodsi4_ep>

000046ec <__udivmodsi4_loop>:
    46ec:	aa 1f       	adc	r26, r26
    46ee:	bb 1f       	adc	r27, r27
    46f0:	ee 1f       	adc	r30, r30
    46f2:	ff 1f       	adc	r31, r31
    46f4:	a2 17       	cp	r26, r18
    46f6:	b3 07       	cpc	r27, r19
    46f8:	e4 07       	cpc	r30, r20
    46fa:	f5 07       	cpc	r31, r21
    46fc:	20 f0       	brcs	.+8      	; 0x4706 <__udivmodsi4_ep>
    46fe:	a2 1b       	sub	r26, r18
    4700:	b3 0b       	sbc	r27, r19
    4702:	e4 0b       	sbc	r30, r20
    4704:	f5 0b       	sbc	r31, r21

00004706 <__udivmodsi4_ep>:
    4706:	66 1f       	adc	r22, r22
    4708:	77 1f       	adc	r23, r23
    470a:	88 1f       	adc	r24, r24
    470c:	99 1f       	adc	r25, r25
    470e:	1a 94       	dec	r1
    4710:	69 f7       	brne	.-38     	; 0x46ec <__udivmodsi4_loop>
    4712:	60 95       	com	r22
    4714:	70 95       	com	r23
    4716:	80 95       	com	r24
    4718:	90 95       	com	r25
    471a:	9b 01       	movw	r18, r22
    471c:	ac 01       	movw	r20, r24
    471e:	bd 01       	movw	r22, r26
    4720:	cf 01       	movw	r24, r30
    4722:	08 95       	ret

00004724 <__tablejump2__>:
    4724:	ee 0f       	add	r30, r30
    4726:	ff 1f       	adc	r31, r31
    4728:	88 1f       	adc	r24, r24
    472a:	8b bf       	out	0x3b, r24	; 59
    472c:	07 90       	elpm	r0, Z+
    472e:	f6 91       	elpm	r31, Z
    4730:	e0 2d       	mov	r30, r0
    4732:	19 94       	eijmp

00004734 <calloc>:
    4734:	0f 93       	push	r16
    4736:	1f 93       	push	r17
    4738:	cf 93       	push	r28
    473a:	df 93       	push	r29
    473c:	86 9f       	mul	r24, r22
    473e:	80 01       	movw	r16, r0
    4740:	87 9f       	mul	r24, r23
    4742:	10 0d       	add	r17, r0
    4744:	96 9f       	mul	r25, r22
    4746:	10 0d       	add	r17, r0
    4748:	11 24       	eor	r1, r1
    474a:	c8 01       	movw	r24, r16
    474c:	0d d0       	rcall	.+26     	; 0x4768 <malloc>
    474e:	ec 01       	movw	r28, r24
    4750:	00 97       	sbiw	r24, 0x00	; 0
    4752:	21 f0       	breq	.+8      	; 0x475c <calloc+0x28>
    4754:	a8 01       	movw	r20, r16
    4756:	60 e0       	ldi	r22, 0x00	; 0
    4758:	70 e0       	ldi	r23, 0x00	; 0
    475a:	34 d1       	rcall	.+616    	; 0x49c4 <memset>
    475c:	ce 01       	movw	r24, r28
    475e:	df 91       	pop	r29
    4760:	cf 91       	pop	r28
    4762:	1f 91       	pop	r17
    4764:	0f 91       	pop	r16
    4766:	08 95       	ret

00004768 <malloc>:
    4768:	0f 93       	push	r16
    476a:	1f 93       	push	r17
    476c:	cf 93       	push	r28
    476e:	df 93       	push	r29
    4770:	82 30       	cpi	r24, 0x02	; 2
    4772:	91 05       	cpc	r25, r1
    4774:	10 f4       	brcc	.+4      	; 0x477a <malloc+0x12>
    4776:	82 e0       	ldi	r24, 0x02	; 2
    4778:	90 e0       	ldi	r25, 0x00	; 0
    477a:	e0 91 4a 0a 	lds	r30, 0x0A4A	; 0x800a4a <__flp>
    477e:	f0 91 4b 0a 	lds	r31, 0x0A4B	; 0x800a4b <__flp+0x1>
    4782:	20 e0       	ldi	r18, 0x00	; 0
    4784:	30 e0       	ldi	r19, 0x00	; 0
    4786:	a0 e0       	ldi	r26, 0x00	; 0
    4788:	b0 e0       	ldi	r27, 0x00	; 0
    478a:	30 97       	sbiw	r30, 0x00	; 0
    478c:	19 f1       	breq	.+70     	; 0x47d4 <malloc+0x6c>
    478e:	40 81       	ld	r20, Z
    4790:	51 81       	ldd	r21, Z+1	; 0x01
    4792:	02 81       	ldd	r16, Z+2	; 0x02
    4794:	13 81       	ldd	r17, Z+3	; 0x03
    4796:	48 17       	cp	r20, r24
    4798:	59 07       	cpc	r21, r25
    479a:	c8 f0       	brcs	.+50     	; 0x47ce <malloc+0x66>
    479c:	84 17       	cp	r24, r20
    479e:	95 07       	cpc	r25, r21
    47a0:	69 f4       	brne	.+26     	; 0x47bc <malloc+0x54>
    47a2:	10 97       	sbiw	r26, 0x00	; 0
    47a4:	31 f0       	breq	.+12     	; 0x47b2 <malloc+0x4a>
    47a6:	12 96       	adiw	r26, 0x02	; 2
    47a8:	0c 93       	st	X, r16
    47aa:	12 97       	sbiw	r26, 0x02	; 2
    47ac:	13 96       	adiw	r26, 0x03	; 3
    47ae:	1c 93       	st	X, r17
    47b0:	27 c0       	rjmp	.+78     	; 0x4800 <malloc+0x98>
    47b2:	00 93 4a 0a 	sts	0x0A4A, r16	; 0x800a4a <__flp>
    47b6:	10 93 4b 0a 	sts	0x0A4B, r17	; 0x800a4b <__flp+0x1>
    47ba:	22 c0       	rjmp	.+68     	; 0x4800 <malloc+0x98>
    47bc:	21 15       	cp	r18, r1
    47be:	31 05       	cpc	r19, r1
    47c0:	19 f0       	breq	.+6      	; 0x47c8 <malloc+0x60>
    47c2:	42 17       	cp	r20, r18
    47c4:	53 07       	cpc	r21, r19
    47c6:	18 f4       	brcc	.+6      	; 0x47ce <malloc+0x66>
    47c8:	9a 01       	movw	r18, r20
    47ca:	bd 01       	movw	r22, r26
    47cc:	ef 01       	movw	r28, r30
    47ce:	df 01       	movw	r26, r30
    47d0:	f8 01       	movw	r30, r16
    47d2:	db cf       	rjmp	.-74     	; 0x478a <malloc+0x22>
    47d4:	21 15       	cp	r18, r1
    47d6:	31 05       	cpc	r19, r1
    47d8:	f9 f0       	breq	.+62     	; 0x4818 <malloc+0xb0>
    47da:	28 1b       	sub	r18, r24
    47dc:	39 0b       	sbc	r19, r25
    47de:	24 30       	cpi	r18, 0x04	; 4
    47e0:	31 05       	cpc	r19, r1
    47e2:	80 f4       	brcc	.+32     	; 0x4804 <malloc+0x9c>
    47e4:	8a 81       	ldd	r24, Y+2	; 0x02
    47e6:	9b 81       	ldd	r25, Y+3	; 0x03
    47e8:	61 15       	cp	r22, r1
    47ea:	71 05       	cpc	r23, r1
    47ec:	21 f0       	breq	.+8      	; 0x47f6 <malloc+0x8e>
    47ee:	fb 01       	movw	r30, r22
    47f0:	93 83       	std	Z+3, r25	; 0x03
    47f2:	82 83       	std	Z+2, r24	; 0x02
    47f4:	04 c0       	rjmp	.+8      	; 0x47fe <malloc+0x96>
    47f6:	90 93 4b 0a 	sts	0x0A4B, r25	; 0x800a4b <__flp+0x1>
    47fa:	80 93 4a 0a 	sts	0x0A4A, r24	; 0x800a4a <__flp>
    47fe:	fe 01       	movw	r30, r28
    4800:	32 96       	adiw	r30, 0x02	; 2
    4802:	44 c0       	rjmp	.+136    	; 0x488c <malloc+0x124>
    4804:	fe 01       	movw	r30, r28
    4806:	e2 0f       	add	r30, r18
    4808:	f3 1f       	adc	r31, r19
    480a:	81 93       	st	Z+, r24
    480c:	91 93       	st	Z+, r25
    480e:	22 50       	subi	r18, 0x02	; 2
    4810:	31 09       	sbc	r19, r1
    4812:	39 83       	std	Y+1, r19	; 0x01
    4814:	28 83       	st	Y, r18
    4816:	3a c0       	rjmp	.+116    	; 0x488c <malloc+0x124>
    4818:	20 91 48 0a 	lds	r18, 0x0A48	; 0x800a48 <__brkval>
    481c:	30 91 49 0a 	lds	r19, 0x0A49	; 0x800a49 <__brkval+0x1>
    4820:	23 2b       	or	r18, r19
    4822:	41 f4       	brne	.+16     	; 0x4834 <malloc+0xcc>
    4824:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    4828:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    482c:	30 93 49 0a 	sts	0x0A49, r19	; 0x800a49 <__brkval+0x1>
    4830:	20 93 48 0a 	sts	0x0A48, r18	; 0x800a48 <__brkval>
    4834:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    4838:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    483c:	21 15       	cp	r18, r1
    483e:	31 05       	cpc	r19, r1
    4840:	41 f4       	brne	.+16     	; 0x4852 <malloc+0xea>
    4842:	2d b7       	in	r18, 0x3d	; 61
    4844:	3e b7       	in	r19, 0x3e	; 62
    4846:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    484a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    484e:	24 1b       	sub	r18, r20
    4850:	35 0b       	sbc	r19, r21
    4852:	e0 91 48 0a 	lds	r30, 0x0A48	; 0x800a48 <__brkval>
    4856:	f0 91 49 0a 	lds	r31, 0x0A49	; 0x800a49 <__brkval+0x1>
    485a:	e2 17       	cp	r30, r18
    485c:	f3 07       	cpc	r31, r19
    485e:	a0 f4       	brcc	.+40     	; 0x4888 <malloc+0x120>
    4860:	2e 1b       	sub	r18, r30
    4862:	3f 0b       	sbc	r19, r31
    4864:	28 17       	cp	r18, r24
    4866:	39 07       	cpc	r19, r25
    4868:	78 f0       	brcs	.+30     	; 0x4888 <malloc+0x120>
    486a:	ac 01       	movw	r20, r24
    486c:	4e 5f       	subi	r20, 0xFE	; 254
    486e:	5f 4f       	sbci	r21, 0xFF	; 255
    4870:	24 17       	cp	r18, r20
    4872:	35 07       	cpc	r19, r21
    4874:	48 f0       	brcs	.+18     	; 0x4888 <malloc+0x120>
    4876:	4e 0f       	add	r20, r30
    4878:	5f 1f       	adc	r21, r31
    487a:	50 93 49 0a 	sts	0x0A49, r21	; 0x800a49 <__brkval+0x1>
    487e:	40 93 48 0a 	sts	0x0A48, r20	; 0x800a48 <__brkval>
    4882:	81 93       	st	Z+, r24
    4884:	91 93       	st	Z+, r25
    4886:	02 c0       	rjmp	.+4      	; 0x488c <malloc+0x124>
    4888:	e0 e0       	ldi	r30, 0x00	; 0
    488a:	f0 e0       	ldi	r31, 0x00	; 0
    488c:	cf 01       	movw	r24, r30
    488e:	df 91       	pop	r29
    4890:	cf 91       	pop	r28
    4892:	1f 91       	pop	r17
    4894:	0f 91       	pop	r16
    4896:	08 95       	ret

00004898 <free>:
    4898:	cf 93       	push	r28
    489a:	df 93       	push	r29
    489c:	00 97       	sbiw	r24, 0x00	; 0
    489e:	09 f4       	brne	.+2      	; 0x48a2 <free+0xa>
    48a0:	81 c0       	rjmp	.+258    	; 0x49a4 <free+0x10c>
    48a2:	fc 01       	movw	r30, r24
    48a4:	32 97       	sbiw	r30, 0x02	; 2
    48a6:	13 82       	std	Z+3, r1	; 0x03
    48a8:	12 82       	std	Z+2, r1	; 0x02
    48aa:	a0 91 4a 0a 	lds	r26, 0x0A4A	; 0x800a4a <__flp>
    48ae:	b0 91 4b 0a 	lds	r27, 0x0A4B	; 0x800a4b <__flp+0x1>
    48b2:	10 97       	sbiw	r26, 0x00	; 0
    48b4:	81 f4       	brne	.+32     	; 0x48d6 <free+0x3e>
    48b6:	20 81       	ld	r18, Z
    48b8:	31 81       	ldd	r19, Z+1	; 0x01
    48ba:	82 0f       	add	r24, r18
    48bc:	93 1f       	adc	r25, r19
    48be:	20 91 48 0a 	lds	r18, 0x0A48	; 0x800a48 <__brkval>
    48c2:	30 91 49 0a 	lds	r19, 0x0A49	; 0x800a49 <__brkval+0x1>
    48c6:	28 17       	cp	r18, r24
    48c8:	39 07       	cpc	r19, r25
    48ca:	51 f5       	brne	.+84     	; 0x4920 <free+0x88>
    48cc:	f0 93 49 0a 	sts	0x0A49, r31	; 0x800a49 <__brkval+0x1>
    48d0:	e0 93 48 0a 	sts	0x0A48, r30	; 0x800a48 <__brkval>
    48d4:	67 c0       	rjmp	.+206    	; 0x49a4 <free+0x10c>
    48d6:	ed 01       	movw	r28, r26
    48d8:	20 e0       	ldi	r18, 0x00	; 0
    48da:	30 e0       	ldi	r19, 0x00	; 0
    48dc:	ce 17       	cp	r28, r30
    48de:	df 07       	cpc	r29, r31
    48e0:	40 f4       	brcc	.+16     	; 0x48f2 <free+0x5a>
    48e2:	4a 81       	ldd	r20, Y+2	; 0x02
    48e4:	5b 81       	ldd	r21, Y+3	; 0x03
    48e6:	9e 01       	movw	r18, r28
    48e8:	41 15       	cp	r20, r1
    48ea:	51 05       	cpc	r21, r1
    48ec:	f1 f0       	breq	.+60     	; 0x492a <free+0x92>
    48ee:	ea 01       	movw	r28, r20
    48f0:	f5 cf       	rjmp	.-22     	; 0x48dc <free+0x44>
    48f2:	d3 83       	std	Z+3, r29	; 0x03
    48f4:	c2 83       	std	Z+2, r28	; 0x02
    48f6:	40 81       	ld	r20, Z
    48f8:	51 81       	ldd	r21, Z+1	; 0x01
    48fa:	84 0f       	add	r24, r20
    48fc:	95 1f       	adc	r25, r21
    48fe:	c8 17       	cp	r28, r24
    4900:	d9 07       	cpc	r29, r25
    4902:	59 f4       	brne	.+22     	; 0x491a <free+0x82>
    4904:	88 81       	ld	r24, Y
    4906:	99 81       	ldd	r25, Y+1	; 0x01
    4908:	84 0f       	add	r24, r20
    490a:	95 1f       	adc	r25, r21
    490c:	02 96       	adiw	r24, 0x02	; 2
    490e:	91 83       	std	Z+1, r25	; 0x01
    4910:	80 83       	st	Z, r24
    4912:	8a 81       	ldd	r24, Y+2	; 0x02
    4914:	9b 81       	ldd	r25, Y+3	; 0x03
    4916:	93 83       	std	Z+3, r25	; 0x03
    4918:	82 83       	std	Z+2, r24	; 0x02
    491a:	21 15       	cp	r18, r1
    491c:	31 05       	cpc	r19, r1
    491e:	29 f4       	brne	.+10     	; 0x492a <free+0x92>
    4920:	f0 93 4b 0a 	sts	0x0A4B, r31	; 0x800a4b <__flp+0x1>
    4924:	e0 93 4a 0a 	sts	0x0A4A, r30	; 0x800a4a <__flp>
    4928:	3d c0       	rjmp	.+122    	; 0x49a4 <free+0x10c>
    492a:	e9 01       	movw	r28, r18
    492c:	fb 83       	std	Y+3, r31	; 0x03
    492e:	ea 83       	std	Y+2, r30	; 0x02
    4930:	49 91       	ld	r20, Y+
    4932:	59 91       	ld	r21, Y+
    4934:	c4 0f       	add	r28, r20
    4936:	d5 1f       	adc	r29, r21
    4938:	ec 17       	cp	r30, r28
    493a:	fd 07       	cpc	r31, r29
    493c:	61 f4       	brne	.+24     	; 0x4956 <free+0xbe>
    493e:	80 81       	ld	r24, Z
    4940:	91 81       	ldd	r25, Z+1	; 0x01
    4942:	84 0f       	add	r24, r20
    4944:	95 1f       	adc	r25, r21
    4946:	02 96       	adiw	r24, 0x02	; 2
    4948:	e9 01       	movw	r28, r18
    494a:	99 83       	std	Y+1, r25	; 0x01
    494c:	88 83       	st	Y, r24
    494e:	82 81       	ldd	r24, Z+2	; 0x02
    4950:	93 81       	ldd	r25, Z+3	; 0x03
    4952:	9b 83       	std	Y+3, r25	; 0x03
    4954:	8a 83       	std	Y+2, r24	; 0x02
    4956:	e0 e0       	ldi	r30, 0x00	; 0
    4958:	f0 e0       	ldi	r31, 0x00	; 0
    495a:	12 96       	adiw	r26, 0x02	; 2
    495c:	8d 91       	ld	r24, X+
    495e:	9c 91       	ld	r25, X
    4960:	13 97       	sbiw	r26, 0x03	; 3
    4962:	00 97       	sbiw	r24, 0x00	; 0
    4964:	19 f0       	breq	.+6      	; 0x496c <free+0xd4>
    4966:	fd 01       	movw	r30, r26
    4968:	dc 01       	movw	r26, r24
    496a:	f7 cf       	rjmp	.-18     	; 0x495a <free+0xc2>
    496c:	8d 91       	ld	r24, X+
    496e:	9c 91       	ld	r25, X
    4970:	11 97       	sbiw	r26, 0x01	; 1
    4972:	9d 01       	movw	r18, r26
    4974:	2e 5f       	subi	r18, 0xFE	; 254
    4976:	3f 4f       	sbci	r19, 0xFF	; 255
    4978:	82 0f       	add	r24, r18
    497a:	93 1f       	adc	r25, r19
    497c:	20 91 48 0a 	lds	r18, 0x0A48	; 0x800a48 <__brkval>
    4980:	30 91 49 0a 	lds	r19, 0x0A49	; 0x800a49 <__brkval+0x1>
    4984:	28 17       	cp	r18, r24
    4986:	39 07       	cpc	r19, r25
    4988:	69 f4       	brne	.+26     	; 0x49a4 <free+0x10c>
    498a:	30 97       	sbiw	r30, 0x00	; 0
    498c:	29 f4       	brne	.+10     	; 0x4998 <free+0x100>
    498e:	10 92 4b 0a 	sts	0x0A4B, r1	; 0x800a4b <__flp+0x1>
    4992:	10 92 4a 0a 	sts	0x0A4A, r1	; 0x800a4a <__flp>
    4996:	02 c0       	rjmp	.+4      	; 0x499c <free+0x104>
    4998:	13 82       	std	Z+3, r1	; 0x03
    499a:	12 82       	std	Z+2, r1	; 0x02
    499c:	b0 93 49 0a 	sts	0x0A49, r27	; 0x800a49 <__brkval+0x1>
    49a0:	a0 93 48 0a 	sts	0x0A48, r26	; 0x800a48 <__brkval>
    49a4:	df 91       	pop	r29
    49a6:	cf 91       	pop	r28
    49a8:	08 95       	ret

000049aa <abort>:
    49aa:	81 e0       	ldi	r24, 0x01	; 1
    49ac:	90 e0       	ldi	r25, 0x00	; 0
    49ae:	f8 94       	cli
    49b0:	58 c3       	rjmp	.+1712   	; 0x5062 <_exit>

000049b2 <memcpy>:
    49b2:	fb 01       	movw	r30, r22
    49b4:	dc 01       	movw	r26, r24
    49b6:	02 c0       	rjmp	.+4      	; 0x49bc <memcpy+0xa>
    49b8:	01 90       	ld	r0, Z+
    49ba:	0d 92       	st	X+, r0
    49bc:	41 50       	subi	r20, 0x01	; 1
    49be:	50 40       	sbci	r21, 0x00	; 0
    49c0:	d8 f7       	brcc	.-10     	; 0x49b8 <memcpy+0x6>
    49c2:	08 95       	ret

000049c4 <memset>:
    49c4:	dc 01       	movw	r26, r24
    49c6:	01 c0       	rjmp	.+2      	; 0x49ca <memset+0x6>
    49c8:	6d 93       	st	X+, r22
    49ca:	41 50       	subi	r20, 0x01	; 1
    49cc:	50 40       	sbci	r21, 0x00	; 0
    49ce:	e0 f7       	brcc	.-8      	; 0x49c8 <memset+0x4>
    49d0:	08 95       	ret

000049d2 <strcat>:
    49d2:	fb 01       	movw	r30, r22
    49d4:	dc 01       	movw	r26, r24
    49d6:	0d 90       	ld	r0, X+
    49d8:	00 20       	and	r0, r0
    49da:	e9 f7       	brne	.-6      	; 0x49d6 <strcat+0x4>
    49dc:	11 97       	sbiw	r26, 0x01	; 1
    49de:	01 90       	ld	r0, Z+
    49e0:	0d 92       	st	X+, r0
    49e2:	00 20       	and	r0, r0
    49e4:	e1 f7       	brne	.-8      	; 0x49de <strcat+0xc>
    49e6:	08 95       	ret

000049e8 <strcpy>:
    49e8:	fb 01       	movw	r30, r22
    49ea:	dc 01       	movw	r26, r24
    49ec:	01 90       	ld	r0, Z+
    49ee:	0d 92       	st	X+, r0
    49f0:	00 20       	and	r0, r0
    49f2:	e1 f7       	brne	.-8      	; 0x49ec <strcpy+0x4>
    49f4:	08 95       	ret

000049f6 <strncasecmp>:
    49f6:	fb 01       	movw	r30, r22
    49f8:	dc 01       	movw	r26, r24
    49fa:	41 50       	subi	r20, 0x01	; 1
    49fc:	50 40       	sbci	r21, 0x00	; 0
    49fe:	88 f0       	brcs	.+34     	; 0x4a22 <strncasecmp+0x2c>
    4a00:	8d 91       	ld	r24, X+
    4a02:	81 34       	cpi	r24, 0x41	; 65
    4a04:	1c f0       	brlt	.+6      	; 0x4a0c <strncasecmp+0x16>
    4a06:	8b 35       	cpi	r24, 0x5B	; 91
    4a08:	0c f4       	brge	.+2      	; 0x4a0c <strncasecmp+0x16>
    4a0a:	80 5e       	subi	r24, 0xE0	; 224
    4a0c:	61 91       	ld	r22, Z+
    4a0e:	61 34       	cpi	r22, 0x41	; 65
    4a10:	1c f0       	brlt	.+6      	; 0x4a18 <strncasecmp+0x22>
    4a12:	6b 35       	cpi	r22, 0x5B	; 91
    4a14:	0c f4       	brge	.+2      	; 0x4a18 <strncasecmp+0x22>
    4a16:	60 5e       	subi	r22, 0xE0	; 224
    4a18:	86 1b       	sub	r24, r22
    4a1a:	61 11       	cpse	r22, r1
    4a1c:	71 f3       	breq	.-36     	; 0x49fa <strncasecmp+0x4>
    4a1e:	99 0b       	sbc	r25, r25
    4a20:	08 95       	ret
    4a22:	88 1b       	sub	r24, r24
    4a24:	fc cf       	rjmp	.-8      	; 0x4a1e <strncasecmp+0x28>

00004a26 <printf>:
    4a26:	cf 93       	push	r28
    4a28:	df 93       	push	r29
    4a2a:	cd b7       	in	r28, 0x3d	; 61
    4a2c:	de b7       	in	r29, 0x3e	; 62
    4a2e:	ae 01       	movw	r20, r28
    4a30:	4a 5f       	subi	r20, 0xFA	; 250
    4a32:	5f 4f       	sbci	r21, 0xFF	; 255
    4a34:	fa 01       	movw	r30, r20
    4a36:	61 91       	ld	r22, Z+
    4a38:	71 91       	ld	r23, Z+
    4a3a:	af 01       	movw	r20, r30
    4a3c:	80 91 4e 0a 	lds	r24, 0x0A4E	; 0x800a4e <__iob+0x2>
    4a40:	90 91 4f 0a 	lds	r25, 0x0A4F	; 0x800a4f <__iob+0x3>
    4a44:	61 d0       	rcall	.+194    	; 0x4b08 <vfprintf>
    4a46:	df 91       	pop	r29
    4a48:	cf 91       	pop	r28
    4a4a:	08 95       	ret

00004a4c <puts>:
    4a4c:	0f 93       	push	r16
    4a4e:	1f 93       	push	r17
    4a50:	cf 93       	push	r28
    4a52:	df 93       	push	r29
    4a54:	e0 91 4e 0a 	lds	r30, 0x0A4E	; 0x800a4e <__iob+0x2>
    4a58:	f0 91 4f 0a 	lds	r31, 0x0A4F	; 0x800a4f <__iob+0x3>
    4a5c:	23 81       	ldd	r18, Z+3	; 0x03
    4a5e:	21 ff       	sbrs	r18, 1
    4a60:	1b c0       	rjmp	.+54     	; 0x4a98 <puts+0x4c>
    4a62:	8c 01       	movw	r16, r24
    4a64:	d0 e0       	ldi	r29, 0x00	; 0
    4a66:	c0 e0       	ldi	r28, 0x00	; 0
    4a68:	f8 01       	movw	r30, r16
    4a6a:	81 91       	ld	r24, Z+
    4a6c:	8f 01       	movw	r16, r30
    4a6e:	60 91 4e 0a 	lds	r22, 0x0A4E	; 0x800a4e <__iob+0x2>
    4a72:	70 91 4f 0a 	lds	r23, 0x0A4F	; 0x800a4f <__iob+0x3>
    4a76:	db 01       	movw	r26, r22
    4a78:	18 96       	adiw	r26, 0x08	; 8
    4a7a:	ed 91       	ld	r30, X+
    4a7c:	fc 91       	ld	r31, X
    4a7e:	19 97       	sbiw	r26, 0x09	; 9
    4a80:	88 23       	and	r24, r24
    4a82:	31 f0       	breq	.+12     	; 0x4a90 <puts+0x44>
    4a84:	19 95       	eicall
    4a86:	89 2b       	or	r24, r25
    4a88:	79 f3       	breq	.-34     	; 0x4a68 <puts+0x1c>
    4a8a:	df ef       	ldi	r29, 0xFF	; 255
    4a8c:	cf ef       	ldi	r28, 0xFF	; 255
    4a8e:	ec cf       	rjmp	.-40     	; 0x4a68 <puts+0x1c>
    4a90:	8a e0       	ldi	r24, 0x0A	; 10
    4a92:	19 95       	eicall
    4a94:	89 2b       	or	r24, r25
    4a96:	19 f0       	breq	.+6      	; 0x4a9e <puts+0x52>
    4a98:	8f ef       	ldi	r24, 0xFF	; 255
    4a9a:	9f ef       	ldi	r25, 0xFF	; 255
    4a9c:	02 c0       	rjmp	.+4      	; 0x4aa2 <puts+0x56>
    4a9e:	8d 2f       	mov	r24, r29
    4aa0:	9c 2f       	mov	r25, r28
    4aa2:	df 91       	pop	r29
    4aa4:	cf 91       	pop	r28
    4aa6:	1f 91       	pop	r17
    4aa8:	0f 91       	pop	r16
    4aaa:	08 95       	ret

00004aac <sprintf>:
    4aac:	0f 93       	push	r16
    4aae:	1f 93       	push	r17
    4ab0:	cf 93       	push	r28
    4ab2:	df 93       	push	r29
    4ab4:	cd b7       	in	r28, 0x3d	; 61
    4ab6:	de b7       	in	r29, 0x3e	; 62
    4ab8:	2e 97       	sbiw	r28, 0x0e	; 14
    4aba:	0f b6       	in	r0, 0x3f	; 63
    4abc:	f8 94       	cli
    4abe:	de bf       	out	0x3e, r29	; 62
    4ac0:	0f be       	out	0x3f, r0	; 63
    4ac2:	cd bf       	out	0x3d, r28	; 61
    4ac4:	0e 89       	ldd	r16, Y+22	; 0x16
    4ac6:	1f 89       	ldd	r17, Y+23	; 0x17
    4ac8:	86 e0       	ldi	r24, 0x06	; 6
    4aca:	8c 83       	std	Y+4, r24	; 0x04
    4acc:	1a 83       	std	Y+2, r17	; 0x02
    4ace:	09 83       	std	Y+1, r16	; 0x01
    4ad0:	8f ef       	ldi	r24, 0xFF	; 255
    4ad2:	9f e7       	ldi	r25, 0x7F	; 127
    4ad4:	9e 83       	std	Y+6, r25	; 0x06
    4ad6:	8d 83       	std	Y+5, r24	; 0x05
    4ad8:	ae 01       	movw	r20, r28
    4ada:	46 5e       	subi	r20, 0xE6	; 230
    4adc:	5f 4f       	sbci	r21, 0xFF	; 255
    4ade:	68 8d       	ldd	r22, Y+24	; 0x18
    4ae0:	79 8d       	ldd	r23, Y+25	; 0x19
    4ae2:	ce 01       	movw	r24, r28
    4ae4:	01 96       	adiw	r24, 0x01	; 1
    4ae6:	10 d0       	rcall	.+32     	; 0x4b08 <vfprintf>
    4ae8:	ef 81       	ldd	r30, Y+7	; 0x07
    4aea:	f8 85       	ldd	r31, Y+8	; 0x08
    4aec:	e0 0f       	add	r30, r16
    4aee:	f1 1f       	adc	r31, r17
    4af0:	10 82       	st	Z, r1
    4af2:	2e 96       	adiw	r28, 0x0e	; 14
    4af4:	0f b6       	in	r0, 0x3f	; 63
    4af6:	f8 94       	cli
    4af8:	de bf       	out	0x3e, r29	; 62
    4afa:	0f be       	out	0x3f, r0	; 63
    4afc:	cd bf       	out	0x3d, r28	; 61
    4afe:	df 91       	pop	r29
    4b00:	cf 91       	pop	r28
    4b02:	1f 91       	pop	r17
    4b04:	0f 91       	pop	r16
    4b06:	08 95       	ret

00004b08 <vfprintf>:
    4b08:	2f 92       	push	r2
    4b0a:	3f 92       	push	r3
    4b0c:	4f 92       	push	r4
    4b0e:	5f 92       	push	r5
    4b10:	6f 92       	push	r6
    4b12:	7f 92       	push	r7
    4b14:	8f 92       	push	r8
    4b16:	9f 92       	push	r9
    4b18:	af 92       	push	r10
    4b1a:	bf 92       	push	r11
    4b1c:	cf 92       	push	r12
    4b1e:	df 92       	push	r13
    4b20:	ef 92       	push	r14
    4b22:	ff 92       	push	r15
    4b24:	0f 93       	push	r16
    4b26:	1f 93       	push	r17
    4b28:	cf 93       	push	r28
    4b2a:	df 93       	push	r29
    4b2c:	cd b7       	in	r28, 0x3d	; 61
    4b2e:	de b7       	in	r29, 0x3e	; 62
    4b30:	2b 97       	sbiw	r28, 0x0b	; 11
    4b32:	0f b6       	in	r0, 0x3f	; 63
    4b34:	f8 94       	cli
    4b36:	de bf       	out	0x3e, r29	; 62
    4b38:	0f be       	out	0x3f, r0	; 63
    4b3a:	cd bf       	out	0x3d, r28	; 61
    4b3c:	6c 01       	movw	r12, r24
    4b3e:	7b 01       	movw	r14, r22
    4b40:	8a 01       	movw	r16, r20
    4b42:	fc 01       	movw	r30, r24
    4b44:	17 82       	std	Z+7, r1	; 0x07
    4b46:	16 82       	std	Z+6, r1	; 0x06
    4b48:	83 81       	ldd	r24, Z+3	; 0x03
    4b4a:	81 ff       	sbrs	r24, 1
    4b4c:	bf c1       	rjmp	.+894    	; 0x4ecc <vfprintf+0x3c4>
    4b4e:	ce 01       	movw	r24, r28
    4b50:	01 96       	adiw	r24, 0x01	; 1
    4b52:	3c 01       	movw	r6, r24
    4b54:	f6 01       	movw	r30, r12
    4b56:	93 81       	ldd	r25, Z+3	; 0x03
    4b58:	f7 01       	movw	r30, r14
    4b5a:	93 fd       	sbrc	r25, 3
    4b5c:	85 91       	lpm	r24, Z+
    4b5e:	93 ff       	sbrs	r25, 3
    4b60:	81 91       	ld	r24, Z+
    4b62:	7f 01       	movw	r14, r30
    4b64:	88 23       	and	r24, r24
    4b66:	09 f4       	brne	.+2      	; 0x4b6a <vfprintf+0x62>
    4b68:	ad c1       	rjmp	.+858    	; 0x4ec4 <vfprintf+0x3bc>
    4b6a:	85 32       	cpi	r24, 0x25	; 37
    4b6c:	39 f4       	brne	.+14     	; 0x4b7c <vfprintf+0x74>
    4b6e:	93 fd       	sbrc	r25, 3
    4b70:	85 91       	lpm	r24, Z+
    4b72:	93 ff       	sbrs	r25, 3
    4b74:	81 91       	ld	r24, Z+
    4b76:	7f 01       	movw	r14, r30
    4b78:	85 32       	cpi	r24, 0x25	; 37
    4b7a:	21 f4       	brne	.+8      	; 0x4b84 <vfprintf+0x7c>
    4b7c:	b6 01       	movw	r22, r12
    4b7e:	90 e0       	ldi	r25, 0x00	; 0
    4b80:	d6 d1       	rcall	.+940    	; 0x4f2e <fputc>
    4b82:	e8 cf       	rjmp	.-48     	; 0x4b54 <vfprintf+0x4c>
    4b84:	91 2c       	mov	r9, r1
    4b86:	21 2c       	mov	r2, r1
    4b88:	31 2c       	mov	r3, r1
    4b8a:	ff e1       	ldi	r31, 0x1F	; 31
    4b8c:	f3 15       	cp	r31, r3
    4b8e:	d8 f0       	brcs	.+54     	; 0x4bc6 <vfprintf+0xbe>
    4b90:	8b 32       	cpi	r24, 0x2B	; 43
    4b92:	79 f0       	breq	.+30     	; 0x4bb2 <vfprintf+0xaa>
    4b94:	38 f4       	brcc	.+14     	; 0x4ba4 <vfprintf+0x9c>
    4b96:	80 32       	cpi	r24, 0x20	; 32
    4b98:	79 f0       	breq	.+30     	; 0x4bb8 <vfprintf+0xb0>
    4b9a:	83 32       	cpi	r24, 0x23	; 35
    4b9c:	a1 f4       	brne	.+40     	; 0x4bc6 <vfprintf+0xbe>
    4b9e:	23 2d       	mov	r18, r3
    4ba0:	20 61       	ori	r18, 0x10	; 16
    4ba2:	1d c0       	rjmp	.+58     	; 0x4bde <vfprintf+0xd6>
    4ba4:	8d 32       	cpi	r24, 0x2D	; 45
    4ba6:	61 f0       	breq	.+24     	; 0x4bc0 <vfprintf+0xb8>
    4ba8:	80 33       	cpi	r24, 0x30	; 48
    4baa:	69 f4       	brne	.+26     	; 0x4bc6 <vfprintf+0xbe>
    4bac:	23 2d       	mov	r18, r3
    4bae:	21 60       	ori	r18, 0x01	; 1
    4bb0:	16 c0       	rjmp	.+44     	; 0x4bde <vfprintf+0xd6>
    4bb2:	83 2d       	mov	r24, r3
    4bb4:	82 60       	ori	r24, 0x02	; 2
    4bb6:	38 2e       	mov	r3, r24
    4bb8:	e3 2d       	mov	r30, r3
    4bba:	e4 60       	ori	r30, 0x04	; 4
    4bbc:	3e 2e       	mov	r3, r30
    4bbe:	2a c0       	rjmp	.+84     	; 0x4c14 <vfprintf+0x10c>
    4bc0:	f3 2d       	mov	r31, r3
    4bc2:	f8 60       	ori	r31, 0x08	; 8
    4bc4:	1d c0       	rjmp	.+58     	; 0x4c00 <vfprintf+0xf8>
    4bc6:	37 fc       	sbrc	r3, 7
    4bc8:	2d c0       	rjmp	.+90     	; 0x4c24 <vfprintf+0x11c>
    4bca:	20 ed       	ldi	r18, 0xD0	; 208
    4bcc:	28 0f       	add	r18, r24
    4bce:	2a 30       	cpi	r18, 0x0A	; 10
    4bd0:	40 f0       	brcs	.+16     	; 0x4be2 <vfprintf+0xda>
    4bd2:	8e 32       	cpi	r24, 0x2E	; 46
    4bd4:	b9 f4       	brne	.+46     	; 0x4c04 <vfprintf+0xfc>
    4bd6:	36 fc       	sbrc	r3, 6
    4bd8:	75 c1       	rjmp	.+746    	; 0x4ec4 <vfprintf+0x3bc>
    4bda:	23 2d       	mov	r18, r3
    4bdc:	20 64       	ori	r18, 0x40	; 64
    4bde:	32 2e       	mov	r3, r18
    4be0:	19 c0       	rjmp	.+50     	; 0x4c14 <vfprintf+0x10c>
    4be2:	36 fe       	sbrs	r3, 6
    4be4:	06 c0       	rjmp	.+12     	; 0x4bf2 <vfprintf+0xea>
    4be6:	8a e0       	ldi	r24, 0x0A	; 10
    4be8:	98 9e       	mul	r9, r24
    4bea:	20 0d       	add	r18, r0
    4bec:	11 24       	eor	r1, r1
    4bee:	92 2e       	mov	r9, r18
    4bf0:	11 c0       	rjmp	.+34     	; 0x4c14 <vfprintf+0x10c>
    4bf2:	ea e0       	ldi	r30, 0x0A	; 10
    4bf4:	2e 9e       	mul	r2, r30
    4bf6:	20 0d       	add	r18, r0
    4bf8:	11 24       	eor	r1, r1
    4bfa:	22 2e       	mov	r2, r18
    4bfc:	f3 2d       	mov	r31, r3
    4bfe:	f0 62       	ori	r31, 0x20	; 32
    4c00:	3f 2e       	mov	r3, r31
    4c02:	08 c0       	rjmp	.+16     	; 0x4c14 <vfprintf+0x10c>
    4c04:	8c 36       	cpi	r24, 0x6C	; 108
    4c06:	21 f4       	brne	.+8      	; 0x4c10 <vfprintf+0x108>
    4c08:	83 2d       	mov	r24, r3
    4c0a:	80 68       	ori	r24, 0x80	; 128
    4c0c:	38 2e       	mov	r3, r24
    4c0e:	02 c0       	rjmp	.+4      	; 0x4c14 <vfprintf+0x10c>
    4c10:	88 36       	cpi	r24, 0x68	; 104
    4c12:	41 f4       	brne	.+16     	; 0x4c24 <vfprintf+0x11c>
    4c14:	f7 01       	movw	r30, r14
    4c16:	93 fd       	sbrc	r25, 3
    4c18:	85 91       	lpm	r24, Z+
    4c1a:	93 ff       	sbrs	r25, 3
    4c1c:	81 91       	ld	r24, Z+
    4c1e:	7f 01       	movw	r14, r30
    4c20:	81 11       	cpse	r24, r1
    4c22:	b3 cf       	rjmp	.-154    	; 0x4b8a <vfprintf+0x82>
    4c24:	98 2f       	mov	r25, r24
    4c26:	9f 7d       	andi	r25, 0xDF	; 223
    4c28:	95 54       	subi	r25, 0x45	; 69
    4c2a:	93 30       	cpi	r25, 0x03	; 3
    4c2c:	28 f4       	brcc	.+10     	; 0x4c38 <vfprintf+0x130>
    4c2e:	0c 5f       	subi	r16, 0xFC	; 252
    4c30:	1f 4f       	sbci	r17, 0xFF	; 255
    4c32:	9f e3       	ldi	r25, 0x3F	; 63
    4c34:	99 83       	std	Y+1, r25	; 0x01
    4c36:	0d c0       	rjmp	.+26     	; 0x4c52 <vfprintf+0x14a>
    4c38:	83 36       	cpi	r24, 0x63	; 99
    4c3a:	31 f0       	breq	.+12     	; 0x4c48 <vfprintf+0x140>
    4c3c:	83 37       	cpi	r24, 0x73	; 115
    4c3e:	71 f0       	breq	.+28     	; 0x4c5c <vfprintf+0x154>
    4c40:	83 35       	cpi	r24, 0x53	; 83
    4c42:	09 f0       	breq	.+2      	; 0x4c46 <vfprintf+0x13e>
    4c44:	55 c0       	rjmp	.+170    	; 0x4cf0 <vfprintf+0x1e8>
    4c46:	20 c0       	rjmp	.+64     	; 0x4c88 <vfprintf+0x180>
    4c48:	f8 01       	movw	r30, r16
    4c4a:	80 81       	ld	r24, Z
    4c4c:	89 83       	std	Y+1, r24	; 0x01
    4c4e:	0e 5f       	subi	r16, 0xFE	; 254
    4c50:	1f 4f       	sbci	r17, 0xFF	; 255
    4c52:	88 24       	eor	r8, r8
    4c54:	83 94       	inc	r8
    4c56:	91 2c       	mov	r9, r1
    4c58:	53 01       	movw	r10, r6
    4c5a:	12 c0       	rjmp	.+36     	; 0x4c80 <vfprintf+0x178>
    4c5c:	28 01       	movw	r4, r16
    4c5e:	f2 e0       	ldi	r31, 0x02	; 2
    4c60:	4f 0e       	add	r4, r31
    4c62:	51 1c       	adc	r5, r1
    4c64:	f8 01       	movw	r30, r16
    4c66:	a0 80       	ld	r10, Z
    4c68:	b1 80       	ldd	r11, Z+1	; 0x01
    4c6a:	36 fe       	sbrs	r3, 6
    4c6c:	03 c0       	rjmp	.+6      	; 0x4c74 <vfprintf+0x16c>
    4c6e:	69 2d       	mov	r22, r9
    4c70:	70 e0       	ldi	r23, 0x00	; 0
    4c72:	02 c0       	rjmp	.+4      	; 0x4c78 <vfprintf+0x170>
    4c74:	6f ef       	ldi	r22, 0xFF	; 255
    4c76:	7f ef       	ldi	r23, 0xFF	; 255
    4c78:	c5 01       	movw	r24, r10
    4c7a:	4e d1       	rcall	.+668    	; 0x4f18 <strnlen>
    4c7c:	4c 01       	movw	r8, r24
    4c7e:	82 01       	movw	r16, r4
    4c80:	f3 2d       	mov	r31, r3
    4c82:	ff 77       	andi	r31, 0x7F	; 127
    4c84:	3f 2e       	mov	r3, r31
    4c86:	15 c0       	rjmp	.+42     	; 0x4cb2 <vfprintf+0x1aa>
    4c88:	28 01       	movw	r4, r16
    4c8a:	22 e0       	ldi	r18, 0x02	; 2
    4c8c:	42 0e       	add	r4, r18
    4c8e:	51 1c       	adc	r5, r1
    4c90:	f8 01       	movw	r30, r16
    4c92:	a0 80       	ld	r10, Z
    4c94:	b1 80       	ldd	r11, Z+1	; 0x01
    4c96:	36 fe       	sbrs	r3, 6
    4c98:	03 c0       	rjmp	.+6      	; 0x4ca0 <vfprintf+0x198>
    4c9a:	69 2d       	mov	r22, r9
    4c9c:	70 e0       	ldi	r23, 0x00	; 0
    4c9e:	02 c0       	rjmp	.+4      	; 0x4ca4 <vfprintf+0x19c>
    4ca0:	6f ef       	ldi	r22, 0xFF	; 255
    4ca2:	7f ef       	ldi	r23, 0xFF	; 255
    4ca4:	c5 01       	movw	r24, r10
    4ca6:	2d d1       	rcall	.+602    	; 0x4f02 <strnlen_P>
    4ca8:	4c 01       	movw	r8, r24
    4caa:	f3 2d       	mov	r31, r3
    4cac:	f0 68       	ori	r31, 0x80	; 128
    4cae:	3f 2e       	mov	r3, r31
    4cb0:	82 01       	movw	r16, r4
    4cb2:	33 fc       	sbrc	r3, 3
    4cb4:	19 c0       	rjmp	.+50     	; 0x4ce8 <vfprintf+0x1e0>
    4cb6:	82 2d       	mov	r24, r2
    4cb8:	90 e0       	ldi	r25, 0x00	; 0
    4cba:	88 16       	cp	r8, r24
    4cbc:	99 06       	cpc	r9, r25
    4cbe:	a0 f4       	brcc	.+40     	; 0x4ce8 <vfprintf+0x1e0>
    4cc0:	b6 01       	movw	r22, r12
    4cc2:	80 e2       	ldi	r24, 0x20	; 32
    4cc4:	90 e0       	ldi	r25, 0x00	; 0
    4cc6:	33 d1       	rcall	.+614    	; 0x4f2e <fputc>
    4cc8:	2a 94       	dec	r2
    4cca:	f5 cf       	rjmp	.-22     	; 0x4cb6 <vfprintf+0x1ae>
    4ccc:	f5 01       	movw	r30, r10
    4cce:	37 fc       	sbrc	r3, 7
    4cd0:	85 91       	lpm	r24, Z+
    4cd2:	37 fe       	sbrs	r3, 7
    4cd4:	81 91       	ld	r24, Z+
    4cd6:	5f 01       	movw	r10, r30
    4cd8:	b6 01       	movw	r22, r12
    4cda:	90 e0       	ldi	r25, 0x00	; 0
    4cdc:	28 d1       	rcall	.+592    	; 0x4f2e <fputc>
    4cde:	21 10       	cpse	r2, r1
    4ce0:	2a 94       	dec	r2
    4ce2:	21 e0       	ldi	r18, 0x01	; 1
    4ce4:	82 1a       	sub	r8, r18
    4ce6:	91 08       	sbc	r9, r1
    4ce8:	81 14       	cp	r8, r1
    4cea:	91 04       	cpc	r9, r1
    4cec:	79 f7       	brne	.-34     	; 0x4ccc <vfprintf+0x1c4>
    4cee:	e1 c0       	rjmp	.+450    	; 0x4eb2 <vfprintf+0x3aa>
    4cf0:	84 36       	cpi	r24, 0x64	; 100
    4cf2:	11 f0       	breq	.+4      	; 0x4cf8 <vfprintf+0x1f0>
    4cf4:	89 36       	cpi	r24, 0x69	; 105
    4cf6:	39 f5       	brne	.+78     	; 0x4d46 <vfprintf+0x23e>
    4cf8:	f8 01       	movw	r30, r16
    4cfa:	37 fe       	sbrs	r3, 7
    4cfc:	07 c0       	rjmp	.+14     	; 0x4d0c <vfprintf+0x204>
    4cfe:	60 81       	ld	r22, Z
    4d00:	71 81       	ldd	r23, Z+1	; 0x01
    4d02:	82 81       	ldd	r24, Z+2	; 0x02
    4d04:	93 81       	ldd	r25, Z+3	; 0x03
    4d06:	0c 5f       	subi	r16, 0xFC	; 252
    4d08:	1f 4f       	sbci	r17, 0xFF	; 255
    4d0a:	08 c0       	rjmp	.+16     	; 0x4d1c <vfprintf+0x214>
    4d0c:	60 81       	ld	r22, Z
    4d0e:	71 81       	ldd	r23, Z+1	; 0x01
    4d10:	07 2e       	mov	r0, r23
    4d12:	00 0c       	add	r0, r0
    4d14:	88 0b       	sbc	r24, r24
    4d16:	99 0b       	sbc	r25, r25
    4d18:	0e 5f       	subi	r16, 0xFE	; 254
    4d1a:	1f 4f       	sbci	r17, 0xFF	; 255
    4d1c:	f3 2d       	mov	r31, r3
    4d1e:	ff 76       	andi	r31, 0x6F	; 111
    4d20:	3f 2e       	mov	r3, r31
    4d22:	97 ff       	sbrs	r25, 7
    4d24:	09 c0       	rjmp	.+18     	; 0x4d38 <vfprintf+0x230>
    4d26:	90 95       	com	r25
    4d28:	80 95       	com	r24
    4d2a:	70 95       	com	r23
    4d2c:	61 95       	neg	r22
    4d2e:	7f 4f       	sbci	r23, 0xFF	; 255
    4d30:	8f 4f       	sbci	r24, 0xFF	; 255
    4d32:	9f 4f       	sbci	r25, 0xFF	; 255
    4d34:	f0 68       	ori	r31, 0x80	; 128
    4d36:	3f 2e       	mov	r3, r31
    4d38:	2a e0       	ldi	r18, 0x0A	; 10
    4d3a:	30 e0       	ldi	r19, 0x00	; 0
    4d3c:	a3 01       	movw	r20, r6
    4d3e:	33 d1       	rcall	.+614    	; 0x4fa6 <__ultoa_invert>
    4d40:	88 2e       	mov	r8, r24
    4d42:	86 18       	sub	r8, r6
    4d44:	44 c0       	rjmp	.+136    	; 0x4dce <vfprintf+0x2c6>
    4d46:	85 37       	cpi	r24, 0x75	; 117
    4d48:	31 f4       	brne	.+12     	; 0x4d56 <vfprintf+0x24e>
    4d4a:	23 2d       	mov	r18, r3
    4d4c:	2f 7e       	andi	r18, 0xEF	; 239
    4d4e:	b2 2e       	mov	r11, r18
    4d50:	2a e0       	ldi	r18, 0x0A	; 10
    4d52:	30 e0       	ldi	r19, 0x00	; 0
    4d54:	25 c0       	rjmp	.+74     	; 0x4da0 <vfprintf+0x298>
    4d56:	93 2d       	mov	r25, r3
    4d58:	99 7f       	andi	r25, 0xF9	; 249
    4d5a:	b9 2e       	mov	r11, r25
    4d5c:	8f 36       	cpi	r24, 0x6F	; 111
    4d5e:	c1 f0       	breq	.+48     	; 0x4d90 <vfprintf+0x288>
    4d60:	18 f4       	brcc	.+6      	; 0x4d68 <vfprintf+0x260>
    4d62:	88 35       	cpi	r24, 0x58	; 88
    4d64:	79 f0       	breq	.+30     	; 0x4d84 <vfprintf+0x27c>
    4d66:	ae c0       	rjmp	.+348    	; 0x4ec4 <vfprintf+0x3bc>
    4d68:	80 37       	cpi	r24, 0x70	; 112
    4d6a:	19 f0       	breq	.+6      	; 0x4d72 <vfprintf+0x26a>
    4d6c:	88 37       	cpi	r24, 0x78	; 120
    4d6e:	21 f0       	breq	.+8      	; 0x4d78 <vfprintf+0x270>
    4d70:	a9 c0       	rjmp	.+338    	; 0x4ec4 <vfprintf+0x3bc>
    4d72:	e9 2f       	mov	r30, r25
    4d74:	e0 61       	ori	r30, 0x10	; 16
    4d76:	be 2e       	mov	r11, r30
    4d78:	b4 fe       	sbrs	r11, 4
    4d7a:	0d c0       	rjmp	.+26     	; 0x4d96 <vfprintf+0x28e>
    4d7c:	fb 2d       	mov	r31, r11
    4d7e:	f4 60       	ori	r31, 0x04	; 4
    4d80:	bf 2e       	mov	r11, r31
    4d82:	09 c0       	rjmp	.+18     	; 0x4d96 <vfprintf+0x28e>
    4d84:	34 fe       	sbrs	r3, 4
    4d86:	0a c0       	rjmp	.+20     	; 0x4d9c <vfprintf+0x294>
    4d88:	29 2f       	mov	r18, r25
    4d8a:	26 60       	ori	r18, 0x06	; 6
    4d8c:	b2 2e       	mov	r11, r18
    4d8e:	06 c0       	rjmp	.+12     	; 0x4d9c <vfprintf+0x294>
    4d90:	28 e0       	ldi	r18, 0x08	; 8
    4d92:	30 e0       	ldi	r19, 0x00	; 0
    4d94:	05 c0       	rjmp	.+10     	; 0x4da0 <vfprintf+0x298>
    4d96:	20 e1       	ldi	r18, 0x10	; 16
    4d98:	30 e0       	ldi	r19, 0x00	; 0
    4d9a:	02 c0       	rjmp	.+4      	; 0x4da0 <vfprintf+0x298>
    4d9c:	20 e1       	ldi	r18, 0x10	; 16
    4d9e:	32 e0       	ldi	r19, 0x02	; 2
    4da0:	f8 01       	movw	r30, r16
    4da2:	b7 fe       	sbrs	r11, 7
    4da4:	07 c0       	rjmp	.+14     	; 0x4db4 <vfprintf+0x2ac>
    4da6:	60 81       	ld	r22, Z
    4da8:	71 81       	ldd	r23, Z+1	; 0x01
    4daa:	82 81       	ldd	r24, Z+2	; 0x02
    4dac:	93 81       	ldd	r25, Z+3	; 0x03
    4dae:	0c 5f       	subi	r16, 0xFC	; 252
    4db0:	1f 4f       	sbci	r17, 0xFF	; 255
    4db2:	06 c0       	rjmp	.+12     	; 0x4dc0 <vfprintf+0x2b8>
    4db4:	60 81       	ld	r22, Z
    4db6:	71 81       	ldd	r23, Z+1	; 0x01
    4db8:	80 e0       	ldi	r24, 0x00	; 0
    4dba:	90 e0       	ldi	r25, 0x00	; 0
    4dbc:	0e 5f       	subi	r16, 0xFE	; 254
    4dbe:	1f 4f       	sbci	r17, 0xFF	; 255
    4dc0:	a3 01       	movw	r20, r6
    4dc2:	f1 d0       	rcall	.+482    	; 0x4fa6 <__ultoa_invert>
    4dc4:	88 2e       	mov	r8, r24
    4dc6:	86 18       	sub	r8, r6
    4dc8:	fb 2d       	mov	r31, r11
    4dca:	ff 77       	andi	r31, 0x7F	; 127
    4dcc:	3f 2e       	mov	r3, r31
    4dce:	36 fe       	sbrs	r3, 6
    4dd0:	0d c0       	rjmp	.+26     	; 0x4dec <vfprintf+0x2e4>
    4dd2:	23 2d       	mov	r18, r3
    4dd4:	2e 7f       	andi	r18, 0xFE	; 254
    4dd6:	a2 2e       	mov	r10, r18
    4dd8:	89 14       	cp	r8, r9
    4dda:	58 f4       	brcc	.+22     	; 0x4df2 <vfprintf+0x2ea>
    4ddc:	34 fe       	sbrs	r3, 4
    4dde:	0b c0       	rjmp	.+22     	; 0x4df6 <vfprintf+0x2ee>
    4de0:	32 fc       	sbrc	r3, 2
    4de2:	09 c0       	rjmp	.+18     	; 0x4df6 <vfprintf+0x2ee>
    4de4:	83 2d       	mov	r24, r3
    4de6:	8e 7e       	andi	r24, 0xEE	; 238
    4de8:	a8 2e       	mov	r10, r24
    4dea:	05 c0       	rjmp	.+10     	; 0x4df6 <vfprintf+0x2ee>
    4dec:	b8 2c       	mov	r11, r8
    4dee:	a3 2c       	mov	r10, r3
    4df0:	03 c0       	rjmp	.+6      	; 0x4df8 <vfprintf+0x2f0>
    4df2:	b8 2c       	mov	r11, r8
    4df4:	01 c0       	rjmp	.+2      	; 0x4df8 <vfprintf+0x2f0>
    4df6:	b9 2c       	mov	r11, r9
    4df8:	a4 fe       	sbrs	r10, 4
    4dfa:	0f c0       	rjmp	.+30     	; 0x4e1a <vfprintf+0x312>
    4dfc:	fe 01       	movw	r30, r28
    4dfe:	e8 0d       	add	r30, r8
    4e00:	f1 1d       	adc	r31, r1
    4e02:	80 81       	ld	r24, Z
    4e04:	80 33       	cpi	r24, 0x30	; 48
    4e06:	21 f4       	brne	.+8      	; 0x4e10 <vfprintf+0x308>
    4e08:	9a 2d       	mov	r25, r10
    4e0a:	99 7e       	andi	r25, 0xE9	; 233
    4e0c:	a9 2e       	mov	r10, r25
    4e0e:	09 c0       	rjmp	.+18     	; 0x4e22 <vfprintf+0x31a>
    4e10:	a2 fe       	sbrs	r10, 2
    4e12:	06 c0       	rjmp	.+12     	; 0x4e20 <vfprintf+0x318>
    4e14:	b3 94       	inc	r11
    4e16:	b3 94       	inc	r11
    4e18:	04 c0       	rjmp	.+8      	; 0x4e22 <vfprintf+0x31a>
    4e1a:	8a 2d       	mov	r24, r10
    4e1c:	86 78       	andi	r24, 0x86	; 134
    4e1e:	09 f0       	breq	.+2      	; 0x4e22 <vfprintf+0x31a>
    4e20:	b3 94       	inc	r11
    4e22:	a3 fc       	sbrc	r10, 3
    4e24:	10 c0       	rjmp	.+32     	; 0x4e46 <vfprintf+0x33e>
    4e26:	a0 fe       	sbrs	r10, 0
    4e28:	06 c0       	rjmp	.+12     	; 0x4e36 <vfprintf+0x32e>
    4e2a:	b2 14       	cp	r11, r2
    4e2c:	80 f4       	brcc	.+32     	; 0x4e4e <vfprintf+0x346>
    4e2e:	28 0c       	add	r2, r8
    4e30:	92 2c       	mov	r9, r2
    4e32:	9b 18       	sub	r9, r11
    4e34:	0d c0       	rjmp	.+26     	; 0x4e50 <vfprintf+0x348>
    4e36:	b2 14       	cp	r11, r2
    4e38:	58 f4       	brcc	.+22     	; 0x4e50 <vfprintf+0x348>
    4e3a:	b6 01       	movw	r22, r12
    4e3c:	80 e2       	ldi	r24, 0x20	; 32
    4e3e:	90 e0       	ldi	r25, 0x00	; 0
    4e40:	76 d0       	rcall	.+236    	; 0x4f2e <fputc>
    4e42:	b3 94       	inc	r11
    4e44:	f8 cf       	rjmp	.-16     	; 0x4e36 <vfprintf+0x32e>
    4e46:	b2 14       	cp	r11, r2
    4e48:	18 f4       	brcc	.+6      	; 0x4e50 <vfprintf+0x348>
    4e4a:	2b 18       	sub	r2, r11
    4e4c:	02 c0       	rjmp	.+4      	; 0x4e52 <vfprintf+0x34a>
    4e4e:	98 2c       	mov	r9, r8
    4e50:	21 2c       	mov	r2, r1
    4e52:	a4 fe       	sbrs	r10, 4
    4e54:	0f c0       	rjmp	.+30     	; 0x4e74 <vfprintf+0x36c>
    4e56:	b6 01       	movw	r22, r12
    4e58:	80 e3       	ldi	r24, 0x30	; 48
    4e5a:	90 e0       	ldi	r25, 0x00	; 0
    4e5c:	68 d0       	rcall	.+208    	; 0x4f2e <fputc>
    4e5e:	a2 fe       	sbrs	r10, 2
    4e60:	16 c0       	rjmp	.+44     	; 0x4e8e <vfprintf+0x386>
    4e62:	a1 fc       	sbrc	r10, 1
    4e64:	03 c0       	rjmp	.+6      	; 0x4e6c <vfprintf+0x364>
    4e66:	88 e7       	ldi	r24, 0x78	; 120
    4e68:	90 e0       	ldi	r25, 0x00	; 0
    4e6a:	02 c0       	rjmp	.+4      	; 0x4e70 <vfprintf+0x368>
    4e6c:	88 e5       	ldi	r24, 0x58	; 88
    4e6e:	90 e0       	ldi	r25, 0x00	; 0
    4e70:	b6 01       	movw	r22, r12
    4e72:	0c c0       	rjmp	.+24     	; 0x4e8c <vfprintf+0x384>
    4e74:	8a 2d       	mov	r24, r10
    4e76:	86 78       	andi	r24, 0x86	; 134
    4e78:	51 f0       	breq	.+20     	; 0x4e8e <vfprintf+0x386>
    4e7a:	a1 fe       	sbrs	r10, 1
    4e7c:	02 c0       	rjmp	.+4      	; 0x4e82 <vfprintf+0x37a>
    4e7e:	8b e2       	ldi	r24, 0x2B	; 43
    4e80:	01 c0       	rjmp	.+2      	; 0x4e84 <vfprintf+0x37c>
    4e82:	80 e2       	ldi	r24, 0x20	; 32
    4e84:	a7 fc       	sbrc	r10, 7
    4e86:	8d e2       	ldi	r24, 0x2D	; 45
    4e88:	b6 01       	movw	r22, r12
    4e8a:	90 e0       	ldi	r25, 0x00	; 0
    4e8c:	50 d0       	rcall	.+160    	; 0x4f2e <fputc>
    4e8e:	89 14       	cp	r8, r9
    4e90:	30 f4       	brcc	.+12     	; 0x4e9e <vfprintf+0x396>
    4e92:	b6 01       	movw	r22, r12
    4e94:	80 e3       	ldi	r24, 0x30	; 48
    4e96:	90 e0       	ldi	r25, 0x00	; 0
    4e98:	4a d0       	rcall	.+148    	; 0x4f2e <fputc>
    4e9a:	9a 94       	dec	r9
    4e9c:	f8 cf       	rjmp	.-16     	; 0x4e8e <vfprintf+0x386>
    4e9e:	8a 94       	dec	r8
    4ea0:	f3 01       	movw	r30, r6
    4ea2:	e8 0d       	add	r30, r8
    4ea4:	f1 1d       	adc	r31, r1
    4ea6:	80 81       	ld	r24, Z
    4ea8:	b6 01       	movw	r22, r12
    4eaa:	90 e0       	ldi	r25, 0x00	; 0
    4eac:	40 d0       	rcall	.+128    	; 0x4f2e <fputc>
    4eae:	81 10       	cpse	r8, r1
    4eb0:	f6 cf       	rjmp	.-20     	; 0x4e9e <vfprintf+0x396>
    4eb2:	22 20       	and	r2, r2
    4eb4:	09 f4       	brne	.+2      	; 0x4eb8 <vfprintf+0x3b0>
    4eb6:	4e ce       	rjmp	.-868    	; 0x4b54 <vfprintf+0x4c>
    4eb8:	b6 01       	movw	r22, r12
    4eba:	80 e2       	ldi	r24, 0x20	; 32
    4ebc:	90 e0       	ldi	r25, 0x00	; 0
    4ebe:	37 d0       	rcall	.+110    	; 0x4f2e <fputc>
    4ec0:	2a 94       	dec	r2
    4ec2:	f7 cf       	rjmp	.-18     	; 0x4eb2 <vfprintf+0x3aa>
    4ec4:	f6 01       	movw	r30, r12
    4ec6:	86 81       	ldd	r24, Z+6	; 0x06
    4ec8:	97 81       	ldd	r25, Z+7	; 0x07
    4eca:	02 c0       	rjmp	.+4      	; 0x4ed0 <vfprintf+0x3c8>
    4ecc:	8f ef       	ldi	r24, 0xFF	; 255
    4ece:	9f ef       	ldi	r25, 0xFF	; 255
    4ed0:	2b 96       	adiw	r28, 0x0b	; 11
    4ed2:	0f b6       	in	r0, 0x3f	; 63
    4ed4:	f8 94       	cli
    4ed6:	de bf       	out	0x3e, r29	; 62
    4ed8:	0f be       	out	0x3f, r0	; 63
    4eda:	cd bf       	out	0x3d, r28	; 61
    4edc:	df 91       	pop	r29
    4ede:	cf 91       	pop	r28
    4ee0:	1f 91       	pop	r17
    4ee2:	0f 91       	pop	r16
    4ee4:	ff 90       	pop	r15
    4ee6:	ef 90       	pop	r14
    4ee8:	df 90       	pop	r13
    4eea:	cf 90       	pop	r12
    4eec:	bf 90       	pop	r11
    4eee:	af 90       	pop	r10
    4ef0:	9f 90       	pop	r9
    4ef2:	8f 90       	pop	r8
    4ef4:	7f 90       	pop	r7
    4ef6:	6f 90       	pop	r6
    4ef8:	5f 90       	pop	r5
    4efa:	4f 90       	pop	r4
    4efc:	3f 90       	pop	r3
    4efe:	2f 90       	pop	r2
    4f00:	08 95       	ret

00004f02 <strnlen_P>:
    4f02:	fc 01       	movw	r30, r24
    4f04:	05 90       	lpm	r0, Z+
    4f06:	61 50       	subi	r22, 0x01	; 1
    4f08:	70 40       	sbci	r23, 0x00	; 0
    4f0a:	01 10       	cpse	r0, r1
    4f0c:	d8 f7       	brcc	.-10     	; 0x4f04 <strnlen_P+0x2>
    4f0e:	80 95       	com	r24
    4f10:	90 95       	com	r25
    4f12:	8e 0f       	add	r24, r30
    4f14:	9f 1f       	adc	r25, r31
    4f16:	08 95       	ret

00004f18 <strnlen>:
    4f18:	fc 01       	movw	r30, r24
    4f1a:	61 50       	subi	r22, 0x01	; 1
    4f1c:	70 40       	sbci	r23, 0x00	; 0
    4f1e:	01 90       	ld	r0, Z+
    4f20:	01 10       	cpse	r0, r1
    4f22:	d8 f7       	brcc	.-10     	; 0x4f1a <strnlen+0x2>
    4f24:	80 95       	com	r24
    4f26:	90 95       	com	r25
    4f28:	8e 0f       	add	r24, r30
    4f2a:	9f 1f       	adc	r25, r31
    4f2c:	08 95       	ret

00004f2e <fputc>:
    4f2e:	0f 93       	push	r16
    4f30:	1f 93       	push	r17
    4f32:	cf 93       	push	r28
    4f34:	df 93       	push	r29
    4f36:	fb 01       	movw	r30, r22
    4f38:	23 81       	ldd	r18, Z+3	; 0x03
    4f3a:	21 fd       	sbrc	r18, 1
    4f3c:	03 c0       	rjmp	.+6      	; 0x4f44 <fputc+0x16>
    4f3e:	8f ef       	ldi	r24, 0xFF	; 255
    4f40:	9f ef       	ldi	r25, 0xFF	; 255
    4f42:	2c c0       	rjmp	.+88     	; 0x4f9c <fputc+0x6e>
    4f44:	22 ff       	sbrs	r18, 2
    4f46:	16 c0       	rjmp	.+44     	; 0x4f74 <fputc+0x46>
    4f48:	46 81       	ldd	r20, Z+6	; 0x06
    4f4a:	57 81       	ldd	r21, Z+7	; 0x07
    4f4c:	24 81       	ldd	r18, Z+4	; 0x04
    4f4e:	35 81       	ldd	r19, Z+5	; 0x05
    4f50:	42 17       	cp	r20, r18
    4f52:	53 07       	cpc	r21, r19
    4f54:	44 f4       	brge	.+16     	; 0x4f66 <fputc+0x38>
    4f56:	a0 81       	ld	r26, Z
    4f58:	b1 81       	ldd	r27, Z+1	; 0x01
    4f5a:	9d 01       	movw	r18, r26
    4f5c:	2f 5f       	subi	r18, 0xFF	; 255
    4f5e:	3f 4f       	sbci	r19, 0xFF	; 255
    4f60:	31 83       	std	Z+1, r19	; 0x01
    4f62:	20 83       	st	Z, r18
    4f64:	8c 93       	st	X, r24
    4f66:	26 81       	ldd	r18, Z+6	; 0x06
    4f68:	37 81       	ldd	r19, Z+7	; 0x07
    4f6a:	2f 5f       	subi	r18, 0xFF	; 255
    4f6c:	3f 4f       	sbci	r19, 0xFF	; 255
    4f6e:	37 83       	std	Z+7, r19	; 0x07
    4f70:	26 83       	std	Z+6, r18	; 0x06
    4f72:	14 c0       	rjmp	.+40     	; 0x4f9c <fputc+0x6e>
    4f74:	8b 01       	movw	r16, r22
    4f76:	ec 01       	movw	r28, r24
    4f78:	fb 01       	movw	r30, r22
    4f7a:	00 84       	ldd	r0, Z+8	; 0x08
    4f7c:	f1 85       	ldd	r31, Z+9	; 0x09
    4f7e:	e0 2d       	mov	r30, r0
    4f80:	19 95       	eicall
    4f82:	89 2b       	or	r24, r25
    4f84:	e1 f6       	brne	.-72     	; 0x4f3e <fputc+0x10>
    4f86:	d8 01       	movw	r26, r16
    4f88:	16 96       	adiw	r26, 0x06	; 6
    4f8a:	8d 91       	ld	r24, X+
    4f8c:	9c 91       	ld	r25, X
    4f8e:	17 97       	sbiw	r26, 0x07	; 7
    4f90:	01 96       	adiw	r24, 0x01	; 1
    4f92:	17 96       	adiw	r26, 0x07	; 7
    4f94:	9c 93       	st	X, r25
    4f96:	8e 93       	st	-X, r24
    4f98:	16 97       	sbiw	r26, 0x06	; 6
    4f9a:	ce 01       	movw	r24, r28
    4f9c:	df 91       	pop	r29
    4f9e:	cf 91       	pop	r28
    4fa0:	1f 91       	pop	r17
    4fa2:	0f 91       	pop	r16
    4fa4:	08 95       	ret

00004fa6 <__ultoa_invert>:
    4fa6:	fa 01       	movw	r30, r20
    4fa8:	aa 27       	eor	r26, r26
    4faa:	28 30       	cpi	r18, 0x08	; 8
    4fac:	51 f1       	breq	.+84     	; 0x5002 <__ultoa_invert+0x5c>
    4fae:	20 31       	cpi	r18, 0x10	; 16
    4fb0:	81 f1       	breq	.+96     	; 0x5012 <__ultoa_invert+0x6c>
    4fb2:	e8 94       	clt
    4fb4:	6f 93       	push	r22
    4fb6:	6e 7f       	andi	r22, 0xFE	; 254
    4fb8:	6e 5f       	subi	r22, 0xFE	; 254
    4fba:	7f 4f       	sbci	r23, 0xFF	; 255
    4fbc:	8f 4f       	sbci	r24, 0xFF	; 255
    4fbe:	9f 4f       	sbci	r25, 0xFF	; 255
    4fc0:	af 4f       	sbci	r26, 0xFF	; 255
    4fc2:	b1 e0       	ldi	r27, 0x01	; 1
    4fc4:	3e d0       	rcall	.+124    	; 0x5042 <__ultoa_invert+0x9c>
    4fc6:	b4 e0       	ldi	r27, 0x04	; 4
    4fc8:	3c d0       	rcall	.+120    	; 0x5042 <__ultoa_invert+0x9c>
    4fca:	67 0f       	add	r22, r23
    4fcc:	78 1f       	adc	r23, r24
    4fce:	89 1f       	adc	r24, r25
    4fd0:	9a 1f       	adc	r25, r26
    4fd2:	a1 1d       	adc	r26, r1
    4fd4:	68 0f       	add	r22, r24
    4fd6:	79 1f       	adc	r23, r25
    4fd8:	8a 1f       	adc	r24, r26
    4fda:	91 1d       	adc	r25, r1
    4fdc:	a1 1d       	adc	r26, r1
    4fde:	6a 0f       	add	r22, r26
    4fe0:	71 1d       	adc	r23, r1
    4fe2:	81 1d       	adc	r24, r1
    4fe4:	91 1d       	adc	r25, r1
    4fe6:	a1 1d       	adc	r26, r1
    4fe8:	20 d0       	rcall	.+64     	; 0x502a <__ultoa_invert+0x84>
    4fea:	09 f4       	brne	.+2      	; 0x4fee <__ultoa_invert+0x48>
    4fec:	68 94       	set
    4fee:	3f 91       	pop	r19
    4ff0:	2a e0       	ldi	r18, 0x0A	; 10
    4ff2:	26 9f       	mul	r18, r22
    4ff4:	11 24       	eor	r1, r1
    4ff6:	30 19       	sub	r19, r0
    4ff8:	30 5d       	subi	r19, 0xD0	; 208
    4ffa:	31 93       	st	Z+, r19
    4ffc:	de f6       	brtc	.-74     	; 0x4fb4 <__ultoa_invert+0xe>
    4ffe:	cf 01       	movw	r24, r30
    5000:	08 95       	ret
    5002:	46 2f       	mov	r20, r22
    5004:	47 70       	andi	r20, 0x07	; 7
    5006:	40 5d       	subi	r20, 0xD0	; 208
    5008:	41 93       	st	Z+, r20
    500a:	b3 e0       	ldi	r27, 0x03	; 3
    500c:	0f d0       	rcall	.+30     	; 0x502c <__ultoa_invert+0x86>
    500e:	c9 f7       	brne	.-14     	; 0x5002 <__ultoa_invert+0x5c>
    5010:	f6 cf       	rjmp	.-20     	; 0x4ffe <__ultoa_invert+0x58>
    5012:	46 2f       	mov	r20, r22
    5014:	4f 70       	andi	r20, 0x0F	; 15
    5016:	40 5d       	subi	r20, 0xD0	; 208
    5018:	4a 33       	cpi	r20, 0x3A	; 58
    501a:	18 f0       	brcs	.+6      	; 0x5022 <__ultoa_invert+0x7c>
    501c:	49 5d       	subi	r20, 0xD9	; 217
    501e:	31 fd       	sbrc	r19, 1
    5020:	40 52       	subi	r20, 0x20	; 32
    5022:	41 93       	st	Z+, r20
    5024:	02 d0       	rcall	.+4      	; 0x502a <__ultoa_invert+0x84>
    5026:	a9 f7       	brne	.-22     	; 0x5012 <__ultoa_invert+0x6c>
    5028:	ea cf       	rjmp	.-44     	; 0x4ffe <__ultoa_invert+0x58>
    502a:	b4 e0       	ldi	r27, 0x04	; 4
    502c:	a6 95       	lsr	r26
    502e:	97 95       	ror	r25
    5030:	87 95       	ror	r24
    5032:	77 95       	ror	r23
    5034:	67 95       	ror	r22
    5036:	ba 95       	dec	r27
    5038:	c9 f7       	brne	.-14     	; 0x502c <__ultoa_invert+0x86>
    503a:	00 97       	sbiw	r24, 0x00	; 0
    503c:	61 05       	cpc	r22, r1
    503e:	71 05       	cpc	r23, r1
    5040:	08 95       	ret
    5042:	9b 01       	movw	r18, r22
    5044:	ac 01       	movw	r20, r24
    5046:	0a 2e       	mov	r0, r26
    5048:	06 94       	lsr	r0
    504a:	57 95       	ror	r21
    504c:	47 95       	ror	r20
    504e:	37 95       	ror	r19
    5050:	27 95       	ror	r18
    5052:	ba 95       	dec	r27
    5054:	c9 f7       	brne	.-14     	; 0x5048 <__ultoa_invert+0xa2>
    5056:	62 0f       	add	r22, r18
    5058:	73 1f       	adc	r23, r19
    505a:	84 1f       	adc	r24, r20
    505c:	95 1f       	adc	r25, r21
    505e:	a0 1d       	adc	r26, r0
    5060:	08 95       	ret

00005062 <_exit>:
    5062:	f8 94       	cli

00005064 <__stop_program>:
    5064:	ff cf       	rjmp	.-2      	; 0x5064 <__stop_program>
