
app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005d6  00800200  0000532c  000053c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000532c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000027e  008007d6  008007d6  00005996  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005996  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000059f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ab0  00000000  00000000  00005a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d8f1  00000000  00000000  000064e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000350f  00000000  00000000  00013dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000666c  00000000  00000000  000172e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002348  00000000  00000000  0001d950  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004624  00000000  00000000  0001fc98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c0ac  00000000  00000000  000242bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ad8  00000000  00000000  00030368  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	06 c2       	rjmp	.+1036   	; 0x40e <__ctors_end>
       2:	00 00       	nop
       4:	24 c2       	rjmp	.+1096   	; 0x44e <__bad_interrupt>
       6:	00 00       	nop
       8:	22 c2       	rjmp	.+1092   	; 0x44e <__bad_interrupt>
       a:	00 00       	nop
       c:	20 c2       	rjmp	.+1088   	; 0x44e <__bad_interrupt>
       e:	00 00       	nop
      10:	1e c2       	rjmp	.+1084   	; 0x44e <__bad_interrupt>
      12:	00 00       	nop
      14:	1c c2       	rjmp	.+1080   	; 0x44e <__bad_interrupt>
      16:	00 00       	nop
      18:	1a c2       	rjmp	.+1076   	; 0x44e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	18 c2       	rjmp	.+1072   	; 0x44e <__bad_interrupt>
      1e:	00 00       	nop
      20:	16 c2       	rjmp	.+1068   	; 0x44e <__bad_interrupt>
      22:	00 00       	nop
      24:	14 c2       	rjmp	.+1064   	; 0x44e <__bad_interrupt>
      26:	00 00       	nop
      28:	12 c2       	rjmp	.+1060   	; 0x44e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	10 c2       	rjmp	.+1056   	; 0x44e <__bad_interrupt>
      2e:	00 00       	nop
      30:	9e c6       	rjmp	.+3388   	; 0xd6e <__vector_12>
      32:	00 00       	nop
      34:	0c c2       	rjmp	.+1048   	; 0x44e <__bad_interrupt>
      36:	00 00       	nop
      38:	0a c2       	rjmp	.+1044   	; 0x44e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	08 c2       	rjmp	.+1040   	; 0x44e <__bad_interrupt>
      3e:	00 00       	nop
      40:	06 c2       	rjmp	.+1036   	; 0x44e <__bad_interrupt>
      42:	00 00       	nop
      44:	04 c2       	rjmp	.+1032   	; 0x44e <__bad_interrupt>
      46:	00 00       	nop
      48:	02 c2       	rjmp	.+1028   	; 0x44e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	00 c2       	rjmp	.+1024   	; 0x44e <__bad_interrupt>
      4e:	00 00       	nop
      50:	fe c1       	rjmp	.+1020   	; 0x44e <__bad_interrupt>
      52:	00 00       	nop
      54:	fc c1       	rjmp	.+1016   	; 0x44e <__bad_interrupt>
      56:	00 00       	nop
      58:	fa c1       	rjmp	.+1012   	; 0x44e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f8 c1       	rjmp	.+1008   	; 0x44e <__bad_interrupt>
      5e:	00 00       	nop
      60:	f6 c1       	rjmp	.+1004   	; 0x44e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <__vector_25>
      68:	0c 94 07 17 	jmp	0x2e0e	; 0x2e0e <__vector_26>
      6c:	f0 c1       	rjmp	.+992    	; 0x44e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ee c1       	rjmp	.+988    	; 0x44e <__bad_interrupt>
      72:	00 00       	nop
      74:	ec c1       	rjmp	.+984    	; 0x44e <__bad_interrupt>
      76:	00 00       	nop
      78:	ea c1       	rjmp	.+980    	; 0x44e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e8 c1       	rjmp	.+976    	; 0x44e <__bad_interrupt>
      7e:	00 00       	nop
      80:	e6 c1       	rjmp	.+972    	; 0x44e <__bad_interrupt>
      82:	00 00       	nop
      84:	e4 c1       	rjmp	.+968    	; 0x44e <__bad_interrupt>
      86:	00 00       	nop
      88:	e2 c1       	rjmp	.+964    	; 0x44e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e0 c1       	rjmp	.+960    	; 0x44e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 4b 17 	jmp	0x2e96	; 0x2e96 <__vector_36>
      94:	0c 94 9d 17 	jmp	0x2f3a	; 0x2f3a <__vector_37>
      98:	da c1       	rjmp	.+948    	; 0x44e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 51 22 	jmp	0x44a2	; 0x44a2 <__vector_39>
      a0:	d6 c1       	rjmp	.+940    	; 0x44e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d4 c1       	rjmp	.+936    	; 0x44e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d2 c1       	rjmp	.+932    	; 0x44e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d0 c1       	rjmp	.+928    	; 0x44e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ce c1       	rjmp	.+924    	; 0x44e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cc c1       	rjmp	.+920    	; 0x44e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ca c1       	rjmp	.+916    	; 0x44e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c8 c1       	rjmp	.+912    	; 0x44e <__bad_interrupt>
      be:	00 00       	nop
      c0:	c6 c1       	rjmp	.+908    	; 0x44e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c4 c1       	rjmp	.+904    	; 0x44e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c2 c1       	rjmp	.+900    	; 0x44e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 e1 17 	jmp	0x2fc2	; 0x2fc2 <__vector_51>
      d0:	0c 94 33 18 	jmp	0x3066	; 0x3066 <__vector_52>
      d4:	bc c1       	rjmp	.+888    	; 0x44e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 77 18 	jmp	0x30ee	; 0x30ee <__vector_54>
      dc:	0c 94 c9 18 	jmp	0x3192	; 0x3192 <__vector_55>
      e0:	b6 c1       	rjmp	.+876    	; 0x44e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	96 01       	movw	r18, r12
      e6:	96 01       	movw	r18, r12
      e8:	96 01       	movw	r18, r12
      ea:	c5 01       	movw	r24, r10
      ec:	cd 01       	movw	r24, r26
      ee:	dc 01       	movw	r26, r24
      f0:	96 01       	movw	r18, r12
      f2:	96 01       	movw	r18, r12
      f4:	c5 01       	movw	r24, r10
      f6:	cd 01       	movw	r24, r26
      f8:	73 22       	and	r7, r19
      fa:	e3 22       	and	r14, r19
      fc:	e3 22       	and	r14, r19
      fe:	e3 22       	and	r14, r19
     100:	e3 22       	and	r14, r19
     102:	e3 22       	and	r14, r19
     104:	e3 22       	and	r14, r19
     106:	e3 22       	and	r14, r19
     108:	73 22       	and	r7, r19
     10a:	e3 22       	and	r14, r19
     10c:	e3 22       	and	r14, r19
     10e:	e3 22       	and	r14, r19
     110:	e3 22       	and	r14, r19
     112:	e3 22       	and	r14, r19
     114:	e3 22       	and	r14, r19
     116:	e3 22       	and	r14, r19
     118:	75 22       	and	r7, r21
     11a:	e3 22       	and	r14, r19
     11c:	e3 22       	and	r14, r19
     11e:	e3 22       	and	r14, r19
     120:	e3 22       	and	r14, r19
     122:	e3 22       	and	r14, r19
     124:	e3 22       	and	r14, r19
     126:	e3 22       	and	r14, r19
     128:	e3 22       	and	r14, r19
     12a:	e3 22       	and	r14, r19
     12c:	e3 22       	and	r14, r19
     12e:	e3 22       	and	r14, r19
     130:	e3 22       	and	r14, r19
     132:	e3 22       	and	r14, r19
     134:	e3 22       	and	r14, r19
     136:	e3 22       	and	r14, r19
     138:	75 22       	and	r7, r21
     13a:	e3 22       	and	r14, r19
     13c:	e3 22       	and	r14, r19
     13e:	e3 22       	and	r14, r19
     140:	e3 22       	and	r14, r19
     142:	e3 22       	and	r14, r19
     144:	e3 22       	and	r14, r19
     146:	e3 22       	and	r14, r19
     148:	e3 22       	and	r14, r19
     14a:	e3 22       	and	r14, r19
     14c:	e3 22       	and	r14, r19
     14e:	e3 22       	and	r14, r19
     150:	e3 22       	and	r14, r19
     152:	e3 22       	and	r14, r19
     154:	e3 22       	and	r14, r19
     156:	e3 22       	and	r14, r19
     158:	df 22       	and	r13, r31
     15a:	e3 22       	and	r14, r19
     15c:	e3 22       	and	r14, r19
     15e:	e3 22       	and	r14, r19
     160:	e3 22       	and	r14, r19
     162:	e3 22       	and	r14, r19
     164:	e3 22       	and	r14, r19
     166:	e3 22       	and	r14, r19
     168:	aa 22       	and	r10, r26
     16a:	e3 22       	and	r14, r19
     16c:	e3 22       	and	r14, r19
     16e:	e3 22       	and	r14, r19
     170:	e3 22       	and	r14, r19
     172:	e3 22       	and	r14, r19
     174:	e3 22       	and	r14, r19
     176:	e3 22       	and	r14, r19
     178:	e3 22       	and	r14, r19
     17a:	e3 22       	and	r14, r19
     17c:	e3 22       	and	r14, r19
     17e:	e3 22       	and	r14, r19
     180:	e3 22       	and	r14, r19
     182:	e3 22       	and	r14, r19
     184:	e3 22       	and	r14, r19
     186:	e3 22       	and	r14, r19
     188:	9e 22       	and	r9, r30
     18a:	e3 22       	and	r14, r19
     18c:	e3 22       	and	r14, r19
     18e:	e3 22       	and	r14, r19
     190:	e3 22       	and	r14, r19
     192:	e3 22       	and	r14, r19
     194:	e3 22       	and	r14, r19
     196:	e3 22       	and	r14, r19
     198:	c2 22       	and	r12, r18

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	04 ef       	ldi	r16, 0xF4	; 244
     19c:	17 e0       	ldi	r17, 0x07	; 7
     19e:	0f 2e       	mov	r0, r31
     1a0:	fc e1       	ldi	r31, 0x1C	; 28
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f8 e0       	ldi	r31, 0x08	; 8
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 f3 07 	lds	r24, 0x07F3	; 0x8007f3 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	15 96       	adiw	r26, 0x05	; 5
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	16 97       	sbiw	r26, 0x06	; 6
     1c2:	c6 81       	ldd	r28, Z+6	; 0x06
     1c4:	d7 81       	ldd	r29, Z+7	; 0x07
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	37 d4       	rcall	.+2158   	; 0xa3a <uxListRemove>
     1cc:	80 91 e9 07 	lds	r24, 0x07E9	; 0x8007e9 <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 e9 07 	sts	0x07E9, r24	; 0x8007e9 <uxCurrentNumberOfTasks>
     1d6:	80 91 f3 07 	lds	r24, 0x07F3	; 0x8007f3 <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 f3 07 	sts	0x07F3, r24	; 0x8007f3 <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8f 89       	ldd	r24, Y+23	; 0x17
     1e6:	98 8d       	ldd	r25, Y+24	; 0x18
     1e8:	b5 d3       	rcall	.+1898   	; 0x954 <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	b3 d3       	rcall	.+1894   	; 0x954 <vPortFree>
     1ee:	80 91 f3 07 	lds	r24, 0x07F3	; 0x8007f3 <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	08 f0       	brcs	.+2      	; 0x200 <prvIdleTask+0x66>
     1fe:	f2 d4       	rcall	.+2532   	; 0xbe4 <vPortYield>
     200:	0e 94 c9 14 	call	0x2992	; 0x2992 <vApplicationIdleHook>
     204:	d2 cf       	rjmp	.-92     	; 0x1aa <prvIdleTask+0x10>

00000206 <prvTimerTask>:
     206:	cf 93       	push	r28
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     208:	df 93       	push	r29
     20a:	00 d0       	rcall	.+0      	; 0x20c <prvTimerTask+0x6>
     20c:	00 d0       	rcall	.+0      	; 0x20e <prvTimerTask+0x8>
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
     212:	ce 01       	movw	r24, r28
     214:	01 96       	adiw	r24, 0x01	; 1
     216:	4c 01       	movw	r8, r24
     218:	44 24       	eor	r4, r4
     21a:	43 94       	inc	r4
     21c:	e1 2c       	mov	r14, r1
     21e:	f1 2c       	mov	r15, r1
     220:	51 2c       	mov	r5, r1
     222:	c8 2e       	mov	r12, r24
     224:	d9 2c       	mov	r13, r9
     226:	e0 91 4a 08 	lds	r30, 0x084A	; 0x80084a <pxCurrentTimerList>
     22a:	f0 91 4b 08 	lds	r31, 0x084B	; 0x80084b <pxCurrentTimerList+0x1>
     22e:	80 81       	ld	r24, Z
     230:	88 23       	and	r24, r24
     232:	09 f4       	brne	.+2      	; 0x236 <prvTimerTask+0x30>
     234:	d8 c0       	rjmp	.+432    	; 0x3e6 <prvTimerTask+0x1e0>
     236:	05 80       	ldd	r0, Z+5	; 0x05
     238:	f6 81       	ldd	r31, Z+6	; 0x06
     23a:	e0 2d       	mov	r30, r0
     23c:	a0 80       	ld	r10, Z
     23e:	b1 80       	ldd	r11, Z+1	; 0x01
     240:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <vTaskSuspendAll>
     244:	c4 01       	movw	r24, r8
     246:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <prvSampleTimeNow>
     24a:	8c 01       	movw	r16, r24
     24c:	89 81       	ldd	r24, Y+1	; 0x01
     24e:	81 11       	cpse	r24, r1
     250:	49 c0       	rjmp	.+146    	; 0x2e4 <prvTimerTask+0xde>
     252:	0a 15       	cp	r16, r10
     254:	1b 05       	cpc	r17, r11
     256:	b0 f1       	brcs	.+108    	; 0x2c4 <prvTimerTask+0xbe>
     258:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <xTaskResumeAll>
     25c:	e0 91 4a 08 	lds	r30, 0x084A	; 0x80084a <pxCurrentTimerList>
     260:	f0 91 4b 08 	lds	r31, 0x084B	; 0x80084b <pxCurrentTimerList+0x1>
     264:	05 80       	ldd	r0, Z+5	; 0x05
     266:	f6 81       	ldd	r31, Z+6	; 0x06
     268:	e0 2d       	mov	r30, r0
     26a:	66 80       	ldd	r6, Z+6	; 0x06
     26c:	77 80       	ldd	r7, Z+7	; 0x07
     26e:	c3 01       	movw	r24, r6
     270:	02 96       	adiw	r24, 0x02	; 2
     272:	e3 d3       	rcall	.+1990   	; 0xa3a <uxListRemove>
     274:	d3 01       	movw	r26, r6
     276:	53 96       	adiw	r26, 0x13	; 19
     278:	8c 91       	ld	r24, X
     27a:	53 97       	sbiw	r26, 0x13	; 19
     27c:	82 ff       	sbrs	r24, 2
     27e:	17 c0       	rjmp	.+46     	; 0x2ae <prvTimerTask+0xa8>
     280:	1c 96       	adiw	r26, 0x0c	; 12
     282:	6d 91       	ld	r22, X+
     284:	7c 91       	ld	r23, X
     286:	1d 97       	sbiw	r26, 0x0d	; 13
     288:	6a 0d       	add	r22, r10
     28a:	7b 1d       	adc	r23, r11
     28c:	95 01       	movw	r18, r10
     28e:	a8 01       	movw	r20, r16
     290:	c3 01       	movw	r24, r6
     292:	0e 94 9c 13 	call	0x2738	; 0x2738 <prvInsertTimerInActiveList>
     296:	88 23       	and	r24, r24
     298:	69 f0       	breq	.+26     	; 0x2b4 <prvTimerTask+0xae>
     29a:	0e 2d       	mov	r16, r14
     29c:	1f 2d       	mov	r17, r15
     29e:	2e 2d       	mov	r18, r14
     2a0:	3f 2d       	mov	r19, r15
     2a2:	a5 01       	movw	r20, r10
     2a4:	65 2d       	mov	r22, r5
     2a6:	c3 01       	movw	r24, r6
     2a8:	0e 94 14 14 	call	0x2828	; 0x2828 <xTimerGenericCommand>
     2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <prvTimerTask+0xae>
     2ae:	8e 7f       	andi	r24, 0xFE	; 254
     2b0:	f3 01       	movw	r30, r6
     2b2:	83 8b       	std	Z+19, r24	; 0x13
     2b4:	d3 01       	movw	r26, r6
     2b6:	50 96       	adiw	r26, 0x10	; 16
     2b8:	ed 91       	ld	r30, X+
     2ba:	fc 91       	ld	r31, X
     2bc:	51 97       	sbiw	r26, 0x11	; 17
     2be:	c3 01       	movw	r24, r6
     2c0:	19 95       	eicall
     2c2:	85 c0       	rjmp	.+266    	; 0x3ce <prvTimerTask+0x1c8>
     2c4:	45 2d       	mov	r20, r5
     2c6:	b5 01       	movw	r22, r10
     2c8:	60 1b       	sub	r22, r16
     2ca:	71 0b       	sbc	r23, r17
     2cc:	80 91 46 08 	lds	r24, 0x0846	; 0x800846 <xTimerQueue>
     2d0:	90 91 47 08 	lds	r25, 0x0847	; 0x800847 <xTimerQueue+0x1>
     2d4:	0e 94 25 0a 	call	0x144a	; 0x144a <vQueueWaitForMessageRestricted>
     2d8:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <xTaskResumeAll>
     2dc:	81 11       	cpse	r24, r1
     2de:	77 c0       	rjmp	.+238    	; 0x3ce <prvTimerTask+0x1c8>
     2e0:	81 d4       	rcall	.+2306   	; 0xbe4 <vPortYield>
     2e2:	75 c0       	rjmp	.+234    	; 0x3ce <prvTimerTask+0x1c8>
     2e4:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <xTaskResumeAll>
     2e8:	72 c0       	rjmp	.+228    	; 0x3ce <prvTimerTask+0x1c8>
     2ea:	89 81       	ldd	r24, Y+1	; 0x01
     2ec:	88 23       	and	r24, r24
     2ee:	0c f4       	brge	.+2      	; 0x2f2 <prvTimerTask+0xec>
     2f0:	6e c0       	rjmp	.+220    	; 0x3ce <prvTimerTask+0x1c8>
     2f2:	ac 80       	ldd	r10, Y+4	; 0x04
     2f4:	bd 80       	ldd	r11, Y+5	; 0x05
     2f6:	f5 01       	movw	r30, r10
     2f8:	82 85       	ldd	r24, Z+10	; 0x0a
     2fa:	93 85       	ldd	r25, Z+11	; 0x0b
     2fc:	89 2b       	or	r24, r25
     2fe:	19 f0       	breq	.+6      	; 0x306 <prvTimerTask+0x100>
     300:	c5 01       	movw	r24, r10
     302:	02 96       	adiw	r24, 0x02	; 2
     304:	9a d3       	rcall	.+1844   	; 0xa3a <uxListRemove>
     306:	ce 01       	movw	r24, r28
     308:	06 96       	adiw	r24, 0x06	; 6
     30a:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <prvSampleTimeNow>
     30e:	ac 01       	movw	r20, r24
     310:	e9 81       	ldd	r30, Y+1	; 0x01
     312:	0e 2e       	mov	r0, r30
     314:	00 0c       	add	r0, r0
     316:	ff 0b       	sbc	r31, r31
     318:	ea 30       	cpi	r30, 0x0A	; 10
     31a:	f1 05       	cpc	r31, r1
     31c:	08 f0       	brcs	.+2      	; 0x320 <prvTimerTask+0x11a>
     31e:	57 c0       	rjmp	.+174    	; 0x3ce <prvTimerTask+0x1c8>
     320:	88 27       	eor	r24, r24
     322:	ee 58       	subi	r30, 0x8E	; 142
     324:	ff 4f       	sbci	r31, 0xFF	; 255
     326:	8f 4f       	sbci	r24, 0xFF	; 255
     328:	0c 94 f5 24 	jmp	0x49ea	; 0x49ea <__tablejump2__>
     32c:	d5 01       	movw	r26, r10
     32e:	53 96       	adiw	r26, 0x13	; 19
     330:	8c 91       	ld	r24, X
     332:	53 97       	sbiw	r26, 0x13	; 19
     334:	81 60       	ori	r24, 0x01	; 1
     336:	53 96       	adiw	r26, 0x13	; 19
     338:	8c 93       	st	X, r24
     33a:	53 97       	sbiw	r26, 0x13	; 19
     33c:	2a 81       	ldd	r18, Y+2	; 0x02
     33e:	3b 81       	ldd	r19, Y+3	; 0x03
     340:	1c 96       	adiw	r26, 0x0c	; 12
     342:	6d 91       	ld	r22, X+
     344:	7c 91       	ld	r23, X
     346:	1d 97       	sbiw	r26, 0x0d	; 13
     348:	62 0f       	add	r22, r18
     34a:	73 1f       	adc	r23, r19
     34c:	c5 01       	movw	r24, r10
     34e:	0e 94 9c 13 	call	0x2738	; 0x2738 <prvInsertTimerInActiveList>
     352:	88 23       	and	r24, r24
     354:	e1 f1       	breq	.+120    	; 0x3ce <prvTimerTask+0x1c8>
     356:	d5 01       	movw	r26, r10
     358:	50 96       	adiw	r26, 0x10	; 16
     35a:	ed 91       	ld	r30, X+
     35c:	fc 91       	ld	r31, X
     35e:	51 97       	sbiw	r26, 0x11	; 17
     360:	c5 01       	movw	r24, r10
     362:	19 95       	eicall
     364:	f5 01       	movw	r30, r10
     366:	83 89       	ldd	r24, Z+19	; 0x13
     368:	82 ff       	sbrs	r24, 2
     36a:	31 c0       	rjmp	.+98     	; 0x3ce <prvTimerTask+0x1c8>
     36c:	4a 81       	ldd	r20, Y+2	; 0x02
     36e:	5b 81       	ldd	r21, Y+3	; 0x03
     370:	84 85       	ldd	r24, Z+12	; 0x0c
     372:	95 85       	ldd	r25, Z+13	; 0x0d
     374:	48 0f       	add	r20, r24
     376:	59 1f       	adc	r21, r25
     378:	0e 2d       	mov	r16, r14
     37a:	1f 2d       	mov	r17, r15
     37c:	2e 2d       	mov	r18, r14
     37e:	3f 2d       	mov	r19, r15
     380:	65 2d       	mov	r22, r5
     382:	c5 01       	movw	r24, r10
     384:	0e 94 14 14 	call	0x2828	; 0x2828 <xTimerGenericCommand>
     388:	22 c0       	rjmp	.+68     	; 0x3ce <prvTimerTask+0x1c8>
     38a:	d5 01       	movw	r26, r10
     38c:	53 96       	adiw	r26, 0x13	; 19
     38e:	8c 91       	ld	r24, X
     390:	53 97       	sbiw	r26, 0x13	; 19
     392:	8e 7f       	andi	r24, 0xFE	; 254
     394:	53 96       	adiw	r26, 0x13	; 19
     396:	8c 93       	st	X, r24
     398:	1a c0       	rjmp	.+52     	; 0x3ce <prvTimerTask+0x1c8>
     39a:	f5 01       	movw	r30, r10
     39c:	83 89       	ldd	r24, Z+19	; 0x13
     39e:	81 60       	ori	r24, 0x01	; 1
     3a0:	83 8b       	std	Z+19, r24	; 0x13
     3a2:	6a 81       	ldd	r22, Y+2	; 0x02
     3a4:	7b 81       	ldd	r23, Y+3	; 0x03
     3a6:	75 87       	std	Z+13, r23	; 0x0d
     3a8:	64 87       	std	Z+12, r22	; 0x0c
     3aa:	64 0f       	add	r22, r20
     3ac:	75 1f       	adc	r23, r21
     3ae:	9a 01       	movw	r18, r20
     3b0:	c5 01       	movw	r24, r10
     3b2:	0e 94 9c 13 	call	0x2738	; 0x2738 <prvInsertTimerInActiveList>
     3b6:	0b c0       	rjmp	.+22     	; 0x3ce <prvTimerTask+0x1c8>
     3b8:	d5 01       	movw	r26, r10
     3ba:	53 96       	adiw	r26, 0x13	; 19
     3bc:	8c 91       	ld	r24, X
     3be:	81 fd       	sbrc	r24, 1
     3c0:	03 c0       	rjmp	.+6      	; 0x3c8 <prvTimerTask+0x1c2>
     3c2:	c5 01       	movw	r24, r10
     3c4:	c7 d2       	rcall	.+1422   	; 0x954 <vPortFree>
     3c6:	03 c0       	rjmp	.+6      	; 0x3ce <prvTimerTask+0x1c8>
     3c8:	8e 7f       	andi	r24, 0xFE	; 254
     3ca:	f5 01       	movw	r30, r10
     3cc:	83 8b       	std	Z+19, r24	; 0x13
     3ce:	4e 2d       	mov	r20, r14
     3d0:	5f 2d       	mov	r21, r15
     3d2:	6c 2d       	mov	r22, r12
     3d4:	7d 2d       	mov	r23, r13
     3d6:	80 91 46 08 	lds	r24, 0x0846	; 0x800846 <xTimerQueue>
     3da:	90 91 47 08 	lds	r25, 0x0847	; 0x800847 <xTimerQueue+0x1>
     3de:	f0 d6       	rcall	.+3552   	; 0x11c0 <xQueueReceive>
     3e0:	81 11       	cpse	r24, r1
     3e2:	83 cf       	rjmp	.-250    	; 0x2ea <prvTimerTask+0xe4>
     3e4:	20 cf       	rjmp	.-448    	; 0x226 <prvTimerTask+0x20>
     3e6:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <vTaskSuspendAll>
     3ea:	c4 01       	movw	r24, r8
     3ec:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <prvSampleTimeNow>
     3f0:	8c 01       	movw	r16, r24
     3f2:	89 81       	ldd	r24, Y+1	; 0x01
     3f4:	81 11       	cpse	r24, r1
     3f6:	76 cf       	rjmp	.-276    	; 0x2e4 <prvTimerTask+0xde>
     3f8:	e0 91 48 08 	lds	r30, 0x0848	; 0x800848 <pxOverflowTimerList>
     3fc:	f0 91 49 08 	lds	r31, 0x0849	; 0x800849 <pxOverflowTimerList+0x1>
     400:	80 81       	ld	r24, Z
     402:	44 2d       	mov	r20, r4
     404:	81 11       	cpse	r24, r1
     406:	45 2d       	mov	r20, r5
     408:	ae 2c       	mov	r10, r14
     40a:	bf 2c       	mov	r11, r15
     40c:	5c cf       	rjmp	.-328    	; 0x2c6 <prvTimerTask+0xc0>

0000040e <__ctors_end>:
     40e:	11 24       	eor	r1, r1
     410:	1f be       	out	0x3f, r1	; 63
     412:	cf ef       	ldi	r28, 0xFF	; 255
     414:	d1 e2       	ldi	r29, 0x21	; 33
     416:	de bf       	out	0x3e, r29	; 62
     418:	cd bf       	out	0x3d, r28	; 61
     41a:	00 e0       	ldi	r16, 0x00	; 0
     41c:	0c bf       	out	0x3c, r16	; 60

0000041e <__do_copy_data>:
     41e:	17 e0       	ldi	r17, 0x07	; 7
     420:	a0 e0       	ldi	r26, 0x00	; 0
     422:	b2 e0       	ldi	r27, 0x02	; 2
     424:	ec e2       	ldi	r30, 0x2C	; 44
     426:	f3 e5       	ldi	r31, 0x53	; 83
     428:	00 e0       	ldi	r16, 0x00	; 0
     42a:	0b bf       	out	0x3b, r16	; 59
     42c:	02 c0       	rjmp	.+4      	; 0x432 <__do_copy_data+0x14>
     42e:	07 90       	elpm	r0, Z+
     430:	0d 92       	st	X+, r0
     432:	a6 3d       	cpi	r26, 0xD6	; 214
     434:	b1 07       	cpc	r27, r17
     436:	d9 f7       	brne	.-10     	; 0x42e <__do_copy_data+0x10>

00000438 <__do_clear_bss>:
     438:	2a e0       	ldi	r18, 0x0A	; 10
     43a:	a6 ed       	ldi	r26, 0xD6	; 214
     43c:	b7 e0       	ldi	r27, 0x07	; 7
     43e:	01 c0       	rjmp	.+2      	; 0x442 <.do_clear_bss_start>

00000440 <.do_clear_bss_loop>:
     440:	1d 92       	st	X+, r1

00000442 <.do_clear_bss_start>:
     442:	a4 35       	cpi	r26, 0x54	; 84
     444:	b2 07       	cpc	r27, r18
     446:	e1 f7       	brne	.-8      	; 0x440 <.do_clear_bss_loop>
     448:	f4 d1       	rcall	.+1000   	; 0x832 <main>
     44a:	0c 94 94 29 	jmp	0x5328	; 0x5328 <_exit>

0000044e <__bad_interrupt>:
     44e:	d8 cd       	rjmp	.-1104   	; 0x0 <__vectors>

00000450 <tempSensorTask>:
			lastWateringTime = xTaskGetTickCount();
			printf("Plant has been watered!!!!");
			vTaskDelay(100);
		}
		vTaskDelay(1000);
	}
     450:	81 e4       	ldi	r24, 0x41	; 65
     452:	92 e0       	ldi	r25, 0x02	; 2
     454:	0e 94 89 26 	call	0x4d12	; 0x4d12 <puts>
     458:	1f 92       	push	r1
     45a:	8e e3       	ldi	r24, 0x3E	; 62
     45c:	8f 93       	push	r24
     45e:	86 e5       	ldi	r24, 0x56	; 86
     460:	92 e0       	ldi	r25, 0x02	; 2
     462:	9f 93       	push	r25
     464:	8f 93       	push	r24
     466:	0e 94 76 26 	call	0x4cec	; 0x4cec <printf>
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	0f 2e       	mov	r0, r31
     474:	fe e5       	ldi	r31, 0x5E	; 94
     476:	cf 2e       	mov	r12, r31
     478:	f2 e0       	ldi	r31, 0x02	; 2
     47a:	df 2e       	mov	r13, r31
     47c:	f0 2d       	mov	r31, r0
     47e:	0f 2e       	mov	r0, r31
     480:	f3 e7       	ldi	r31, 0x73	; 115
     482:	ef 2e       	mov	r14, r31
     484:	f2 e0       	ldi	r31, 0x02	; 2
     486:	ff 2e       	mov	r15, r31
     488:	f0 2d       	mov	r31, r0
     48a:	c8 e2       	ldi	r28, 0x28	; 40
     48c:	da e0       	ldi	r29, 0x0A	; 10
     48e:	08 e8       	ldi	r16, 0x88	; 136
     490:	12 e0       	ldi	r17, 0x02	; 2
     492:	88 ee       	ldi	r24, 0xE8	; 232
     494:	93 e0       	ldi	r25, 0x03	; 3
     496:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <vTaskDelay>
     49a:	0e 94 a2 19 	call	0x3344	; 0x3344 <hih8120Wakeup>
     49e:	28 2f       	mov	r18, r24
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	21 15       	cp	r18, r1
     4a4:	31 05       	cpc	r19, r1
     4a6:	69 f0       	breq	.+26     	; 0x4c2 <tempSensorTask+0x72>
     4a8:	23 30       	cpi	r18, 0x03	; 3
     4aa:	31 05       	cpc	r19, r1
     4ac:	51 f0       	breq	.+20     	; 0x4c2 <tempSensorTask+0x72>
     4ae:	1f 92       	push	r1
     4b0:	8f 93       	push	r24
     4b2:	df 92       	push	r13
     4b4:	cf 92       	push	r12
     4b6:	0e 94 76 26 	call	0x4cec	; 0x4cec <printf>
     4ba:	0f 90       	pop	r0
     4bc:	0f 90       	pop	r0
     4be:	0f 90       	pop	r0
     4c0:	0f 90       	pop	r0
     4c2:	84 e6       	ldi	r24, 0x64	; 100
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <vTaskDelay>
     4ca:	0e 94 b7 19 	call	0x336e	; 0x336e <hih8120Meassure>
     4ce:	28 2f       	mov	r18, r24
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	21 15       	cp	r18, r1
     4d4:	31 05       	cpc	r19, r1
     4d6:	69 f0       	breq	.+26     	; 0x4f2 <tempSensorTask+0xa2>
     4d8:	23 30       	cpi	r18, 0x03	; 3
     4da:	31 05       	cpc	r19, r1
     4dc:	51 f0       	breq	.+20     	; 0x4f2 <tempSensorTask+0xa2>
     4de:	1f 92       	push	r1
     4e0:	8f 93       	push	r24
     4e2:	ff 92       	push	r15
     4e4:	ef 92       	push	r14
     4e6:	0e 94 76 26 	call	0x4cec	; 0x4cec <printf>
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	84 e6       	ldi	r24, 0x64	; 100
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <vTaskDelay>
     4fa:	6f ef       	ldi	r22, 0xFF	; 255
     4fc:	7f ef       	ldi	r23, 0xFF	; 255
     4fe:	80 91 d6 07 	lds	r24, 0x07D6	; 0x8007d6 <__data_end>
     502:	90 91 d7 07 	lds	r25, 0x07D7	; 0x8007d7 <__data_end+0x1>
     506:	e5 d6       	rcall	.+3530   	; 0x12d2 <xQueueSemaphoreTake>
     508:	0e 94 c8 19 	call	0x3390	; 0x3390 <hih8120GetHumidity>
     50c:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__fixsfsi>
     510:	7b 83       	std	Y+3, r23	; 0x03
     512:	6a 83       	std	Y+2, r22	; 0x02
     514:	0e 94 dd 19 	call	0x33ba	; 0x33ba <hih8120GetTemperature>
     518:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <__fixsfsi>
     51c:	68 83       	st	Y, r22
     51e:	79 83       	std	Y+1, r23	; 0x01
     520:	7f 93       	push	r23
     522:	6f 93       	push	r22
     524:	8b 81       	ldd	r24, Y+3	; 0x03
     526:	8f 93       	push	r24
     528:	8a 81       	ldd	r24, Y+2	; 0x02
     52a:	8f 93       	push	r24
     52c:	1f 93       	push	r17
     52e:	0f 93       	push	r16
     530:	0e 94 76 26 	call	0x4cec	; 0x4cec <printf>
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	40 e0       	ldi	r20, 0x00	; 0
     538:	50 e0       	ldi	r21, 0x00	; 0
     53a:	60 e0       	ldi	r22, 0x00	; 0
     53c:	70 e0       	ldi	r23, 0x00	; 0
     53e:	80 91 d6 07 	lds	r24, 0x07D6	; 0x8007d6 <__data_end>
     542:	90 91 d7 07 	lds	r25, 0x07D7	; 0x8007d7 <__data_end+0x1>
     546:	57 d5       	rcall	.+2734   	; 0xff6 <xQueueGenericSend>
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
     552:	0f 90       	pop	r0
     554:	9e cf       	rjmp	.-196    	; 0x492 <tempSensorTask+0x42>

00000556 <co2Callback>:
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
     55a:	c8 2f       	mov	r28, r24
     55c:	d9 2f       	mov	r29, r25
     55e:	6f ef       	ldi	r22, 0xFF	; 255
     560:	7f ef       	ldi	r23, 0xFF	; 255
     562:	80 91 d6 07 	lds	r24, 0x07D6	; 0x8007d6 <__data_end>
     566:	90 91 d7 07 	lds	r25, 0x07D7	; 0x8007d7 <__data_end+0x1>
     56a:	b3 d6       	rcall	.+3430   	; 0x12d2 <xQueueSemaphoreTake>
     56c:	e8 e2       	ldi	r30, 0x28	; 40
     56e:	fa e0       	ldi	r31, 0x0A	; 10
     570:	c4 83       	std	Z+4, r28	; 0x04
     572:	d5 83       	std	Z+5, r29	; 0x05
     574:	df 93       	push	r29
     576:	cf 93       	push	r28
     578:	8b e9       	ldi	r24, 0x9B	; 155
     57a:	92 e0       	ldi	r25, 0x02	; 2
     57c:	9f 93       	push	r25
     57e:	8f 93       	push	r24
     580:	0e 94 76 26 	call	0x4cec	; 0x4cec <printf>
     584:	20 e0       	ldi	r18, 0x00	; 0
     586:	40 e0       	ldi	r20, 0x00	; 0
     588:	50 e0       	ldi	r21, 0x00	; 0
     58a:	60 e0       	ldi	r22, 0x00	; 0
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	80 91 d6 07 	lds	r24, 0x07D6	; 0x8007d6 <__data_end>
     592:	90 91 d7 07 	lds	r25, 0x07D7	; 0x8007d7 <__data_end+0x1>
     596:	2f d5       	rcall	.+2654   	; 0xff6 <xQueueGenericSend>
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	08 95       	ret

000005a6 <lightCallback>:
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
     5aa:	00 d0       	rcall	.+0      	; 0x5ac <lightCallback+0x6>
     5ac:	1f 92       	push	r1
     5ae:	cd b7       	in	r28, 0x3d	; 61
     5b0:	de b7       	in	r29, 0x3e	; 62
     5b2:	81 30       	cpi	r24, 0x01	; 1
     5b4:	29 f0       	breq	.+10     	; 0x5c0 <lightCallback+0x1a>
     5b6:	8a ea       	ldi	r24, 0xAA	; 170
     5b8:	92 e0       	ldi	r25, 0x02	; 2
     5ba:	0e 94 89 26 	call	0x4d12	; 0x4d12 <puts>
     5be:	32 c0       	rjmp	.+100    	; 0x624 <lightCallback+0x7e>
     5c0:	ce 01       	movw	r24, r28
     5c2:	01 96       	adiw	r24, 0x01	; 1
     5c4:	0e 94 97 20 	call	0x412e	; 0x412e <tsl2591GetLux>
     5c8:	81 11       	cpse	r24, r1
     5ca:	28 c0       	rjmp	.+80     	; 0x61c <lightCallback+0x76>
     5cc:	6f ef       	ldi	r22, 0xFF	; 255
     5ce:	7f ef       	ldi	r23, 0xFF	; 255
     5d0:	80 91 d6 07 	lds	r24, 0x07D6	; 0x8007d6 <__data_end>
     5d4:	90 91 d7 07 	lds	r25, 0x07D7	; 0x8007d7 <__data_end+0x1>
     5d8:	7c d6       	rcall	.+3320   	; 0x12d2 <xQueueSemaphoreTake>
     5da:	69 81       	ldd	r22, Y+1	; 0x01
     5dc:	7a 81       	ldd	r23, Y+2	; 0x02
     5de:	8b 81       	ldd	r24, Y+3	; 0x03
     5e0:	9c 81       	ldd	r25, Y+4	; 0x04
     5e2:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__fixunssfsi>
     5e6:	e8 e2       	ldi	r30, 0x28	; 40
     5e8:	fa e0       	ldi	r31, 0x0A	; 10
     5ea:	66 83       	std	Z+6, r22	; 0x06
     5ec:	77 83       	std	Z+7, r23	; 0x07
     5ee:	7f 93       	push	r23
     5f0:	6f 93       	push	r22
     5f2:	81 ec       	ldi	r24, 0xC1	; 193
     5f4:	92 e0       	ldi	r25, 0x02	; 2
     5f6:	9f 93       	push	r25
     5f8:	8f 93       	push	r24
     5fa:	0e 94 76 26 	call	0x4cec	; 0x4cec <printf>
     5fe:	20 e0       	ldi	r18, 0x00	; 0
     600:	40 e0       	ldi	r20, 0x00	; 0
     602:	50 e0       	ldi	r21, 0x00	; 0
     604:	60 e0       	ldi	r22, 0x00	; 0
     606:	70 e0       	ldi	r23, 0x00	; 0
     608:	80 91 d6 07 	lds	r24, 0x07D6	; 0x8007d6 <__data_end>
     60c:	90 91 d7 07 	lds	r25, 0x07D7	; 0x8007d7 <__data_end+0x1>
     610:	f2 d4       	rcall	.+2532   	; 0xff6 <xQueueGenericSend>
     612:	0f 90       	pop	r0
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	04 c0       	rjmp	.+8      	; 0x624 <lightCallback+0x7e>
     61c:	8c ec       	ldi	r24, 0xCC	; 204
     61e:	92 e0       	ldi	r25, 0x02	; 2
     620:	0e 94 89 26 	call	0x4d12	; 0x4d12 <puts>
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	08 95       	ret

00000632 <_loRa_setup>:

//added:



void _loRa_setup(void){
     632:	ef 92       	push	r14
     634:	ff 92       	push	r15
     636:	1f 93       	push	r17
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
	
	e_LoRa_return_code_t rc;
	
	
	//For factory reset.
	printf("FactoryRest >%s<\n", 
     63c:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <lora_driver_rn2483_factory_reset>
     640:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <lora_driver_map_return_code_to_text>
     644:	9f 93       	push	r25
     646:	8f 93       	push	r24
     648:	89 e3       	ldi	r24, 0x39	; 57
     64a:	93 e0       	ldi	r25, 0x03	; 3
     64c:	9f 93       	push	r25
     64e:	8f 93       	push	r24
     650:	0e 94 76 26 	call	0x4cec	; 0x4cec <printf>
	lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
	
	//Configure to EU868 LoRaWAN standards.
	printf("Configure to EU868 >%s<\n", 
     654:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <lora_driver_configure_to_eu868>
     658:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <lora_driver_map_return_code_to_text>
     65c:	9f 93       	push	r25
     65e:	8f 93       	push	r24
     660:	8b e4       	ldi	r24, 0x4B	; 75
     662:	93 e0       	ldi	r25, 0x03	; 3
     664:	9f 93       	push	r25
     666:	8f 93       	push	r24
     668:	0e 94 76 26 	call	0x4cec	; 0x4cec <printf>
	lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
	
	//Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buff);
     66c:	84 ec       	ldi	r24, 0xC4	; 196
     66e:	99 e0       	ldi	r25, 0x09	; 9
     670:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI: %s >%s< \n", lora_driver_map_return_code_to_text(rc), _out_buff );
     674:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <lora_driver_map_return_code_to_text>
     678:	c4 ec       	ldi	r28, 0xC4	; 196
     67a:	d9 e0       	ldi	r29, 0x09	; 9
     67c:	df 93       	push	r29
     67e:	cf 93       	push	r28
     680:	9f 93       	push	r25
     682:	8f 93       	push	r24
     684:	84 e6       	ldi	r24, 0x64	; 100
     686:	93 e0       	ldi	r25, 0x03	; 3
     688:	9f 93       	push	r25
     68a:	8f 93       	push	r24
     68c:	0e 94 76 26 	call	0x4cec	; 0x4cec <printf>
	
	
	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buff, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buff)));
     690:	ce 01       	movw	r24, r28
     692:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <lora_driver_set_device_identifier>
     696:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <lora_driver_map_return_code_to_text>
     69a:	9f 93       	push	r25
     69c:	8f 93       	push	r24
     69e:	df 93       	push	r29
     6a0:	cf 93       	push	r28
     6a2:	89 e7       	ldi	r24, 0x79	; 121
     6a4:	93 e0       	ldi	r25, 0x03	; 3
     6a6:	9f 93       	push	r25
     6a8:	8f 93       	push	r24
     6aa:	0e 94 76 26 	call	0x4cec	; 0x4cec <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buff, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buff)));
     6ae:	ae 01       	movw	r20, r28
     6b0:	6e e8       	ldi	r22, 0x8E	; 142
     6b2:	73 e0       	ldi	r23, 0x03	; 3
     6b4:	8f ea       	ldi	r24, 0xAF	; 175
     6b6:	93 e0       	ldi	r25, 0x03	; 3
     6b8:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <lora_driver_set_otaa_identity>
     6bc:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <lora_driver_map_return_code_to_text>
     6c0:	9f 93       	push	r25
     6c2:	8f 93       	push	r24
     6c4:	df 93       	push	r29
     6c6:	cf 93       	push	r28
     6c8:	8e e8       	ldi	r24, 0x8E	; 142
     6ca:	93 e0       	ldi	r25, 0x03	; 3
     6cc:	9f 93       	push	r25
     6ce:	8f 93       	push	r24
     6d0:	8f ea       	ldi	r24, 0xAF	; 175
     6d2:	93 e0       	ldi	r25, 0x03	; 3
     6d4:	9f 93       	push	r25
     6d6:	8f 93       	push	r24
     6d8:	80 ec       	ldi	r24, 0xC0	; 192
     6da:	93 e0       	ldi	r25, 0x03	; 3
     6dc:	9f 93       	push	r25
     6de:	8f 93       	push	r24
     6e0:	0e 94 76 26 	call	0x4cec	; 0x4cec <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
     6e4:	0e 94 b1 1c 	call	0x3962	; 0x3962 <lora_driver_save_mac>
     6e8:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <lora_driver_map_return_code_to_text>
     6ec:	9f 93       	push	r25
     6ee:	8f 93       	push	r24
     6f0:	86 ef       	ldi	r24, 0xF6	; 246
     6f2:	93 e0       	ldi	r25, 0x03	; 3
     6f4:	9f 93       	push	r25
     6f6:	8f 93       	push	r24
     6f8:	0e 94 76 26 	call	0x4cec	; 0x4cec <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
     6fc:	8d b7       	in	r24, 0x3d	; 61
     6fe:	9e b7       	in	r25, 0x3e	; 62
     700:	82 96       	adiw	r24, 0x22	; 34
     702:	0f b6       	in	r0, 0x3f	; 63
     704:	f8 94       	cli
     706:	9e bf       	out	0x3e, r25	; 62
     708:	0f be       	out	0x3f, r0	; 63
     70a:	8d bf       	out	0x3d, r24	; 61
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <lora_driver_set_adaptive_data_rate>
     712:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <lora_driver_map_return_code_to_text>
     716:	9f 93       	push	r25
     718:	8f 93       	push	r24
     71a:	85 e0       	ldi	r24, 0x05	; 5
     71c:	94 e0       	ldi	r25, 0x04	; 4
     71e:	9f 93       	push	r25
     720:	8f 93       	push	r24
     722:	0e 94 76 26 	call	0x4cec	; 0x4cec <printf>
     726:	0f 90       	pop	r0
     728:	0f 90       	pop	r0
     72a:	0f 90       	pop	r0
     72c:	0f 90       	pop	r0
     72e:	c5 e0       	ldi	r28, 0x05	; 5
     730:	d0 e0       	ldi	r29, 0x00	; 0

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 5;
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     732:	0f 2e       	mov	r0, r31
     734:	f6 e2       	ldi	r31, 0x26	; 38
     736:	ef 2e       	mov	r14, r31
     738:	f4 e0       	ldi	r31, 0x04	; 4
     73a:	ff 2e       	mov	r15, r31
     73c:	f0 2d       	mov	r31, r0
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 5;
	do {
		rc = lora_driver_join(LoRa_OTAA);
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	0e 94 b7 1c 	call	0x396e	; 0x396e <lora_driver_join>
     744:	18 2f       	mov	r17, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     746:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <lora_driver_map_return_code_to_text>
     74a:	9f 93       	push	r25
     74c:	8f 93       	push	r24
     74e:	df 93       	push	r29
     750:	cf 93       	push	r28
     752:	ff 92       	push	r15
     754:	ef 92       	push	r14
     756:	0e 94 76 26 	call	0x4cec	; 0x4cec <printf>
		if ( rc == LoRa_ACCEPTED){
     75a:	0f 90       	pop	r0
     75c:	0f 90       	pop	r0
     75e:	0f 90       	pop	r0
     760:	0f 90       	pop	r0
     762:	0f 90       	pop	r0
     764:	0f 90       	pop	r0
     766:	18 30       	cpi	r17, 0x08	; 8
     768:	11 f0       	breq	.+4      	; 0x76e <_loRa_setup+0x13c>
     76a:	21 97       	sbiw	r28, 0x01	; 1
			break;
		}

	} while (--maxJoinTriesLeft);
     76c:	41 f7       	brne	.-48     	; 0x73e <_loRa_setup+0x10c>

}
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	1f 91       	pop	r17
     774:	ff 90       	pop	r15
     776:	ef 90       	pop	r14
     778:	08 95       	ret

0000077a <loRaWanTask>:

void loRaWanTask(void* pvParamters){
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	cd b7       	in	r28, 0x3d	; 61
     780:	de b7       	in	r29, 0x3e	; 62
     782:	66 97       	sbiw	r28, 0x16	; 22
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	f8 94       	cli
     788:	de bf       	out	0x3e, r29	; 62
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	cd bf       	out	0x3d, r28	; 61
	(void)pvParamters;

	//for resetting the LoRaWAN hardware.
	printf("HALLO THERE\n");
     78e:	86 e4       	ldi	r24, 0x46	; 70
     790:	94 e0       	ldi	r25, 0x04	; 4
     792:	0e 94 89 26 	call	0x4d12	; 0x4d12 <puts>
	lora_driver_reset_rn2483(1);
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	0e 94 3c 1c 	call	0x3878	; 0x3878 <lora_driver_reset_rn2483>
	vTaskDelay(150);
     79c:	86 e9       	ldi	r24, 0x96	; 150
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <vTaskDelay>
	lora_driver_reset_rn2483(0);
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	0e 94 3c 1c 	call	0x3878	; 0x3878 <lora_driver_reset_rn2483>
	vTaskDelay(150);
     7aa:	86 e9       	ldi	r24, 0x96	; 150
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <vTaskDelay>
	lora_driver_flush_buffers();
     7b2:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <lora_driver_flush_buffers>
	
	_loRa_setup();
     7b6:	3d df       	rcall	.-390    	; 0x632 <_loRa_setup>
	vTaskDelay(200);
     7b8:	88 ec       	ldi	r24, 0xC8	; 200
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <vTaskDelay>
	
	lora_payload_t _uplink_payload;
	
	_uplink_payload.len = 7;
     7c0:	87 e0       	ldi	r24, 0x07	; 7
     7c2:	8a 83       	std	Y+2, r24	; 0x02
	_uplink_payload.port_no = 2;
     7c4:	82 e0       	ldi	r24, 0x02	; 2
     7c6:	89 83       	std	Y+1, r24	; 0x01
	
	while(1){
		
		///////////////////semaphore:
		xSemaphoreTake(semaphore, portMAX_DELAY);
		_uplink_payload.bytes[0] = plantdata.humidity;
     7c8:	08 e2       	ldi	r16, 0x28	; 40
     7ca:	1a e0       	ldi	r17, 0x0A	; 10
		_uplink_payload.bytes[3] = plantdata.co2 & 0xFF;
		_uplink_payload.bytes[4] = plantdata.light >> 8;
		_uplink_payload.bytes[5] = plantdata.light& 0xFF;
		_uplink_payload.bytes[6] = plantdata.water;
		
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
     7cc:	0f 2e       	mov	r0, r31
     7ce:	f2 e5       	ldi	r31, 0x52	; 82
     7d0:	ef 2e       	mov	r14, r31
     7d2:	f4 e0       	ldi	r31, 0x04	; 4
     7d4:	ff 2e       	mov	r15, r31
     7d6:	f0 2d       	mov	r31, r0
	
	
	while(1){
		
		///////////////////semaphore:
		xSemaphoreTake(semaphore, portMAX_DELAY);
     7d8:	6f ef       	ldi	r22, 0xFF	; 255
     7da:	7f ef       	ldi	r23, 0xFF	; 255
     7dc:	80 91 d6 07 	lds	r24, 0x07D6	; 0x8007d6 <__data_end>
     7e0:	90 91 d7 07 	lds	r25, 0x07D7	; 0x8007d7 <__data_end+0x1>
     7e4:	76 d5       	rcall	.+2796   	; 0x12d2 <xQueueSemaphoreTake>
		_uplink_payload.bytes[0] = plantdata.humidity;
     7e6:	f8 01       	movw	r30, r16
     7e8:	82 81       	ldd	r24, Z+2	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
		_uplink_payload.bytes[1] = plantdata.temperature;
     7ec:	80 81       	ld	r24, Z
     7ee:	8c 83       	std	Y+4, r24	; 0x04
		_uplink_payload.bytes[2] = plantdata.co2 >> 8;
     7f0:	84 81       	ldd	r24, Z+4	; 0x04
     7f2:	95 81       	ldd	r25, Z+5	; 0x05
     7f4:	9d 83       	std	Y+5, r25	; 0x05
		_uplink_payload.bytes[3] = plantdata.co2 & 0xFF;
     7f6:	8e 83       	std	Y+6, r24	; 0x06
		_uplink_payload.bytes[4] = plantdata.light >> 8;
     7f8:	86 81       	ldd	r24, Z+6	; 0x06
     7fa:	97 81       	ldd	r25, Z+7	; 0x07
     7fc:	9f 83       	std	Y+7, r25	; 0x07
		_uplink_payload.bytes[5] = plantdata.light& 0xFF;
     7fe:	88 87       	std	Y+8, r24	; 0x08
		_uplink_payload.bytes[6] = plantdata.water;
     800:	80 85       	ldd	r24, Z+8	; 0x08
     802:	89 87       	std	Y+9, r24	; 0x09
		
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
     804:	be 01       	movw	r22, r28
     806:	6f 5f       	subi	r22, 0xFF	; 255
     808:	7f 4f       	sbci	r23, 0xFF	; 255
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <lora_driver_sent_upload_message>
     810:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <lora_driver_map_return_code_to_text>
     814:	9f 93       	push	r25
     816:	8f 93       	push	r24
     818:	ff 92       	push	r15
     81a:	ef 92       	push	r14
     81c:	0e 94 76 26 	call	0x4cec	; 0x4cec <printf>
		vTaskDelay(1000);
     820:	88 ee       	ldi	r24, 0xE8	; 232
     822:	93 e0       	ldi	r25, 0x03	; 3
     824:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <vTaskDelay>
     828:	0f 90       	pop	r0
     82a:	0f 90       	pop	r0
     82c:	0f 90       	pop	r0
     82e:	0f 90       	pop	r0
     830:	d3 cf       	rjmp	.-90     	; 0x7d8 <loRaWanTask+0x5e>

00000832 <main>:
	vTaskDelete(NULL);
}
	
//

int main() {
     832:	ef 92       	push	r14
     834:	ff 92       	push	r15
     836:	0f 93       	push	r16
	
	hal_create(LED_TASK_PRIORITY);
     838:	83 e0       	ldi	r24, 0x03	; 3
     83a:	0e 94 2c 19 	call	0x3258	; 0x3258 <hal_create>
	lora_driver_create(ser_USART1);
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	0e 94 00 1c 	call	0x3800	; 0x3800 <lora_driver_create>
	stdioCreate(0);
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <stdioCreate>

	
	xTaskCreate(tempSensorTask, "Temperature measurement", configMINIMAL_STACK_SIZE, NULL, TEMP_TASK_PRIORITY, &tempSensorHandle);
     84a:	0f 2e       	mov	r0, r31
     84c:	fa ed       	ldi	r31, 0xDA	; 218
     84e:	ef 2e       	mov	r14, r31
     850:	f7 e0       	ldi	r31, 0x07	; 7
     852:	ff 2e       	mov	r15, r31
     854:	f0 2d       	mov	r31, r0
     856:	01 e0       	ldi	r16, 0x01	; 1
     858:	20 e0       	ldi	r18, 0x00	; 0
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	40 ec       	ldi	r20, 0xC0	; 192
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	67 e6       	ldi	r22, 0x67	; 103
     862:	74 e0       	ldi	r23, 0x04	; 4
     864:	88 e2       	ldi	r24, 0x28	; 40
     866:	92 e0       	ldi	r25, 0x02	; 2
     868:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <xTaskCreate>
	//xTaskCreate(co2SensorTask, "CO2 measurement", configMINIMAL_STACK_SIZE, NULL, CO2_TASK_PRIORITY, &co2SensorHandle);
	//xTaskCreate(lightSensorTask, "Light measurement", configMINIMAL_STACK_SIZE, NULL, LIGHT_TASK_PRIORITY, &lightSensorHandle);
	semaphore = xSemaphoreCreateMutex();
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	58 d4       	rcall	.+2224   	; 0x1120 <xQueueCreateMutex>
     870:	90 93 d7 07 	sts	0x07D7, r25	; 0x8007d7 <__data_end+0x1>
     874:	80 93 d6 07 	sts	0x07D6, r24	; 0x8007d6 <__data_end>
	//added:
	xTaskCreate(loRaWanTask, "Led", configMINIMAL_STACK_SIZE, NULL,LED_TASK_PRIORITY, &loRaWanHandle);
     878:	0f 2e       	mov	r0, r31
     87a:	f8 ed       	ldi	r31, 0xD8	; 216
     87c:	ef 2e       	mov	r14, r31
     87e:	f7 e0       	ldi	r31, 0x07	; 7
     880:	ff 2e       	mov	r15, r31
     882:	f0 2d       	mov	r31, r0
     884:	03 e0       	ldi	r16, 0x03	; 3
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	40 ec       	ldi	r20, 0xC0	; 192
     88c:	50 e0       	ldi	r21, 0x00	; 0
     88e:	6f e7       	ldi	r22, 0x7F	; 127
     890:	74 e0       	ldi	r23, 0x04	; 4
     892:	8d eb       	ldi	r24, 0xBD	; 189
     894:	93 e0       	ldi	r25, 0x03	; 3
     896:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <xTaskCreate>
	//xTaskCreate(servoMotorTask, "Servo Motor", configMINIMAL_STACK_SIZE, NULL, SERVO_TASK_PRIORITY,&ServoMotorHandle);
	//
	
	//setup temperature/humidity sensor
	if(HIH8120_OK != hih8120Create()) {
     89a:	0e 94 8b 19 	call	0x3316	; 0x3316 <hih8120Create>
     89e:	81 11       	cpse	r24, r1
     8a0:	2c c0       	rjmp	.+88     	; 0x8fa <main+0xc8>
		printf("Failed to initialize temperature sensor\n");
		return 1;
	}
	//setup servoMotor
	rcServoCreate();
     8a2:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <rcServoCreate>

	//setup co2 sensor
	mh_z19_create(ser_USART3, co2Callback);
     8a6:	6b ea       	ldi	r22, 0xAB	; 171
     8a8:	72 e0       	ldi	r23, 0x02	; 2
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <mh_z19_create>

	//setup light sensor
	int r = tsl2591Create(lightCallback);
     8b0:	83 ed       	ldi	r24, 0xD3	; 211
     8b2:	92 e0       	ldi	r25, 0x02	; 2
     8b4:	0e 94 67 20 	call	0x40ce	; 0x40ce <tsl2591Create>
	if(r != TSL2591_OK) {
     8b8:	88 23       	and	r24, r24
     8ba:	61 f0       	breq	.+24     	; 0x8d4 <main+0xa2>
		printf("Failed to initialize light sensor: %d\n", r);
     8bc:	1f 92       	push	r1
     8be:	8f 93       	push	r24
     8c0:	8b ea       	ldi	r24, 0xAB	; 171
     8c2:	94 e0       	ldi	r25, 0x04	; 4
     8c4:	9f 93       	push	r25
     8c6:	8f 93       	push	r24
     8c8:	0e 94 76 26 	call	0x4cec	; 0x4cec <printf>
     8cc:	0f 90       	pop	r0
     8ce:	0f 90       	pop	r0
     8d0:	0f 90       	pop	r0
     8d2:	0f 90       	pop	r0
	}

	r = tsl2591Enable();
     8d4:	0e 94 82 20 	call	0x4104	; 0x4104 <tsl2591Enable>
	if(r != TSL2591_OK) {
     8d8:	88 23       	and	r24, r24
     8da:	61 f0       	breq	.+24     	; 0x8f4 <main+0xc2>
		printf("Failed to enable light sensor %d\n", r);
     8dc:	1f 92       	push	r1
     8de:	8f 93       	push	r24
     8e0:	82 ed       	ldi	r24, 0xD2	; 210
     8e2:	94 e0       	ldi	r25, 0x04	; 4
     8e4:	9f 93       	push	r25
     8e6:	8f 93       	push	r24
     8e8:	0e 94 76 26 	call	0x4cec	; 0x4cec <printf>
     8ec:	0f 90       	pop	r0
     8ee:	0f 90       	pop	r0
     8f0:	0f 90       	pop	r0
     8f2:	0f 90       	pop	r0
	}
	
	vTaskStartScheduler();
     8f4:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <vTaskStartScheduler>
     8f8:	ff cf       	rjmp	.-2      	; 0x8f8 <main+0xc6>
	//xTaskCreate(servoMotorTask, "Servo Motor", configMINIMAL_STACK_SIZE, NULL, SERVO_TASK_PRIORITY,&ServoMotorHandle);
	//
	
	//setup temperature/humidity sensor
	if(HIH8120_OK != hih8120Create()) {
		printf("Failed to initialize temperature sensor\n");
     8fa:	83 e8       	ldi	r24, 0x83	; 131
     8fc:	94 e0       	ldi	r25, 0x04	; 4
     8fe:	0e 94 89 26 	call	0x4d12	; 0x4d12 <puts>
	vTaskStartScheduler();
	
	while(1) {
		;
	}
}
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	0f 91       	pop	r16
     908:	ff 90       	pop	r15
     90a:	ef 90       	pop	r14
     90c:	08 95       	ret

0000090e <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     90e:	e8 e0       	ldi	r30, 0x08	; 8
     910:	f1 e0       	ldi	r31, 0x01	; 1
     912:	90 81       	ld	r25, Z
     914:	90 7f       	andi	r25, 0xF0	; 240
     916:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     918:	90 81       	ld	r25, Z
     91a:	8f 70       	andi	r24, 0x0F	; 15
     91c:	98 2b       	or	r25, r24
     91e:	90 83       	st	Z, r25
     920:	08 95       	ret

00000922 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     922:	e8 e0       	ldi	r30, 0x08	; 8
     924:	f1 e0       	ldi	r31, 0x01	; 1
     926:	80 81       	ld	r24, Z
     928:	80 7f       	andi	r24, 0xF0	; 240
     92a:	80 83       	st	Z, r24
     92c:	08 95       	ret

0000092e <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
     934:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     938:	ce 01       	movw	r24, r28
     93a:	0e 94 17 25 	call	0x4a2e	; 0x4a2e <malloc>
     93e:	ec 01       	movw	r28, r24
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     940:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
     944:	20 97       	sbiw	r28, 0x00	; 0
     946:	11 f4       	brne	.+4      	; 0x94c <pvPortMalloc+0x1e>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
     948:	0e 94 ca 14 	call	0x2994	; 0x2994 <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
     94c:	ce 01       	movw	r24, r28
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	08 95       	ret

00000954 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
    if( pv )
     958:	00 97       	sbiw	r24, 0x00	; 0
     95a:	41 f0       	breq	.+16     	; 0x96c <vPortFree+0x18>
     95c:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
     95e:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <vTaskSuspendAll>
        {
            free( pv );
     962:	ce 01       	movw	r24, r28
     964:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
     968:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <xTaskResumeAll>
    }
}
     96c:	df 91       	pop	r29
     96e:	cf 91       	pop	r28
     970:	08 95       	ret

00000972 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     972:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     974:	03 96       	adiw	r24, 0x03	; 3
     976:	92 83       	std	Z+2, r25	; 0x02
     978:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     97a:	2f ef       	ldi	r18, 0xFF	; 255
     97c:	3f ef       	ldi	r19, 0xFF	; 255
     97e:	34 83       	std	Z+4, r19	; 0x04
     980:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     982:	96 83       	std	Z+6, r25	; 0x06
     984:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     986:	90 87       	std	Z+8, r25	; 0x08
     988:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     98a:	10 82       	st	Z, r1
     98c:	08 95       	ret

0000098e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     98e:	fc 01       	movw	r30, r24
     990:	11 86       	std	Z+9, r1	; 0x09
     992:	10 86       	std	Z+8, r1	; 0x08
     994:	08 95       	ret

00000996 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	9c 01       	movw	r18, r24
     99c:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     99e:	dc 01       	movw	r26, r24
     9a0:	11 96       	adiw	r26, 0x01	; 1
     9a2:	cd 91       	ld	r28, X+
     9a4:	dc 91       	ld	r29, X
     9a6:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     9a8:	d3 83       	std	Z+3, r29	; 0x03
     9aa:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     9ac:	8c 81       	ldd	r24, Y+4	; 0x04
     9ae:	9d 81       	ldd	r25, Y+5	; 0x05
     9b0:	95 83       	std	Z+5, r25	; 0x05
     9b2:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     9b4:	8c 81       	ldd	r24, Y+4	; 0x04
     9b6:	9d 81       	ldd	r25, Y+5	; 0x05
     9b8:	dc 01       	movw	r26, r24
     9ba:	13 96       	adiw	r26, 0x03	; 3
     9bc:	7c 93       	st	X, r23
     9be:	6e 93       	st	-X, r22
     9c0:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     9c2:	7d 83       	std	Y+5, r23	; 0x05
     9c4:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     9c6:	31 87       	std	Z+9, r19	; 0x09
     9c8:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     9ca:	f9 01       	movw	r30, r18
     9cc:	80 81       	ld	r24, Z
     9ce:	8f 5f       	subi	r24, 0xFF	; 255
     9d0:	80 83       	st	Z, r24
}
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	08 95       	ret

000009d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     9de:	48 81       	ld	r20, Y
     9e0:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     9e2:	4f 3f       	cpi	r20, 0xFF	; 255
     9e4:	2f ef       	ldi	r18, 0xFF	; 255
     9e6:	52 07       	cpc	r21, r18
     9e8:	21 f4       	brne	.+8      	; 0x9f2 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     9ea:	fc 01       	movw	r30, r24
     9ec:	a7 81       	ldd	r26, Z+7	; 0x07
     9ee:	b0 85       	ldd	r27, Z+8	; 0x08
     9f0:	0d c0       	rjmp	.+26     	; 0xa0c <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     9f2:	dc 01       	movw	r26, r24
     9f4:	13 96       	adiw	r26, 0x03	; 3
     9f6:	01 c0       	rjmp	.+2      	; 0x9fa <vListInsert+0x22>
     9f8:	df 01       	movw	r26, r30
     9fa:	12 96       	adiw	r26, 0x02	; 2
     9fc:	ed 91       	ld	r30, X+
     9fe:	fc 91       	ld	r31, X
     a00:	13 97       	sbiw	r26, 0x03	; 3
     a02:	20 81       	ld	r18, Z
     a04:	31 81       	ldd	r19, Z+1	; 0x01
     a06:	42 17       	cp	r20, r18
     a08:	53 07       	cpc	r21, r19
     a0a:	b0 f7       	brcc	.-20     	; 0x9f8 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     a0c:	12 96       	adiw	r26, 0x02	; 2
     a0e:	ed 91       	ld	r30, X+
     a10:	fc 91       	ld	r31, X
     a12:	13 97       	sbiw	r26, 0x03	; 3
     a14:	fb 83       	std	Y+3, r31	; 0x03
     a16:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     a18:	d5 83       	std	Z+5, r29	; 0x05
     a1a:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     a1c:	bd 83       	std	Y+5, r27	; 0x05
     a1e:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     a20:	13 96       	adiw	r26, 0x03	; 3
     a22:	dc 93       	st	X, r29
     a24:	ce 93       	st	-X, r28
     a26:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     a28:	99 87       	std	Y+9, r25	; 0x09
     a2a:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     a2c:	fc 01       	movw	r30, r24
     a2e:	20 81       	ld	r18, Z
     a30:	2f 5f       	subi	r18, 0xFF	; 255
     a32:	20 83       	st	Z, r18
}
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
     a38:	08 95       	ret

00000a3a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     a3a:	cf 93       	push	r28
     a3c:	df 93       	push	r29
     a3e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     a40:	a0 85       	ldd	r26, Z+8	; 0x08
     a42:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     a44:	c2 81       	ldd	r28, Z+2	; 0x02
     a46:	d3 81       	ldd	r29, Z+3	; 0x03
     a48:	84 81       	ldd	r24, Z+4	; 0x04
     a4a:	95 81       	ldd	r25, Z+5	; 0x05
     a4c:	9d 83       	std	Y+5, r25	; 0x05
     a4e:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     a50:	c4 81       	ldd	r28, Z+4	; 0x04
     a52:	d5 81       	ldd	r29, Z+5	; 0x05
     a54:	82 81       	ldd	r24, Z+2	; 0x02
     a56:	93 81       	ldd	r25, Z+3	; 0x03
     a58:	9b 83       	std	Y+3, r25	; 0x03
     a5a:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     a5c:	11 96       	adiw	r26, 0x01	; 1
     a5e:	8d 91       	ld	r24, X+
     a60:	9c 91       	ld	r25, X
     a62:	12 97       	sbiw	r26, 0x02	; 2
     a64:	e8 17       	cp	r30, r24
     a66:	f9 07       	cpc	r31, r25
     a68:	31 f4       	brne	.+12     	; 0xa76 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     a6a:	84 81       	ldd	r24, Z+4	; 0x04
     a6c:	95 81       	ldd	r25, Z+5	; 0x05
     a6e:	12 96       	adiw	r26, 0x02	; 2
     a70:	9c 93       	st	X, r25
     a72:	8e 93       	st	-X, r24
     a74:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     a76:	11 86       	std	Z+9, r1	; 0x09
     a78:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     a7a:	8c 91       	ld	r24, X
     a7c:	81 50       	subi	r24, 0x01	; 1
     a7e:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     a80:	8c 91       	ld	r24, X
}
     a82:	df 91       	pop	r29
     a84:	cf 91       	pop	r28
     a86:	08 95       	ret

00000a88 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     a88:	31 e1       	ldi	r19, 0x11	; 17
     a8a:	fc 01       	movw	r30, r24
     a8c:	30 83       	st	Z, r19
     a8e:	31 97       	sbiw	r30, 0x01	; 1
     a90:	22 e2       	ldi	r18, 0x22	; 34
     a92:	20 83       	st	Z, r18
     a94:	31 97       	sbiw	r30, 0x01	; 1
     a96:	a3 e3       	ldi	r26, 0x33	; 51
     a98:	a0 83       	st	Z, r26
     a9a:	31 97       	sbiw	r30, 0x01	; 1
     a9c:	60 83       	st	Z, r22
     a9e:	31 97       	sbiw	r30, 0x01	; 1
     aa0:	70 83       	st	Z, r23
     aa2:	31 97       	sbiw	r30, 0x01	; 1
     aa4:	10 82       	st	Z, r1
     aa6:	31 97       	sbiw	r30, 0x01	; 1
     aa8:	10 82       	st	Z, r1
     aaa:	31 97       	sbiw	r30, 0x01	; 1
     aac:	60 e8       	ldi	r22, 0x80	; 128
     aae:	60 83       	st	Z, r22
     ab0:	31 97       	sbiw	r30, 0x01	; 1
     ab2:	10 82       	st	Z, r1
     ab4:	31 97       	sbiw	r30, 0x01	; 1
     ab6:	10 82       	st	Z, r1
     ab8:	31 97       	sbiw	r30, 0x01	; 1
     aba:	10 82       	st	Z, r1
     abc:	31 97       	sbiw	r30, 0x01	; 1
     abe:	62 e0       	ldi	r22, 0x02	; 2
     ac0:	60 83       	st	Z, r22
     ac2:	31 97       	sbiw	r30, 0x01	; 1
     ac4:	63 e0       	ldi	r22, 0x03	; 3
     ac6:	60 83       	st	Z, r22
     ac8:	31 97       	sbiw	r30, 0x01	; 1
     aca:	64 e0       	ldi	r22, 0x04	; 4
     acc:	60 83       	st	Z, r22
     ace:	31 97       	sbiw	r30, 0x01	; 1
     ad0:	65 e0       	ldi	r22, 0x05	; 5
     ad2:	60 83       	st	Z, r22
     ad4:	31 97       	sbiw	r30, 0x01	; 1
     ad6:	66 e0       	ldi	r22, 0x06	; 6
     ad8:	60 83       	st	Z, r22
     ada:	31 97       	sbiw	r30, 0x01	; 1
     adc:	67 e0       	ldi	r22, 0x07	; 7
     ade:	60 83       	st	Z, r22
     ae0:	31 97       	sbiw	r30, 0x01	; 1
     ae2:	68 e0       	ldi	r22, 0x08	; 8
     ae4:	60 83       	st	Z, r22
     ae6:	31 97       	sbiw	r30, 0x01	; 1
     ae8:	69 e0       	ldi	r22, 0x09	; 9
     aea:	60 83       	st	Z, r22
     aec:	31 97       	sbiw	r30, 0x01	; 1
     aee:	60 e1       	ldi	r22, 0x10	; 16
     af0:	60 83       	st	Z, r22
     af2:	31 97       	sbiw	r30, 0x01	; 1
     af4:	30 83       	st	Z, r19
     af6:	31 97       	sbiw	r30, 0x01	; 1
     af8:	32 e1       	ldi	r19, 0x12	; 18
     afa:	30 83       	st	Z, r19
     afc:	31 97       	sbiw	r30, 0x01	; 1
     afe:	33 e1       	ldi	r19, 0x13	; 19
     b00:	30 83       	st	Z, r19
     b02:	31 97       	sbiw	r30, 0x01	; 1
     b04:	34 e1       	ldi	r19, 0x14	; 20
     b06:	30 83       	st	Z, r19
     b08:	31 97       	sbiw	r30, 0x01	; 1
     b0a:	35 e1       	ldi	r19, 0x15	; 21
     b0c:	30 83       	st	Z, r19
     b0e:	31 97       	sbiw	r30, 0x01	; 1
     b10:	36 e1       	ldi	r19, 0x16	; 22
     b12:	30 83       	st	Z, r19
     b14:	31 97       	sbiw	r30, 0x01	; 1
     b16:	37 e1       	ldi	r19, 0x17	; 23
     b18:	30 83       	st	Z, r19
     b1a:	31 97       	sbiw	r30, 0x01	; 1
     b1c:	38 e1       	ldi	r19, 0x18	; 24
     b1e:	30 83       	st	Z, r19
     b20:	31 97       	sbiw	r30, 0x01	; 1
     b22:	39 e1       	ldi	r19, 0x19	; 25
     b24:	30 83       	st	Z, r19
     b26:	31 97       	sbiw	r30, 0x01	; 1
     b28:	30 e2       	ldi	r19, 0x20	; 32
     b2a:	30 83       	st	Z, r19
     b2c:	31 97       	sbiw	r30, 0x01	; 1
     b2e:	31 e2       	ldi	r19, 0x21	; 33
     b30:	30 83       	st	Z, r19
     b32:	31 97       	sbiw	r30, 0x01	; 1
     b34:	20 83       	st	Z, r18
     b36:	31 97       	sbiw	r30, 0x01	; 1
     b38:	23 e2       	ldi	r18, 0x23	; 35
     b3a:	20 83       	st	Z, r18
     b3c:	31 97       	sbiw	r30, 0x01	; 1
     b3e:	40 83       	st	Z, r20
     b40:	31 97       	sbiw	r30, 0x01	; 1
     b42:	50 83       	st	Z, r21
     b44:	31 97       	sbiw	r30, 0x01	; 1
     b46:	26 e2       	ldi	r18, 0x26	; 38
     b48:	20 83       	st	Z, r18
     b4a:	31 97       	sbiw	r30, 0x01	; 1
     b4c:	27 e2       	ldi	r18, 0x27	; 39
     b4e:	20 83       	st	Z, r18
     b50:	31 97       	sbiw	r30, 0x01	; 1
     b52:	28 e2       	ldi	r18, 0x28	; 40
     b54:	20 83       	st	Z, r18
     b56:	31 97       	sbiw	r30, 0x01	; 1
     b58:	29 e2       	ldi	r18, 0x29	; 41
     b5a:	20 83       	st	Z, r18
     b5c:	31 97       	sbiw	r30, 0x01	; 1
     b5e:	20 e3       	ldi	r18, 0x30	; 48
     b60:	20 83       	st	Z, r18
     b62:	31 97       	sbiw	r30, 0x01	; 1
     b64:	21 e3       	ldi	r18, 0x31	; 49
     b66:	20 83       	st	Z, r18
     b68:	89 97       	sbiw	r24, 0x29	; 41
     b6a:	08 95       	ret

00000b6c <xPortStartScheduler>:
     b6c:	a8 95       	wdr
     b6e:	90 ec       	ldi	r25, 0xC0	; 192
     b70:	88 e1       	ldi	r24, 0x18	; 24
     b72:	0f b6       	in	r0, 0x3f	; 63
     b74:	f8 94       	cli
     b76:	a8 95       	wdr
     b78:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     b82:	a0 91 40 08 	lds	r26, 0x0840	; 0x800840 <pxCurrentTCB>
     b86:	b0 91 41 08 	lds	r27, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
     b8a:	cd 91       	ld	r28, X+
     b8c:	cd bf       	out	0x3d, r28	; 61
     b8e:	dd 91       	ld	r29, X+
     b90:	de bf       	out	0x3e, r29	; 62
     b92:	ff 91       	pop	r31
     b94:	ef 91       	pop	r30
     b96:	df 91       	pop	r29
     b98:	cf 91       	pop	r28
     b9a:	bf 91       	pop	r27
     b9c:	af 91       	pop	r26
     b9e:	9f 91       	pop	r25
     ba0:	8f 91       	pop	r24
     ba2:	7f 91       	pop	r23
     ba4:	6f 91       	pop	r22
     ba6:	5f 91       	pop	r21
     ba8:	4f 91       	pop	r20
     baa:	3f 91       	pop	r19
     bac:	2f 91       	pop	r18
     bae:	1f 91       	pop	r17
     bb0:	0f 91       	pop	r16
     bb2:	ff 90       	pop	r15
     bb4:	ef 90       	pop	r14
     bb6:	df 90       	pop	r13
     bb8:	cf 90       	pop	r12
     bba:	bf 90       	pop	r11
     bbc:	af 90       	pop	r10
     bbe:	9f 90       	pop	r9
     bc0:	8f 90       	pop	r8
     bc2:	7f 90       	pop	r7
     bc4:	6f 90       	pop	r6
     bc6:	5f 90       	pop	r5
     bc8:	4f 90       	pop	r4
     bca:	3f 90       	pop	r3
     bcc:	2f 90       	pop	r2
     bce:	1f 90       	pop	r1
     bd0:	0f 90       	pop	r0
     bd2:	0c be       	out	0x3c, r0	; 60
     bd4:	0f 90       	pop	r0
     bd6:	0b be       	out	0x3b, r0	; 59
     bd8:	0f 90       	pop	r0
     bda:	0f be       	out	0x3f, r0	; 63
     bdc:	0f 90       	pop	r0
     bde:	08 95       	ret
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	08 95       	ret

00000be4 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     be4:	0f 92       	push	r0
     be6:	0f b6       	in	r0, 0x3f	; 63
     be8:	f8 94       	cli
     bea:	0f 92       	push	r0
     bec:	0b b6       	in	r0, 0x3b	; 59
     bee:	0f 92       	push	r0
     bf0:	0c b6       	in	r0, 0x3c	; 60
     bf2:	0f 92       	push	r0
     bf4:	1f 92       	push	r1
     bf6:	11 24       	eor	r1, r1
     bf8:	2f 92       	push	r2
     bfa:	3f 92       	push	r3
     bfc:	4f 92       	push	r4
     bfe:	5f 92       	push	r5
     c00:	6f 92       	push	r6
     c02:	7f 92       	push	r7
     c04:	8f 92       	push	r8
     c06:	9f 92       	push	r9
     c08:	af 92       	push	r10
     c0a:	bf 92       	push	r11
     c0c:	cf 92       	push	r12
     c0e:	df 92       	push	r13
     c10:	ef 92       	push	r14
     c12:	ff 92       	push	r15
     c14:	0f 93       	push	r16
     c16:	1f 93       	push	r17
     c18:	2f 93       	push	r18
     c1a:	3f 93       	push	r19
     c1c:	4f 93       	push	r20
     c1e:	5f 93       	push	r21
     c20:	6f 93       	push	r22
     c22:	7f 93       	push	r23
     c24:	8f 93       	push	r24
     c26:	9f 93       	push	r25
     c28:	af 93       	push	r26
     c2a:	bf 93       	push	r27
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
     c30:	ef 93       	push	r30
     c32:	ff 93       	push	r31
     c34:	a0 91 40 08 	lds	r26, 0x0840	; 0x800840 <pxCurrentTCB>
     c38:	b0 91 41 08 	lds	r27, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
     c3c:	0d b6       	in	r0, 0x3d	; 61
     c3e:	0d 92       	st	X+, r0
     c40:	0e b6       	in	r0, 0x3e	; 62
     c42:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     c44:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     c48:	a0 91 40 08 	lds	r26, 0x0840	; 0x800840 <pxCurrentTCB>
     c4c:	b0 91 41 08 	lds	r27, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
     c50:	cd 91       	ld	r28, X+
     c52:	cd bf       	out	0x3d, r28	; 61
     c54:	dd 91       	ld	r29, X+
     c56:	de bf       	out	0x3e, r29	; 62
     c58:	ff 91       	pop	r31
     c5a:	ef 91       	pop	r30
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	bf 91       	pop	r27
     c62:	af 91       	pop	r26
     c64:	9f 91       	pop	r25
     c66:	8f 91       	pop	r24
     c68:	7f 91       	pop	r23
     c6a:	6f 91       	pop	r22
     c6c:	5f 91       	pop	r21
     c6e:	4f 91       	pop	r20
     c70:	3f 91       	pop	r19
     c72:	2f 91       	pop	r18
     c74:	1f 91       	pop	r17
     c76:	0f 91       	pop	r16
     c78:	ff 90       	pop	r15
     c7a:	ef 90       	pop	r14
     c7c:	df 90       	pop	r13
     c7e:	cf 90       	pop	r12
     c80:	bf 90       	pop	r11
     c82:	af 90       	pop	r10
     c84:	9f 90       	pop	r9
     c86:	8f 90       	pop	r8
     c88:	7f 90       	pop	r7
     c8a:	6f 90       	pop	r6
     c8c:	5f 90       	pop	r5
     c8e:	4f 90       	pop	r4
     c90:	3f 90       	pop	r3
     c92:	2f 90       	pop	r2
     c94:	1f 90       	pop	r1
     c96:	0f 90       	pop	r0
     c98:	0c be       	out	0x3c, r0	; 60
     c9a:	0f 90       	pop	r0
     c9c:	0b be       	out	0x3b, r0	; 59
     c9e:	0f 90       	pop	r0
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     ca4:	08 95       	ret

00000ca6 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     ca6:	0f 92       	push	r0
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	0f 92       	push	r0
     cae:	0b b6       	in	r0, 0x3b	; 59
     cb0:	0f 92       	push	r0
     cb2:	0c b6       	in	r0, 0x3c	; 60
     cb4:	0f 92       	push	r0
     cb6:	1f 92       	push	r1
     cb8:	11 24       	eor	r1, r1
     cba:	2f 92       	push	r2
     cbc:	3f 92       	push	r3
     cbe:	4f 92       	push	r4
     cc0:	5f 92       	push	r5
     cc2:	6f 92       	push	r6
     cc4:	7f 92       	push	r7
     cc6:	8f 92       	push	r8
     cc8:	9f 92       	push	r9
     cca:	af 92       	push	r10
     ccc:	bf 92       	push	r11
     cce:	cf 92       	push	r12
     cd0:	df 92       	push	r13
     cd2:	ef 92       	push	r14
     cd4:	ff 92       	push	r15
     cd6:	0f 93       	push	r16
     cd8:	1f 93       	push	r17
     cda:	2f 93       	push	r18
     cdc:	3f 93       	push	r19
     cde:	4f 93       	push	r20
     ce0:	5f 93       	push	r21
     ce2:	6f 93       	push	r22
     ce4:	7f 93       	push	r23
     ce6:	8f 93       	push	r24
     ce8:	9f 93       	push	r25
     cea:	af 93       	push	r26
     cec:	bf 93       	push	r27
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	ef 93       	push	r30
     cf4:	ff 93       	push	r31
     cf6:	a0 91 40 08 	lds	r26, 0x0840	; 0x800840 <pxCurrentTCB>
     cfa:	b0 91 41 08 	lds	r27, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
     cfe:	0d b6       	in	r0, 0x3d	; 61
     d00:	0d 92       	st	X+, r0
     d02:	0e b6       	in	r0, 0x3e	; 62
     d04:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     d06:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     d08:	c0 d7       	rcall	.+3968   	; 0x1c8a <xTaskIncrementTick>
     d0a:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     d0c:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
     d10:	a0 91 40 08 	lds	r26, 0x0840	; 0x800840 <pxCurrentTCB>
     d14:	b0 91 41 08 	lds	r27, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
     d18:	cd 91       	ld	r28, X+
     d1a:	cd bf       	out	0x3d, r28	; 61
     d1c:	dd 91       	ld	r29, X+
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	ff 91       	pop	r31
     d22:	ef 91       	pop	r30
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	bf 91       	pop	r27
     d2a:	af 91       	pop	r26
     d2c:	9f 91       	pop	r25
     d2e:	8f 91       	pop	r24
     d30:	7f 91       	pop	r23
     d32:	6f 91       	pop	r22
     d34:	5f 91       	pop	r21
     d36:	4f 91       	pop	r20
     d38:	3f 91       	pop	r19
     d3a:	2f 91       	pop	r18
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	cf 90       	pop	r12
     d48:	bf 90       	pop	r11
     d4a:	af 90       	pop	r10
     d4c:	9f 90       	pop	r9
     d4e:	8f 90       	pop	r8
     d50:	7f 90       	pop	r7
     d52:	6f 90       	pop	r6
     d54:	5f 90       	pop	r5
     d56:	4f 90       	pop	r4
     d58:	3f 90       	pop	r3
     d5a:	2f 90       	pop	r2
     d5c:	1f 90       	pop	r1
     d5e:	0f 90       	pop	r0
     d60:	0c be       	out	0x3c, r0	; 60
     d62:	0f 90       	pop	r0
     d64:	0b be       	out	0x3b, r0	; 59
     d66:	0f 90       	pop	r0
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     d6c:	08 95       	ret

00000d6e <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     d6e:	9b df       	rcall	.-202    	; 0xca6 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     d70:	18 95       	reti

00000d72 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	0f 92       	push	r0
     d78:	fc 01       	movw	r30, r24
     d7a:	92 8d       	ldd	r25, Z+26	; 0x1a
     d7c:	0f 90       	pop	r0
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	91 11       	cpse	r25, r1
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	08 95       	ret

00000d88 <prvCopyDataToQueue>:
     d88:	0f 93       	push	r16
     d8a:	1f 93       	push	r17
     d8c:	cf 93       	push	r28
     d8e:	df 93       	push	r29
     d90:	ec 01       	movw	r28, r24
     d92:	04 2f       	mov	r16, r20
     d94:	1a 8d       	ldd	r17, Y+26	; 0x1a
     d96:	4c 8d       	ldd	r20, Y+28	; 0x1c
     d98:	41 11       	cpse	r20, r1
     d9a:	0c c0       	rjmp	.+24     	; 0xdb4 <prvCopyDataToQueue+0x2c>
     d9c:	88 81       	ld	r24, Y
     d9e:	99 81       	ldd	r25, Y+1	; 0x01
     da0:	89 2b       	or	r24, r25
     da2:	09 f0       	breq	.+2      	; 0xda6 <prvCopyDataToQueue+0x1e>
     da4:	42 c0       	rjmp	.+132    	; 0xe2a <prvCopyDataToQueue+0xa2>
     da6:	8c 81       	ldd	r24, Y+4	; 0x04
     da8:	9d 81       	ldd	r25, Y+5	; 0x05
     daa:	0e 94 55 11 	call	0x22aa	; 0x22aa <xTaskPriorityDisinherit>
     dae:	1d 82       	std	Y+5, r1	; 0x05
     db0:	1c 82       	std	Y+4, r1	; 0x04
     db2:	42 c0       	rjmp	.+132    	; 0xe38 <prvCopyDataToQueue+0xb0>
     db4:	01 11       	cpse	r16, r1
     db6:	17 c0       	rjmp	.+46     	; 0xde6 <prvCopyDataToQueue+0x5e>
     db8:	50 e0       	ldi	r21, 0x00	; 0
     dba:	8a 81       	ldd	r24, Y+2	; 0x02
     dbc:	9b 81       	ldd	r25, Y+3	; 0x03
     dbe:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <memcpy>
     dc2:	2c 8d       	ldd	r18, Y+28	; 0x1c
     dc4:	8a 81       	ldd	r24, Y+2	; 0x02
     dc6:	9b 81       	ldd	r25, Y+3	; 0x03
     dc8:	82 0f       	add	r24, r18
     dca:	91 1d       	adc	r25, r1
     dcc:	9b 83       	std	Y+3, r25	; 0x03
     dce:	8a 83       	std	Y+2, r24	; 0x02
     dd0:	2c 81       	ldd	r18, Y+4	; 0x04
     dd2:	3d 81       	ldd	r19, Y+5	; 0x05
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	50 f1       	brcs	.+84     	; 0xe2e <prvCopyDataToQueue+0xa6>
     dda:	88 81       	ld	r24, Y
     ddc:	99 81       	ldd	r25, Y+1	; 0x01
     dde:	9b 83       	std	Y+3, r25	; 0x03
     de0:	8a 83       	std	Y+2, r24	; 0x02
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	29 c0       	rjmp	.+82     	; 0xe38 <prvCopyDataToQueue+0xb0>
     de6:	50 e0       	ldi	r21, 0x00	; 0
     de8:	8e 81       	ldd	r24, Y+6	; 0x06
     dea:	9f 81       	ldd	r25, Y+7	; 0x07
     dec:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <memcpy>
     df0:	8c 8d       	ldd	r24, Y+28	; 0x1c
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	91 95       	neg	r25
     df6:	81 95       	neg	r24
     df8:	91 09       	sbc	r25, r1
     dfa:	2e 81       	ldd	r18, Y+6	; 0x06
     dfc:	3f 81       	ldd	r19, Y+7	; 0x07
     dfe:	28 0f       	add	r18, r24
     e00:	39 1f       	adc	r19, r25
     e02:	3f 83       	std	Y+7, r19	; 0x07
     e04:	2e 83       	std	Y+6, r18	; 0x06
     e06:	48 81       	ld	r20, Y
     e08:	59 81       	ldd	r21, Y+1	; 0x01
     e0a:	24 17       	cp	r18, r20
     e0c:	35 07       	cpc	r19, r21
     e0e:	30 f4       	brcc	.+12     	; 0xe1c <prvCopyDataToQueue+0x94>
     e10:	2c 81       	ldd	r18, Y+4	; 0x04
     e12:	3d 81       	ldd	r19, Y+5	; 0x05
     e14:	82 0f       	add	r24, r18
     e16:	93 1f       	adc	r25, r19
     e18:	9f 83       	std	Y+7, r25	; 0x07
     e1a:	8e 83       	std	Y+6, r24	; 0x06
     e1c:	02 30       	cpi	r16, 0x02	; 2
     e1e:	49 f4       	brne	.+18     	; 0xe32 <prvCopyDataToQueue+0xaa>
     e20:	11 23       	and	r17, r17
     e22:	49 f0       	breq	.+18     	; 0xe36 <prvCopyDataToQueue+0xae>
     e24:	11 50       	subi	r17, 0x01	; 1
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	07 c0       	rjmp	.+14     	; 0xe38 <prvCopyDataToQueue+0xb0>
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	05 c0       	rjmp	.+10     	; 0xe38 <prvCopyDataToQueue+0xb0>
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	03 c0       	rjmp	.+6      	; 0xe38 <prvCopyDataToQueue+0xb0>
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	01 c0       	rjmp	.+2      	; 0xe38 <prvCopyDataToQueue+0xb0>
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	1f 5f       	subi	r17, 0xFF	; 255
     e3a:	1a 8f       	std	Y+26, r17	; 0x1a
     e3c:	df 91       	pop	r29
     e3e:	cf 91       	pop	r28
     e40:	1f 91       	pop	r17
     e42:	0f 91       	pop	r16
     e44:	08 95       	ret

00000e46 <prvCopyDataFromQueue>:
     e46:	fc 01       	movw	r30, r24
     e48:	44 8d       	ldd	r20, Z+28	; 0x1c
     e4a:	44 23       	and	r20, r20
     e4c:	a9 f0       	breq	.+42     	; 0xe78 <prvCopyDataFromQueue+0x32>
     e4e:	50 e0       	ldi	r21, 0x00	; 0
     e50:	26 81       	ldd	r18, Z+6	; 0x06
     e52:	37 81       	ldd	r19, Z+7	; 0x07
     e54:	24 0f       	add	r18, r20
     e56:	35 1f       	adc	r19, r21
     e58:	37 83       	std	Z+7, r19	; 0x07
     e5a:	26 83       	std	Z+6, r18	; 0x06
     e5c:	84 81       	ldd	r24, Z+4	; 0x04
     e5e:	95 81       	ldd	r25, Z+5	; 0x05
     e60:	28 17       	cp	r18, r24
     e62:	39 07       	cpc	r19, r25
     e64:	20 f0       	brcs	.+8      	; 0xe6e <prvCopyDataFromQueue+0x28>
     e66:	80 81       	ld	r24, Z
     e68:	91 81       	ldd	r25, Z+1	; 0x01
     e6a:	97 83       	std	Z+7, r25	; 0x07
     e6c:	86 83       	std	Z+6, r24	; 0x06
     e6e:	cb 01       	movw	r24, r22
     e70:	66 81       	ldd	r22, Z+6	; 0x06
     e72:	77 81       	ldd	r23, Z+7	; 0x07
     e74:	0c 94 3c 26 	jmp	0x4c78	; 0x4c78 <memcpy>
     e78:	08 95       	ret

00000e7a <prvUnlockQueue>:
     e7a:	ef 92       	push	r14
     e7c:	ff 92       	push	r15
     e7e:	0f 93       	push	r16
     e80:	1f 93       	push	r17
     e82:	cf 93       	push	r28
     e84:	8c 01       	movw	r16, r24
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	f8 94       	cli
     e8a:	0f 92       	push	r0
     e8c:	fc 01       	movw	r30, r24
     e8e:	c6 8d       	ldd	r28, Z+30	; 0x1e
     e90:	1c 16       	cp	r1, r28
     e92:	ac f4       	brge	.+42     	; 0xebe <prvUnlockQueue+0x44>
     e94:	81 89       	ldd	r24, Z+17	; 0x11
     e96:	81 11       	cpse	r24, r1
     e98:	06 c0       	rjmp	.+12     	; 0xea6 <prvUnlockQueue+0x2c>
     e9a:	11 c0       	rjmp	.+34     	; 0xebe <prvUnlockQueue+0x44>
     e9c:	f8 01       	movw	r30, r16
     e9e:	81 89       	ldd	r24, Z+17	; 0x11
     ea0:	81 11       	cpse	r24, r1
     ea2:	05 c0       	rjmp	.+10     	; 0xeae <prvUnlockQueue+0x34>
     ea4:	0c c0       	rjmp	.+24     	; 0xebe <prvUnlockQueue+0x44>
     ea6:	78 01       	movw	r14, r16
     ea8:	f1 e1       	ldi	r31, 0x11	; 17
     eaa:	ef 0e       	add	r14, r31
     eac:	f1 1c       	adc	r15, r1
     eae:	c7 01       	movw	r24, r14
     eb0:	0e 94 44 10 	call	0x2088	; 0x2088 <xTaskRemoveFromEventList>
     eb4:	81 11       	cpse	r24, r1
     eb6:	0e 94 cc 10 	call	0x2198	; 0x2198 <vTaskMissedYield>
     eba:	c1 50       	subi	r28, 0x01	; 1
     ebc:	79 f7       	brne	.-34     	; 0xe9c <prvUnlockQueue+0x22>
     ebe:	8f ef       	ldi	r24, 0xFF	; 255
     ec0:	f8 01       	movw	r30, r16
     ec2:	86 8f       	std	Z+30, r24	; 0x1e
     ec4:	0f 90       	pop	r0
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	0f b6       	in	r0, 0x3f	; 63
     eca:	f8 94       	cli
     ecc:	0f 92       	push	r0
     ece:	c5 8d       	ldd	r28, Z+29	; 0x1d
     ed0:	1c 16       	cp	r1, r28
     ed2:	ac f4       	brge	.+42     	; 0xefe <prvUnlockQueue+0x84>
     ed4:	80 85       	ldd	r24, Z+8	; 0x08
     ed6:	81 11       	cpse	r24, r1
     ed8:	06 c0       	rjmp	.+12     	; 0xee6 <prvUnlockQueue+0x6c>
     eda:	11 c0       	rjmp	.+34     	; 0xefe <prvUnlockQueue+0x84>
     edc:	f8 01       	movw	r30, r16
     ede:	80 85       	ldd	r24, Z+8	; 0x08
     ee0:	81 11       	cpse	r24, r1
     ee2:	05 c0       	rjmp	.+10     	; 0xeee <prvUnlockQueue+0x74>
     ee4:	0c c0       	rjmp	.+24     	; 0xefe <prvUnlockQueue+0x84>
     ee6:	78 01       	movw	r14, r16
     ee8:	f8 e0       	ldi	r31, 0x08	; 8
     eea:	ef 0e       	add	r14, r31
     eec:	f1 1c       	adc	r15, r1
     eee:	c7 01       	movw	r24, r14
     ef0:	0e 94 44 10 	call	0x2088	; 0x2088 <xTaskRemoveFromEventList>
     ef4:	81 11       	cpse	r24, r1
     ef6:	0e 94 cc 10 	call	0x2198	; 0x2198 <vTaskMissedYield>
     efa:	c1 50       	subi	r28, 0x01	; 1
     efc:	79 f7       	brne	.-34     	; 0xedc <prvUnlockQueue+0x62>
     efe:	8f ef       	ldi	r24, 0xFF	; 255
     f00:	f8 01       	movw	r30, r16
     f02:	85 8f       	std	Z+29, r24	; 0x1d
     f04:	0f 90       	pop	r0
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	cf 91       	pop	r28
     f0a:	1f 91       	pop	r17
     f0c:	0f 91       	pop	r16
     f0e:	ff 90       	pop	r15
     f10:	ef 90       	pop	r14
     f12:	08 95       	ret

00000f14 <xQueueGenericReset>:
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	ec 01       	movw	r28, r24
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	0f 92       	push	r0
     f20:	e8 81       	ld	r30, Y
     f22:	f9 81       	ldd	r31, Y+1	; 0x01
     f24:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f26:	2c 8d       	ldd	r18, Y+28	; 0x1c
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	82 9f       	mul	r24, r18
     f2e:	a0 01       	movw	r20, r0
     f30:	83 9f       	mul	r24, r19
     f32:	50 0d       	add	r21, r0
     f34:	92 9f       	mul	r25, r18
     f36:	50 0d       	add	r21, r0
     f38:	11 24       	eor	r1, r1
     f3a:	4e 0f       	add	r20, r30
     f3c:	5f 1f       	adc	r21, r31
     f3e:	5d 83       	std	Y+5, r21	; 0x05
     f40:	4c 83       	std	Y+4, r20	; 0x04
     f42:	1a 8e       	std	Y+26, r1	; 0x1a
     f44:	fb 83       	std	Y+3, r31	; 0x03
     f46:	ea 83       	std	Y+2, r30	; 0x02
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	82 9f       	mul	r24, r18
     f4c:	a0 01       	movw	r20, r0
     f4e:	83 9f       	mul	r24, r19
     f50:	50 0d       	add	r21, r0
     f52:	92 9f       	mul	r25, r18
     f54:	50 0d       	add	r21, r0
     f56:	11 24       	eor	r1, r1
     f58:	cf 01       	movw	r24, r30
     f5a:	84 0f       	add	r24, r20
     f5c:	95 1f       	adc	r25, r21
     f5e:	9f 83       	std	Y+7, r25	; 0x07
     f60:	8e 83       	std	Y+6, r24	; 0x06
     f62:	8f ef       	ldi	r24, 0xFF	; 255
     f64:	8d 8f       	std	Y+29, r24	; 0x1d
     f66:	8e 8f       	std	Y+30, r24	; 0x1e
     f68:	61 11       	cpse	r22, r1
     f6a:	0b c0       	rjmp	.+22     	; 0xf82 <xQueueGenericReset+0x6e>
     f6c:	88 85       	ldd	r24, Y+8	; 0x08
     f6e:	88 23       	and	r24, r24
     f70:	71 f0       	breq	.+28     	; 0xf8e <xQueueGenericReset+0x7a>
     f72:	ce 01       	movw	r24, r28
     f74:	08 96       	adiw	r24, 0x08	; 8
     f76:	0e 94 44 10 	call	0x2088	; 0x2088 <xTaskRemoveFromEventList>
     f7a:	88 23       	and	r24, r24
     f7c:	41 f0       	breq	.+16     	; 0xf8e <xQueueGenericReset+0x7a>
     f7e:	32 de       	rcall	.-924    	; 0xbe4 <vPortYield>
     f80:	06 c0       	rjmp	.+12     	; 0xf8e <xQueueGenericReset+0x7a>
     f82:	ce 01       	movw	r24, r28
     f84:	08 96       	adiw	r24, 0x08	; 8
     f86:	f5 dc       	rcall	.-1558   	; 0x972 <vListInitialise>
     f88:	ce 01       	movw	r24, r28
     f8a:	41 96       	adiw	r24, 0x11	; 17
     f8c:	f2 dc       	rcall	.-1564   	; 0x972 <vListInitialise>
     f8e:	0f 90       	pop	r0
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	df 91       	pop	r29
     f96:	cf 91       	pop	r28
     f98:	08 95       	ret

00000f9a <xQueueGenericCreate>:
     f9a:	ff 92       	push	r15
     f9c:	0f 93       	push	r16
     f9e:	1f 93       	push	r17
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
     fa4:	08 2f       	mov	r16, r24
     fa6:	16 2f       	mov	r17, r22
     fa8:	f4 2e       	mov	r15, r20
     faa:	66 23       	and	r22, r22
     fac:	b9 f0       	breq	.+46     	; 0xfdc <xQueueGenericCreate+0x42>
     fae:	86 9f       	mul	r24, r22
     fb0:	c0 01       	movw	r24, r0
     fb2:	11 24       	eor	r1, r1
     fb4:	81 96       	adiw	r24, 0x21	; 33
     fb6:	bb dc       	rcall	.-1674   	; 0x92e <pvPortMalloc>
     fb8:	ec 01       	movw	r28, r24
     fba:	00 97       	sbiw	r24, 0x00	; 0
     fbc:	41 f4       	brne	.+16     	; 0xfce <xQueueGenericCreate+0x34>
     fbe:	14 c0       	rjmp	.+40     	; 0xfe8 <xQueueGenericCreate+0x4e>
     fc0:	0b 8f       	std	Y+27, r16	; 0x1b
     fc2:	1c 8f       	std	Y+28, r17	; 0x1c
     fc4:	61 e0       	ldi	r22, 0x01	; 1
     fc6:	ce 01       	movw	r24, r28
     fc8:	a5 df       	rcall	.-182    	; 0xf14 <xQueueGenericReset>
     fca:	f8 a2       	std	Y+32, r15	; 0x20
     fcc:	0d c0       	rjmp	.+26     	; 0xfe8 <xQueueGenericCreate+0x4e>
     fce:	81 96       	adiw	r24, 0x21	; 33
     fd0:	99 83       	std	Y+1, r25	; 0x01
     fd2:	88 83       	st	Y, r24
     fd4:	f5 cf       	rjmp	.-22     	; 0xfc0 <xQueueGenericCreate+0x26>
     fd6:	d9 83       	std	Y+1, r29	; 0x01
     fd8:	c8 83       	st	Y, r28
     fda:	f2 cf       	rjmp	.-28     	; 0xfc0 <xQueueGenericCreate+0x26>
     fdc:	81 e2       	ldi	r24, 0x21	; 33
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	a6 dc       	rcall	.-1716   	; 0x92e <pvPortMalloc>
     fe2:	ec 01       	movw	r28, r24
     fe4:	89 2b       	or	r24, r25
     fe6:	b9 f7       	brne	.-18     	; 0xfd6 <xQueueGenericCreate+0x3c>
     fe8:	ce 01       	movw	r24, r28
     fea:	df 91       	pop	r29
     fec:	cf 91       	pop	r28
     fee:	1f 91       	pop	r17
     ff0:	0f 91       	pop	r16
     ff2:	ff 90       	pop	r15
     ff4:	08 95       	ret

00000ff6 <xQueueGenericSend>:
     ff6:	9f 92       	push	r9
     ff8:	af 92       	push	r10
     ffa:	bf 92       	push	r11
     ffc:	cf 92       	push	r12
     ffe:	df 92       	push	r13
    1000:	ef 92       	push	r14
    1002:	ff 92       	push	r15
    1004:	0f 93       	push	r16
    1006:	1f 93       	push	r17
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	00 d0       	rcall	.+0      	; 0x100e <xQueueGenericSend+0x18>
    100e:	1f 92       	push	r1
    1010:	1f 92       	push	r1
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	8c 01       	movw	r16, r24
    1018:	6b 01       	movw	r12, r22
    101a:	5d 83       	std	Y+5, r21	; 0x05
    101c:	4c 83       	std	Y+4, r20	; 0x04
    101e:	a2 2e       	mov	r10, r18
    1020:	b1 2c       	mov	r11, r1
    1022:	99 24       	eor	r9, r9
    1024:	93 94       	inc	r9
    1026:	7c 01       	movw	r14, r24
    1028:	88 e0       	ldi	r24, 0x08	; 8
    102a:	e8 0e       	add	r14, r24
    102c:	f1 1c       	adc	r15, r1
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	f8 94       	cli
    1032:	0f 92       	push	r0
    1034:	f8 01       	movw	r30, r16
    1036:	92 8d       	ldd	r25, Z+26	; 0x1a
    1038:	83 8d       	ldd	r24, Z+27	; 0x1b
    103a:	98 17       	cp	r25, r24
    103c:	18 f0       	brcs	.+6      	; 0x1044 <xQueueGenericSend+0x4e>
    103e:	f2 e0       	ldi	r31, 0x02	; 2
    1040:	af 12       	cpse	r10, r31
    1042:	16 c0       	rjmp	.+44     	; 0x1070 <xQueueGenericSend+0x7a>
    1044:	4a 2d       	mov	r20, r10
    1046:	b6 01       	movw	r22, r12
    1048:	c8 01       	movw	r24, r16
    104a:	9e de       	rcall	.-708    	; 0xd88 <prvCopyDataToQueue>
    104c:	f8 01       	movw	r30, r16
    104e:	91 89       	ldd	r25, Z+17	; 0x11
    1050:	99 23       	and	r25, r25
    1052:	41 f0       	breq	.+16     	; 0x1064 <xQueueGenericSend+0x6e>
    1054:	c8 01       	movw	r24, r16
    1056:	41 96       	adiw	r24, 0x11	; 17
    1058:	0e 94 44 10 	call	0x2088	; 0x2088 <xTaskRemoveFromEventList>
    105c:	88 23       	and	r24, r24
    105e:	21 f0       	breq	.+8      	; 0x1068 <xQueueGenericSend+0x72>
    1060:	c1 dd       	rcall	.-1150   	; 0xbe4 <vPortYield>
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <xQueueGenericSend+0x72>
    1064:	81 11       	cpse	r24, r1
    1066:	be dd       	rcall	.-1156   	; 0xbe4 <vPortYield>
    1068:	0f 90       	pop	r0
    106a:	0f be       	out	0x3f, r0	; 63
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	47 c0       	rjmp	.+142    	; 0x10fe <xQueueGenericSend+0x108>
    1070:	8c 81       	ldd	r24, Y+4	; 0x04
    1072:	9d 81       	ldd	r25, Y+5	; 0x05
    1074:	89 2b       	or	r24, r25
    1076:	21 f4       	brne	.+8      	; 0x1080 <xQueueGenericSend+0x8a>
    1078:	0f 90       	pop	r0
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	3f c0       	rjmp	.+126    	; 0x10fe <xQueueGenericSend+0x108>
    1080:	b1 10       	cpse	r11, r1
    1082:	05 c0       	rjmp	.+10     	; 0x108e <xQueueGenericSend+0x98>
    1084:	ce 01       	movw	r24, r28
    1086:	01 96       	adiw	r24, 0x01	; 1
    1088:	0e 94 8c 10 	call	0x2118	; 0x2118 <vTaskInternalSetTimeOutState>
    108c:	b9 2c       	mov	r11, r9
    108e:	0f 90       	pop	r0
    1090:	0f be       	out	0x3f, r0	; 63
    1092:	eb d5       	rcall	.+3030   	; 0x1c6a <vTaskSuspendAll>
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	0f 92       	push	r0
    109a:	f8 01       	movw	r30, r16
    109c:	85 8d       	ldd	r24, Z+29	; 0x1d
    109e:	8f 3f       	cpi	r24, 0xFF	; 255
    10a0:	09 f4       	brne	.+2      	; 0x10a4 <xQueueGenericSend+0xae>
    10a2:	15 8e       	std	Z+29, r1	; 0x1d
    10a4:	f8 01       	movw	r30, r16
    10a6:	86 8d       	ldd	r24, Z+30	; 0x1e
    10a8:	8f 3f       	cpi	r24, 0xFF	; 255
    10aa:	09 f4       	brne	.+2      	; 0x10ae <xQueueGenericSend+0xb8>
    10ac:	16 8e       	std	Z+30, r1	; 0x1e
    10ae:	0f 90       	pop	r0
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	be 01       	movw	r22, r28
    10b4:	6c 5f       	subi	r22, 0xFC	; 252
    10b6:	7f 4f       	sbci	r23, 0xFF	; 255
    10b8:	ce 01       	movw	r24, r28
    10ba:	01 96       	adiw	r24, 0x01	; 1
    10bc:	0e 94 97 10 	call	0x212e	; 0x212e <xTaskCheckForTimeOut>
    10c0:	81 11       	cpse	r24, r1
    10c2:	19 c0       	rjmp	.+50     	; 0x10f6 <xQueueGenericSend+0x100>
    10c4:	0f b6       	in	r0, 0x3f	; 63
    10c6:	f8 94       	cli
    10c8:	0f 92       	push	r0
    10ca:	f8 01       	movw	r30, r16
    10cc:	92 8d       	ldd	r25, Z+26	; 0x1a
    10ce:	83 8d       	ldd	r24, Z+27	; 0x1b
    10d0:	0f 90       	pop	r0
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	98 13       	cpse	r25, r24
    10d6:	0b c0       	rjmp	.+22     	; 0x10ee <xQueueGenericSend+0xf8>
    10d8:	6c 81       	ldd	r22, Y+4	; 0x04
    10da:	7d 81       	ldd	r23, Y+5	; 0x05
    10dc:	c7 01       	movw	r24, r14
    10de:	ab d7       	rcall	.+3926   	; 0x2036 <vTaskPlaceOnEventList>
    10e0:	c8 01       	movw	r24, r16
    10e2:	cb de       	rcall	.-618    	; 0xe7a <prvUnlockQueue>
    10e4:	8c d6       	rcall	.+3352   	; 0x1dfe <xTaskResumeAll>
    10e6:	81 11       	cpse	r24, r1
    10e8:	a2 cf       	rjmp	.-188    	; 0x102e <xQueueGenericSend+0x38>
    10ea:	7c dd       	rcall	.-1288   	; 0xbe4 <vPortYield>
    10ec:	a0 cf       	rjmp	.-192    	; 0x102e <xQueueGenericSend+0x38>
    10ee:	c8 01       	movw	r24, r16
    10f0:	c4 de       	rcall	.-632    	; 0xe7a <prvUnlockQueue>
    10f2:	85 d6       	rcall	.+3338   	; 0x1dfe <xTaskResumeAll>
    10f4:	9c cf       	rjmp	.-200    	; 0x102e <xQueueGenericSend+0x38>
    10f6:	c8 01       	movw	r24, r16
    10f8:	c0 de       	rcall	.-640    	; 0xe7a <prvUnlockQueue>
    10fa:	81 d6       	rcall	.+3330   	; 0x1dfe <xTaskResumeAll>
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	1f 91       	pop	r17
    110e:	0f 91       	pop	r16
    1110:	ff 90       	pop	r15
    1112:	ef 90       	pop	r14
    1114:	df 90       	pop	r13
    1116:	cf 90       	pop	r12
    1118:	bf 90       	pop	r11
    111a:	af 90       	pop	r10
    111c:	9f 90       	pop	r9
    111e:	08 95       	ret

00001120 <xQueueCreateMutex>:
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
    1124:	48 2f       	mov	r20, r24
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	37 df       	rcall	.-402    	; 0xf9a <xQueueGenericCreate>
    112c:	ec 01       	movw	r28, r24
    112e:	00 97       	sbiw	r24, 0x00	; 0
    1130:	59 f0       	breq	.+22     	; 0x1148 <xQueueCreateMutex+0x28>
    1132:	1d 82       	std	Y+5, r1	; 0x05
    1134:	1c 82       	std	Y+4, r1	; 0x04
    1136:	19 82       	std	Y+1, r1	; 0x01
    1138:	18 82       	st	Y, r1
    113a:	1e 82       	std	Y+6, r1	; 0x06
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	40 e0       	ldi	r20, 0x00	; 0
    1140:	50 e0       	ldi	r21, 0x00	; 0
    1142:	60 e0       	ldi	r22, 0x00	; 0
    1144:	70 e0       	ldi	r23, 0x00	; 0
    1146:	57 df       	rcall	.-338    	; 0xff6 <xQueueGenericSend>
    1148:	ce 01       	movw	r24, r28
    114a:	df 91       	pop	r29
    114c:	cf 91       	pop	r28
    114e:	08 95       	ret

00001150 <xQueueGenericSendFromISR>:
    1150:	ef 92       	push	r14
    1152:	ff 92       	push	r15
    1154:	0f 93       	push	r16
    1156:	1f 93       	push	r17
    1158:	cf 93       	push	r28
    115a:	df 93       	push	r29
    115c:	8a 01       	movw	r16, r20
    115e:	fc 01       	movw	r30, r24
    1160:	52 8d       	ldd	r21, Z+26	; 0x1a
    1162:	33 8d       	ldd	r19, Z+27	; 0x1b
    1164:	53 17       	cp	r21, r19
    1166:	10 f0       	brcs	.+4      	; 0x116c <xQueueGenericSendFromISR+0x1c>
    1168:	22 30       	cpi	r18, 0x02	; 2
    116a:	e1 f4       	brne	.+56     	; 0x11a4 <xQueueGenericSendFromISR+0x54>
    116c:	42 2f       	mov	r20, r18
    116e:	78 01       	movw	r14, r16
    1170:	ec 01       	movw	r28, r24
    1172:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1174:	09 de       	rcall	.-1006   	; 0xd88 <prvCopyDataToQueue>
    1176:	1f 3f       	cpi	r17, 0xFF	; 255
    1178:	79 f4       	brne	.+30     	; 0x1198 <xQueueGenericSendFromISR+0x48>
    117a:	89 89       	ldd	r24, Y+17	; 0x11
    117c:	88 23       	and	r24, r24
    117e:	a1 f0       	breq	.+40     	; 0x11a8 <xQueueGenericSendFromISR+0x58>
    1180:	ce 01       	movw	r24, r28
    1182:	41 96       	adiw	r24, 0x11	; 17
    1184:	81 d7       	rcall	.+3842   	; 0x2088 <xTaskRemoveFromEventList>
    1186:	88 23       	and	r24, r24
    1188:	89 f0       	breq	.+34     	; 0x11ac <xQueueGenericSendFromISR+0x5c>
    118a:	e1 14       	cp	r14, r1
    118c:	f1 04       	cpc	r15, r1
    118e:	81 f0       	breq	.+32     	; 0x11b0 <xQueueGenericSendFromISR+0x60>
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	f7 01       	movw	r30, r14
    1194:	80 83       	st	Z, r24
    1196:	0d c0       	rjmp	.+26     	; 0x11b2 <xQueueGenericSendFromISR+0x62>
    1198:	ff 24       	eor	r15, r15
    119a:	f3 94       	inc	r15
    119c:	f1 0e       	add	r15, r17
    119e:	fe 8e       	std	Y+30, r15	; 0x1e
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	07 c0       	rjmp	.+14     	; 0x11b2 <xQueueGenericSendFromISR+0x62>
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	05 c0       	rjmp	.+10     	; 0x11b2 <xQueueGenericSendFromISR+0x62>
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	03 c0       	rjmp	.+6      	; 0x11b2 <xQueueGenericSendFromISR+0x62>
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	01 c0       	rjmp	.+2      	; 0x11b2 <xQueueGenericSendFromISR+0x62>
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	df 91       	pop	r29
    11b4:	cf 91       	pop	r28
    11b6:	1f 91       	pop	r17
    11b8:	0f 91       	pop	r16
    11ba:	ff 90       	pop	r15
    11bc:	ef 90       	pop	r14
    11be:	08 95       	ret

000011c0 <xQueueReceive>:
    11c0:	9f 92       	push	r9
    11c2:	af 92       	push	r10
    11c4:	bf 92       	push	r11
    11c6:	cf 92       	push	r12
    11c8:	df 92       	push	r13
    11ca:	ef 92       	push	r14
    11cc:	ff 92       	push	r15
    11ce:	0f 93       	push	r16
    11d0:	1f 93       	push	r17
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <xQueueReceive+0x18>
    11d8:	1f 92       	push	r1
    11da:	1f 92       	push	r1
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	8c 01       	movw	r16, r24
    11e2:	5b 01       	movw	r10, r22
    11e4:	5d 83       	std	Y+5, r21	; 0x05
    11e6:	4c 83       	std	Y+4, r20	; 0x04
    11e8:	e1 2c       	mov	r14, r1
    11ea:	99 24       	eor	r9, r9
    11ec:	93 94       	inc	r9
    11ee:	6c 01       	movw	r12, r24
    11f0:	81 e1       	ldi	r24, 0x11	; 17
    11f2:	c8 0e       	add	r12, r24
    11f4:	d1 1c       	adc	r13, r1
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	0f 92       	push	r0
    11fc:	f8 01       	movw	r30, r16
    11fe:	f2 8c       	ldd	r15, Z+26	; 0x1a
    1200:	ff 20       	and	r15, r15
    1202:	91 f0       	breq	.+36     	; 0x1228 <xQueueReceive+0x68>
    1204:	b5 01       	movw	r22, r10
    1206:	c8 01       	movw	r24, r16
    1208:	1e de       	rcall	.-964    	; 0xe46 <prvCopyDataFromQueue>
    120a:	fa 94       	dec	r15
    120c:	f8 01       	movw	r30, r16
    120e:	f2 8e       	std	Z+26, r15	; 0x1a
    1210:	80 85       	ldd	r24, Z+8	; 0x08
    1212:	88 23       	and	r24, r24
    1214:	29 f0       	breq	.+10     	; 0x1220 <xQueueReceive+0x60>
    1216:	c8 01       	movw	r24, r16
    1218:	08 96       	adiw	r24, 0x08	; 8
    121a:	36 d7       	rcall	.+3692   	; 0x2088 <xTaskRemoveFromEventList>
    121c:	81 11       	cpse	r24, r1
    121e:	e2 dc       	rcall	.-1596   	; 0xbe4 <vPortYield>
    1220:	0f 90       	pop	r0
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	44 c0       	rjmp	.+136    	; 0x12b0 <xQueueReceive+0xf0>
    1228:	8c 81       	ldd	r24, Y+4	; 0x04
    122a:	9d 81       	ldd	r25, Y+5	; 0x05
    122c:	89 2b       	or	r24, r25
    122e:	21 f4       	brne	.+8      	; 0x1238 <xQueueReceive+0x78>
    1230:	0f 90       	pop	r0
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	3c c0       	rjmp	.+120    	; 0x12b0 <xQueueReceive+0xf0>
    1238:	e1 10       	cpse	r14, r1
    123a:	04 c0       	rjmp	.+8      	; 0x1244 <xQueueReceive+0x84>
    123c:	ce 01       	movw	r24, r28
    123e:	01 96       	adiw	r24, 0x01	; 1
    1240:	6b d7       	rcall	.+3798   	; 0x2118 <vTaskInternalSetTimeOutState>
    1242:	e9 2c       	mov	r14, r9
    1244:	0f 90       	pop	r0
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	10 d5       	rcall	.+2592   	; 0x1c6a <vTaskSuspendAll>
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	f8 94       	cli
    124e:	0f 92       	push	r0
    1250:	f8 01       	movw	r30, r16
    1252:	85 8d       	ldd	r24, Z+29	; 0x1d
    1254:	8f 3f       	cpi	r24, 0xFF	; 255
    1256:	09 f4       	brne	.+2      	; 0x125a <xQueueReceive+0x9a>
    1258:	15 8e       	std	Z+29, r1	; 0x1d
    125a:	f8 01       	movw	r30, r16
    125c:	86 8d       	ldd	r24, Z+30	; 0x1e
    125e:	8f 3f       	cpi	r24, 0xFF	; 255
    1260:	09 f4       	brne	.+2      	; 0x1264 <xQueueReceive+0xa4>
    1262:	16 8e       	std	Z+30, r1	; 0x1e
    1264:	0f 90       	pop	r0
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	be 01       	movw	r22, r28
    126a:	6c 5f       	subi	r22, 0xFC	; 252
    126c:	7f 4f       	sbci	r23, 0xFF	; 255
    126e:	ce 01       	movw	r24, r28
    1270:	01 96       	adiw	r24, 0x01	; 1
    1272:	5d d7       	rcall	.+3770   	; 0x212e <xTaskCheckForTimeOut>
    1274:	81 11       	cpse	r24, r1
    1276:	13 c0       	rjmp	.+38     	; 0x129e <xQueueReceive+0xde>
    1278:	c8 01       	movw	r24, r16
    127a:	7b dd       	rcall	.-1290   	; 0xd72 <prvIsQueueEmpty>
    127c:	88 23       	and	r24, r24
    127e:	59 f0       	breq	.+22     	; 0x1296 <xQueueReceive+0xd6>
    1280:	6c 81       	ldd	r22, Y+4	; 0x04
    1282:	7d 81       	ldd	r23, Y+5	; 0x05
    1284:	c6 01       	movw	r24, r12
    1286:	d7 d6       	rcall	.+3502   	; 0x2036 <vTaskPlaceOnEventList>
    1288:	c8 01       	movw	r24, r16
    128a:	f7 dd       	rcall	.-1042   	; 0xe7a <prvUnlockQueue>
    128c:	b8 d5       	rcall	.+2928   	; 0x1dfe <xTaskResumeAll>
    128e:	81 11       	cpse	r24, r1
    1290:	b2 cf       	rjmp	.-156    	; 0x11f6 <xQueueReceive+0x36>
    1292:	a8 dc       	rcall	.-1712   	; 0xbe4 <vPortYield>
    1294:	b0 cf       	rjmp	.-160    	; 0x11f6 <xQueueReceive+0x36>
    1296:	c8 01       	movw	r24, r16
    1298:	f0 dd       	rcall	.-1056   	; 0xe7a <prvUnlockQueue>
    129a:	b1 d5       	rcall	.+2914   	; 0x1dfe <xTaskResumeAll>
    129c:	ac cf       	rjmp	.-168    	; 0x11f6 <xQueueReceive+0x36>
    129e:	c8 01       	movw	r24, r16
    12a0:	ec dd       	rcall	.-1064   	; 0xe7a <prvUnlockQueue>
    12a2:	ad d5       	rcall	.+2906   	; 0x1dfe <xTaskResumeAll>
    12a4:	c8 01       	movw	r24, r16
    12a6:	65 dd       	rcall	.-1334   	; 0xd72 <prvIsQueueEmpty>
    12a8:	88 23       	and	r24, r24
    12aa:	09 f4       	brne	.+2      	; 0x12ae <xQueueReceive+0xee>
    12ac:	a4 cf       	rjmp	.-184    	; 0x11f6 <xQueueReceive+0x36>
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	1f 91       	pop	r17
    12c0:	0f 91       	pop	r16
    12c2:	ff 90       	pop	r15
    12c4:	ef 90       	pop	r14
    12c6:	df 90       	pop	r13
    12c8:	cf 90       	pop	r12
    12ca:	bf 90       	pop	r11
    12cc:	af 90       	pop	r10
    12ce:	9f 90       	pop	r9
    12d0:	08 95       	ret

000012d2 <xQueueSemaphoreTake>:
    12d2:	bf 92       	push	r11
    12d4:	cf 92       	push	r12
    12d6:	df 92       	push	r13
    12d8:	ef 92       	push	r14
    12da:	ff 92       	push	r15
    12dc:	0f 93       	push	r16
    12de:	1f 93       	push	r17
    12e0:	cf 93       	push	r28
    12e2:	df 93       	push	r29
    12e4:	00 d0       	rcall	.+0      	; 0x12e6 <xQueueSemaphoreTake+0x14>
    12e6:	1f 92       	push	r1
    12e8:	1f 92       	push	r1
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
    12ee:	8c 01       	movw	r16, r24
    12f0:	7d 83       	std	Y+5, r23	; 0x05
    12f2:	6c 83       	std	Y+4, r22	; 0x04
    12f4:	b1 2c       	mov	r11, r1
    12f6:	d1 2c       	mov	r13, r1
    12f8:	cc 24       	eor	r12, r12
    12fa:	c3 94       	inc	r12
    12fc:	7c 01       	movw	r14, r24
    12fe:	81 e1       	ldi	r24, 0x11	; 17
    1300:	e8 0e       	add	r14, r24
    1302:	f1 1c       	adc	r15, r1
    1304:	0f b6       	in	r0, 0x3f	; 63
    1306:	f8 94       	cli
    1308:	0f 92       	push	r0
    130a:	d8 01       	movw	r26, r16
    130c:	5a 96       	adiw	r26, 0x1a	; 26
    130e:	8c 91       	ld	r24, X
    1310:	5a 97       	sbiw	r26, 0x1a	; 26
    1312:	88 23       	and	r24, r24
    1314:	d9 f0       	breq	.+54     	; 0x134c <xQueueSemaphoreTake+0x7a>
    1316:	81 50       	subi	r24, 0x01	; 1
    1318:	5a 96       	adiw	r26, 0x1a	; 26
    131a:	8c 93       	st	X, r24
    131c:	5a 97       	sbiw	r26, 0x1a	; 26
    131e:	8d 91       	ld	r24, X+
    1320:	9c 91       	ld	r25, X
    1322:	89 2b       	or	r24, r25
    1324:	29 f4       	brne	.+10     	; 0x1330 <xQueueSemaphoreTake+0x5e>
    1326:	0e 94 e5 11 	call	0x23ca	; 0x23ca <pvTaskIncrementMutexHeldCount>
    132a:	f8 01       	movw	r30, r16
    132c:	95 83       	std	Z+5, r25	; 0x05
    132e:	84 83       	std	Z+4, r24	; 0x04
    1330:	d8 01       	movw	r26, r16
    1332:	18 96       	adiw	r26, 0x08	; 8
    1334:	8c 91       	ld	r24, X
    1336:	88 23       	and	r24, r24
    1338:	29 f0       	breq	.+10     	; 0x1344 <xQueueSemaphoreTake+0x72>
    133a:	c8 01       	movw	r24, r16
    133c:	08 96       	adiw	r24, 0x08	; 8
    133e:	a4 d6       	rcall	.+3400   	; 0x2088 <xTaskRemoveFromEventList>
    1340:	81 11       	cpse	r24, r1
    1342:	50 dc       	rcall	.-1888   	; 0xbe4 <vPortYield>
    1344:	0f 90       	pop	r0
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	70 c0       	rjmp	.+224    	; 0x142c <xQueueSemaphoreTake+0x15a>
    134c:	8c 81       	ldd	r24, Y+4	; 0x04
    134e:	9d 81       	ldd	r25, Y+5	; 0x05
    1350:	89 2b       	or	r24, r25
    1352:	21 f4       	brne	.+8      	; 0x135c <xQueueSemaphoreTake+0x8a>
    1354:	0f 90       	pop	r0
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	68 c0       	rjmp	.+208    	; 0x142c <xQueueSemaphoreTake+0x15a>
    135c:	d1 10       	cpse	r13, r1
    135e:	04 c0       	rjmp	.+8      	; 0x1368 <xQueueSemaphoreTake+0x96>
    1360:	ce 01       	movw	r24, r28
    1362:	01 96       	adiw	r24, 0x01	; 1
    1364:	d9 d6       	rcall	.+3506   	; 0x2118 <vTaskInternalSetTimeOutState>
    1366:	dc 2c       	mov	r13, r12
    1368:	0f 90       	pop	r0
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	7e d4       	rcall	.+2300   	; 0x1c6a <vTaskSuspendAll>
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	f8 94       	cli
    1372:	0f 92       	push	r0
    1374:	f8 01       	movw	r30, r16
    1376:	85 8d       	ldd	r24, Z+29	; 0x1d
    1378:	8f 3f       	cpi	r24, 0xFF	; 255
    137a:	09 f4       	brne	.+2      	; 0x137e <xQueueSemaphoreTake+0xac>
    137c:	15 8e       	std	Z+29, r1	; 0x1d
    137e:	d8 01       	movw	r26, r16
    1380:	5e 96       	adiw	r26, 0x1e	; 30
    1382:	8c 91       	ld	r24, X
    1384:	5e 97       	sbiw	r26, 0x1e	; 30
    1386:	8f 3f       	cpi	r24, 0xFF	; 255
    1388:	11 f4       	brne	.+4      	; 0x138e <xQueueSemaphoreTake+0xbc>
    138a:	5e 96       	adiw	r26, 0x1e	; 30
    138c:	1c 92       	st	X, r1
    138e:	0f 90       	pop	r0
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	be 01       	movw	r22, r28
    1394:	6c 5f       	subi	r22, 0xFC	; 252
    1396:	7f 4f       	sbci	r23, 0xFF	; 255
    1398:	ce 01       	movw	r24, r28
    139a:	01 96       	adiw	r24, 0x01	; 1
    139c:	c8 d6       	rcall	.+3472   	; 0x212e <xTaskCheckForTimeOut>
    139e:	81 11       	cpse	r24, r1
    13a0:	21 c0       	rjmp	.+66     	; 0x13e4 <xQueueSemaphoreTake+0x112>
    13a2:	c8 01       	movw	r24, r16
    13a4:	e6 dc       	rcall	.-1588   	; 0xd72 <prvIsQueueEmpty>
    13a6:	88 23       	and	r24, r24
    13a8:	c9 f0       	breq	.+50     	; 0x13dc <xQueueSemaphoreTake+0x10a>
    13aa:	f8 01       	movw	r30, r16
    13ac:	80 81       	ld	r24, Z
    13ae:	91 81       	ldd	r25, Z+1	; 0x01
    13b0:	89 2b       	or	r24, r25
    13b2:	49 f4       	brne	.+18     	; 0x13c6 <xQueueSemaphoreTake+0xf4>
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	f8 94       	cli
    13b8:	0f 92       	push	r0
    13ba:	84 81       	ldd	r24, Z+4	; 0x04
    13bc:	95 81       	ldd	r25, Z+5	; 0x05
    13be:	03 d7       	rcall	.+3590   	; 0x21c6 <xTaskPriorityInherit>
    13c0:	b8 2e       	mov	r11, r24
    13c2:	0f 90       	pop	r0
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	6c 81       	ldd	r22, Y+4	; 0x04
    13c8:	7d 81       	ldd	r23, Y+5	; 0x05
    13ca:	c7 01       	movw	r24, r14
    13cc:	34 d6       	rcall	.+3176   	; 0x2036 <vTaskPlaceOnEventList>
    13ce:	c8 01       	movw	r24, r16
    13d0:	54 dd       	rcall	.-1368   	; 0xe7a <prvUnlockQueue>
    13d2:	15 d5       	rcall	.+2602   	; 0x1dfe <xTaskResumeAll>
    13d4:	81 11       	cpse	r24, r1
    13d6:	96 cf       	rjmp	.-212    	; 0x1304 <xQueueSemaphoreTake+0x32>
    13d8:	05 dc       	rcall	.-2038   	; 0xbe4 <vPortYield>
    13da:	94 cf       	rjmp	.-216    	; 0x1304 <xQueueSemaphoreTake+0x32>
    13dc:	c8 01       	movw	r24, r16
    13de:	4d dd       	rcall	.-1382   	; 0xe7a <prvUnlockQueue>
    13e0:	0e d5       	rcall	.+2588   	; 0x1dfe <xTaskResumeAll>
    13e2:	90 cf       	rjmp	.-224    	; 0x1304 <xQueueSemaphoreTake+0x32>
    13e4:	c8 01       	movw	r24, r16
    13e6:	49 dd       	rcall	.-1390   	; 0xe7a <prvUnlockQueue>
    13e8:	0a d5       	rcall	.+2580   	; 0x1dfe <xTaskResumeAll>
    13ea:	c8 01       	movw	r24, r16
    13ec:	c2 dc       	rcall	.-1660   	; 0xd72 <prvIsQueueEmpty>
    13ee:	88 23       	and	r24, r24
    13f0:	09 f4       	brne	.+2      	; 0x13f4 <xQueueSemaphoreTake+0x122>
    13f2:	88 cf       	rjmp	.-240    	; 0x1304 <xQueueSemaphoreTake+0x32>
    13f4:	bb 20       	and	r11, r11
    13f6:	c9 f0       	breq	.+50     	; 0x142a <xQueueSemaphoreTake+0x158>
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	f8 94       	cli
    13fc:	0f 92       	push	r0
    13fe:	f8 01       	movw	r30, r16
    1400:	81 89       	ldd	r24, Z+17	; 0x11
    1402:	88 23       	and	r24, r24
    1404:	39 f0       	breq	.+14     	; 0x1414 <xQueueSemaphoreTake+0x142>
    1406:	06 88       	ldd	r0, Z+22	; 0x16
    1408:	f7 89       	ldd	r31, Z+23	; 0x17
    140a:	e0 2d       	mov	r30, r0
    140c:	80 81       	ld	r24, Z
    140e:	64 e0       	ldi	r22, 0x04	; 4
    1410:	68 1b       	sub	r22, r24
    1412:	01 c0       	rjmp	.+2      	; 0x1416 <xQueueSemaphoreTake+0x144>
    1414:	60 e0       	ldi	r22, 0x00	; 0
    1416:	d8 01       	movw	r26, r16
    1418:	14 96       	adiw	r26, 0x04	; 4
    141a:	8d 91       	ld	r24, X+
    141c:	9c 91       	ld	r25, X
    141e:	15 97       	sbiw	r26, 0x05	; 5
    1420:	84 d7       	rcall	.+3848   	; 0x232a <vTaskPriorityDisinheritAfterTimeout>
    1422:	0f 90       	pop	r0
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	01 c0       	rjmp	.+2      	; 0x142c <xQueueSemaphoreTake+0x15a>
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	0f 90       	pop	r0
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	df 91       	pop	r29
    1438:	cf 91       	pop	r28
    143a:	1f 91       	pop	r17
    143c:	0f 91       	pop	r16
    143e:	ff 90       	pop	r15
    1440:	ef 90       	pop	r14
    1442:	df 90       	pop	r13
    1444:	cf 90       	pop	r12
    1446:	bf 90       	pop	r11
    1448:	08 95       	ret

0000144a <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    144a:	cf 93       	push	r28
    144c:	df 93       	push	r29
    144e:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	0f 92       	push	r0
    1456:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1458:	8f 3f       	cpi	r24, 0xFF	; 255
    145a:	09 f4       	brne	.+2      	; 0x145e <vQueueWaitForMessageRestricted+0x14>
    145c:	1d 8e       	std	Y+29, r1	; 0x1d
    145e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1460:	8f 3f       	cpi	r24, 0xFF	; 255
    1462:	09 f4       	brne	.+2      	; 0x1466 <vQueueWaitForMessageRestricted+0x1c>
    1464:	1e 8e       	std	Y+30, r1	; 0x1e
    1466:	0f 90       	pop	r0
    1468:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    146a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    146c:	81 11       	cpse	r24, r1
    146e:	03 c0       	rjmp	.+6      	; 0x1476 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1470:	ce 01       	movw	r24, r28
    1472:	41 96       	adiw	r24, 0x11	; 17
    1474:	f1 d5       	rcall	.+3042   	; 0x2058 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1476:	ce 01       	movw	r24, r28
    1478:	00 dd       	rcall	.-1536   	; 0xe7a <prvUnlockQueue>
    }
    147a:	df 91       	pop	r29
    147c:	cf 91       	pop	r28
    147e:	08 95       	ret

00001480 <prvBytesInBuffer>:
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1480:	fc 01       	movw	r30, r24
    1482:	44 81       	ldd	r20, Z+4	; 0x04
    1484:	55 81       	ldd	r21, Z+5	; 0x05
    1486:	22 81       	ldd	r18, Z+2	; 0x02
    1488:	33 81       	ldd	r19, Z+3	; 0x03
    148a:	24 0f       	add	r18, r20
    148c:	35 1f       	adc	r19, r21
    148e:	80 81       	ld	r24, Z
    1490:	91 81       	ldd	r25, Z+1	; 0x01
    1492:	b9 01       	movw	r22, r18
    1494:	68 1b       	sub	r22, r24
    1496:	79 0b       	sbc	r23, r25
    1498:	cb 01       	movw	r24, r22
    149a:	64 17       	cp	r22, r20
    149c:	75 07       	cpc	r23, r21
    149e:	10 f0       	brcs	.+4      	; 0x14a4 <prvBytesInBuffer+0x24>
    14a0:	84 1b       	sub	r24, r20
    14a2:	95 0b       	sbc	r25, r21
    14a4:	08 95       	ret

000014a6 <prvWriteBytesToBuffer>:
    14a6:	af 92       	push	r10
    14a8:	bf 92       	push	r11
    14aa:	cf 92       	push	r12
    14ac:	df 92       	push	r13
    14ae:	ef 92       	push	r14
    14b0:	ff 92       	push	r15
    14b2:	0f 93       	push	r16
    14b4:	1f 93       	push	r17
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
    14ba:	6c 01       	movw	r12, r24
    14bc:	5b 01       	movw	r10, r22
    14be:	7a 01       	movw	r14, r20
    14c0:	fc 01       	movw	r30, r24
    14c2:	c2 81       	ldd	r28, Z+2	; 0x02
    14c4:	d3 81       	ldd	r29, Z+3	; 0x03
    14c6:	04 81       	ldd	r16, Z+4	; 0x04
    14c8:	15 81       	ldd	r17, Z+5	; 0x05
    14ca:	0c 1b       	sub	r16, r28
    14cc:	1d 0b       	sbc	r17, r29
    14ce:	40 17       	cp	r20, r16
    14d0:	51 07       	cpc	r21, r17
    14d2:	08 f4       	brcc	.+2      	; 0x14d6 <prvWriteBytesToBuffer+0x30>
    14d4:	8a 01       	movw	r16, r20
    14d6:	f6 01       	movw	r30, r12
    14d8:	84 85       	ldd	r24, Z+12	; 0x0c
    14da:	95 85       	ldd	r25, Z+13	; 0x0d
    14dc:	a8 01       	movw	r20, r16
    14de:	b5 01       	movw	r22, r10
    14e0:	8c 0f       	add	r24, r28
    14e2:	9d 1f       	adc	r25, r29
    14e4:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <memcpy>
    14e8:	0e 15       	cp	r16, r14
    14ea:	1f 05       	cpc	r17, r15
    14ec:	58 f4       	brcc	.+22     	; 0x1504 <prvWriteBytesToBuffer+0x5e>
    14ee:	a7 01       	movw	r20, r14
    14f0:	40 1b       	sub	r20, r16
    14f2:	51 0b       	sbc	r21, r17
    14f4:	b5 01       	movw	r22, r10
    14f6:	60 0f       	add	r22, r16
    14f8:	71 1f       	adc	r23, r17
    14fa:	f6 01       	movw	r30, r12
    14fc:	84 85       	ldd	r24, Z+12	; 0x0c
    14fe:	95 85       	ldd	r25, Z+13	; 0x0d
    1500:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <memcpy>
    1504:	ce 01       	movw	r24, r28
    1506:	8e 0d       	add	r24, r14
    1508:	9f 1d       	adc	r25, r15
    150a:	f6 01       	movw	r30, r12
    150c:	24 81       	ldd	r18, Z+4	; 0x04
    150e:	35 81       	ldd	r19, Z+5	; 0x05
    1510:	82 17       	cp	r24, r18
    1512:	93 07       	cpc	r25, r19
    1514:	10 f0       	brcs	.+4      	; 0x151a <prvWriteBytesToBuffer+0x74>
    1516:	82 1b       	sub	r24, r18
    1518:	93 0b       	sbc	r25, r19
    151a:	f6 01       	movw	r30, r12
    151c:	93 83       	std	Z+3, r25	; 0x03
    151e:	82 83       	std	Z+2, r24	; 0x02
    1520:	c7 01       	movw	r24, r14
    1522:	df 91       	pop	r29
    1524:	cf 91       	pop	r28
    1526:	1f 91       	pop	r17
    1528:	0f 91       	pop	r16
    152a:	ff 90       	pop	r15
    152c:	ef 90       	pop	r14
    152e:	df 90       	pop	r13
    1530:	cf 90       	pop	r12
    1532:	bf 90       	pop	r11
    1534:	af 90       	pop	r10
    1536:	08 95       	ret

00001538 <prvWriteMessageToBuffer>:
    1538:	cf 92       	push	r12
    153a:	df 92       	push	r13
    153c:	ef 92       	push	r14
    153e:	ff 92       	push	r15
    1540:	0f 93       	push	r16
    1542:	1f 93       	push	r17
    1544:	cf 93       	push	r28
    1546:	df 93       	push	r29
    1548:	1f 92       	push	r1
    154a:	1f 92       	push	r1
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	5a 83       	std	Y+2, r21	; 0x02
    1552:	49 83       	std	Y+1, r20	; 0x01
    1554:	21 15       	cp	r18, r1
    1556:	31 05       	cpc	r19, r1
    1558:	c9 f0       	breq	.+50     	; 0x158c <prvWriteMessageToBuffer+0x54>
    155a:	6b 01       	movw	r12, r22
    155c:	7c 01       	movw	r14, r24
    155e:	fc 01       	movw	r30, r24
    1560:	86 85       	ldd	r24, Z+14	; 0x0e
    1562:	80 fd       	sbrc	r24, 0
    1564:	08 c0       	rjmp	.+16     	; 0x1576 <prvWriteMessageToBuffer+0x3e>
    1566:	ca 01       	movw	r24, r20
    1568:	24 17       	cp	r18, r20
    156a:	35 07       	cpc	r19, r21
    156c:	08 f4       	brcc	.+2      	; 0x1570 <prvWriteMessageToBuffer+0x38>
    156e:	c9 01       	movw	r24, r18
    1570:	9a 83       	std	Y+2, r25	; 0x02
    1572:	89 83       	std	Y+1, r24	; 0x01
    1574:	11 c0       	rjmp	.+34     	; 0x1598 <prvWriteMessageToBuffer+0x60>
    1576:	20 17       	cp	r18, r16
    1578:	31 07       	cpc	r19, r17
    157a:	58 f0       	brcs	.+22     	; 0x1592 <prvWriteMessageToBuffer+0x5a>
    157c:	42 e0       	ldi	r20, 0x02	; 2
    157e:	50 e0       	ldi	r21, 0x00	; 0
    1580:	be 01       	movw	r22, r28
    1582:	6f 5f       	subi	r22, 0xFF	; 255
    1584:	7f 4f       	sbci	r23, 0xFF	; 255
    1586:	c7 01       	movw	r24, r14
    1588:	8e df       	rcall	.-228    	; 0x14a6 <prvWriteBytesToBuffer>
    158a:	06 c0       	rjmp	.+12     	; 0x1598 <prvWriteMessageToBuffer+0x60>
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	08 c0       	rjmp	.+16     	; 0x15a2 <prvWriteMessageToBuffer+0x6a>
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	05 c0       	rjmp	.+10     	; 0x15a2 <prvWriteMessageToBuffer+0x6a>
    1598:	49 81       	ldd	r20, Y+1	; 0x01
    159a:	5a 81       	ldd	r21, Y+2	; 0x02
    159c:	b6 01       	movw	r22, r12
    159e:	c7 01       	movw	r24, r14
    15a0:	82 df       	rcall	.-252    	; 0x14a6 <prvWriteBytesToBuffer>
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	df 91       	pop	r29
    15a8:	cf 91       	pop	r28
    15aa:	1f 91       	pop	r17
    15ac:	0f 91       	pop	r16
    15ae:	ff 90       	pop	r15
    15b0:	ef 90       	pop	r14
    15b2:	df 90       	pop	r13
    15b4:	cf 90       	pop	r12
    15b6:	08 95       	ret

000015b8 <prvReadBytesFromBuffer>:
    15b8:	af 92       	push	r10
    15ba:	bf 92       	push	r11
    15bc:	cf 92       	push	r12
    15be:	df 92       	push	r13
    15c0:	ef 92       	push	r14
    15c2:	ff 92       	push	r15
    15c4:	0f 93       	push	r16
    15c6:	1f 93       	push	r17
    15c8:	cf 93       	push	r28
    15ca:	df 93       	push	r29
    15cc:	7c 01       	movw	r14, r24
    15ce:	5b 01       	movw	r10, r22
    15d0:	e9 01       	movw	r28, r18
    15d2:	42 17       	cp	r20, r18
    15d4:	53 07       	cpc	r21, r19
    15d6:	08 f4       	brcc	.+2      	; 0x15da <prvReadBytesFromBuffer+0x22>
    15d8:	ea 01       	movw	r28, r20
    15da:	20 97       	sbiw	r28, 0x00	; 0
    15dc:	79 f1       	breq	.+94     	; 0x163c <prvReadBytesFromBuffer+0x84>
    15de:	f7 01       	movw	r30, r14
    15e0:	00 81       	ld	r16, Z
    15e2:	11 81       	ldd	r17, Z+1	; 0x01
    15e4:	c4 80       	ldd	r12, Z+4	; 0x04
    15e6:	d5 80       	ldd	r13, Z+5	; 0x05
    15e8:	c0 1a       	sub	r12, r16
    15ea:	d1 0a       	sbc	r13, r17
    15ec:	cc 15       	cp	r28, r12
    15ee:	dd 05       	cpc	r29, r13
    15f0:	08 f4       	brcc	.+2      	; 0x15f4 <prvReadBytesFromBuffer+0x3c>
    15f2:	6e 01       	movw	r12, r28
    15f4:	f7 01       	movw	r30, r14
    15f6:	64 85       	ldd	r22, Z+12	; 0x0c
    15f8:	75 85       	ldd	r23, Z+13	; 0x0d
    15fa:	60 0f       	add	r22, r16
    15fc:	71 1f       	adc	r23, r17
    15fe:	a6 01       	movw	r20, r12
    1600:	c5 01       	movw	r24, r10
    1602:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <memcpy>
    1606:	cc 16       	cp	r12, r28
    1608:	dd 06       	cpc	r13, r29
    160a:	58 f4       	brcc	.+22     	; 0x1622 <prvReadBytesFromBuffer+0x6a>
    160c:	ae 01       	movw	r20, r28
    160e:	4c 19       	sub	r20, r12
    1610:	5d 09       	sbc	r21, r13
    1612:	f7 01       	movw	r30, r14
    1614:	64 85       	ldd	r22, Z+12	; 0x0c
    1616:	75 85       	ldd	r23, Z+13	; 0x0d
    1618:	c5 01       	movw	r24, r10
    161a:	8c 0d       	add	r24, r12
    161c:	9d 1d       	adc	r25, r13
    161e:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <memcpy>
    1622:	0c 0f       	add	r16, r28
    1624:	1d 1f       	adc	r17, r29
    1626:	f7 01       	movw	r30, r14
    1628:	84 81       	ldd	r24, Z+4	; 0x04
    162a:	95 81       	ldd	r25, Z+5	; 0x05
    162c:	08 17       	cp	r16, r24
    162e:	19 07       	cpc	r17, r25
    1630:	10 f0       	brcs	.+4      	; 0x1636 <prvReadBytesFromBuffer+0x7e>
    1632:	08 1b       	sub	r16, r24
    1634:	19 0b       	sbc	r17, r25
    1636:	f7 01       	movw	r30, r14
    1638:	11 83       	std	Z+1, r17	; 0x01
    163a:	00 83       	st	Z, r16
    163c:	ce 01       	movw	r24, r28
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	1f 91       	pop	r17
    1644:	0f 91       	pop	r16
    1646:	ff 90       	pop	r15
    1648:	ef 90       	pop	r14
    164a:	df 90       	pop	r13
    164c:	cf 90       	pop	r12
    164e:	bf 90       	pop	r11
    1650:	af 90       	pop	r10
    1652:	08 95       	ret

00001654 <xStreamBufferGenericCreate>:
    1654:	ef 92       	push	r14
    1656:	ff 92       	push	r15
    1658:	1f 93       	push	r17
    165a:	cf 93       	push	r28
    165c:	df 93       	push	r29
    165e:	eb 01       	movw	r28, r22
    1660:	11 e0       	ldi	r17, 0x01	; 1
    1662:	41 30       	cpi	r20, 0x01	; 1
    1664:	09 f0       	breq	.+2      	; 0x1668 <xStreamBufferGenericCreate+0x14>
    1666:	10 e0       	ldi	r17, 0x00	; 0
    1668:	20 97       	sbiw	r28, 0x00	; 0
    166a:	11 f4       	brne	.+4      	; 0x1670 <xStreamBufferGenericCreate+0x1c>
    166c:	c1 e0       	ldi	r28, 0x01	; 1
    166e:	d0 e0       	ldi	r29, 0x00	; 0
    1670:	7c 01       	movw	r14, r24
    1672:	2f ef       	ldi	r18, 0xFF	; 255
    1674:	e2 1a       	sub	r14, r18
    1676:	f2 0a       	sbc	r15, r18
    1678:	41 96       	adiw	r24, 0x11	; 17
    167a:	59 d9       	rcall	.-3406   	; 0x92e <pvPortMalloc>
    167c:	00 97       	sbiw	r24, 0x00	; 0
    167e:	81 f0       	breq	.+32     	; 0x16a0 <xStreamBufferGenericCreate+0x4c>
    1680:	20 e1       	ldi	r18, 0x10	; 16
    1682:	fc 01       	movw	r30, r24
    1684:	11 92       	st	Z+, r1
    1686:	2a 95       	dec	r18
    1688:	e9 f7       	brne	.-6      	; 0x1684 <xStreamBufferGenericCreate+0x30>
    168a:	9c 01       	movw	r18, r24
    168c:	20 5f       	subi	r18, 0xF0	; 240
    168e:	3f 4f       	sbci	r19, 0xFF	; 255
    1690:	fc 01       	movw	r30, r24
    1692:	35 87       	std	Z+13, r19	; 0x0d
    1694:	24 87       	std	Z+12, r18	; 0x0c
    1696:	f5 82       	std	Z+5, r15	; 0x05
    1698:	e4 82       	std	Z+4, r14	; 0x04
    169a:	d7 83       	std	Z+7, r29	; 0x07
    169c:	c6 83       	std	Z+6, r28	; 0x06
    169e:	16 87       	std	Z+14, r17	; 0x0e
    16a0:	df 91       	pop	r29
    16a2:	cf 91       	pop	r28
    16a4:	1f 91       	pop	r17
    16a6:	ff 90       	pop	r15
    16a8:	ef 90       	pop	r14
    16aa:	08 95       	ret

000016ac <xStreamBufferReset>:
    16ac:	cf 93       	push	r28
    16ae:	df 93       	push	r29
    16b0:	fc 01       	movw	r30, r24
    16b2:	27 85       	ldd	r18, Z+15	; 0x0f
    16b4:	0f b6       	in	r0, 0x3f	; 63
    16b6:	f8 94       	cli
    16b8:	0f 92       	push	r0
    16ba:	80 85       	ldd	r24, Z+8	; 0x08
    16bc:	91 85       	ldd	r25, Z+9	; 0x09
    16be:	89 2b       	or	r24, r25
    16c0:	d1 f4       	brne	.+52     	; 0x16f6 <xStreamBufferReset+0x4a>
    16c2:	82 85       	ldd	r24, Z+10	; 0x0a
    16c4:	93 85       	ldd	r25, Z+11	; 0x0b
    16c6:	89 2b       	or	r24, r25
    16c8:	c1 f4       	brne	.+48     	; 0x16fa <xStreamBufferReset+0x4e>
    16ca:	86 85       	ldd	r24, Z+14	; 0x0e
    16cc:	46 81       	ldd	r20, Z+6	; 0x06
    16ce:	57 81       	ldd	r21, Z+7	; 0x07
    16d0:	64 81       	ldd	r22, Z+4	; 0x04
    16d2:	75 81       	ldd	r23, Z+5	; 0x05
    16d4:	a4 85       	ldd	r26, Z+12	; 0x0c
    16d6:	b5 85       	ldd	r27, Z+13	; 0x0d
    16d8:	90 e1       	ldi	r25, 0x10	; 16
    16da:	ef 01       	movw	r28, r30
    16dc:	19 92       	st	Y+, r1
    16de:	9a 95       	dec	r25
    16e0:	e9 f7       	brne	.-6      	; 0x16dc <xStreamBufferReset+0x30>
    16e2:	b5 87       	std	Z+13, r27	; 0x0d
    16e4:	a4 87       	std	Z+12, r26	; 0x0c
    16e6:	75 83       	std	Z+5, r23	; 0x05
    16e8:	64 83       	std	Z+4, r22	; 0x04
    16ea:	57 83       	std	Z+7, r21	; 0x07
    16ec:	46 83       	std	Z+6, r20	; 0x06
    16ee:	86 87       	std	Z+14, r24	; 0x0e
    16f0:	27 87       	std	Z+15, r18	; 0x0f
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	03 c0       	rjmp	.+6      	; 0x16fc <xStreamBufferReset+0x50>
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	01 c0       	rjmp	.+2      	; 0x16fc <xStreamBufferReset+0x50>
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	0f 90       	pop	r0
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	df 91       	pop	r29
    1702:	cf 91       	pop	r28
    1704:	08 95       	ret

00001706 <xStreamBufferSpacesAvailable>:
    1706:	fc 01       	movw	r30, r24
    1708:	24 81       	ldd	r18, Z+4	; 0x04
    170a:	35 81       	ldd	r19, Z+5	; 0x05
    170c:	80 81       	ld	r24, Z
    170e:	91 81       	ldd	r25, Z+1	; 0x01
    1710:	42 81       	ldd	r20, Z+2	; 0x02
    1712:	53 81       	ldd	r21, Z+3	; 0x03
    1714:	82 0f       	add	r24, r18
    1716:	93 1f       	adc	r25, r19
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	84 1b       	sub	r24, r20
    171c:	95 0b       	sbc	r25, r21
    171e:	82 17       	cp	r24, r18
    1720:	93 07       	cpc	r25, r19
    1722:	10 f0       	brcs	.+4      	; 0x1728 <xStreamBufferSpacesAvailable+0x22>
    1724:	82 1b       	sub	r24, r18
    1726:	93 0b       	sbc	r25, r19
    1728:	08 95       	ret

0000172a <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    172a:	af 92       	push	r10
    172c:	bf 92       	push	r11
    172e:	cf 92       	push	r12
    1730:	df 92       	push	r13
    1732:	ef 92       	push	r14
    1734:	ff 92       	push	r15
    1736:	0f 93       	push	r16
    1738:	1f 93       	push	r17
    173a:	cf 93       	push	r28
    173c:	df 93       	push	r29
    173e:	ec 01       	movw	r28, r24
    1740:	5b 01       	movw	r10, r22
    1742:	6a 01       	movw	r12, r20
    1744:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1746:	8e 85       	ldd	r24, Y+14	; 0x0e
    1748:	80 ff       	sbrs	r24, 0
    174a:	04 c0       	rjmp	.+8      	; 0x1754 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    174c:	8a 01       	movw	r16, r20
    174e:	0e 5f       	subi	r16, 0xFE	; 254
    1750:	1f 4f       	sbci	r17, 0xFF	; 255
    1752:	01 c0       	rjmp	.+2      	; 0x1756 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    1754:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1756:	ce 01       	movw	r24, r28
    1758:	d6 df       	rcall	.-84     	; 0x1706 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    175a:	9c 01       	movw	r18, r24
    175c:	a6 01       	movw	r20, r12
    175e:	b5 01       	movw	r22, r10
    1760:	ce 01       	movw	r24, r28
    1762:	ea de       	rcall	.-556    	; 0x1538 <prvWriteMessageToBuffer>
    1764:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1766:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1768:	b1 f0       	breq	.+44     	; 0x1796 <xStreamBufferSendFromISR+0x6c>
    176a:	ce 01       	movw	r24, r28
    176c:	89 de       	rcall	.-750    	; 0x1480 <prvBytesInBuffer>
    176e:	2e 81       	ldd	r18, Y+6	; 0x06
    1770:	3f 81       	ldd	r19, Y+7	; 0x07
    1772:	82 17       	cp	r24, r18
    1774:	93 07       	cpc	r25, r19
    1776:	78 f0       	brcs	.+30     	; 0x1796 <xStreamBufferSendFromISR+0x6c>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1778:	88 85       	ldd	r24, Y+8	; 0x08
    177a:	99 85       	ldd	r25, Y+9	; 0x09
    177c:	89 2b       	or	r24, r25
    177e:	59 f0       	breq	.+22     	; 0x1796 <xStreamBufferSendFromISR+0x6c>
    1780:	88 85       	ldd	r24, Y+8	; 0x08
    1782:	99 85       	ldd	r25, Y+9	; 0x09
    1784:	00 e0       	ldi	r16, 0x00	; 0
    1786:	10 e0       	ldi	r17, 0x00	; 0
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	40 e0       	ldi	r20, 0x00	; 0
    178c:	50 e0       	ldi	r21, 0x00	; 0
    178e:	ba 01       	movw	r22, r20
    1790:	2f d7       	rcall	.+3678   	; 0x25f0 <xTaskGenericNotifyFromISR>
    1792:	19 86       	std	Y+9, r1	; 0x09
    1794:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1796:	c6 01       	movw	r24, r12
    1798:	df 91       	pop	r29
    179a:	cf 91       	pop	r28
    179c:	1f 91       	pop	r17
    179e:	0f 91       	pop	r16
    17a0:	ff 90       	pop	r15
    17a2:	ef 90       	pop	r14
    17a4:	df 90       	pop	r13
    17a6:	cf 90       	pop	r12
    17a8:	bf 90       	pop	r11
    17aa:	af 90       	pop	r10
    17ac:	08 95       	ret

000017ae <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    17ae:	6f 92       	push	r6
    17b0:	7f 92       	push	r7
    17b2:	8f 92       	push	r8
    17b4:	9f 92       	push	r9
    17b6:	af 92       	push	r10
    17b8:	bf 92       	push	r11
    17ba:	cf 92       	push	r12
    17bc:	df 92       	push	r13
    17be:	ef 92       	push	r14
    17c0:	ff 92       	push	r15
    17c2:	0f 93       	push	r16
    17c4:	1f 93       	push	r17
    17c6:	cf 93       	push	r28
    17c8:	df 93       	push	r29
    17ca:	1f 92       	push	r1
    17cc:	1f 92       	push	r1
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
    17d2:	6c 01       	movw	r12, r24
    17d4:	3b 01       	movw	r6, r22
    17d6:	4a 01       	movw	r8, r20
    17d8:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    17da:	fc 01       	movw	r30, r24
    17dc:	86 85       	ldd	r24, Z+14	; 0x0e
    17de:	80 fd       	sbrc	r24, 0
    17e0:	03 c0       	rjmp	.+6      	; 0x17e8 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    17e2:	a1 2c       	mov	r10, r1
    17e4:	b1 2c       	mov	r11, r1
    17e6:	04 c0       	rjmp	.+8      	; 0x17f0 <xStreamBufferReceive+0x42>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    17e8:	68 94       	set
    17ea:	aa 24       	eor	r10, r10
    17ec:	a1 f8       	bld	r10, 1
    17ee:	b1 2c       	mov	r11, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    17f0:	e1 14       	cp	r14, r1
    17f2:	f1 04       	cpc	r15, r1
    17f4:	29 f1       	breq	.+74     	; 0x1840 <xStreamBufferReceive+0x92>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    17f6:	0f b6       	in	r0, 0x3f	; 63
    17f8:	f8 94       	cli
    17fa:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    17fc:	c6 01       	movw	r24, r12
    17fe:	40 de       	rcall	.-896    	; 0x1480 <prvBytesInBuffer>
    1800:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1802:	a8 16       	cp	r10, r24
    1804:	b9 06       	cpc	r11, r25
    1806:	38 f0       	brcs	.+14     	; 0x1816 <xStreamBufferReceive+0x68>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	90 e0       	ldi	r25, 0x00	; 0

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    180c:	81 d7       	rcall	.+3842   	; 0x2710 <xTaskNotifyStateClear>
    180e:	c8 d4       	rcall	.+2448   	; 0x21a0 <xTaskGetCurrentTaskHandle>
    1810:	f6 01       	movw	r30, r12
    1812:	91 87       	std	Z+9, r25	; 0x09
    1814:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1816:	0f 90       	pop	r0
    1818:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    181a:	a0 16       	cp	r10, r16
    181c:	b1 06       	cpc	r11, r17
    181e:	b0 f0       	brcs	.+44     	; 0x184c <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1820:	00 e0       	ldi	r16, 0x00	; 0
    1822:	10 e0       	ldi	r17, 0x00	; 0
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	a9 01       	movw	r20, r18
    182a:	60 e0       	ldi	r22, 0x00	; 0
    182c:	70 e0       	ldi	r23, 0x00	; 0
    182e:	cb 01       	movw	r24, r22
    1830:	de d5       	rcall	.+3004   	; 0x23ee <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1832:	f6 01       	movw	r30, r12
    1834:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1836:	10 86       	std	Z+8, r1	; 0x08
    1838:	c6 01       	movw	r24, r12
    183a:	22 de       	rcall	.-956    	; 0x1480 <prvBytesInBuffer>
    183c:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    183e:	03 c0       	rjmp	.+6      	; 0x1846 <xStreamBufferReceive+0x98>
    1840:	c6 01       	movw	r24, r12
    1842:	1e de       	rcall	.-964    	; 0x1480 <prvBytesInBuffer>
    1844:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1846:	a0 16       	cp	r10, r16
    1848:	b1 06       	cpc	r11, r17
    184a:	b8 f5       	brcc	.+110    	; 0x18ba <xStreamBufferReceive+0x10c>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    184c:	a1 14       	cp	r10, r1
    184e:	b1 04       	cpc	r11, r1
    1850:	c1 f0       	breq	.+48     	; 0x1882 <xStreamBufferReceive+0xd4>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    1852:	f6 01       	movw	r30, r12
    1854:	e0 80       	ld	r14, Z
    1856:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    1858:	98 01       	movw	r18, r16
    185a:	a5 01       	movw	r20, r10
    185c:	be 01       	movw	r22, r28
    185e:	6f 5f       	subi	r22, 0xFF	; 255
    1860:	7f 4f       	sbci	r23, 0xFF	; 255
    1862:	c6 01       	movw	r24, r12
    1864:	a9 de       	rcall	.-686    	; 0x15b8 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    186a:	0a 19       	sub	r16, r10
    186c:	1b 09       	sbc	r17, r11

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    186e:	88 16       	cp	r8, r24
    1870:	99 06       	cpc	r9, r25
    1872:	30 f4       	brcc	.+12     	; 0x1880 <xStreamBufferReceive+0xd2>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    1874:	f6 01       	movw	r30, r12
    1876:	f1 82       	std	Z+1, r15	; 0x01
    1878:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    187a:	81 2c       	mov	r8, r1
    187c:	91 2c       	mov	r9, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    187e:	01 c0       	rjmp	.+2      	; 0x1882 <xStreamBufferReceive+0xd4>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    1880:	4c 01       	movw	r8, r24
    1882:	98 01       	movw	r18, r16
    1884:	a4 01       	movw	r20, r8
    1886:	b3 01       	movw	r22, r6
    1888:	c6 01       	movw	r24, r12
    188a:	96 de       	rcall	.-724    	; 0x15b8 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    188c:	7c 01       	movw	r14, r24
    188e:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1890:	b1 f0       	breq	.+44     	; 0x18be <xStreamBufferReceive+0x110>
    1892:	eb d1       	rcall	.+982    	; 0x1c6a <vTaskSuspendAll>
    1894:	f6 01       	movw	r30, r12
    1896:	82 85       	ldd	r24, Z+10	; 0x0a
    1898:	93 85       	ldd	r25, Z+11	; 0x0b
    189a:	89 2b       	or	r24, r25
    189c:	61 f0       	breq	.+24     	; 0x18b6 <xStreamBufferReceive+0x108>
    189e:	82 85       	ldd	r24, Z+10	; 0x0a
    18a0:	93 85       	ldd	r25, Z+11	; 0x0b
    18a2:	00 e0       	ldi	r16, 0x00	; 0
    18a4:	10 e0       	ldi	r17, 0x00	; 0
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	40 e0       	ldi	r20, 0x00	; 0
    18aa:	50 e0       	ldi	r21, 0x00	; 0
    18ac:	ba 01       	movw	r22, r20
    18ae:	22 d6       	rcall	.+3140   	; 0x24f4 <xTaskGenericNotify>
    18b0:	f6 01       	movw	r30, r12
    18b2:	13 86       	std	Z+11, r1	; 0x0b
    18b4:	12 86       	std	Z+10, r1	; 0x0a
    18b6:	a3 d2       	rcall	.+1350   	; 0x1dfe <xTaskResumeAll>
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <xStreamBufferReceive+0x110>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    18ba:	e1 2c       	mov	r14, r1
    18bc:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    18be:	c7 01       	movw	r24, r14
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	df 91       	pop	r29
    18c6:	cf 91       	pop	r28
    18c8:	1f 91       	pop	r17
    18ca:	0f 91       	pop	r16
    18cc:	ff 90       	pop	r15
    18ce:	ef 90       	pop	r14
    18d0:	df 90       	pop	r13
    18d2:	cf 90       	pop	r12
    18d4:	bf 90       	pop	r11
    18d6:	af 90       	pop	r10
    18d8:	9f 90       	pop	r9
    18da:	8f 90       	pop	r8
    18dc:	7f 90       	pop	r7
    18de:	6f 90       	pop	r6
    18e0:	08 95       	ret

000018e2 <prvResetNextTaskUnblockTime>:
    18e2:	e0 91 08 08 	lds	r30, 0x0808	; 0x800808 <pxDelayedTaskList>
    18e6:	f0 91 09 08 	lds	r31, 0x0809	; 0x800809 <pxDelayedTaskList+0x1>
    18ea:	80 81       	ld	r24, Z
    18ec:	81 11       	cpse	r24, r1
    18ee:	07 c0       	rjmp	.+14     	; 0x18fe <prvResetNextTaskUnblockTime+0x1c>
    18f0:	8f ef       	ldi	r24, 0xFF	; 255
    18f2:	9f ef       	ldi	r25, 0xFF	; 255
    18f4:	90 93 e0 07 	sts	0x07E0, r25	; 0x8007e0 <xNextTaskUnblockTime+0x1>
    18f8:	80 93 df 07 	sts	0x07DF, r24	; 0x8007df <xNextTaskUnblockTime>
    18fc:	08 95       	ret
    18fe:	e0 91 08 08 	lds	r30, 0x0808	; 0x800808 <pxDelayedTaskList>
    1902:	f0 91 09 08 	lds	r31, 0x0809	; 0x800809 <pxDelayedTaskList+0x1>
    1906:	05 80       	ldd	r0, Z+5	; 0x05
    1908:	f6 81       	ldd	r31, Z+6	; 0x06
    190a:	e0 2d       	mov	r30, r0
    190c:	06 80       	ldd	r0, Z+6	; 0x06
    190e:	f7 81       	ldd	r31, Z+7	; 0x07
    1910:	e0 2d       	mov	r30, r0
    1912:	82 81       	ldd	r24, Z+2	; 0x02
    1914:	93 81       	ldd	r25, Z+3	; 0x03
    1916:	90 93 e0 07 	sts	0x07E0, r25	; 0x8007e0 <xNextTaskUnblockTime+0x1>
    191a:	80 93 df 07 	sts	0x07DF, r24	; 0x8007df <xNextTaskUnblockTime>
    191e:	08 95       	ret

00001920 <prvAddCurrentTaskToDelayedList>:
    1920:	ff 92       	push	r15
    1922:	0f 93       	push	r16
    1924:	1f 93       	push	r17
    1926:	cf 93       	push	r28
    1928:	df 93       	push	r29
    192a:	ec 01       	movw	r28, r24
    192c:	f6 2e       	mov	r15, r22
    192e:	00 91 e7 07 	lds	r16, 0x07E7	; 0x8007e7 <xTickCount>
    1932:	10 91 e8 07 	lds	r17, 0x07E8	; 0x8007e8 <xTickCount+0x1>
    1936:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <pxCurrentTCB>
    193a:	90 91 41 08 	lds	r25, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    193e:	02 96       	adiw	r24, 0x02	; 2
    1940:	7c d8       	rcall	.-3848   	; 0xa3a <uxListRemove>
    1942:	cf 3f       	cpi	r28, 0xFF	; 255
    1944:	8f ef       	ldi	r24, 0xFF	; 255
    1946:	d8 07       	cpc	r29, r24
    1948:	61 f4       	brne	.+24     	; 0x1962 <prvAddCurrentTaskToDelayedList+0x42>
    194a:	ff 20       	and	r15, r15
    194c:	51 f0       	breq	.+20     	; 0x1962 <prvAddCurrentTaskToDelayedList+0x42>
    194e:	60 91 40 08 	lds	r22, 0x0840	; 0x800840 <pxCurrentTCB>
    1952:	70 91 41 08 	lds	r23, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    1956:	6e 5f       	subi	r22, 0xFE	; 254
    1958:	7f 4f       	sbci	r23, 0xFF	; 255
    195a:	8a ee       	ldi	r24, 0xEA	; 234
    195c:	97 e0       	ldi	r25, 0x07	; 7
    195e:	1b d8       	rcall	.-4042   	; 0x996 <vListInsertEnd>
    1960:	2d c0       	rjmp	.+90     	; 0x19bc <prvAddCurrentTaskToDelayedList+0x9c>
    1962:	c0 0f       	add	r28, r16
    1964:	d1 1f       	adc	r29, r17
    1966:	e0 91 40 08 	lds	r30, 0x0840	; 0x800840 <pxCurrentTCB>
    196a:	f0 91 41 08 	lds	r31, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    196e:	d3 83       	std	Z+3, r29	; 0x03
    1970:	c2 83       	std	Z+2, r28	; 0x02
    1972:	c0 17       	cp	r28, r16
    1974:	d1 07       	cpc	r29, r17
    1976:	60 f4       	brcc	.+24     	; 0x1990 <prvAddCurrentTaskToDelayedList+0x70>
    1978:	60 91 40 08 	lds	r22, 0x0840	; 0x800840 <pxCurrentTCB>
    197c:	70 91 41 08 	lds	r23, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    1980:	80 91 06 08 	lds	r24, 0x0806	; 0x800806 <pxOverflowDelayedTaskList>
    1984:	90 91 07 08 	lds	r25, 0x0807	; 0x800807 <pxOverflowDelayedTaskList+0x1>
    1988:	6e 5f       	subi	r22, 0xFE	; 254
    198a:	7f 4f       	sbci	r23, 0xFF	; 255
    198c:	25 d8       	rcall	.-4022   	; 0x9d8 <vListInsert>
    198e:	16 c0       	rjmp	.+44     	; 0x19bc <prvAddCurrentTaskToDelayedList+0x9c>
    1990:	60 91 40 08 	lds	r22, 0x0840	; 0x800840 <pxCurrentTCB>
    1994:	70 91 41 08 	lds	r23, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    1998:	80 91 08 08 	lds	r24, 0x0808	; 0x800808 <pxDelayedTaskList>
    199c:	90 91 09 08 	lds	r25, 0x0809	; 0x800809 <pxDelayedTaskList+0x1>
    19a0:	6e 5f       	subi	r22, 0xFE	; 254
    19a2:	7f 4f       	sbci	r23, 0xFF	; 255
    19a4:	19 d8       	rcall	.-4046   	; 0x9d8 <vListInsert>
    19a6:	80 91 df 07 	lds	r24, 0x07DF	; 0x8007df <xNextTaskUnblockTime>
    19aa:	90 91 e0 07 	lds	r25, 0x07E0	; 0x8007e0 <xNextTaskUnblockTime+0x1>
    19ae:	c8 17       	cp	r28, r24
    19b0:	d9 07       	cpc	r29, r25
    19b2:	20 f4       	brcc	.+8      	; 0x19bc <prvAddCurrentTaskToDelayedList+0x9c>
    19b4:	d0 93 e0 07 	sts	0x07E0, r29	; 0x8007e0 <xNextTaskUnblockTime+0x1>
    19b8:	c0 93 df 07 	sts	0x07DF, r28	; 0x8007df <xNextTaskUnblockTime>
    19bc:	df 91       	pop	r29
    19be:	cf 91       	pop	r28
    19c0:	1f 91       	pop	r17
    19c2:	0f 91       	pop	r16
    19c4:	ff 90       	pop	r15
    19c6:	08 95       	ret

000019c8 <xTaskCreate>:
    19c8:	4f 92       	push	r4
    19ca:	5f 92       	push	r5
    19cc:	6f 92       	push	r6
    19ce:	7f 92       	push	r7
    19d0:	8f 92       	push	r8
    19d2:	9f 92       	push	r9
    19d4:	af 92       	push	r10
    19d6:	bf 92       	push	r11
    19d8:	cf 92       	push	r12
    19da:	df 92       	push	r13
    19dc:	ef 92       	push	r14
    19de:	ff 92       	push	r15
    19e0:	0f 93       	push	r16
    19e2:	cf 93       	push	r28
    19e4:	df 93       	push	r29
    19e6:	4c 01       	movw	r8, r24
    19e8:	6b 01       	movw	r12, r22
    19ea:	5a 01       	movw	r10, r20
    19ec:	29 01       	movw	r4, r18
    19ee:	ca 01       	movw	r24, r20
    19f0:	0e 94 97 04 	call	0x92e	; 0x92e <pvPortMalloc>
    19f4:	3c 01       	movw	r6, r24
    19f6:	89 2b       	or	r24, r25
    19f8:	09 f4       	brne	.+2      	; 0x19fc <xTaskCreate+0x34>
    19fa:	f3 c0       	rjmp	.+486    	; 0x1be2 <xTaskCreate+0x21a>
    19fc:	8c e2       	ldi	r24, 0x2C	; 44
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	0e 94 97 04 	call	0x92e	; 0x92e <pvPortMalloc>
    1a04:	ec 01       	movw	r28, r24
    1a06:	89 2b       	or	r24, r25
    1a08:	99 f0       	breq	.+38     	; 0x1a30 <xTaskCreate+0x68>
    1a0a:	78 8e       	std	Y+24, r7	; 0x18
    1a0c:	6f 8a       	std	Y+23, r6	; 0x17
    1a0e:	a5 01       	movw	r20, r10
    1a10:	65 ea       	ldi	r22, 0xA5	; 165
    1a12:	70 e0       	ldi	r23, 0x00	; 0
    1a14:	c3 01       	movw	r24, r6
    1a16:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <memset>
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	a8 1a       	sub	r10, r24
    1a1e:	b1 08       	sbc	r11, r1
    1a20:	8f 89       	ldd	r24, Y+23	; 0x17
    1a22:	98 8d       	ldd	r25, Y+24	; 0x18
    1a24:	a8 0e       	add	r10, r24
    1a26:	b9 1e       	adc	r11, r25
    1a28:	c1 14       	cp	r12, r1
    1a2a:	d1 04       	cpc	r13, r1
    1a2c:	29 f4       	brne	.+10     	; 0x1a38 <xTaskCreate+0x70>
    1a2e:	20 c0       	rjmp	.+64     	; 0x1a70 <xTaskCreate+0xa8>
    1a30:	c3 01       	movw	r24, r6
    1a32:	0e 94 aa 04 	call	0x954	; 0x954 <vPortFree>
    1a36:	d5 c0       	rjmp	.+426    	; 0x1be2 <xTaskCreate+0x21a>
    1a38:	d6 01       	movw	r26, r12
    1a3a:	8c 91       	ld	r24, X
    1a3c:	89 8f       	std	Y+25, r24	; 0x19
    1a3e:	8c 91       	ld	r24, X
    1a40:	88 23       	and	r24, r24
    1a42:	a1 f0       	breq	.+40     	; 0x1a6c <xTaskCreate+0xa4>
    1a44:	ae 01       	movw	r20, r28
    1a46:	46 5e       	subi	r20, 0xE6	; 230
    1a48:	5f 4f       	sbci	r21, 0xFF	; 255
    1a4a:	f6 01       	movw	r30, r12
    1a4c:	31 96       	adiw	r30, 0x01	; 1
    1a4e:	b8 e0       	ldi	r27, 0x08	; 8
    1a50:	cb 0e       	add	r12, r27
    1a52:	d1 1c       	adc	r13, r1
    1a54:	cf 01       	movw	r24, r30
    1a56:	21 91       	ld	r18, Z+
    1a58:	da 01       	movw	r26, r20
    1a5a:	2d 93       	st	X+, r18
    1a5c:	ad 01       	movw	r20, r26
    1a5e:	dc 01       	movw	r26, r24
    1a60:	8c 91       	ld	r24, X
    1a62:	88 23       	and	r24, r24
    1a64:	19 f0       	breq	.+6      	; 0x1a6c <xTaskCreate+0xa4>
    1a66:	ec 15       	cp	r30, r12
    1a68:	fd 05       	cpc	r31, r13
    1a6a:	a1 f7       	brne	.-24     	; 0x1a54 <xTaskCreate+0x8c>
    1a6c:	18 a2       	std	Y+32, r1	; 0x20
    1a6e:	01 c0       	rjmp	.+2      	; 0x1a72 <xTaskCreate+0xaa>
    1a70:	19 8e       	std	Y+25, r1	; 0x19
    1a72:	04 30       	cpi	r16, 0x04	; 4
    1a74:	08 f0       	brcs	.+2      	; 0x1a78 <xTaskCreate+0xb0>
    1a76:	03 e0       	ldi	r16, 0x03	; 3
    1a78:	0e 8b       	std	Y+22, r16	; 0x16
    1a7a:	0b a3       	std	Y+35, r16	; 0x23
    1a7c:	1c a2       	std	Y+36, r1	; 0x24
    1a7e:	6e 01       	movw	r12, r28
    1a80:	b2 e0       	ldi	r27, 0x02	; 2
    1a82:	cb 0e       	add	r12, r27
    1a84:	d1 1c       	adc	r13, r1
    1a86:	c6 01       	movw	r24, r12
    1a88:	0e 94 c7 04 	call	0x98e	; 0x98e <vListInitialiseItem>
    1a8c:	ce 01       	movw	r24, r28
    1a8e:	0c 96       	adiw	r24, 0x0c	; 12
    1a90:	0e 94 c7 04 	call	0x98e	; 0x98e <vListInitialiseItem>
    1a94:	d9 87       	std	Y+9, r29	; 0x09
    1a96:	c8 87       	std	Y+8, r28	; 0x08
    1a98:	84 e0       	ldi	r24, 0x04	; 4
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	80 1b       	sub	r24, r16
    1a9e:	91 09       	sbc	r25, r1
    1aa0:	9d 87       	std	Y+13, r25	; 0x0d
    1aa2:	8c 87       	std	Y+12, r24	; 0x0c
    1aa4:	db 8b       	std	Y+19, r29	; 0x13
    1aa6:	ca 8b       	std	Y+18, r28	; 0x12
    1aa8:	1e a2       	std	Y+38, r1	; 0x26
    1aaa:	1d a2       	std	Y+37, r1	; 0x25
    1aac:	1f a2       	std	Y+39, r1	; 0x27
    1aae:	18 a6       	std	Y+40, r1	; 0x28
    1ab0:	19 a6       	std	Y+41, r1	; 0x29
    1ab2:	1a a6       	std	Y+42, r1	; 0x2a
    1ab4:	1b a6       	std	Y+43, r1	; 0x2b
    1ab6:	a2 01       	movw	r20, r4
    1ab8:	b4 01       	movw	r22, r8
    1aba:	c5 01       	movw	r24, r10
    1abc:	0e 94 44 05 	call	0xa88	; 0xa88 <pxPortInitialiseStack>
    1ac0:	99 83       	std	Y+1, r25	; 0x01
    1ac2:	88 83       	st	Y, r24
    1ac4:	e1 14       	cp	r14, r1
    1ac6:	f1 04       	cpc	r15, r1
    1ac8:	19 f0       	breq	.+6      	; 0x1ad0 <xTaskCreate+0x108>
    1aca:	f7 01       	movw	r30, r14
    1acc:	d1 83       	std	Z+1, r29	; 0x01
    1ace:	c0 83       	st	Z, r28
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	0f 92       	push	r0
    1ad6:	80 91 e9 07 	lds	r24, 0x07E9	; 0x8007e9 <uxCurrentNumberOfTasks>
    1ada:	8f 5f       	subi	r24, 0xFF	; 255
    1adc:	80 93 e9 07 	sts	0x07E9, r24	; 0x8007e9 <uxCurrentNumberOfTasks>
    1ae0:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <pxCurrentTCB>
    1ae4:	90 91 41 08 	lds	r25, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    1ae8:	89 2b       	or	r24, r25
    1aea:	d1 f5       	brne	.+116    	; 0x1b60 <xTaskCreate+0x198>
    1aec:	d0 93 41 08 	sts	0x0841, r29	; 0x800841 <pxCurrentTCB+0x1>
    1af0:	c0 93 40 08 	sts	0x0840, r28	; 0x800840 <pxCurrentTCB>
    1af4:	80 91 e9 07 	lds	r24, 0x07E9	; 0x8007e9 <uxCurrentNumberOfTasks>
    1af8:	81 30       	cpi	r24, 0x01	; 1
    1afa:	09 f0       	breq	.+2      	; 0x1afe <xTaskCreate+0x136>
    1afc:	41 c0       	rjmp	.+130    	; 0x1b80 <xTaskCreate+0x1b8>
    1afe:	8c e1       	ldi	r24, 0x1C	; 28
    1b00:	98 e0       	ldi	r25, 0x08	; 8
    1b02:	0e 94 b9 04 	call	0x972	; 0x972 <vListInitialise>
    1b06:	85 e2       	ldi	r24, 0x25	; 37
    1b08:	98 e0       	ldi	r25, 0x08	; 8
    1b0a:	0e 94 b9 04 	call	0x972	; 0x972 <vListInitialise>
    1b0e:	8e e2       	ldi	r24, 0x2E	; 46
    1b10:	98 e0       	ldi	r25, 0x08	; 8
    1b12:	0e 94 b9 04 	call	0x972	; 0x972 <vListInitialise>
    1b16:	87 e3       	ldi	r24, 0x37	; 55
    1b18:	98 e0       	ldi	r25, 0x08	; 8
    1b1a:	0e 94 b9 04 	call	0x972	; 0x972 <vListInitialise>
    1b1e:	83 e1       	ldi	r24, 0x13	; 19
    1b20:	98 e0       	ldi	r25, 0x08	; 8
    1b22:	0e 94 b9 04 	call	0x972	; 0x972 <vListInitialise>
    1b26:	8a e0       	ldi	r24, 0x0A	; 10
    1b28:	98 e0       	ldi	r25, 0x08	; 8
    1b2a:	0e 94 b9 04 	call	0x972	; 0x972 <vListInitialise>
    1b2e:	8d ef       	ldi	r24, 0xFD	; 253
    1b30:	97 e0       	ldi	r25, 0x07	; 7
    1b32:	0e 94 b9 04 	call	0x972	; 0x972 <vListInitialise>
    1b36:	84 ef       	ldi	r24, 0xF4	; 244
    1b38:	97 e0       	ldi	r25, 0x07	; 7
    1b3a:	0e 94 b9 04 	call	0x972	; 0x972 <vListInitialise>
    1b3e:	8a ee       	ldi	r24, 0xEA	; 234
    1b40:	97 e0       	ldi	r25, 0x07	; 7
    1b42:	0e 94 b9 04 	call	0x972	; 0x972 <vListInitialise>
    1b46:	83 e1       	ldi	r24, 0x13	; 19
    1b48:	98 e0       	ldi	r25, 0x08	; 8
    1b4a:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <pxDelayedTaskList+0x1>
    1b4e:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <pxDelayedTaskList>
    1b52:	8a e0       	ldi	r24, 0x0A	; 10
    1b54:	98 e0       	ldi	r25, 0x08	; 8
    1b56:	90 93 07 08 	sts	0x0807, r25	; 0x800807 <pxOverflowDelayedTaskList+0x1>
    1b5a:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <pxOverflowDelayedTaskList>
    1b5e:	10 c0       	rjmp	.+32     	; 0x1b80 <xTaskCreate+0x1b8>
    1b60:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <xSchedulerRunning>
    1b64:	81 11       	cpse	r24, r1
    1b66:	0c c0       	rjmp	.+24     	; 0x1b80 <xTaskCreate+0x1b8>
    1b68:	e0 91 40 08 	lds	r30, 0x0840	; 0x800840 <pxCurrentTCB>
    1b6c:	f0 91 41 08 	lds	r31, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    1b70:	96 89       	ldd	r25, Z+22	; 0x16
    1b72:	8e 89       	ldd	r24, Y+22	; 0x16
    1b74:	89 17       	cp	r24, r25
    1b76:	20 f0       	brcs	.+8      	; 0x1b80 <xTaskCreate+0x1b8>
    1b78:	d0 93 41 08 	sts	0x0841, r29	; 0x800841 <pxCurrentTCB+0x1>
    1b7c:	c0 93 40 08 	sts	0x0840, r28	; 0x800840 <pxCurrentTCB>
    1b80:	80 91 e1 07 	lds	r24, 0x07E1	; 0x8007e1 <uxTaskNumber>
    1b84:	8f 5f       	subi	r24, 0xFF	; 255
    1b86:	80 93 e1 07 	sts	0x07E1, r24	; 0x8007e1 <uxTaskNumber>
    1b8a:	89 a3       	std	Y+33, r24	; 0x21
    1b8c:	8e 89       	ldd	r24, Y+22	; 0x16
    1b8e:	90 91 e6 07 	lds	r25, 0x07E6	; 0x8007e6 <uxTopReadyPriority>
    1b92:	98 17       	cp	r25, r24
    1b94:	10 f4       	brcc	.+4      	; 0x1b9a <xTaskCreate+0x1d2>
    1b96:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <uxTopReadyPriority>
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	9c 01       	movw	r18, r24
    1b9e:	22 0f       	add	r18, r18
    1ba0:	33 1f       	adc	r19, r19
    1ba2:	22 0f       	add	r18, r18
    1ba4:	33 1f       	adc	r19, r19
    1ba6:	22 0f       	add	r18, r18
    1ba8:	33 1f       	adc	r19, r19
    1baa:	82 0f       	add	r24, r18
    1bac:	93 1f       	adc	r25, r19
    1bae:	b6 01       	movw	r22, r12
    1bb0:	84 5e       	subi	r24, 0xE4	; 228
    1bb2:	97 4f       	sbci	r25, 0xF7	; 247
    1bb4:	0e 94 cb 04 	call	0x996	; 0x996 <vListInsertEnd>
    1bb8:	0f 90       	pop	r0
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <xSchedulerRunning>
    1bc0:	88 23       	and	r24, r24
    1bc2:	59 f0       	breq	.+22     	; 0x1bda <xTaskCreate+0x212>
    1bc4:	e0 91 40 08 	lds	r30, 0x0840	; 0x800840 <pxCurrentTCB>
    1bc8:	f0 91 41 08 	lds	r31, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    1bcc:	96 89       	ldd	r25, Z+22	; 0x16
    1bce:	8e 89       	ldd	r24, Y+22	; 0x16
    1bd0:	98 17       	cp	r25, r24
    1bd2:	28 f4       	brcc	.+10     	; 0x1bde <xTaskCreate+0x216>
    1bd4:	07 d8       	rcall	.-4082   	; 0xbe4 <vPortYield>
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	05 c0       	rjmp	.+10     	; 0x1be4 <xTaskCreate+0x21c>
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	03 c0       	rjmp	.+6      	; 0x1be4 <xTaskCreate+0x21c>
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	01 c0       	rjmp	.+2      	; 0x1be4 <xTaskCreate+0x21c>
    1be2:	8f ef       	ldi	r24, 0xFF	; 255
    1be4:	df 91       	pop	r29
    1be6:	cf 91       	pop	r28
    1be8:	0f 91       	pop	r16
    1bea:	ff 90       	pop	r15
    1bec:	ef 90       	pop	r14
    1bee:	df 90       	pop	r13
    1bf0:	cf 90       	pop	r12
    1bf2:	bf 90       	pop	r11
    1bf4:	af 90       	pop	r10
    1bf6:	9f 90       	pop	r9
    1bf8:	8f 90       	pop	r8
    1bfa:	7f 90       	pop	r7
    1bfc:	6f 90       	pop	r6
    1bfe:	5f 90       	pop	r5
    1c00:	4f 90       	pop	r4
    1c02:	08 95       	ret

00001c04 <vTaskStartScheduler>:
    1c04:	ef 92       	push	r14
    1c06:	ff 92       	push	r15
    1c08:	0f 93       	push	r16
    1c0a:	0f 2e       	mov	r0, r31
    1c0c:	fd ed       	ldi	r31, 0xDD	; 221
    1c0e:	ef 2e       	mov	r14, r31
    1c10:	f7 e0       	ldi	r31, 0x07	; 7
    1c12:	ff 2e       	mov	r15, r31
    1c14:	f0 2d       	mov	r31, r0
    1c16:	00 e0       	ldi	r16, 0x00	; 0
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	40 ec       	ldi	r20, 0xC0	; 192
    1c1e:	50 e0       	ldi	r21, 0x00	; 0
    1c20:	64 ef       	ldi	r22, 0xF4	; 244
    1c22:	74 e0       	ldi	r23, 0x04	; 4
    1c24:	8d ec       	ldi	r24, 0xCD	; 205
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	cf de       	rcall	.-610    	; 0x19c8 <xTaskCreate>
    1c2a:	81 30       	cpi	r24, 0x01	; 1
    1c2c:	d1 f4       	brne	.+52     	; 0x1c62 <vTaskStartScheduler+0x5e>
    1c2e:	dc d5       	rcall	.+3000   	; 0x27e8 <xTimerCreateTimerTask>
    1c30:	81 30       	cpi	r24, 0x01	; 1
    1c32:	b9 f4       	brne	.+46     	; 0x1c62 <vTaskStartScheduler+0x5e>
    1c34:	f8 94       	cli
    1c36:	8f ef       	ldi	r24, 0xFF	; 255
    1c38:	9f ef       	ldi	r25, 0xFF	; 255
    1c3a:	90 93 e0 07 	sts	0x07E0, r25	; 0x8007e0 <xNextTaskUnblockTime+0x1>
    1c3e:	80 93 df 07 	sts	0x07DF, r24	; 0x8007df <xNextTaskUnblockTime>
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <xSchedulerRunning>
    1c48:	10 92 e8 07 	sts	0x07E8, r1	; 0x8007e8 <xTickCount+0x1>
    1c4c:	10 92 e7 07 	sts	0x07E7, r1	; 0x8007e7 <xTickCount>
    1c50:	e0 91 40 08 	lds	r30, 0x0840	; 0x800840 <pxCurrentTCB>
    1c54:	f0 91 41 08 	lds	r31, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    1c58:	85 a1       	ldd	r24, Z+37	; 0x25
    1c5a:	0e 94 87 04 	call	0x90e	; 0x90e <task_switch_in>
    1c5e:	0e 94 b6 05 	call	0xb6c	; 0xb6c <xPortStartScheduler>
    1c62:	0f 91       	pop	r16
    1c64:	ff 90       	pop	r15
    1c66:	ef 90       	pop	r14
    1c68:	08 95       	ret

00001c6a <vTaskSuspendAll>:
    1c6a:	80 91 dc 07 	lds	r24, 0x07DC	; 0x8007dc <uxSchedulerSuspended>
    1c6e:	8f 5f       	subi	r24, 0xFF	; 255
    1c70:	80 93 dc 07 	sts	0x07DC, r24	; 0x8007dc <uxSchedulerSuspended>
    1c74:	08 95       	ret

00001c76 <xTaskGetTickCount>:
    1c76:	0f b6       	in	r0, 0x3f	; 63
    1c78:	f8 94       	cli
    1c7a:	0f 92       	push	r0
    1c7c:	80 91 e7 07 	lds	r24, 0x07E7	; 0x8007e7 <xTickCount>
    1c80:	90 91 e8 07 	lds	r25, 0x07E8	; 0x8007e8 <xTickCount+0x1>
    1c84:	0f 90       	pop	r0
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	08 95       	ret

00001c8a <xTaskIncrementTick>:
    1c8a:	cf 92       	push	r12
    1c8c:	df 92       	push	r13
    1c8e:	ef 92       	push	r14
    1c90:	ff 92       	push	r15
    1c92:	0f 93       	push	r16
    1c94:	1f 93       	push	r17
    1c96:	cf 93       	push	r28
    1c98:	df 93       	push	r29
    1c9a:	80 91 dc 07 	lds	r24, 0x07DC	; 0x8007dc <uxSchedulerSuspended>
    1c9e:	81 11       	cpse	r24, r1
    1ca0:	98 c0       	rjmp	.+304    	; 0x1dd2 <xTaskIncrementTick+0x148>
    1ca2:	e0 90 e7 07 	lds	r14, 0x07E7	; 0x8007e7 <xTickCount>
    1ca6:	f0 90 e8 07 	lds	r15, 0x07E8	; 0x8007e8 <xTickCount+0x1>
    1caa:	8f ef       	ldi	r24, 0xFF	; 255
    1cac:	e8 1a       	sub	r14, r24
    1cae:	f8 0a       	sbc	r15, r24
    1cb0:	f0 92 e8 07 	sts	0x07E8, r15	; 0x8007e8 <xTickCount+0x1>
    1cb4:	e0 92 e7 07 	sts	0x07E7, r14	; 0x8007e7 <xTickCount>
    1cb8:	e1 14       	cp	r14, r1
    1cba:	f1 04       	cpc	r15, r1
    1cbc:	b1 f4       	brne	.+44     	; 0x1cea <xTaskIncrementTick+0x60>
    1cbe:	80 91 08 08 	lds	r24, 0x0808	; 0x800808 <pxDelayedTaskList>
    1cc2:	90 91 09 08 	lds	r25, 0x0809	; 0x800809 <pxDelayedTaskList+0x1>
    1cc6:	20 91 06 08 	lds	r18, 0x0806	; 0x800806 <pxOverflowDelayedTaskList>
    1cca:	30 91 07 08 	lds	r19, 0x0807	; 0x800807 <pxOverflowDelayedTaskList+0x1>
    1cce:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <pxDelayedTaskList+0x1>
    1cd2:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <pxDelayedTaskList>
    1cd6:	90 93 07 08 	sts	0x0807, r25	; 0x800807 <pxOverflowDelayedTaskList+0x1>
    1cda:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <pxOverflowDelayedTaskList>
    1cde:	80 91 e2 07 	lds	r24, 0x07E2	; 0x8007e2 <xNumOfOverflows>
    1ce2:	8f 5f       	subi	r24, 0xFF	; 255
    1ce4:	80 93 e2 07 	sts	0x07E2, r24	; 0x8007e2 <xNumOfOverflows>
    1ce8:	fc dd       	rcall	.-1032   	; 0x18e2 <prvResetNextTaskUnblockTime>
    1cea:	80 91 df 07 	lds	r24, 0x07DF	; 0x8007df <xNextTaskUnblockTime>
    1cee:	90 91 e0 07 	lds	r25, 0x07E0	; 0x8007e0 <xNextTaskUnblockTime+0x1>
    1cf2:	e8 16       	cp	r14, r24
    1cf4:	f9 06       	cpc	r15, r25
    1cf6:	10 f4       	brcc	.+4      	; 0x1cfc <xTaskIncrementTick+0x72>
    1cf8:	d1 2c       	mov	r13, r1
    1cfa:	53 c0       	rjmp	.+166    	; 0x1da2 <xTaskIncrementTick+0x118>
    1cfc:	d1 2c       	mov	r13, r1
    1cfe:	cc 24       	eor	r12, r12
    1d00:	c3 94       	inc	r12
    1d02:	e0 91 08 08 	lds	r30, 0x0808	; 0x800808 <pxDelayedTaskList>
    1d06:	f0 91 09 08 	lds	r31, 0x0809	; 0x800809 <pxDelayedTaskList+0x1>
    1d0a:	80 81       	ld	r24, Z
    1d0c:	81 11       	cpse	r24, r1
    1d0e:	07 c0       	rjmp	.+14     	; 0x1d1e <xTaskIncrementTick+0x94>
    1d10:	8f ef       	ldi	r24, 0xFF	; 255
    1d12:	9f ef       	ldi	r25, 0xFF	; 255
    1d14:	90 93 e0 07 	sts	0x07E0, r25	; 0x8007e0 <xNextTaskUnblockTime+0x1>
    1d18:	80 93 df 07 	sts	0x07DF, r24	; 0x8007df <xNextTaskUnblockTime>
    1d1c:	42 c0       	rjmp	.+132    	; 0x1da2 <xTaskIncrementTick+0x118>
    1d1e:	e0 91 08 08 	lds	r30, 0x0808	; 0x800808 <pxDelayedTaskList>
    1d22:	f0 91 09 08 	lds	r31, 0x0809	; 0x800809 <pxDelayedTaskList+0x1>
    1d26:	05 80       	ldd	r0, Z+5	; 0x05
    1d28:	f6 81       	ldd	r31, Z+6	; 0x06
    1d2a:	e0 2d       	mov	r30, r0
    1d2c:	c6 81       	ldd	r28, Z+6	; 0x06
    1d2e:	d7 81       	ldd	r29, Z+7	; 0x07
    1d30:	8a 81       	ldd	r24, Y+2	; 0x02
    1d32:	9b 81       	ldd	r25, Y+3	; 0x03
    1d34:	e8 16       	cp	r14, r24
    1d36:	f9 06       	cpc	r15, r25
    1d38:	28 f4       	brcc	.+10     	; 0x1d44 <xTaskIncrementTick+0xba>
    1d3a:	90 93 e0 07 	sts	0x07E0, r25	; 0x8007e0 <xNextTaskUnblockTime+0x1>
    1d3e:	80 93 df 07 	sts	0x07DF, r24	; 0x8007df <xNextTaskUnblockTime>
    1d42:	2f c0       	rjmp	.+94     	; 0x1da2 <xTaskIncrementTick+0x118>
    1d44:	8e 01       	movw	r16, r28
    1d46:	0e 5f       	subi	r16, 0xFE	; 254
    1d48:	1f 4f       	sbci	r17, 0xFF	; 255
    1d4a:	c8 01       	movw	r24, r16
    1d4c:	0e 94 1d 05 	call	0xa3a	; 0xa3a <uxListRemove>
    1d50:	8c 89       	ldd	r24, Y+20	; 0x14
    1d52:	9d 89       	ldd	r25, Y+21	; 0x15
    1d54:	89 2b       	or	r24, r25
    1d56:	21 f0       	breq	.+8      	; 0x1d60 <xTaskIncrementTick+0xd6>
    1d58:	ce 01       	movw	r24, r28
    1d5a:	0c 96       	adiw	r24, 0x0c	; 12
    1d5c:	0e 94 1d 05 	call	0xa3a	; 0xa3a <uxListRemove>
    1d60:	8e 89       	ldd	r24, Y+22	; 0x16
    1d62:	90 91 e6 07 	lds	r25, 0x07E6	; 0x8007e6 <uxTopReadyPriority>
    1d66:	98 17       	cp	r25, r24
    1d68:	10 f4       	brcc	.+4      	; 0x1d6e <xTaskIncrementTick+0xe4>
    1d6a:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <uxTopReadyPriority>
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	9c 01       	movw	r18, r24
    1d72:	22 0f       	add	r18, r18
    1d74:	33 1f       	adc	r19, r19
    1d76:	22 0f       	add	r18, r18
    1d78:	33 1f       	adc	r19, r19
    1d7a:	22 0f       	add	r18, r18
    1d7c:	33 1f       	adc	r19, r19
    1d7e:	82 0f       	add	r24, r18
    1d80:	93 1f       	adc	r25, r19
    1d82:	b8 01       	movw	r22, r16
    1d84:	84 5e       	subi	r24, 0xE4	; 228
    1d86:	97 4f       	sbci	r25, 0xF7	; 247
    1d88:	0e 94 cb 04 	call	0x996	; 0x996 <vListInsertEnd>
    1d8c:	e0 91 40 08 	lds	r30, 0x0840	; 0x800840 <pxCurrentTCB>
    1d90:	f0 91 41 08 	lds	r31, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    1d94:	9e 89       	ldd	r25, Y+22	; 0x16
    1d96:	86 89       	ldd	r24, Z+22	; 0x16
    1d98:	98 17       	cp	r25, r24
    1d9a:	08 f4       	brcc	.+2      	; 0x1d9e <xTaskIncrementTick+0x114>
    1d9c:	b2 cf       	rjmp	.-156    	; 0x1d02 <xTaskIncrementTick+0x78>
    1d9e:	dc 2c       	mov	r13, r12
    1da0:	b0 cf       	rjmp	.-160    	; 0x1d02 <xTaskIncrementTick+0x78>
    1da2:	e0 91 40 08 	lds	r30, 0x0840	; 0x800840 <pxCurrentTCB>
    1da6:	f0 91 41 08 	lds	r31, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    1daa:	86 89       	ldd	r24, Z+22	; 0x16
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	fc 01       	movw	r30, r24
    1db0:	ee 0f       	add	r30, r30
    1db2:	ff 1f       	adc	r31, r31
    1db4:	ee 0f       	add	r30, r30
    1db6:	ff 1f       	adc	r31, r31
    1db8:	ee 0f       	add	r30, r30
    1dba:	ff 1f       	adc	r31, r31
    1dbc:	8e 0f       	add	r24, r30
    1dbe:	9f 1f       	adc	r25, r31
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	e4 5e       	subi	r30, 0xE4	; 228
    1dc4:	f7 4f       	sbci	r31, 0xF7	; 247
    1dc6:	80 81       	ld	r24, Z
    1dc8:	82 30       	cpi	r24, 0x02	; 2
    1dca:	48 f0       	brcs	.+18     	; 0x1dde <xTaskIncrementTick+0x154>
    1dcc:	dd 24       	eor	r13, r13
    1dce:	d3 94       	inc	r13
    1dd0:	06 c0       	rjmp	.+12     	; 0x1dde <xTaskIncrementTick+0x154>
    1dd2:	80 91 e4 07 	lds	r24, 0x07E4	; 0x8007e4 <uxPendedTicks>
    1dd6:	8f 5f       	subi	r24, 0xFF	; 255
    1dd8:	80 93 e4 07 	sts	0x07E4, r24	; 0x8007e4 <uxPendedTicks>
    1ddc:	d1 2c       	mov	r13, r1
    1dde:	80 91 e3 07 	lds	r24, 0x07E3	; 0x8007e3 <xYieldPending>
    1de2:	88 23       	and	r24, r24
    1de4:	11 f0       	breq	.+4      	; 0x1dea <xTaskIncrementTick+0x160>
    1de6:	dd 24       	eor	r13, r13
    1de8:	d3 94       	inc	r13
    1dea:	8d 2d       	mov	r24, r13
    1dec:	df 91       	pop	r29
    1dee:	cf 91       	pop	r28
    1df0:	1f 91       	pop	r17
    1df2:	0f 91       	pop	r16
    1df4:	ff 90       	pop	r15
    1df6:	ef 90       	pop	r14
    1df8:	df 90       	pop	r13
    1dfa:	cf 90       	pop	r12
    1dfc:	08 95       	ret

00001dfe <xTaskResumeAll>:
    1dfe:	df 92       	push	r13
    1e00:	ef 92       	push	r14
    1e02:	ff 92       	push	r15
    1e04:	0f 93       	push	r16
    1e06:	1f 93       	push	r17
    1e08:	cf 93       	push	r28
    1e0a:	df 93       	push	r29
    1e0c:	0f b6       	in	r0, 0x3f	; 63
    1e0e:	f8 94       	cli
    1e10:	0f 92       	push	r0
    1e12:	80 91 dc 07 	lds	r24, 0x07DC	; 0x8007dc <uxSchedulerSuspended>
    1e16:	81 50       	subi	r24, 0x01	; 1
    1e18:	80 93 dc 07 	sts	0x07DC, r24	; 0x8007dc <uxSchedulerSuspended>
    1e1c:	80 91 dc 07 	lds	r24, 0x07DC	; 0x8007dc <uxSchedulerSuspended>
    1e20:	81 11       	cpse	r24, r1
    1e22:	5d c0       	rjmp	.+186    	; 0x1ede <xTaskResumeAll+0xe0>
    1e24:	80 91 e9 07 	lds	r24, 0x07E9	; 0x8007e9 <uxCurrentNumberOfTasks>
    1e28:	81 11       	cpse	r24, r1
    1e2a:	33 c0       	rjmp	.+102    	; 0x1e92 <xTaskResumeAll+0x94>
    1e2c:	5b c0       	rjmp	.+182    	; 0x1ee4 <xTaskResumeAll+0xe6>
    1e2e:	d7 01       	movw	r26, r14
    1e30:	15 96       	adiw	r26, 0x05	; 5
    1e32:	ed 91       	ld	r30, X+
    1e34:	fc 91       	ld	r31, X
    1e36:	16 97       	sbiw	r26, 0x06	; 6
    1e38:	c6 81       	ldd	r28, Z+6	; 0x06
    1e3a:	d7 81       	ldd	r29, Z+7	; 0x07
    1e3c:	ce 01       	movw	r24, r28
    1e3e:	0c 96       	adiw	r24, 0x0c	; 12
    1e40:	0e 94 1d 05 	call	0xa3a	; 0xa3a <uxListRemove>
    1e44:	8e 01       	movw	r16, r28
    1e46:	0e 5f       	subi	r16, 0xFE	; 254
    1e48:	1f 4f       	sbci	r17, 0xFF	; 255
    1e4a:	c8 01       	movw	r24, r16
    1e4c:	0e 94 1d 05 	call	0xa3a	; 0xa3a <uxListRemove>
    1e50:	8e 89       	ldd	r24, Y+22	; 0x16
    1e52:	90 91 e6 07 	lds	r25, 0x07E6	; 0x8007e6 <uxTopReadyPriority>
    1e56:	98 17       	cp	r25, r24
    1e58:	10 f4       	brcc	.+4      	; 0x1e5e <xTaskResumeAll+0x60>
    1e5a:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <uxTopReadyPriority>
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	9c 01       	movw	r18, r24
    1e62:	22 0f       	add	r18, r18
    1e64:	33 1f       	adc	r19, r19
    1e66:	22 0f       	add	r18, r18
    1e68:	33 1f       	adc	r19, r19
    1e6a:	22 0f       	add	r18, r18
    1e6c:	33 1f       	adc	r19, r19
    1e6e:	82 0f       	add	r24, r18
    1e70:	93 1f       	adc	r25, r19
    1e72:	b8 01       	movw	r22, r16
    1e74:	84 5e       	subi	r24, 0xE4	; 228
    1e76:	97 4f       	sbci	r25, 0xF7	; 247
    1e78:	0e 94 cb 04 	call	0x996	; 0x996 <vListInsertEnd>
    1e7c:	e0 91 40 08 	lds	r30, 0x0840	; 0x800840 <pxCurrentTCB>
    1e80:	f0 91 41 08 	lds	r31, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    1e84:	9e 89       	ldd	r25, Y+22	; 0x16
    1e86:	86 89       	ldd	r24, Z+22	; 0x16
    1e88:	98 17       	cp	r25, r24
    1e8a:	68 f0       	brcs	.+26     	; 0x1ea6 <xTaskResumeAll+0xa8>
    1e8c:	d0 92 e3 07 	sts	0x07E3, r13	; 0x8007e3 <xYieldPending>
    1e90:	0a c0       	rjmp	.+20     	; 0x1ea6 <xTaskResumeAll+0xa8>
    1e92:	c0 e0       	ldi	r28, 0x00	; 0
    1e94:	d0 e0       	ldi	r29, 0x00	; 0
    1e96:	0f 2e       	mov	r0, r31
    1e98:	fd ef       	ldi	r31, 0xFD	; 253
    1e9a:	ef 2e       	mov	r14, r31
    1e9c:	f7 e0       	ldi	r31, 0x07	; 7
    1e9e:	ff 2e       	mov	r15, r31
    1ea0:	f0 2d       	mov	r31, r0
    1ea2:	dd 24       	eor	r13, r13
    1ea4:	d3 94       	inc	r13
    1ea6:	f7 01       	movw	r30, r14
    1ea8:	80 81       	ld	r24, Z
    1eaa:	81 11       	cpse	r24, r1
    1eac:	c0 cf       	rjmp	.-128    	; 0x1e2e <xTaskResumeAll+0x30>
    1eae:	cd 2b       	or	r28, r29
    1eb0:	09 f0       	breq	.+2      	; 0x1eb4 <xTaskResumeAll+0xb6>
    1eb2:	17 dd       	rcall	.-1490   	; 0x18e2 <prvResetNextTaskUnblockTime>
    1eb4:	c0 91 e4 07 	lds	r28, 0x07E4	; 0x8007e4 <uxPendedTicks>
    1eb8:	cc 23       	and	r28, r28
    1eba:	49 f0       	breq	.+18     	; 0x1ece <xTaskResumeAll+0xd0>
    1ebc:	d1 e0       	ldi	r29, 0x01	; 1
    1ebe:	e5 de       	rcall	.-566    	; 0x1c8a <xTaskIncrementTick>
    1ec0:	81 11       	cpse	r24, r1
    1ec2:	d0 93 e3 07 	sts	0x07E3, r29	; 0x8007e3 <xYieldPending>
    1ec6:	c1 50       	subi	r28, 0x01	; 1
    1ec8:	d1 f7       	brne	.-12     	; 0x1ebe <xTaskResumeAll+0xc0>
    1eca:	10 92 e4 07 	sts	0x07E4, r1	; 0x8007e4 <uxPendedTicks>
    1ece:	80 91 e3 07 	lds	r24, 0x07E3	; 0x8007e3 <xYieldPending>
    1ed2:	88 23       	and	r24, r24
    1ed4:	31 f0       	breq	.+12     	; 0x1ee2 <xTaskResumeAll+0xe4>
    1ed6:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <vPortYield>
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	03 c0       	rjmp	.+6      	; 0x1ee4 <xTaskResumeAll+0xe6>
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	01 c0       	rjmp	.+2      	; 0x1ee4 <xTaskResumeAll+0xe6>
    1ee2:	80 e0       	ldi	r24, 0x00	; 0
    1ee4:	0f 90       	pop	r0
    1ee6:	0f be       	out	0x3f, r0	; 63
    1ee8:	df 91       	pop	r29
    1eea:	cf 91       	pop	r28
    1eec:	1f 91       	pop	r17
    1eee:	0f 91       	pop	r16
    1ef0:	ff 90       	pop	r15
    1ef2:	ef 90       	pop	r14
    1ef4:	df 90       	pop	r13
    1ef6:	08 95       	ret

00001ef8 <vTaskDelay>:
    1ef8:	cf 93       	push	r28
    1efa:	df 93       	push	r29
    1efc:	ec 01       	movw	r28, r24
    1efe:	89 2b       	or	r24, r25
    1f00:	39 f0       	breq	.+14     	; 0x1f10 <vTaskDelay+0x18>
    1f02:	b3 de       	rcall	.-666    	; 0x1c6a <vTaskSuspendAll>
    1f04:	60 e0       	ldi	r22, 0x00	; 0
    1f06:	ce 01       	movw	r24, r28
    1f08:	0b dd       	rcall	.-1514   	; 0x1920 <prvAddCurrentTaskToDelayedList>
    1f0a:	79 df       	rcall	.-270    	; 0x1dfe <xTaskResumeAll>
    1f0c:	81 11       	cpse	r24, r1
    1f0e:	02 c0       	rjmp	.+4      	; 0x1f14 <vTaskDelay+0x1c>
    1f10:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <vPortYield>
    1f14:	df 91       	pop	r29
    1f16:	cf 91       	pop	r28
    1f18:	08 95       	ret

00001f1a <vTaskSwitchContext>:
    1f1a:	80 91 dc 07 	lds	r24, 0x07DC	; 0x8007dc <uxSchedulerSuspended>
    1f1e:	88 23       	and	r24, r24
    1f20:	21 f0       	breq	.+8      	; 0x1f2a <vTaskSwitchContext+0x10>
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	80 93 e3 07 	sts	0x07E3, r24	; 0x8007e3 <xYieldPending>
    1f28:	08 95       	ret
    1f2a:	10 92 e3 07 	sts	0x07E3, r1	; 0x8007e3 <xYieldPending>
    1f2e:	e0 91 40 08 	lds	r30, 0x0840	; 0x800840 <pxCurrentTCB>
    1f32:	f0 91 41 08 	lds	r31, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    1f36:	85 a1       	ldd	r24, Z+37	; 0x25
    1f38:	0e 94 91 04 	call	0x922	; 0x922 <task_switch_out>
    1f3c:	a0 91 40 08 	lds	r26, 0x0840	; 0x800840 <pxCurrentTCB>
    1f40:	b0 91 41 08 	lds	r27, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    1f44:	e0 91 40 08 	lds	r30, 0x0840	; 0x800840 <pxCurrentTCB>
    1f48:	f0 91 41 08 	lds	r31, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    1f4c:	2d 91       	ld	r18, X+
    1f4e:	3c 91       	ld	r19, X
    1f50:	87 89       	ldd	r24, Z+23	; 0x17
    1f52:	90 8d       	ldd	r25, Z+24	; 0x18
    1f54:	82 17       	cp	r24, r18
    1f56:	93 07       	cpc	r25, r19
    1f58:	58 f0       	brcs	.+22     	; 0x1f70 <vTaskSwitchContext+0x56>
    1f5a:	60 91 40 08 	lds	r22, 0x0840	; 0x800840 <pxCurrentTCB>
    1f5e:	70 91 41 08 	lds	r23, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    1f62:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <pxCurrentTCB>
    1f66:	90 91 41 08 	lds	r25, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    1f6a:	67 5e       	subi	r22, 0xE7	; 231
    1f6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f6e:	1f d5       	rcall	.+2622   	; 0x29ae <vApplicationStackOverflowHook>
    1f70:	20 91 e6 07 	lds	r18, 0x07E6	; 0x8007e6 <uxTopReadyPriority>
    1f74:	82 2f       	mov	r24, r18
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	fc 01       	movw	r30, r24
    1f7a:	ee 0f       	add	r30, r30
    1f7c:	ff 1f       	adc	r31, r31
    1f7e:	ee 0f       	add	r30, r30
    1f80:	ff 1f       	adc	r31, r31
    1f82:	ee 0f       	add	r30, r30
    1f84:	ff 1f       	adc	r31, r31
    1f86:	e8 0f       	add	r30, r24
    1f88:	f9 1f       	adc	r31, r25
    1f8a:	e4 5e       	subi	r30, 0xE4	; 228
    1f8c:	f7 4f       	sbci	r31, 0xF7	; 247
    1f8e:	30 81       	ld	r19, Z
    1f90:	31 11       	cpse	r19, r1
    1f92:	11 c0       	rjmp	.+34     	; 0x1fb6 <vTaskSwitchContext+0x9c>
    1f94:	21 50       	subi	r18, 0x01	; 1
    1f96:	82 2f       	mov	r24, r18
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	ee 0f       	add	r30, r30
    1f9e:	ff 1f       	adc	r31, r31
    1fa0:	ee 0f       	add	r30, r30
    1fa2:	ff 1f       	adc	r31, r31
    1fa4:	ee 0f       	add	r30, r30
    1fa6:	ff 1f       	adc	r31, r31
    1fa8:	e8 0f       	add	r30, r24
    1faa:	f9 1f       	adc	r31, r25
    1fac:	e4 5e       	subi	r30, 0xE4	; 228
    1fae:	f7 4f       	sbci	r31, 0xF7	; 247
    1fb0:	30 81       	ld	r19, Z
    1fb2:	33 23       	and	r19, r19
    1fb4:	79 f3       	breq	.-34     	; 0x1f94 <vTaskSwitchContext+0x7a>
    1fb6:	ac 01       	movw	r20, r24
    1fb8:	44 0f       	add	r20, r20
    1fba:	55 1f       	adc	r21, r21
    1fbc:	44 0f       	add	r20, r20
    1fbe:	55 1f       	adc	r21, r21
    1fc0:	44 0f       	add	r20, r20
    1fc2:	55 1f       	adc	r21, r21
    1fc4:	48 0f       	add	r20, r24
    1fc6:	59 1f       	adc	r21, r25
    1fc8:	da 01       	movw	r26, r20
    1fca:	a4 5e       	subi	r26, 0xE4	; 228
    1fcc:	b7 4f       	sbci	r27, 0xF7	; 247
    1fce:	11 96       	adiw	r26, 0x01	; 1
    1fd0:	ed 91       	ld	r30, X+
    1fd2:	fc 91       	ld	r31, X
    1fd4:	12 97       	sbiw	r26, 0x02	; 2
    1fd6:	02 80       	ldd	r0, Z+2	; 0x02
    1fd8:	f3 81       	ldd	r31, Z+3	; 0x03
    1fda:	e0 2d       	mov	r30, r0
    1fdc:	12 96       	adiw	r26, 0x02	; 2
    1fde:	fc 93       	st	X, r31
    1fe0:	ee 93       	st	-X, r30
    1fe2:	11 97       	sbiw	r26, 0x01	; 1
    1fe4:	41 5e       	subi	r20, 0xE1	; 225
    1fe6:	57 4f       	sbci	r21, 0xF7	; 247
    1fe8:	e4 17       	cp	r30, r20
    1fea:	f5 07       	cpc	r31, r21
    1fec:	29 f4       	brne	.+10     	; 0x1ff8 <vTaskSwitchContext+0xde>
    1fee:	42 81       	ldd	r20, Z+2	; 0x02
    1ff0:	53 81       	ldd	r21, Z+3	; 0x03
    1ff2:	fd 01       	movw	r30, r26
    1ff4:	52 83       	std	Z+2, r21	; 0x02
    1ff6:	41 83       	std	Z+1, r20	; 0x01
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	ee 0f       	add	r30, r30
    1ffc:	ff 1f       	adc	r31, r31
    1ffe:	ee 0f       	add	r30, r30
    2000:	ff 1f       	adc	r31, r31
    2002:	ee 0f       	add	r30, r30
    2004:	ff 1f       	adc	r31, r31
    2006:	8e 0f       	add	r24, r30
    2008:	9f 1f       	adc	r25, r31
    200a:	fc 01       	movw	r30, r24
    200c:	e4 5e       	subi	r30, 0xE4	; 228
    200e:	f7 4f       	sbci	r31, 0xF7	; 247
    2010:	01 80       	ldd	r0, Z+1	; 0x01
    2012:	f2 81       	ldd	r31, Z+2	; 0x02
    2014:	e0 2d       	mov	r30, r0
    2016:	86 81       	ldd	r24, Z+6	; 0x06
    2018:	97 81       	ldd	r25, Z+7	; 0x07
    201a:	90 93 41 08 	sts	0x0841, r25	; 0x800841 <pxCurrentTCB+0x1>
    201e:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <pxCurrentTCB>
    2022:	20 93 e6 07 	sts	0x07E6, r18	; 0x8007e6 <uxTopReadyPriority>
    2026:	e0 91 40 08 	lds	r30, 0x0840	; 0x800840 <pxCurrentTCB>
    202a:	f0 91 41 08 	lds	r31, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    202e:	85 a1       	ldd	r24, Z+37	; 0x25
    2030:	0c 94 87 04 	jmp	0x90e	; 0x90e <task_switch_in>
    2034:	08 95       	ret

00002036 <vTaskPlaceOnEventList>:
    2036:	cf 93       	push	r28
    2038:	df 93       	push	r29
    203a:	eb 01       	movw	r28, r22
    203c:	60 91 40 08 	lds	r22, 0x0840	; 0x800840 <pxCurrentTCB>
    2040:	70 91 41 08 	lds	r23, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    2044:	64 5f       	subi	r22, 0xF4	; 244
    2046:	7f 4f       	sbci	r23, 0xFF	; 255
    2048:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <vListInsert>
    204c:	61 e0       	ldi	r22, 0x01	; 1
    204e:	ce 01       	movw	r24, r28
    2050:	67 dc       	rcall	.-1842   	; 0x1920 <prvAddCurrentTaskToDelayedList>
    2052:	df 91       	pop	r29
    2054:	cf 91       	pop	r28
    2056:	08 95       	ret

00002058 <vTaskPlaceOnEventListRestricted>:
    2058:	0f 93       	push	r16
    205a:	1f 93       	push	r17
    205c:	cf 93       	push	r28
    205e:	8b 01       	movw	r16, r22
    2060:	c4 2f       	mov	r28, r20
    2062:	60 91 40 08 	lds	r22, 0x0840	; 0x800840 <pxCurrentTCB>
    2066:	70 91 41 08 	lds	r23, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    206a:	64 5f       	subi	r22, 0xF4	; 244
    206c:	7f 4f       	sbci	r23, 0xFF	; 255
    206e:	0e 94 cb 04 	call	0x996	; 0x996 <vListInsertEnd>
    2072:	cc 23       	and	r28, r28
    2074:	11 f0       	breq	.+4      	; 0x207a <vTaskPlaceOnEventListRestricted+0x22>
    2076:	0f ef       	ldi	r16, 0xFF	; 255
    2078:	1f ef       	ldi	r17, 0xFF	; 255
    207a:	6c 2f       	mov	r22, r28
    207c:	c8 01       	movw	r24, r16
    207e:	50 dc       	rcall	.-1888   	; 0x1920 <prvAddCurrentTaskToDelayedList>
    2080:	cf 91       	pop	r28
    2082:	1f 91       	pop	r17
    2084:	0f 91       	pop	r16
    2086:	08 95       	ret

00002088 <xTaskRemoveFromEventList>:
    2088:	0f 93       	push	r16
    208a:	1f 93       	push	r17
    208c:	cf 93       	push	r28
    208e:	df 93       	push	r29
    2090:	dc 01       	movw	r26, r24
    2092:	15 96       	adiw	r26, 0x05	; 5
    2094:	ed 91       	ld	r30, X+
    2096:	fc 91       	ld	r31, X
    2098:	16 97       	sbiw	r26, 0x06	; 6
    209a:	c6 81       	ldd	r28, Z+6	; 0x06
    209c:	d7 81       	ldd	r29, Z+7	; 0x07
    209e:	8e 01       	movw	r16, r28
    20a0:	04 5f       	subi	r16, 0xF4	; 244
    20a2:	1f 4f       	sbci	r17, 0xFF	; 255
    20a4:	c8 01       	movw	r24, r16
    20a6:	0e 94 1d 05 	call	0xa3a	; 0xa3a <uxListRemove>
    20aa:	80 91 dc 07 	lds	r24, 0x07DC	; 0x8007dc <uxSchedulerSuspended>
    20ae:	81 11       	cpse	r24, r1
    20b0:	1c c0       	rjmp	.+56     	; 0x20ea <xTaskRemoveFromEventList+0x62>
    20b2:	0a 50       	subi	r16, 0x0A	; 10
    20b4:	11 09       	sbc	r17, r1
    20b6:	c8 01       	movw	r24, r16
    20b8:	0e 94 1d 05 	call	0xa3a	; 0xa3a <uxListRemove>
    20bc:	8e 89       	ldd	r24, Y+22	; 0x16
    20be:	90 91 e6 07 	lds	r25, 0x07E6	; 0x8007e6 <uxTopReadyPriority>
    20c2:	98 17       	cp	r25, r24
    20c4:	10 f4       	brcc	.+4      	; 0x20ca <xTaskRemoveFromEventList+0x42>
    20c6:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <uxTopReadyPriority>
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	9c 01       	movw	r18, r24
    20ce:	22 0f       	add	r18, r18
    20d0:	33 1f       	adc	r19, r19
    20d2:	22 0f       	add	r18, r18
    20d4:	33 1f       	adc	r19, r19
    20d6:	22 0f       	add	r18, r18
    20d8:	33 1f       	adc	r19, r19
    20da:	82 0f       	add	r24, r18
    20dc:	93 1f       	adc	r25, r19
    20de:	b8 01       	movw	r22, r16
    20e0:	84 5e       	subi	r24, 0xE4	; 228
    20e2:	97 4f       	sbci	r25, 0xF7	; 247
    20e4:	0e 94 cb 04 	call	0x996	; 0x996 <vListInsertEnd>
    20e8:	05 c0       	rjmp	.+10     	; 0x20f4 <xTaskRemoveFromEventList+0x6c>
    20ea:	b8 01       	movw	r22, r16
    20ec:	8d ef       	ldi	r24, 0xFD	; 253
    20ee:	97 e0       	ldi	r25, 0x07	; 7
    20f0:	0e 94 cb 04 	call	0x996	; 0x996 <vListInsertEnd>
    20f4:	e0 91 40 08 	lds	r30, 0x0840	; 0x800840 <pxCurrentTCB>
    20f8:	f0 91 41 08 	lds	r31, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    20fc:	9e 89       	ldd	r25, Y+22	; 0x16
    20fe:	86 89       	ldd	r24, Z+22	; 0x16
    2100:	89 17       	cp	r24, r25
    2102:	20 f4       	brcc	.+8      	; 0x210c <xTaskRemoveFromEventList+0x84>
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	80 93 e3 07 	sts	0x07E3, r24	; 0x8007e3 <xYieldPending>
    210a:	01 c0       	rjmp	.+2      	; 0x210e <xTaskRemoveFromEventList+0x86>
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	df 91       	pop	r29
    2110:	cf 91       	pop	r28
    2112:	1f 91       	pop	r17
    2114:	0f 91       	pop	r16
    2116:	08 95       	ret

00002118 <vTaskInternalSetTimeOutState>:
    2118:	20 91 e2 07 	lds	r18, 0x07E2	; 0x8007e2 <xNumOfOverflows>
    211c:	fc 01       	movw	r30, r24
    211e:	20 83       	st	Z, r18
    2120:	20 91 e7 07 	lds	r18, 0x07E7	; 0x8007e7 <xTickCount>
    2124:	30 91 e8 07 	lds	r19, 0x07E8	; 0x8007e8 <xTickCount+0x1>
    2128:	32 83       	std	Z+2, r19	; 0x02
    212a:	21 83       	std	Z+1, r18	; 0x01
    212c:	08 95       	ret

0000212e <xTaskCheckForTimeOut>:
    212e:	cf 93       	push	r28
    2130:	df 93       	push	r29
    2132:	0f b6       	in	r0, 0x3f	; 63
    2134:	f8 94       	cli
    2136:	0f 92       	push	r0
    2138:	20 91 e7 07 	lds	r18, 0x07E7	; 0x8007e7 <xTickCount>
    213c:	30 91 e8 07 	lds	r19, 0x07E8	; 0x8007e8 <xTickCount+0x1>
    2140:	db 01       	movw	r26, r22
    2142:	4d 91       	ld	r20, X+
    2144:	5c 91       	ld	r21, X
    2146:	4f 3f       	cpi	r20, 0xFF	; 255
    2148:	bf ef       	ldi	r27, 0xFF	; 255
    214a:	5b 07       	cpc	r21, r27
    214c:	e9 f0       	breq	.+58     	; 0x2188 <xTaskCheckForTimeOut+0x5a>
    214e:	ec 01       	movw	r28, r24
    2150:	e9 81       	ldd	r30, Y+1	; 0x01
    2152:	fa 81       	ldd	r31, Y+2	; 0x02
    2154:	a0 91 e2 07 	lds	r26, 0x07E2	; 0x8007e2 <xNumOfOverflows>
    2158:	b8 81       	ld	r27, Y
    215a:	ba 17       	cp	r27, r26
    215c:	19 f0       	breq	.+6      	; 0x2164 <xTaskCheckForTimeOut+0x36>
    215e:	2e 17       	cp	r18, r30
    2160:	3f 07       	cpc	r19, r31
    2162:	a0 f4       	brcc	.+40     	; 0x218c <xTaskCheckForTimeOut+0x5e>
    2164:	2e 1b       	sub	r18, r30
    2166:	3f 0b       	sbc	r19, r31
    2168:	24 17       	cp	r18, r20
    216a:	35 07       	cpc	r19, r21
    216c:	40 f4       	brcc	.+16     	; 0x217e <xTaskCheckForTimeOut+0x50>
    216e:	fb 01       	movw	r30, r22
    2170:	42 1b       	sub	r20, r18
    2172:	53 0b       	sbc	r21, r19
    2174:	51 83       	std	Z+1, r21	; 0x01
    2176:	40 83       	st	Z, r20
    2178:	cf df       	rcall	.-98     	; 0x2118 <vTaskInternalSetTimeOutState>
    217a:	80 e0       	ldi	r24, 0x00	; 0
    217c:	08 c0       	rjmp	.+16     	; 0x218e <xTaskCheckForTimeOut+0x60>
    217e:	fb 01       	movw	r30, r22
    2180:	11 82       	std	Z+1, r1	; 0x01
    2182:	10 82       	st	Z, r1
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	03 c0       	rjmp	.+6      	; 0x218e <xTaskCheckForTimeOut+0x60>
    2188:	80 e0       	ldi	r24, 0x00	; 0
    218a:	01 c0       	rjmp	.+2      	; 0x218e <xTaskCheckForTimeOut+0x60>
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	0f 90       	pop	r0
    2190:	0f be       	out	0x3f, r0	; 63
    2192:	df 91       	pop	r29
    2194:	cf 91       	pop	r28
    2196:	08 95       	ret

00002198 <vTaskMissedYield>:
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	80 93 e3 07 	sts	0x07E3, r24	; 0x8007e3 <xYieldPending>
    219e:	08 95       	ret

000021a0 <xTaskGetCurrentTaskHandle>:
    21a0:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <pxCurrentTCB>
    21a4:	90 91 41 08 	lds	r25, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    21a8:	08 95       	ret

000021aa <xTaskGetSchedulerState>:
    21aa:	80 91 e5 07 	lds	r24, 0x07E5	; 0x8007e5 <xSchedulerRunning>
    21ae:	88 23       	and	r24, r24
    21b0:	31 f0       	breq	.+12     	; 0x21be <xTaskGetSchedulerState+0x14>
    21b2:	80 91 dc 07 	lds	r24, 0x07DC	; 0x8007dc <uxSchedulerSuspended>
    21b6:	88 23       	and	r24, r24
    21b8:	21 f0       	breq	.+8      	; 0x21c2 <xTaskGetSchedulerState+0x18>
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	08 95       	ret
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	08 95       	ret
    21c2:	82 e0       	ldi	r24, 0x02	; 2
    21c4:	08 95       	ret

000021c6 <xTaskPriorityInherit>:
    21c6:	0f 93       	push	r16
    21c8:	1f 93       	push	r17
    21ca:	cf 93       	push	r28
    21cc:	df 93       	push	r29
    21ce:	fc 01       	movw	r30, r24
    21d0:	89 2b       	or	r24, r25
    21d2:	09 f4       	brne	.+2      	; 0x21d6 <xTaskPriorityInherit+0x10>
    21d4:	64 c0       	rjmp	.+200    	; 0x229e <__stack+0x9f>
    21d6:	26 89       	ldd	r18, Z+22	; 0x16
    21d8:	a0 91 40 08 	lds	r26, 0x0840	; 0x800840 <pxCurrentTCB>
    21dc:	b0 91 41 08 	lds	r27, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    21e0:	56 96       	adiw	r26, 0x16	; 22
    21e2:	8c 91       	ld	r24, X
    21e4:	28 17       	cp	r18, r24
    21e6:	08 f0       	brcs	.+2      	; 0x21ea <xTaskPriorityInherit+0x24>
    21e8:	4e c0       	rjmp	.+156    	; 0x2286 <__stack+0x87>
    21ea:	84 85       	ldd	r24, Z+12	; 0x0c
    21ec:	95 85       	ldd	r25, Z+13	; 0x0d
    21ee:	99 23       	and	r25, r25
    21f0:	64 f0       	brlt	.+24     	; 0x220a <__stack+0xb>
    21f2:	a0 91 40 08 	lds	r26, 0x0840	; 0x800840 <pxCurrentTCB>
    21f6:	b0 91 41 08 	lds	r27, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    21fa:	56 96       	adiw	r26, 0x16	; 22
    21fc:	3c 91       	ld	r19, X
    21fe:	84 e0       	ldi	r24, 0x04	; 4
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	83 1b       	sub	r24, r19
    2204:	91 09       	sbc	r25, r1
    2206:	95 87       	std	Z+13, r25	; 0x0d
    2208:	84 87       	std	Z+12, r24	; 0x0c
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	c9 01       	movw	r24, r18
    220e:	88 0f       	add	r24, r24
    2210:	99 1f       	adc	r25, r25
    2212:	88 0f       	add	r24, r24
    2214:	99 1f       	adc	r25, r25
    2216:	88 0f       	add	r24, r24
    2218:	99 1f       	adc	r25, r25
    221a:	28 0f       	add	r18, r24
    221c:	39 1f       	adc	r19, r25
    221e:	24 5e       	subi	r18, 0xE4	; 228
    2220:	37 4f       	sbci	r19, 0xF7	; 247
    2222:	82 85       	ldd	r24, Z+10	; 0x0a
    2224:	93 85       	ldd	r25, Z+11	; 0x0b
    2226:	82 17       	cp	r24, r18
    2228:	93 07       	cpc	r25, r19
    222a:	21 f5       	brne	.+72     	; 0x2274 <__stack+0x75>
    222c:	8f 01       	movw	r16, r30
    222e:	ef 01       	movw	r28, r30
    2230:	22 96       	adiw	r28, 0x02	; 2
    2232:	ce 01       	movw	r24, r28
    2234:	0e 94 1d 05 	call	0xa3a	; 0xa3a <uxListRemove>
    2238:	e0 91 40 08 	lds	r30, 0x0840	; 0x800840 <pxCurrentTCB>
    223c:	f0 91 41 08 	lds	r31, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    2240:	86 89       	ldd	r24, Z+22	; 0x16
    2242:	f8 01       	movw	r30, r16
    2244:	86 8b       	std	Z+22, r24	; 0x16
    2246:	90 91 e6 07 	lds	r25, 0x07E6	; 0x8007e6 <uxTopReadyPriority>
    224a:	98 17       	cp	r25, r24
    224c:	10 f4       	brcc	.+4      	; 0x2252 <__stack+0x53>
    224e:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <uxTopReadyPriority>
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	9c 01       	movw	r18, r24
    2256:	22 0f       	add	r18, r18
    2258:	33 1f       	adc	r19, r19
    225a:	22 0f       	add	r18, r18
    225c:	33 1f       	adc	r19, r19
    225e:	22 0f       	add	r18, r18
    2260:	33 1f       	adc	r19, r19
    2262:	82 0f       	add	r24, r18
    2264:	93 1f       	adc	r25, r19
    2266:	be 01       	movw	r22, r28
    2268:	84 5e       	subi	r24, 0xE4	; 228
    226a:	97 4f       	sbci	r25, 0xF7	; 247
    226c:	0e 94 cb 04 	call	0x996	; 0x996 <vListInsertEnd>
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	16 c0       	rjmp	.+44     	; 0x22a0 <__stack+0xa1>
    2274:	a0 91 40 08 	lds	r26, 0x0840	; 0x800840 <pxCurrentTCB>
    2278:	b0 91 41 08 	lds	r27, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    227c:	56 96       	adiw	r26, 0x16	; 22
    227e:	8c 91       	ld	r24, X
    2280:	86 8b       	std	Z+22, r24	; 0x16
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	0d c0       	rjmp	.+26     	; 0x22a0 <__stack+0xa1>
    2286:	a0 91 40 08 	lds	r26, 0x0840	; 0x800840 <pxCurrentTCB>
    228a:	b0 91 41 08 	lds	r27, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    228e:	81 e0       	ldi	r24, 0x01	; 1
    2290:	23 a1       	ldd	r18, Z+35	; 0x23
    2292:	56 96       	adiw	r26, 0x16	; 22
    2294:	9c 91       	ld	r25, X
    2296:	29 17       	cp	r18, r25
    2298:	18 f0       	brcs	.+6      	; 0x22a0 <__stack+0xa1>
    229a:	80 e0       	ldi	r24, 0x00	; 0
    229c:	01 c0       	rjmp	.+2      	; 0x22a0 <__stack+0xa1>
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	df 91       	pop	r29
    22a2:	cf 91       	pop	r28
    22a4:	1f 91       	pop	r17
    22a6:	0f 91       	pop	r16
    22a8:	08 95       	ret

000022aa <xTaskPriorityDisinherit>:
    22aa:	0f 93       	push	r16
    22ac:	1f 93       	push	r17
    22ae:	cf 93       	push	r28
    22b0:	df 93       	push	r29
    22b2:	fc 01       	movw	r30, r24
    22b4:	89 2b       	or	r24, r25
    22b6:	79 f1       	breq	.+94     	; 0x2316 <xTaskPriorityDisinherit+0x6c>
    22b8:	84 a1       	ldd	r24, Z+36	; 0x24
    22ba:	81 50       	subi	r24, 0x01	; 1
    22bc:	84 a3       	std	Z+36, r24	; 0x24
    22be:	26 89       	ldd	r18, Z+22	; 0x16
    22c0:	93 a1       	ldd	r25, Z+35	; 0x23
    22c2:	29 17       	cp	r18, r25
    22c4:	51 f1       	breq	.+84     	; 0x231a <xTaskPriorityDisinherit+0x70>
    22c6:	81 11       	cpse	r24, r1
    22c8:	2a c0       	rjmp	.+84     	; 0x231e <xTaskPriorityDisinherit+0x74>
    22ca:	ef 01       	movw	r28, r30
    22cc:	8f 01       	movw	r16, r30
    22ce:	0e 5f       	subi	r16, 0xFE	; 254
    22d0:	1f 4f       	sbci	r17, 0xFF	; 255
    22d2:	c8 01       	movw	r24, r16
    22d4:	0e 94 1d 05 	call	0xa3a	; 0xa3a <uxListRemove>
    22d8:	8b a1       	ldd	r24, Y+35	; 0x23
    22da:	8e 8b       	std	Y+22, r24	; 0x16
    22dc:	24 e0       	ldi	r18, 0x04	; 4
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	28 1b       	sub	r18, r24
    22e2:	31 09       	sbc	r19, r1
    22e4:	3d 87       	std	Y+13, r19	; 0x0d
    22e6:	2c 87       	std	Y+12, r18	; 0x0c
    22e8:	90 91 e6 07 	lds	r25, 0x07E6	; 0x8007e6 <uxTopReadyPriority>
    22ec:	98 17       	cp	r25, r24
    22ee:	10 f4       	brcc	.+4      	; 0x22f4 <xTaskPriorityDisinherit+0x4a>
    22f0:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <uxTopReadyPriority>
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	9c 01       	movw	r18, r24
    22f8:	22 0f       	add	r18, r18
    22fa:	33 1f       	adc	r19, r19
    22fc:	22 0f       	add	r18, r18
    22fe:	33 1f       	adc	r19, r19
    2300:	22 0f       	add	r18, r18
    2302:	33 1f       	adc	r19, r19
    2304:	82 0f       	add	r24, r18
    2306:	93 1f       	adc	r25, r19
    2308:	b8 01       	movw	r22, r16
    230a:	84 5e       	subi	r24, 0xE4	; 228
    230c:	97 4f       	sbci	r25, 0xF7	; 247
    230e:	0e 94 cb 04 	call	0x996	; 0x996 <vListInsertEnd>
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	05 c0       	rjmp	.+10     	; 0x2320 <xTaskPriorityDisinherit+0x76>
    2316:	80 e0       	ldi	r24, 0x00	; 0
    2318:	03 c0       	rjmp	.+6      	; 0x2320 <xTaskPriorityDisinherit+0x76>
    231a:	80 e0       	ldi	r24, 0x00	; 0
    231c:	01 c0       	rjmp	.+2      	; 0x2320 <xTaskPriorityDisinherit+0x76>
    231e:	80 e0       	ldi	r24, 0x00	; 0
    2320:	df 91       	pop	r29
    2322:	cf 91       	pop	r28
    2324:	1f 91       	pop	r17
    2326:	0f 91       	pop	r16
    2328:	08 95       	ret

0000232a <vTaskPriorityDisinheritAfterTimeout>:
    232a:	0f 93       	push	r16
    232c:	1f 93       	push	r17
    232e:	cf 93       	push	r28
    2330:	df 93       	push	r29
    2332:	fc 01       	movw	r30, r24
    2334:	89 2b       	or	r24, r25
    2336:	09 f4       	brne	.+2      	; 0x233a <vTaskPriorityDisinheritAfterTimeout+0x10>
    2338:	43 c0       	rjmp	.+134    	; 0x23c0 <vTaskPriorityDisinheritAfterTimeout+0x96>
    233a:	93 a1       	ldd	r25, Z+35	; 0x23
    233c:	96 17       	cp	r25, r22
    233e:	08 f4       	brcc	.+2      	; 0x2342 <vTaskPriorityDisinheritAfterTimeout+0x18>
    2340:	96 2f       	mov	r25, r22
    2342:	86 89       	ldd	r24, Z+22	; 0x16
    2344:	89 17       	cp	r24, r25
    2346:	e1 f1       	breq	.+120    	; 0x23c0 <vTaskPriorityDisinheritAfterTimeout+0x96>
    2348:	24 a1       	ldd	r18, Z+36	; 0x24
    234a:	21 30       	cpi	r18, 0x01	; 1
    234c:	c9 f5       	brne	.+114    	; 0x23c0 <vTaskPriorityDisinheritAfterTimeout+0x96>
    234e:	96 8b       	std	Z+22, r25	; 0x16
    2350:	24 85       	ldd	r18, Z+12	; 0x0c
    2352:	35 85       	ldd	r19, Z+13	; 0x0d
    2354:	33 23       	and	r19, r19
    2356:	34 f0       	brlt	.+12     	; 0x2364 <vTaskPriorityDisinheritAfterTimeout+0x3a>
    2358:	24 e0       	ldi	r18, 0x04	; 4
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	29 1b       	sub	r18, r25
    235e:	31 09       	sbc	r19, r1
    2360:	35 87       	std	Z+13, r19	; 0x0d
    2362:	24 87       	std	Z+12, r18	; 0x0c
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	9c 01       	movw	r18, r24
    2368:	22 0f       	add	r18, r18
    236a:	33 1f       	adc	r19, r19
    236c:	22 0f       	add	r18, r18
    236e:	33 1f       	adc	r19, r19
    2370:	22 0f       	add	r18, r18
    2372:	33 1f       	adc	r19, r19
    2374:	82 0f       	add	r24, r18
    2376:	93 1f       	adc	r25, r19
    2378:	84 5e       	subi	r24, 0xE4	; 228
    237a:	97 4f       	sbci	r25, 0xF7	; 247
    237c:	22 85       	ldd	r18, Z+10	; 0x0a
    237e:	33 85       	ldd	r19, Z+11	; 0x0b
    2380:	28 17       	cp	r18, r24
    2382:	39 07       	cpc	r19, r25
    2384:	e9 f4       	brne	.+58     	; 0x23c0 <vTaskPriorityDisinheritAfterTimeout+0x96>
    2386:	ef 01       	movw	r28, r30
    2388:	8f 01       	movw	r16, r30
    238a:	0e 5f       	subi	r16, 0xFE	; 254
    238c:	1f 4f       	sbci	r17, 0xFF	; 255
    238e:	c8 01       	movw	r24, r16
    2390:	0e 94 1d 05 	call	0xa3a	; 0xa3a <uxListRemove>
    2394:	8e 89       	ldd	r24, Y+22	; 0x16
    2396:	90 91 e6 07 	lds	r25, 0x07E6	; 0x8007e6 <uxTopReadyPriority>
    239a:	98 17       	cp	r25, r24
    239c:	10 f4       	brcc	.+4      	; 0x23a2 <vTaskPriorityDisinheritAfterTimeout+0x78>
    239e:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <uxTopReadyPriority>
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	9c 01       	movw	r18, r24
    23a6:	22 0f       	add	r18, r18
    23a8:	33 1f       	adc	r19, r19
    23aa:	22 0f       	add	r18, r18
    23ac:	33 1f       	adc	r19, r19
    23ae:	22 0f       	add	r18, r18
    23b0:	33 1f       	adc	r19, r19
    23b2:	82 0f       	add	r24, r18
    23b4:	93 1f       	adc	r25, r19
    23b6:	b8 01       	movw	r22, r16
    23b8:	84 5e       	subi	r24, 0xE4	; 228
    23ba:	97 4f       	sbci	r25, 0xF7	; 247
    23bc:	0e 94 cb 04 	call	0x996	; 0x996 <vListInsertEnd>
    23c0:	df 91       	pop	r29
    23c2:	cf 91       	pop	r28
    23c4:	1f 91       	pop	r17
    23c6:	0f 91       	pop	r16
    23c8:	08 95       	ret

000023ca <pvTaskIncrementMutexHeldCount>:
    23ca:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <pxCurrentTCB>
    23ce:	90 91 41 08 	lds	r25, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    23d2:	89 2b       	or	r24, r25
    23d4:	39 f0       	breq	.+14     	; 0x23e4 <pvTaskIncrementMutexHeldCount+0x1a>
    23d6:	e0 91 40 08 	lds	r30, 0x0840	; 0x800840 <pxCurrentTCB>
    23da:	f0 91 41 08 	lds	r31, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    23de:	84 a1       	ldd	r24, Z+36	; 0x24
    23e0:	8f 5f       	subi	r24, 0xFF	; 255
    23e2:	84 a3       	std	Z+36, r24	; 0x24
    23e4:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <pxCurrentTCB>
    23e8:	90 91 41 08 	lds	r25, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    23ec:	08 95       	ret

000023ee <xTaskNotifyWait>:
    23ee:	4f 92       	push	r4
    23f0:	5f 92       	push	r5
    23f2:	6f 92       	push	r6
    23f4:	7f 92       	push	r7
    23f6:	8f 92       	push	r8
    23f8:	9f 92       	push	r9
    23fa:	af 92       	push	r10
    23fc:	bf 92       	push	r11
    23fe:	ef 92       	push	r14
    2400:	ff 92       	push	r15
    2402:	0f 93       	push	r16
    2404:	1f 93       	push	r17
    2406:	49 01       	movw	r8, r18
    2408:	5a 01       	movw	r10, r20
    240a:	0f b6       	in	r0, 0x3f	; 63
    240c:	f8 94       	cli
    240e:	0f 92       	push	r0
    2410:	e0 91 40 08 	lds	r30, 0x0840	; 0x800840 <pxCurrentTCB>
    2414:	f0 91 41 08 	lds	r31, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    2418:	23 a5       	ldd	r18, Z+43	; 0x2b
    241a:	22 30       	cpi	r18, 0x02	; 2
    241c:	21 f1       	breq	.+72     	; 0x2466 <xTaskNotifyWait+0x78>
    241e:	e0 91 40 08 	lds	r30, 0x0840	; 0x800840 <pxCurrentTCB>
    2422:	f0 91 41 08 	lds	r31, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    2426:	47 a0       	ldd	r4, Z+39	; 0x27
    2428:	50 a4       	ldd	r5, Z+40	; 0x28
    242a:	61 a4       	ldd	r6, Z+41	; 0x29
    242c:	72 a4       	ldd	r7, Z+42	; 0x2a
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	80 95       	com	r24
    2434:	90 95       	com	r25
    2436:	a0 95       	com	r26
    2438:	b0 95       	com	r27
    243a:	84 21       	and	r24, r4
    243c:	95 21       	and	r25, r5
    243e:	a6 21       	and	r26, r6
    2440:	b7 21       	and	r27, r7
    2442:	87 a3       	std	Z+39, r24	; 0x27
    2444:	90 a7       	std	Z+40, r25	; 0x28
    2446:	a1 a7       	std	Z+41, r26	; 0x29
    2448:	b2 a7       	std	Z+42, r27	; 0x2a
    244a:	e0 91 40 08 	lds	r30, 0x0840	; 0x800840 <pxCurrentTCB>
    244e:	f0 91 41 08 	lds	r31, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	83 a7       	std	Z+43, r24	; 0x2b
    2456:	e1 14       	cp	r14, r1
    2458:	f1 04       	cpc	r15, r1
    245a:	29 f0       	breq	.+10     	; 0x2466 <xTaskNotifyWait+0x78>
    245c:	61 e0       	ldi	r22, 0x01	; 1
    245e:	c7 01       	movw	r24, r14
    2460:	5f da       	rcall	.-2882   	; 0x1920 <prvAddCurrentTaskToDelayedList>
    2462:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <vPortYield>
    2466:	0f 90       	pop	r0
    2468:	0f be       	out	0x3f, r0	; 63
    246a:	0f b6       	in	r0, 0x3f	; 63
    246c:	f8 94       	cli
    246e:	0f 92       	push	r0
    2470:	01 15       	cp	r16, r1
    2472:	11 05       	cpc	r17, r1
    2474:	69 f0       	breq	.+26     	; 0x2490 <xTaskNotifyWait+0xa2>
    2476:	e0 91 40 08 	lds	r30, 0x0840	; 0x800840 <pxCurrentTCB>
    247a:	f0 91 41 08 	lds	r31, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    247e:	87 a1       	ldd	r24, Z+39	; 0x27
    2480:	90 a5       	ldd	r25, Z+40	; 0x28
    2482:	a1 a5       	ldd	r26, Z+41	; 0x29
    2484:	b2 a5       	ldd	r27, Z+42	; 0x2a
    2486:	f8 01       	movw	r30, r16
    2488:	80 83       	st	Z, r24
    248a:	91 83       	std	Z+1, r25	; 0x01
    248c:	a2 83       	std	Z+2, r26	; 0x02
    248e:	b3 83       	std	Z+3, r27	; 0x03
    2490:	e0 91 40 08 	lds	r30, 0x0840	; 0x800840 <pxCurrentTCB>
    2494:	f0 91 41 08 	lds	r31, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    2498:	83 a5       	ldd	r24, Z+43	; 0x2b
    249a:	82 30       	cpi	r24, 0x02	; 2
    249c:	b1 f4       	brne	.+44     	; 0x24ca <xTaskNotifyWait+0xdc>
    249e:	e0 91 40 08 	lds	r30, 0x0840	; 0x800840 <pxCurrentTCB>
    24a2:	f0 91 41 08 	lds	r31, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    24a6:	87 a1       	ldd	r24, Z+39	; 0x27
    24a8:	90 a5       	ldd	r25, Z+40	; 0x28
    24aa:	a1 a5       	ldd	r26, Z+41	; 0x29
    24ac:	b2 a5       	ldd	r27, Z+42	; 0x2a
    24ae:	80 94       	com	r8
    24b0:	90 94       	com	r9
    24b2:	a0 94       	com	r10
    24b4:	b0 94       	com	r11
    24b6:	88 22       	and	r8, r24
    24b8:	99 22       	and	r9, r25
    24ba:	aa 22       	and	r10, r26
    24bc:	bb 22       	and	r11, r27
    24be:	87 a2       	std	Z+39, r8	; 0x27
    24c0:	90 a6       	std	Z+40, r9	; 0x28
    24c2:	a1 a6       	std	Z+41, r10	; 0x29
    24c4:	b2 a6       	std	Z+42, r11	; 0x2a
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	01 c0       	rjmp	.+2      	; 0x24cc <xTaskNotifyWait+0xde>
    24ca:	80 e0       	ldi	r24, 0x00	; 0
    24cc:	e0 91 40 08 	lds	r30, 0x0840	; 0x800840 <pxCurrentTCB>
    24d0:	f0 91 41 08 	lds	r31, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    24d4:	13 a6       	std	Z+43, r1	; 0x2b
    24d6:	0f 90       	pop	r0
    24d8:	0f be       	out	0x3f, r0	; 63
    24da:	1f 91       	pop	r17
    24dc:	0f 91       	pop	r16
    24de:	ff 90       	pop	r15
    24e0:	ef 90       	pop	r14
    24e2:	bf 90       	pop	r11
    24e4:	af 90       	pop	r10
    24e6:	9f 90       	pop	r9
    24e8:	8f 90       	pop	r8
    24ea:	7f 90       	pop	r7
    24ec:	6f 90       	pop	r6
    24ee:	5f 90       	pop	r5
    24f0:	4f 90       	pop	r4
    24f2:	08 95       	ret

000024f4 <xTaskGenericNotify>:
    24f4:	0f 93       	push	r16
    24f6:	1f 93       	push	r17
    24f8:	cf 93       	push	r28
    24fa:	df 93       	push	r29
    24fc:	fc 01       	movw	r30, r24
    24fe:	0f b6       	in	r0, 0x3f	; 63
    2500:	f8 94       	cli
    2502:	0f 92       	push	r0
    2504:	01 15       	cp	r16, r1
    2506:	11 05       	cpc	r17, r1
    2508:	49 f0       	breq	.+18     	; 0x251c <xTaskGenericNotify+0x28>
    250a:	87 a1       	ldd	r24, Z+39	; 0x27
    250c:	90 a5       	ldd	r25, Z+40	; 0x28
    250e:	a1 a5       	ldd	r26, Z+41	; 0x29
    2510:	b2 a5       	ldd	r27, Z+42	; 0x2a
    2512:	e8 01       	movw	r28, r16
    2514:	88 83       	st	Y, r24
    2516:	99 83       	std	Y+1, r25	; 0x01
    2518:	aa 83       	std	Y+2, r26	; 0x02
    251a:	bb 83       	std	Y+3, r27	; 0x03
    251c:	83 a5       	ldd	r24, Z+43	; 0x2b
    251e:	92 e0       	ldi	r25, 0x02	; 2
    2520:	93 a7       	std	Z+43, r25	; 0x2b
    2522:	22 30       	cpi	r18, 0x02	; 2
    2524:	b1 f0       	breq	.+44     	; 0x2552 <xTaskGenericNotify+0x5e>
    2526:	18 f4       	brcc	.+6      	; 0x252e <xTaskGenericNotify+0x3a>
    2528:	21 30       	cpi	r18, 0x01	; 1
    252a:	31 f0       	breq	.+12     	; 0x2538 <xTaskGenericNotify+0x44>
    252c:	2a c0       	rjmp	.+84     	; 0x2582 <xTaskGenericNotify+0x8e>
    252e:	23 30       	cpi	r18, 0x03	; 3
    2530:	e9 f0       	breq	.+58     	; 0x256c <xTaskGenericNotify+0x78>
    2532:	24 30       	cpi	r18, 0x04	; 4
    2534:	01 f1       	breq	.+64     	; 0x2576 <xTaskGenericNotify+0x82>
    2536:	25 c0       	rjmp	.+74     	; 0x2582 <xTaskGenericNotify+0x8e>
    2538:	07 a1       	ldd	r16, Z+39	; 0x27
    253a:	10 a5       	ldd	r17, Z+40	; 0x28
    253c:	21 a5       	ldd	r18, Z+41	; 0x29
    253e:	32 a5       	ldd	r19, Z+42	; 0x2a
    2540:	40 2b       	or	r20, r16
    2542:	51 2b       	or	r21, r17
    2544:	62 2b       	or	r22, r18
    2546:	73 2b       	or	r23, r19
    2548:	47 a3       	std	Z+39, r20	; 0x27
    254a:	50 a7       	std	Z+40, r21	; 0x28
    254c:	61 a7       	std	Z+41, r22	; 0x29
    254e:	72 a7       	std	Z+42, r23	; 0x2a
    2550:	18 c0       	rjmp	.+48     	; 0x2582 <xTaskGenericNotify+0x8e>
    2552:	47 a1       	ldd	r20, Z+39	; 0x27
    2554:	50 a5       	ldd	r21, Z+40	; 0x28
    2556:	61 a5       	ldd	r22, Z+41	; 0x29
    2558:	72 a5       	ldd	r23, Z+42	; 0x2a
    255a:	4f 5f       	subi	r20, 0xFF	; 255
    255c:	5f 4f       	sbci	r21, 0xFF	; 255
    255e:	6f 4f       	sbci	r22, 0xFF	; 255
    2560:	7f 4f       	sbci	r23, 0xFF	; 255
    2562:	47 a3       	std	Z+39, r20	; 0x27
    2564:	50 a7       	std	Z+40, r21	; 0x28
    2566:	61 a7       	std	Z+41, r22	; 0x29
    2568:	72 a7       	std	Z+42, r23	; 0x2a
    256a:	0b c0       	rjmp	.+22     	; 0x2582 <xTaskGenericNotify+0x8e>
    256c:	47 a3       	std	Z+39, r20	; 0x27
    256e:	50 a7       	std	Z+40, r21	; 0x28
    2570:	61 a7       	std	Z+41, r22	; 0x29
    2572:	72 a7       	std	Z+42, r23	; 0x2a
    2574:	06 c0       	rjmp	.+12     	; 0x2582 <xTaskGenericNotify+0x8e>
    2576:	82 30       	cpi	r24, 0x02	; 2
    2578:	79 f1       	breq	.+94     	; 0x25d8 <xTaskGenericNotify+0xe4>
    257a:	47 a3       	std	Z+39, r20	; 0x27
    257c:	50 a7       	std	Z+40, r21	; 0x28
    257e:	61 a7       	std	Z+41, r22	; 0x29
    2580:	72 a7       	std	Z+42, r23	; 0x2a
    2582:	81 30       	cpi	r24, 0x01	; 1
    2584:	59 f5       	brne	.+86     	; 0x25dc <xTaskGenericNotify+0xe8>
    2586:	ef 01       	movw	r28, r30
    2588:	8f 01       	movw	r16, r30
    258a:	0e 5f       	subi	r16, 0xFE	; 254
    258c:	1f 4f       	sbci	r17, 0xFF	; 255
    258e:	c8 01       	movw	r24, r16
    2590:	0e 94 1d 05 	call	0xa3a	; 0xa3a <uxListRemove>
    2594:	8e 89       	ldd	r24, Y+22	; 0x16
    2596:	90 91 e6 07 	lds	r25, 0x07E6	; 0x8007e6 <uxTopReadyPriority>
    259a:	98 17       	cp	r25, r24
    259c:	10 f4       	brcc	.+4      	; 0x25a2 <xTaskGenericNotify+0xae>
    259e:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <uxTopReadyPriority>
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	9c 01       	movw	r18, r24
    25a6:	22 0f       	add	r18, r18
    25a8:	33 1f       	adc	r19, r19
    25aa:	22 0f       	add	r18, r18
    25ac:	33 1f       	adc	r19, r19
    25ae:	22 0f       	add	r18, r18
    25b0:	33 1f       	adc	r19, r19
    25b2:	82 0f       	add	r24, r18
    25b4:	93 1f       	adc	r25, r19
    25b6:	b8 01       	movw	r22, r16
    25b8:	84 5e       	subi	r24, 0xE4	; 228
    25ba:	97 4f       	sbci	r25, 0xF7	; 247
    25bc:	0e 94 cb 04 	call	0x996	; 0x996 <vListInsertEnd>
    25c0:	e0 91 40 08 	lds	r30, 0x0840	; 0x800840 <pxCurrentTCB>
    25c4:	f0 91 41 08 	lds	r31, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    25c8:	9e 89       	ldd	r25, Y+22	; 0x16
    25ca:	86 89       	ldd	r24, Z+22	; 0x16
    25cc:	89 17       	cp	r24, r25
    25ce:	40 f4       	brcc	.+16     	; 0x25e0 <xTaskGenericNotify+0xec>
    25d0:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <vPortYield>
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	05 c0       	rjmp	.+10     	; 0x25e2 <xTaskGenericNotify+0xee>
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	03 c0       	rjmp	.+6      	; 0x25e2 <xTaskGenericNotify+0xee>
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	01 c0       	rjmp	.+2      	; 0x25e2 <xTaskGenericNotify+0xee>
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	0f 90       	pop	r0
    25e4:	0f be       	out	0x3f, r0	; 63
    25e6:	df 91       	pop	r29
    25e8:	cf 91       	pop	r28
    25ea:	1f 91       	pop	r17
    25ec:	0f 91       	pop	r16
    25ee:	08 95       	ret

000025f0 <xTaskGenericNotifyFromISR>:
    25f0:	ef 92       	push	r14
    25f2:	ff 92       	push	r15
    25f4:	0f 93       	push	r16
    25f6:	1f 93       	push	r17
    25f8:	cf 93       	push	r28
    25fa:	df 93       	push	r29
    25fc:	fc 01       	movw	r30, r24
    25fe:	01 15       	cp	r16, r1
    2600:	11 05       	cpc	r17, r1
    2602:	49 f0       	breq	.+18     	; 0x2616 <xTaskGenericNotifyFromISR+0x26>
    2604:	87 a1       	ldd	r24, Z+39	; 0x27
    2606:	90 a5       	ldd	r25, Z+40	; 0x28
    2608:	a1 a5       	ldd	r26, Z+41	; 0x29
    260a:	b2 a5       	ldd	r27, Z+42	; 0x2a
    260c:	e8 01       	movw	r28, r16
    260e:	88 83       	st	Y, r24
    2610:	99 83       	std	Y+1, r25	; 0x01
    2612:	aa 83       	std	Y+2, r26	; 0x02
    2614:	bb 83       	std	Y+3, r27	; 0x03
    2616:	83 a5       	ldd	r24, Z+43	; 0x2b
    2618:	92 e0       	ldi	r25, 0x02	; 2
    261a:	93 a7       	std	Z+43, r25	; 0x2b
    261c:	22 30       	cpi	r18, 0x02	; 2
    261e:	b1 f0       	breq	.+44     	; 0x264c <xTaskGenericNotifyFromISR+0x5c>
    2620:	18 f4       	brcc	.+6      	; 0x2628 <xTaskGenericNotifyFromISR+0x38>
    2622:	21 30       	cpi	r18, 0x01	; 1
    2624:	31 f0       	breq	.+12     	; 0x2632 <xTaskGenericNotifyFromISR+0x42>
    2626:	2b c0       	rjmp	.+86     	; 0x267e <xTaskGenericNotifyFromISR+0x8e>
    2628:	23 30       	cpi	r18, 0x03	; 3
    262a:	e9 f0       	breq	.+58     	; 0x2666 <xTaskGenericNotifyFromISR+0x76>
    262c:	24 30       	cpi	r18, 0x04	; 4
    262e:	01 f1       	breq	.+64     	; 0x2670 <xTaskGenericNotifyFromISR+0x80>
    2630:	26 c0       	rjmp	.+76     	; 0x267e <xTaskGenericNotifyFromISR+0x8e>
    2632:	07 a1       	ldd	r16, Z+39	; 0x27
    2634:	10 a5       	ldd	r17, Z+40	; 0x28
    2636:	21 a5       	ldd	r18, Z+41	; 0x29
    2638:	32 a5       	ldd	r19, Z+42	; 0x2a
    263a:	40 2b       	or	r20, r16
    263c:	51 2b       	or	r21, r17
    263e:	62 2b       	or	r22, r18
    2640:	73 2b       	or	r23, r19
    2642:	47 a3       	std	Z+39, r20	; 0x27
    2644:	50 a7       	std	Z+40, r21	; 0x28
    2646:	61 a7       	std	Z+41, r22	; 0x29
    2648:	72 a7       	std	Z+42, r23	; 0x2a
    264a:	19 c0       	rjmp	.+50     	; 0x267e <xTaskGenericNotifyFromISR+0x8e>
    264c:	47 a1       	ldd	r20, Z+39	; 0x27
    264e:	50 a5       	ldd	r21, Z+40	; 0x28
    2650:	61 a5       	ldd	r22, Z+41	; 0x29
    2652:	72 a5       	ldd	r23, Z+42	; 0x2a
    2654:	4f 5f       	subi	r20, 0xFF	; 255
    2656:	5f 4f       	sbci	r21, 0xFF	; 255
    2658:	6f 4f       	sbci	r22, 0xFF	; 255
    265a:	7f 4f       	sbci	r23, 0xFF	; 255
    265c:	47 a3       	std	Z+39, r20	; 0x27
    265e:	50 a7       	std	Z+40, r21	; 0x28
    2660:	61 a7       	std	Z+41, r22	; 0x29
    2662:	72 a7       	std	Z+42, r23	; 0x2a
    2664:	0c c0       	rjmp	.+24     	; 0x267e <xTaskGenericNotifyFromISR+0x8e>
    2666:	47 a3       	std	Z+39, r20	; 0x27
    2668:	50 a7       	std	Z+40, r21	; 0x28
    266a:	61 a7       	std	Z+41, r22	; 0x29
    266c:	72 a7       	std	Z+42, r23	; 0x2a
    266e:	07 c0       	rjmp	.+14     	; 0x267e <xTaskGenericNotifyFromISR+0x8e>
    2670:	82 30       	cpi	r24, 0x02	; 2
    2672:	09 f4       	brne	.+2      	; 0x2676 <xTaskGenericNotifyFromISR+0x86>
    2674:	41 c0       	rjmp	.+130    	; 0x26f8 <xTaskGenericNotifyFromISR+0x108>
    2676:	47 a3       	std	Z+39, r20	; 0x27
    2678:	50 a7       	std	Z+40, r21	; 0x28
    267a:	61 a7       	std	Z+41, r22	; 0x29
    267c:	72 a7       	std	Z+42, r23	; 0x2a
    267e:	81 30       	cpi	r24, 0x01	; 1
    2680:	e9 f5       	brne	.+122    	; 0x26fc <xTaskGenericNotifyFromISR+0x10c>
    2682:	ef 01       	movw	r28, r30
    2684:	80 91 dc 07 	lds	r24, 0x07DC	; 0x8007dc <uxSchedulerSuspended>
    2688:	81 11       	cpse	r24, r1
    268a:	1d c0       	rjmp	.+58     	; 0x26c6 <xTaskGenericNotifyFromISR+0xd6>
    268c:	8f 01       	movw	r16, r30
    268e:	0e 5f       	subi	r16, 0xFE	; 254
    2690:	1f 4f       	sbci	r17, 0xFF	; 255
    2692:	c8 01       	movw	r24, r16
    2694:	0e 94 1d 05 	call	0xa3a	; 0xa3a <uxListRemove>
    2698:	8e 89       	ldd	r24, Y+22	; 0x16
    269a:	90 91 e6 07 	lds	r25, 0x07E6	; 0x8007e6 <uxTopReadyPriority>
    269e:	98 17       	cp	r25, r24
    26a0:	10 f4       	brcc	.+4      	; 0x26a6 <xTaskGenericNotifyFromISR+0xb6>
    26a2:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <uxTopReadyPriority>
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	9c 01       	movw	r18, r24
    26aa:	22 0f       	add	r18, r18
    26ac:	33 1f       	adc	r19, r19
    26ae:	22 0f       	add	r18, r18
    26b0:	33 1f       	adc	r19, r19
    26b2:	22 0f       	add	r18, r18
    26b4:	33 1f       	adc	r19, r19
    26b6:	82 0f       	add	r24, r18
    26b8:	93 1f       	adc	r25, r19
    26ba:	b8 01       	movw	r22, r16
    26bc:	84 5e       	subi	r24, 0xE4	; 228
    26be:	97 4f       	sbci	r25, 0xF7	; 247
    26c0:	0e 94 cb 04 	call	0x996	; 0x996 <vListInsertEnd>
    26c4:	07 c0       	rjmp	.+14     	; 0x26d4 <xTaskGenericNotifyFromISR+0xe4>
    26c6:	bf 01       	movw	r22, r30
    26c8:	64 5f       	subi	r22, 0xF4	; 244
    26ca:	7f 4f       	sbci	r23, 0xFF	; 255
    26cc:	8d ef       	ldi	r24, 0xFD	; 253
    26ce:	97 e0       	ldi	r25, 0x07	; 7
    26d0:	0e 94 cb 04 	call	0x996	; 0x996 <vListInsertEnd>
    26d4:	e0 91 40 08 	lds	r30, 0x0840	; 0x800840 <pxCurrentTCB>
    26d8:	f0 91 41 08 	lds	r31, 0x0841	; 0x800841 <pxCurrentTCB+0x1>
    26dc:	9e 89       	ldd	r25, Y+22	; 0x16
    26de:	86 89       	ldd	r24, Z+22	; 0x16
    26e0:	89 17       	cp	r24, r25
    26e2:	70 f4       	brcc	.+28     	; 0x2700 <xTaskGenericNotifyFromISR+0x110>
    26e4:	e1 14       	cp	r14, r1
    26e6:	f1 04       	cpc	r15, r1
    26e8:	19 f0       	breq	.+6      	; 0x26f0 <xTaskGenericNotifyFromISR+0x100>
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	f7 01       	movw	r30, r14
    26ee:	80 83       	st	Z, r24
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	80 93 e3 07 	sts	0x07E3, r24	; 0x8007e3 <xYieldPending>
    26f6:	05 c0       	rjmp	.+10     	; 0x2702 <xTaskGenericNotifyFromISR+0x112>
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	03 c0       	rjmp	.+6      	; 0x2702 <xTaskGenericNotifyFromISR+0x112>
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	01 c0       	rjmp	.+2      	; 0x2702 <xTaskGenericNotifyFromISR+0x112>
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	df 91       	pop	r29
    2704:	cf 91       	pop	r28
    2706:	1f 91       	pop	r17
    2708:	0f 91       	pop	r16
    270a:	ff 90       	pop	r15
    270c:	ef 90       	pop	r14
    270e:	08 95       	ret

00002710 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2710:	00 97       	sbiw	r24, 0x00	; 0
    2712:	21 f4       	brne	.+8      	; 0x271c <xTaskNotifyStateClear+0xc>
    2714:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <pxCurrentTCB>
    2718:	90 91 41 08 	lds	r25, 0x0841	; 0x800841 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    271c:	0f b6       	in	r0, 0x3f	; 63
    271e:	f8 94       	cli
    2720:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    2722:	fc 01       	movw	r30, r24
    2724:	23 a5       	ldd	r18, Z+43	; 0x2b
    2726:	22 30       	cpi	r18, 0x02	; 2
    2728:	19 f4       	brne	.+6      	; 0x2730 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    272a:	13 a6       	std	Z+43, r1	; 0x2b
                xReturn = pdPASS;
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	01 c0       	rjmp	.+2      	; 0x2732 <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    2730:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2732:	0f 90       	pop	r0
    2734:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2736:	08 95       	ret

00002738 <prvInsertTimerInActiveList>:
    2738:	fc 01       	movw	r30, r24
    273a:	73 83       	std	Z+3, r23	; 0x03
    273c:	62 83       	std	Z+2, r22	; 0x02
    273e:	91 87       	std	Z+9, r25	; 0x09
    2740:	80 87       	std	Z+8, r24	; 0x08
    2742:	46 17       	cp	r20, r22
    2744:	57 07       	cpc	r21, r23
    2746:	90 f0       	brcs	.+36     	; 0x276c <prvInsertTimerInActiveList+0x34>
    2748:	42 1b       	sub	r20, r18
    274a:	53 0b       	sbc	r21, r19
    274c:	84 85       	ldd	r24, Z+12	; 0x0c
    274e:	95 85       	ldd	r25, Z+13	; 0x0d
    2750:	48 17       	cp	r20, r24
    2752:	59 07       	cpc	r21, r25
    2754:	e0 f4       	brcc	.+56     	; 0x278e <prvInsertTimerInActiveList+0x56>
    2756:	bf 01       	movw	r22, r30
    2758:	6e 5f       	subi	r22, 0xFE	; 254
    275a:	7f 4f       	sbci	r23, 0xFF	; 255
    275c:	80 91 48 08 	lds	r24, 0x0848	; 0x800848 <pxOverflowTimerList>
    2760:	90 91 49 08 	lds	r25, 0x0849	; 0x800849 <pxOverflowTimerList+0x1>
    2764:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <vListInsert>
    2768:	80 e0       	ldi	r24, 0x00	; 0
    276a:	08 95       	ret
    276c:	42 17       	cp	r20, r18
    276e:	53 07       	cpc	r21, r19
    2770:	18 f4       	brcc	.+6      	; 0x2778 <prvInsertTimerInActiveList+0x40>
    2772:	62 17       	cp	r22, r18
    2774:	73 07       	cpc	r23, r19
    2776:	68 f4       	brcc	.+26     	; 0x2792 <prvInsertTimerInActiveList+0x5a>
    2778:	bf 01       	movw	r22, r30
    277a:	6e 5f       	subi	r22, 0xFE	; 254
    277c:	7f 4f       	sbci	r23, 0xFF	; 255
    277e:	80 91 4a 08 	lds	r24, 0x084A	; 0x80084a <pxCurrentTimerList>
    2782:	90 91 4b 08 	lds	r25, 0x084B	; 0x80084b <pxCurrentTimerList+0x1>
    2786:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <vListInsert>
    278a:	80 e0       	ldi	r24, 0x00	; 0
    278c:	08 95       	ret
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	08 95       	ret
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	08 95       	ret

00002796 <prvCheckForValidListAndQueue>:
    2796:	0f b6       	in	r0, 0x3f	; 63
    2798:	f8 94       	cli
    279a:	0f 92       	push	r0
    279c:	80 91 46 08 	lds	r24, 0x0846	; 0x800846 <xTimerQueue>
    27a0:	90 91 47 08 	lds	r25, 0x0847	; 0x800847 <xTimerQueue+0x1>
    27a4:	89 2b       	or	r24, r25
    27a6:	e9 f4       	brne	.+58     	; 0x27e2 <prvCheckForValidListAndQueue+0x4c>
    27a8:	85 e5       	ldi	r24, 0x55	; 85
    27aa:	98 e0       	ldi	r25, 0x08	; 8
    27ac:	0e 94 b9 04 	call	0x972	; 0x972 <vListInitialise>
    27b0:	8c e4       	ldi	r24, 0x4C	; 76
    27b2:	98 e0       	ldi	r25, 0x08	; 8
    27b4:	0e 94 b9 04 	call	0x972	; 0x972 <vListInitialise>
    27b8:	85 e5       	ldi	r24, 0x55	; 85
    27ba:	98 e0       	ldi	r25, 0x08	; 8
    27bc:	90 93 4b 08 	sts	0x084B, r25	; 0x80084b <pxCurrentTimerList+0x1>
    27c0:	80 93 4a 08 	sts	0x084A, r24	; 0x80084a <pxCurrentTimerList>
    27c4:	8c e4       	ldi	r24, 0x4C	; 76
    27c6:	98 e0       	ldi	r25, 0x08	; 8
    27c8:	90 93 49 08 	sts	0x0849, r25	; 0x800849 <pxOverflowTimerList+0x1>
    27cc:	80 93 48 08 	sts	0x0848, r24	; 0x800848 <pxOverflowTimerList>
    27d0:	40 e0       	ldi	r20, 0x00	; 0
    27d2:	65 e0       	ldi	r22, 0x05	; 5
    27d4:	8a e0       	ldi	r24, 0x0A	; 10
    27d6:	0e 94 cd 07 	call	0xf9a	; 0xf9a <xQueueGenericCreate>
    27da:	90 93 47 08 	sts	0x0847, r25	; 0x800847 <xTimerQueue+0x1>
    27de:	80 93 46 08 	sts	0x0846, r24	; 0x800846 <xTimerQueue>
    27e2:	0f 90       	pop	r0
    27e4:	0f be       	out	0x3f, r0	; 63
    27e6:	08 95       	ret

000027e8 <xTimerCreateTimerTask>:
    27e8:	ef 92       	push	r14
    27ea:	ff 92       	push	r15
    27ec:	0f 93       	push	r16
    27ee:	d3 df       	rcall	.-90     	; 0x2796 <prvCheckForValidListAndQueue>
    27f0:	80 91 46 08 	lds	r24, 0x0846	; 0x800846 <xTimerQueue>
    27f4:	90 91 47 08 	lds	r25, 0x0847	; 0x800847 <xTimerQueue+0x1>
    27f8:	89 2b       	or	r24, r25
    27fa:	89 f0       	breq	.+34     	; 0x281e <xTimerCreateTimerTask+0x36>
    27fc:	0f 2e       	mov	r0, r31
    27fe:	f4 e4       	ldi	r31, 0x44	; 68
    2800:	ef 2e       	mov	r14, r31
    2802:	f8 e0       	ldi	r31, 0x08	; 8
    2804:	ff 2e       	mov	r15, r31
    2806:	f0 2d       	mov	r31, r0
    2808:	06 e0       	ldi	r16, 0x06	; 6
    280a:	20 e0       	ldi	r18, 0x00	; 0
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	45 e5       	ldi	r20, 0x55	; 85
    2810:	50 e0       	ldi	r21, 0x00	; 0
    2812:	69 ef       	ldi	r22, 0xF9	; 249
    2814:	74 e0       	ldi	r23, 0x04	; 4
    2816:	83 e0       	ldi	r24, 0x03	; 3
    2818:	91 e0       	ldi	r25, 0x01	; 1
    281a:	d6 d8       	rcall	.-3668   	; 0x19c8 <xTaskCreate>
    281c:	01 c0       	rjmp	.+2      	; 0x2820 <xTimerCreateTimerTask+0x38>
    281e:	80 e0       	ldi	r24, 0x00	; 0
    2820:	0f 91       	pop	r16
    2822:	ff 90       	pop	r15
    2824:	ef 90       	pop	r14
    2826:	08 95       	ret

00002828 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    2828:	0f 93       	push	r16
    282a:	1f 93       	push	r17
    282c:	cf 93       	push	r28
    282e:	df 93       	push	r29
    2830:	00 d0       	rcall	.+0      	; 0x2832 <xTimerGenericCommand+0xa>
    2832:	1f 92       	push	r1
    2834:	1f 92       	push	r1
    2836:	cd b7       	in	r28, 0x3d	; 61
    2838:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    283a:	e0 91 46 08 	lds	r30, 0x0846	; 0x800846 <xTimerQueue>
    283e:	f0 91 47 08 	lds	r31, 0x0847	; 0x800847 <xTimerQueue+0x1>
    2842:	30 97       	sbiw	r30, 0x00	; 0
    2844:	69 f1       	breq	.+90     	; 0x28a0 <xTimerGenericCommand+0x78>
    2846:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    2848:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    284a:	5b 83       	std	Y+3, r21	; 0x03
    284c:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    284e:	9d 83       	std	Y+5, r25	; 0x05
    2850:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2852:	66 30       	cpi	r22, 0x06	; 6
    2854:	e4 f4       	brge	.+56     	; 0x288e <xTimerGenericCommand+0x66>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2856:	a9 dc       	rcall	.-1710   	; 0x21aa <xTaskGetSchedulerState>
    2858:	82 30       	cpi	r24, 0x02	; 2
    285a:	61 f4       	brne	.+24     	; 0x2874 <xTimerGenericCommand+0x4c>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	a8 01       	movw	r20, r16
    2860:	be 01       	movw	r22, r28
    2862:	6f 5f       	subi	r22, 0xFF	; 255
    2864:	7f 4f       	sbci	r23, 0xFF	; 255
    2866:	80 91 46 08 	lds	r24, 0x0846	; 0x800846 <xTimerQueue>
    286a:	90 91 47 08 	lds	r25, 0x0847	; 0x800847 <xTimerQueue+0x1>
    286e:	0e 94 fb 07 	call	0xff6	; 0xff6 <xQueueGenericSend>
    2872:	17 c0       	rjmp	.+46     	; 0x28a2 <xTimerGenericCommand+0x7a>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	40 e0       	ldi	r20, 0x00	; 0
    2878:	50 e0       	ldi	r21, 0x00	; 0
    287a:	be 01       	movw	r22, r28
    287c:	6f 5f       	subi	r22, 0xFF	; 255
    287e:	7f 4f       	sbci	r23, 0xFF	; 255
    2880:	80 91 46 08 	lds	r24, 0x0846	; 0x800846 <xTimerQueue>
    2884:	90 91 47 08 	lds	r25, 0x0847	; 0x800847 <xTimerQueue+0x1>
    2888:	0e 94 fb 07 	call	0xff6	; 0xff6 <xQueueGenericSend>
    288c:	0a c0       	rjmp	.+20     	; 0x28a2 <xTimerGenericCommand+0x7a>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	ad 01       	movw	r20, r26
    2892:	be 01       	movw	r22, r28
    2894:	6f 5f       	subi	r22, 0xFF	; 255
    2896:	7f 4f       	sbci	r23, 0xFF	; 255
    2898:	cf 01       	movw	r24, r30
    289a:	0e 94 a8 08 	call	0x1150	; 0x1150 <xQueueGenericSendFromISR>
    289e:	01 c0       	rjmp	.+2      	; 0x28a2 <xTimerGenericCommand+0x7a>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    28a0:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    28a2:	0f 90       	pop	r0
    28a4:	0f 90       	pop	r0
    28a6:	0f 90       	pop	r0
    28a8:	0f 90       	pop	r0
    28aa:	0f 90       	pop	r0
    28ac:	df 91       	pop	r29
    28ae:	cf 91       	pop	r28
    28b0:	1f 91       	pop	r17
    28b2:	0f 91       	pop	r16
    28b4:	08 95       	ret

000028b6 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    28b6:	af 92       	push	r10
    28b8:	bf 92       	push	r11
    28ba:	cf 92       	push	r12
    28bc:	df 92       	push	r13
    28be:	ef 92       	push	r14
    28c0:	ff 92       	push	r15
    28c2:	0f 93       	push	r16
    28c4:	1f 93       	push	r17
    28c6:	cf 93       	push	r28
    28c8:	df 93       	push	r29
    28ca:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    28cc:	d4 d9       	rcall	.-3160   	; 0x1c76 <xTaskGetTickCount>
    28ce:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    28d0:	80 91 42 08 	lds	r24, 0x0842	; 0x800842 <xLastTime.2432>
    28d4:	90 91 43 08 	lds	r25, 0x0843	; 0x800843 <xLastTime.2432+0x1>
    28d8:	e8 16       	cp	r14, r24
    28da:	f9 06       	cpc	r15, r25
    28dc:	08 f0       	brcs	.+2      	; 0x28e0 <prvSampleTimeNow+0x2a>
    28de:	47 c0       	rjmp	.+142    	; 0x296e <prvSampleTimeNow+0xb8>
    28e0:	2f c0       	rjmp	.+94     	; 0x2940 <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    28e2:	05 80       	ldd	r0, Z+5	; 0x05
    28e4:	f6 81       	ldd	r31, Z+6	; 0x06
    28e6:	e0 2d       	mov	r30, r0
    28e8:	a0 80       	ld	r10, Z
    28ea:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    28ec:	c6 81       	ldd	r28, Z+6	; 0x06
    28ee:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    28f0:	8e 01       	movw	r16, r28
    28f2:	0e 5f       	subi	r16, 0xFE	; 254
    28f4:	1f 4f       	sbci	r17, 0xFF	; 255
    28f6:	c8 01       	movw	r24, r16
    28f8:	0e 94 1d 05 	call	0xa3a	; 0xa3a <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    28fc:	e8 89       	ldd	r30, Y+16	; 0x10
    28fe:	f9 89       	ldd	r31, Y+17	; 0x11
    2900:	ce 01       	movw	r24, r28
    2902:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2904:	8b 89       	ldd	r24, Y+19	; 0x13
    2906:	82 ff       	sbrs	r24, 2
    2908:	1b c0       	rjmp	.+54     	; 0x2940 <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    290a:	8c 85       	ldd	r24, Y+12	; 0x0c
    290c:	9d 85       	ldd	r25, Y+13	; 0x0d
    290e:	8a 0d       	add	r24, r10
    2910:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    2912:	a8 16       	cp	r10, r24
    2914:	b9 06       	cpc	r11, r25
    2916:	60 f4       	brcc	.+24     	; 0x2930 <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2918:	9b 83       	std	Y+3, r25	; 0x03
    291a:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    291c:	d9 87       	std	Y+9, r29	; 0x09
    291e:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2920:	b8 01       	movw	r22, r16
    2922:	80 91 4a 08 	lds	r24, 0x084A	; 0x80084a <pxCurrentTimerList>
    2926:	90 91 4b 08 	lds	r25, 0x084B	; 0x80084b <pxCurrentTimerList+0x1>
    292a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <vListInsert>
    292e:	08 c0       	rjmp	.+16     	; 0x2940 <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2930:	00 e0       	ldi	r16, 0x00	; 0
    2932:	10 e0       	ldi	r17, 0x00	; 0
    2934:	20 e0       	ldi	r18, 0x00	; 0
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	a5 01       	movw	r20, r10
    293a:	60 e0       	ldi	r22, 0x00	; 0
    293c:	ce 01       	movw	r24, r28
    293e:	74 df       	rcall	.-280    	; 0x2828 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2940:	e0 91 4a 08 	lds	r30, 0x084A	; 0x80084a <pxCurrentTimerList>
    2944:	f0 91 4b 08 	lds	r31, 0x084B	; 0x80084b <pxCurrentTimerList+0x1>
    2948:	80 81       	ld	r24, Z
    294a:	81 11       	cpse	r24, r1
    294c:	ca cf       	rjmp	.-108    	; 0x28e2 <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    294e:	80 91 48 08 	lds	r24, 0x0848	; 0x800848 <pxOverflowTimerList>
    2952:	90 91 49 08 	lds	r25, 0x0849	; 0x800849 <pxOverflowTimerList+0x1>
    2956:	90 93 4b 08 	sts	0x084B, r25	; 0x80084b <pxCurrentTimerList+0x1>
    295a:	80 93 4a 08 	sts	0x084A, r24	; 0x80084a <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    295e:	f0 93 49 08 	sts	0x0849, r31	; 0x800849 <pxOverflowTimerList+0x1>
    2962:	e0 93 48 08 	sts	0x0848, r30	; 0x800848 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	f6 01       	movw	r30, r12
    296a:	80 83       	st	Z, r24
    296c:	02 c0       	rjmp	.+4      	; 0x2972 <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    296e:	f6 01       	movw	r30, r12
    2970:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    2972:	f0 92 43 08 	sts	0x0843, r15	; 0x800843 <xLastTime.2432+0x1>
    2976:	e0 92 42 08 	sts	0x0842, r14	; 0x800842 <xLastTime.2432>

    return xTimeNow;
}
    297a:	c7 01       	movw	r24, r14
    297c:	df 91       	pop	r29
    297e:	cf 91       	pop	r28
    2980:	1f 91       	pop	r17
    2982:	0f 91       	pop	r16
    2984:	ff 90       	pop	r15
    2986:	ef 90       	pop	r14
    2988:	df 90       	pop	r13
    298a:	cf 90       	pop	r12
    298c:	bf 90       	pop	r11
    298e:	af 90       	pop	r10
    2990:	08 95       	ret

00002992 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2992:	08 95       	ret

00002994 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2994:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2996:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2998:	2f ef       	ldi	r18, 0xFF	; 255
    299a:	80 e7       	ldi	r24, 0x70	; 112
    299c:	92 e0       	ldi	r25, 0x02	; 2
    299e:	21 50       	subi	r18, 0x01	; 1
    29a0:	80 40       	sbci	r24, 0x00	; 0
    29a2:	90 40       	sbci	r25, 0x00	; 0
    29a4:	e1 f7       	brne	.-8      	; 0x299e <vApplicationMallocFailedHook+0xa>
    29a6:	00 c0       	rjmp	.+0      	; 0x29a8 <vApplicationMallocFailedHook+0x14>
    29a8:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    29aa:	1f 9a       	sbi	0x03, 7	; 3
    29ac:	f5 cf       	rjmp	.-22     	; 0x2998 <vApplicationMallocFailedHook+0x4>

000029ae <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    29ae:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    29b0:	2f 9a       	sbi	0x05, 7	; 5
    29b2:	2f ef       	ldi	r18, 0xFF	; 255
    29b4:	87 ea       	ldi	r24, 0xA7	; 167
    29b6:	91 e6       	ldi	r25, 0x61	; 97
    29b8:	21 50       	subi	r18, 0x01	; 1
    29ba:	80 40       	sbci	r24, 0x00	; 0
    29bc:	90 40       	sbci	r25, 0x00	; 0
    29be:	e1 f7       	brne	.-8      	; 0x29b8 <vApplicationStackOverflowHook+0xa>
    29c0:	00 c0       	rjmp	.+0      	; 0x29c2 <vApplicationStackOverflowHook+0x14>
    29c2:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    29c4:	1f 9a       	sbi	0x03, 7	; 3
    29c6:	f5 cf       	rjmp	.-22     	; 0x29b2 <vApplicationStackOverflowHook+0x4>

000029c8 <__fixsfsi>:
    29c8:	04 d0       	rcall	.+8      	; 0x29d2 <__fixunssfsi>
    29ca:	68 94       	set
    29cc:	b1 11       	cpse	r27, r1
    29ce:	50 c0       	rjmp	.+160    	; 0x2a70 <__fp_szero>
    29d0:	08 95       	ret

000029d2 <__fixunssfsi>:
    29d2:	33 d0       	rcall	.+102    	; 0x2a3a <__fp_splitA>
    29d4:	88 f0       	brcs	.+34     	; 0x29f8 <__fixunssfsi+0x26>
    29d6:	9f 57       	subi	r25, 0x7F	; 127
    29d8:	90 f0       	brcs	.+36     	; 0x29fe <__fixunssfsi+0x2c>
    29da:	b9 2f       	mov	r27, r25
    29dc:	99 27       	eor	r25, r25
    29de:	b7 51       	subi	r27, 0x17	; 23
    29e0:	a0 f0       	brcs	.+40     	; 0x2a0a <__fixunssfsi+0x38>
    29e2:	d1 f0       	breq	.+52     	; 0x2a18 <__fixunssfsi+0x46>
    29e4:	66 0f       	add	r22, r22
    29e6:	77 1f       	adc	r23, r23
    29e8:	88 1f       	adc	r24, r24
    29ea:	99 1f       	adc	r25, r25
    29ec:	1a f0       	brmi	.+6      	; 0x29f4 <__fixunssfsi+0x22>
    29ee:	ba 95       	dec	r27
    29f0:	c9 f7       	brne	.-14     	; 0x29e4 <__fixunssfsi+0x12>
    29f2:	12 c0       	rjmp	.+36     	; 0x2a18 <__fixunssfsi+0x46>
    29f4:	b1 30       	cpi	r27, 0x01	; 1
    29f6:	81 f0       	breq	.+32     	; 0x2a18 <__fixunssfsi+0x46>
    29f8:	3a d0       	rcall	.+116    	; 0x2a6e <__fp_zero>
    29fa:	b1 e0       	ldi	r27, 0x01	; 1
    29fc:	08 95       	ret
    29fe:	37 c0       	rjmp	.+110    	; 0x2a6e <__fp_zero>
    2a00:	67 2f       	mov	r22, r23
    2a02:	78 2f       	mov	r23, r24
    2a04:	88 27       	eor	r24, r24
    2a06:	b8 5f       	subi	r27, 0xF8	; 248
    2a08:	39 f0       	breq	.+14     	; 0x2a18 <__fixunssfsi+0x46>
    2a0a:	b9 3f       	cpi	r27, 0xF9	; 249
    2a0c:	cc f3       	brlt	.-14     	; 0x2a00 <__fixunssfsi+0x2e>
    2a0e:	86 95       	lsr	r24
    2a10:	77 95       	ror	r23
    2a12:	67 95       	ror	r22
    2a14:	b3 95       	inc	r27
    2a16:	d9 f7       	brne	.-10     	; 0x2a0e <__fixunssfsi+0x3c>
    2a18:	3e f4       	brtc	.+14     	; 0x2a28 <__fixunssfsi+0x56>
    2a1a:	90 95       	com	r25
    2a1c:	80 95       	com	r24
    2a1e:	70 95       	com	r23
    2a20:	61 95       	neg	r22
    2a22:	7f 4f       	sbci	r23, 0xFF	; 255
    2a24:	8f 4f       	sbci	r24, 0xFF	; 255
    2a26:	9f 4f       	sbci	r25, 0xFF	; 255
    2a28:	08 95       	ret

00002a2a <__fp_split3>:
    2a2a:	57 fd       	sbrc	r21, 7
    2a2c:	90 58       	subi	r25, 0x80	; 128
    2a2e:	44 0f       	add	r20, r20
    2a30:	55 1f       	adc	r21, r21
    2a32:	59 f0       	breq	.+22     	; 0x2a4a <__fp_splitA+0x10>
    2a34:	5f 3f       	cpi	r21, 0xFF	; 255
    2a36:	71 f0       	breq	.+28     	; 0x2a54 <__fp_splitA+0x1a>
    2a38:	47 95       	ror	r20

00002a3a <__fp_splitA>:
    2a3a:	88 0f       	add	r24, r24
    2a3c:	97 fb       	bst	r25, 7
    2a3e:	99 1f       	adc	r25, r25
    2a40:	61 f0       	breq	.+24     	; 0x2a5a <__fp_splitA+0x20>
    2a42:	9f 3f       	cpi	r25, 0xFF	; 255
    2a44:	79 f0       	breq	.+30     	; 0x2a64 <__fp_splitA+0x2a>
    2a46:	87 95       	ror	r24
    2a48:	08 95       	ret
    2a4a:	12 16       	cp	r1, r18
    2a4c:	13 06       	cpc	r1, r19
    2a4e:	14 06       	cpc	r1, r20
    2a50:	55 1f       	adc	r21, r21
    2a52:	f2 cf       	rjmp	.-28     	; 0x2a38 <__fp_split3+0xe>
    2a54:	46 95       	lsr	r20
    2a56:	f1 df       	rcall	.-30     	; 0x2a3a <__fp_splitA>
    2a58:	08 c0       	rjmp	.+16     	; 0x2a6a <__fp_splitA+0x30>
    2a5a:	16 16       	cp	r1, r22
    2a5c:	17 06       	cpc	r1, r23
    2a5e:	18 06       	cpc	r1, r24
    2a60:	99 1f       	adc	r25, r25
    2a62:	f1 cf       	rjmp	.-30     	; 0x2a46 <__fp_splitA+0xc>
    2a64:	86 95       	lsr	r24
    2a66:	71 05       	cpc	r23, r1
    2a68:	61 05       	cpc	r22, r1
    2a6a:	08 94       	sec
    2a6c:	08 95       	ret

00002a6e <__fp_zero>:
    2a6e:	e8 94       	clt

00002a70 <__fp_szero>:
    2a70:	bb 27       	eor	r27, r27
    2a72:	66 27       	eor	r22, r22
    2a74:	77 27       	eor	r23, r23
    2a76:	cb 01       	movw	r24, r22
    2a78:	97 f9       	bld	r25, 7
    2a7a:	08 95       	ret

00002a7c <usart_getchar>:
    2a7c:	cf 93       	push	r28
    2a7e:	df 93       	push	r29
    2a80:	1f 92       	push	r1
    2a82:	cd b7       	in	r28, 0x3d	; 61
    2a84:	de b7       	in	r29, 0x3e	; 62
    2a86:	be 01       	movw	r22, r28
    2a88:	6f 5f       	subi	r22, 0xFF	; 255
    2a8a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a8c:	80 91 5e 08 	lds	r24, 0x085E	; 0x80085e <_com_serial_instance>
    2a90:	90 91 5f 08 	lds	r25, 0x085F	; 0x80085f <_com_serial_instance+0x1>
    2a94:	4e d1       	rcall	.+668    	; 0x2d32 <serial_get_byte>
    2a96:	81 11       	cpse	r24, r1
    2a98:	f6 cf       	rjmp	.-20     	; 0x2a86 <usart_getchar+0xa>
    2a9a:	89 81       	ldd	r24, Y+1	; 0x01
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	0f 90       	pop	r0
    2aa0:	df 91       	pop	r29
    2aa2:	cf 91       	pop	r28
    2aa4:	08 95       	ret

00002aa6 <usart_putchar>:
    2aa6:	68 2f       	mov	r22, r24
    2aa8:	80 91 5e 08 	lds	r24, 0x085E	; 0x80085e <_com_serial_instance>
    2aac:	90 91 5f 08 	lds	r25, 0x085F	; 0x80085f <_com_serial_instance+0x1>
    2ab0:	cb d0       	rcall	.+406    	; 0x2c48 <serial_send_byte>
    2ab2:	80 e0       	ldi	r24, 0x00	; 0
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	08 95       	ret

00002ab8 <stdioCreate>:
    2ab8:	8f 92       	push	r8
    2aba:	9f 92       	push	r9
    2abc:	af 92       	push	r10
    2abe:	cf 92       	push	r12
    2ac0:	ef 92       	push	r14
    2ac2:	0f 93       	push	r16
    2ac4:	81 2c       	mov	r8, r1
    2ac6:	91 2c       	mov	r9, r1
    2ac8:	68 94       	set
    2aca:	aa 24       	eor	r10, r10
    2acc:	a7 f8       	bld	r10, 7
    2ace:	68 94       	set
    2ad0:	cc 24       	eor	r12, r12
    2ad2:	c7 f8       	bld	r12, 7
    2ad4:	e1 2c       	mov	r14, r1
    2ad6:	00 e0       	ldi	r16, 0x00	; 0
    2ad8:	23 e0       	ldi	r18, 0x03	; 3
    2ada:	40 e0       	ldi	r20, 0x00	; 0
    2adc:	51 ee       	ldi	r21, 0xE1	; 225
    2ade:	60 e0       	ldi	r22, 0x00	; 0
    2ae0:	70 e0       	ldi	r23, 0x00	; 0
    2ae2:	13 d0       	rcall	.+38     	; 0x2b0a <serial_new_instance>
    2ae4:	90 93 5f 08 	sts	0x085F, r25	; 0x80085f <_com_serial_instance+0x1>
    2ae8:	80 93 5e 08 	sts	0x085E, r24	; 0x80085e <_com_serial_instance>
    2aec:	ee e4       	ldi	r30, 0x4E	; 78
    2aee:	fa e0       	ldi	r31, 0x0A	; 10
    2af0:	86 e0       	ldi	r24, 0x06	; 6
    2af2:	92 e0       	ldi	r25, 0x02	; 2
    2af4:	91 83       	std	Z+1, r25	; 0x01
    2af6:	80 83       	st	Z, r24
    2af8:	93 83       	std	Z+3, r25	; 0x03
    2afa:	82 83       	std	Z+2, r24	; 0x02
    2afc:	0f 91       	pop	r16
    2afe:	ef 90       	pop	r14
    2b00:	cf 90       	pop	r12
    2b02:	af 90       	pop	r10
    2b04:	9f 90       	pop	r9
    2b06:	8f 90       	pop	r8
    2b08:	08 95       	ret

00002b0a <serial_new_instance>:
    2b0a:	2f 92       	push	r2
    2b0c:	3f 92       	push	r3
    2b0e:	4f 92       	push	r4
    2b10:	5f 92       	push	r5
    2b12:	6f 92       	push	r6
    2b14:	7f 92       	push	r7
    2b16:	8f 92       	push	r8
    2b18:	9f 92       	push	r9
    2b1a:	af 92       	push	r10
    2b1c:	cf 92       	push	r12
    2b1e:	ef 92       	push	r14
    2b20:	ff 92       	push	r15
    2b22:	0f 93       	push	r16
    2b24:	1f 93       	push	r17
    2b26:	cf 93       	push	r28
    2b28:	df 93       	push	r29
    2b2a:	cd b7       	in	r28, 0x3d	; 61
    2b2c:	de b7       	in	r29, 0x3e	; 62
    2b2e:	f8 2e       	mov	r15, r24
    2b30:	2a 01       	movw	r4, r20
    2b32:	3b 01       	movw	r6, r22
    2b34:	88 e0       	ldi	r24, 0x08	; 8
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	0e 94 17 25 	call	0x4a2e	; 0x4a2e <malloc>
    2b3c:	8c 01       	movw	r16, r24
    2b3e:	8f 2d       	mov	r24, r15
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	88 0f       	add	r24, r24
    2b44:	99 1f       	adc	r25, r25
    2b46:	fc 01       	movw	r30, r24
    2b48:	e0 5a       	subi	r30, 0xA0	; 160
    2b4a:	f7 4f       	sbci	r31, 0xF7	; 247
    2b4c:	11 83       	std	Z+1, r17	; 0x01
    2b4e:	00 83       	st	Z, r16
    2b50:	fc 01       	movw	r30, r24
    2b52:	ec 5e       	subi	r30, 0xEC	; 236
    2b54:	fd 4f       	sbci	r31, 0xFD	; 253
    2b56:	80 81       	ld	r24, Z
    2b58:	91 81       	ldd	r25, Z+1	; 0x01
    2b5a:	d8 01       	movw	r26, r16
    2b5c:	8d 93       	st	X+, r24
    2b5e:	9c 93       	st	X, r25
    2b60:	6c 2d       	mov	r22, r12
    2b62:	70 e0       	ldi	r23, 0x00	; 0
    2b64:	84 e0       	ldi	r24, 0x04	; 4
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	0e 94 fd 24 	call	0x49fa	; 0x49fa <calloc>
    2b6c:	1c 01       	movw	r2, r24
    2b6e:	61 e0       	ldi	r22, 0x01	; 1
    2b70:	70 e0       	ldi	r23, 0x00	; 0
    2b72:	86 e0       	ldi	r24, 0x06	; 6
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	0e 94 fd 24 	call	0x49fa	; 0x49fa <calloc>
    2b7a:	7c 01       	movw	r14, r24
    2b7c:	4c 2d       	mov	r20, r12
    2b7e:	b1 01       	movw	r22, r2
    2b80:	4c d3       	rcall	.+1688   	; 0x321a <fifo_init>
    2b82:	f8 01       	movw	r30, r16
    2b84:	f5 82       	std	Z+5, r15	; 0x05
    2b86:	e4 82       	std	Z+4, r14	; 0x04
    2b88:	6a 2d       	mov	r22, r10
    2b8a:	70 e0       	ldi	r23, 0x00	; 0
    2b8c:	84 e0       	ldi	r24, 0x04	; 4
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	0e 94 fd 24 	call	0x49fa	; 0x49fa <calloc>
    2b94:	1c 01       	movw	r2, r24
    2b96:	61 e0       	ldi	r22, 0x01	; 1
    2b98:	70 e0       	ldi	r23, 0x00	; 0
    2b9a:	86 e0       	ldi	r24, 0x06	; 6
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	0e 94 fd 24 	call	0x49fa	; 0x49fa <calloc>
    2ba2:	7c 01       	movw	r14, r24
    2ba4:	4a 2d       	mov	r20, r10
    2ba6:	b1 01       	movw	r22, r2
    2ba8:	38 d3       	rcall	.+1648   	; 0x321a <fifo_init>
    2baa:	d8 01       	movw	r26, r16
    2bac:	13 96       	adiw	r26, 0x03	; 3
    2bae:	fc 92       	st	X, r15
    2bb0:	ee 92       	st	-X, r14
    2bb2:	12 97       	sbiw	r26, 0x02	; 2
    2bb4:	17 96       	adiw	r26, 0x07	; 7
    2bb6:	9c 92       	st	X, r9
    2bb8:	8e 92       	st	-X, r8
    2bba:	16 97       	sbiw	r26, 0x06	; 6
    2bbc:	ff b6       	in	r15, 0x3f	; 63
    2bbe:	f8 94       	cli
    2bc0:	ed 91       	ld	r30, X+
    2bc2:	fc 91       	ld	r31, X
    2bc4:	11 97       	sbiw	r26, 0x01	; 1
    2bc6:	36 97       	sbiw	r30, 0x06	; 6
    2bc8:	80 81       	ld	r24, Z
    2bca:	82 60       	ori	r24, 0x02	; 2
    2bcc:	80 83       	st	Z, r24
    2bce:	8d 90       	ld	r8, X+
    2bd0:	9c 90       	ld	r9, X
    2bd2:	c3 01       	movw	r24, r6
    2bd4:	b2 01       	movw	r22, r4
    2bd6:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <__floatunsisf>
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	40 e0       	ldi	r20, 0x00	; 0
    2be0:	51 e4       	ldi	r21, 0x41	; 65
    2be2:	0e 94 49 24 	call	0x4892	; 0x4892 <__mulsf3>
    2be6:	9b 01       	movw	r18, r22
    2be8:	ac 01       	movw	r20, r24
    2bea:	60 e0       	ldi	r22, 0x00	; 0
    2bec:	74 e2       	ldi	r23, 0x24	; 36
    2bee:	84 e7       	ldi	r24, 0x74	; 116
    2bf0:	9b e4       	ldi	r25, 0x4B	; 75
    2bf2:	0e 94 75 23 	call	0x46ea	; 0x46ea <__divsf3>
    2bf6:	20 e0       	ldi	r18, 0x00	; 0
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	40 e8       	ldi	r20, 0x80	; 128
    2bfc:	5f e3       	ldi	r21, 0x3F	; 63
    2bfe:	0e 94 0e 23 	call	0x461c	; 0x461c <__subsf3>
    2c02:	e7 de       	rcall	.-562    	; 0x29d2 <__fixunssfsi>
    2c04:	f4 01       	movw	r30, r8
    2c06:	32 97       	sbiw	r30, 0x02	; 2
    2c08:	60 83       	st	Z, r22
    2c0a:	d8 01       	movw	r26, r16
    2c0c:	ed 91       	ld	r30, X+
    2c0e:	fc 91       	ld	r31, X
    2c10:	11 97       	sbiw	r26, 0x01	; 1
    2c12:	35 97       	sbiw	r30, 0x05	; 5
    2c14:	88 e9       	ldi	r24, 0x98	; 152
    2c16:	80 83       	st	Z, r24
    2c18:	ed 91       	ld	r30, X+
    2c1a:	fc 91       	ld	r31, X
    2c1c:	34 97       	sbiw	r30, 0x04	; 4
    2c1e:	86 e0       	ldi	r24, 0x06	; 6
    2c20:	80 83       	st	Z, r24
    2c22:	ff be       	out	0x3f, r15	; 63
    2c24:	c8 01       	movw	r24, r16
    2c26:	df 91       	pop	r29
    2c28:	cf 91       	pop	r28
    2c2a:	1f 91       	pop	r17
    2c2c:	0f 91       	pop	r16
    2c2e:	ff 90       	pop	r15
    2c30:	ef 90       	pop	r14
    2c32:	cf 90       	pop	r12
    2c34:	af 90       	pop	r10
    2c36:	9f 90       	pop	r9
    2c38:	8f 90       	pop	r8
    2c3a:	7f 90       	pop	r7
    2c3c:	6f 90       	pop	r6
    2c3e:	5f 90       	pop	r5
    2c40:	4f 90       	pop	r4
    2c42:	3f 90       	pop	r3
    2c44:	2f 90       	pop	r2
    2c46:	08 95       	ret

00002c48 <serial_send_byte>:
    2c48:	cf 93       	push	r28
    2c4a:	df 93       	push	r29
    2c4c:	ec 01       	movw	r28, r24
    2c4e:	ea 81       	ldd	r30, Y+2	; 0x02
    2c50:	fb 81       	ldd	r31, Y+3	; 0x03
    2c52:	93 81       	ldd	r25, Z+3	; 0x03
    2c54:	82 81       	ldd	r24, Z+2	; 0x02
    2c56:	25 81       	ldd	r18, Z+5	; 0x05
    2c58:	98 1b       	sub	r25, r24
    2c5a:	92 23       	and	r25, r18
    2c5c:	84 81       	ldd	r24, Z+4	; 0x04
    2c5e:	98 17       	cp	r25, r24
    2c60:	a1 f0       	breq	.+40     	; 0x2c8a <serial_send_byte+0x42>
    2c62:	93 81       	ldd	r25, Z+3	; 0x03
    2c64:	26 95       	lsr	r18
    2c66:	29 23       	and	r18, r25
    2c68:	a0 81       	ld	r26, Z
    2c6a:	b1 81       	ldd	r27, Z+1	; 0x01
    2c6c:	a2 0f       	add	r26, r18
    2c6e:	b1 1d       	adc	r27, r1
    2c70:	6c 93       	st	X, r22
    2c72:	9f 5f       	subi	r25, 0xFF	; 255
    2c74:	25 81       	ldd	r18, Z+5	; 0x05
    2c76:	92 23       	and	r25, r18
    2c78:	93 83       	std	Z+3, r25	; 0x03
    2c7a:	e8 81       	ld	r30, Y
    2c7c:	f9 81       	ldd	r31, Y+1	; 0x01
    2c7e:	35 97       	sbiw	r30, 0x05	; 5
    2c80:	80 81       	ld	r24, Z
    2c82:	80 62       	ori	r24, 0x20	; 32
    2c84:	80 83       	st	Z, r24
    2c86:	80 e0       	ldi	r24, 0x00	; 0
    2c88:	01 c0       	rjmp	.+2      	; 0x2c8c <serial_send_byte+0x44>
    2c8a:	82 e0       	ldi	r24, 0x02	; 2
    2c8c:	df 91       	pop	r29
    2c8e:	cf 91       	pop	r28
    2c90:	08 95       	ret

00002c92 <serial_send_bytes>:
    2c92:	ef 92       	push	r14
    2c94:	ff 92       	push	r15
    2c96:	0f 93       	push	r16
    2c98:	1f 93       	push	r17
    2c9a:	cf 93       	push	r28
    2c9c:	df 93       	push	r29
    2c9e:	7c 01       	movw	r14, r24
    2ca0:	dc 01       	movw	r26, r24
    2ca2:	12 96       	adiw	r26, 0x02	; 2
    2ca4:	ed 91       	ld	r30, X+
    2ca6:	fc 91       	ld	r31, X
    2ca8:	13 97       	sbiw	r26, 0x03	; 3
    2caa:	93 81       	ldd	r25, Z+3	; 0x03
    2cac:	82 81       	ldd	r24, Z+2	; 0x02
    2cae:	98 1b       	sub	r25, r24
    2cb0:	85 81       	ldd	r24, Z+5	; 0x05
    2cb2:	98 23       	and	r25, r24
    2cb4:	84 81       	ldd	r24, Z+4	; 0x04
    2cb6:	89 1b       	sub	r24, r25
    2cb8:	86 17       	cp	r24, r22
    2cba:	98 f1       	brcs	.+102    	; 0x2d22 <serial_send_bytes+0x90>
    2cbc:	66 23       	and	r22, r22
    2cbe:	41 f1       	breq	.+80     	; 0x2d10 <serial_send_bytes+0x7e>
    2cc0:	84 2f       	mov	r24, r20
    2cc2:	95 2f       	mov	r25, r21
    2cc4:	dc 01       	movw	r26, r24
    2cc6:	61 50       	subi	r22, 0x01	; 1
    2cc8:	46 2f       	mov	r20, r22
    2cca:	50 e0       	ldi	r21, 0x00	; 0
    2ccc:	4f 5f       	subi	r20, 0xFF	; 255
    2cce:	5f 4f       	sbci	r21, 0xFF	; 255
    2cd0:	48 0f       	add	r20, r24
    2cd2:	59 1f       	adc	r21, r25
    2cd4:	e7 01       	movw	r28, r14
    2cd6:	ea 81       	ldd	r30, Y+2	; 0x02
    2cd8:	fb 81       	ldd	r31, Y+3	; 0x03
    2cda:	93 81       	ldd	r25, Z+3	; 0x03
    2cdc:	82 81       	ldd	r24, Z+2	; 0x02
    2cde:	25 81       	ldd	r18, Z+5	; 0x05
    2ce0:	98 1b       	sub	r25, r24
    2ce2:	92 23       	and	r25, r18
    2ce4:	84 81       	ldd	r24, Z+4	; 0x04
    2ce6:	98 17       	cp	r25, r24
    2ce8:	79 f0       	breq	.+30     	; 0x2d08 <serial_send_bytes+0x76>
    2cea:	8c 91       	ld	r24, X
    2cec:	93 81       	ldd	r25, Z+3	; 0x03
    2cee:	26 95       	lsr	r18
    2cf0:	29 23       	and	r18, r25
    2cf2:	60 81       	ld	r22, Z
    2cf4:	71 81       	ldd	r23, Z+1	; 0x01
    2cf6:	8b 01       	movw	r16, r22
    2cf8:	02 0f       	add	r16, r18
    2cfa:	11 1d       	adc	r17, r1
    2cfc:	e8 01       	movw	r28, r16
    2cfe:	88 83       	st	Y, r24
    2d00:	9f 5f       	subi	r25, 0xFF	; 255
    2d02:	85 81       	ldd	r24, Z+5	; 0x05
    2d04:	98 23       	and	r25, r24
    2d06:	93 83       	std	Z+3, r25	; 0x03
    2d08:	11 96       	adiw	r26, 0x01	; 1
    2d0a:	a4 17       	cp	r26, r20
    2d0c:	b5 07       	cpc	r27, r21
    2d0e:	11 f7       	brne	.-60     	; 0x2cd4 <serial_send_bytes+0x42>
    2d10:	d7 01       	movw	r26, r14
    2d12:	ed 91       	ld	r30, X+
    2d14:	fc 91       	ld	r31, X
    2d16:	35 97       	sbiw	r30, 0x05	; 5
    2d18:	80 81       	ld	r24, Z
    2d1a:	80 62       	ori	r24, 0x20	; 32
    2d1c:	80 83       	st	Z, r24
    2d1e:	80 e0       	ldi	r24, 0x00	; 0
    2d20:	01 c0       	rjmp	.+2      	; 0x2d24 <serial_send_bytes+0x92>
    2d22:	82 e0       	ldi	r24, 0x02	; 2
    2d24:	df 91       	pop	r29
    2d26:	cf 91       	pop	r28
    2d28:	1f 91       	pop	r17
    2d2a:	0f 91       	pop	r16
    2d2c:	ff 90       	pop	r15
    2d2e:	ef 90       	pop	r14
    2d30:	08 95       	ret

00002d32 <serial_get_byte>:
    2d32:	dc 01       	movw	r26, r24
    2d34:	14 96       	adiw	r26, 0x04	; 4
    2d36:	ed 91       	ld	r30, X+
    2d38:	fc 91       	ld	r31, X
    2d3a:	15 97       	sbiw	r26, 0x05	; 5
    2d3c:	93 81       	ldd	r25, Z+3	; 0x03
    2d3e:	82 81       	ldd	r24, Z+2	; 0x02
    2d40:	98 17       	cp	r25, r24
    2d42:	89 f0       	breq	.+34     	; 0x2d66 <serial_get_byte+0x34>
    2d44:	92 81       	ldd	r25, Z+2	; 0x02
    2d46:	85 81       	ldd	r24, Z+5	; 0x05
    2d48:	86 95       	lsr	r24
    2d4a:	89 23       	and	r24, r25
    2d4c:	a0 81       	ld	r26, Z
    2d4e:	b1 81       	ldd	r27, Z+1	; 0x01
    2d50:	a8 0f       	add	r26, r24
    2d52:	b1 1d       	adc	r27, r1
    2d54:	8c 91       	ld	r24, X
    2d56:	db 01       	movw	r26, r22
    2d58:	8c 93       	st	X, r24
    2d5a:	9f 5f       	subi	r25, 0xFF	; 255
    2d5c:	85 81       	ldd	r24, Z+5	; 0x05
    2d5e:	98 23       	and	r25, r24
    2d60:	92 83       	std	Z+2, r25	; 0x02
    2d62:	80 e0       	ldi	r24, 0x00	; 0
    2d64:	08 95       	ret
    2d66:	83 e0       	ldi	r24, 0x03	; 3
    2d68:	08 95       	ret

00002d6a <__vector_25>:
    2d6a:	1f 92       	push	r1
    2d6c:	0f 92       	push	r0
    2d6e:	0f b6       	in	r0, 0x3f	; 63
    2d70:	0f 92       	push	r0
    2d72:	11 24       	eor	r1, r1
    2d74:	0b b6       	in	r0, 0x3b	; 59
    2d76:	0f 92       	push	r0
    2d78:	2f 93       	push	r18
    2d7a:	3f 93       	push	r19
    2d7c:	4f 93       	push	r20
    2d7e:	5f 93       	push	r21
    2d80:	6f 93       	push	r22
    2d82:	7f 93       	push	r23
    2d84:	8f 93       	push	r24
    2d86:	9f 93       	push	r25
    2d88:	af 93       	push	r26
    2d8a:	bf 93       	push	r27
    2d8c:	cf 93       	push	r28
    2d8e:	df 93       	push	r29
    2d90:	ef 93       	push	r30
    2d92:	ff 93       	push	r31
    2d94:	a0 91 60 08 	lds	r26, 0x0860	; 0x800860 <_ser_handle>
    2d98:	b0 91 61 08 	lds	r27, 0x0861	; 0x800861 <_ser_handle+0x1>
    2d9c:	10 97       	sbiw	r26, 0x00	; 0
    2d9e:	11 f1       	breq	.+68     	; 0x2de4 <__vector_25+0x7a>
    2da0:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    2da4:	14 96       	adiw	r26, 0x04	; 4
    2da6:	ed 91       	ld	r30, X+
    2da8:	fc 91       	ld	r31, X
    2daa:	15 97       	sbiw	r26, 0x05	; 5
    2dac:	93 81       	ldd	r25, Z+3	; 0x03
    2dae:	82 81       	ldd	r24, Z+2	; 0x02
    2db0:	25 81       	ldd	r18, Z+5	; 0x05
    2db2:	98 1b       	sub	r25, r24
    2db4:	92 23       	and	r25, r18
    2db6:	84 81       	ldd	r24, Z+4	; 0x04
    2db8:	98 17       	cp	r25, r24
    2dba:	61 f0       	breq	.+24     	; 0x2dd4 <__vector_25+0x6a>
    2dbc:	83 81       	ldd	r24, Z+3	; 0x03
    2dbe:	26 95       	lsr	r18
    2dc0:	28 23       	and	r18, r24
    2dc2:	c0 81       	ld	r28, Z
    2dc4:	d1 81       	ldd	r29, Z+1	; 0x01
    2dc6:	c2 0f       	add	r28, r18
    2dc8:	d1 1d       	adc	r29, r1
    2dca:	68 83       	st	Y, r22
    2dcc:	8f 5f       	subi	r24, 0xFF	; 255
    2dce:	95 81       	ldd	r25, Z+5	; 0x05
    2dd0:	89 23       	and	r24, r25
    2dd2:	83 83       	std	Z+3, r24	; 0x03
    2dd4:	16 96       	adiw	r26, 0x06	; 6
    2dd6:	ed 91       	ld	r30, X+
    2dd8:	fc 91       	ld	r31, X
    2dda:	17 97       	sbiw	r26, 0x07	; 7
    2ddc:	30 97       	sbiw	r30, 0x00	; 0
    2dde:	11 f0       	breq	.+4      	; 0x2de4 <__vector_25+0x7a>
    2de0:	cd 01       	movw	r24, r26
    2de2:	19 95       	eicall
    2de4:	ff 91       	pop	r31
    2de6:	ef 91       	pop	r30
    2de8:	df 91       	pop	r29
    2dea:	cf 91       	pop	r28
    2dec:	bf 91       	pop	r27
    2dee:	af 91       	pop	r26
    2df0:	9f 91       	pop	r25
    2df2:	8f 91       	pop	r24
    2df4:	7f 91       	pop	r23
    2df6:	6f 91       	pop	r22
    2df8:	5f 91       	pop	r21
    2dfa:	4f 91       	pop	r20
    2dfc:	3f 91       	pop	r19
    2dfe:	2f 91       	pop	r18
    2e00:	0f 90       	pop	r0
    2e02:	0b be       	out	0x3b, r0	; 59
    2e04:	0f 90       	pop	r0
    2e06:	0f be       	out	0x3f, r0	; 63
    2e08:	0f 90       	pop	r0
    2e0a:	1f 90       	pop	r1
    2e0c:	18 95       	reti

00002e0e <__vector_26>:
    2e0e:	1f 92       	push	r1
    2e10:	0f 92       	push	r0
    2e12:	0f b6       	in	r0, 0x3f	; 63
    2e14:	0f 92       	push	r0
    2e16:	11 24       	eor	r1, r1
    2e18:	0b b6       	in	r0, 0x3b	; 59
    2e1a:	0f 92       	push	r0
    2e1c:	2f 93       	push	r18
    2e1e:	8f 93       	push	r24
    2e20:	9f 93       	push	r25
    2e22:	af 93       	push	r26
    2e24:	bf 93       	push	r27
    2e26:	ef 93       	push	r30
    2e28:	ff 93       	push	r31
    2e2a:	e0 91 60 08 	lds	r30, 0x0860	; 0x800860 <_ser_handle>
    2e2e:	f0 91 61 08 	lds	r31, 0x0861	; 0x800861 <_ser_handle+0x1>
    2e32:	30 97       	sbiw	r30, 0x00	; 0
    2e34:	b9 f0       	breq	.+46     	; 0x2e64 <__vector_26+0x56>
    2e36:	02 80       	ldd	r0, Z+2	; 0x02
    2e38:	f3 81       	ldd	r31, Z+3	; 0x03
    2e3a:	e0 2d       	mov	r30, r0
    2e3c:	93 81       	ldd	r25, Z+3	; 0x03
    2e3e:	82 81       	ldd	r24, Z+2	; 0x02
    2e40:	98 17       	cp	r25, r24
    2e42:	b1 f0       	breq	.+44     	; 0x2e70 <__vector_26+0x62>
    2e44:	92 81       	ldd	r25, Z+2	; 0x02
    2e46:	85 81       	ldd	r24, Z+5	; 0x05
    2e48:	28 2f       	mov	r18, r24
    2e4a:	26 95       	lsr	r18
    2e4c:	29 23       	and	r18, r25
    2e4e:	a0 81       	ld	r26, Z
    2e50:	b1 81       	ldd	r27, Z+1	; 0x01
    2e52:	a2 0f       	add	r26, r18
    2e54:	b1 1d       	adc	r27, r1
    2e56:	2c 91       	ld	r18, X
    2e58:	9f 5f       	subi	r25, 0xFF	; 255
    2e5a:	89 23       	and	r24, r25
    2e5c:	82 83       	std	Z+2, r24	; 0x02
    2e5e:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    2e62:	0b c0       	rjmp	.+22     	; 0x2e7a <__vector_26+0x6c>
    2e64:	e1 ec       	ldi	r30, 0xC1	; 193
    2e66:	f0 e0       	ldi	r31, 0x00	; 0
    2e68:	80 81       	ld	r24, Z
    2e6a:	8f 7d       	andi	r24, 0xDF	; 223
    2e6c:	80 83       	st	Z, r24
    2e6e:	05 c0       	rjmp	.+10     	; 0x2e7a <__vector_26+0x6c>
    2e70:	e1 ec       	ldi	r30, 0xC1	; 193
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	80 81       	ld	r24, Z
    2e76:	8f 7d       	andi	r24, 0xDF	; 223
    2e78:	80 83       	st	Z, r24
    2e7a:	ff 91       	pop	r31
    2e7c:	ef 91       	pop	r30
    2e7e:	bf 91       	pop	r27
    2e80:	af 91       	pop	r26
    2e82:	9f 91       	pop	r25
    2e84:	8f 91       	pop	r24
    2e86:	2f 91       	pop	r18
    2e88:	0f 90       	pop	r0
    2e8a:	0b be       	out	0x3b, r0	; 59
    2e8c:	0f 90       	pop	r0
    2e8e:	0f be       	out	0x3f, r0	; 63
    2e90:	0f 90       	pop	r0
    2e92:	1f 90       	pop	r1
    2e94:	18 95       	reti

00002e96 <__vector_36>:
    2e96:	1f 92       	push	r1
    2e98:	0f 92       	push	r0
    2e9a:	0f b6       	in	r0, 0x3f	; 63
    2e9c:	0f 92       	push	r0
    2e9e:	11 24       	eor	r1, r1
    2ea0:	0b b6       	in	r0, 0x3b	; 59
    2ea2:	0f 92       	push	r0
    2ea4:	2f 93       	push	r18
    2ea6:	3f 93       	push	r19
    2ea8:	4f 93       	push	r20
    2eaa:	5f 93       	push	r21
    2eac:	6f 93       	push	r22
    2eae:	7f 93       	push	r23
    2eb0:	8f 93       	push	r24
    2eb2:	9f 93       	push	r25
    2eb4:	af 93       	push	r26
    2eb6:	bf 93       	push	r27
    2eb8:	cf 93       	push	r28
    2eba:	df 93       	push	r29
    2ebc:	ef 93       	push	r30
    2ebe:	ff 93       	push	r31
    2ec0:	a0 91 62 08 	lds	r26, 0x0862	; 0x800862 <_ser_handle+0x2>
    2ec4:	b0 91 63 08 	lds	r27, 0x0863	; 0x800863 <_ser_handle+0x3>
    2ec8:	10 97       	sbiw	r26, 0x00	; 0
    2eca:	11 f1       	breq	.+68     	; 0x2f10 <__vector_36+0x7a>
    2ecc:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    2ed0:	14 96       	adiw	r26, 0x04	; 4
    2ed2:	ed 91       	ld	r30, X+
    2ed4:	fc 91       	ld	r31, X
    2ed6:	15 97       	sbiw	r26, 0x05	; 5
    2ed8:	93 81       	ldd	r25, Z+3	; 0x03
    2eda:	82 81       	ldd	r24, Z+2	; 0x02
    2edc:	25 81       	ldd	r18, Z+5	; 0x05
    2ede:	98 1b       	sub	r25, r24
    2ee0:	92 23       	and	r25, r18
    2ee2:	84 81       	ldd	r24, Z+4	; 0x04
    2ee4:	98 17       	cp	r25, r24
    2ee6:	61 f0       	breq	.+24     	; 0x2f00 <__vector_36+0x6a>
    2ee8:	83 81       	ldd	r24, Z+3	; 0x03
    2eea:	26 95       	lsr	r18
    2eec:	28 23       	and	r18, r24
    2eee:	c0 81       	ld	r28, Z
    2ef0:	d1 81       	ldd	r29, Z+1	; 0x01
    2ef2:	c2 0f       	add	r28, r18
    2ef4:	d1 1d       	adc	r29, r1
    2ef6:	68 83       	st	Y, r22
    2ef8:	8f 5f       	subi	r24, 0xFF	; 255
    2efa:	95 81       	ldd	r25, Z+5	; 0x05
    2efc:	89 23       	and	r24, r25
    2efe:	83 83       	std	Z+3, r24	; 0x03
    2f00:	16 96       	adiw	r26, 0x06	; 6
    2f02:	ed 91       	ld	r30, X+
    2f04:	fc 91       	ld	r31, X
    2f06:	17 97       	sbiw	r26, 0x07	; 7
    2f08:	30 97       	sbiw	r30, 0x00	; 0
    2f0a:	11 f0       	breq	.+4      	; 0x2f10 <__vector_36+0x7a>
    2f0c:	cd 01       	movw	r24, r26
    2f0e:	19 95       	eicall
    2f10:	ff 91       	pop	r31
    2f12:	ef 91       	pop	r30
    2f14:	df 91       	pop	r29
    2f16:	cf 91       	pop	r28
    2f18:	bf 91       	pop	r27
    2f1a:	af 91       	pop	r26
    2f1c:	9f 91       	pop	r25
    2f1e:	8f 91       	pop	r24
    2f20:	7f 91       	pop	r23
    2f22:	6f 91       	pop	r22
    2f24:	5f 91       	pop	r21
    2f26:	4f 91       	pop	r20
    2f28:	3f 91       	pop	r19
    2f2a:	2f 91       	pop	r18
    2f2c:	0f 90       	pop	r0
    2f2e:	0b be       	out	0x3b, r0	; 59
    2f30:	0f 90       	pop	r0
    2f32:	0f be       	out	0x3f, r0	; 63
    2f34:	0f 90       	pop	r0
    2f36:	1f 90       	pop	r1
    2f38:	18 95       	reti

00002f3a <__vector_37>:
    2f3a:	1f 92       	push	r1
    2f3c:	0f 92       	push	r0
    2f3e:	0f b6       	in	r0, 0x3f	; 63
    2f40:	0f 92       	push	r0
    2f42:	11 24       	eor	r1, r1
    2f44:	0b b6       	in	r0, 0x3b	; 59
    2f46:	0f 92       	push	r0
    2f48:	2f 93       	push	r18
    2f4a:	8f 93       	push	r24
    2f4c:	9f 93       	push	r25
    2f4e:	af 93       	push	r26
    2f50:	bf 93       	push	r27
    2f52:	ef 93       	push	r30
    2f54:	ff 93       	push	r31
    2f56:	e0 91 62 08 	lds	r30, 0x0862	; 0x800862 <_ser_handle+0x2>
    2f5a:	f0 91 63 08 	lds	r31, 0x0863	; 0x800863 <_ser_handle+0x3>
    2f5e:	30 97       	sbiw	r30, 0x00	; 0
    2f60:	b9 f0       	breq	.+46     	; 0x2f90 <__vector_37+0x56>
    2f62:	02 80       	ldd	r0, Z+2	; 0x02
    2f64:	f3 81       	ldd	r31, Z+3	; 0x03
    2f66:	e0 2d       	mov	r30, r0
    2f68:	93 81       	ldd	r25, Z+3	; 0x03
    2f6a:	82 81       	ldd	r24, Z+2	; 0x02
    2f6c:	98 17       	cp	r25, r24
    2f6e:	b1 f0       	breq	.+44     	; 0x2f9c <__vector_37+0x62>
    2f70:	92 81       	ldd	r25, Z+2	; 0x02
    2f72:	85 81       	ldd	r24, Z+5	; 0x05
    2f74:	28 2f       	mov	r18, r24
    2f76:	26 95       	lsr	r18
    2f78:	29 23       	and	r18, r25
    2f7a:	a0 81       	ld	r26, Z
    2f7c:	b1 81       	ldd	r27, Z+1	; 0x01
    2f7e:	a2 0f       	add	r26, r18
    2f80:	b1 1d       	adc	r27, r1
    2f82:	2c 91       	ld	r18, X
    2f84:	9f 5f       	subi	r25, 0xFF	; 255
    2f86:	89 23       	and	r24, r25
    2f88:	82 83       	std	Z+2, r24	; 0x02
    2f8a:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    2f8e:	0b c0       	rjmp	.+22     	; 0x2fa6 <__vector_37+0x6c>
    2f90:	e9 ec       	ldi	r30, 0xC9	; 201
    2f92:	f0 e0       	ldi	r31, 0x00	; 0
    2f94:	80 81       	ld	r24, Z
    2f96:	8f 7d       	andi	r24, 0xDF	; 223
    2f98:	80 83       	st	Z, r24
    2f9a:	05 c0       	rjmp	.+10     	; 0x2fa6 <__vector_37+0x6c>
    2f9c:	e9 ec       	ldi	r30, 0xC9	; 201
    2f9e:	f0 e0       	ldi	r31, 0x00	; 0
    2fa0:	80 81       	ld	r24, Z
    2fa2:	8f 7d       	andi	r24, 0xDF	; 223
    2fa4:	80 83       	st	Z, r24
    2fa6:	ff 91       	pop	r31
    2fa8:	ef 91       	pop	r30
    2faa:	bf 91       	pop	r27
    2fac:	af 91       	pop	r26
    2fae:	9f 91       	pop	r25
    2fb0:	8f 91       	pop	r24
    2fb2:	2f 91       	pop	r18
    2fb4:	0f 90       	pop	r0
    2fb6:	0b be       	out	0x3b, r0	; 59
    2fb8:	0f 90       	pop	r0
    2fba:	0f be       	out	0x3f, r0	; 63
    2fbc:	0f 90       	pop	r0
    2fbe:	1f 90       	pop	r1
    2fc0:	18 95       	reti

00002fc2 <__vector_51>:
    2fc2:	1f 92       	push	r1
    2fc4:	0f 92       	push	r0
    2fc6:	0f b6       	in	r0, 0x3f	; 63
    2fc8:	0f 92       	push	r0
    2fca:	11 24       	eor	r1, r1
    2fcc:	0b b6       	in	r0, 0x3b	; 59
    2fce:	0f 92       	push	r0
    2fd0:	2f 93       	push	r18
    2fd2:	3f 93       	push	r19
    2fd4:	4f 93       	push	r20
    2fd6:	5f 93       	push	r21
    2fd8:	6f 93       	push	r22
    2fda:	7f 93       	push	r23
    2fdc:	8f 93       	push	r24
    2fde:	9f 93       	push	r25
    2fe0:	af 93       	push	r26
    2fe2:	bf 93       	push	r27
    2fe4:	cf 93       	push	r28
    2fe6:	df 93       	push	r29
    2fe8:	ef 93       	push	r30
    2fea:	ff 93       	push	r31
    2fec:	a0 91 64 08 	lds	r26, 0x0864	; 0x800864 <_ser_handle+0x4>
    2ff0:	b0 91 65 08 	lds	r27, 0x0865	; 0x800865 <_ser_handle+0x5>
    2ff4:	10 97       	sbiw	r26, 0x00	; 0
    2ff6:	11 f1       	breq	.+68     	; 0x303c <__vector_51+0x7a>
    2ff8:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    2ffc:	14 96       	adiw	r26, 0x04	; 4
    2ffe:	ed 91       	ld	r30, X+
    3000:	fc 91       	ld	r31, X
    3002:	15 97       	sbiw	r26, 0x05	; 5
    3004:	93 81       	ldd	r25, Z+3	; 0x03
    3006:	82 81       	ldd	r24, Z+2	; 0x02
    3008:	25 81       	ldd	r18, Z+5	; 0x05
    300a:	98 1b       	sub	r25, r24
    300c:	92 23       	and	r25, r18
    300e:	84 81       	ldd	r24, Z+4	; 0x04
    3010:	98 17       	cp	r25, r24
    3012:	61 f0       	breq	.+24     	; 0x302c <__vector_51+0x6a>
    3014:	83 81       	ldd	r24, Z+3	; 0x03
    3016:	26 95       	lsr	r18
    3018:	28 23       	and	r18, r24
    301a:	c0 81       	ld	r28, Z
    301c:	d1 81       	ldd	r29, Z+1	; 0x01
    301e:	c2 0f       	add	r28, r18
    3020:	d1 1d       	adc	r29, r1
    3022:	68 83       	st	Y, r22
    3024:	8f 5f       	subi	r24, 0xFF	; 255
    3026:	95 81       	ldd	r25, Z+5	; 0x05
    3028:	89 23       	and	r24, r25
    302a:	83 83       	std	Z+3, r24	; 0x03
    302c:	16 96       	adiw	r26, 0x06	; 6
    302e:	ed 91       	ld	r30, X+
    3030:	fc 91       	ld	r31, X
    3032:	17 97       	sbiw	r26, 0x07	; 7
    3034:	30 97       	sbiw	r30, 0x00	; 0
    3036:	11 f0       	breq	.+4      	; 0x303c <__vector_51+0x7a>
    3038:	cd 01       	movw	r24, r26
    303a:	19 95       	eicall
    303c:	ff 91       	pop	r31
    303e:	ef 91       	pop	r30
    3040:	df 91       	pop	r29
    3042:	cf 91       	pop	r28
    3044:	bf 91       	pop	r27
    3046:	af 91       	pop	r26
    3048:	9f 91       	pop	r25
    304a:	8f 91       	pop	r24
    304c:	7f 91       	pop	r23
    304e:	6f 91       	pop	r22
    3050:	5f 91       	pop	r21
    3052:	4f 91       	pop	r20
    3054:	3f 91       	pop	r19
    3056:	2f 91       	pop	r18
    3058:	0f 90       	pop	r0
    305a:	0b be       	out	0x3b, r0	; 59
    305c:	0f 90       	pop	r0
    305e:	0f be       	out	0x3f, r0	; 63
    3060:	0f 90       	pop	r0
    3062:	1f 90       	pop	r1
    3064:	18 95       	reti

00003066 <__vector_52>:
    3066:	1f 92       	push	r1
    3068:	0f 92       	push	r0
    306a:	0f b6       	in	r0, 0x3f	; 63
    306c:	0f 92       	push	r0
    306e:	11 24       	eor	r1, r1
    3070:	0b b6       	in	r0, 0x3b	; 59
    3072:	0f 92       	push	r0
    3074:	2f 93       	push	r18
    3076:	8f 93       	push	r24
    3078:	9f 93       	push	r25
    307a:	af 93       	push	r26
    307c:	bf 93       	push	r27
    307e:	ef 93       	push	r30
    3080:	ff 93       	push	r31
    3082:	e0 91 64 08 	lds	r30, 0x0864	; 0x800864 <_ser_handle+0x4>
    3086:	f0 91 65 08 	lds	r31, 0x0865	; 0x800865 <_ser_handle+0x5>
    308a:	30 97       	sbiw	r30, 0x00	; 0
    308c:	b9 f0       	breq	.+46     	; 0x30bc <__vector_52+0x56>
    308e:	02 80       	ldd	r0, Z+2	; 0x02
    3090:	f3 81       	ldd	r31, Z+3	; 0x03
    3092:	e0 2d       	mov	r30, r0
    3094:	93 81       	ldd	r25, Z+3	; 0x03
    3096:	82 81       	ldd	r24, Z+2	; 0x02
    3098:	98 17       	cp	r25, r24
    309a:	b1 f0       	breq	.+44     	; 0x30c8 <__vector_52+0x62>
    309c:	92 81       	ldd	r25, Z+2	; 0x02
    309e:	85 81       	ldd	r24, Z+5	; 0x05
    30a0:	28 2f       	mov	r18, r24
    30a2:	26 95       	lsr	r18
    30a4:	29 23       	and	r18, r25
    30a6:	a0 81       	ld	r26, Z
    30a8:	b1 81       	ldd	r27, Z+1	; 0x01
    30aa:	a2 0f       	add	r26, r18
    30ac:	b1 1d       	adc	r27, r1
    30ae:	2c 91       	ld	r18, X
    30b0:	9f 5f       	subi	r25, 0xFF	; 255
    30b2:	89 23       	and	r24, r25
    30b4:	82 83       	std	Z+2, r24	; 0x02
    30b6:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    30ba:	0b c0       	rjmp	.+22     	; 0x30d2 <__vector_52+0x6c>
    30bc:	e1 ed       	ldi	r30, 0xD1	; 209
    30be:	f0 e0       	ldi	r31, 0x00	; 0
    30c0:	80 81       	ld	r24, Z
    30c2:	8f 7d       	andi	r24, 0xDF	; 223
    30c4:	80 83       	st	Z, r24
    30c6:	05 c0       	rjmp	.+10     	; 0x30d2 <__vector_52+0x6c>
    30c8:	e1 ed       	ldi	r30, 0xD1	; 209
    30ca:	f0 e0       	ldi	r31, 0x00	; 0
    30cc:	80 81       	ld	r24, Z
    30ce:	8f 7d       	andi	r24, 0xDF	; 223
    30d0:	80 83       	st	Z, r24
    30d2:	ff 91       	pop	r31
    30d4:	ef 91       	pop	r30
    30d6:	bf 91       	pop	r27
    30d8:	af 91       	pop	r26
    30da:	9f 91       	pop	r25
    30dc:	8f 91       	pop	r24
    30de:	2f 91       	pop	r18
    30e0:	0f 90       	pop	r0
    30e2:	0b be       	out	0x3b, r0	; 59
    30e4:	0f 90       	pop	r0
    30e6:	0f be       	out	0x3f, r0	; 63
    30e8:	0f 90       	pop	r0
    30ea:	1f 90       	pop	r1
    30ec:	18 95       	reti

000030ee <__vector_54>:
    30ee:	1f 92       	push	r1
    30f0:	0f 92       	push	r0
    30f2:	0f b6       	in	r0, 0x3f	; 63
    30f4:	0f 92       	push	r0
    30f6:	11 24       	eor	r1, r1
    30f8:	0b b6       	in	r0, 0x3b	; 59
    30fa:	0f 92       	push	r0
    30fc:	2f 93       	push	r18
    30fe:	3f 93       	push	r19
    3100:	4f 93       	push	r20
    3102:	5f 93       	push	r21
    3104:	6f 93       	push	r22
    3106:	7f 93       	push	r23
    3108:	8f 93       	push	r24
    310a:	9f 93       	push	r25
    310c:	af 93       	push	r26
    310e:	bf 93       	push	r27
    3110:	cf 93       	push	r28
    3112:	df 93       	push	r29
    3114:	ef 93       	push	r30
    3116:	ff 93       	push	r31
    3118:	a0 91 66 08 	lds	r26, 0x0866	; 0x800866 <_ser_handle+0x6>
    311c:	b0 91 67 08 	lds	r27, 0x0867	; 0x800867 <_ser_handle+0x7>
    3120:	10 97       	sbiw	r26, 0x00	; 0
    3122:	11 f1       	breq	.+68     	; 0x3168 <__vector_54+0x7a>
    3124:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    3128:	14 96       	adiw	r26, 0x04	; 4
    312a:	ed 91       	ld	r30, X+
    312c:	fc 91       	ld	r31, X
    312e:	15 97       	sbiw	r26, 0x05	; 5
    3130:	93 81       	ldd	r25, Z+3	; 0x03
    3132:	82 81       	ldd	r24, Z+2	; 0x02
    3134:	25 81       	ldd	r18, Z+5	; 0x05
    3136:	98 1b       	sub	r25, r24
    3138:	92 23       	and	r25, r18
    313a:	84 81       	ldd	r24, Z+4	; 0x04
    313c:	98 17       	cp	r25, r24
    313e:	61 f0       	breq	.+24     	; 0x3158 <__vector_54+0x6a>
    3140:	83 81       	ldd	r24, Z+3	; 0x03
    3142:	26 95       	lsr	r18
    3144:	28 23       	and	r18, r24
    3146:	c0 81       	ld	r28, Z
    3148:	d1 81       	ldd	r29, Z+1	; 0x01
    314a:	c2 0f       	add	r28, r18
    314c:	d1 1d       	adc	r29, r1
    314e:	68 83       	st	Y, r22
    3150:	8f 5f       	subi	r24, 0xFF	; 255
    3152:	95 81       	ldd	r25, Z+5	; 0x05
    3154:	89 23       	and	r24, r25
    3156:	83 83       	std	Z+3, r24	; 0x03
    3158:	16 96       	adiw	r26, 0x06	; 6
    315a:	ed 91       	ld	r30, X+
    315c:	fc 91       	ld	r31, X
    315e:	17 97       	sbiw	r26, 0x07	; 7
    3160:	30 97       	sbiw	r30, 0x00	; 0
    3162:	11 f0       	breq	.+4      	; 0x3168 <__vector_54+0x7a>
    3164:	cd 01       	movw	r24, r26
    3166:	19 95       	eicall
    3168:	ff 91       	pop	r31
    316a:	ef 91       	pop	r30
    316c:	df 91       	pop	r29
    316e:	cf 91       	pop	r28
    3170:	bf 91       	pop	r27
    3172:	af 91       	pop	r26
    3174:	9f 91       	pop	r25
    3176:	8f 91       	pop	r24
    3178:	7f 91       	pop	r23
    317a:	6f 91       	pop	r22
    317c:	5f 91       	pop	r21
    317e:	4f 91       	pop	r20
    3180:	3f 91       	pop	r19
    3182:	2f 91       	pop	r18
    3184:	0f 90       	pop	r0
    3186:	0b be       	out	0x3b, r0	; 59
    3188:	0f 90       	pop	r0
    318a:	0f be       	out	0x3f, r0	; 63
    318c:	0f 90       	pop	r0
    318e:	1f 90       	pop	r1
    3190:	18 95       	reti

00003192 <__vector_55>:
    3192:	1f 92       	push	r1
    3194:	0f 92       	push	r0
    3196:	0f b6       	in	r0, 0x3f	; 63
    3198:	0f 92       	push	r0
    319a:	11 24       	eor	r1, r1
    319c:	0b b6       	in	r0, 0x3b	; 59
    319e:	0f 92       	push	r0
    31a0:	2f 93       	push	r18
    31a2:	8f 93       	push	r24
    31a4:	9f 93       	push	r25
    31a6:	af 93       	push	r26
    31a8:	bf 93       	push	r27
    31aa:	ef 93       	push	r30
    31ac:	ff 93       	push	r31
    31ae:	e0 91 66 08 	lds	r30, 0x0866	; 0x800866 <_ser_handle+0x6>
    31b2:	f0 91 67 08 	lds	r31, 0x0867	; 0x800867 <_ser_handle+0x7>
    31b6:	30 97       	sbiw	r30, 0x00	; 0
    31b8:	b9 f0       	breq	.+46     	; 0x31e8 <__vector_55+0x56>
    31ba:	02 80       	ldd	r0, Z+2	; 0x02
    31bc:	f3 81       	ldd	r31, Z+3	; 0x03
    31be:	e0 2d       	mov	r30, r0
    31c0:	93 81       	ldd	r25, Z+3	; 0x03
    31c2:	82 81       	ldd	r24, Z+2	; 0x02
    31c4:	98 17       	cp	r25, r24
    31c6:	b1 f0       	breq	.+44     	; 0x31f4 <__vector_55+0x62>
    31c8:	92 81       	ldd	r25, Z+2	; 0x02
    31ca:	85 81       	ldd	r24, Z+5	; 0x05
    31cc:	28 2f       	mov	r18, r24
    31ce:	26 95       	lsr	r18
    31d0:	29 23       	and	r18, r25
    31d2:	a0 81       	ld	r26, Z
    31d4:	b1 81       	ldd	r27, Z+1	; 0x01
    31d6:	a2 0f       	add	r26, r18
    31d8:	b1 1d       	adc	r27, r1
    31da:	2c 91       	ld	r18, X
    31dc:	9f 5f       	subi	r25, 0xFF	; 255
    31de:	89 23       	and	r24, r25
    31e0:	82 83       	std	Z+2, r24	; 0x02
    31e2:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    31e6:	0b c0       	rjmp	.+22     	; 0x31fe <__vector_55+0x6c>
    31e8:	e1 e3       	ldi	r30, 0x31	; 49
    31ea:	f1 e0       	ldi	r31, 0x01	; 1
    31ec:	80 81       	ld	r24, Z
    31ee:	8f 7d       	andi	r24, 0xDF	; 223
    31f0:	80 83       	st	Z, r24
    31f2:	05 c0       	rjmp	.+10     	; 0x31fe <__vector_55+0x6c>
    31f4:	e1 e3       	ldi	r30, 0x31	; 49
    31f6:	f1 e0       	ldi	r31, 0x01	; 1
    31f8:	80 81       	ld	r24, Z
    31fa:	8f 7d       	andi	r24, 0xDF	; 223
    31fc:	80 83       	st	Z, r24
    31fe:	ff 91       	pop	r31
    3200:	ef 91       	pop	r30
    3202:	bf 91       	pop	r27
    3204:	af 91       	pop	r26
    3206:	9f 91       	pop	r25
    3208:	8f 91       	pop	r24
    320a:	2f 91       	pop	r18
    320c:	0f 90       	pop	r0
    320e:	0b be       	out	0x3b, r0	; 59
    3210:	0f 90       	pop	r0
    3212:	0f be       	out	0x3f, r0	; 63
    3214:	0f 90       	pop	r0
    3216:	1f 90       	pop	r1
    3218:	18 95       	reti

0000321a <fifo_init>:
    321a:	fc 01       	movw	r30, r24
    321c:	41 11       	cpse	r20, r1
    321e:	02 c0       	rjmp	.+4      	; 0x3224 <fifo_init+0xa>
    3220:	0e 94 38 26 	call	0x4c70	; 0x4c70 <abort>
    3224:	84 2f       	mov	r24, r20
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	9c 01       	movw	r18, r24
    322a:	21 50       	subi	r18, 0x01	; 1
    322c:	31 09       	sbc	r19, r1
    322e:	82 23       	and	r24, r18
    3230:	93 23       	and	r25, r19
    3232:	89 2b       	or	r24, r25
    3234:	11 f0       	breq	.+4      	; 0x323a <fifo_init+0x20>
    3236:	0e 94 38 26 	call	0x4c70	; 0x4c70 <abort>
    323a:	41 38       	cpi	r20, 0x81	; 129
    323c:	10 f0       	brcs	.+4      	; 0x3242 <fifo_init+0x28>
    323e:	0e 94 38 26 	call	0x4c70	; 0x4c70 <abort>
    3242:	12 82       	std	Z+2, r1	; 0x02
    3244:	13 82       	std	Z+3, r1	; 0x03
    3246:	44 83       	std	Z+4, r20	; 0x04
    3248:	44 0f       	add	r20, r20
    324a:	41 50       	subi	r20, 0x01	; 1
    324c:	45 83       	std	Z+5, r20	; 0x05
    324e:	71 83       	std	Z+1, r23	; 0x01
    3250:	60 83       	st	Z, r22
    3252:	80 e0       	ldi	r24, 0x00	; 0
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	08 95       	ret

00003258 <hal_create>:
    3258:	e4 e3       	ldi	r30, 0x34	; 52
    325a:	fa e0       	ldi	r31, 0x0A	; 10
    325c:	2d ef       	ldi	r18, 0xFD	; 253
    325e:	3e e1       	ldi	r19, 0x1E	; 30
    3260:	31 83       	std	Z+1, r19	; 0x01
    3262:	20 83       	st	Z, r18
    3264:	20 e0       	ldi	r18, 0x00	; 0
    3266:	3f e1       	ldi	r19, 0x1F	; 31
    3268:	33 83       	std	Z+3, r19	; 0x03
    326a:	22 83       	std	Z+2, r18	; 0x02
    326c:	2b e0       	ldi	r18, 0x0B	; 11
    326e:	3f e1       	ldi	r19, 0x1F	; 31
    3270:	35 83       	std	Z+5, r19	; 0x05
    3272:	24 83       	std	Z+4, r18	; 0x04
    3274:	2f e0       	ldi	r18, 0x0F	; 15
    3276:	3f e1       	ldi	r19, 0x1F	; 31
    3278:	37 83       	std	Z+7, r19	; 0x07
    327a:	26 83       	std	Z+6, r18	; 0x06
    327c:	25 e1       	ldi	r18, 0x15	; 21
    327e:	3f e1       	ldi	r19, 0x1F	; 31
    3280:	31 87       	std	Z+9, r19	; 0x09
    3282:	20 87       	std	Z+8, r18	; 0x08
    3284:	21 e2       	ldi	r18, 0x21	; 33
    3286:	3f e1       	ldi	r19, 0x1F	; 31
    3288:	33 87       	std	Z+11, r19	; 0x0b
    328a:	22 87       	std	Z+10, r18	; 0x0a
    328c:	26 e2       	ldi	r18, 0x26	; 38
    328e:	3f e1       	ldi	r19, 0x1F	; 31
    3290:	35 87       	std	Z+13, r19	; 0x0d
    3292:	24 87       	std	Z+12, r18	; 0x0c
    3294:	22 e3       	ldi	r18, 0x32	; 50
    3296:	3f e1       	ldi	r19, 0x1F	; 31
    3298:	37 87       	std	Z+15, r19	; 0x0f
    329a:	26 87       	std	Z+14, r18	; 0x0e
    329c:	22 e1       	ldi	r18, 0x12	; 18
    329e:	3f e1       	ldi	r19, 0x1F	; 31
    32a0:	31 8b       	std	Z+17, r19	; 0x11
    32a2:	20 8b       	std	Z+16, r18	; 0x10
    32a4:	27 e3       	ldi	r18, 0x37	; 55
    32a6:	3f e1       	ldi	r19, 0x1F	; 31
    32a8:	33 8b       	std	Z+19, r19	; 0x13
    32aa:	22 8b       	std	Z+18, r18	; 0x12
    32ac:	24 e4       	ldi	r18, 0x44	; 68
    32ae:	3f e1       	ldi	r19, 0x1F	; 31
    32b0:	35 8b       	std	Z+21, r19	; 0x15
    32b2:	24 8b       	std	Z+20, r18	; 0x14
    32b4:	68 2f       	mov	r22, r24
    32b6:	cf 01       	movw	r24, r30
    32b8:	3b c1       	rjmp	.+630    	; 0x3530 <led_create>
    32ba:	08 95       	ret

000032bc <_hihTwiCallback>:
    32bc:	65 30       	cpi	r22, 0x05	; 5
    32be:	f1 f4       	brne	.+60     	; 0x32fc <_hihTwiCallback+0x40>
    32c0:	fa 01       	movw	r30, r20
    32c2:	80 81       	ld	r24, Z
    32c4:	8f 73       	andi	r24, 0x3F	; 63
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	98 2f       	mov	r25, r24
    32ca:	88 27       	eor	r24, r24
    32cc:	21 81       	ldd	r18, Z+1	; 0x01
    32ce:	82 2b       	or	r24, r18
    32d0:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <_hum+0x1>
    32d4:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <_hum>
    32d8:	82 81       	ldd	r24, Z+2	; 0x02
    32da:	f0 e4       	ldi	r31, 0x40	; 64
    32dc:	8f 9f       	mul	r24, r31
    32de:	c0 01       	movw	r24, r0
    32e0:	11 24       	eor	r1, r1
    32e2:	fa 01       	movw	r30, r20
    32e4:	23 81       	ldd	r18, Z+3	; 0x03
    32e6:	26 95       	lsr	r18
    32e8:	26 95       	lsr	r18
    32ea:	82 2b       	or	r24, r18
    32ec:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <_temp+0x1>
    32f0:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_temp>
    32f4:	81 e0       	ldi	r24, 0x01	; 1
    32f6:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <_measuringIsReady>
    32fa:	08 95       	ret
    32fc:	64 30       	cpi	r22, 0x04	; 4
    32fe:	51 f0       	breq	.+20     	; 0x3314 <_hihTwiCallback+0x58>
    3300:	80 e0       	ldi	r24, 0x00	; 0
    3302:	90 e4       	ldi	r25, 0x40	; 64
    3304:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <_temp+0x1>
    3308:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_temp>
    330c:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <_hum+0x1>
    3310:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <_hum>
    3314:	08 95       	ret

00003316 <hih8120Create>:
    3316:	0f 93       	push	r16
    3318:	1f 93       	push	r17
    331a:	0e e5       	ldi	r16, 0x5E	; 94
    331c:	19 e1       	ldi	r17, 0x19	; 25
    331e:	20 e0       	ldi	r18, 0x00	; 0
    3320:	34 e2       	ldi	r19, 0x24	; 36
    3322:	44 ef       	ldi	r20, 0xF4	; 244
    3324:	50 e0       	ldi	r21, 0x00	; 0
    3326:	60 e0       	ldi	r22, 0x00	; 0
    3328:	87 e2       	ldi	r24, 0x27	; 39
    332a:	eb d7       	rcall	.+4054   	; 0x4302 <twiCreate>
    332c:	90 93 6a 08 	sts	0x086A, r25	; 0x80086a <_hih8120Handler+0x1>
    3330:	80 93 69 08 	sts	0x0869, r24	; 0x800869 <_hih8120Handler>
    3334:	21 e0       	ldi	r18, 0x01	; 1
    3336:	89 2b       	or	r24, r25
    3338:	09 f0       	breq	.+2      	; 0x333c <hih8120Create+0x26>
    333a:	20 e0       	ldi	r18, 0x00	; 0
    333c:	82 2f       	mov	r24, r18
    333e:	1f 91       	pop	r17
    3340:	0f 91       	pop	r16
    3342:	08 95       	ret

00003344 <hih8120Wakeup>:
    3344:	80 91 69 08 	lds	r24, 0x0869	; 0x800869 <_hih8120Handler>
    3348:	90 91 6a 08 	lds	r25, 0x086A	; 0x80086a <_hih8120Handler+0x1>
    334c:	00 97       	sbiw	r24, 0x00	; 0
    334e:	59 f0       	breq	.+22     	; 0x3366 <hih8120Wakeup+0x22>
    3350:	40 e0       	ldi	r20, 0x00	; 0
    3352:	60 e0       	ldi	r22, 0x00	; 0
    3354:	70 e0       	ldi	r23, 0x00	; 0
    3356:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <twiTransmit>
    335a:	84 30       	cpi	r24, 0x04	; 4
    335c:	31 f4       	brne	.+12     	; 0x336a <hih8120Wakeup+0x26>
    335e:	10 92 68 08 	sts	0x0868, r1	; 0x800868 <_measuringIsReady>
    3362:	80 e0       	ldi	r24, 0x00	; 0
    3364:	08 95       	ret
    3366:	82 e0       	ldi	r24, 0x02	; 2
    3368:	08 95       	ret
    336a:	83 e0       	ldi	r24, 0x03	; 3
    336c:	08 95       	ret

0000336e <hih8120Meassure>:
    336e:	80 91 69 08 	lds	r24, 0x0869	; 0x800869 <_hih8120Handler>
    3372:	90 91 6a 08 	lds	r25, 0x086A	; 0x80086a <_hih8120Handler+0x1>
    3376:	00 97       	sbiw	r24, 0x00	; 0
    3378:	39 f0       	breq	.+14     	; 0x3388 <hih8120Meassure+0x1a>
    337a:	64 e0       	ldi	r22, 0x04	; 4
    337c:	0e 94 1e 22 	call	0x443c	; 0x443c <twiReceive>
    3380:	85 30       	cpi	r24, 0x05	; 5
    3382:	21 f0       	breq	.+8      	; 0x338c <hih8120Meassure+0x1e>
    3384:	83 e0       	ldi	r24, 0x03	; 3
    3386:	08 95       	ret
    3388:	82 e0       	ldi	r24, 0x02	; 2
    338a:	08 95       	ret
    338c:	80 e0       	ldi	r24, 0x00	; 0
    338e:	08 95       	ret

00003390 <hih8120GetHumidity>:
    3390:	60 91 1e 02 	lds	r22, 0x021E	; 0x80021e <_hum>
    3394:	70 91 1f 02 	lds	r23, 0x021F	; 0x80021f <_hum+0x1>
    3398:	80 e0       	ldi	r24, 0x00	; 0
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <__floatunsisf>
    33a0:	20 e0       	ldi	r18, 0x00	; 0
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	48 ec       	ldi	r20, 0xC8	; 200
    33a6:	52 e4       	ldi	r21, 0x42	; 66
    33a8:	0e 94 49 24 	call	0x4892	; 0x4892 <__mulsf3>
    33ac:	20 e0       	ldi	r18, 0x00	; 0
    33ae:	38 ef       	ldi	r19, 0xF8	; 248
    33b0:	4f e7       	ldi	r20, 0x7F	; 127
    33b2:	56 e4       	ldi	r21, 0x46	; 70
    33b4:	0c 94 75 23 	jmp	0x46ea	; 0x46ea <__divsf3>
    33b8:	08 95       	ret

000033ba <hih8120GetTemperature>:
    33ba:	60 91 1c 02 	lds	r22, 0x021C	; 0x80021c <_temp>
    33be:	70 91 1d 02 	lds	r23, 0x021D	; 0x80021d <_temp+0x1>
    33c2:	80 e0       	ldi	r24, 0x00	; 0
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <__floatunsisf>
    33ca:	20 e0       	ldi	r18, 0x00	; 0
    33cc:	30 e0       	ldi	r19, 0x00	; 0
    33ce:	45 e2       	ldi	r20, 0x25	; 37
    33d0:	53 e4       	ldi	r21, 0x43	; 67
    33d2:	0e 94 49 24 	call	0x4892	; 0x4892 <__mulsf3>
    33d6:	20 e0       	ldi	r18, 0x00	; 0
    33d8:	38 ef       	ldi	r19, 0xF8	; 248
    33da:	4f e7       	ldi	r20, 0x7F	; 127
    33dc:	56 e4       	ldi	r21, 0x46	; 70
    33de:	0e 94 75 23 	call	0x46ea	; 0x46ea <__divsf3>
    33e2:	20 e0       	ldi	r18, 0x00	; 0
    33e4:	30 e0       	ldi	r19, 0x00	; 0
    33e6:	40 e2       	ldi	r20, 0x20	; 32
    33e8:	52 e4       	ldi	r21, 0x42	; 66
    33ea:	0c 94 0e 23 	jmp	0x461c	; 0x461c <__subsf3>
    33ee:	08 95       	ret

000033f0 <_turn_off>:
    33f0:	cf 93       	push	r28
    33f2:	df 93       	push	r29
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	fc 01       	movw	r30, r24
    33f8:	ee 0f       	add	r30, r30
    33fa:	ff 1f       	adc	r31, r31
    33fc:	e8 0f       	add	r30, r24
    33fe:	f9 1f       	adc	r31, r25
    3400:	ee 0f       	add	r30, r30
    3402:	ff 1f       	adc	r31, r31
    3404:	e5 59       	subi	r30, 0x95	; 149
    3406:	f7 4f       	sbci	r31, 0xF7	; 247
    3408:	23 81       	ldd	r18, Z+3	; 0x03
    340a:	21 11       	cpse	r18, r1
    340c:	0a c0       	rjmp	.+20     	; 0x3422 <_turn_off+0x32>
    340e:	ef 01       	movw	r28, r30
    3410:	e0 91 3c 0a 	lds	r30, 0x0A3C	; 0x800a3c <register_access+0x8>
    3414:	f0 91 3d 0a 	lds	r31, 0x0A3D	; 0x800a3d <register_access+0x9>
    3418:	6a 81       	ldd	r22, Y+2	; 0x02
    341a:	88 81       	ld	r24, Y
    341c:	99 81       	ldd	r25, Y+1	; 0x01
    341e:	19 95       	eicall
    3420:	12 c0       	rjmp	.+36     	; 0x3446 <_turn_off+0x56>
    3422:	dc 01       	movw	r26, r24
    3424:	aa 0f       	add	r26, r26
    3426:	bb 1f       	adc	r27, r27
    3428:	ed 01       	movw	r28, r26
    342a:	c8 0f       	add	r28, r24
    342c:	d9 1f       	adc	r29, r25
    342e:	cc 0f       	add	r28, r28
    3430:	dd 1f       	adc	r29, r29
    3432:	c5 59       	subi	r28, 0x95	; 149
    3434:	d7 4f       	sbci	r29, 0xF7	; 247
    3436:	e0 91 46 0a 	lds	r30, 0x0A46	; 0x800a46 <register_access+0x12>
    343a:	f0 91 47 0a 	lds	r31, 0x0A47	; 0x800a47 <register_access+0x13>
    343e:	6a 81       	ldd	r22, Y+2	; 0x02
    3440:	88 81       	ld	r24, Y
    3442:	99 81       	ldd	r25, Y+1	; 0x01
    3444:	19 95       	eicall
    3446:	df 91       	pop	r29
    3448:	cf 91       	pop	r28
    344a:	08 95       	ret

0000344c <_turn_on>:
    344c:	cf 93       	push	r28
    344e:	df 93       	push	r29
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	fc 01       	movw	r30, r24
    3454:	ee 0f       	add	r30, r30
    3456:	ff 1f       	adc	r31, r31
    3458:	e8 0f       	add	r30, r24
    345a:	f9 1f       	adc	r31, r25
    345c:	ee 0f       	add	r30, r30
    345e:	ff 1f       	adc	r31, r31
    3460:	e5 59       	subi	r30, 0x95	; 149
    3462:	f7 4f       	sbci	r31, 0xF7	; 247
    3464:	23 81       	ldd	r18, Z+3	; 0x03
    3466:	21 11       	cpse	r18, r1
    3468:	0a c0       	rjmp	.+20     	; 0x347e <_turn_on+0x32>
    346a:	ef 01       	movw	r28, r30
    346c:	e0 91 46 0a 	lds	r30, 0x0A46	; 0x800a46 <register_access+0x12>
    3470:	f0 91 47 0a 	lds	r31, 0x0A47	; 0x800a47 <register_access+0x13>
    3474:	6a 81       	ldd	r22, Y+2	; 0x02
    3476:	88 81       	ld	r24, Y
    3478:	99 81       	ldd	r25, Y+1	; 0x01
    347a:	19 95       	eicall
    347c:	12 c0       	rjmp	.+36     	; 0x34a2 <_turn_on+0x56>
    347e:	dc 01       	movw	r26, r24
    3480:	aa 0f       	add	r26, r26
    3482:	bb 1f       	adc	r27, r27
    3484:	ed 01       	movw	r28, r26
    3486:	c8 0f       	add	r28, r24
    3488:	d9 1f       	adc	r29, r25
    348a:	cc 0f       	add	r28, r28
    348c:	dd 1f       	adc	r29, r29
    348e:	c5 59       	subi	r28, 0x95	; 149
    3490:	d7 4f       	sbci	r29, 0xF7	; 247
    3492:	e0 91 3c 0a 	lds	r30, 0x0A3C	; 0x800a3c <register_access+0x8>
    3496:	f0 91 3d 0a 	lds	r31, 0x0A3D	; 0x800a3d <register_access+0x9>
    349a:	6a 81       	ldd	r22, Y+2	; 0x02
    349c:	88 81       	ld	r24, Y
    349e:	99 81       	ldd	r25, Y+1	; 0x01
    34a0:	19 95       	eicall
    34a2:	df 91       	pop	r29
    34a4:	cf 91       	pop	r28
    34a6:	08 95       	ret

000034a8 <_hal_led_task>:
    34a8:	81 e0       	ldi	r24, 0x01	; 1
    34aa:	95 e0       	ldi	r25, 0x05	; 5
    34ac:	0e 94 89 26 	call	0x4d12	; 0x4d12 <puts>
    34b0:	0f 2e       	mov	r0, r31
    34b2:	f4 e3       	ldi	r31, 0x34	; 52
    34b4:	cf 2e       	mov	r12, r31
    34b6:	fa e0       	ldi	r31, 0x0A	; 10
    34b8:	df 2e       	mov	r13, r31
    34ba:	f0 2d       	mov	r31, r0
    34bc:	04 e0       	ldi	r16, 0x04	; 4
    34be:	cb e6       	ldi	r28, 0x6B	; 107
    34c0:	d8 e0       	ldi	r29, 0x08	; 8
    34c2:	10 e0       	ldi	r17, 0x00	; 0
    34c4:	8c 81       	ldd	r24, Y+4	; 0x04
    34c6:	81 30       	cpi	r24, 0x01	; 1
    34c8:	69 f0       	breq	.+26     	; 0x34e4 <_hal_led_task+0x3c>
    34ca:	e8 f0       	brcs	.+58     	; 0x3506 <_hal_led_task+0x5e>
    34cc:	82 30       	cpi	r24, 0x02	; 2
    34ce:	39 f5       	brne	.+78     	; 0x351e <_hal_led_task+0x76>
    34d0:	d6 01       	movw	r26, r12
    34d2:	1c 96       	adiw	r26, 0x0c	; 12
    34d4:	ed 91       	ld	r30, X+
    34d6:	fc 91       	ld	r31, X
    34d8:	1d 97       	sbiw	r26, 0x0d	; 13
    34da:	6a 81       	ldd	r22, Y+2	; 0x02
    34dc:	88 81       	ld	r24, Y
    34de:	99 81       	ldd	r25, Y+1	; 0x01
    34e0:	19 95       	eicall
    34e2:	1d c0       	rjmp	.+58     	; 0x351e <_hal_led_task+0x76>
    34e4:	8d 81       	ldd	r24, Y+5	; 0x05
    34e6:	8f 5f       	subi	r24, 0xFF	; 255
    34e8:	8a 30       	cpi	r24, 0x0A	; 10
    34ea:	10 f4       	brcc	.+4      	; 0x34f0 <_hal_led_task+0x48>
    34ec:	8d 83       	std	Y+5, r24	; 0x05
    34ee:	17 c0       	rjmp	.+46     	; 0x351e <_hal_led_task+0x76>
    34f0:	1d 82       	std	Y+5, r1	; 0x05
    34f2:	d6 01       	movw	r26, r12
    34f4:	1c 96       	adiw	r26, 0x0c	; 12
    34f6:	ed 91       	ld	r30, X+
    34f8:	fc 91       	ld	r31, X
    34fa:	1d 97       	sbiw	r26, 0x0d	; 13
    34fc:	6a 81       	ldd	r22, Y+2	; 0x02
    34fe:	88 81       	ld	r24, Y
    3500:	99 81       	ldd	r25, Y+1	; 0x01
    3502:	19 95       	eicall
    3504:	0c c0       	rjmp	.+24     	; 0x351e <_hal_led_task+0x76>
    3506:	8d 81       	ldd	r24, Y+5	; 0x05
    3508:	88 23       	and	r24, r24
    350a:	31 f0       	breq	.+12     	; 0x3518 <_hal_led_task+0x70>
    350c:	81 2f       	mov	r24, r17
    350e:	9e df       	rcall	.-196    	; 0x344c <_turn_on>
    3510:	8d 81       	ldd	r24, Y+5	; 0x05
    3512:	81 50       	subi	r24, 0x01	; 1
    3514:	8d 83       	std	Y+5, r24	; 0x05
    3516:	03 c0       	rjmp	.+6      	; 0x351e <_hal_led_task+0x76>
    3518:	0c 83       	std	Y+4, r16	; 0x04
    351a:	81 2f       	mov	r24, r17
    351c:	69 df       	rcall	.-302    	; 0x33f0 <_turn_off>
    351e:	1f 5f       	subi	r17, 0xFF	; 255
    3520:	26 96       	adiw	r28, 0x06	; 6
    3522:	14 30       	cpi	r17, 0x04	; 4
    3524:	79 f6       	brne	.-98     	; 0x34c4 <_hal_led_task+0x1c>
    3526:	85 e0       	ldi	r24, 0x05	; 5
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <vTaskDelay>
    352e:	c7 cf       	rjmp	.-114    	; 0x34be <_hal_led_task+0x16>

00003530 <led_create>:
    3530:	cf 92       	push	r12
    3532:	df 92       	push	r13
    3534:	ef 92       	push	r14
    3536:	ff 92       	push	r15
    3538:	0f 93       	push	r16
    353a:	1f 93       	push	r17
    353c:	cf 93       	push	r28
    353e:	df 93       	push	r29
    3540:	06 2f       	mov	r16, r22
    3542:	0f 2e       	mov	r0, r31
    3544:	f4 e3       	ldi	r31, 0x34	; 52
    3546:	ef 2e       	mov	r14, r31
    3548:	fa e0       	ldi	r31, 0x0A	; 10
    354a:	ff 2e       	mov	r15, r31
    354c:	f0 2d       	mov	r31, r0
    354e:	d7 01       	movw	r26, r14
    3550:	18 96       	adiw	r26, 0x08	; 8
    3552:	ed 91       	ld	r30, X+
    3554:	fc 91       	ld	r31, X
    3556:	19 97       	sbiw	r26, 0x09	; 9
    3558:	66 e0       	ldi	r22, 0x06	; 6
    355a:	87 e2       	ldi	r24, 0x27	; 39
    355c:	90 e0       	ldi	r25, 0x00	; 0
    355e:	19 95       	eicall
    3560:	cb e6       	ldi	r28, 0x6B	; 107
    3562:	d8 e0       	ldi	r29, 0x08	; 8
    3564:	0f 2e       	mov	r0, r31
    3566:	f8 e2       	ldi	r31, 0x28	; 40
    3568:	cf 2e       	mov	r12, r31
    356a:	d1 2c       	mov	r13, r1
    356c:	f0 2d       	mov	r31, r0
    356e:	d9 82       	std	Y+1, r13	; 0x01
    3570:	c8 82       	st	Y, r12
    3572:	86 e0       	ldi	r24, 0x06	; 6
    3574:	8a 83       	std	Y+2, r24	; 0x02
    3576:	1b 82       	std	Y+3, r1	; 0x03
    3578:	14 e0       	ldi	r17, 0x04	; 4
    357a:	1c 83       	std	Y+4, r17	; 0x04
    357c:	80 e0       	ldi	r24, 0x00	; 0
    357e:	38 df       	rcall	.-400    	; 0x33f0 <_turn_off>
    3580:	d7 01       	movw	r26, r14
    3582:	18 96       	adiw	r26, 0x08	; 8
    3584:	ed 91       	ld	r30, X+
    3586:	fc 91       	ld	r31, X
    3588:	19 97       	sbiw	r26, 0x09	; 9
    358a:	67 e0       	ldi	r22, 0x07	; 7
    358c:	87 e2       	ldi	r24, 0x27	; 39
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	19 95       	eicall
    3592:	df 82       	std	Y+7, r13	; 0x07
    3594:	ce 82       	std	Y+6, r12	; 0x06
    3596:	87 e0       	ldi	r24, 0x07	; 7
    3598:	88 87       	std	Y+8, r24	; 0x08
    359a:	19 86       	std	Y+9, r1	; 0x09
    359c:	1a 87       	std	Y+10, r17	; 0x0a
    359e:	81 e0       	ldi	r24, 0x01	; 1
    35a0:	27 df       	rcall	.-434    	; 0x33f0 <_turn_off>
    35a2:	d7 01       	movw	r26, r14
    35a4:	18 96       	adiw	r26, 0x08	; 8
    35a6:	ed 91       	ld	r30, X+
    35a8:	fc 91       	ld	r31, X
    35aa:	19 97       	sbiw	r26, 0x09	; 9
    35ac:	65 e0       	ldi	r22, 0x05	; 5
    35ae:	83 e3       	ldi	r24, 0x33	; 51
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	19 95       	eicall
    35b4:	d7 01       	movw	r26, r14
    35b6:	18 96       	adiw	r26, 0x08	; 8
    35b8:	ed 91       	ld	r30, X+
    35ba:	fc 91       	ld	r31, X
    35bc:	19 97       	sbiw	r26, 0x09	; 9
    35be:	61 e0       	ldi	r22, 0x01	; 1
    35c0:	84 e3       	ldi	r24, 0x34	; 52
    35c2:	90 e0       	ldi	r25, 0x00	; 0
    35c4:	19 95       	eicall
    35c6:	84 e3       	ldi	r24, 0x34	; 52
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	9d 87       	std	Y+13, r25	; 0x0d
    35cc:	8c 87       	std	Y+12, r24	; 0x0c
    35ce:	85 e0       	ldi	r24, 0x05	; 5
    35d0:	8e 87       	std	Y+14, r24	; 0x0e
    35d2:	1f 86       	std	Y+15, r1	; 0x0f
    35d4:	18 8b       	std	Y+16, r17	; 0x10
    35d6:	82 e0       	ldi	r24, 0x02	; 2
    35d8:	0b df       	rcall	.-490    	; 0x33f0 <_turn_off>
    35da:	d7 01       	movw	r26, r14
    35dc:	18 96       	adiw	r26, 0x08	; 8
    35de:	ed 91       	ld	r30, X+
    35e0:	fc 91       	ld	r31, X
    35e2:	19 97       	sbiw	r26, 0x09	; 9
    35e4:	64 e0       	ldi	r22, 0x04	; 4
    35e6:	81 e0       	ldi	r24, 0x01	; 1
    35e8:	91 e0       	ldi	r25, 0x01	; 1
    35ea:	19 95       	eicall
    35ec:	d7 01       	movw	r26, r14
    35ee:	18 96       	adiw	r26, 0x08	; 8
    35f0:	ed 91       	ld	r30, X+
    35f2:	fc 91       	ld	r31, X
    35f4:	19 97       	sbiw	r26, 0x09	; 9
    35f6:	61 e0       	ldi	r22, 0x01	; 1
    35f8:	82 e0       	ldi	r24, 0x02	; 2
    35fa:	91 e0       	ldi	r25, 0x01	; 1
    35fc:	19 95       	eicall
    35fe:	82 e0       	ldi	r24, 0x02	; 2
    3600:	91 e0       	ldi	r25, 0x01	; 1
    3602:	9b 8b       	std	Y+19, r25	; 0x13
    3604:	8a 8b       	std	Y+18, r24	; 0x12
    3606:	1c 8b       	std	Y+20, r17	; 0x14
    3608:	1d 8a       	std	Y+21, r1	; 0x15
    360a:	1e 8b       	std	Y+22, r17	; 0x16
    360c:	83 e0       	ldi	r24, 0x03	; 3
    360e:	f0 de       	rcall	.-544    	; 0x33f0 <_turn_off>
    3610:	e1 2c       	mov	r14, r1
    3612:	f1 2c       	mov	r15, r1
    3614:	20 e0       	ldi	r18, 0x00	; 0
    3616:	30 e0       	ldi	r19, 0x00	; 0
    3618:	40 ec       	ldi	r20, 0xC0	; 192
    361a:	50 e0       	ldi	r21, 0x00	; 0
    361c:	68 e1       	ldi	r22, 0x18	; 24
    361e:	75 e0       	ldi	r23, 0x05	; 5
    3620:	84 e5       	ldi	r24, 0x54	; 84
    3622:	9a e1       	ldi	r25, 0x1A	; 26
    3624:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <xTaskCreate>
    3628:	df 91       	pop	r29
    362a:	cf 91       	pop	r28
    362c:	1f 91       	pop	r17
    362e:	0f 91       	pop	r16
    3630:	ff 90       	pop	r15
    3632:	ef 90       	pop	r14
    3634:	df 90       	pop	r13
    3636:	cf 90       	pop	r12
    3638:	08 95       	ret

0000363a <_serial_call_back>:
    363a:	0f 93       	push	r16
    363c:	1f 93       	push	r17
    363e:	cf 93       	push	r28
    3640:	df 93       	push	r29
    3642:	1f 92       	push	r1
    3644:	1f 92       	push	r1
    3646:	cd b7       	in	r28, 0x3d	; 61
    3648:	de b7       	in	r29, 0x3e	; 62
    364a:	8c 01       	movw	r16, r24
    364c:	19 82       	std	Y+1, r1	; 0x01
    364e:	2d c0       	rjmp	.+90     	; 0x36aa <_serial_call_back+0x70>
    3650:	e0 91 e7 08 	lds	r30, 0x08E7	; 0x8008e7 <rec_buf_inp.2926>
    3654:	ec 32       	cpi	r30, 0x2C	; 44
    3656:	50 f4       	brcc	.+20     	; 0x366c <_serial_call_back+0x32>
    3658:	81 e0       	ldi	r24, 0x01	; 1
    365a:	8e 0f       	add	r24, r30
    365c:	80 93 e7 08 	sts	0x08E7, r24	; 0x8008e7 <rec_buf_inp.2926>
    3660:	f0 e0       	ldi	r31, 0x00	; 0
    3662:	e9 5e       	subi	r30, 0xE9	; 233
    3664:	f6 4f       	sbci	r31, 0xF6	; 246
    3666:	8a 81       	ldd	r24, Y+2	; 0x02
    3668:	80 83       	st	Z, r24
    366a:	02 c0       	rjmp	.+4      	; 0x3670 <_serial_call_back+0x36>
    366c:	10 92 e7 08 	sts	0x08E7, r1	; 0x8008e7 <rec_buf_inp.2926>
    3670:	8a 81       	ldd	r24, Y+2	; 0x02
    3672:	8a 30       	cpi	r24, 0x0A	; 10
    3674:	d1 f4       	brne	.+52     	; 0x36aa <_serial_call_back+0x70>
    3676:	40 91 e7 08 	lds	r20, 0x08E7	; 0x8008e7 <rec_buf_inp.2926>
    367a:	50 e0       	ldi	r21, 0x00	; 0
    367c:	fa 01       	movw	r30, r20
    367e:	eb 5e       	subi	r30, 0xEB	; 235
    3680:	f6 4f       	sbci	r31, 0xF6	; 246
    3682:	10 82       	st	Z, r1
    3684:	41 50       	subi	r20, 0x01	; 1
    3686:	51 09       	sbc	r21, r1
    3688:	9e 01       	movw	r18, r28
    368a:	2f 5f       	subi	r18, 0xFF	; 255
    368c:	3f 4f       	sbci	r19, 0xFF	; 255
    368e:	67 e1       	ldi	r22, 0x17	; 23
    3690:	79 e0       	ldi	r23, 0x09	; 9
    3692:	80 91 e8 08 	lds	r24, 0x08E8	; 0x8008e8 <_reply_buffer_handle>
    3696:	90 91 e9 08 	lds	r25, 0x08E9	; 0x8008e9 <_reply_buffer_handle+0x1>
    369a:	0e 94 95 0b 	call	0x172a	; 0x172a <xStreamBufferSendFromISR>
    369e:	89 81       	ldd	r24, Y+1	; 0x01
    36a0:	81 11       	cpse	r24, r1
    36a2:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <vPortYield>
    36a6:	10 92 e7 08 	sts	0x08E7, r1	; 0x8008e7 <rec_buf_inp.2926>
    36aa:	be 01       	movw	r22, r28
    36ac:	6e 5f       	subi	r22, 0xFE	; 254
    36ae:	7f 4f       	sbci	r23, 0xFF	; 255
    36b0:	c8 01       	movw	r24, r16
    36b2:	3f db       	rcall	.-2434   	; 0x2d32 <serial_get_byte>
    36b4:	88 23       	and	r24, r24
    36b6:	61 f2       	breq	.-104    	; 0x3650 <_serial_call_back+0x16>
    36b8:	0f 90       	pop	r0
    36ba:	0f 90       	pop	r0
    36bc:	df 91       	pop	r29
    36be:	cf 91       	pop	r28
    36c0:	1f 91       	pop	r17
    36c2:	0f 91       	pop	r16
    36c4:	08 95       	ret

000036c6 <_upload_message>:
    36c6:	0f 93       	push	r16
    36c8:	1f 93       	push	r17
    36ca:	cf 93       	push	r28
    36cc:	df 93       	push	r29
    36ce:	8c 01       	movw	r16, r24
    36d0:	eb 01       	movw	r28, r22
    36d2:	80 91 e8 08 	lds	r24, 0x08E8	; 0x8008e8 <_reply_buffer_handle>
    36d6:	90 91 e9 08 	lds	r25, 0x08E9	; 0x8008e9 <_reply_buffer_handle+0x1>
    36da:	0e 94 56 0b 	call	0x16ac	; 0x16ac <xStreamBufferReset>
    36de:	b8 01       	movw	r22, r16
    36e0:	83 e8       	ldi	r24, 0x83	; 131
    36e2:	98 e0       	ldi	r25, 0x08	; 8
    36e4:	0e 94 57 26 	call	0x4cae	; 0x4cae <strcpy>
    36e8:	20 97       	sbiw	r28, 0x00	; 0
    36ea:	79 f0       	breq	.+30     	; 0x370a <_upload_message+0x44>
    36ec:	e3 e8       	ldi	r30, 0x83	; 131
    36ee:	f8 e0       	ldi	r31, 0x08	; 8
    36f0:	01 90       	ld	r0, Z+
    36f2:	00 20       	and	r0, r0
    36f4:	e9 f7       	brne	.-6      	; 0x36f0 <_upload_message+0x2a>
    36f6:	31 97       	sbiw	r30, 0x01	; 1
    36f8:	80 e2       	ldi	r24, 0x20	; 32
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	91 83       	std	Z+1, r25	; 0x01
    36fe:	80 83       	st	Z, r24
    3700:	be 01       	movw	r22, r28
    3702:	83 e8       	ldi	r24, 0x83	; 131
    3704:	98 e0       	ldi	r25, 0x08	; 8
    3706:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <strcat>
    370a:	e3 e8       	ldi	r30, 0x83	; 131
    370c:	f8 e0       	ldi	r31, 0x08	; 8
    370e:	df 01       	movw	r26, r30
    3710:	0d 90       	ld	r0, X+
    3712:	00 20       	and	r0, r0
    3714:	e9 f7       	brne	.-6      	; 0x3710 <_upload_message+0x4a>
    3716:	11 97       	sbiw	r26, 0x01	; 1
    3718:	8d e0       	ldi	r24, 0x0D	; 13
    371a:	9a e0       	ldi	r25, 0x0A	; 10
    371c:	11 96       	adiw	r26, 0x01	; 1
    371e:	9c 93       	st	X, r25
    3720:	8e 93       	st	-X, r24
    3722:	12 96       	adiw	r26, 0x02	; 2
    3724:	1c 92       	st	X, r1
    3726:	01 90       	ld	r0, Z+
    3728:	00 20       	and	r0, r0
    372a:	e9 f7       	brne	.-6      	; 0x3726 <_upload_message+0x60>
    372c:	31 97       	sbiw	r30, 0x01	; 1
    372e:	e3 58       	subi	r30, 0x83	; 131
    3730:	f8 40       	sbci	r31, 0x08	; 8
    3732:	ae 2f       	mov	r26, r30
    3734:	83 e8       	ldi	r24, 0x83	; 131
    3736:	98 e0       	ldi	r25, 0x08	; 8
    3738:	ac 01       	movw	r20, r24
    373a:	6a 2f       	mov	r22, r26
    373c:	80 91 ea 08 	lds	r24, 0x08EA	; 0x8008ea <_rn2483_serial>
    3740:	90 91 eb 08 	lds	r25, 0x08EB	; 0x8008eb <_rn2483_serial+0x1>
    3744:	a6 da       	rcall	.-2740   	; 0x2c92 <serial_send_bytes>
    3746:	81 11       	cpse	r24, r1
    3748:	0f c0       	rjmp	.+30     	; 0x3768 <_upload_message+0xa2>
    374a:	28 e2       	ldi	r18, 0x28	; 40
    374c:	35 e0       	ldi	r19, 0x05	; 5
    374e:	4d e2       	ldi	r20, 0x2D	; 45
    3750:	50 e0       	ldi	r21, 0x00	; 0
    3752:	61 e7       	ldi	r22, 0x71	; 113
    3754:	79 e0       	ldi	r23, 0x09	; 9
    3756:	80 91 e8 08 	lds	r24, 0x08E8	; 0x8008e8 <_reply_buffer_handle>
    375a:	90 91 e9 08 	lds	r25, 0x08E9	; 0x8008e9 <_reply_buffer_handle+0x1>
    375e:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <xStreamBufferReceive>
    3762:	81 e7       	ldi	r24, 0x71	; 113
    3764:	99 e0       	ldi	r25, 0x09	; 9
    3766:	02 c0       	rjmp	.+4      	; 0x376c <_upload_message+0xa6>
    3768:	80 e0       	ldi	r24, 0x00	; 0
    376a:	90 e0       	ldi	r25, 0x00	; 0
    376c:	df 91       	pop	r29
    376e:	cf 91       	pop	r28
    3770:	1f 91       	pop	r17
    3772:	0f 91       	pop	r16
    3774:	08 95       	ret

00003776 <_reply2return_code>:
    3776:	af 92       	push	r10
    3778:	bf 92       	push	r11
    377a:	cf 92       	push	r12
    377c:	df 92       	push	r13
    377e:	ef 92       	push	r14
    3780:	ff 92       	push	r15
    3782:	0f 93       	push	r16
    3784:	1f 93       	push	r17
    3786:	cf 93       	push	r28
    3788:	df 93       	push	r29
    378a:	6c 01       	movw	r12, r24
    378c:	fc 01       	movw	r30, r24
    378e:	01 90       	ld	r0, Z+
    3790:	00 20       	and	r0, r0
    3792:	e9 f7       	brne	.-6      	; 0x378e <_reply2return_code+0x18>
    3794:	31 97       	sbiw	r30, 0x01	; 1
    3796:	7f 01       	movw	r14, r30
    3798:	e8 1a       	sub	r14, r24
    379a:	f9 0a       	sbc	r15, r25
    379c:	04 ea       	ldi	r16, 0xA4	; 164
    379e:	17 e0       	ldi	r17, 0x07	; 7
    37a0:	c0 e0       	ldi	r28, 0x00	; 0
    37a2:	d0 e0       	ldi	r29, 0x00	; 0
    37a4:	f8 01       	movw	r30, r16
    37a6:	60 81       	ld	r22, Z
    37a8:	71 81       	ldd	r23, Z+1	; 0x01
    37aa:	a7 01       	movw	r20, r14
    37ac:	c6 01       	movw	r24, r12
    37ae:	0e 94 5e 26 	call	0x4cbc	; 0x4cbc <strncasecmp>
    37b2:	89 2b       	or	r24, r25
    37b4:	49 f4       	brne	.+18     	; 0x37c8 <_reply2return_code+0x52>
    37b6:	fe 01       	movw	r30, r28
    37b8:	ee 0f       	add	r30, r30
    37ba:	ff 1f       	adc	r31, r31
    37bc:	ec 0f       	add	r30, r28
    37be:	fd 1f       	adc	r31, r29
    37c0:	ed 55       	subi	r30, 0x5D	; 93
    37c2:	f8 4f       	sbci	r31, 0xF8	; 248
    37c4:	80 81       	ld	r24, Z
    37c6:	07 c0       	rjmp	.+14     	; 0x37d6 <_reply2return_code+0x60>
    37c8:	21 96       	adiw	r28, 0x01	; 1
    37ca:	0d 5f       	subi	r16, 0xFD	; 253
    37cc:	1f 4f       	sbci	r17, 0xFF	; 255
    37ce:	c1 31       	cpi	r28, 0x11	; 17
    37d0:	d1 05       	cpc	r29, r1
    37d2:	41 f7       	brne	.-48     	; 0x37a4 <_reply2return_code+0x2e>
    37d4:	80 e1       	ldi	r24, 0x10	; 16
    37d6:	df 91       	pop	r29
    37d8:	cf 91       	pop	r28
    37da:	1f 91       	pop	r17
    37dc:	0f 91       	pop	r16
    37de:	ff 90       	pop	r15
    37e0:	ef 90       	pop	r14
    37e2:	df 90       	pop	r13
    37e4:	cf 90       	pop	r12
    37e6:	bf 90       	pop	r11
    37e8:	af 90       	pop	r10
    37ea:	08 95       	ret

000037ec <_upload_message_rc>:
    37ec:	6c df       	rcall	.-296    	; 0x36c6 <_upload_message>
    37ee:	c3 cf       	rjmp	.-122    	; 0x3776 <_reply2return_code>
    37f0:	08 95       	ret

000037f2 <lora_driver_flush_buffers>:
    37f2:	80 91 e8 08 	lds	r24, 0x08E8	; 0x8008e8 <_reply_buffer_handle>
    37f6:	90 91 e9 08 	lds	r25, 0x08E9	; 0x8008e9 <_reply_buffer_handle+0x1>
    37fa:	0c 94 56 0b 	jmp	0x16ac	; 0x16ac <xStreamBufferReset>
    37fe:	08 95       	ret

00003800 <lora_driver_create>:
    3800:	8f 92       	push	r8
    3802:	9f 92       	push	r9
    3804:	af 92       	push	r10
    3806:	cf 92       	push	r12
    3808:	ef 92       	push	r14
    380a:	0f 93       	push	r16
    380c:	cf 93       	push	r28
    380e:	c8 2f       	mov	r28, r24
    3810:	41 e0       	ldi	r20, 0x01	; 1
    3812:	60 e0       	ldi	r22, 0x00	; 0
    3814:	70 e0       	ldi	r23, 0x00	; 0
    3816:	88 ec       	ldi	r24, 0xC8	; 200
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	0e 94 2a 0b 	call	0x1654	; 0x1654 <xStreamBufferGenericCreate>
    381e:	90 93 e9 08 	sts	0x08E9, r25	; 0x8008e9 <_reply_buffer_handle+0x1>
    3822:	80 93 e8 08 	sts	0x08E8, r24	; 0x8008e8 <_reply_buffer_handle>
    3826:	0f 2e       	mov	r0, r31
    3828:	fd e1       	ldi	r31, 0x1D	; 29
    382a:	8f 2e       	mov	r8, r31
    382c:	fb e1       	ldi	r31, 0x1B	; 27
    382e:	9f 2e       	mov	r9, r31
    3830:	f0 2d       	mov	r31, r0
    3832:	68 94       	set
    3834:	aa 24       	eor	r10, r10
    3836:	a6 f8       	bld	r10, 6
    3838:	68 94       	set
    383a:	cc 24       	eor	r12, r12
    383c:	c6 f8       	bld	r12, 6
    383e:	e1 2c       	mov	r14, r1
    3840:	00 e0       	ldi	r16, 0x00	; 0
    3842:	23 e0       	ldi	r18, 0x03	; 3
    3844:	40 e0       	ldi	r20, 0x00	; 0
    3846:	51 ee       	ldi	r21, 0xE1	; 225
    3848:	60 e0       	ldi	r22, 0x00	; 0
    384a:	70 e0       	ldi	r23, 0x00	; 0
    384c:	8c 2f       	mov	r24, r28
    384e:	5d d9       	rcall	.-3398   	; 0x2b0a <serial_new_instance>
    3850:	90 93 eb 08 	sts	0x08EB, r25	; 0x8008eb <_rn2483_serial+0x1>
    3854:	80 93 ea 08 	sts	0x08EA, r24	; 0x8008ea <_rn2483_serial>
    3858:	e0 91 3c 0a 	lds	r30, 0x0A3C	; 0x800a3c <register_access+0x8>
    385c:	f0 91 3d 0a 	lds	r31, 0x0A3D	; 0x800a3d <register_access+0x9>
    3860:	64 e0       	ldi	r22, 0x04	; 4
    3862:	87 e0       	ldi	r24, 0x07	; 7
    3864:	91 e0       	ldi	r25, 0x01	; 1
    3866:	19 95       	eicall
    3868:	cf 91       	pop	r28
    386a:	0f 91       	pop	r16
    386c:	ef 90       	pop	r14
    386e:	cf 90       	pop	r12
    3870:	af 90       	pop	r10
    3872:	9f 90       	pop	r9
    3874:	8f 90       	pop	r8
    3876:	08 95       	ret

00003878 <lora_driver_reset_rn2483>:
    3878:	88 23       	and	r24, r24
    387a:	49 f0       	breq	.+18     	; 0x388e <lora_driver_reset_rn2483+0x16>
    387c:	e0 91 46 0a 	lds	r30, 0x0A46	; 0x800a46 <register_access+0x12>
    3880:	f0 91 47 0a 	lds	r31, 0x0A47	; 0x800a47 <register_access+0x13>
    3884:	64 e0       	ldi	r22, 0x04	; 4
    3886:	88 e0       	ldi	r24, 0x08	; 8
    3888:	91 e0       	ldi	r25, 0x01	; 1
    388a:	19 95       	eicall
    388c:	08 95       	ret
    388e:	e0 91 3c 0a 	lds	r30, 0x0A3C	; 0x800a3c <register_access+0x8>
    3892:	f0 91 3d 0a 	lds	r31, 0x0A3D	; 0x800a3d <register_access+0x9>
    3896:	64 e0       	ldi	r22, 0x04	; 4
    3898:	88 e0       	ldi	r24, 0x08	; 8
    389a:	91 e0       	ldi	r25, 0x01	; 1
    389c:	19 95       	eicall
    389e:	08 95       	ret

000038a0 <lora_driver_rn2483_factory_reset>:
    38a0:	60 e0       	ldi	r22, 0x00	; 0
    38a2:	70 e0       	ldi	r23, 0x00	; 0
    38a4:	8f e3       	ldi	r24, 0x3F	; 63
    38a6:	95 e0       	ldi	r25, 0x05	; 5
    38a8:	0e df       	rcall	.-484    	; 0x36c6 <_upload_message>
    38aa:	e1 e7       	ldi	r30, 0x71	; 113
    38ac:	f9 e0       	ldi	r31, 0x09	; 9
    38ae:	01 90       	ld	r0, Z+
    38b0:	00 20       	and	r0, r0
    38b2:	e9 f7       	brne	.-6      	; 0x38ae <lora_driver_rn2483_factory_reset+0xe>
    38b4:	31 97       	sbiw	r30, 0x01	; 1
    38b6:	e1 57       	subi	r30, 0x71	; 113
    38b8:	f9 40       	sbci	r31, 0x09	; 9
    38ba:	81 e0       	ldi	r24, 0x01	; 1
    38bc:	75 97       	sbiw	r30, 0x15	; 21
    38be:	08 f0       	brcs	.+2      	; 0x38c2 <lora_driver_rn2483_factory_reset+0x22>
    38c0:	80 e0       	ldi	r24, 0x00	; 0
    38c2:	08 95       	ret

000038c4 <lora_driver_get_rn2483_hweui>:
    38c4:	cf 93       	push	r28
    38c6:	df 93       	push	r29
    38c8:	ec 01       	movw	r28, r24
    38ca:	60 e0       	ldi	r22, 0x00	; 0
    38cc:	70 e0       	ldi	r23, 0x00	; 0
    38ce:	80 e5       	ldi	r24, 0x50	; 80
    38d0:	95 e0       	ldi	r25, 0x05	; 5
    38d2:	f9 de       	rcall	.-526    	; 0x36c6 <_upload_message>
    38d4:	e1 e7       	ldi	r30, 0x71	; 113
    38d6:	f9 e0       	ldi	r31, 0x09	; 9
    38d8:	01 90       	ld	r0, Z+
    38da:	00 20       	and	r0, r0
    38dc:	e9 f7       	brne	.-6      	; 0x38d8 <lora_driver_get_rn2483_hweui+0x14>
    38de:	e2 58       	subi	r30, 0x82	; 130
    38e0:	f9 40       	sbci	r31, 0x09	; 9
    38e2:	39 f4       	brne	.+14     	; 0x38f2 <lora_driver_get_rn2483_hweui+0x2e>
    38e4:	61 e7       	ldi	r22, 0x71	; 113
    38e6:	79 e0       	ldi	r23, 0x09	; 9
    38e8:	ce 01       	movw	r24, r28
    38ea:	0e 94 57 26 	call	0x4cae	; 0x4cae <strcpy>
    38ee:	80 e0       	ldi	r24, 0x00	; 0
    38f0:	02 c0       	rjmp	.+4      	; 0x38f6 <lora_driver_get_rn2483_hweui+0x32>
    38f2:	18 82       	st	Y, r1
    38f4:	81 e0       	ldi	r24, 0x01	; 1
    38f6:	df 91       	pop	r29
    38f8:	cf 91       	pop	r28
    38fa:	08 95       	ret

000038fc <lora_driver_set_device_identifier>:
    38fc:	fc 01       	movw	r30, r24
    38fe:	01 90       	ld	r0, Z+
    3900:	00 20       	and	r0, r0
    3902:	e9 f7       	brne	.-6      	; 0x38fe <lora_driver_set_device_identifier+0x2>
    3904:	9f 01       	movw	r18, r30
    3906:	21 51       	subi	r18, 0x11	; 17
    3908:	31 09       	sbc	r19, r1
    390a:	28 17       	cp	r18, r24
    390c:	39 07       	cpc	r19, r25
    390e:	29 f4       	brne	.+10     	; 0x391a <lora_driver_set_device_identifier+0x1e>
    3910:	bc 01       	movw	r22, r24
    3912:	8e e7       	ldi	r24, 0x7E	; 126
    3914:	95 e0       	ldi	r25, 0x05	; 5
    3916:	6a cf       	rjmp	.-300    	; 0x37ec <_upload_message_rc>
    3918:	08 95       	ret
    391a:	89 e0       	ldi	r24, 0x09	; 9
    391c:	08 95       	ret

0000391e <lora_driver_set_application_identifier>:
    391e:	fc 01       	movw	r30, r24
    3920:	01 90       	ld	r0, Z+
    3922:	00 20       	and	r0, r0
    3924:	e9 f7       	brne	.-6      	; 0x3920 <lora_driver_set_application_identifier+0x2>
    3926:	9f 01       	movw	r18, r30
    3928:	21 51       	subi	r18, 0x11	; 17
    392a:	31 09       	sbc	r19, r1
    392c:	28 17       	cp	r18, r24
    392e:	39 07       	cpc	r19, r25
    3930:	29 f4       	brne	.+10     	; 0x393c <lora_driver_set_application_identifier+0x1e>
    3932:	bc 01       	movw	r22, r24
    3934:	8d e8       	ldi	r24, 0x8D	; 141
    3936:	95 e0       	ldi	r25, 0x05	; 5
    3938:	59 cf       	rjmp	.-334    	; 0x37ec <_upload_message_rc>
    393a:	08 95       	ret
    393c:	89 e0       	ldi	r24, 0x09	; 9
    393e:	08 95       	ret

00003940 <lora_driver_set_application_key>:
    3940:	fc 01       	movw	r30, r24
    3942:	01 90       	ld	r0, Z+
    3944:	00 20       	and	r0, r0
    3946:	e9 f7       	brne	.-6      	; 0x3942 <lora_driver_set_application_key+0x2>
    3948:	9f 01       	movw	r18, r30
    394a:	21 52       	subi	r18, 0x21	; 33
    394c:	31 09       	sbc	r19, r1
    394e:	28 17       	cp	r18, r24
    3950:	39 07       	cpc	r19, r25
    3952:	29 f4       	brne	.+10     	; 0x395e <lora_driver_set_application_key+0x1e>
    3954:	bc 01       	movw	r22, r24
    3956:	8c e9       	ldi	r24, 0x9C	; 156
    3958:	95 e0       	ldi	r25, 0x05	; 5
    395a:	48 cf       	rjmp	.-368    	; 0x37ec <_upload_message_rc>
    395c:	08 95       	ret
    395e:	89 e0       	ldi	r24, 0x09	; 9
    3960:	08 95       	ret

00003962 <lora_driver_save_mac>:
    3962:	60 e0       	ldi	r22, 0x00	; 0
    3964:	70 e0       	ldi	r23, 0x00	; 0
    3966:	8b ed       	ldi	r24, 0xDB	; 219
    3968:	95 e0       	ldi	r25, 0x05	; 5
    396a:	40 cf       	rjmp	.-384    	; 0x37ec <_upload_message_rc>
    396c:	08 95       	ret

0000396e <lora_driver_join>:
    396e:	e8 2f       	mov	r30, r24
    3970:	f0 e0       	ldi	r31, 0x00	; 0
    3972:	ee 0f       	add	r30, r30
    3974:	ff 1f       	adc	r31, r31
    3976:	e1 56       	subi	r30, 0x61	; 97
    3978:	f8 4f       	sbci	r31, 0xF8	; 248
    397a:	60 81       	ld	r22, Z
    397c:	71 81       	ldd	r23, Z+1	; 0x01
    397e:	84 ee       	ldi	r24, 0xE4	; 228
    3980:	95 e0       	ldi	r25, 0x05	; 5
    3982:	34 df       	rcall	.-408    	; 0x37ec <_upload_message_rc>
    3984:	81 11       	cpse	r24, r1
    3986:	12 c0       	rjmp	.+36     	; 0x39ac <lora_driver_join+0x3e>
    3988:	28 e2       	ldi	r18, 0x28	; 40
    398a:	35 e0       	ldi	r19, 0x05	; 5
    398c:	4d e2       	ldi	r20, 0x2D	; 45
    398e:	50 e0       	ldi	r21, 0x00	; 0
    3990:	61 e7       	ldi	r22, 0x71	; 113
    3992:	79 e0       	ldi	r23, 0x09	; 9
    3994:	80 91 e8 08 	lds	r24, 0x08E8	; 0x8008e8 <_reply_buffer_handle>
    3998:	90 91 e9 08 	lds	r25, 0x08E9	; 0x8008e9 <_reply_buffer_handle+0x1>
    399c:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <xStreamBufferReceive>
    39a0:	88 23       	and	r24, r24
    39a2:	21 f0       	breq	.+8      	; 0x39ac <lora_driver_join+0x3e>
    39a4:	81 e7       	ldi	r24, 0x71	; 113
    39a6:	99 e0       	ldi	r25, 0x09	; 9
    39a8:	e6 ce       	rjmp	.-564    	; 0x3776 <_reply2return_code>
    39aa:	08 95       	ret
    39ac:	81 e7       	ldi	r24, 0x71	; 113
    39ae:	99 e0       	ldi	r25, 0x09	; 9
    39b0:	e2 ce       	rjmp	.-572    	; 0x3776 <_reply2return_code>
    39b2:	08 95       	ret

000039b4 <lora_driver_sent_upload_message>:
    39b4:	cf 93       	push	r28
    39b6:	df 93       	push	r29
    39b8:	1f 92       	push	r1
    39ba:	cd b7       	in	r28, 0x3d	; 61
    39bc:	de b7       	in	r29, 0x3e	; 62
    39be:	db 01       	movw	r26, r22
    39c0:	11 96       	adiw	r26, 0x01	; 1
    39c2:	9c 91       	ld	r25, X
    39c4:	11 97       	sbiw	r26, 0x01	; 1
    39c6:	95 31       	cpi	r25, 0x15	; 21
    39c8:	08 f0       	brcs	.+2      	; 0x39cc <lora_driver_sent_upload_message+0x18>
    39ca:	87 c0       	rjmp	.+270    	; 0x3ada <lora_driver_sent_upload_message+0x126>
    39cc:	99 23       	and	r25, r25
    39ce:	81 f1       	breq	.+96     	; 0x3a30 <lora_driver_sent_upload_message+0x7c>
    39d0:	60 e0       	ldi	r22, 0x00	; 0
    39d2:	70 e0       	ldi	r23, 0x00	; 0
    39d4:	27 2f       	mov	r18, r23
    39d6:	30 e0       	ldi	r19, 0x00	; 0
    39d8:	46 2f       	mov	r20, r22
    39da:	50 e0       	ldi	r21, 0x00	; 0
    39dc:	fd 01       	movw	r30, r26
    39de:	e4 0f       	add	r30, r20
    39e0:	f5 1f       	adc	r31, r21
    39e2:	92 81       	ldd	r25, Z+2	; 0x02
    39e4:	92 95       	swap	r25
    39e6:	9f 70       	andi	r25, 0x0F	; 15
    39e8:	9a 30       	cpi	r25, 0x0A	; 10
    39ea:	10 f0       	brcs	.+4      	; 0x39f0 <lora_driver_sent_upload_message+0x3c>
    39ec:	99 5c       	subi	r25, 0xC9	; 201
    39ee:	01 c0       	rjmp	.+2      	; 0x39f2 <lora_driver_sent_upload_message+0x3e>
    39f0:	90 5d       	subi	r25, 0xD0	; 208
    39f2:	f9 01       	movw	r30, r18
    39f4:	ee 5f       	subi	r30, 0xFE	; 254
    39f6:	f6 4f       	sbci	r31, 0xF6	; 246
    39f8:	90 83       	st	Z, r25
    39fa:	2f 5f       	subi	r18, 0xFF	; 255
    39fc:	3f 4f       	sbci	r19, 0xFF	; 255
    39fe:	fd 01       	movw	r30, r26
    3a00:	e4 0f       	add	r30, r20
    3a02:	f5 1f       	adc	r31, r21
    3a04:	92 81       	ldd	r25, Z+2	; 0x02
    3a06:	9f 70       	andi	r25, 0x0F	; 15
    3a08:	49 2f       	mov	r20, r25
    3a0a:	50 e0       	ldi	r21, 0x00	; 0
    3a0c:	4a 30       	cpi	r20, 0x0A	; 10
    3a0e:	51 05       	cpc	r21, r1
    3a10:	14 f0       	brlt	.+4      	; 0x3a16 <lora_driver_sent_upload_message+0x62>
    3a12:	99 5c       	subi	r25, 0xC9	; 201
    3a14:	01 c0       	rjmp	.+2      	; 0x3a18 <lora_driver_sent_upload_message+0x64>
    3a16:	90 5d       	subi	r25, 0xD0	; 208
    3a18:	f9 01       	movw	r30, r18
    3a1a:	ee 5f       	subi	r30, 0xFE	; 254
    3a1c:	f6 4f       	sbci	r31, 0xF6	; 246
    3a1e:	90 83       	st	Z, r25
    3a20:	7e 5f       	subi	r23, 0xFE	; 254
    3a22:	6f 5f       	subi	r22, 0xFF	; 255
    3a24:	11 96       	adiw	r26, 0x01	; 1
    3a26:	9c 91       	ld	r25, X
    3a28:	11 97       	sbiw	r26, 0x01	; 1
    3a2a:	69 17       	cp	r22, r25
    3a2c:	98 f2       	brcs	.-90     	; 0x39d4 <lora_driver_sent_upload_message+0x20>
    3a2e:	01 c0       	rjmp	.+2      	; 0x3a32 <lora_driver_sent_upload_message+0x7e>
    3a30:	70 e0       	ldi	r23, 0x00	; 0
    3a32:	e7 2f       	mov	r30, r23
    3a34:	f0 e0       	ldi	r31, 0x00	; 0
    3a36:	ee 5f       	subi	r30, 0xFE	; 254
    3a38:	f6 4f       	sbci	r31, 0xF6	; 246
    3a3a:	10 82       	st	Z, r1
    3a3c:	4c 91       	ld	r20, X
    3a3e:	81 11       	cpse	r24, r1
    3a40:	03 c0       	rjmp	.+6      	; 0x3a48 <lora_driver_sent_upload_message+0x94>
    3a42:	8d ee       	ldi	r24, 0xED	; 237
    3a44:	95 e0       	ldi	r25, 0x05	; 5
    3a46:	02 c0       	rjmp	.+4      	; 0x3a4c <lora_driver_sent_upload_message+0x98>
    3a48:	8f ee       	ldi	r24, 0xEF	; 239
    3a4a:	95 e0       	ldi	r25, 0x05	; 5
    3a4c:	22 e0       	ldi	r18, 0x02	; 2
    3a4e:	39 e0       	ldi	r19, 0x09	; 9
    3a50:	3f 93       	push	r19
    3a52:	2f 93       	push	r18
    3a54:	1f 92       	push	r1
    3a56:	4f 93       	push	r20
    3a58:	9f 93       	push	r25
    3a5a:	8f 93       	push	r24
    3a5c:	83 ef       	ldi	r24, 0xF3	; 243
    3a5e:	95 e0       	ldi	r25, 0x05	; 5
    3a60:	9f 93       	push	r25
    3a62:	8f 93       	push	r24
    3a64:	84 e4       	ldi	r24, 0x44	; 68
    3a66:	99 e0       	ldi	r25, 0x09	; 9
    3a68:	9f 93       	push	r25
    3a6a:	8f 93       	push	r24
    3a6c:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <sprintf>
    3a70:	60 e0       	ldi	r22, 0x00	; 0
    3a72:	70 e0       	ldi	r23, 0x00	; 0
    3a74:	84 e4       	ldi	r24, 0x44	; 68
    3a76:	99 e0       	ldi	r25, 0x09	; 9
    3a78:	b9 de       	rcall	.-654    	; 0x37ec <_upload_message_rc>
    3a7a:	0f b6       	in	r0, 0x3f	; 63
    3a7c:	f8 94       	cli
    3a7e:	de bf       	out	0x3e, r29	; 62
    3a80:	0f be       	out	0x3f, r0	; 63
    3a82:	cd bf       	out	0x3d, r28	; 61
    3a84:	8e 30       	cpi	r24, 0x0E	; 14
    3a86:	51 f5       	brne	.+84     	; 0x3adc <lora_driver_sent_upload_message+0x128>
    3a88:	87 e0       	ldi	r24, 0x07	; 7
    3a8a:	89 83       	std	Y+1, r24	; 0x01
    3a8c:	be 01       	movw	r22, r28
    3a8e:	6f 5f       	subi	r22, 0xFF	; 255
    3a90:	7f 4f       	sbci	r23, 0xFF	; 255
    3a92:	81 e7       	ldi	r24, 0x71	; 113
    3a94:	99 e0       	ldi	r25, 0x09	; 9
    3a96:	3c d1       	rcall	.+632    	; 0x3d10 <decode_port_no>
    3a98:	80 93 ec 08 	sts	0x08EC, r24	; 0x8008ec <_downlink_payload>
    3a9c:	e9 81       	ldd	r30, Y+1	; 0x01
    3a9e:	f0 e0       	ldi	r31, 0x00	; 0
    3aa0:	ef 58       	subi	r30, 0x8F	; 143
    3aa2:	f6 4f       	sbci	r31, 0xF6	; 246
    3aa4:	df 01       	movw	r26, r30
    3aa6:	0d 90       	ld	r0, X+
    3aa8:	00 20       	and	r0, r0
    3aaa:	e9 f7       	brne	.-6      	; 0x3aa6 <lora_driver_sent_upload_message+0xf2>
    3aac:	11 97       	sbiw	r26, 0x01	; 1
    3aae:	ae 1b       	sub	r26, r30
    3ab0:	bf 0b       	sbc	r27, r31
    3ab2:	aa 23       	and	r26, r26
    3ab4:	81 f0       	breq	.+32     	; 0x3ad6 <lora_driver_sent_upload_message+0x122>
    3ab6:	bb 27       	eor	r27, r27
    3ab8:	11 97       	sbiw	r26, 0x01	; 1
    3aba:	cd 01       	movw	r24, r26
    3abc:	0a f4       	brpl	.+2      	; 0x3ac0 <lora_driver_sent_upload_message+0x10c>
    3abe:	01 96       	adiw	r24, 0x01	; 1
    3ac0:	95 95       	asr	r25
    3ac2:	87 95       	ror	r24
    3ac4:	80 93 ed 08 	sts	0x08ED, r24	; 0x8008ed <_downlink_payload+0x1>
    3ac8:	af 01       	movw	r20, r30
    3aca:	4f 5f       	subi	r20, 0xFF	; 255
    3acc:	5f 4f       	sbci	r21, 0xFF	; 255
    3ace:	64 e1       	ldi	r22, 0x14	; 20
    3ad0:	8e ee       	ldi	r24, 0xEE	; 238
    3ad2:	98 e0       	ldi	r25, 0x08	; 8
    3ad4:	49 d1       	rcall	.+658    	; 0x3d68 <decode_hexadecimal_string_bytes>
    3ad6:	8e e0       	ldi	r24, 0x0E	; 14
    3ad8:	01 c0       	rjmp	.+2      	; 0x3adc <lora_driver_sent_upload_message+0x128>
    3ada:	84 e1       	ldi	r24, 0x14	; 20
    3adc:	0f 90       	pop	r0
    3ade:	df 91       	pop	r29
    3ae0:	cf 91       	pop	r28
    3ae2:	08 95       	ret

00003ae4 <lora_driver_set_adaptive_data_rate>:
    3ae4:	81 30       	cpi	r24, 0x01	; 1
    3ae6:	19 f0       	breq	.+6      	; 0x3aee <lora_driver_set_adaptive_data_rate+0xa>
    3ae8:	63 e0       	ldi	r22, 0x03	; 3
    3aea:	76 e0       	ldi	r23, 0x06	; 6
    3aec:	02 c0       	rjmp	.+4      	; 0x3af2 <lora_driver_set_adaptive_data_rate+0xe>
    3aee:	63 ec       	ldi	r22, 0xC3	; 195
    3af0:	76 e0       	ldi	r23, 0x06	; 6
    3af2:	87 e0       	ldi	r24, 0x07	; 7
    3af4:	96 e0       	ldi	r25, 0x06	; 6
    3af6:	7a ce       	rjmp	.-780    	; 0x37ec <_upload_message_rc>
    3af8:	08 95       	ret

00003afa <lora_driver_configure_to_eu868>:
    3afa:	2f 92       	push	r2
    3afc:	3f 92       	push	r3
    3afe:	4f 92       	push	r4
    3b00:	5f 92       	push	r5
    3b02:	6f 92       	push	r6
    3b04:	7f 92       	push	r7
    3b06:	8f 92       	push	r8
    3b08:	9f 92       	push	r9
    3b0a:	af 92       	push	r10
    3b0c:	bf 92       	push	r11
    3b0e:	cf 92       	push	r12
    3b10:	df 92       	push	r13
    3b12:	ef 92       	push	r14
    3b14:	ff 92       	push	r15
    3b16:	0f 93       	push	r16
    3b18:	1f 93       	push	r17
    3b1a:	cf 93       	push	r28
    3b1c:	df 93       	push	r29
    3b1e:	cd b7       	in	r28, 0x3d	; 61
    3b20:	de b7       	in	r29, 0x3e	; 62
    3b22:	a0 97       	sbiw	r28, 0x20	; 32
    3b24:	0f b6       	in	r0, 0x3f	; 63
    3b26:	f8 94       	cli
    3b28:	de bf       	out	0x3e, r29	; 62
    3b2a:	0f be       	out	0x3f, r0	; 63
    3b2c:	cd bf       	out	0x3d, r28	; 61
    3b2e:	6c e4       	ldi	r22, 0x4C	; 76
    3b30:	76 e0       	ldi	r23, 0x06	; 6
    3b32:	88 e5       	ldi	r24, 0x58	; 88
    3b34:	96 e0       	ldi	r25, 0x06	; 6
    3b36:	c7 dd       	rcall	.-1138   	; 0x36c6 <_upload_message>
    3b38:	1e de       	rcall	.-964    	; 0x3776 <_reply2return_code>
    3b3a:	81 11       	cpse	r24, r1
    3b3c:	a3 c0       	rjmp	.+326    	; 0x3c84 <lora_driver_configure_to_eu868+0x18a>
    3b3e:	80 e2       	ldi	r24, 0x20	; 32
    3b40:	e1 e2       	ldi	r30, 0x21	; 33
    3b42:	f2 e0       	ldi	r31, 0x02	; 2
    3b44:	de 01       	movw	r26, r28
    3b46:	11 96       	adiw	r26, 0x01	; 1
    3b48:	01 90       	ld	r0, Z+
    3b4a:	0d 92       	st	X+, r0
    3b4c:	8a 95       	dec	r24
    3b4e:	e1 f7       	brne	.-8      	; 0x3b48 <lora_driver_configure_to_eu868+0x4e>
    3b50:	9e 01       	movw	r18, r28
    3b52:	2f 5f       	subi	r18, 0xFF	; 255
    3b54:	3f 4f       	sbci	r19, 0xFF	; 255
    3b56:	69 01       	movw	r12, r18
    3b58:	e1 2c       	mov	r14, r1
    3b5a:	f1 2c       	mov	r15, r1
    3b5c:	0f 2e       	mov	r0, r31
    3b5e:	f4 e6       	ldi	r31, 0x64	; 100
    3b60:	af 2e       	mov	r10, r31
    3b62:	f6 e0       	ldi	r31, 0x06	; 6
    3b64:	bf 2e       	mov	r11, r31
    3b66:	f0 2d       	mov	r31, r0
    3b68:	04 e4       	ldi	r16, 0x44	; 68
    3b6a:	19 e0       	ldi	r17, 0x09	; 9
    3b6c:	0f 2e       	mov	r0, r31
    3b6e:	fd e7       	ldi	r31, 0x7D	; 125
    3b70:	4f 2e       	mov	r4, r31
    3b72:	f6 e0       	ldi	r31, 0x06	; 6
    3b74:	5f 2e       	mov	r5, r31
    3b76:	f0 2d       	mov	r31, r0
    3b78:	0f 2e       	mov	r0, r31
    3b7a:	f4 e9       	ldi	r31, 0x94	; 148
    3b7c:	8f 2e       	mov	r8, r31
    3b7e:	f6 e0       	ldi	r31, 0x06	; 6
    3b80:	9f 2e       	mov	r9, r31
    3b82:	f0 2d       	mov	r31, r0
    3b84:	0f 2e       	mov	r0, r31
    3b86:	fe ea       	ldi	r31, 0xAE	; 174
    3b88:	6f 2e       	mov	r6, r31
    3b8a:	f6 e0       	ldi	r31, 0x06	; 6
    3b8c:	7f 2e       	mov	r7, r31
    3b8e:	f0 2d       	mov	r31, r0
    3b90:	3e 2c       	mov	r3, r14
    3b92:	2f 2c       	mov	r2, r15
    3b94:	ff 92       	push	r15
    3b96:	ef 92       	push	r14
    3b98:	bf 92       	push	r11
    3b9a:	af 92       	push	r10
    3b9c:	1f 93       	push	r17
    3b9e:	0f 93       	push	r16
    3ba0:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <sprintf>
    3ba4:	60 e0       	ldi	r22, 0x00	; 0
    3ba6:	70 e0       	ldi	r23, 0x00	; 0
    3ba8:	c8 01       	movw	r24, r16
    3baa:	8d dd       	rcall	.-1254   	; 0x36c6 <_upload_message>
    3bac:	e4 dd       	rcall	.-1080   	; 0x3776 <_reply2return_code>
    3bae:	0f 90       	pop	r0
    3bb0:	0f 90       	pop	r0
    3bb2:	0f 90       	pop	r0
    3bb4:	0f 90       	pop	r0
    3bb6:	0f 90       	pop	r0
    3bb8:	0f 90       	pop	r0
    3bba:	81 11       	cpse	r24, r1
    3bbc:	63 c0       	rjmp	.+198    	; 0x3c84 <lora_driver_configure_to_eu868+0x18a>
    3bbe:	32 e0       	ldi	r19, 0x02	; 2
    3bc0:	3e 15       	cp	r19, r14
    3bc2:	e8 f4       	brcc	.+58     	; 0x3bfe <lora_driver_configure_to_eu868+0x104>
    3bc4:	f6 01       	movw	r30, r12
    3bc6:	83 81       	ldd	r24, Z+3	; 0x03
    3bc8:	8f 93       	push	r24
    3bca:	82 81       	ldd	r24, Z+2	; 0x02
    3bcc:	8f 93       	push	r24
    3bce:	81 81       	ldd	r24, Z+1	; 0x01
    3bd0:	8f 93       	push	r24
    3bd2:	80 81       	ld	r24, Z
    3bd4:	8f 93       	push	r24
    3bd6:	ff 92       	push	r15
    3bd8:	ef 92       	push	r14
    3bda:	5f 92       	push	r5
    3bdc:	4f 92       	push	r4
    3bde:	1f 93       	push	r17
    3be0:	0f 93       	push	r16
    3be2:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <sprintf>
    3be6:	60 e0       	ldi	r22, 0x00	; 0
    3be8:	70 e0       	ldi	r23, 0x00	; 0
    3bea:	c8 01       	movw	r24, r16
    3bec:	6c dd       	rcall	.-1320   	; 0x36c6 <_upload_message>
    3bee:	c3 dd       	rcall	.-1146   	; 0x3776 <_reply2return_code>
    3bf0:	0f b6       	in	r0, 0x3f	; 63
    3bf2:	f8 94       	cli
    3bf4:	de bf       	out	0x3e, r29	; 62
    3bf6:	0f be       	out	0x3f, r0	; 63
    3bf8:	cd bf       	out	0x3d, r28	; 61
    3bfa:	81 11       	cpse	r24, r1
    3bfc:	43 c0       	rjmp	.+134    	; 0x3c84 <lora_driver_configure_to_eu868+0x18a>
    3bfe:	2f 92       	push	r2
    3c00:	3f 92       	push	r3
    3c02:	9f 92       	push	r9
    3c04:	8f 92       	push	r8
    3c06:	1f 93       	push	r17
    3c08:	0f 93       	push	r16
    3c0a:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <sprintf>
    3c0e:	60 e0       	ldi	r22, 0x00	; 0
    3c10:	70 e0       	ldi	r23, 0x00	; 0
    3c12:	c8 01       	movw	r24, r16
    3c14:	58 dd       	rcall	.-1360   	; 0x36c6 <_upload_message>
    3c16:	af dd       	rcall	.-1186   	; 0x3776 <_reply2return_code>
    3c18:	0f 90       	pop	r0
    3c1a:	0f 90       	pop	r0
    3c1c:	0f 90       	pop	r0
    3c1e:	0f 90       	pop	r0
    3c20:	0f 90       	pop	r0
    3c22:	0f 90       	pop	r0
    3c24:	81 11       	cpse	r24, r1
    3c26:	2e c0       	rjmp	.+92     	; 0x3c84 <lora_driver_configure_to_eu868+0x18a>
    3c28:	2f 92       	push	r2
    3c2a:	3f 92       	push	r3
    3c2c:	7f 92       	push	r7
    3c2e:	6f 92       	push	r6
    3c30:	1f 93       	push	r17
    3c32:	0f 93       	push	r16
    3c34:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <sprintf>
    3c38:	60 e0       	ldi	r22, 0x00	; 0
    3c3a:	70 e0       	ldi	r23, 0x00	; 0
    3c3c:	c8 01       	movw	r24, r16
    3c3e:	43 dd       	rcall	.-1402   	; 0x36c6 <_upload_message>
    3c40:	9a dd       	rcall	.-1228   	; 0x3776 <_reply2return_code>
    3c42:	0f 90       	pop	r0
    3c44:	0f 90       	pop	r0
    3c46:	0f 90       	pop	r0
    3c48:	0f 90       	pop	r0
    3c4a:	0f 90       	pop	r0
    3c4c:	0f 90       	pop	r0
    3c4e:	81 11       	cpse	r24, r1
    3c50:	19 c0       	rjmp	.+50     	; 0x3c84 <lora_driver_configure_to_eu868+0x18a>
    3c52:	3f ef       	ldi	r19, 0xFF	; 255
    3c54:	e3 1a       	sub	r14, r19
    3c56:	f3 0a       	sbc	r15, r19
    3c58:	84 e0       	ldi	r24, 0x04	; 4
    3c5a:	c8 0e       	add	r12, r24
    3c5c:	d1 1c       	adc	r13, r1
    3c5e:	98 e0       	ldi	r25, 0x08	; 8
    3c60:	e9 16       	cp	r14, r25
    3c62:	f1 04       	cpc	r15, r1
    3c64:	09 f0       	breq	.+2      	; 0x3c68 <lora_driver_configure_to_eu868+0x16e>
    3c66:	94 cf       	rjmp	.-216    	; 0x3b90 <lora_driver_configure_to_eu868+0x96>
    3c68:	60 e0       	ldi	r22, 0x00	; 0
    3c6a:	70 e0       	ldi	r23, 0x00	; 0
    3c6c:	86 ec       	ldi	r24, 0xC6	; 198
    3c6e:	96 e0       	ldi	r25, 0x06	; 6
    3c70:	2a dd       	rcall	.-1452   	; 0x36c6 <_upload_message>
    3c72:	81 dd       	rcall	.-1278   	; 0x3776 <_reply2return_code>
    3c74:	81 11       	cpse	r24, r1
    3c76:	06 c0       	rjmp	.+12     	; 0x3c84 <lora_driver_configure_to_eu868+0x18a>
    3c78:	60 e0       	ldi	r22, 0x00	; 0
    3c7a:	70 e0       	ldi	r23, 0x00	; 0
    3c7c:	87 ed       	ldi	r24, 0xD7	; 215
    3c7e:	96 e0       	ldi	r25, 0x06	; 6
    3c80:	22 dd       	rcall	.-1468   	; 0x36c6 <_upload_message>
    3c82:	79 dd       	rcall	.-1294   	; 0x3776 <_reply2return_code>
    3c84:	a0 96       	adiw	r28, 0x20	; 32
    3c86:	0f b6       	in	r0, 0x3f	; 63
    3c88:	f8 94       	cli
    3c8a:	de bf       	out	0x3e, r29	; 62
    3c8c:	0f be       	out	0x3f, r0	; 63
    3c8e:	cd bf       	out	0x3d, r28	; 61
    3c90:	df 91       	pop	r29
    3c92:	cf 91       	pop	r28
    3c94:	1f 91       	pop	r17
    3c96:	0f 91       	pop	r16
    3c98:	ff 90       	pop	r15
    3c9a:	ef 90       	pop	r14
    3c9c:	df 90       	pop	r13
    3c9e:	cf 90       	pop	r12
    3ca0:	bf 90       	pop	r11
    3ca2:	af 90       	pop	r10
    3ca4:	9f 90       	pop	r9
    3ca6:	8f 90       	pop	r8
    3ca8:	7f 90       	pop	r7
    3caa:	6f 90       	pop	r6
    3cac:	5f 90       	pop	r5
    3cae:	4f 90       	pop	r4
    3cb0:	3f 90       	pop	r3
    3cb2:	2f 90       	pop	r2
    3cb4:	08 95       	ret

00003cb6 <lora_driver_set_otaa_identity>:
    3cb6:	ef 92       	push	r14
    3cb8:	ff 92       	push	r15
    3cba:	0f 93       	push	r16
    3cbc:	1f 93       	push	r17
    3cbe:	cf 93       	push	r28
    3cc0:	df 93       	push	r29
    3cc2:	ec 01       	movw	r28, r24
    3cc4:	8b 01       	movw	r16, r22
    3cc6:	7a 01       	movw	r14, r20
    3cc8:	81 e0       	ldi	r24, 0x01	; 1
    3cca:	0c df       	rcall	.-488    	; 0x3ae4 <lora_driver_set_adaptive_data_rate>
    3ccc:	81 11       	cpse	r24, r1
    3cce:	0d c0       	rjmp	.+26     	; 0x3cea <lora_driver_set_otaa_identity+0x34>
    3cd0:	ce 01       	movw	r24, r28
    3cd2:	25 de       	rcall	.-950    	; 0x391e <lora_driver_set_application_identifier>
    3cd4:	81 11       	cpse	r24, r1
    3cd6:	09 c0       	rjmp	.+18     	; 0x3cea <lora_driver_set_otaa_identity+0x34>
    3cd8:	c8 01       	movw	r24, r16
    3cda:	32 de       	rcall	.-924    	; 0x3940 <lora_driver_set_application_key>
    3cdc:	81 11       	cpse	r24, r1
    3cde:	05 c0       	rjmp	.+10     	; 0x3cea <lora_driver_set_otaa_identity+0x34>
    3ce0:	c7 01       	movw	r24, r14
    3ce2:	0c de       	rcall	.-1000   	; 0x38fc <lora_driver_set_device_identifier>
    3ce4:	81 11       	cpse	r24, r1
    3ce6:	01 c0       	rjmp	.+2      	; 0x3cea <lora_driver_set_otaa_identity+0x34>
    3ce8:	3c de       	rcall	.-904    	; 0x3962 <lora_driver_save_mac>
    3cea:	df 91       	pop	r29
    3cec:	cf 91       	pop	r28
    3cee:	1f 91       	pop	r17
    3cf0:	0f 91       	pop	r16
    3cf2:	ff 90       	pop	r15
    3cf4:	ef 90       	pop	r14
    3cf6:	08 95       	ret

00003cf8 <lora_driver_map_return_code_to_text>:
    3cf8:	90 e0       	ldi	r25, 0x00	; 0
    3cfa:	fc 01       	movw	r30, r24
    3cfc:	ee 0f       	add	r30, r30
    3cfe:	ff 1f       	adc	r31, r31
    3d00:	8e 0f       	add	r24, r30
    3d02:	9f 1f       	adc	r25, r31
    3d04:	fc 01       	movw	r30, r24
    3d06:	ed 55       	subi	r30, 0x5D	; 93
    3d08:	f8 4f       	sbci	r31, 0xF8	; 248
    3d0a:	81 81       	ldd	r24, Z+1	; 0x01
    3d0c:	92 81       	ldd	r25, Z+2	; 0x02
    3d0e:	08 95       	ret

00003d10 <decode_port_no>:
    3d10:	dc 01       	movw	r26, r24
    3d12:	00 97       	sbiw	r24, 0x00	; 0
    3d14:	29 f1       	breq	.+74     	; 0x3d60 <decode_port_no+0x50>
    3d16:	fb 01       	movw	r30, r22
    3d18:	20 81       	ld	r18, Z
    3d1a:	fc 01       	movw	r30, r24
    3d1c:	01 90       	ld	r0, Z+
    3d1e:	00 20       	and	r0, r0
    3d20:	e9 f7       	brne	.-6      	; 0x3d1c <decode_port_no+0xc>
    3d22:	31 97       	sbiw	r30, 0x01	; 1
    3d24:	e8 1b       	sub	r30, r24
    3d26:	f9 0b       	sbc	r31, r25
    3d28:	82 2f       	mov	r24, r18
    3d2a:	90 e0       	ldi	r25, 0x00	; 0
    3d2c:	e8 17       	cp	r30, r24
    3d2e:	f9 07       	cpc	r31, r25
    3d30:	c8 f0       	brcs	.+50     	; 0x3d64 <decode_port_no+0x54>
    3d32:	80 e0       	ldi	r24, 0x00	; 0
    3d34:	08 c0       	rjmp	.+16     	; 0x3d46 <decode_port_no+0x36>
    3d36:	88 0f       	add	r24, r24
    3d38:	38 2f       	mov	r19, r24
    3d3a:	33 0f       	add	r19, r19
    3d3c:	33 0f       	add	r19, r19
    3d3e:	83 0f       	add	r24, r19
    3d40:	80 53       	subi	r24, 0x30	; 48
    3d42:	89 0f       	add	r24, r25
    3d44:	2f 5f       	subi	r18, 0xFF	; 255
    3d46:	fd 01       	movw	r30, r26
    3d48:	e2 0f       	add	r30, r18
    3d4a:	f1 1d       	adc	r31, r1
    3d4c:	90 81       	ld	r25, Z
    3d4e:	30 ed       	ldi	r19, 0xD0	; 208
    3d50:	39 0f       	add	r19, r25
    3d52:	3a 30       	cpi	r19, 0x0A	; 10
    3d54:	10 f4       	brcc	.+4      	; 0x3d5a <decode_port_no+0x4a>
    3d56:	91 11       	cpse	r25, r1
    3d58:	ee cf       	rjmp	.-36     	; 0x3d36 <decode_port_no+0x26>
    3d5a:	fb 01       	movw	r30, r22
    3d5c:	20 83       	st	Z, r18
    3d5e:	08 95       	ret
    3d60:	80 e0       	ldi	r24, 0x00	; 0
    3d62:	08 95       	ret
    3d64:	80 e0       	ldi	r24, 0x00	; 0
    3d66:	08 95       	ret

00003d68 <decode_hexadecimal_string_bytes>:
    3d68:	0f 93       	push	r16
    3d6a:	1f 93       	push	r17
    3d6c:	cf 93       	push	r28
    3d6e:	df 93       	push	r29
    3d70:	dc 01       	movw	r26, r24
    3d72:	ea 01       	movw	r28, r20
    3d74:	20 97       	sbiw	r28, 0x00	; 0
    3d76:	e1 f1       	breq	.+120    	; 0x3df0 <decode_hexadecimal_string_bytes+0x88>
    3d78:	fa 01       	movw	r30, r20
    3d7a:	01 90       	ld	r0, Z+
    3d7c:	00 20       	and	r0, r0
    3d7e:	e9 f7       	brne	.-6      	; 0x3d7a <decode_hexadecimal_string_bytes+0x12>
    3d80:	31 97       	sbiw	r30, 0x01	; 1
    3d82:	e4 1b       	sub	r30, r20
    3d84:	f5 0b       	sbc	r31, r21
    3d86:	32 97       	sbiw	r30, 0x02	; 2
    3d88:	10 f5       	brcc	.+68     	; 0x3dce <decode_hexadecimal_string_bytes+0x66>
    3d8a:	32 c0       	rjmp	.+100    	; 0x3df0 <decode_hexadecimal_string_bytes+0x88>
    3d8c:	8d 01       	movw	r16, r26
    3d8e:	04 0f       	add	r16, r20
    3d90:	15 1f       	adc	r17, r21
    3d92:	30 e0       	ldi	r19, 0x00	; 0
    3d94:	ae 01       	movw	r20, r28
    3d96:	42 0f       	add	r20, r18
    3d98:	53 1f       	adc	r21, r19
    3d9a:	fa 01       	movw	r30, r20
    3d9c:	90 81       	ld	r25, Z
    3d9e:	91 34       	cpi	r25, 0x41	; 65
    3da0:	28 f0       	brcs	.+10     	; 0x3dac <decode_hexadecimal_string_bytes+0x44>
    3da2:	97 53       	subi	r25, 0x37	; 55
    3da4:	59 2f       	mov	r21, r25
    3da6:	52 95       	swap	r21
    3da8:	50 7f       	andi	r21, 0xF0	; 240
    3daa:	03 c0       	rjmp	.+6      	; 0x3db2 <decode_hexadecimal_string_bytes+0x4a>
    3dac:	59 2f       	mov	r21, r25
    3dae:	52 95       	swap	r21
    3db0:	50 7f       	andi	r21, 0xF0	; 240
    3db2:	2c 0f       	add	r18, r28
    3db4:	3d 1f       	adc	r19, r29
    3db6:	f9 01       	movw	r30, r18
    3db8:	91 81       	ldd	r25, Z+1	; 0x01
    3dba:	91 34       	cpi	r25, 0x41	; 65
    3dbc:	10 f0       	brcs	.+4      	; 0x3dc2 <decode_hexadecimal_string_bytes+0x5a>
    3dbe:	97 53       	subi	r25, 0x37	; 55
    3dc0:	01 c0       	rjmp	.+2      	; 0x3dc4 <decode_hexadecimal_string_bytes+0x5c>
    3dc2:	90 53       	subi	r25, 0x30	; 48
    3dc4:	95 0f       	add	r25, r21
    3dc6:	f8 01       	movw	r30, r16
    3dc8:	90 83       	st	Z, r25
    3dca:	8f 5f       	subi	r24, 0xFF	; 255
    3dcc:	01 c0       	rjmp	.+2      	; 0x3dd0 <decode_hexadecimal_string_bytes+0x68>
    3dce:	80 e0       	ldi	r24, 0x00	; 0
    3dd0:	28 2f       	mov	r18, r24
    3dd2:	22 0f       	add	r18, r18
    3dd4:	48 2f       	mov	r20, r24
    3dd6:	50 e0       	ldi	r21, 0x00	; 0
    3dd8:	fe 01       	movw	r30, r28
    3dda:	01 90       	ld	r0, Z+
    3ddc:	00 20       	and	r0, r0
    3dde:	e9 f7       	brne	.-6      	; 0x3dda <decode_hexadecimal_string_bytes+0x72>
    3de0:	31 97       	sbiw	r30, 0x01	; 1
    3de2:	ec 1b       	sub	r30, r28
    3de4:	fd 0b       	sbc	r31, r29
    3de6:	4e 17       	cp	r20, r30
    3de8:	5f 07       	cpc	r21, r31
    3dea:	10 f4       	brcc	.+4      	; 0x3df0 <decode_hexadecimal_string_bytes+0x88>
    3dec:	86 13       	cpse	r24, r22
    3dee:	ce cf       	rjmp	.-100    	; 0x3d8c <decode_hexadecimal_string_bytes+0x24>
    3df0:	df 91       	pop	r29
    3df2:	cf 91       	pop	r28
    3df4:	1f 91       	pop	r17
    3df6:	0f 91       	pop	r16
    3df8:	08 95       	ret

00003dfa <reg_read_register>:
    3dfa:	fc 01       	movw	r30, r24
    3dfc:	80 81       	ld	r24, Z
    3dfe:	08 95       	ret

00003e00 <reg_read_bit>:
    3e00:	fc 01       	movw	r30, r24
    3e02:	20 81       	ld	r18, Z
    3e04:	81 e0       	ldi	r24, 0x01	; 1
    3e06:	90 e0       	ldi	r25, 0x00	; 0
    3e08:	02 c0       	rjmp	.+4      	; 0x3e0e <reg_read_bit+0xe>
    3e0a:	88 0f       	add	r24, r24
    3e0c:	99 1f       	adc	r25, r25
    3e0e:	6a 95       	dec	r22
    3e10:	e2 f7       	brpl	.-8      	; 0x3e0a <reg_read_bit+0xa>
    3e12:	82 23       	and	r24, r18
    3e14:	08 95       	ret

00003e16 <reg_read_bits>:
    3e16:	fc 01       	movw	r30, r24
    3e18:	80 81       	ld	r24, Z
    3e1a:	86 23       	and	r24, r22
    3e1c:	08 95       	ret

00003e1e <reg_set_register>:
    3e1e:	fc 01       	movw	r30, r24
    3e20:	60 83       	st	Z, r22
    3e22:	08 95       	ret

00003e24 <reg_clear_register>:
    3e24:	fc 01       	movw	r30, r24
    3e26:	10 82       	st	Z, r1
    3e28:	08 95       	ret

00003e2a <reg_set_bit>:
    3e2a:	fc 01       	movw	r30, r24
    3e2c:	40 81       	ld	r20, Z
    3e2e:	21 e0       	ldi	r18, 0x01	; 1
    3e30:	30 e0       	ldi	r19, 0x00	; 0
    3e32:	02 c0       	rjmp	.+4      	; 0x3e38 <reg_set_bit+0xe>
    3e34:	22 0f       	add	r18, r18
    3e36:	33 1f       	adc	r19, r19
    3e38:	6a 95       	dec	r22
    3e3a:	e2 f7       	brpl	.-8      	; 0x3e34 <reg_set_bit+0xa>
    3e3c:	24 2b       	or	r18, r20
    3e3e:	20 83       	st	Z, r18
    3e40:	08 95       	ret

00003e42 <reg_set_bits>:
    3e42:	fc 01       	movw	r30, r24
    3e44:	20 81       	ld	r18, Z
    3e46:	62 2b       	or	r22, r18
    3e48:	60 83       	st	Z, r22
    3e4a:	08 95       	ret

00003e4c <reg_toggle_bit>:
    3e4c:	fc 01       	movw	r30, r24
    3e4e:	40 81       	ld	r20, Z
    3e50:	21 e0       	ldi	r18, 0x01	; 1
    3e52:	30 e0       	ldi	r19, 0x00	; 0
    3e54:	02 c0       	rjmp	.+4      	; 0x3e5a <reg_toggle_bit+0xe>
    3e56:	22 0f       	add	r18, r18
    3e58:	33 1f       	adc	r19, r19
    3e5a:	6a 95       	dec	r22
    3e5c:	e2 f7       	brpl	.-8      	; 0x3e56 <reg_toggle_bit+0xa>
    3e5e:	24 27       	eor	r18, r20
    3e60:	20 83       	st	Z, r18
    3e62:	08 95       	ret

00003e64 <reg_toggle_bits>:
    3e64:	fc 01       	movw	r30, r24
    3e66:	20 81       	ld	r18, Z
    3e68:	62 27       	eor	r22, r18
    3e6a:	60 83       	st	Z, r22
    3e6c:	08 95       	ret

00003e6e <reg_clear_bit>:
    3e6e:	fc 01       	movw	r30, r24
    3e70:	90 81       	ld	r25, Z
    3e72:	21 e0       	ldi	r18, 0x01	; 1
    3e74:	30 e0       	ldi	r19, 0x00	; 0
    3e76:	02 c0       	rjmp	.+4      	; 0x3e7c <reg_clear_bit+0xe>
    3e78:	22 0f       	add	r18, r18
    3e7a:	33 1f       	adc	r19, r19
    3e7c:	6a 95       	dec	r22
    3e7e:	e2 f7       	brpl	.-8      	; 0x3e78 <reg_clear_bit+0xa>
    3e80:	20 95       	com	r18
    3e82:	29 23       	and	r18, r25
    3e84:	20 83       	st	Z, r18
    3e86:	08 95       	ret

00003e88 <reg_clear_bits>:
    3e88:	fc 01       	movw	r30, r24
    3e8a:	90 81       	ld	r25, Z
    3e8c:	60 95       	com	r22
    3e8e:	69 23       	and	r22, r25
    3e90:	60 83       	st	Z, r22
    3e92:	08 95       	ret

00003e94 <_serial_call_back>:
    3e94:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <crc_sum.1941>
    3e98:	86 0f       	add	r24, r22
    3e9a:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <crc_sum.1941>
    3e9e:	90 91 a4 09 	lds	r25, 0x09A4	; 0x8009a4 <_mh_state>
    3ea2:	91 30       	cpi	r25, 0x01	; 1
    3ea4:	79 f0       	breq	.+30     	; 0x3ec4 <_serial_call_back+0x30>
    3ea6:	28 f0       	brcs	.+10     	; 0x3eb2 <_serial_call_back+0x1e>
    3ea8:	92 30       	cpi	r25, 0x02	; 2
    3eaa:	a9 f0       	breq	.+42     	; 0x3ed6 <_serial_call_back+0x42>
    3eac:	93 30       	cpi	r25, 0x03	; 3
    3eae:	19 f1       	breq	.+70     	; 0x3ef6 <_serial_call_back+0x62>
    3eb0:	08 95       	ret
    3eb2:	6f 3f       	cpi	r22, 0xFF	; 255
    3eb4:	09 f0       	breq	.+2      	; 0x3eb8 <_serial_call_back+0x24>
    3eb6:	48 c0       	rjmp	.+144    	; 0x3f48 <_serial_call_back+0xb4>
    3eb8:	10 92 a1 09 	sts	0x09A1, r1	; 0x8009a1 <crc_sum.1941>
    3ebc:	81 e0       	ldi	r24, 0x01	; 1
    3ebe:	80 93 a4 09 	sts	0x09A4, r24	; 0x8009a4 <_mh_state>
    3ec2:	08 95       	ret
    3ec4:	66 38       	cpi	r22, 0x86	; 134
    3ec6:	09 f0       	breq	.+2      	; 0x3eca <_serial_call_back+0x36>
    3ec8:	3f c0       	rjmp	.+126    	; 0x3f48 <_serial_call_back+0xb4>
    3eca:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <inDex.1939>
    3ece:	82 e0       	ldi	r24, 0x02	; 2
    3ed0:	80 93 a4 09 	sts	0x09A4, r24	; 0x8009a4 <_mh_state>
    3ed4:	08 95       	ret
    3ed6:	e0 91 a0 09 	lds	r30, 0x09A0	; 0x8009a0 <inDex.1939>
    3eda:	81 e0       	ldi	r24, 0x01	; 1
    3edc:	8e 0f       	add	r24, r30
    3ede:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <inDex.1939>
    3ee2:	f0 e0       	ldi	r31, 0x00	; 0
    3ee4:	e2 56       	subi	r30, 0x62	; 98
    3ee6:	f6 4f       	sbci	r31, 0xF6	; 246
    3ee8:	60 83       	st	Z, r22
    3eea:	82 30       	cpi	r24, 0x02	; 2
    3eec:	69 f5       	brne	.+90     	; 0x3f48 <_serial_call_back+0xb4>
    3eee:	83 e0       	ldi	r24, 0x03	; 3
    3ef0:	80 93 a4 09 	sts	0x09A4, r24	; 0x8009a4 <_mh_state>
    3ef4:	08 95       	ret
    3ef6:	90 91 a0 09 	lds	r25, 0x09A0	; 0x8009a0 <inDex.1939>
    3efa:	21 e0       	ldi	r18, 0x01	; 1
    3efc:	29 0f       	add	r18, r25
    3efe:	20 93 a0 09 	sts	0x09A0, r18	; 0x8009a0 <inDex.1939>
    3f02:	96 30       	cpi	r25, 0x06	; 6
    3f04:	09 f5       	brne	.+66     	; 0x3f48 <_serial_call_back+0xb4>
    3f06:	81 11       	cpse	r24, r1
    3f08:	0e c0       	rjmp	.+28     	; 0x3f26 <_serial_call_back+0x92>
    3f0a:	ee e9       	ldi	r30, 0x9E	; 158
    3f0c:	f9 e0       	ldi	r31, 0x09	; 9
    3f0e:	80 81       	ld	r24, Z
    3f10:	90 e0       	ldi	r25, 0x00	; 0
    3f12:	98 2f       	mov	r25, r24
    3f14:	88 27       	eor	r24, r24
    3f16:	21 81       	ldd	r18, Z+1	; 0x01
    3f18:	82 0f       	add	r24, r18
    3f1a:	91 1d       	adc	r25, r1
    3f1c:	90 93 a6 09 	sts	0x09A6, r25	; 0x8009a6 <_ppm+0x1>
    3f20:	80 93 a5 09 	sts	0x09A5, r24	; 0x8009a5 <_ppm>
    3f24:	04 c0       	rjmp	.+8      	; 0x3f2e <_serial_call_back+0x9a>
    3f26:	10 92 a6 09 	sts	0x09A6, r1	; 0x8009a6 <_ppm+0x1>
    3f2a:	10 92 a5 09 	sts	0x09A5, r1	; 0x8009a5 <_ppm>
    3f2e:	10 92 a4 09 	sts	0x09A4, r1	; 0x8009a4 <_mh_state>
    3f32:	e0 91 a2 09 	lds	r30, 0x09A2	; 0x8009a2 <_app_call_back>
    3f36:	f0 91 a3 09 	lds	r31, 0x09A3	; 0x8009a3 <_app_call_back+0x1>
    3f3a:	30 97       	sbiw	r30, 0x00	; 0
    3f3c:	29 f0       	breq	.+10     	; 0x3f48 <_serial_call_back+0xb4>
    3f3e:	80 91 a5 09 	lds	r24, 0x09A5	; 0x8009a5 <_ppm>
    3f42:	90 91 a6 09 	lds	r25, 0x09A6	; 0x8009a6 <_ppm+0x1>
    3f46:	19 95       	eicall
    3f48:	08 95       	ret

00003f4a <mh_z19_create>:
    3f4a:	8f 92       	push	r8
    3f4c:	9f 92       	push	r9
    3f4e:	af 92       	push	r10
    3f50:	cf 92       	push	r12
    3f52:	ef 92       	push	r14
    3f54:	0f 93       	push	r16
    3f56:	cf 93       	push	r28
    3f58:	df 93       	push	r29
    3f5a:	eb 01       	movw	r28, r22
    3f5c:	0f 2e       	mov	r0, r31
    3f5e:	fa e4       	ldi	r31, 0x4A	; 74
    3f60:	8f 2e       	mov	r8, r31
    3f62:	ff e1       	ldi	r31, 0x1F	; 31
    3f64:	9f 2e       	mov	r9, r31
    3f66:	f0 2d       	mov	r31, r0
    3f68:	68 94       	set
    3f6a:	aa 24       	eor	r10, r10
    3f6c:	a4 f8       	bld	r10, 4
    3f6e:	68 94       	set
    3f70:	cc 24       	eor	r12, r12
    3f72:	c4 f8       	bld	r12, 4
    3f74:	e1 2c       	mov	r14, r1
    3f76:	00 e0       	ldi	r16, 0x00	; 0
    3f78:	23 e0       	ldi	r18, 0x03	; 3
    3f7a:	40 e8       	ldi	r20, 0x80	; 128
    3f7c:	55 e2       	ldi	r21, 0x25	; 37
    3f7e:	60 e0       	ldi	r22, 0x00	; 0
    3f80:	70 e0       	ldi	r23, 0x00	; 0
    3f82:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <serial_new_instance>
    3f86:	90 93 a8 09 	sts	0x09A8, r25	; 0x8009a8 <_serial+0x1>
    3f8a:	80 93 a7 09 	sts	0x09A7, r24	; 0x8009a7 <_serial>
    3f8e:	d0 93 a3 09 	sts	0x09A3, r29	; 0x8009a3 <_app_call_back+0x1>
    3f92:	c0 93 a2 09 	sts	0x09A2, r28	; 0x8009a2 <_app_call_back>
    3f96:	df 91       	pop	r29
    3f98:	cf 91       	pop	r28
    3f9a:	0f 91       	pop	r16
    3f9c:	ef 90       	pop	r14
    3f9e:	cf 90       	pop	r12
    3fa0:	af 90       	pop	r10
    3fa2:	9f 90       	pop	r9
    3fa4:	8f 90       	pop	r8
    3fa6:	08 95       	ret

00003fa8 <rcServoSet>:
    3fa8:	65 36       	cpi	r22, 0x65	; 101
    3faa:	0c f0       	brlt	.+2      	; 0x3fae <rcServoSet+0x6>
    3fac:	64 e6       	ldi	r22, 0x64	; 100
    3fae:	6c 39       	cpi	r22, 0x9C	; 156
    3fb0:	0c f4       	brge	.+2      	; 0x3fb4 <rcServoSet+0xc>
    3fb2:	6c e9       	ldi	r22, 0x9C	; 156
    3fb4:	96 ef       	ldi	r25, 0xF6	; 246
    3fb6:	69 02       	muls	r22, r25
    3fb8:	b0 01       	movw	r22, r0
    3fba:	11 24       	eor	r1, r1
    3fbc:	68 54       	subi	r22, 0x48	; 72
    3fbe:	74 4f       	sbci	r23, 0xF4	; 244
    3fc0:	81 11       	cpse	r24, r1
    3fc2:	05 c0       	rjmp	.+10     	; 0x3fce <rcServoSet+0x26>
    3fc4:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    3fc8:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    3fcc:	08 95       	ret
    3fce:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    3fd2:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    3fd6:	08 95       	ret

00003fd8 <rcServoCreate>:
    3fd8:	ea e0       	ldi	r30, 0x0A	; 10
    3fda:	f1 e0       	ldi	r31, 0x01	; 1
    3fdc:	80 81       	ld	r24, Z
    3fde:	88 61       	ori	r24, 0x18	; 24
    3fe0:	80 83       	st	Z, r24
    3fe2:	8f e3       	ldi	r24, 0x3F	; 63
    3fe4:	9c e9       	ldi	r25, 0x9C	; 156
    3fe6:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
    3fea:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
    3fee:	60 e0       	ldi	r22, 0x00	; 0
    3ff0:	80 e0       	ldi	r24, 0x00	; 0
    3ff2:	da df       	rcall	.-76     	; 0x3fa8 <rcServoSet>
    3ff4:	60 e0       	ldi	r22, 0x00	; 0
    3ff6:	81 e0       	ldi	r24, 0x01	; 1
    3ff8:	d7 df       	rcall	.-82     	; 0x3fa8 <rcServoSet>
    3ffa:	e0 e2       	ldi	r30, 0x20	; 32
    3ffc:	f1 e0       	ldi	r31, 0x01	; 1
    3ffe:	80 81       	ld	r24, Z
    4000:	82 6a       	ori	r24, 0xA2	; 162
    4002:	80 83       	st	Z, r24
    4004:	e1 e2       	ldi	r30, 0x21	; 33
    4006:	f1 e0       	ldi	r31, 0x01	; 1
    4008:	80 81       	ld	r24, Z
    400a:	8a 61       	ori	r24, 0x1A	; 26
    400c:	80 83       	st	Z, r24
    400e:	08 95       	ret

00004010 <_callBack>:
    4010:	e0 91 b1 09 	lds	r30, 0x09B1	; 0x8009b1 <_callBackFunction>
    4014:	f0 91 b2 09 	lds	r31, 0x09B2	; 0x8009b2 <_callBackFunction+0x1>
    4018:	30 97       	sbiw	r30, 0x00	; 0
    401a:	09 f0       	breq	.+2      	; 0x401e <_callBack+0xe>
    401c:	19 95       	eicall
    401e:	08 95       	ret

00004020 <_tsl2591TwiCallback>:
    4020:	64 50       	subi	r22, 0x04	; 4
    4022:	62 30       	cpi	r22, 0x02	; 2
    4024:	08 f0       	brcs	.+2      	; 0x4028 <_tsl2591TwiCallback+0x8>
    4026:	3b c0       	rjmp	.+118    	; 0x409e <_tsl2591TwiCallback+0x7e>
    4028:	20 91 b0 09 	lds	r18, 0x09B0	; 0x8009b0 <_nextState>
    402c:	22 30       	cpi	r18, 0x02	; 2
    402e:	79 f0       	breq	.+30     	; 0x404e <_tsl2591TwiCallback+0x2e>
    4030:	18 f4       	brcc	.+6      	; 0x4038 <_tsl2591TwiCallback+0x18>
    4032:	21 30       	cpi	r18, 0x01	; 1
    4034:	31 f0       	breq	.+12     	; 0x4042 <_tsl2591TwiCallback+0x22>
    4036:	30 c0       	rjmp	.+96     	; 0x4098 <_tsl2591TwiCallback+0x78>
    4038:	23 30       	cpi	r18, 0x03	; 3
    403a:	81 f0       	breq	.+32     	; 0x405c <_tsl2591TwiCallback+0x3c>
    403c:	24 30       	cpi	r18, 0x04	; 4
    403e:	a1 f0       	breq	.+40     	; 0x4068 <_tsl2591TwiCallback+0x48>
    4040:	2b c0       	rjmp	.+86     	; 0x4098 <_tsl2591TwiCallback+0x78>
    4042:	22 e0       	ldi	r18, 0x02	; 2
    4044:	20 93 b0 09 	sts	0x09B0, r18	; 0x8009b0 <_nextState>
    4048:	61 e0       	ldi	r22, 0x01	; 1
    404a:	f8 c1       	rjmp	.+1008   	; 0x443c <twiReceive>
    404c:	08 95       	ret
    404e:	fa 01       	movw	r30, r20
    4050:	80 81       	ld	r24, Z
    4052:	80 93 ad 09 	sts	0x09AD, r24	; 0x8009ad <_deviceId>
    4056:	82 e0       	ldi	r24, 0x02	; 2
    4058:	db cf       	rjmp	.-74     	; 0x4010 <_callBack>
    405a:	08 95       	ret
    405c:	24 e0       	ldi	r18, 0x04	; 4
    405e:	20 93 b0 09 	sts	0x09B0, r18	; 0x8009b0 <_nextState>
    4062:	64 e0       	ldi	r22, 0x04	; 4
    4064:	eb c1       	rjmp	.+982    	; 0x443c <twiReceive>
    4066:	08 95       	ret
    4068:	fa 01       	movw	r30, r20
    406a:	81 81       	ldd	r24, Z+1	; 0x01
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	98 2f       	mov	r25, r24
    4070:	88 27       	eor	r24, r24
    4072:	20 81       	ld	r18, Z
    4074:	82 2b       	or	r24, r18
    4076:	90 93 ac 09 	sts	0x09AC, r25	; 0x8009ac <_fullSpectrumRaw+0x1>
    407a:	80 93 ab 09 	sts	0x09AB, r24	; 0x8009ab <_fullSpectrumRaw>
    407e:	83 81       	ldd	r24, Z+3	; 0x03
    4080:	90 e0       	ldi	r25, 0x00	; 0
    4082:	98 2f       	mov	r25, r24
    4084:	88 27       	eor	r24, r24
    4086:	22 81       	ldd	r18, Z+2	; 0x02
    4088:	82 2b       	or	r24, r18
    408a:	90 93 aa 09 	sts	0x09AA, r25	; 0x8009aa <_infraredRaw+0x1>
    408e:	80 93 a9 09 	sts	0x09A9, r24	; 0x8009a9 <_infraredRaw>
    4092:	81 e0       	ldi	r24, 0x01	; 1
    4094:	bd cf       	rjmp	.-134    	; 0x4010 <_callBack>
    4096:	08 95       	ret
    4098:	80 e0       	ldi	r24, 0x00	; 0
    409a:	ba cf       	rjmp	.-140    	; 0x4010 <_callBack>
    409c:	08 95       	ret
    409e:	10 92 b0 09 	sts	0x09B0, r1	; 0x8009b0 <_nextState>
    40a2:	86 e0       	ldi	r24, 0x06	; 6
    40a4:	b5 cf       	rjmp	.-150    	; 0x4010 <_callBack>
    40a6:	08 95       	ret

000040a8 <_twiTransmit>:
    40a8:	20 91 b3 09 	lds	r18, 0x09B3	; 0x8009b3 <_twiHandler>
    40ac:	30 91 b4 09 	lds	r19, 0x09B4	; 0x8009b4 <_twiHandler+0x1>
    40b0:	21 15       	cp	r18, r1
    40b2:	31 05       	cpc	r19, r1
    40b4:	41 f0       	breq	.+16     	; 0x40c6 <_twiTransmit+0x1e>
    40b6:	46 2f       	mov	r20, r22
    40b8:	bc 01       	movw	r22, r24
    40ba:	c9 01       	movw	r24, r18
    40bc:	73 d1       	rcall	.+742    	; 0x43a4 <twiTransmit>
    40be:	82 30       	cpi	r24, 0x02	; 2
    40c0:	21 f0       	breq	.+8      	; 0x40ca <_twiTransmit+0x22>
    40c2:	80 e0       	ldi	r24, 0x00	; 0
    40c4:	08 95       	ret
    40c6:	87 e0       	ldi	r24, 0x07	; 7
    40c8:	08 95       	ret
    40ca:	85 e0       	ldi	r24, 0x05	; 5
    40cc:	08 95       	ret

000040ce <tsl2591Create>:
    40ce:	0f 93       	push	r16
    40d0:	1f 93       	push	r17
    40d2:	90 93 b2 09 	sts	0x09B2, r25	; 0x8009b2 <_callBackFunction+0x1>
    40d6:	80 93 b1 09 	sts	0x09B1, r24	; 0x8009b1 <_callBackFunction>
    40da:	00 e1       	ldi	r16, 0x10	; 16
    40dc:	10 e2       	ldi	r17, 0x20	; 32
    40de:	20 e0       	ldi	r18, 0x00	; 0
    40e0:	34 e2       	ldi	r19, 0x24	; 36
    40e2:	44 ef       	ldi	r20, 0xF4	; 244
    40e4:	50 e0       	ldi	r21, 0x00	; 0
    40e6:	60 e0       	ldi	r22, 0x00	; 0
    40e8:	89 e2       	ldi	r24, 0x29	; 41
    40ea:	0b d1       	rcall	.+534    	; 0x4302 <twiCreate>
    40ec:	90 93 b4 09 	sts	0x09B4, r25	; 0x8009b4 <_twiHandler+0x1>
    40f0:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <_twiHandler>
    40f4:	89 2b       	or	r24, r25
    40f6:	11 f0       	breq	.+4      	; 0x40fc <tsl2591Create+0x2e>
    40f8:	80 e0       	ldi	r24, 0x00	; 0
    40fa:	01 c0       	rjmp	.+2      	; 0x40fe <tsl2591Create+0x30>
    40fc:	88 e0       	ldi	r24, 0x08	; 8
    40fe:	1f 91       	pop	r17
    4100:	0f 91       	pop	r16
    4102:	08 95       	ret

00004104 <tsl2591Enable>:
    4104:	cf 93       	push	r28
    4106:	df 93       	push	r29
    4108:	1f 92       	push	r1
    410a:	1f 92       	push	r1
    410c:	cd b7       	in	r28, 0x3d	; 61
    410e:	de b7       	in	r29, 0x3e	; 62
    4110:	80 ea       	ldi	r24, 0xA0	; 160
    4112:	89 83       	std	Y+1, r24	; 0x01
    4114:	83 e0       	ldi	r24, 0x03	; 3
    4116:	8a 83       	std	Y+2, r24	; 0x02
    4118:	10 92 b0 09 	sts	0x09B0, r1	; 0x8009b0 <_nextState>
    411c:	62 e0       	ldi	r22, 0x02	; 2
    411e:	ce 01       	movw	r24, r28
    4120:	01 96       	adiw	r24, 0x01	; 1
    4122:	c2 df       	rcall	.-124    	; 0x40a8 <_twiTransmit>
    4124:	0f 90       	pop	r0
    4126:	0f 90       	pop	r0
    4128:	df 91       	pop	r29
    412a:	cf 91       	pop	r28
    412c:	08 95       	ret

0000412e <tsl2591GetLux>:
    412e:	2f 92       	push	r2
    4130:	3f 92       	push	r3
    4132:	4f 92       	push	r4
    4134:	5f 92       	push	r5
    4136:	6f 92       	push	r6
    4138:	7f 92       	push	r7
    413a:	8f 92       	push	r8
    413c:	9f 92       	push	r9
    413e:	af 92       	push	r10
    4140:	bf 92       	push	r11
    4142:	cf 92       	push	r12
    4144:	df 92       	push	r13
    4146:	ef 92       	push	r14
    4148:	ff 92       	push	r15
    414a:	0f 93       	push	r16
    414c:	1f 93       	push	r17
    414e:	cf 93       	push	r28
    4150:	df 93       	push	r29
    4152:	c0 91 a9 09 	lds	r28, 0x09A9	; 0x8009a9 <_infraredRaw>
    4156:	d0 91 aa 09 	lds	r29, 0x09AA	; 0x8009aa <_infraredRaw+0x1>
    415a:	cf 3f       	cpi	r28, 0xFF	; 255
    415c:	2f ef       	ldi	r18, 0xFF	; 255
    415e:	d2 07       	cpc	r29, r18
    4160:	41 f0       	breq	.+16     	; 0x4172 <tsl2591GetLux+0x44>
    4162:	60 91 ab 09 	lds	r22, 0x09AB	; 0x8009ab <_fullSpectrumRaw>
    4166:	70 91 ac 09 	lds	r23, 0x09AC	; 0x8009ac <_fullSpectrumRaw+0x1>
    416a:	6f 3f       	cpi	r22, 0xFF	; 255
    416c:	ef ef       	ldi	r30, 0xFF	; 255
    416e:	7e 07       	cpc	r23, r30
    4170:	59 f4       	brne	.+22     	; 0x4188 <tsl2591GetLux+0x5a>
    4172:	4f ef       	ldi	r20, 0xFF	; 255
    4174:	5f ef       	ldi	r21, 0xFF	; 255
    4176:	6f e7       	ldi	r22, 0x7F	; 127
    4178:	7f e7       	ldi	r23, 0x7F	; 127
    417a:	fc 01       	movw	r30, r24
    417c:	40 83       	st	Z, r20
    417e:	51 83       	std	Z+1, r21	; 0x01
    4180:	62 83       	std	Z+2, r22	; 0x02
    4182:	73 83       	std	Z+3, r23	; 0x03
    4184:	83 e0       	ldi	r24, 0x03	; 3
    4186:	99 c0       	rjmp	.+306    	; 0x42ba <tsl2591GetLux+0x18c>
    4188:	1c 01       	movw	r2, r24
    418a:	80 e0       	ldi	r24, 0x00	; 0
    418c:	90 e0       	ldi	r25, 0x00	; 0
    418e:	18 d3       	rcall	.+1584   	; 0x47c0 <__floatunsisf>
    4190:	2b 01       	movw	r4, r22
    4192:	3c 01       	movw	r6, r24
    4194:	be 01       	movw	r22, r28
    4196:	80 e0       	ldi	r24, 0x00	; 0
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	12 d3       	rcall	.+1572   	; 0x47c0 <__floatunsisf>
    419c:	4b 01       	movw	r8, r22
    419e:	5c 01       	movw	r10, r24
    41a0:	80 91 ae 09 	lds	r24, 0x09AE	; 0x8009ae <_currentIntegrationTime>
    41a4:	90 e0       	ldi	r25, 0x00	; 0
    41a6:	01 96       	adiw	r24, 0x01	; 1
    41a8:	24 e6       	ldi	r18, 0x64	; 100
    41aa:	28 9f       	mul	r18, r24
    41ac:	b0 01       	movw	r22, r0
    41ae:	29 9f       	mul	r18, r25
    41b0:	70 0d       	add	r23, r0
    41b2:	11 24       	eor	r1, r1
    41b4:	80 91 af 09 	lds	r24, 0x09AF	; 0x8009af <_currentGain>
    41b8:	80 32       	cpi	r24, 0x20	; 32
    41ba:	69 f0       	breq	.+26     	; 0x41d6 <tsl2591GetLux+0xa8>
    41bc:	80 33       	cpi	r24, 0x30	; 48
    41be:	a1 f0       	breq	.+40     	; 0x41e8 <tsl2591GetLux+0xba>
    41c0:	80 31       	cpi	r24, 0x10	; 16
    41c2:	e1 f4       	brne	.+56     	; 0x41fc <tsl2591GetLux+0xce>
    41c4:	0f 2e       	mov	r0, r31
    41c6:	c1 2c       	mov	r12, r1
    41c8:	d1 2c       	mov	r13, r1
    41ca:	f8 ec       	ldi	r31, 0xC8	; 200
    41cc:	ef 2e       	mov	r14, r31
    41ce:	f1 e4       	ldi	r31, 0x41	; 65
    41d0:	ff 2e       	mov	r15, r31
    41d2:	f0 2d       	mov	r31, r0
    41d4:	1b c0       	rjmp	.+54     	; 0x420c <tsl2591GetLux+0xde>
    41d6:	0f 2e       	mov	r0, r31
    41d8:	c1 2c       	mov	r12, r1
    41da:	d1 2c       	mov	r13, r1
    41dc:	f6 ed       	ldi	r31, 0xD6	; 214
    41de:	ef 2e       	mov	r14, r31
    41e0:	f3 e4       	ldi	r31, 0x43	; 67
    41e2:	ff 2e       	mov	r15, r31
    41e4:	f0 2d       	mov	r31, r0
    41e6:	12 c0       	rjmp	.+36     	; 0x420c <tsl2591GetLux+0xde>
    41e8:	0f 2e       	mov	r0, r31
    41ea:	c1 2c       	mov	r12, r1
    41ec:	f0 e5       	ldi	r31, 0x50	; 80
    41ee:	df 2e       	mov	r13, r31
    41f0:	fa e1       	ldi	r31, 0x1A	; 26
    41f2:	ef 2e       	mov	r14, r31
    41f4:	f6 e4       	ldi	r31, 0x46	; 70
    41f6:	ff 2e       	mov	r15, r31
    41f8:	f0 2d       	mov	r31, r0
    41fa:	08 c0       	rjmp	.+16     	; 0x420c <tsl2591GetLux+0xde>
    41fc:	0f 2e       	mov	r0, r31
    41fe:	c1 2c       	mov	r12, r1
    4200:	d1 2c       	mov	r13, r1
    4202:	f0 e8       	ldi	r31, 0x80	; 128
    4204:	ef 2e       	mov	r14, r31
    4206:	ff e3       	ldi	r31, 0x3F	; 63
    4208:	ff 2e       	mov	r15, r31
    420a:	f0 2d       	mov	r31, r0
    420c:	07 2e       	mov	r0, r23
    420e:	00 0c       	add	r0, r0
    4210:	88 0b       	sbc	r24, r24
    4212:	99 0b       	sbc	r25, r25
    4214:	d7 d2       	rcall	.+1454   	; 0x47c4 <__floatsisf>
    4216:	a7 01       	movw	r20, r14
    4218:	96 01       	movw	r18, r12
    421a:	3b d3       	rcall	.+1654   	; 0x4892 <__mulsf3>
    421c:	20 e0       	ldi	r18, 0x00	; 0
    421e:	30 e0       	ldi	r19, 0x00	; 0
    4220:	4c ec       	ldi	r20, 0xCC	; 204
    4222:	53 e4       	ldi	r21, 0x43	; 67
    4224:	62 d2       	rcall	.+1220   	; 0x46ea <__divsf3>
    4226:	6b 01       	movw	r12, r22
    4228:	7c 01       	movw	r14, r24
    422a:	25 e8       	ldi	r18, 0x85	; 133
    422c:	3b ee       	ldi	r19, 0xEB	; 235
    422e:	41 ed       	ldi	r20, 0xD1	; 209
    4230:	5f e3       	ldi	r21, 0x3F	; 63
    4232:	c5 01       	movw	r24, r10
    4234:	b4 01       	movw	r22, r8
    4236:	2d d3       	rcall	.+1626   	; 0x4892 <__mulsf3>
    4238:	9b 01       	movw	r18, r22
    423a:	ac 01       	movw	r20, r24
    423c:	c3 01       	movw	r24, r6
    423e:	b2 01       	movw	r22, r4
    4240:	ed d1       	rcall	.+986    	; 0x461c <__subsf3>
    4242:	a7 01       	movw	r20, r14
    4244:	96 01       	movw	r18, r12
    4246:	51 d2       	rcall	.+1186   	; 0x46ea <__divsf3>
    4248:	16 2f       	mov	r17, r22
    424a:	d7 2f       	mov	r29, r23
    424c:	c8 2f       	mov	r28, r24
    424e:	09 2f       	mov	r16, r25
    4250:	2d e3       	ldi	r18, 0x3D	; 61
    4252:	3a e0       	ldi	r19, 0x0A	; 10
    4254:	47 e1       	ldi	r20, 0x17	; 23
    4256:	5f e3       	ldi	r21, 0x3F	; 63
    4258:	c3 01       	movw	r24, r6
    425a:	b2 01       	movw	r22, r4
    425c:	1a d3       	rcall	.+1588   	; 0x4892 <__mulsf3>
    425e:	2b 01       	movw	r4, r22
    4260:	3c 01       	movw	r6, r24
    4262:	26 ef       	ldi	r18, 0xF6	; 246
    4264:	38 e2       	ldi	r19, 0x28	; 40
    4266:	4c e5       	ldi	r20, 0x5C	; 92
    4268:	5f e3       	ldi	r21, 0x3F	; 63
    426a:	c5 01       	movw	r24, r10
    426c:	b4 01       	movw	r22, r8
    426e:	11 d3       	rcall	.+1570   	; 0x4892 <__mulsf3>
    4270:	9b 01       	movw	r18, r22
    4272:	ac 01       	movw	r20, r24
    4274:	c3 01       	movw	r24, r6
    4276:	b2 01       	movw	r22, r4
    4278:	d1 d1       	rcall	.+930    	; 0x461c <__subsf3>
    427a:	a7 01       	movw	r20, r14
    427c:	96 01       	movw	r18, r12
    427e:	35 d2       	rcall	.+1130   	; 0x46ea <__divsf3>
    4280:	c6 2e       	mov	r12, r22
    4282:	d7 2e       	mov	r13, r23
    4284:	e8 2e       	mov	r14, r24
    4286:	f9 2e       	mov	r15, r25
    4288:	26 2f       	mov	r18, r22
    428a:	37 2f       	mov	r19, r23
    428c:	48 2f       	mov	r20, r24
    428e:	59 2f       	mov	r21, r25
    4290:	61 2f       	mov	r22, r17
    4292:	7d 2f       	mov	r23, r29
    4294:	8c 2f       	mov	r24, r28
    4296:	90 2f       	mov	r25, r16
    4298:	f8 d2       	rcall	.+1520   	; 0x488a <__gesf2>
    429a:	18 16       	cp	r1, r24
    429c:	24 f0       	brlt	.+8      	; 0x42a6 <tsl2591GetLux+0x178>
    429e:	1c 2d       	mov	r17, r12
    42a0:	dd 2d       	mov	r29, r13
    42a2:	ce 2d       	mov	r28, r14
    42a4:	0f 2d       	mov	r16, r15
    42a6:	41 2f       	mov	r20, r17
    42a8:	5d 2f       	mov	r21, r29
    42aa:	6c 2f       	mov	r22, r28
    42ac:	70 2f       	mov	r23, r16
    42ae:	f1 01       	movw	r30, r2
    42b0:	40 83       	st	Z, r20
    42b2:	51 83       	std	Z+1, r21	; 0x01
    42b4:	62 83       	std	Z+2, r22	; 0x02
    42b6:	73 83       	std	Z+3, r23	; 0x03
    42b8:	80 e0       	ldi	r24, 0x00	; 0
    42ba:	df 91       	pop	r29
    42bc:	cf 91       	pop	r28
    42be:	1f 91       	pop	r17
    42c0:	0f 91       	pop	r16
    42c2:	ff 90       	pop	r15
    42c4:	ef 90       	pop	r14
    42c6:	df 90       	pop	r13
    42c8:	cf 90       	pop	r12
    42ca:	bf 90       	pop	r11
    42cc:	af 90       	pop	r10
    42ce:	9f 90       	pop	r9
    42d0:	8f 90       	pop	r8
    42d2:	7f 90       	pop	r7
    42d4:	6f 90       	pop	r6
    42d6:	5f 90       	pop	r5
    42d8:	4f 90       	pop	r4
    42da:	3f 90       	pop	r3
    42dc:	2f 90       	pop	r2
    42de:	08 95       	ret

000042e0 <_initTwiInterface>:
    42e0:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <_twiIsInitiated>
    42e4:	81 11       	cpse	r24, r1
    42e6:	0c c0       	rjmp	.+24     	; 0x4300 <_initTwiInterface+0x20>
    42e8:	8c e0       	ldi	r24, 0x0C	; 12
    42ea:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    42ee:	8f ef       	ldi	r24, 0xFF	; 255
    42f0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    42f4:	84 e0       	ldi	r24, 0x04	; 4
    42f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    42fa:	81 e0       	ldi	r24, 0x01	; 1
    42fc:	80 93 c3 09 	sts	0x09C3, r24	; 0x8009c3 <_twiIsInitiated>
    4300:	08 95       	ret

00004302 <twiCreate>:
    4302:	af 92       	push	r10
    4304:	bf 92       	push	r11
    4306:	cf 92       	push	r12
    4308:	df 92       	push	r13
    430a:	ef 92       	push	r14
    430c:	ff 92       	push	r15
    430e:	0f 93       	push	r16
    4310:	1f 93       	push	r17
    4312:	cf 93       	push	r28
    4314:	df 93       	push	r29
    4316:	a8 2e       	mov	r10, r24
    4318:	b6 2e       	mov	r11, r22
    431a:	69 01       	movw	r12, r18
    431c:	7a 01       	movw	r14, r20
    431e:	84 e0       	ldi	r24, 0x04	; 4
    4320:	90 e0       	ldi	r25, 0x00	; 0
    4322:	85 d3       	rcall	.+1802   	; 0x4a2e <malloc>
    4324:	ec 01       	movw	r28, r24
    4326:	89 2b       	or	r24, r25
    4328:	61 f1       	breq	.+88     	; 0x4382 <twiCreate+0x80>
    432a:	a8 82       	st	Y, r10
    432c:	81 e0       	ldi	r24, 0x01	; 1
    432e:	b8 12       	cpse	r11, r24
    4330:	12 c0       	rjmp	.+36     	; 0x4356 <twiCreate+0x54>
    4332:	c7 01       	movw	r24, r14
    4334:	b6 01       	movw	r22, r12
    4336:	20 ea       	ldi	r18, 0xA0	; 160
    4338:	36 e8       	ldi	r19, 0x86	; 134
    433a:	41 e0       	ldi	r20, 0x01	; 1
    433c:	50 e0       	ldi	r21, 0x00	; 0
    433e:	33 d3       	rcall	.+1638   	; 0x49a6 <__udivmodsi4>
    4340:	da 01       	movw	r26, r20
    4342:	c9 01       	movw	r24, r18
    4344:	40 97       	sbiw	r24, 0x10	; 16
    4346:	a1 09       	sbc	r26, r1
    4348:	b1 09       	sbc	r27, r1
    434a:	b6 95       	lsr	r27
    434c:	a7 95       	ror	r26
    434e:	97 95       	ror	r25
    4350:	87 95       	ror	r24
    4352:	89 83       	std	Y+1, r24	; 0x01
    4354:	11 c0       	rjmp	.+34     	; 0x4378 <twiCreate+0x76>
    4356:	c7 01       	movw	r24, r14
    4358:	b6 01       	movw	r22, r12
    435a:	20 e8       	ldi	r18, 0x80	; 128
    435c:	3a e1       	ldi	r19, 0x1A	; 26
    435e:	46 e0       	ldi	r20, 0x06	; 6
    4360:	50 e0       	ldi	r21, 0x00	; 0
    4362:	21 d3       	rcall	.+1602   	; 0x49a6 <__udivmodsi4>
    4364:	da 01       	movw	r26, r20
    4366:	c9 01       	movw	r24, r18
    4368:	40 97       	sbiw	r24, 0x10	; 16
    436a:	a1 09       	sbc	r26, r1
    436c:	b1 09       	sbc	r27, r1
    436e:	b6 95       	lsr	r27
    4370:	a7 95       	ror	r26
    4372:	97 95       	ror	r25
    4374:	87 95       	ror	r24
    4376:	89 83       	std	Y+1, r24	; 0x01
    4378:	1b 83       	std	Y+3, r17	; 0x03
    437a:	0a 83       	std	Y+2, r16	; 0x02
    437c:	8c 2f       	mov	r24, r28
    437e:	9d 2f       	mov	r25, r29
    4380:	02 c0       	rjmp	.+4      	; 0x4386 <twiCreate+0x84>
    4382:	80 e0       	ldi	r24, 0x00	; 0
    4384:	90 e0       	ldi	r25, 0x00	; 0
    4386:	df 91       	pop	r29
    4388:	cf 91       	pop	r28
    438a:	1f 91       	pop	r17
    438c:	0f 91       	pop	r16
    438e:	ff 90       	pop	r15
    4390:	ef 90       	pop	r14
    4392:	df 90       	pop	r13
    4394:	cf 90       	pop	r12
    4396:	bf 90       	pop	r11
    4398:	af 90       	pop	r10
    439a:	08 95       	ret

0000439c <twiIsBusy>:
    439c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    43a0:	81 70       	andi	r24, 0x01	; 1
    43a2:	08 95       	ret

000043a4 <twiTransmit>:
    43a4:	ff 92       	push	r15
    43a6:	0f 93       	push	r16
    43a8:	1f 93       	push	r17
    43aa:	cf 93       	push	r28
    43ac:	df 93       	push	r29
    43ae:	00 97       	sbiw	r24, 0x00	; 0
    43b0:	d1 f1       	breq	.+116    	; 0x4426 <twiTransmit+0x82>
    43b2:	4a 30       	cpi	r20, 0x0A	; 10
    43b4:	d0 f5       	brcc	.+116    	; 0x442a <twiTransmit+0x86>
    43b6:	f4 2e       	mov	r15, r20
    43b8:	8b 01       	movw	r16, r22
    43ba:	ec 01       	movw	r28, r24
    43bc:	ef df       	rcall	.-34     	; 0x439c <twiIsBusy>
    43be:	81 11       	cpse	r24, r1
    43c0:	36 c0       	rjmp	.+108    	; 0x442e <twiTransmit+0x8a>
    43c2:	80 91 b6 09 	lds	r24, 0x09B6	; 0x8009b6 <_twiCurrentHandler>
    43c6:	90 91 b7 09 	lds	r25, 0x09B7	; 0x8009b7 <_twiCurrentHandler+0x1>
    43ca:	c8 17       	cp	r28, r24
    43cc:	d9 07       	cpc	r29, r25
    43ce:	41 f0       	breq	.+16     	; 0x43e0 <twiTransmit+0x3c>
    43d0:	87 df       	rcall	.-242    	; 0x42e0 <_initTwiInterface>
    43d2:	89 81       	ldd	r24, Y+1	; 0x01
    43d4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    43d8:	d0 93 b7 09 	sts	0x09B7, r29	; 0x8009b7 <_twiCurrentHandler+0x1>
    43dc:	c0 93 b6 09 	sts	0x09B6, r28	; 0x8009b6 <_twiCurrentHandler>
    43e0:	81 e0       	ldi	r24, 0x01	; 1
    43e2:	8f 0d       	add	r24, r15
    43e4:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <_twiMessageLen>
    43e8:	88 81       	ld	r24, Y
    43ea:	88 0f       	add	r24, r24
    43ec:	80 93 b9 09 	sts	0x09B9, r24	; 0x8009b9 <_twiMessageBuffer>
    43f0:	ff 20       	and	r15, r15
    43f2:	89 f0       	breq	.+34     	; 0x4416 <twiTransmit+0x72>
    43f4:	f8 01       	movw	r30, r16
    43f6:	aa eb       	ldi	r26, 0xBA	; 186
    43f8:	b9 e0       	ldi	r27, 0x09	; 9
    43fa:	4f ef       	ldi	r20, 0xFF	; 255
    43fc:	4f 0d       	add	r20, r15
    43fe:	64 2f       	mov	r22, r20
    4400:	70 e0       	ldi	r23, 0x00	; 0
    4402:	cb 01       	movw	r24, r22
    4404:	01 96       	adiw	r24, 0x01	; 1
    4406:	b8 01       	movw	r22, r16
    4408:	68 0f       	add	r22, r24
    440a:	79 1f       	adc	r23, r25
    440c:	81 91       	ld	r24, Z+
    440e:	8d 93       	st	X+, r24
    4410:	e6 17       	cp	r30, r22
    4412:	f7 07       	cpc	r31, r23
    4414:	d9 f7       	brne	.-10     	; 0x440c <twiTransmit+0x68>
    4416:	88 ef       	ldi	r24, 0xF8	; 248
    4418:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    441c:	85 ea       	ldi	r24, 0xA5	; 165
    441e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4422:	84 e0       	ldi	r24, 0x04	; 4
    4424:	05 c0       	rjmp	.+10     	; 0x4430 <twiTransmit+0x8c>
    4426:	86 e0       	ldi	r24, 0x06	; 6
    4428:	03 c0       	rjmp	.+6      	; 0x4430 <twiTransmit+0x8c>
    442a:	87 e0       	ldi	r24, 0x07	; 7
    442c:	01 c0       	rjmp	.+2      	; 0x4430 <twiTransmit+0x8c>
    442e:	82 e0       	ldi	r24, 0x02	; 2
    4430:	df 91       	pop	r29
    4432:	cf 91       	pop	r28
    4434:	1f 91       	pop	r17
    4436:	0f 91       	pop	r16
    4438:	ff 90       	pop	r15
    443a:	08 95       	ret

0000443c <twiReceive>:
    443c:	1f 93       	push	r17
    443e:	cf 93       	push	r28
    4440:	df 93       	push	r29
    4442:	00 97       	sbiw	r24, 0x00	; 0
    4444:	29 f1       	breq	.+74     	; 0x4490 <twiReceive+0x54>
    4446:	6b 30       	cpi	r22, 0x0B	; 11
    4448:	28 f5       	brcc	.+74     	; 0x4494 <twiReceive+0x58>
    444a:	16 2f       	mov	r17, r22
    444c:	ec 01       	movw	r28, r24
    444e:	a6 df       	rcall	.-180    	; 0x439c <twiIsBusy>
    4450:	81 11       	cpse	r24, r1
    4452:	22 c0       	rjmp	.+68     	; 0x4498 <twiReceive+0x5c>
    4454:	80 91 b6 09 	lds	r24, 0x09B6	; 0x8009b6 <_twiCurrentHandler>
    4458:	90 91 b7 09 	lds	r25, 0x09B7	; 0x8009b7 <_twiCurrentHandler+0x1>
    445c:	c8 17       	cp	r28, r24
    445e:	d9 07       	cpc	r29, r25
    4460:	41 f0       	breq	.+16     	; 0x4472 <twiReceive+0x36>
    4462:	3e df       	rcall	.-388    	; 0x42e0 <_initTwiInterface>
    4464:	89 81       	ldd	r24, Y+1	; 0x01
    4466:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    446a:	d0 93 b7 09 	sts	0x09B7, r29	; 0x8009b7 <_twiCurrentHandler+0x1>
    446e:	c0 93 b6 09 	sts	0x09B6, r28	; 0x8009b6 <_twiCurrentHandler>
    4472:	10 93 b8 09 	sts	0x09B8, r17	; 0x8009b8 <_twiMessageLen>
    4476:	88 81       	ld	r24, Y
    4478:	88 0f       	add	r24, r24
    447a:	81 60       	ori	r24, 0x01	; 1
    447c:	80 93 b9 09 	sts	0x09B9, r24	; 0x8009b9 <_twiMessageBuffer>
    4480:	88 ef       	ldi	r24, 0xF8	; 248
    4482:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    4486:	85 ea       	ldi	r24, 0xA5	; 165
    4488:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    448c:	85 e0       	ldi	r24, 0x05	; 5
    448e:	05 c0       	rjmp	.+10     	; 0x449a <twiReceive+0x5e>
    4490:	86 e0       	ldi	r24, 0x06	; 6
    4492:	03 c0       	rjmp	.+6      	; 0x449a <twiReceive+0x5e>
    4494:	87 e0       	ldi	r24, 0x07	; 7
    4496:	01 c0       	rjmp	.+2      	; 0x449a <twiReceive+0x5e>
    4498:	82 e0       	ldi	r24, 0x02	; 2
    449a:	df 91       	pop	r29
    449c:	cf 91       	pop	r28
    449e:	1f 91       	pop	r17
    44a0:	08 95       	ret

000044a2 <__vector_39>:
    44a2:	1f 92       	push	r1
    44a4:	0f 92       	push	r0
    44a6:	0f b6       	in	r0, 0x3f	; 63
    44a8:	0f 92       	push	r0
    44aa:	11 24       	eor	r1, r1
    44ac:	0b b6       	in	r0, 0x3b	; 59
    44ae:	0f 92       	push	r0
    44b0:	2f 93       	push	r18
    44b2:	3f 93       	push	r19
    44b4:	4f 93       	push	r20
    44b6:	5f 93       	push	r21
    44b8:	6f 93       	push	r22
    44ba:	7f 93       	push	r23
    44bc:	8f 93       	push	r24
    44be:	9f 93       	push	r25
    44c0:	af 93       	push	r26
    44c2:	bf 93       	push	r27
    44c4:	ef 93       	push	r30
    44c6:	ff 93       	push	r31
    44c8:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    44cc:	8e 2f       	mov	r24, r30
    44ce:	90 e0       	ldi	r25, 0x00	; 0
    44d0:	fc 01       	movw	r30, r24
    44d2:	38 97       	sbiw	r30, 0x08	; 8
    44d4:	e1 35       	cpi	r30, 0x51	; 81
    44d6:	f1 05       	cpc	r31, r1
    44d8:	08 f0       	brcs	.+2      	; 0x44dc <__vector_39+0x3a>
    44da:	75 c0       	rjmp	.+234    	; 0x45c6 <__vector_39+0x124>
    44dc:	88 27       	eor	r24, r24
    44de:	e4 58       	subi	r30, 0x84	; 132
    44e0:	ff 4f       	sbci	r31, 0xFF	; 255
    44e2:	8f 4f       	sbci	r24, 0xFF	; 255
    44e4:	82 c2       	rjmp	.+1284   	; 0x49ea <__tablejump2__>
    44e6:	10 92 b5 09 	sts	0x09B5, r1	; 0x8009b5 <_index.1885>
    44ea:	e0 91 b5 09 	lds	r30, 0x09B5	; 0x8009b5 <_index.1885>
    44ee:	80 91 b8 09 	lds	r24, 0x09B8	; 0x8009b8 <_twiMessageLen>
    44f2:	e8 17       	cp	r30, r24
    44f4:	70 f4       	brcc	.+28     	; 0x4512 <__vector_39+0x70>
    44f6:	81 e0       	ldi	r24, 0x01	; 1
    44f8:	8e 0f       	add	r24, r30
    44fa:	80 93 b5 09 	sts	0x09B5, r24	; 0x8009b5 <_index.1885>
    44fe:	f0 e0       	ldi	r31, 0x00	; 0
    4500:	e7 54       	subi	r30, 0x47	; 71
    4502:	f6 4f       	sbci	r31, 0xF6	; 246
    4504:	80 81       	ld	r24, Z
    4506:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    450a:	85 e8       	ldi	r24, 0x85	; 133
    450c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4510:	72 c0       	rjmp	.+228    	; 0x45f6 <__vector_39+0x154>
    4512:	84 e9       	ldi	r24, 0x94	; 148
    4514:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4518:	80 91 b6 09 	lds	r24, 0x09B6	; 0x8009b6 <_twiCurrentHandler>
    451c:	90 91 b7 09 	lds	r25, 0x09B7	; 0x8009b7 <_twiCurrentHandler+0x1>
    4520:	dc 01       	movw	r26, r24
    4522:	12 96       	adiw	r26, 0x02	; 2
    4524:	ed 91       	ld	r30, X+
    4526:	fc 91       	ld	r31, X
    4528:	13 97       	sbiw	r26, 0x03	; 3
    452a:	30 97       	sbiw	r30, 0x00	; 0
    452c:	09 f4       	brne	.+2      	; 0x4530 <__vector_39+0x8e>
    452e:	63 c0       	rjmp	.+198    	; 0x45f6 <__vector_39+0x154>
    4530:	20 e0       	ldi	r18, 0x00	; 0
    4532:	40 e0       	ldi	r20, 0x00	; 0
    4534:	50 e0       	ldi	r21, 0x00	; 0
    4536:	64 e0       	ldi	r22, 0x04	; 4
    4538:	19 95       	eicall
    453a:	5d c0       	rjmp	.+186    	; 0x45f6 <__vector_39+0x154>
    453c:	e0 91 b5 09 	lds	r30, 0x09B5	; 0x8009b5 <_index.1885>
    4540:	81 e0       	ldi	r24, 0x01	; 1
    4542:	8e 0f       	add	r24, r30
    4544:	80 93 b5 09 	sts	0x09B5, r24	; 0x8009b5 <_index.1885>
    4548:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    454c:	f0 e0       	ldi	r31, 0x00	; 0
    454e:	e7 54       	subi	r30, 0x47	; 71
    4550:	f6 4f       	sbci	r31, 0xF6	; 246
    4552:	80 83       	st	Z, r24
    4554:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4558:	80 34       	cpi	r24, 0x40	; 64
    455a:	11 f4       	brne	.+4      	; 0x4560 <__vector_39+0xbe>
    455c:	10 92 b5 09 	sts	0x09B5, r1	; 0x8009b5 <_index.1885>
    4560:	20 91 b5 09 	lds	r18, 0x09B5	; 0x8009b5 <_index.1885>
    4564:	30 e0       	ldi	r19, 0x00	; 0
    4566:	80 91 b8 09 	lds	r24, 0x09B8	; 0x8009b8 <_twiMessageLen>
    456a:	90 e0       	ldi	r25, 0x00	; 0
    456c:	01 97       	sbiw	r24, 0x01	; 1
    456e:	28 17       	cp	r18, r24
    4570:	39 07       	cpc	r19, r25
    4572:	24 f4       	brge	.+8      	; 0x457c <__vector_39+0xda>
    4574:	85 ec       	ldi	r24, 0xC5	; 197
    4576:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    457a:	3d c0       	rjmp	.+122    	; 0x45f6 <__vector_39+0x154>
    457c:	85 e8       	ldi	r24, 0x85	; 133
    457e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4582:	39 c0       	rjmp	.+114    	; 0x45f6 <__vector_39+0x154>
    4584:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4588:	e0 91 b5 09 	lds	r30, 0x09B5	; 0x8009b5 <_index.1885>
    458c:	f0 e0       	ldi	r31, 0x00	; 0
    458e:	e7 54       	subi	r30, 0x47	; 71
    4590:	f6 4f       	sbci	r31, 0xF6	; 246
    4592:	80 83       	st	Z, r24
    4594:	84 e9       	ldi	r24, 0x94	; 148
    4596:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    459a:	80 91 b6 09 	lds	r24, 0x09B6	; 0x8009b6 <_twiCurrentHandler>
    459e:	90 91 b7 09 	lds	r25, 0x09B7	; 0x8009b7 <_twiCurrentHandler+0x1>
    45a2:	dc 01       	movw	r26, r24
    45a4:	12 96       	adiw	r26, 0x02	; 2
    45a6:	ed 91       	ld	r30, X+
    45a8:	fc 91       	ld	r31, X
    45aa:	13 97       	sbiw	r26, 0x03	; 3
    45ac:	30 97       	sbiw	r30, 0x00	; 0
    45ae:	19 f1       	breq	.+70     	; 0x45f6 <__vector_39+0x154>
    45b0:	20 91 b8 09 	lds	r18, 0x09B8	; 0x8009b8 <_twiMessageLen>
    45b4:	49 eb       	ldi	r20, 0xB9	; 185
    45b6:	59 e0       	ldi	r21, 0x09	; 9
    45b8:	65 e0       	ldi	r22, 0x05	; 5
    45ba:	19 95       	eicall
    45bc:	1c c0       	rjmp	.+56     	; 0x45f6 <__vector_39+0x154>
    45be:	85 ea       	ldi	r24, 0xA5	; 165
    45c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    45c4:	18 c0       	rjmp	.+48     	; 0x45f6 <__vector_39+0x154>
    45c6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    45ca:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    45ce:	84 e0       	ldi	r24, 0x04	; 4
    45d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    45d4:	80 91 b6 09 	lds	r24, 0x09B6	; 0x8009b6 <_twiCurrentHandler>
    45d8:	90 91 b7 09 	lds	r25, 0x09B7	; 0x8009b7 <_twiCurrentHandler+0x1>
    45dc:	dc 01       	movw	r26, r24
    45de:	12 96       	adiw	r26, 0x02	; 2
    45e0:	ed 91       	ld	r30, X+
    45e2:	fc 91       	ld	r31, X
    45e4:	13 97       	sbiw	r26, 0x03	; 3
    45e6:	30 97       	sbiw	r30, 0x00	; 0
    45e8:	31 f0       	breq	.+12     	; 0x45f6 <__vector_39+0x154>
    45ea:	20 e0       	ldi	r18, 0x00	; 0
    45ec:	40 e0       	ldi	r20, 0x00	; 0
    45ee:	50 e0       	ldi	r21, 0x00	; 0
    45f0:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    45f4:	19 95       	eicall
    45f6:	ff 91       	pop	r31
    45f8:	ef 91       	pop	r30
    45fa:	bf 91       	pop	r27
    45fc:	af 91       	pop	r26
    45fe:	9f 91       	pop	r25
    4600:	8f 91       	pop	r24
    4602:	7f 91       	pop	r23
    4604:	6f 91       	pop	r22
    4606:	5f 91       	pop	r21
    4608:	4f 91       	pop	r20
    460a:	3f 91       	pop	r19
    460c:	2f 91       	pop	r18
    460e:	0f 90       	pop	r0
    4610:	0b be       	out	0x3b, r0	; 59
    4612:	0f 90       	pop	r0
    4614:	0f be       	out	0x3f, r0	; 63
    4616:	0f 90       	pop	r0
    4618:	1f 90       	pop	r1
    461a:	18 95       	reti

0000461c <__subsf3>:
    461c:	50 58       	subi	r21, 0x80	; 128

0000461e <__addsf3>:
    461e:	bb 27       	eor	r27, r27
    4620:	aa 27       	eor	r26, r26
    4622:	0e d0       	rcall	.+28     	; 0x4640 <__addsf3x>
    4624:	21 c1       	rjmp	.+578    	; 0x4868 <__fp_round>
    4626:	12 d1       	rcall	.+548    	; 0x484c <__fp_pscA>
    4628:	30 f0       	brcs	.+12     	; 0x4636 <__addsf3+0x18>
    462a:	17 d1       	rcall	.+558    	; 0x485a <__fp_pscB>
    462c:	20 f0       	brcs	.+8      	; 0x4636 <__addsf3+0x18>
    462e:	31 f4       	brne	.+12     	; 0x463c <__addsf3+0x1e>
    4630:	9f 3f       	cpi	r25, 0xFF	; 255
    4632:	11 f4       	brne	.+4      	; 0x4638 <__addsf3+0x1a>
    4634:	1e f4       	brtc	.+6      	; 0x463c <__addsf3+0x1e>
    4636:	07 c1       	rjmp	.+526    	; 0x4846 <__fp_nan>
    4638:	0e f4       	brtc	.+2      	; 0x463c <__addsf3+0x1e>
    463a:	e0 95       	com	r30
    463c:	e7 fb       	bst	r30, 7
    463e:	fd c0       	rjmp	.+506    	; 0x483a <__fp_inf>

00004640 <__addsf3x>:
    4640:	e9 2f       	mov	r30, r25
    4642:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__fp_split3>
    4646:	78 f3       	brcs	.-34     	; 0x4626 <__addsf3+0x8>
    4648:	ba 17       	cp	r27, r26
    464a:	62 07       	cpc	r22, r18
    464c:	73 07       	cpc	r23, r19
    464e:	84 07       	cpc	r24, r20
    4650:	95 07       	cpc	r25, r21
    4652:	20 f0       	brcs	.+8      	; 0x465c <__addsf3x+0x1c>
    4654:	79 f4       	brne	.+30     	; 0x4674 <__addsf3x+0x34>
    4656:	a6 f5       	brtc	.+104    	; 0x46c0 <__addsf3x+0x80>
    4658:	0c 94 37 15 	jmp	0x2a6e	; 0x2a6e <__fp_zero>
    465c:	0e f4       	brtc	.+2      	; 0x4660 <__addsf3x+0x20>
    465e:	e0 95       	com	r30
    4660:	0b 2e       	mov	r0, r27
    4662:	ba 2f       	mov	r27, r26
    4664:	a0 2d       	mov	r26, r0
    4666:	0b 01       	movw	r0, r22
    4668:	b9 01       	movw	r22, r18
    466a:	90 01       	movw	r18, r0
    466c:	0c 01       	movw	r0, r24
    466e:	ca 01       	movw	r24, r20
    4670:	a0 01       	movw	r20, r0
    4672:	11 24       	eor	r1, r1
    4674:	ff 27       	eor	r31, r31
    4676:	59 1b       	sub	r21, r25
    4678:	99 f0       	breq	.+38     	; 0x46a0 <__addsf3x+0x60>
    467a:	59 3f       	cpi	r21, 0xF9	; 249
    467c:	50 f4       	brcc	.+20     	; 0x4692 <__addsf3x+0x52>
    467e:	50 3e       	cpi	r21, 0xE0	; 224
    4680:	68 f1       	brcs	.+90     	; 0x46dc <__addsf3x+0x9c>
    4682:	1a 16       	cp	r1, r26
    4684:	f0 40       	sbci	r31, 0x00	; 0
    4686:	a2 2f       	mov	r26, r18
    4688:	23 2f       	mov	r18, r19
    468a:	34 2f       	mov	r19, r20
    468c:	44 27       	eor	r20, r20
    468e:	58 5f       	subi	r21, 0xF8	; 248
    4690:	f3 cf       	rjmp	.-26     	; 0x4678 <__addsf3x+0x38>
    4692:	46 95       	lsr	r20
    4694:	37 95       	ror	r19
    4696:	27 95       	ror	r18
    4698:	a7 95       	ror	r26
    469a:	f0 40       	sbci	r31, 0x00	; 0
    469c:	53 95       	inc	r21
    469e:	c9 f7       	brne	.-14     	; 0x4692 <__addsf3x+0x52>
    46a0:	7e f4       	brtc	.+30     	; 0x46c0 <__addsf3x+0x80>
    46a2:	1f 16       	cp	r1, r31
    46a4:	ba 0b       	sbc	r27, r26
    46a6:	62 0b       	sbc	r22, r18
    46a8:	73 0b       	sbc	r23, r19
    46aa:	84 0b       	sbc	r24, r20
    46ac:	ba f0       	brmi	.+46     	; 0x46dc <__addsf3x+0x9c>
    46ae:	91 50       	subi	r25, 0x01	; 1
    46b0:	a1 f0       	breq	.+40     	; 0x46da <__addsf3x+0x9a>
    46b2:	ff 0f       	add	r31, r31
    46b4:	bb 1f       	adc	r27, r27
    46b6:	66 1f       	adc	r22, r22
    46b8:	77 1f       	adc	r23, r23
    46ba:	88 1f       	adc	r24, r24
    46bc:	c2 f7       	brpl	.-16     	; 0x46ae <__addsf3x+0x6e>
    46be:	0e c0       	rjmp	.+28     	; 0x46dc <__addsf3x+0x9c>
    46c0:	ba 0f       	add	r27, r26
    46c2:	62 1f       	adc	r22, r18
    46c4:	73 1f       	adc	r23, r19
    46c6:	84 1f       	adc	r24, r20
    46c8:	48 f4       	brcc	.+18     	; 0x46dc <__addsf3x+0x9c>
    46ca:	87 95       	ror	r24
    46cc:	77 95       	ror	r23
    46ce:	67 95       	ror	r22
    46d0:	b7 95       	ror	r27
    46d2:	f7 95       	ror	r31
    46d4:	9e 3f       	cpi	r25, 0xFE	; 254
    46d6:	08 f0       	brcs	.+2      	; 0x46da <__addsf3x+0x9a>
    46d8:	b1 cf       	rjmp	.-158    	; 0x463c <__addsf3+0x1e>
    46da:	93 95       	inc	r25
    46dc:	88 0f       	add	r24, r24
    46de:	08 f0       	brcs	.+2      	; 0x46e2 <__addsf3x+0xa2>
    46e0:	99 27       	eor	r25, r25
    46e2:	ee 0f       	add	r30, r30
    46e4:	97 95       	ror	r25
    46e6:	87 95       	ror	r24
    46e8:	08 95       	ret

000046ea <__divsf3>:
    46ea:	0d d0       	rcall	.+26     	; 0x4706 <__divsf3x>
    46ec:	bd c0       	rjmp	.+378    	; 0x4868 <__fp_round>
    46ee:	b5 d0       	rcall	.+362    	; 0x485a <__fp_pscB>
    46f0:	48 f0       	brcs	.+18     	; 0x4704 <__divsf3+0x1a>
    46f2:	ac d0       	rcall	.+344    	; 0x484c <__fp_pscA>
    46f4:	38 f0       	brcs	.+14     	; 0x4704 <__divsf3+0x1a>
    46f6:	21 f4       	brne	.+8      	; 0x4700 <__divsf3+0x16>
    46f8:	5f 3f       	cpi	r21, 0xFF	; 255
    46fa:	21 f0       	breq	.+8      	; 0x4704 <__divsf3+0x1a>
    46fc:	9e c0       	rjmp	.+316    	; 0x483a <__fp_inf>
    46fe:	51 11       	cpse	r21, r1
    4700:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <__fp_szero>
    4704:	a0 c0       	rjmp	.+320    	; 0x4846 <__fp_nan>

00004706 <__divsf3x>:
    4706:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__fp_split3>
    470a:	88 f3       	brcs	.-30     	; 0x46ee <__divsf3+0x4>

0000470c <__divsf3_pse>:
    470c:	99 23       	and	r25, r25
    470e:	b9 f3       	breq	.-18     	; 0x46fe <__divsf3+0x14>
    4710:	55 23       	and	r21, r21
    4712:	a1 f3       	breq	.-24     	; 0x46fc <__divsf3+0x12>
    4714:	95 1b       	sub	r25, r21
    4716:	55 0b       	sbc	r21, r21
    4718:	bb 27       	eor	r27, r27
    471a:	aa 27       	eor	r26, r26
    471c:	62 17       	cp	r22, r18
    471e:	73 07       	cpc	r23, r19
    4720:	84 07       	cpc	r24, r20
    4722:	38 f0       	brcs	.+14     	; 0x4732 <__divsf3_pse+0x26>
    4724:	9f 5f       	subi	r25, 0xFF	; 255
    4726:	5f 4f       	sbci	r21, 0xFF	; 255
    4728:	22 0f       	add	r18, r18
    472a:	33 1f       	adc	r19, r19
    472c:	44 1f       	adc	r20, r20
    472e:	aa 1f       	adc	r26, r26
    4730:	a9 f3       	breq	.-22     	; 0x471c <__divsf3_pse+0x10>
    4732:	34 d0       	rcall	.+104    	; 0x479c <__divsf3_pse+0x90>
    4734:	0e 2e       	mov	r0, r30
    4736:	3a f0       	brmi	.+14     	; 0x4746 <__divsf3_pse+0x3a>
    4738:	e0 e8       	ldi	r30, 0x80	; 128
    473a:	31 d0       	rcall	.+98     	; 0x479e <__divsf3_pse+0x92>
    473c:	91 50       	subi	r25, 0x01	; 1
    473e:	50 40       	sbci	r21, 0x00	; 0
    4740:	e6 95       	lsr	r30
    4742:	00 1c       	adc	r0, r0
    4744:	ca f7       	brpl	.-14     	; 0x4738 <__divsf3_pse+0x2c>
    4746:	2a d0       	rcall	.+84     	; 0x479c <__divsf3_pse+0x90>
    4748:	fe 2f       	mov	r31, r30
    474a:	28 d0       	rcall	.+80     	; 0x479c <__divsf3_pse+0x90>
    474c:	66 0f       	add	r22, r22
    474e:	77 1f       	adc	r23, r23
    4750:	88 1f       	adc	r24, r24
    4752:	bb 1f       	adc	r27, r27
    4754:	26 17       	cp	r18, r22
    4756:	37 07       	cpc	r19, r23
    4758:	48 07       	cpc	r20, r24
    475a:	ab 07       	cpc	r26, r27
    475c:	b0 e8       	ldi	r27, 0x80	; 128
    475e:	09 f0       	breq	.+2      	; 0x4762 <__divsf3_pse+0x56>
    4760:	bb 0b       	sbc	r27, r27
    4762:	80 2d       	mov	r24, r0
    4764:	bf 01       	movw	r22, r30
    4766:	ff 27       	eor	r31, r31
    4768:	93 58       	subi	r25, 0x83	; 131
    476a:	5f 4f       	sbci	r21, 0xFF	; 255
    476c:	32 f0       	brmi	.+12     	; 0x477a <__divsf3_pse+0x6e>
    476e:	9e 3f       	cpi	r25, 0xFE	; 254
    4770:	51 05       	cpc	r21, r1
    4772:	70 f0       	brcs	.+28     	; 0x4790 <__divsf3_pse+0x84>
    4774:	62 c0       	rjmp	.+196    	; 0x483a <__fp_inf>
    4776:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <__fp_szero>
    477a:	5f 3f       	cpi	r21, 0xFF	; 255
    477c:	e4 f3       	brlt	.-8      	; 0x4776 <__divsf3_pse+0x6a>
    477e:	98 3e       	cpi	r25, 0xE8	; 232
    4780:	d4 f3       	brlt	.-12     	; 0x4776 <__divsf3_pse+0x6a>
    4782:	86 95       	lsr	r24
    4784:	77 95       	ror	r23
    4786:	67 95       	ror	r22
    4788:	b7 95       	ror	r27
    478a:	f7 95       	ror	r31
    478c:	9f 5f       	subi	r25, 0xFF	; 255
    478e:	c9 f7       	brne	.-14     	; 0x4782 <__divsf3_pse+0x76>
    4790:	88 0f       	add	r24, r24
    4792:	91 1d       	adc	r25, r1
    4794:	96 95       	lsr	r25
    4796:	87 95       	ror	r24
    4798:	97 f9       	bld	r25, 7
    479a:	08 95       	ret
    479c:	e1 e0       	ldi	r30, 0x01	; 1
    479e:	66 0f       	add	r22, r22
    47a0:	77 1f       	adc	r23, r23
    47a2:	88 1f       	adc	r24, r24
    47a4:	bb 1f       	adc	r27, r27
    47a6:	62 17       	cp	r22, r18
    47a8:	73 07       	cpc	r23, r19
    47aa:	84 07       	cpc	r24, r20
    47ac:	ba 07       	cpc	r27, r26
    47ae:	20 f0       	brcs	.+8      	; 0x47b8 <__divsf3_pse+0xac>
    47b0:	62 1b       	sub	r22, r18
    47b2:	73 0b       	sbc	r23, r19
    47b4:	84 0b       	sbc	r24, r20
    47b6:	ba 0b       	sbc	r27, r26
    47b8:	ee 1f       	adc	r30, r30
    47ba:	88 f7       	brcc	.-30     	; 0x479e <__divsf3_pse+0x92>
    47bc:	e0 95       	com	r30
    47be:	08 95       	ret

000047c0 <__floatunsisf>:
    47c0:	e8 94       	clt
    47c2:	09 c0       	rjmp	.+18     	; 0x47d6 <__floatsisf+0x12>

000047c4 <__floatsisf>:
    47c4:	97 fb       	bst	r25, 7
    47c6:	3e f4       	brtc	.+14     	; 0x47d6 <__floatsisf+0x12>
    47c8:	90 95       	com	r25
    47ca:	80 95       	com	r24
    47cc:	70 95       	com	r23
    47ce:	61 95       	neg	r22
    47d0:	7f 4f       	sbci	r23, 0xFF	; 255
    47d2:	8f 4f       	sbci	r24, 0xFF	; 255
    47d4:	9f 4f       	sbci	r25, 0xFF	; 255
    47d6:	99 23       	and	r25, r25
    47d8:	a9 f0       	breq	.+42     	; 0x4804 <__floatsisf+0x40>
    47da:	f9 2f       	mov	r31, r25
    47dc:	96 e9       	ldi	r25, 0x96	; 150
    47de:	bb 27       	eor	r27, r27
    47e0:	93 95       	inc	r25
    47e2:	f6 95       	lsr	r31
    47e4:	87 95       	ror	r24
    47e6:	77 95       	ror	r23
    47e8:	67 95       	ror	r22
    47ea:	b7 95       	ror	r27
    47ec:	f1 11       	cpse	r31, r1
    47ee:	f8 cf       	rjmp	.-16     	; 0x47e0 <__floatsisf+0x1c>
    47f0:	fa f4       	brpl	.+62     	; 0x4830 <__floatsisf+0x6c>
    47f2:	bb 0f       	add	r27, r27
    47f4:	11 f4       	brne	.+4      	; 0x47fa <__floatsisf+0x36>
    47f6:	60 ff       	sbrs	r22, 0
    47f8:	1b c0       	rjmp	.+54     	; 0x4830 <__floatsisf+0x6c>
    47fa:	6f 5f       	subi	r22, 0xFF	; 255
    47fc:	7f 4f       	sbci	r23, 0xFF	; 255
    47fe:	8f 4f       	sbci	r24, 0xFF	; 255
    4800:	9f 4f       	sbci	r25, 0xFF	; 255
    4802:	16 c0       	rjmp	.+44     	; 0x4830 <__floatsisf+0x6c>
    4804:	88 23       	and	r24, r24
    4806:	11 f0       	breq	.+4      	; 0x480c <__floatsisf+0x48>
    4808:	96 e9       	ldi	r25, 0x96	; 150
    480a:	11 c0       	rjmp	.+34     	; 0x482e <__floatsisf+0x6a>
    480c:	77 23       	and	r23, r23
    480e:	21 f0       	breq	.+8      	; 0x4818 <__floatsisf+0x54>
    4810:	9e e8       	ldi	r25, 0x8E	; 142
    4812:	87 2f       	mov	r24, r23
    4814:	76 2f       	mov	r23, r22
    4816:	05 c0       	rjmp	.+10     	; 0x4822 <__floatsisf+0x5e>
    4818:	66 23       	and	r22, r22
    481a:	71 f0       	breq	.+28     	; 0x4838 <__floatsisf+0x74>
    481c:	96 e8       	ldi	r25, 0x86	; 134
    481e:	86 2f       	mov	r24, r22
    4820:	70 e0       	ldi	r23, 0x00	; 0
    4822:	60 e0       	ldi	r22, 0x00	; 0
    4824:	2a f0       	brmi	.+10     	; 0x4830 <__floatsisf+0x6c>
    4826:	9a 95       	dec	r25
    4828:	66 0f       	add	r22, r22
    482a:	77 1f       	adc	r23, r23
    482c:	88 1f       	adc	r24, r24
    482e:	da f7       	brpl	.-10     	; 0x4826 <__floatsisf+0x62>
    4830:	88 0f       	add	r24, r24
    4832:	96 95       	lsr	r25
    4834:	87 95       	ror	r24
    4836:	97 f9       	bld	r25, 7
    4838:	08 95       	ret

0000483a <__fp_inf>:
    483a:	97 f9       	bld	r25, 7
    483c:	9f 67       	ori	r25, 0x7F	; 127
    483e:	80 e8       	ldi	r24, 0x80	; 128
    4840:	70 e0       	ldi	r23, 0x00	; 0
    4842:	60 e0       	ldi	r22, 0x00	; 0
    4844:	08 95       	ret

00004846 <__fp_nan>:
    4846:	9f ef       	ldi	r25, 0xFF	; 255
    4848:	80 ec       	ldi	r24, 0xC0	; 192
    484a:	08 95       	ret

0000484c <__fp_pscA>:
    484c:	00 24       	eor	r0, r0
    484e:	0a 94       	dec	r0
    4850:	16 16       	cp	r1, r22
    4852:	17 06       	cpc	r1, r23
    4854:	18 06       	cpc	r1, r24
    4856:	09 06       	cpc	r0, r25
    4858:	08 95       	ret

0000485a <__fp_pscB>:
    485a:	00 24       	eor	r0, r0
    485c:	0a 94       	dec	r0
    485e:	12 16       	cp	r1, r18
    4860:	13 06       	cpc	r1, r19
    4862:	14 06       	cpc	r1, r20
    4864:	05 06       	cpc	r0, r21
    4866:	08 95       	ret

00004868 <__fp_round>:
    4868:	09 2e       	mov	r0, r25
    486a:	03 94       	inc	r0
    486c:	00 0c       	add	r0, r0
    486e:	11 f4       	brne	.+4      	; 0x4874 <__fp_round+0xc>
    4870:	88 23       	and	r24, r24
    4872:	52 f0       	brmi	.+20     	; 0x4888 <__fp_round+0x20>
    4874:	bb 0f       	add	r27, r27
    4876:	40 f4       	brcc	.+16     	; 0x4888 <__fp_round+0x20>
    4878:	bf 2b       	or	r27, r31
    487a:	11 f4       	brne	.+4      	; 0x4880 <__fp_round+0x18>
    487c:	60 ff       	sbrs	r22, 0
    487e:	04 c0       	rjmp	.+8      	; 0x4888 <__fp_round+0x20>
    4880:	6f 5f       	subi	r22, 0xFF	; 255
    4882:	7f 4f       	sbci	r23, 0xFF	; 255
    4884:	8f 4f       	sbci	r24, 0xFF	; 255
    4886:	9f 4f       	sbci	r25, 0xFF	; 255
    4888:	08 95       	ret

0000488a <__gesf2>:
    488a:	69 d0       	rcall	.+210    	; 0x495e <__fp_cmp>
    488c:	08 f4       	brcc	.+2      	; 0x4890 <__gesf2+0x6>
    488e:	8f ef       	ldi	r24, 0xFF	; 255
    4890:	08 95       	ret

00004892 <__mulsf3>:
    4892:	0c d0       	rcall	.+24     	; 0x48ac <__mulsf3x>
    4894:	e9 cf       	rjmp	.-46     	; 0x4868 <__fp_round>
    4896:	da df       	rcall	.-76     	; 0x484c <__fp_pscA>
    4898:	28 f0       	brcs	.+10     	; 0x48a4 <__mulsf3+0x12>
    489a:	df df       	rcall	.-66     	; 0x485a <__fp_pscB>
    489c:	18 f0       	brcs	.+6      	; 0x48a4 <__mulsf3+0x12>
    489e:	95 23       	and	r25, r21
    48a0:	09 f0       	breq	.+2      	; 0x48a4 <__mulsf3+0x12>
    48a2:	cb cf       	rjmp	.-106    	; 0x483a <__fp_inf>
    48a4:	d0 cf       	rjmp	.-96     	; 0x4846 <__fp_nan>
    48a6:	11 24       	eor	r1, r1
    48a8:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <__fp_szero>

000048ac <__mulsf3x>:
    48ac:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__fp_split3>
    48b0:	90 f3       	brcs	.-28     	; 0x4896 <__mulsf3+0x4>

000048b2 <__mulsf3_pse>:
    48b2:	95 9f       	mul	r25, r21
    48b4:	c1 f3       	breq	.-16     	; 0x48a6 <__mulsf3+0x14>
    48b6:	95 0f       	add	r25, r21
    48b8:	50 e0       	ldi	r21, 0x00	; 0
    48ba:	55 1f       	adc	r21, r21
    48bc:	62 9f       	mul	r22, r18
    48be:	f0 01       	movw	r30, r0
    48c0:	72 9f       	mul	r23, r18
    48c2:	bb 27       	eor	r27, r27
    48c4:	f0 0d       	add	r31, r0
    48c6:	b1 1d       	adc	r27, r1
    48c8:	63 9f       	mul	r22, r19
    48ca:	aa 27       	eor	r26, r26
    48cc:	f0 0d       	add	r31, r0
    48ce:	b1 1d       	adc	r27, r1
    48d0:	aa 1f       	adc	r26, r26
    48d2:	64 9f       	mul	r22, r20
    48d4:	66 27       	eor	r22, r22
    48d6:	b0 0d       	add	r27, r0
    48d8:	a1 1d       	adc	r26, r1
    48da:	66 1f       	adc	r22, r22
    48dc:	82 9f       	mul	r24, r18
    48de:	22 27       	eor	r18, r18
    48e0:	b0 0d       	add	r27, r0
    48e2:	a1 1d       	adc	r26, r1
    48e4:	62 1f       	adc	r22, r18
    48e6:	73 9f       	mul	r23, r19
    48e8:	b0 0d       	add	r27, r0
    48ea:	a1 1d       	adc	r26, r1
    48ec:	62 1f       	adc	r22, r18
    48ee:	83 9f       	mul	r24, r19
    48f0:	a0 0d       	add	r26, r0
    48f2:	61 1d       	adc	r22, r1
    48f4:	22 1f       	adc	r18, r18
    48f6:	74 9f       	mul	r23, r20
    48f8:	33 27       	eor	r19, r19
    48fa:	a0 0d       	add	r26, r0
    48fc:	61 1d       	adc	r22, r1
    48fe:	23 1f       	adc	r18, r19
    4900:	84 9f       	mul	r24, r20
    4902:	60 0d       	add	r22, r0
    4904:	21 1d       	adc	r18, r1
    4906:	82 2f       	mov	r24, r18
    4908:	76 2f       	mov	r23, r22
    490a:	6a 2f       	mov	r22, r26
    490c:	11 24       	eor	r1, r1
    490e:	9f 57       	subi	r25, 0x7F	; 127
    4910:	50 40       	sbci	r21, 0x00	; 0
    4912:	92 f0       	brmi	.+36     	; 0x4938 <__mulsf3_pse+0x86>
    4914:	e9 f0       	breq	.+58     	; 0x4950 <__mulsf3_pse+0x9e>
    4916:	88 23       	and	r24, r24
    4918:	4a f0       	brmi	.+18     	; 0x492c <__mulsf3_pse+0x7a>
    491a:	ee 0f       	add	r30, r30
    491c:	ff 1f       	adc	r31, r31
    491e:	bb 1f       	adc	r27, r27
    4920:	66 1f       	adc	r22, r22
    4922:	77 1f       	adc	r23, r23
    4924:	88 1f       	adc	r24, r24
    4926:	91 50       	subi	r25, 0x01	; 1
    4928:	50 40       	sbci	r21, 0x00	; 0
    492a:	a9 f7       	brne	.-22     	; 0x4916 <__mulsf3_pse+0x64>
    492c:	9e 3f       	cpi	r25, 0xFE	; 254
    492e:	51 05       	cpc	r21, r1
    4930:	78 f0       	brcs	.+30     	; 0x4950 <__mulsf3_pse+0x9e>
    4932:	83 cf       	rjmp	.-250    	; 0x483a <__fp_inf>
    4934:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <__fp_szero>
    4938:	5f 3f       	cpi	r21, 0xFF	; 255
    493a:	e4 f3       	brlt	.-8      	; 0x4934 <__mulsf3_pse+0x82>
    493c:	98 3e       	cpi	r25, 0xE8	; 232
    493e:	d4 f3       	brlt	.-12     	; 0x4934 <__mulsf3_pse+0x82>
    4940:	86 95       	lsr	r24
    4942:	77 95       	ror	r23
    4944:	67 95       	ror	r22
    4946:	b7 95       	ror	r27
    4948:	f7 95       	ror	r31
    494a:	e7 95       	ror	r30
    494c:	9f 5f       	subi	r25, 0xFF	; 255
    494e:	c1 f7       	brne	.-16     	; 0x4940 <__mulsf3_pse+0x8e>
    4950:	fe 2b       	or	r31, r30
    4952:	88 0f       	add	r24, r24
    4954:	91 1d       	adc	r25, r1
    4956:	96 95       	lsr	r25
    4958:	87 95       	ror	r24
    495a:	97 f9       	bld	r25, 7
    495c:	08 95       	ret

0000495e <__fp_cmp>:
    495e:	99 0f       	add	r25, r25
    4960:	00 08       	sbc	r0, r0
    4962:	55 0f       	add	r21, r21
    4964:	aa 0b       	sbc	r26, r26
    4966:	e0 e8       	ldi	r30, 0x80	; 128
    4968:	fe ef       	ldi	r31, 0xFE	; 254
    496a:	16 16       	cp	r1, r22
    496c:	17 06       	cpc	r1, r23
    496e:	e8 07       	cpc	r30, r24
    4970:	f9 07       	cpc	r31, r25
    4972:	c0 f0       	brcs	.+48     	; 0x49a4 <__fp_cmp+0x46>
    4974:	12 16       	cp	r1, r18
    4976:	13 06       	cpc	r1, r19
    4978:	e4 07       	cpc	r30, r20
    497a:	f5 07       	cpc	r31, r21
    497c:	98 f0       	brcs	.+38     	; 0x49a4 <__fp_cmp+0x46>
    497e:	62 1b       	sub	r22, r18
    4980:	73 0b       	sbc	r23, r19
    4982:	84 0b       	sbc	r24, r20
    4984:	95 0b       	sbc	r25, r21
    4986:	39 f4       	brne	.+14     	; 0x4996 <__fp_cmp+0x38>
    4988:	0a 26       	eor	r0, r26
    498a:	61 f0       	breq	.+24     	; 0x49a4 <__fp_cmp+0x46>
    498c:	23 2b       	or	r18, r19
    498e:	24 2b       	or	r18, r20
    4990:	25 2b       	or	r18, r21
    4992:	21 f4       	brne	.+8      	; 0x499c <__fp_cmp+0x3e>
    4994:	08 95       	ret
    4996:	0a 26       	eor	r0, r26
    4998:	09 f4       	brne	.+2      	; 0x499c <__fp_cmp+0x3e>
    499a:	a1 40       	sbci	r26, 0x01	; 1
    499c:	a6 95       	lsr	r26
    499e:	8f ef       	ldi	r24, 0xFF	; 255
    49a0:	81 1d       	adc	r24, r1
    49a2:	81 1d       	adc	r24, r1
    49a4:	08 95       	ret

000049a6 <__udivmodsi4>:
    49a6:	a1 e2       	ldi	r26, 0x21	; 33
    49a8:	1a 2e       	mov	r1, r26
    49aa:	aa 1b       	sub	r26, r26
    49ac:	bb 1b       	sub	r27, r27
    49ae:	fd 01       	movw	r30, r26
    49b0:	0d c0       	rjmp	.+26     	; 0x49cc <__udivmodsi4_ep>

000049b2 <__udivmodsi4_loop>:
    49b2:	aa 1f       	adc	r26, r26
    49b4:	bb 1f       	adc	r27, r27
    49b6:	ee 1f       	adc	r30, r30
    49b8:	ff 1f       	adc	r31, r31
    49ba:	a2 17       	cp	r26, r18
    49bc:	b3 07       	cpc	r27, r19
    49be:	e4 07       	cpc	r30, r20
    49c0:	f5 07       	cpc	r31, r21
    49c2:	20 f0       	brcs	.+8      	; 0x49cc <__udivmodsi4_ep>
    49c4:	a2 1b       	sub	r26, r18
    49c6:	b3 0b       	sbc	r27, r19
    49c8:	e4 0b       	sbc	r30, r20
    49ca:	f5 0b       	sbc	r31, r21

000049cc <__udivmodsi4_ep>:
    49cc:	66 1f       	adc	r22, r22
    49ce:	77 1f       	adc	r23, r23
    49d0:	88 1f       	adc	r24, r24
    49d2:	99 1f       	adc	r25, r25
    49d4:	1a 94       	dec	r1
    49d6:	69 f7       	brne	.-38     	; 0x49b2 <__udivmodsi4_loop>
    49d8:	60 95       	com	r22
    49da:	70 95       	com	r23
    49dc:	80 95       	com	r24
    49de:	90 95       	com	r25
    49e0:	9b 01       	movw	r18, r22
    49e2:	ac 01       	movw	r20, r24
    49e4:	bd 01       	movw	r22, r26
    49e6:	cf 01       	movw	r24, r30
    49e8:	08 95       	ret

000049ea <__tablejump2__>:
    49ea:	ee 0f       	add	r30, r30
    49ec:	ff 1f       	adc	r31, r31
    49ee:	88 1f       	adc	r24, r24
    49f0:	8b bf       	out	0x3b, r24	; 59
    49f2:	07 90       	elpm	r0, Z+
    49f4:	f6 91       	elpm	r31, Z
    49f6:	e0 2d       	mov	r30, r0
    49f8:	19 94       	eijmp

000049fa <calloc>:
    49fa:	0f 93       	push	r16
    49fc:	1f 93       	push	r17
    49fe:	cf 93       	push	r28
    4a00:	df 93       	push	r29
    4a02:	86 9f       	mul	r24, r22
    4a04:	80 01       	movw	r16, r0
    4a06:	87 9f       	mul	r24, r23
    4a08:	10 0d       	add	r17, r0
    4a0a:	96 9f       	mul	r25, r22
    4a0c:	10 0d       	add	r17, r0
    4a0e:	11 24       	eor	r1, r1
    4a10:	c8 01       	movw	r24, r16
    4a12:	0d d0       	rcall	.+26     	; 0x4a2e <malloc>
    4a14:	ec 01       	movw	r28, r24
    4a16:	00 97       	sbiw	r24, 0x00	; 0
    4a18:	21 f0       	breq	.+8      	; 0x4a22 <calloc+0x28>
    4a1a:	a8 01       	movw	r20, r16
    4a1c:	60 e0       	ldi	r22, 0x00	; 0
    4a1e:	70 e0       	ldi	r23, 0x00	; 0
    4a20:	34 d1       	rcall	.+616    	; 0x4c8a <memset>
    4a22:	ce 01       	movw	r24, r28
    4a24:	df 91       	pop	r29
    4a26:	cf 91       	pop	r28
    4a28:	1f 91       	pop	r17
    4a2a:	0f 91       	pop	r16
    4a2c:	08 95       	ret

00004a2e <malloc>:
    4a2e:	0f 93       	push	r16
    4a30:	1f 93       	push	r17
    4a32:	cf 93       	push	r28
    4a34:	df 93       	push	r29
    4a36:	82 30       	cpi	r24, 0x02	; 2
    4a38:	91 05       	cpc	r25, r1
    4a3a:	10 f4       	brcc	.+4      	; 0x4a40 <malloc+0x12>
    4a3c:	82 e0       	ldi	r24, 0x02	; 2
    4a3e:	90 e0       	ldi	r25, 0x00	; 0
    4a40:	e0 91 4c 0a 	lds	r30, 0x0A4C	; 0x800a4c <__flp>
    4a44:	f0 91 4d 0a 	lds	r31, 0x0A4D	; 0x800a4d <__flp+0x1>
    4a48:	20 e0       	ldi	r18, 0x00	; 0
    4a4a:	30 e0       	ldi	r19, 0x00	; 0
    4a4c:	a0 e0       	ldi	r26, 0x00	; 0
    4a4e:	b0 e0       	ldi	r27, 0x00	; 0
    4a50:	30 97       	sbiw	r30, 0x00	; 0
    4a52:	19 f1       	breq	.+70     	; 0x4a9a <malloc+0x6c>
    4a54:	40 81       	ld	r20, Z
    4a56:	51 81       	ldd	r21, Z+1	; 0x01
    4a58:	02 81       	ldd	r16, Z+2	; 0x02
    4a5a:	13 81       	ldd	r17, Z+3	; 0x03
    4a5c:	48 17       	cp	r20, r24
    4a5e:	59 07       	cpc	r21, r25
    4a60:	c8 f0       	brcs	.+50     	; 0x4a94 <malloc+0x66>
    4a62:	84 17       	cp	r24, r20
    4a64:	95 07       	cpc	r25, r21
    4a66:	69 f4       	brne	.+26     	; 0x4a82 <malloc+0x54>
    4a68:	10 97       	sbiw	r26, 0x00	; 0
    4a6a:	31 f0       	breq	.+12     	; 0x4a78 <malloc+0x4a>
    4a6c:	12 96       	adiw	r26, 0x02	; 2
    4a6e:	0c 93       	st	X, r16
    4a70:	12 97       	sbiw	r26, 0x02	; 2
    4a72:	13 96       	adiw	r26, 0x03	; 3
    4a74:	1c 93       	st	X, r17
    4a76:	27 c0       	rjmp	.+78     	; 0x4ac6 <malloc+0x98>
    4a78:	00 93 4c 0a 	sts	0x0A4C, r16	; 0x800a4c <__flp>
    4a7c:	10 93 4d 0a 	sts	0x0A4D, r17	; 0x800a4d <__flp+0x1>
    4a80:	22 c0       	rjmp	.+68     	; 0x4ac6 <malloc+0x98>
    4a82:	21 15       	cp	r18, r1
    4a84:	31 05       	cpc	r19, r1
    4a86:	19 f0       	breq	.+6      	; 0x4a8e <malloc+0x60>
    4a88:	42 17       	cp	r20, r18
    4a8a:	53 07       	cpc	r21, r19
    4a8c:	18 f4       	brcc	.+6      	; 0x4a94 <malloc+0x66>
    4a8e:	9a 01       	movw	r18, r20
    4a90:	bd 01       	movw	r22, r26
    4a92:	ef 01       	movw	r28, r30
    4a94:	df 01       	movw	r26, r30
    4a96:	f8 01       	movw	r30, r16
    4a98:	db cf       	rjmp	.-74     	; 0x4a50 <malloc+0x22>
    4a9a:	21 15       	cp	r18, r1
    4a9c:	31 05       	cpc	r19, r1
    4a9e:	f9 f0       	breq	.+62     	; 0x4ade <malloc+0xb0>
    4aa0:	28 1b       	sub	r18, r24
    4aa2:	39 0b       	sbc	r19, r25
    4aa4:	24 30       	cpi	r18, 0x04	; 4
    4aa6:	31 05       	cpc	r19, r1
    4aa8:	80 f4       	brcc	.+32     	; 0x4aca <malloc+0x9c>
    4aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    4aac:	9b 81       	ldd	r25, Y+3	; 0x03
    4aae:	61 15       	cp	r22, r1
    4ab0:	71 05       	cpc	r23, r1
    4ab2:	21 f0       	breq	.+8      	; 0x4abc <malloc+0x8e>
    4ab4:	fb 01       	movw	r30, r22
    4ab6:	93 83       	std	Z+3, r25	; 0x03
    4ab8:	82 83       	std	Z+2, r24	; 0x02
    4aba:	04 c0       	rjmp	.+8      	; 0x4ac4 <malloc+0x96>
    4abc:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <__flp+0x1>
    4ac0:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <__flp>
    4ac4:	fe 01       	movw	r30, r28
    4ac6:	32 96       	adiw	r30, 0x02	; 2
    4ac8:	44 c0       	rjmp	.+136    	; 0x4b52 <malloc+0x124>
    4aca:	fe 01       	movw	r30, r28
    4acc:	e2 0f       	add	r30, r18
    4ace:	f3 1f       	adc	r31, r19
    4ad0:	81 93       	st	Z+, r24
    4ad2:	91 93       	st	Z+, r25
    4ad4:	22 50       	subi	r18, 0x02	; 2
    4ad6:	31 09       	sbc	r19, r1
    4ad8:	39 83       	std	Y+1, r19	; 0x01
    4ada:	28 83       	st	Y, r18
    4adc:	3a c0       	rjmp	.+116    	; 0x4b52 <malloc+0x124>
    4ade:	20 91 4a 0a 	lds	r18, 0x0A4A	; 0x800a4a <__brkval>
    4ae2:	30 91 4b 0a 	lds	r19, 0x0A4B	; 0x800a4b <__brkval+0x1>
    4ae6:	23 2b       	or	r18, r19
    4ae8:	41 f4       	brne	.+16     	; 0x4afa <malloc+0xcc>
    4aea:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    4aee:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    4af2:	30 93 4b 0a 	sts	0x0A4B, r19	; 0x800a4b <__brkval+0x1>
    4af6:	20 93 4a 0a 	sts	0x0A4A, r18	; 0x800a4a <__brkval>
    4afa:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    4afe:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    4b02:	21 15       	cp	r18, r1
    4b04:	31 05       	cpc	r19, r1
    4b06:	41 f4       	brne	.+16     	; 0x4b18 <malloc+0xea>
    4b08:	2d b7       	in	r18, 0x3d	; 61
    4b0a:	3e b7       	in	r19, 0x3e	; 62
    4b0c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4b10:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4b14:	24 1b       	sub	r18, r20
    4b16:	35 0b       	sbc	r19, r21
    4b18:	e0 91 4a 0a 	lds	r30, 0x0A4A	; 0x800a4a <__brkval>
    4b1c:	f0 91 4b 0a 	lds	r31, 0x0A4B	; 0x800a4b <__brkval+0x1>
    4b20:	e2 17       	cp	r30, r18
    4b22:	f3 07       	cpc	r31, r19
    4b24:	a0 f4       	brcc	.+40     	; 0x4b4e <malloc+0x120>
    4b26:	2e 1b       	sub	r18, r30
    4b28:	3f 0b       	sbc	r19, r31
    4b2a:	28 17       	cp	r18, r24
    4b2c:	39 07       	cpc	r19, r25
    4b2e:	78 f0       	brcs	.+30     	; 0x4b4e <malloc+0x120>
    4b30:	ac 01       	movw	r20, r24
    4b32:	4e 5f       	subi	r20, 0xFE	; 254
    4b34:	5f 4f       	sbci	r21, 0xFF	; 255
    4b36:	24 17       	cp	r18, r20
    4b38:	35 07       	cpc	r19, r21
    4b3a:	48 f0       	brcs	.+18     	; 0x4b4e <malloc+0x120>
    4b3c:	4e 0f       	add	r20, r30
    4b3e:	5f 1f       	adc	r21, r31
    4b40:	50 93 4b 0a 	sts	0x0A4B, r21	; 0x800a4b <__brkval+0x1>
    4b44:	40 93 4a 0a 	sts	0x0A4A, r20	; 0x800a4a <__brkval>
    4b48:	81 93       	st	Z+, r24
    4b4a:	91 93       	st	Z+, r25
    4b4c:	02 c0       	rjmp	.+4      	; 0x4b52 <malloc+0x124>
    4b4e:	e0 e0       	ldi	r30, 0x00	; 0
    4b50:	f0 e0       	ldi	r31, 0x00	; 0
    4b52:	cf 01       	movw	r24, r30
    4b54:	df 91       	pop	r29
    4b56:	cf 91       	pop	r28
    4b58:	1f 91       	pop	r17
    4b5a:	0f 91       	pop	r16
    4b5c:	08 95       	ret

00004b5e <free>:
    4b5e:	cf 93       	push	r28
    4b60:	df 93       	push	r29
    4b62:	00 97       	sbiw	r24, 0x00	; 0
    4b64:	09 f4       	brne	.+2      	; 0x4b68 <free+0xa>
    4b66:	81 c0       	rjmp	.+258    	; 0x4c6a <free+0x10c>
    4b68:	fc 01       	movw	r30, r24
    4b6a:	32 97       	sbiw	r30, 0x02	; 2
    4b6c:	13 82       	std	Z+3, r1	; 0x03
    4b6e:	12 82       	std	Z+2, r1	; 0x02
    4b70:	a0 91 4c 0a 	lds	r26, 0x0A4C	; 0x800a4c <__flp>
    4b74:	b0 91 4d 0a 	lds	r27, 0x0A4D	; 0x800a4d <__flp+0x1>
    4b78:	10 97       	sbiw	r26, 0x00	; 0
    4b7a:	81 f4       	brne	.+32     	; 0x4b9c <free+0x3e>
    4b7c:	20 81       	ld	r18, Z
    4b7e:	31 81       	ldd	r19, Z+1	; 0x01
    4b80:	82 0f       	add	r24, r18
    4b82:	93 1f       	adc	r25, r19
    4b84:	20 91 4a 0a 	lds	r18, 0x0A4A	; 0x800a4a <__brkval>
    4b88:	30 91 4b 0a 	lds	r19, 0x0A4B	; 0x800a4b <__brkval+0x1>
    4b8c:	28 17       	cp	r18, r24
    4b8e:	39 07       	cpc	r19, r25
    4b90:	51 f5       	brne	.+84     	; 0x4be6 <free+0x88>
    4b92:	f0 93 4b 0a 	sts	0x0A4B, r31	; 0x800a4b <__brkval+0x1>
    4b96:	e0 93 4a 0a 	sts	0x0A4A, r30	; 0x800a4a <__brkval>
    4b9a:	67 c0       	rjmp	.+206    	; 0x4c6a <free+0x10c>
    4b9c:	ed 01       	movw	r28, r26
    4b9e:	20 e0       	ldi	r18, 0x00	; 0
    4ba0:	30 e0       	ldi	r19, 0x00	; 0
    4ba2:	ce 17       	cp	r28, r30
    4ba4:	df 07       	cpc	r29, r31
    4ba6:	40 f4       	brcc	.+16     	; 0x4bb8 <free+0x5a>
    4ba8:	4a 81       	ldd	r20, Y+2	; 0x02
    4baa:	5b 81       	ldd	r21, Y+3	; 0x03
    4bac:	9e 01       	movw	r18, r28
    4bae:	41 15       	cp	r20, r1
    4bb0:	51 05       	cpc	r21, r1
    4bb2:	f1 f0       	breq	.+60     	; 0x4bf0 <free+0x92>
    4bb4:	ea 01       	movw	r28, r20
    4bb6:	f5 cf       	rjmp	.-22     	; 0x4ba2 <free+0x44>
    4bb8:	d3 83       	std	Z+3, r29	; 0x03
    4bba:	c2 83       	std	Z+2, r28	; 0x02
    4bbc:	40 81       	ld	r20, Z
    4bbe:	51 81       	ldd	r21, Z+1	; 0x01
    4bc0:	84 0f       	add	r24, r20
    4bc2:	95 1f       	adc	r25, r21
    4bc4:	c8 17       	cp	r28, r24
    4bc6:	d9 07       	cpc	r29, r25
    4bc8:	59 f4       	brne	.+22     	; 0x4be0 <free+0x82>
    4bca:	88 81       	ld	r24, Y
    4bcc:	99 81       	ldd	r25, Y+1	; 0x01
    4bce:	84 0f       	add	r24, r20
    4bd0:	95 1f       	adc	r25, r21
    4bd2:	02 96       	adiw	r24, 0x02	; 2
    4bd4:	91 83       	std	Z+1, r25	; 0x01
    4bd6:	80 83       	st	Z, r24
    4bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    4bda:	9b 81       	ldd	r25, Y+3	; 0x03
    4bdc:	93 83       	std	Z+3, r25	; 0x03
    4bde:	82 83       	std	Z+2, r24	; 0x02
    4be0:	21 15       	cp	r18, r1
    4be2:	31 05       	cpc	r19, r1
    4be4:	29 f4       	brne	.+10     	; 0x4bf0 <free+0x92>
    4be6:	f0 93 4d 0a 	sts	0x0A4D, r31	; 0x800a4d <__flp+0x1>
    4bea:	e0 93 4c 0a 	sts	0x0A4C, r30	; 0x800a4c <__flp>
    4bee:	3d c0       	rjmp	.+122    	; 0x4c6a <free+0x10c>
    4bf0:	e9 01       	movw	r28, r18
    4bf2:	fb 83       	std	Y+3, r31	; 0x03
    4bf4:	ea 83       	std	Y+2, r30	; 0x02
    4bf6:	49 91       	ld	r20, Y+
    4bf8:	59 91       	ld	r21, Y+
    4bfa:	c4 0f       	add	r28, r20
    4bfc:	d5 1f       	adc	r29, r21
    4bfe:	ec 17       	cp	r30, r28
    4c00:	fd 07       	cpc	r31, r29
    4c02:	61 f4       	brne	.+24     	; 0x4c1c <free+0xbe>
    4c04:	80 81       	ld	r24, Z
    4c06:	91 81       	ldd	r25, Z+1	; 0x01
    4c08:	84 0f       	add	r24, r20
    4c0a:	95 1f       	adc	r25, r21
    4c0c:	02 96       	adiw	r24, 0x02	; 2
    4c0e:	e9 01       	movw	r28, r18
    4c10:	99 83       	std	Y+1, r25	; 0x01
    4c12:	88 83       	st	Y, r24
    4c14:	82 81       	ldd	r24, Z+2	; 0x02
    4c16:	93 81       	ldd	r25, Z+3	; 0x03
    4c18:	9b 83       	std	Y+3, r25	; 0x03
    4c1a:	8a 83       	std	Y+2, r24	; 0x02
    4c1c:	e0 e0       	ldi	r30, 0x00	; 0
    4c1e:	f0 e0       	ldi	r31, 0x00	; 0
    4c20:	12 96       	adiw	r26, 0x02	; 2
    4c22:	8d 91       	ld	r24, X+
    4c24:	9c 91       	ld	r25, X
    4c26:	13 97       	sbiw	r26, 0x03	; 3
    4c28:	00 97       	sbiw	r24, 0x00	; 0
    4c2a:	19 f0       	breq	.+6      	; 0x4c32 <free+0xd4>
    4c2c:	fd 01       	movw	r30, r26
    4c2e:	dc 01       	movw	r26, r24
    4c30:	f7 cf       	rjmp	.-18     	; 0x4c20 <free+0xc2>
    4c32:	8d 91       	ld	r24, X+
    4c34:	9c 91       	ld	r25, X
    4c36:	11 97       	sbiw	r26, 0x01	; 1
    4c38:	9d 01       	movw	r18, r26
    4c3a:	2e 5f       	subi	r18, 0xFE	; 254
    4c3c:	3f 4f       	sbci	r19, 0xFF	; 255
    4c3e:	82 0f       	add	r24, r18
    4c40:	93 1f       	adc	r25, r19
    4c42:	20 91 4a 0a 	lds	r18, 0x0A4A	; 0x800a4a <__brkval>
    4c46:	30 91 4b 0a 	lds	r19, 0x0A4B	; 0x800a4b <__brkval+0x1>
    4c4a:	28 17       	cp	r18, r24
    4c4c:	39 07       	cpc	r19, r25
    4c4e:	69 f4       	brne	.+26     	; 0x4c6a <free+0x10c>
    4c50:	30 97       	sbiw	r30, 0x00	; 0
    4c52:	29 f4       	brne	.+10     	; 0x4c5e <free+0x100>
    4c54:	10 92 4d 0a 	sts	0x0A4D, r1	; 0x800a4d <__flp+0x1>
    4c58:	10 92 4c 0a 	sts	0x0A4C, r1	; 0x800a4c <__flp>
    4c5c:	02 c0       	rjmp	.+4      	; 0x4c62 <free+0x104>
    4c5e:	13 82       	std	Z+3, r1	; 0x03
    4c60:	12 82       	std	Z+2, r1	; 0x02
    4c62:	b0 93 4b 0a 	sts	0x0A4B, r27	; 0x800a4b <__brkval+0x1>
    4c66:	a0 93 4a 0a 	sts	0x0A4A, r26	; 0x800a4a <__brkval>
    4c6a:	df 91       	pop	r29
    4c6c:	cf 91       	pop	r28
    4c6e:	08 95       	ret

00004c70 <abort>:
    4c70:	81 e0       	ldi	r24, 0x01	; 1
    4c72:	90 e0       	ldi	r25, 0x00	; 0
    4c74:	f8 94       	cli
    4c76:	58 c3       	rjmp	.+1712   	; 0x5328 <_exit>

00004c78 <memcpy>:
    4c78:	fb 01       	movw	r30, r22
    4c7a:	dc 01       	movw	r26, r24
    4c7c:	02 c0       	rjmp	.+4      	; 0x4c82 <memcpy+0xa>
    4c7e:	01 90       	ld	r0, Z+
    4c80:	0d 92       	st	X+, r0
    4c82:	41 50       	subi	r20, 0x01	; 1
    4c84:	50 40       	sbci	r21, 0x00	; 0
    4c86:	d8 f7       	brcc	.-10     	; 0x4c7e <memcpy+0x6>
    4c88:	08 95       	ret

00004c8a <memset>:
    4c8a:	dc 01       	movw	r26, r24
    4c8c:	01 c0       	rjmp	.+2      	; 0x4c90 <memset+0x6>
    4c8e:	6d 93       	st	X+, r22
    4c90:	41 50       	subi	r20, 0x01	; 1
    4c92:	50 40       	sbci	r21, 0x00	; 0
    4c94:	e0 f7       	brcc	.-8      	; 0x4c8e <memset+0x4>
    4c96:	08 95       	ret

00004c98 <strcat>:
    4c98:	fb 01       	movw	r30, r22
    4c9a:	dc 01       	movw	r26, r24
    4c9c:	0d 90       	ld	r0, X+
    4c9e:	00 20       	and	r0, r0
    4ca0:	e9 f7       	brne	.-6      	; 0x4c9c <strcat+0x4>
    4ca2:	11 97       	sbiw	r26, 0x01	; 1
    4ca4:	01 90       	ld	r0, Z+
    4ca6:	0d 92       	st	X+, r0
    4ca8:	00 20       	and	r0, r0
    4caa:	e1 f7       	brne	.-8      	; 0x4ca4 <strcat+0xc>
    4cac:	08 95       	ret

00004cae <strcpy>:
    4cae:	fb 01       	movw	r30, r22
    4cb0:	dc 01       	movw	r26, r24
    4cb2:	01 90       	ld	r0, Z+
    4cb4:	0d 92       	st	X+, r0
    4cb6:	00 20       	and	r0, r0
    4cb8:	e1 f7       	brne	.-8      	; 0x4cb2 <strcpy+0x4>
    4cba:	08 95       	ret

00004cbc <strncasecmp>:
    4cbc:	fb 01       	movw	r30, r22
    4cbe:	dc 01       	movw	r26, r24
    4cc0:	41 50       	subi	r20, 0x01	; 1
    4cc2:	50 40       	sbci	r21, 0x00	; 0
    4cc4:	88 f0       	brcs	.+34     	; 0x4ce8 <strncasecmp+0x2c>
    4cc6:	8d 91       	ld	r24, X+
    4cc8:	81 34       	cpi	r24, 0x41	; 65
    4cca:	1c f0       	brlt	.+6      	; 0x4cd2 <strncasecmp+0x16>
    4ccc:	8b 35       	cpi	r24, 0x5B	; 91
    4cce:	0c f4       	brge	.+2      	; 0x4cd2 <strncasecmp+0x16>
    4cd0:	80 5e       	subi	r24, 0xE0	; 224
    4cd2:	61 91       	ld	r22, Z+
    4cd4:	61 34       	cpi	r22, 0x41	; 65
    4cd6:	1c f0       	brlt	.+6      	; 0x4cde <strncasecmp+0x22>
    4cd8:	6b 35       	cpi	r22, 0x5B	; 91
    4cda:	0c f4       	brge	.+2      	; 0x4cde <strncasecmp+0x22>
    4cdc:	60 5e       	subi	r22, 0xE0	; 224
    4cde:	86 1b       	sub	r24, r22
    4ce0:	61 11       	cpse	r22, r1
    4ce2:	71 f3       	breq	.-36     	; 0x4cc0 <strncasecmp+0x4>
    4ce4:	99 0b       	sbc	r25, r25
    4ce6:	08 95       	ret
    4ce8:	88 1b       	sub	r24, r24
    4cea:	fc cf       	rjmp	.-8      	; 0x4ce4 <strncasecmp+0x28>

00004cec <printf>:
    4cec:	cf 93       	push	r28
    4cee:	df 93       	push	r29
    4cf0:	cd b7       	in	r28, 0x3d	; 61
    4cf2:	de b7       	in	r29, 0x3e	; 62
    4cf4:	ae 01       	movw	r20, r28
    4cf6:	4a 5f       	subi	r20, 0xFA	; 250
    4cf8:	5f 4f       	sbci	r21, 0xFF	; 255
    4cfa:	fa 01       	movw	r30, r20
    4cfc:	61 91       	ld	r22, Z+
    4cfe:	71 91       	ld	r23, Z+
    4d00:	af 01       	movw	r20, r30
    4d02:	80 91 50 0a 	lds	r24, 0x0A50	; 0x800a50 <__iob+0x2>
    4d06:	90 91 51 0a 	lds	r25, 0x0A51	; 0x800a51 <__iob+0x3>
    4d0a:	61 d0       	rcall	.+194    	; 0x4dce <vfprintf>
    4d0c:	df 91       	pop	r29
    4d0e:	cf 91       	pop	r28
    4d10:	08 95       	ret

00004d12 <puts>:
    4d12:	0f 93       	push	r16
    4d14:	1f 93       	push	r17
    4d16:	cf 93       	push	r28
    4d18:	df 93       	push	r29
    4d1a:	e0 91 50 0a 	lds	r30, 0x0A50	; 0x800a50 <__iob+0x2>
    4d1e:	f0 91 51 0a 	lds	r31, 0x0A51	; 0x800a51 <__iob+0x3>
    4d22:	23 81       	ldd	r18, Z+3	; 0x03
    4d24:	21 ff       	sbrs	r18, 1
    4d26:	1b c0       	rjmp	.+54     	; 0x4d5e <puts+0x4c>
    4d28:	8c 01       	movw	r16, r24
    4d2a:	d0 e0       	ldi	r29, 0x00	; 0
    4d2c:	c0 e0       	ldi	r28, 0x00	; 0
    4d2e:	f8 01       	movw	r30, r16
    4d30:	81 91       	ld	r24, Z+
    4d32:	8f 01       	movw	r16, r30
    4d34:	60 91 50 0a 	lds	r22, 0x0A50	; 0x800a50 <__iob+0x2>
    4d38:	70 91 51 0a 	lds	r23, 0x0A51	; 0x800a51 <__iob+0x3>
    4d3c:	db 01       	movw	r26, r22
    4d3e:	18 96       	adiw	r26, 0x08	; 8
    4d40:	ed 91       	ld	r30, X+
    4d42:	fc 91       	ld	r31, X
    4d44:	19 97       	sbiw	r26, 0x09	; 9
    4d46:	88 23       	and	r24, r24
    4d48:	31 f0       	breq	.+12     	; 0x4d56 <puts+0x44>
    4d4a:	19 95       	eicall
    4d4c:	89 2b       	or	r24, r25
    4d4e:	79 f3       	breq	.-34     	; 0x4d2e <puts+0x1c>
    4d50:	df ef       	ldi	r29, 0xFF	; 255
    4d52:	cf ef       	ldi	r28, 0xFF	; 255
    4d54:	ec cf       	rjmp	.-40     	; 0x4d2e <puts+0x1c>
    4d56:	8a e0       	ldi	r24, 0x0A	; 10
    4d58:	19 95       	eicall
    4d5a:	89 2b       	or	r24, r25
    4d5c:	19 f0       	breq	.+6      	; 0x4d64 <puts+0x52>
    4d5e:	8f ef       	ldi	r24, 0xFF	; 255
    4d60:	9f ef       	ldi	r25, 0xFF	; 255
    4d62:	02 c0       	rjmp	.+4      	; 0x4d68 <puts+0x56>
    4d64:	8d 2f       	mov	r24, r29
    4d66:	9c 2f       	mov	r25, r28
    4d68:	df 91       	pop	r29
    4d6a:	cf 91       	pop	r28
    4d6c:	1f 91       	pop	r17
    4d6e:	0f 91       	pop	r16
    4d70:	08 95       	ret

00004d72 <sprintf>:
    4d72:	0f 93       	push	r16
    4d74:	1f 93       	push	r17
    4d76:	cf 93       	push	r28
    4d78:	df 93       	push	r29
    4d7a:	cd b7       	in	r28, 0x3d	; 61
    4d7c:	de b7       	in	r29, 0x3e	; 62
    4d7e:	2e 97       	sbiw	r28, 0x0e	; 14
    4d80:	0f b6       	in	r0, 0x3f	; 63
    4d82:	f8 94       	cli
    4d84:	de bf       	out	0x3e, r29	; 62
    4d86:	0f be       	out	0x3f, r0	; 63
    4d88:	cd bf       	out	0x3d, r28	; 61
    4d8a:	0e 89       	ldd	r16, Y+22	; 0x16
    4d8c:	1f 89       	ldd	r17, Y+23	; 0x17
    4d8e:	86 e0       	ldi	r24, 0x06	; 6
    4d90:	8c 83       	std	Y+4, r24	; 0x04
    4d92:	1a 83       	std	Y+2, r17	; 0x02
    4d94:	09 83       	std	Y+1, r16	; 0x01
    4d96:	8f ef       	ldi	r24, 0xFF	; 255
    4d98:	9f e7       	ldi	r25, 0x7F	; 127
    4d9a:	9e 83       	std	Y+6, r25	; 0x06
    4d9c:	8d 83       	std	Y+5, r24	; 0x05
    4d9e:	ae 01       	movw	r20, r28
    4da0:	46 5e       	subi	r20, 0xE6	; 230
    4da2:	5f 4f       	sbci	r21, 0xFF	; 255
    4da4:	68 8d       	ldd	r22, Y+24	; 0x18
    4da6:	79 8d       	ldd	r23, Y+25	; 0x19
    4da8:	ce 01       	movw	r24, r28
    4daa:	01 96       	adiw	r24, 0x01	; 1
    4dac:	10 d0       	rcall	.+32     	; 0x4dce <vfprintf>
    4dae:	ef 81       	ldd	r30, Y+7	; 0x07
    4db0:	f8 85       	ldd	r31, Y+8	; 0x08
    4db2:	e0 0f       	add	r30, r16
    4db4:	f1 1f       	adc	r31, r17
    4db6:	10 82       	st	Z, r1
    4db8:	2e 96       	adiw	r28, 0x0e	; 14
    4dba:	0f b6       	in	r0, 0x3f	; 63
    4dbc:	f8 94       	cli
    4dbe:	de bf       	out	0x3e, r29	; 62
    4dc0:	0f be       	out	0x3f, r0	; 63
    4dc2:	cd bf       	out	0x3d, r28	; 61
    4dc4:	df 91       	pop	r29
    4dc6:	cf 91       	pop	r28
    4dc8:	1f 91       	pop	r17
    4dca:	0f 91       	pop	r16
    4dcc:	08 95       	ret

00004dce <vfprintf>:
    4dce:	2f 92       	push	r2
    4dd0:	3f 92       	push	r3
    4dd2:	4f 92       	push	r4
    4dd4:	5f 92       	push	r5
    4dd6:	6f 92       	push	r6
    4dd8:	7f 92       	push	r7
    4dda:	8f 92       	push	r8
    4ddc:	9f 92       	push	r9
    4dde:	af 92       	push	r10
    4de0:	bf 92       	push	r11
    4de2:	cf 92       	push	r12
    4de4:	df 92       	push	r13
    4de6:	ef 92       	push	r14
    4de8:	ff 92       	push	r15
    4dea:	0f 93       	push	r16
    4dec:	1f 93       	push	r17
    4dee:	cf 93       	push	r28
    4df0:	df 93       	push	r29
    4df2:	cd b7       	in	r28, 0x3d	; 61
    4df4:	de b7       	in	r29, 0x3e	; 62
    4df6:	2b 97       	sbiw	r28, 0x0b	; 11
    4df8:	0f b6       	in	r0, 0x3f	; 63
    4dfa:	f8 94       	cli
    4dfc:	de bf       	out	0x3e, r29	; 62
    4dfe:	0f be       	out	0x3f, r0	; 63
    4e00:	cd bf       	out	0x3d, r28	; 61
    4e02:	6c 01       	movw	r12, r24
    4e04:	7b 01       	movw	r14, r22
    4e06:	8a 01       	movw	r16, r20
    4e08:	fc 01       	movw	r30, r24
    4e0a:	17 82       	std	Z+7, r1	; 0x07
    4e0c:	16 82       	std	Z+6, r1	; 0x06
    4e0e:	83 81       	ldd	r24, Z+3	; 0x03
    4e10:	81 ff       	sbrs	r24, 1
    4e12:	bf c1       	rjmp	.+894    	; 0x5192 <vfprintf+0x3c4>
    4e14:	ce 01       	movw	r24, r28
    4e16:	01 96       	adiw	r24, 0x01	; 1
    4e18:	3c 01       	movw	r6, r24
    4e1a:	f6 01       	movw	r30, r12
    4e1c:	93 81       	ldd	r25, Z+3	; 0x03
    4e1e:	f7 01       	movw	r30, r14
    4e20:	93 fd       	sbrc	r25, 3
    4e22:	85 91       	lpm	r24, Z+
    4e24:	93 ff       	sbrs	r25, 3
    4e26:	81 91       	ld	r24, Z+
    4e28:	7f 01       	movw	r14, r30
    4e2a:	88 23       	and	r24, r24
    4e2c:	09 f4       	brne	.+2      	; 0x4e30 <vfprintf+0x62>
    4e2e:	ad c1       	rjmp	.+858    	; 0x518a <vfprintf+0x3bc>
    4e30:	85 32       	cpi	r24, 0x25	; 37
    4e32:	39 f4       	brne	.+14     	; 0x4e42 <vfprintf+0x74>
    4e34:	93 fd       	sbrc	r25, 3
    4e36:	85 91       	lpm	r24, Z+
    4e38:	93 ff       	sbrs	r25, 3
    4e3a:	81 91       	ld	r24, Z+
    4e3c:	7f 01       	movw	r14, r30
    4e3e:	85 32       	cpi	r24, 0x25	; 37
    4e40:	21 f4       	brne	.+8      	; 0x4e4a <vfprintf+0x7c>
    4e42:	b6 01       	movw	r22, r12
    4e44:	90 e0       	ldi	r25, 0x00	; 0
    4e46:	d6 d1       	rcall	.+940    	; 0x51f4 <fputc>
    4e48:	e8 cf       	rjmp	.-48     	; 0x4e1a <vfprintf+0x4c>
    4e4a:	91 2c       	mov	r9, r1
    4e4c:	21 2c       	mov	r2, r1
    4e4e:	31 2c       	mov	r3, r1
    4e50:	ff e1       	ldi	r31, 0x1F	; 31
    4e52:	f3 15       	cp	r31, r3
    4e54:	d8 f0       	brcs	.+54     	; 0x4e8c <vfprintf+0xbe>
    4e56:	8b 32       	cpi	r24, 0x2B	; 43
    4e58:	79 f0       	breq	.+30     	; 0x4e78 <vfprintf+0xaa>
    4e5a:	38 f4       	brcc	.+14     	; 0x4e6a <vfprintf+0x9c>
    4e5c:	80 32       	cpi	r24, 0x20	; 32
    4e5e:	79 f0       	breq	.+30     	; 0x4e7e <vfprintf+0xb0>
    4e60:	83 32       	cpi	r24, 0x23	; 35
    4e62:	a1 f4       	brne	.+40     	; 0x4e8c <vfprintf+0xbe>
    4e64:	23 2d       	mov	r18, r3
    4e66:	20 61       	ori	r18, 0x10	; 16
    4e68:	1d c0       	rjmp	.+58     	; 0x4ea4 <vfprintf+0xd6>
    4e6a:	8d 32       	cpi	r24, 0x2D	; 45
    4e6c:	61 f0       	breq	.+24     	; 0x4e86 <vfprintf+0xb8>
    4e6e:	80 33       	cpi	r24, 0x30	; 48
    4e70:	69 f4       	brne	.+26     	; 0x4e8c <vfprintf+0xbe>
    4e72:	23 2d       	mov	r18, r3
    4e74:	21 60       	ori	r18, 0x01	; 1
    4e76:	16 c0       	rjmp	.+44     	; 0x4ea4 <vfprintf+0xd6>
    4e78:	83 2d       	mov	r24, r3
    4e7a:	82 60       	ori	r24, 0x02	; 2
    4e7c:	38 2e       	mov	r3, r24
    4e7e:	e3 2d       	mov	r30, r3
    4e80:	e4 60       	ori	r30, 0x04	; 4
    4e82:	3e 2e       	mov	r3, r30
    4e84:	2a c0       	rjmp	.+84     	; 0x4eda <vfprintf+0x10c>
    4e86:	f3 2d       	mov	r31, r3
    4e88:	f8 60       	ori	r31, 0x08	; 8
    4e8a:	1d c0       	rjmp	.+58     	; 0x4ec6 <vfprintf+0xf8>
    4e8c:	37 fc       	sbrc	r3, 7
    4e8e:	2d c0       	rjmp	.+90     	; 0x4eea <vfprintf+0x11c>
    4e90:	20 ed       	ldi	r18, 0xD0	; 208
    4e92:	28 0f       	add	r18, r24
    4e94:	2a 30       	cpi	r18, 0x0A	; 10
    4e96:	40 f0       	brcs	.+16     	; 0x4ea8 <vfprintf+0xda>
    4e98:	8e 32       	cpi	r24, 0x2E	; 46
    4e9a:	b9 f4       	brne	.+46     	; 0x4eca <vfprintf+0xfc>
    4e9c:	36 fc       	sbrc	r3, 6
    4e9e:	75 c1       	rjmp	.+746    	; 0x518a <vfprintf+0x3bc>
    4ea0:	23 2d       	mov	r18, r3
    4ea2:	20 64       	ori	r18, 0x40	; 64
    4ea4:	32 2e       	mov	r3, r18
    4ea6:	19 c0       	rjmp	.+50     	; 0x4eda <vfprintf+0x10c>
    4ea8:	36 fe       	sbrs	r3, 6
    4eaa:	06 c0       	rjmp	.+12     	; 0x4eb8 <vfprintf+0xea>
    4eac:	8a e0       	ldi	r24, 0x0A	; 10
    4eae:	98 9e       	mul	r9, r24
    4eb0:	20 0d       	add	r18, r0
    4eb2:	11 24       	eor	r1, r1
    4eb4:	92 2e       	mov	r9, r18
    4eb6:	11 c0       	rjmp	.+34     	; 0x4eda <vfprintf+0x10c>
    4eb8:	ea e0       	ldi	r30, 0x0A	; 10
    4eba:	2e 9e       	mul	r2, r30
    4ebc:	20 0d       	add	r18, r0
    4ebe:	11 24       	eor	r1, r1
    4ec0:	22 2e       	mov	r2, r18
    4ec2:	f3 2d       	mov	r31, r3
    4ec4:	f0 62       	ori	r31, 0x20	; 32
    4ec6:	3f 2e       	mov	r3, r31
    4ec8:	08 c0       	rjmp	.+16     	; 0x4eda <vfprintf+0x10c>
    4eca:	8c 36       	cpi	r24, 0x6C	; 108
    4ecc:	21 f4       	brne	.+8      	; 0x4ed6 <vfprintf+0x108>
    4ece:	83 2d       	mov	r24, r3
    4ed0:	80 68       	ori	r24, 0x80	; 128
    4ed2:	38 2e       	mov	r3, r24
    4ed4:	02 c0       	rjmp	.+4      	; 0x4eda <vfprintf+0x10c>
    4ed6:	88 36       	cpi	r24, 0x68	; 104
    4ed8:	41 f4       	brne	.+16     	; 0x4eea <vfprintf+0x11c>
    4eda:	f7 01       	movw	r30, r14
    4edc:	93 fd       	sbrc	r25, 3
    4ede:	85 91       	lpm	r24, Z+
    4ee0:	93 ff       	sbrs	r25, 3
    4ee2:	81 91       	ld	r24, Z+
    4ee4:	7f 01       	movw	r14, r30
    4ee6:	81 11       	cpse	r24, r1
    4ee8:	b3 cf       	rjmp	.-154    	; 0x4e50 <vfprintf+0x82>
    4eea:	98 2f       	mov	r25, r24
    4eec:	9f 7d       	andi	r25, 0xDF	; 223
    4eee:	95 54       	subi	r25, 0x45	; 69
    4ef0:	93 30       	cpi	r25, 0x03	; 3
    4ef2:	28 f4       	brcc	.+10     	; 0x4efe <vfprintf+0x130>
    4ef4:	0c 5f       	subi	r16, 0xFC	; 252
    4ef6:	1f 4f       	sbci	r17, 0xFF	; 255
    4ef8:	9f e3       	ldi	r25, 0x3F	; 63
    4efa:	99 83       	std	Y+1, r25	; 0x01
    4efc:	0d c0       	rjmp	.+26     	; 0x4f18 <vfprintf+0x14a>
    4efe:	83 36       	cpi	r24, 0x63	; 99
    4f00:	31 f0       	breq	.+12     	; 0x4f0e <vfprintf+0x140>
    4f02:	83 37       	cpi	r24, 0x73	; 115
    4f04:	71 f0       	breq	.+28     	; 0x4f22 <vfprintf+0x154>
    4f06:	83 35       	cpi	r24, 0x53	; 83
    4f08:	09 f0       	breq	.+2      	; 0x4f0c <vfprintf+0x13e>
    4f0a:	55 c0       	rjmp	.+170    	; 0x4fb6 <vfprintf+0x1e8>
    4f0c:	20 c0       	rjmp	.+64     	; 0x4f4e <vfprintf+0x180>
    4f0e:	f8 01       	movw	r30, r16
    4f10:	80 81       	ld	r24, Z
    4f12:	89 83       	std	Y+1, r24	; 0x01
    4f14:	0e 5f       	subi	r16, 0xFE	; 254
    4f16:	1f 4f       	sbci	r17, 0xFF	; 255
    4f18:	88 24       	eor	r8, r8
    4f1a:	83 94       	inc	r8
    4f1c:	91 2c       	mov	r9, r1
    4f1e:	53 01       	movw	r10, r6
    4f20:	12 c0       	rjmp	.+36     	; 0x4f46 <vfprintf+0x178>
    4f22:	28 01       	movw	r4, r16
    4f24:	f2 e0       	ldi	r31, 0x02	; 2
    4f26:	4f 0e       	add	r4, r31
    4f28:	51 1c       	adc	r5, r1
    4f2a:	f8 01       	movw	r30, r16
    4f2c:	a0 80       	ld	r10, Z
    4f2e:	b1 80       	ldd	r11, Z+1	; 0x01
    4f30:	36 fe       	sbrs	r3, 6
    4f32:	03 c0       	rjmp	.+6      	; 0x4f3a <vfprintf+0x16c>
    4f34:	69 2d       	mov	r22, r9
    4f36:	70 e0       	ldi	r23, 0x00	; 0
    4f38:	02 c0       	rjmp	.+4      	; 0x4f3e <vfprintf+0x170>
    4f3a:	6f ef       	ldi	r22, 0xFF	; 255
    4f3c:	7f ef       	ldi	r23, 0xFF	; 255
    4f3e:	c5 01       	movw	r24, r10
    4f40:	4e d1       	rcall	.+668    	; 0x51de <strnlen>
    4f42:	4c 01       	movw	r8, r24
    4f44:	82 01       	movw	r16, r4
    4f46:	f3 2d       	mov	r31, r3
    4f48:	ff 77       	andi	r31, 0x7F	; 127
    4f4a:	3f 2e       	mov	r3, r31
    4f4c:	15 c0       	rjmp	.+42     	; 0x4f78 <vfprintf+0x1aa>
    4f4e:	28 01       	movw	r4, r16
    4f50:	22 e0       	ldi	r18, 0x02	; 2
    4f52:	42 0e       	add	r4, r18
    4f54:	51 1c       	adc	r5, r1
    4f56:	f8 01       	movw	r30, r16
    4f58:	a0 80       	ld	r10, Z
    4f5a:	b1 80       	ldd	r11, Z+1	; 0x01
    4f5c:	36 fe       	sbrs	r3, 6
    4f5e:	03 c0       	rjmp	.+6      	; 0x4f66 <vfprintf+0x198>
    4f60:	69 2d       	mov	r22, r9
    4f62:	70 e0       	ldi	r23, 0x00	; 0
    4f64:	02 c0       	rjmp	.+4      	; 0x4f6a <vfprintf+0x19c>
    4f66:	6f ef       	ldi	r22, 0xFF	; 255
    4f68:	7f ef       	ldi	r23, 0xFF	; 255
    4f6a:	c5 01       	movw	r24, r10
    4f6c:	2d d1       	rcall	.+602    	; 0x51c8 <strnlen_P>
    4f6e:	4c 01       	movw	r8, r24
    4f70:	f3 2d       	mov	r31, r3
    4f72:	f0 68       	ori	r31, 0x80	; 128
    4f74:	3f 2e       	mov	r3, r31
    4f76:	82 01       	movw	r16, r4
    4f78:	33 fc       	sbrc	r3, 3
    4f7a:	19 c0       	rjmp	.+50     	; 0x4fae <vfprintf+0x1e0>
    4f7c:	82 2d       	mov	r24, r2
    4f7e:	90 e0       	ldi	r25, 0x00	; 0
    4f80:	88 16       	cp	r8, r24
    4f82:	99 06       	cpc	r9, r25
    4f84:	a0 f4       	brcc	.+40     	; 0x4fae <vfprintf+0x1e0>
    4f86:	b6 01       	movw	r22, r12
    4f88:	80 e2       	ldi	r24, 0x20	; 32
    4f8a:	90 e0       	ldi	r25, 0x00	; 0
    4f8c:	33 d1       	rcall	.+614    	; 0x51f4 <fputc>
    4f8e:	2a 94       	dec	r2
    4f90:	f5 cf       	rjmp	.-22     	; 0x4f7c <vfprintf+0x1ae>
    4f92:	f5 01       	movw	r30, r10
    4f94:	37 fc       	sbrc	r3, 7
    4f96:	85 91       	lpm	r24, Z+
    4f98:	37 fe       	sbrs	r3, 7
    4f9a:	81 91       	ld	r24, Z+
    4f9c:	5f 01       	movw	r10, r30
    4f9e:	b6 01       	movw	r22, r12
    4fa0:	90 e0       	ldi	r25, 0x00	; 0
    4fa2:	28 d1       	rcall	.+592    	; 0x51f4 <fputc>
    4fa4:	21 10       	cpse	r2, r1
    4fa6:	2a 94       	dec	r2
    4fa8:	21 e0       	ldi	r18, 0x01	; 1
    4faa:	82 1a       	sub	r8, r18
    4fac:	91 08       	sbc	r9, r1
    4fae:	81 14       	cp	r8, r1
    4fb0:	91 04       	cpc	r9, r1
    4fb2:	79 f7       	brne	.-34     	; 0x4f92 <vfprintf+0x1c4>
    4fb4:	e1 c0       	rjmp	.+450    	; 0x5178 <vfprintf+0x3aa>
    4fb6:	84 36       	cpi	r24, 0x64	; 100
    4fb8:	11 f0       	breq	.+4      	; 0x4fbe <vfprintf+0x1f0>
    4fba:	89 36       	cpi	r24, 0x69	; 105
    4fbc:	39 f5       	brne	.+78     	; 0x500c <vfprintf+0x23e>
    4fbe:	f8 01       	movw	r30, r16
    4fc0:	37 fe       	sbrs	r3, 7
    4fc2:	07 c0       	rjmp	.+14     	; 0x4fd2 <vfprintf+0x204>
    4fc4:	60 81       	ld	r22, Z
    4fc6:	71 81       	ldd	r23, Z+1	; 0x01
    4fc8:	82 81       	ldd	r24, Z+2	; 0x02
    4fca:	93 81       	ldd	r25, Z+3	; 0x03
    4fcc:	0c 5f       	subi	r16, 0xFC	; 252
    4fce:	1f 4f       	sbci	r17, 0xFF	; 255
    4fd0:	08 c0       	rjmp	.+16     	; 0x4fe2 <vfprintf+0x214>
    4fd2:	60 81       	ld	r22, Z
    4fd4:	71 81       	ldd	r23, Z+1	; 0x01
    4fd6:	07 2e       	mov	r0, r23
    4fd8:	00 0c       	add	r0, r0
    4fda:	88 0b       	sbc	r24, r24
    4fdc:	99 0b       	sbc	r25, r25
    4fde:	0e 5f       	subi	r16, 0xFE	; 254
    4fe0:	1f 4f       	sbci	r17, 0xFF	; 255
    4fe2:	f3 2d       	mov	r31, r3
    4fe4:	ff 76       	andi	r31, 0x6F	; 111
    4fe6:	3f 2e       	mov	r3, r31
    4fe8:	97 ff       	sbrs	r25, 7
    4fea:	09 c0       	rjmp	.+18     	; 0x4ffe <vfprintf+0x230>
    4fec:	90 95       	com	r25
    4fee:	80 95       	com	r24
    4ff0:	70 95       	com	r23
    4ff2:	61 95       	neg	r22
    4ff4:	7f 4f       	sbci	r23, 0xFF	; 255
    4ff6:	8f 4f       	sbci	r24, 0xFF	; 255
    4ff8:	9f 4f       	sbci	r25, 0xFF	; 255
    4ffa:	f0 68       	ori	r31, 0x80	; 128
    4ffc:	3f 2e       	mov	r3, r31
    4ffe:	2a e0       	ldi	r18, 0x0A	; 10
    5000:	30 e0       	ldi	r19, 0x00	; 0
    5002:	a3 01       	movw	r20, r6
    5004:	33 d1       	rcall	.+614    	; 0x526c <__ultoa_invert>
    5006:	88 2e       	mov	r8, r24
    5008:	86 18       	sub	r8, r6
    500a:	44 c0       	rjmp	.+136    	; 0x5094 <vfprintf+0x2c6>
    500c:	85 37       	cpi	r24, 0x75	; 117
    500e:	31 f4       	brne	.+12     	; 0x501c <vfprintf+0x24e>
    5010:	23 2d       	mov	r18, r3
    5012:	2f 7e       	andi	r18, 0xEF	; 239
    5014:	b2 2e       	mov	r11, r18
    5016:	2a e0       	ldi	r18, 0x0A	; 10
    5018:	30 e0       	ldi	r19, 0x00	; 0
    501a:	25 c0       	rjmp	.+74     	; 0x5066 <vfprintf+0x298>
    501c:	93 2d       	mov	r25, r3
    501e:	99 7f       	andi	r25, 0xF9	; 249
    5020:	b9 2e       	mov	r11, r25
    5022:	8f 36       	cpi	r24, 0x6F	; 111
    5024:	c1 f0       	breq	.+48     	; 0x5056 <vfprintf+0x288>
    5026:	18 f4       	brcc	.+6      	; 0x502e <vfprintf+0x260>
    5028:	88 35       	cpi	r24, 0x58	; 88
    502a:	79 f0       	breq	.+30     	; 0x504a <vfprintf+0x27c>
    502c:	ae c0       	rjmp	.+348    	; 0x518a <vfprintf+0x3bc>
    502e:	80 37       	cpi	r24, 0x70	; 112
    5030:	19 f0       	breq	.+6      	; 0x5038 <vfprintf+0x26a>
    5032:	88 37       	cpi	r24, 0x78	; 120
    5034:	21 f0       	breq	.+8      	; 0x503e <vfprintf+0x270>
    5036:	a9 c0       	rjmp	.+338    	; 0x518a <vfprintf+0x3bc>
    5038:	e9 2f       	mov	r30, r25
    503a:	e0 61       	ori	r30, 0x10	; 16
    503c:	be 2e       	mov	r11, r30
    503e:	b4 fe       	sbrs	r11, 4
    5040:	0d c0       	rjmp	.+26     	; 0x505c <vfprintf+0x28e>
    5042:	fb 2d       	mov	r31, r11
    5044:	f4 60       	ori	r31, 0x04	; 4
    5046:	bf 2e       	mov	r11, r31
    5048:	09 c0       	rjmp	.+18     	; 0x505c <vfprintf+0x28e>
    504a:	34 fe       	sbrs	r3, 4
    504c:	0a c0       	rjmp	.+20     	; 0x5062 <vfprintf+0x294>
    504e:	29 2f       	mov	r18, r25
    5050:	26 60       	ori	r18, 0x06	; 6
    5052:	b2 2e       	mov	r11, r18
    5054:	06 c0       	rjmp	.+12     	; 0x5062 <vfprintf+0x294>
    5056:	28 e0       	ldi	r18, 0x08	; 8
    5058:	30 e0       	ldi	r19, 0x00	; 0
    505a:	05 c0       	rjmp	.+10     	; 0x5066 <vfprintf+0x298>
    505c:	20 e1       	ldi	r18, 0x10	; 16
    505e:	30 e0       	ldi	r19, 0x00	; 0
    5060:	02 c0       	rjmp	.+4      	; 0x5066 <vfprintf+0x298>
    5062:	20 e1       	ldi	r18, 0x10	; 16
    5064:	32 e0       	ldi	r19, 0x02	; 2
    5066:	f8 01       	movw	r30, r16
    5068:	b7 fe       	sbrs	r11, 7
    506a:	07 c0       	rjmp	.+14     	; 0x507a <vfprintf+0x2ac>
    506c:	60 81       	ld	r22, Z
    506e:	71 81       	ldd	r23, Z+1	; 0x01
    5070:	82 81       	ldd	r24, Z+2	; 0x02
    5072:	93 81       	ldd	r25, Z+3	; 0x03
    5074:	0c 5f       	subi	r16, 0xFC	; 252
    5076:	1f 4f       	sbci	r17, 0xFF	; 255
    5078:	06 c0       	rjmp	.+12     	; 0x5086 <vfprintf+0x2b8>
    507a:	60 81       	ld	r22, Z
    507c:	71 81       	ldd	r23, Z+1	; 0x01
    507e:	80 e0       	ldi	r24, 0x00	; 0
    5080:	90 e0       	ldi	r25, 0x00	; 0
    5082:	0e 5f       	subi	r16, 0xFE	; 254
    5084:	1f 4f       	sbci	r17, 0xFF	; 255
    5086:	a3 01       	movw	r20, r6
    5088:	f1 d0       	rcall	.+482    	; 0x526c <__ultoa_invert>
    508a:	88 2e       	mov	r8, r24
    508c:	86 18       	sub	r8, r6
    508e:	fb 2d       	mov	r31, r11
    5090:	ff 77       	andi	r31, 0x7F	; 127
    5092:	3f 2e       	mov	r3, r31
    5094:	36 fe       	sbrs	r3, 6
    5096:	0d c0       	rjmp	.+26     	; 0x50b2 <vfprintf+0x2e4>
    5098:	23 2d       	mov	r18, r3
    509a:	2e 7f       	andi	r18, 0xFE	; 254
    509c:	a2 2e       	mov	r10, r18
    509e:	89 14       	cp	r8, r9
    50a0:	58 f4       	brcc	.+22     	; 0x50b8 <vfprintf+0x2ea>
    50a2:	34 fe       	sbrs	r3, 4
    50a4:	0b c0       	rjmp	.+22     	; 0x50bc <vfprintf+0x2ee>
    50a6:	32 fc       	sbrc	r3, 2
    50a8:	09 c0       	rjmp	.+18     	; 0x50bc <vfprintf+0x2ee>
    50aa:	83 2d       	mov	r24, r3
    50ac:	8e 7e       	andi	r24, 0xEE	; 238
    50ae:	a8 2e       	mov	r10, r24
    50b0:	05 c0       	rjmp	.+10     	; 0x50bc <vfprintf+0x2ee>
    50b2:	b8 2c       	mov	r11, r8
    50b4:	a3 2c       	mov	r10, r3
    50b6:	03 c0       	rjmp	.+6      	; 0x50be <vfprintf+0x2f0>
    50b8:	b8 2c       	mov	r11, r8
    50ba:	01 c0       	rjmp	.+2      	; 0x50be <vfprintf+0x2f0>
    50bc:	b9 2c       	mov	r11, r9
    50be:	a4 fe       	sbrs	r10, 4
    50c0:	0f c0       	rjmp	.+30     	; 0x50e0 <vfprintf+0x312>
    50c2:	fe 01       	movw	r30, r28
    50c4:	e8 0d       	add	r30, r8
    50c6:	f1 1d       	adc	r31, r1
    50c8:	80 81       	ld	r24, Z
    50ca:	80 33       	cpi	r24, 0x30	; 48
    50cc:	21 f4       	brne	.+8      	; 0x50d6 <vfprintf+0x308>
    50ce:	9a 2d       	mov	r25, r10
    50d0:	99 7e       	andi	r25, 0xE9	; 233
    50d2:	a9 2e       	mov	r10, r25
    50d4:	09 c0       	rjmp	.+18     	; 0x50e8 <vfprintf+0x31a>
    50d6:	a2 fe       	sbrs	r10, 2
    50d8:	06 c0       	rjmp	.+12     	; 0x50e6 <vfprintf+0x318>
    50da:	b3 94       	inc	r11
    50dc:	b3 94       	inc	r11
    50de:	04 c0       	rjmp	.+8      	; 0x50e8 <vfprintf+0x31a>
    50e0:	8a 2d       	mov	r24, r10
    50e2:	86 78       	andi	r24, 0x86	; 134
    50e4:	09 f0       	breq	.+2      	; 0x50e8 <vfprintf+0x31a>
    50e6:	b3 94       	inc	r11
    50e8:	a3 fc       	sbrc	r10, 3
    50ea:	10 c0       	rjmp	.+32     	; 0x510c <vfprintf+0x33e>
    50ec:	a0 fe       	sbrs	r10, 0
    50ee:	06 c0       	rjmp	.+12     	; 0x50fc <vfprintf+0x32e>
    50f0:	b2 14       	cp	r11, r2
    50f2:	80 f4       	brcc	.+32     	; 0x5114 <vfprintf+0x346>
    50f4:	28 0c       	add	r2, r8
    50f6:	92 2c       	mov	r9, r2
    50f8:	9b 18       	sub	r9, r11
    50fa:	0d c0       	rjmp	.+26     	; 0x5116 <vfprintf+0x348>
    50fc:	b2 14       	cp	r11, r2
    50fe:	58 f4       	brcc	.+22     	; 0x5116 <vfprintf+0x348>
    5100:	b6 01       	movw	r22, r12
    5102:	80 e2       	ldi	r24, 0x20	; 32
    5104:	90 e0       	ldi	r25, 0x00	; 0
    5106:	76 d0       	rcall	.+236    	; 0x51f4 <fputc>
    5108:	b3 94       	inc	r11
    510a:	f8 cf       	rjmp	.-16     	; 0x50fc <vfprintf+0x32e>
    510c:	b2 14       	cp	r11, r2
    510e:	18 f4       	brcc	.+6      	; 0x5116 <vfprintf+0x348>
    5110:	2b 18       	sub	r2, r11
    5112:	02 c0       	rjmp	.+4      	; 0x5118 <vfprintf+0x34a>
    5114:	98 2c       	mov	r9, r8
    5116:	21 2c       	mov	r2, r1
    5118:	a4 fe       	sbrs	r10, 4
    511a:	0f c0       	rjmp	.+30     	; 0x513a <vfprintf+0x36c>
    511c:	b6 01       	movw	r22, r12
    511e:	80 e3       	ldi	r24, 0x30	; 48
    5120:	90 e0       	ldi	r25, 0x00	; 0
    5122:	68 d0       	rcall	.+208    	; 0x51f4 <fputc>
    5124:	a2 fe       	sbrs	r10, 2
    5126:	16 c0       	rjmp	.+44     	; 0x5154 <vfprintf+0x386>
    5128:	a1 fc       	sbrc	r10, 1
    512a:	03 c0       	rjmp	.+6      	; 0x5132 <vfprintf+0x364>
    512c:	88 e7       	ldi	r24, 0x78	; 120
    512e:	90 e0       	ldi	r25, 0x00	; 0
    5130:	02 c0       	rjmp	.+4      	; 0x5136 <vfprintf+0x368>
    5132:	88 e5       	ldi	r24, 0x58	; 88
    5134:	90 e0       	ldi	r25, 0x00	; 0
    5136:	b6 01       	movw	r22, r12
    5138:	0c c0       	rjmp	.+24     	; 0x5152 <vfprintf+0x384>
    513a:	8a 2d       	mov	r24, r10
    513c:	86 78       	andi	r24, 0x86	; 134
    513e:	51 f0       	breq	.+20     	; 0x5154 <vfprintf+0x386>
    5140:	a1 fe       	sbrs	r10, 1
    5142:	02 c0       	rjmp	.+4      	; 0x5148 <vfprintf+0x37a>
    5144:	8b e2       	ldi	r24, 0x2B	; 43
    5146:	01 c0       	rjmp	.+2      	; 0x514a <vfprintf+0x37c>
    5148:	80 e2       	ldi	r24, 0x20	; 32
    514a:	a7 fc       	sbrc	r10, 7
    514c:	8d e2       	ldi	r24, 0x2D	; 45
    514e:	b6 01       	movw	r22, r12
    5150:	90 e0       	ldi	r25, 0x00	; 0
    5152:	50 d0       	rcall	.+160    	; 0x51f4 <fputc>
    5154:	89 14       	cp	r8, r9
    5156:	30 f4       	brcc	.+12     	; 0x5164 <vfprintf+0x396>
    5158:	b6 01       	movw	r22, r12
    515a:	80 e3       	ldi	r24, 0x30	; 48
    515c:	90 e0       	ldi	r25, 0x00	; 0
    515e:	4a d0       	rcall	.+148    	; 0x51f4 <fputc>
    5160:	9a 94       	dec	r9
    5162:	f8 cf       	rjmp	.-16     	; 0x5154 <vfprintf+0x386>
    5164:	8a 94       	dec	r8
    5166:	f3 01       	movw	r30, r6
    5168:	e8 0d       	add	r30, r8
    516a:	f1 1d       	adc	r31, r1
    516c:	80 81       	ld	r24, Z
    516e:	b6 01       	movw	r22, r12
    5170:	90 e0       	ldi	r25, 0x00	; 0
    5172:	40 d0       	rcall	.+128    	; 0x51f4 <fputc>
    5174:	81 10       	cpse	r8, r1
    5176:	f6 cf       	rjmp	.-20     	; 0x5164 <vfprintf+0x396>
    5178:	22 20       	and	r2, r2
    517a:	09 f4       	brne	.+2      	; 0x517e <vfprintf+0x3b0>
    517c:	4e ce       	rjmp	.-868    	; 0x4e1a <vfprintf+0x4c>
    517e:	b6 01       	movw	r22, r12
    5180:	80 e2       	ldi	r24, 0x20	; 32
    5182:	90 e0       	ldi	r25, 0x00	; 0
    5184:	37 d0       	rcall	.+110    	; 0x51f4 <fputc>
    5186:	2a 94       	dec	r2
    5188:	f7 cf       	rjmp	.-18     	; 0x5178 <vfprintf+0x3aa>
    518a:	f6 01       	movw	r30, r12
    518c:	86 81       	ldd	r24, Z+6	; 0x06
    518e:	97 81       	ldd	r25, Z+7	; 0x07
    5190:	02 c0       	rjmp	.+4      	; 0x5196 <vfprintf+0x3c8>
    5192:	8f ef       	ldi	r24, 0xFF	; 255
    5194:	9f ef       	ldi	r25, 0xFF	; 255
    5196:	2b 96       	adiw	r28, 0x0b	; 11
    5198:	0f b6       	in	r0, 0x3f	; 63
    519a:	f8 94       	cli
    519c:	de bf       	out	0x3e, r29	; 62
    519e:	0f be       	out	0x3f, r0	; 63
    51a0:	cd bf       	out	0x3d, r28	; 61
    51a2:	df 91       	pop	r29
    51a4:	cf 91       	pop	r28
    51a6:	1f 91       	pop	r17
    51a8:	0f 91       	pop	r16
    51aa:	ff 90       	pop	r15
    51ac:	ef 90       	pop	r14
    51ae:	df 90       	pop	r13
    51b0:	cf 90       	pop	r12
    51b2:	bf 90       	pop	r11
    51b4:	af 90       	pop	r10
    51b6:	9f 90       	pop	r9
    51b8:	8f 90       	pop	r8
    51ba:	7f 90       	pop	r7
    51bc:	6f 90       	pop	r6
    51be:	5f 90       	pop	r5
    51c0:	4f 90       	pop	r4
    51c2:	3f 90       	pop	r3
    51c4:	2f 90       	pop	r2
    51c6:	08 95       	ret

000051c8 <strnlen_P>:
    51c8:	fc 01       	movw	r30, r24
    51ca:	05 90       	lpm	r0, Z+
    51cc:	61 50       	subi	r22, 0x01	; 1
    51ce:	70 40       	sbci	r23, 0x00	; 0
    51d0:	01 10       	cpse	r0, r1
    51d2:	d8 f7       	brcc	.-10     	; 0x51ca <strnlen_P+0x2>
    51d4:	80 95       	com	r24
    51d6:	90 95       	com	r25
    51d8:	8e 0f       	add	r24, r30
    51da:	9f 1f       	adc	r25, r31
    51dc:	08 95       	ret

000051de <strnlen>:
    51de:	fc 01       	movw	r30, r24
    51e0:	61 50       	subi	r22, 0x01	; 1
    51e2:	70 40       	sbci	r23, 0x00	; 0
    51e4:	01 90       	ld	r0, Z+
    51e6:	01 10       	cpse	r0, r1
    51e8:	d8 f7       	brcc	.-10     	; 0x51e0 <strnlen+0x2>
    51ea:	80 95       	com	r24
    51ec:	90 95       	com	r25
    51ee:	8e 0f       	add	r24, r30
    51f0:	9f 1f       	adc	r25, r31
    51f2:	08 95       	ret

000051f4 <fputc>:
    51f4:	0f 93       	push	r16
    51f6:	1f 93       	push	r17
    51f8:	cf 93       	push	r28
    51fa:	df 93       	push	r29
    51fc:	fb 01       	movw	r30, r22
    51fe:	23 81       	ldd	r18, Z+3	; 0x03
    5200:	21 fd       	sbrc	r18, 1
    5202:	03 c0       	rjmp	.+6      	; 0x520a <fputc+0x16>
    5204:	8f ef       	ldi	r24, 0xFF	; 255
    5206:	9f ef       	ldi	r25, 0xFF	; 255
    5208:	2c c0       	rjmp	.+88     	; 0x5262 <fputc+0x6e>
    520a:	22 ff       	sbrs	r18, 2
    520c:	16 c0       	rjmp	.+44     	; 0x523a <fputc+0x46>
    520e:	46 81       	ldd	r20, Z+6	; 0x06
    5210:	57 81       	ldd	r21, Z+7	; 0x07
    5212:	24 81       	ldd	r18, Z+4	; 0x04
    5214:	35 81       	ldd	r19, Z+5	; 0x05
    5216:	42 17       	cp	r20, r18
    5218:	53 07       	cpc	r21, r19
    521a:	44 f4       	brge	.+16     	; 0x522c <fputc+0x38>
    521c:	a0 81       	ld	r26, Z
    521e:	b1 81       	ldd	r27, Z+1	; 0x01
    5220:	9d 01       	movw	r18, r26
    5222:	2f 5f       	subi	r18, 0xFF	; 255
    5224:	3f 4f       	sbci	r19, 0xFF	; 255
    5226:	31 83       	std	Z+1, r19	; 0x01
    5228:	20 83       	st	Z, r18
    522a:	8c 93       	st	X, r24
    522c:	26 81       	ldd	r18, Z+6	; 0x06
    522e:	37 81       	ldd	r19, Z+7	; 0x07
    5230:	2f 5f       	subi	r18, 0xFF	; 255
    5232:	3f 4f       	sbci	r19, 0xFF	; 255
    5234:	37 83       	std	Z+7, r19	; 0x07
    5236:	26 83       	std	Z+6, r18	; 0x06
    5238:	14 c0       	rjmp	.+40     	; 0x5262 <fputc+0x6e>
    523a:	8b 01       	movw	r16, r22
    523c:	ec 01       	movw	r28, r24
    523e:	fb 01       	movw	r30, r22
    5240:	00 84       	ldd	r0, Z+8	; 0x08
    5242:	f1 85       	ldd	r31, Z+9	; 0x09
    5244:	e0 2d       	mov	r30, r0
    5246:	19 95       	eicall
    5248:	89 2b       	or	r24, r25
    524a:	e1 f6       	brne	.-72     	; 0x5204 <fputc+0x10>
    524c:	d8 01       	movw	r26, r16
    524e:	16 96       	adiw	r26, 0x06	; 6
    5250:	8d 91       	ld	r24, X+
    5252:	9c 91       	ld	r25, X
    5254:	17 97       	sbiw	r26, 0x07	; 7
    5256:	01 96       	adiw	r24, 0x01	; 1
    5258:	17 96       	adiw	r26, 0x07	; 7
    525a:	9c 93       	st	X, r25
    525c:	8e 93       	st	-X, r24
    525e:	16 97       	sbiw	r26, 0x06	; 6
    5260:	ce 01       	movw	r24, r28
    5262:	df 91       	pop	r29
    5264:	cf 91       	pop	r28
    5266:	1f 91       	pop	r17
    5268:	0f 91       	pop	r16
    526a:	08 95       	ret

0000526c <__ultoa_invert>:
    526c:	fa 01       	movw	r30, r20
    526e:	aa 27       	eor	r26, r26
    5270:	28 30       	cpi	r18, 0x08	; 8
    5272:	51 f1       	breq	.+84     	; 0x52c8 <__ultoa_invert+0x5c>
    5274:	20 31       	cpi	r18, 0x10	; 16
    5276:	81 f1       	breq	.+96     	; 0x52d8 <__ultoa_invert+0x6c>
    5278:	e8 94       	clt
    527a:	6f 93       	push	r22
    527c:	6e 7f       	andi	r22, 0xFE	; 254
    527e:	6e 5f       	subi	r22, 0xFE	; 254
    5280:	7f 4f       	sbci	r23, 0xFF	; 255
    5282:	8f 4f       	sbci	r24, 0xFF	; 255
    5284:	9f 4f       	sbci	r25, 0xFF	; 255
    5286:	af 4f       	sbci	r26, 0xFF	; 255
    5288:	b1 e0       	ldi	r27, 0x01	; 1
    528a:	3e d0       	rcall	.+124    	; 0x5308 <__ultoa_invert+0x9c>
    528c:	b4 e0       	ldi	r27, 0x04	; 4
    528e:	3c d0       	rcall	.+120    	; 0x5308 <__ultoa_invert+0x9c>
    5290:	67 0f       	add	r22, r23
    5292:	78 1f       	adc	r23, r24
    5294:	89 1f       	adc	r24, r25
    5296:	9a 1f       	adc	r25, r26
    5298:	a1 1d       	adc	r26, r1
    529a:	68 0f       	add	r22, r24
    529c:	79 1f       	adc	r23, r25
    529e:	8a 1f       	adc	r24, r26
    52a0:	91 1d       	adc	r25, r1
    52a2:	a1 1d       	adc	r26, r1
    52a4:	6a 0f       	add	r22, r26
    52a6:	71 1d       	adc	r23, r1
    52a8:	81 1d       	adc	r24, r1
    52aa:	91 1d       	adc	r25, r1
    52ac:	a1 1d       	adc	r26, r1
    52ae:	20 d0       	rcall	.+64     	; 0x52f0 <__ultoa_invert+0x84>
    52b0:	09 f4       	brne	.+2      	; 0x52b4 <__ultoa_invert+0x48>
    52b2:	68 94       	set
    52b4:	3f 91       	pop	r19
    52b6:	2a e0       	ldi	r18, 0x0A	; 10
    52b8:	26 9f       	mul	r18, r22
    52ba:	11 24       	eor	r1, r1
    52bc:	30 19       	sub	r19, r0
    52be:	30 5d       	subi	r19, 0xD0	; 208
    52c0:	31 93       	st	Z+, r19
    52c2:	de f6       	brtc	.-74     	; 0x527a <__ultoa_invert+0xe>
    52c4:	cf 01       	movw	r24, r30
    52c6:	08 95       	ret
    52c8:	46 2f       	mov	r20, r22
    52ca:	47 70       	andi	r20, 0x07	; 7
    52cc:	40 5d       	subi	r20, 0xD0	; 208
    52ce:	41 93       	st	Z+, r20
    52d0:	b3 e0       	ldi	r27, 0x03	; 3
    52d2:	0f d0       	rcall	.+30     	; 0x52f2 <__ultoa_invert+0x86>
    52d4:	c9 f7       	brne	.-14     	; 0x52c8 <__ultoa_invert+0x5c>
    52d6:	f6 cf       	rjmp	.-20     	; 0x52c4 <__ultoa_invert+0x58>
    52d8:	46 2f       	mov	r20, r22
    52da:	4f 70       	andi	r20, 0x0F	; 15
    52dc:	40 5d       	subi	r20, 0xD0	; 208
    52de:	4a 33       	cpi	r20, 0x3A	; 58
    52e0:	18 f0       	brcs	.+6      	; 0x52e8 <__ultoa_invert+0x7c>
    52e2:	49 5d       	subi	r20, 0xD9	; 217
    52e4:	31 fd       	sbrc	r19, 1
    52e6:	40 52       	subi	r20, 0x20	; 32
    52e8:	41 93       	st	Z+, r20
    52ea:	02 d0       	rcall	.+4      	; 0x52f0 <__ultoa_invert+0x84>
    52ec:	a9 f7       	brne	.-22     	; 0x52d8 <__ultoa_invert+0x6c>
    52ee:	ea cf       	rjmp	.-44     	; 0x52c4 <__ultoa_invert+0x58>
    52f0:	b4 e0       	ldi	r27, 0x04	; 4
    52f2:	a6 95       	lsr	r26
    52f4:	97 95       	ror	r25
    52f6:	87 95       	ror	r24
    52f8:	77 95       	ror	r23
    52fa:	67 95       	ror	r22
    52fc:	ba 95       	dec	r27
    52fe:	c9 f7       	brne	.-14     	; 0x52f2 <__ultoa_invert+0x86>
    5300:	00 97       	sbiw	r24, 0x00	; 0
    5302:	61 05       	cpc	r22, r1
    5304:	71 05       	cpc	r23, r1
    5306:	08 95       	ret
    5308:	9b 01       	movw	r18, r22
    530a:	ac 01       	movw	r20, r24
    530c:	0a 2e       	mov	r0, r26
    530e:	06 94       	lsr	r0
    5310:	57 95       	ror	r21
    5312:	47 95       	ror	r20
    5314:	37 95       	ror	r19
    5316:	27 95       	ror	r18
    5318:	ba 95       	dec	r27
    531a:	c9 f7       	brne	.-14     	; 0x530e <__ultoa_invert+0xa2>
    531c:	62 0f       	add	r22, r18
    531e:	73 1f       	adc	r23, r19
    5320:	84 1f       	adc	r24, r20
    5322:	95 1f       	adc	r25, r21
    5324:	a0 1d       	adc	r26, r0
    5326:	08 95       	ret

00005328 <_exit>:
    5328:	f8 94       	cli

0000532a <__stop_program>:
    532a:	ff cf       	rjmp	.-2      	; 0x532a <__stop_program>
