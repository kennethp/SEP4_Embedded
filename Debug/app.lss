
app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005d8  00800200  00005476  0000550a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005476  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000284  008007d8  008007d8  00005ae2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005ae2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005b40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ab8  00000000  00000000  00005b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d99f  00000000  00000000  00006638  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003539  00000000  00000000  00013fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000668d  00000000  00000000  00017510  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000233c  00000000  00000000  0001dba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000460f  00000000  00000000  0001fedc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c02f  00000000  00000000  000244eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ae0  00000000  00000000  0003051a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	06 c2       	rjmp	.+1036   	; 0x40e <__ctors_end>
       2:	00 00       	nop
       4:	24 c2       	rjmp	.+1096   	; 0x44e <__bad_interrupt>
       6:	00 00       	nop
       8:	22 c2       	rjmp	.+1092   	; 0x44e <__bad_interrupt>
       a:	00 00       	nop
       c:	20 c2       	rjmp	.+1088   	; 0x44e <__bad_interrupt>
       e:	00 00       	nop
      10:	1e c2       	rjmp	.+1084   	; 0x44e <__bad_interrupt>
      12:	00 00       	nop
      14:	1c c2       	rjmp	.+1080   	; 0x44e <__bad_interrupt>
      16:	00 00       	nop
      18:	1a c2       	rjmp	.+1076   	; 0x44e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	18 c2       	rjmp	.+1072   	; 0x44e <__bad_interrupt>
      1e:	00 00       	nop
      20:	16 c2       	rjmp	.+1068   	; 0x44e <__bad_interrupt>
      22:	00 00       	nop
      24:	14 c2       	rjmp	.+1064   	; 0x44e <__bad_interrupt>
      26:	00 00       	nop
      28:	12 c2       	rjmp	.+1060   	; 0x44e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	10 c2       	rjmp	.+1056   	; 0x44e <__bad_interrupt>
      2e:	00 00       	nop
      30:	00 c7       	rjmp	.+3584   	; 0xe32 <__vector_12>
      32:	00 00       	nop
      34:	0c c2       	rjmp	.+1048   	; 0x44e <__bad_interrupt>
      36:	00 00       	nop
      38:	0a c2       	rjmp	.+1044   	; 0x44e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	08 c2       	rjmp	.+1040   	; 0x44e <__bad_interrupt>
      3e:	00 00       	nop
      40:	06 c2       	rjmp	.+1036   	; 0x44e <__bad_interrupt>
      42:	00 00       	nop
      44:	04 c2       	rjmp	.+1032   	; 0x44e <__bad_interrupt>
      46:	00 00       	nop
      48:	02 c2       	rjmp	.+1028   	; 0x44e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	00 c2       	rjmp	.+1024   	; 0x44e <__bad_interrupt>
      4e:	00 00       	nop
      50:	fe c1       	rjmp	.+1020   	; 0x44e <__bad_interrupt>
      52:	00 00       	nop
      54:	fc c1       	rjmp	.+1016   	; 0x44e <__bad_interrupt>
      56:	00 00       	nop
      58:	fa c1       	rjmp	.+1012   	; 0x44e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f8 c1       	rjmp	.+1008   	; 0x44e <__bad_interrupt>
      5e:	00 00       	nop
      60:	f6 c1       	rjmp	.+1004   	; 0x44e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <__vector_25>
      68:	0c 94 69 17 	jmp	0x2ed2	; 0x2ed2 <__vector_26>
      6c:	f0 c1       	rjmp	.+992    	; 0x44e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ee c1       	rjmp	.+988    	; 0x44e <__bad_interrupt>
      72:	00 00       	nop
      74:	ec c1       	rjmp	.+984    	; 0x44e <__bad_interrupt>
      76:	00 00       	nop
      78:	ea c1       	rjmp	.+980    	; 0x44e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e8 c1       	rjmp	.+976    	; 0x44e <__bad_interrupt>
      7e:	00 00       	nop
      80:	e6 c1       	rjmp	.+972    	; 0x44e <__bad_interrupt>
      82:	00 00       	nop
      84:	e4 c1       	rjmp	.+968    	; 0x44e <__bad_interrupt>
      86:	00 00       	nop
      88:	e2 c1       	rjmp	.+964    	; 0x44e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e0 c1       	rjmp	.+960    	; 0x44e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 ad 17 	jmp	0x2f5a	; 0x2f5a <__vector_36>
      94:	0c 94 ff 17 	jmp	0x2ffe	; 0x2ffe <__vector_37>
      98:	da c1       	rjmp	.+948    	; 0x44e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 f6 22 	jmp	0x45ec	; 0x45ec <__vector_39>
      a0:	d6 c1       	rjmp	.+940    	; 0x44e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d4 c1       	rjmp	.+936    	; 0x44e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d2 c1       	rjmp	.+932    	; 0x44e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d0 c1       	rjmp	.+928    	; 0x44e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ce c1       	rjmp	.+924    	; 0x44e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cc c1       	rjmp	.+920    	; 0x44e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ca c1       	rjmp	.+916    	; 0x44e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c8 c1       	rjmp	.+912    	; 0x44e <__bad_interrupt>
      be:	00 00       	nop
      c0:	c6 c1       	rjmp	.+908    	; 0x44e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c4 c1       	rjmp	.+904    	; 0x44e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c2 c1       	rjmp	.+900    	; 0x44e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 43 18 	jmp	0x3086	; 0x3086 <__vector_51>
      d0:	0c 94 95 18 	jmp	0x312a	; 0x312a <__vector_52>
      d4:	bc c1       	rjmp	.+888    	; 0x44e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 d9 18 	jmp	0x31b2	; 0x31b2 <__vector_54>
      dc:	0c 94 2b 19 	jmp	0x3256	; 0x3256 <__vector_55>
      e0:	b6 c1       	rjmp	.+876    	; 0x44e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	96 01       	movw	r18, r12
      e6:	96 01       	movw	r18, r12
      e8:	96 01       	movw	r18, r12
      ea:	c5 01       	movw	r24, r10
      ec:	cd 01       	movw	r24, r26
      ee:	dc 01       	movw	r26, r24
      f0:	96 01       	movw	r18, r12
      f2:	96 01       	movw	r18, r12
      f4:	c5 01       	movw	r24, r10
      f6:	cd 01       	movw	r24, r26
      f8:	18 23       	and	r17, r24
      fa:	88 23       	and	r24, r24
      fc:	88 23       	and	r24, r24
      fe:	88 23       	and	r24, r24
     100:	88 23       	and	r24, r24
     102:	88 23       	and	r24, r24
     104:	88 23       	and	r24, r24
     106:	88 23       	and	r24, r24
     108:	18 23       	and	r17, r24
     10a:	88 23       	and	r24, r24
     10c:	88 23       	and	r24, r24
     10e:	88 23       	and	r24, r24
     110:	88 23       	and	r24, r24
     112:	88 23       	and	r24, r24
     114:	88 23       	and	r24, r24
     116:	88 23       	and	r24, r24
     118:	1a 23       	and	r17, r26
     11a:	88 23       	and	r24, r24
     11c:	88 23       	and	r24, r24
     11e:	88 23       	and	r24, r24
     120:	88 23       	and	r24, r24
     122:	88 23       	and	r24, r24
     124:	88 23       	and	r24, r24
     126:	88 23       	and	r24, r24
     128:	88 23       	and	r24, r24
     12a:	88 23       	and	r24, r24
     12c:	88 23       	and	r24, r24
     12e:	88 23       	and	r24, r24
     130:	88 23       	and	r24, r24
     132:	88 23       	and	r24, r24
     134:	88 23       	and	r24, r24
     136:	88 23       	and	r24, r24
     138:	1a 23       	and	r17, r26
     13a:	88 23       	and	r24, r24
     13c:	88 23       	and	r24, r24
     13e:	88 23       	and	r24, r24
     140:	88 23       	and	r24, r24
     142:	88 23       	and	r24, r24
     144:	88 23       	and	r24, r24
     146:	88 23       	and	r24, r24
     148:	88 23       	and	r24, r24
     14a:	88 23       	and	r24, r24
     14c:	88 23       	and	r24, r24
     14e:	88 23       	and	r24, r24
     150:	88 23       	and	r24, r24
     152:	88 23       	and	r24, r24
     154:	88 23       	and	r24, r24
     156:	88 23       	and	r24, r24
     158:	84 23       	and	r24, r20
     15a:	88 23       	and	r24, r24
     15c:	88 23       	and	r24, r24
     15e:	88 23       	and	r24, r24
     160:	88 23       	and	r24, r24
     162:	88 23       	and	r24, r24
     164:	88 23       	and	r24, r24
     166:	88 23       	and	r24, r24
     168:	4f 23       	and	r20, r31
     16a:	88 23       	and	r24, r24
     16c:	88 23       	and	r24, r24
     16e:	88 23       	and	r24, r24
     170:	88 23       	and	r24, r24
     172:	88 23       	and	r24, r24
     174:	88 23       	and	r24, r24
     176:	88 23       	and	r24, r24
     178:	88 23       	and	r24, r24
     17a:	88 23       	and	r24, r24
     17c:	88 23       	and	r24, r24
     17e:	88 23       	and	r24, r24
     180:	88 23       	and	r24, r24
     182:	88 23       	and	r24, r24
     184:	88 23       	and	r24, r24
     186:	88 23       	and	r24, r24
     188:	43 23       	and	r20, r19
     18a:	88 23       	and	r24, r24
     18c:	88 23       	and	r24, r24
     18e:	88 23       	and	r24, r24
     190:	88 23       	and	r24, r24
     192:	88 23       	and	r24, r24
     194:	88 23       	and	r24, r24
     196:	88 23       	and	r24, r24
     198:	67 23       	and	r22, r23

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0c ef       	ldi	r16, 0xFC	; 252
     19c:	17 e0       	ldi	r17, 0x07	; 7
     19e:	0f 2e       	mov	r0, r31
     1a0:	f4 e2       	ldi	r31, 0x24	; 36
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f8 e0       	ldi	r31, 0x08	; 8
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 fb 07 	lds	r24, 0x07FB	; 0x8007fb <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	15 96       	adiw	r26, 0x05	; 5
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	16 97       	sbiw	r26, 0x06	; 6
     1c2:	c6 81       	ldd	r28, Z+6	; 0x06
     1c4:	d7 81       	ldd	r29, Z+7	; 0x07
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	99 d4       	rcall	.+2354   	; 0xafe <uxListRemove>
     1cc:	80 91 f1 07 	lds	r24, 0x07F1	; 0x8007f1 <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 f1 07 	sts	0x07F1, r24	; 0x8007f1 <uxCurrentNumberOfTasks>
     1d6:	80 91 fb 07 	lds	r24, 0x07FB	; 0x8007fb <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 fb 07 	sts	0x07FB, r24	; 0x8007fb <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8f 89       	ldd	r24, Y+23	; 0x17
     1e6:	98 8d       	ldd	r25, Y+24	; 0x18
     1e8:	17 d4       	rcall	.+2094   	; 0xa18 <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	15 d4       	rcall	.+2090   	; 0xa18 <vPortFree>
     1ee:	80 91 fb 07 	lds	r24, 0x07FB	; 0x8007fb <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	08 f0       	brcs	.+2      	; 0x200 <prvIdleTask+0x66>
     1fe:	54 d5       	rcall	.+2728   	; 0xca8 <vPortYield>
     200:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <vApplicationIdleHook>
     204:	d2 cf       	rjmp	.-92     	; 0x1aa <prvIdleTask+0x10>

00000206 <prvTimerTask>:
     206:	cf 93       	push	r28
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     208:	df 93       	push	r29
     20a:	00 d0       	rcall	.+0      	; 0x20c <prvTimerTask+0x6>
     20c:	00 d0       	rcall	.+0      	; 0x20e <prvTimerTask+0x8>
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
     212:	ce 01       	movw	r24, r28
     214:	01 96       	adiw	r24, 0x01	; 1
     216:	4c 01       	movw	r8, r24
     218:	44 24       	eor	r4, r4
     21a:	43 94       	inc	r4
     21c:	e1 2c       	mov	r14, r1
     21e:	f1 2c       	mov	r15, r1
     220:	51 2c       	mov	r5, r1
     222:	c8 2e       	mov	r12, r24
     224:	d9 2c       	mov	r13, r9
     226:	e0 91 52 08 	lds	r30, 0x0852	; 0x800852 <pxCurrentTimerList>
     22a:	f0 91 53 08 	lds	r31, 0x0853	; 0x800853 <pxCurrentTimerList+0x1>
     22e:	80 81       	ld	r24, Z
     230:	88 23       	and	r24, r24
     232:	09 f4       	brne	.+2      	; 0x236 <prvTimerTask+0x30>
     234:	d8 c0       	rjmp	.+432    	; 0x3e6 <prvTimerTask+0x1e0>
     236:	05 80       	ldd	r0, Z+5	; 0x05
     238:	f6 81       	ldd	r31, Z+6	; 0x06
     23a:	e0 2d       	mov	r30, r0
     23c:	a0 80       	ld	r10, Z
     23e:	b1 80       	ldd	r11, Z+1	; 0x01
     240:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <vTaskSuspendAll>
     244:	c4 01       	movw	r24, r8
     246:	0e 94 bd 14 	call	0x297a	; 0x297a <prvSampleTimeNow>
     24a:	8c 01       	movw	r16, r24
     24c:	89 81       	ldd	r24, Y+1	; 0x01
     24e:	81 11       	cpse	r24, r1
     250:	49 c0       	rjmp	.+146    	; 0x2e4 <prvTimerTask+0xde>
     252:	0a 15       	cp	r16, r10
     254:	1b 05       	cpc	r17, r11
     256:	b0 f1       	brcs	.+108    	; 0x2c4 <prvTimerTask+0xbe>
     258:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <xTaskResumeAll>
     25c:	e0 91 52 08 	lds	r30, 0x0852	; 0x800852 <pxCurrentTimerList>
     260:	f0 91 53 08 	lds	r31, 0x0853	; 0x800853 <pxCurrentTimerList+0x1>
     264:	05 80       	ldd	r0, Z+5	; 0x05
     266:	f6 81       	ldd	r31, Z+6	; 0x06
     268:	e0 2d       	mov	r30, r0
     26a:	66 80       	ldd	r6, Z+6	; 0x06
     26c:	77 80       	ldd	r7, Z+7	; 0x07
     26e:	c3 01       	movw	r24, r6
     270:	02 96       	adiw	r24, 0x02	; 2
     272:	45 d4       	rcall	.+2186   	; 0xafe <uxListRemove>
     274:	d3 01       	movw	r26, r6
     276:	53 96       	adiw	r26, 0x13	; 19
     278:	8c 91       	ld	r24, X
     27a:	53 97       	sbiw	r26, 0x13	; 19
     27c:	82 ff       	sbrs	r24, 2
     27e:	17 c0       	rjmp	.+46     	; 0x2ae <prvTimerTask+0xa8>
     280:	1c 96       	adiw	r26, 0x0c	; 12
     282:	6d 91       	ld	r22, X+
     284:	7c 91       	ld	r23, X
     286:	1d 97       	sbiw	r26, 0x0d	; 13
     288:	6a 0d       	add	r22, r10
     28a:	7b 1d       	adc	r23, r11
     28c:	95 01       	movw	r18, r10
     28e:	a8 01       	movw	r20, r16
     290:	c3 01       	movw	r24, r6
     292:	0e 94 fe 13 	call	0x27fc	; 0x27fc <prvInsertTimerInActiveList>
     296:	88 23       	and	r24, r24
     298:	69 f0       	breq	.+26     	; 0x2b4 <prvTimerTask+0xae>
     29a:	0e 2d       	mov	r16, r14
     29c:	1f 2d       	mov	r17, r15
     29e:	2e 2d       	mov	r18, r14
     2a0:	3f 2d       	mov	r19, r15
     2a2:	a5 01       	movw	r20, r10
     2a4:	65 2d       	mov	r22, r5
     2a6:	c3 01       	movw	r24, r6
     2a8:	0e 94 76 14 	call	0x28ec	; 0x28ec <xTimerGenericCommand>
     2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <prvTimerTask+0xae>
     2ae:	8e 7f       	andi	r24, 0xFE	; 254
     2b0:	f3 01       	movw	r30, r6
     2b2:	83 8b       	std	Z+19, r24	; 0x13
     2b4:	d3 01       	movw	r26, r6
     2b6:	50 96       	adiw	r26, 0x10	; 16
     2b8:	ed 91       	ld	r30, X+
     2ba:	fc 91       	ld	r31, X
     2bc:	51 97       	sbiw	r26, 0x11	; 17
     2be:	c3 01       	movw	r24, r6
     2c0:	19 95       	eicall
     2c2:	85 c0       	rjmp	.+266    	; 0x3ce <prvTimerTask+0x1c8>
     2c4:	45 2d       	mov	r20, r5
     2c6:	b5 01       	movw	r22, r10
     2c8:	60 1b       	sub	r22, r16
     2ca:	71 0b       	sbc	r23, r17
     2cc:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <xTimerQueue>
     2d0:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <xTimerQueue+0x1>
     2d4:	0e 94 87 0a 	call	0x150e	; 0x150e <vQueueWaitForMessageRestricted>
     2d8:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <xTaskResumeAll>
     2dc:	81 11       	cpse	r24, r1
     2de:	77 c0       	rjmp	.+238    	; 0x3ce <prvTimerTask+0x1c8>
     2e0:	e3 d4       	rcall	.+2502   	; 0xca8 <vPortYield>
     2e2:	75 c0       	rjmp	.+234    	; 0x3ce <prvTimerTask+0x1c8>
     2e4:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <xTaskResumeAll>
     2e8:	72 c0       	rjmp	.+228    	; 0x3ce <prvTimerTask+0x1c8>
     2ea:	89 81       	ldd	r24, Y+1	; 0x01
     2ec:	88 23       	and	r24, r24
     2ee:	0c f4       	brge	.+2      	; 0x2f2 <prvTimerTask+0xec>
     2f0:	6e c0       	rjmp	.+220    	; 0x3ce <prvTimerTask+0x1c8>
     2f2:	ac 80       	ldd	r10, Y+4	; 0x04
     2f4:	bd 80       	ldd	r11, Y+5	; 0x05
     2f6:	f5 01       	movw	r30, r10
     2f8:	82 85       	ldd	r24, Z+10	; 0x0a
     2fa:	93 85       	ldd	r25, Z+11	; 0x0b
     2fc:	89 2b       	or	r24, r25
     2fe:	19 f0       	breq	.+6      	; 0x306 <prvTimerTask+0x100>
     300:	c5 01       	movw	r24, r10
     302:	02 96       	adiw	r24, 0x02	; 2
     304:	fc d3       	rcall	.+2040   	; 0xafe <uxListRemove>
     306:	ce 01       	movw	r24, r28
     308:	06 96       	adiw	r24, 0x06	; 6
     30a:	0e 94 bd 14 	call	0x297a	; 0x297a <prvSampleTimeNow>
     30e:	ac 01       	movw	r20, r24
     310:	e9 81       	ldd	r30, Y+1	; 0x01
     312:	0e 2e       	mov	r0, r30
     314:	00 0c       	add	r0, r0
     316:	ff 0b       	sbc	r31, r31
     318:	ea 30       	cpi	r30, 0x0A	; 10
     31a:	f1 05       	cpc	r31, r1
     31c:	08 f0       	brcs	.+2      	; 0x320 <prvTimerTask+0x11a>
     31e:	57 c0       	rjmp	.+174    	; 0x3ce <prvTimerTask+0x1c8>
     320:	88 27       	eor	r24, r24
     322:	ee 58       	subi	r30, 0x8E	; 142
     324:	ff 4f       	sbci	r31, 0xFF	; 255
     326:	8f 4f       	sbci	r24, 0xFF	; 255
     328:	0c 94 9a 25 	jmp	0x4b34	; 0x4b34 <__tablejump2__>
     32c:	d5 01       	movw	r26, r10
     32e:	53 96       	adiw	r26, 0x13	; 19
     330:	8c 91       	ld	r24, X
     332:	53 97       	sbiw	r26, 0x13	; 19
     334:	81 60       	ori	r24, 0x01	; 1
     336:	53 96       	adiw	r26, 0x13	; 19
     338:	8c 93       	st	X, r24
     33a:	53 97       	sbiw	r26, 0x13	; 19
     33c:	2a 81       	ldd	r18, Y+2	; 0x02
     33e:	3b 81       	ldd	r19, Y+3	; 0x03
     340:	1c 96       	adiw	r26, 0x0c	; 12
     342:	6d 91       	ld	r22, X+
     344:	7c 91       	ld	r23, X
     346:	1d 97       	sbiw	r26, 0x0d	; 13
     348:	62 0f       	add	r22, r18
     34a:	73 1f       	adc	r23, r19
     34c:	c5 01       	movw	r24, r10
     34e:	0e 94 fe 13 	call	0x27fc	; 0x27fc <prvInsertTimerInActiveList>
     352:	88 23       	and	r24, r24
     354:	e1 f1       	breq	.+120    	; 0x3ce <prvTimerTask+0x1c8>
     356:	d5 01       	movw	r26, r10
     358:	50 96       	adiw	r26, 0x10	; 16
     35a:	ed 91       	ld	r30, X+
     35c:	fc 91       	ld	r31, X
     35e:	51 97       	sbiw	r26, 0x11	; 17
     360:	c5 01       	movw	r24, r10
     362:	19 95       	eicall
     364:	f5 01       	movw	r30, r10
     366:	83 89       	ldd	r24, Z+19	; 0x13
     368:	82 ff       	sbrs	r24, 2
     36a:	31 c0       	rjmp	.+98     	; 0x3ce <prvTimerTask+0x1c8>
     36c:	4a 81       	ldd	r20, Y+2	; 0x02
     36e:	5b 81       	ldd	r21, Y+3	; 0x03
     370:	84 85       	ldd	r24, Z+12	; 0x0c
     372:	95 85       	ldd	r25, Z+13	; 0x0d
     374:	48 0f       	add	r20, r24
     376:	59 1f       	adc	r21, r25
     378:	0e 2d       	mov	r16, r14
     37a:	1f 2d       	mov	r17, r15
     37c:	2e 2d       	mov	r18, r14
     37e:	3f 2d       	mov	r19, r15
     380:	65 2d       	mov	r22, r5
     382:	c5 01       	movw	r24, r10
     384:	0e 94 76 14 	call	0x28ec	; 0x28ec <xTimerGenericCommand>
     388:	22 c0       	rjmp	.+68     	; 0x3ce <prvTimerTask+0x1c8>
     38a:	d5 01       	movw	r26, r10
     38c:	53 96       	adiw	r26, 0x13	; 19
     38e:	8c 91       	ld	r24, X
     390:	53 97       	sbiw	r26, 0x13	; 19
     392:	8e 7f       	andi	r24, 0xFE	; 254
     394:	53 96       	adiw	r26, 0x13	; 19
     396:	8c 93       	st	X, r24
     398:	1a c0       	rjmp	.+52     	; 0x3ce <prvTimerTask+0x1c8>
     39a:	f5 01       	movw	r30, r10
     39c:	83 89       	ldd	r24, Z+19	; 0x13
     39e:	81 60       	ori	r24, 0x01	; 1
     3a0:	83 8b       	std	Z+19, r24	; 0x13
     3a2:	6a 81       	ldd	r22, Y+2	; 0x02
     3a4:	7b 81       	ldd	r23, Y+3	; 0x03
     3a6:	75 87       	std	Z+13, r23	; 0x0d
     3a8:	64 87       	std	Z+12, r22	; 0x0c
     3aa:	64 0f       	add	r22, r20
     3ac:	75 1f       	adc	r23, r21
     3ae:	9a 01       	movw	r18, r20
     3b0:	c5 01       	movw	r24, r10
     3b2:	0e 94 fe 13 	call	0x27fc	; 0x27fc <prvInsertTimerInActiveList>
     3b6:	0b c0       	rjmp	.+22     	; 0x3ce <prvTimerTask+0x1c8>
     3b8:	d5 01       	movw	r26, r10
     3ba:	53 96       	adiw	r26, 0x13	; 19
     3bc:	8c 91       	ld	r24, X
     3be:	81 fd       	sbrc	r24, 1
     3c0:	03 c0       	rjmp	.+6      	; 0x3c8 <prvTimerTask+0x1c2>
     3c2:	c5 01       	movw	r24, r10
     3c4:	29 d3       	rcall	.+1618   	; 0xa18 <vPortFree>
     3c6:	03 c0       	rjmp	.+6      	; 0x3ce <prvTimerTask+0x1c8>
     3c8:	8e 7f       	andi	r24, 0xFE	; 254
     3ca:	f5 01       	movw	r30, r10
     3cc:	83 8b       	std	Z+19, r24	; 0x13
     3ce:	4e 2d       	mov	r20, r14
     3d0:	5f 2d       	mov	r21, r15
     3d2:	6c 2d       	mov	r22, r12
     3d4:	7d 2d       	mov	r23, r13
     3d6:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <xTimerQueue>
     3da:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <xTimerQueue+0x1>
     3de:	52 d7       	rcall	.+3748   	; 0x1284 <xQueueReceive>
     3e0:	81 11       	cpse	r24, r1
     3e2:	83 cf       	rjmp	.-250    	; 0x2ea <prvTimerTask+0xe4>
     3e4:	20 cf       	rjmp	.-448    	; 0x226 <prvTimerTask+0x20>
     3e6:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <vTaskSuspendAll>
     3ea:	c4 01       	movw	r24, r8
     3ec:	0e 94 bd 14 	call	0x297a	; 0x297a <prvSampleTimeNow>
     3f0:	8c 01       	movw	r16, r24
     3f2:	89 81       	ldd	r24, Y+1	; 0x01
     3f4:	81 11       	cpse	r24, r1
     3f6:	76 cf       	rjmp	.-276    	; 0x2e4 <prvTimerTask+0xde>
     3f8:	e0 91 50 08 	lds	r30, 0x0850	; 0x800850 <pxOverflowTimerList>
     3fc:	f0 91 51 08 	lds	r31, 0x0851	; 0x800851 <pxOverflowTimerList+0x1>
     400:	80 81       	ld	r24, Z
     402:	44 2d       	mov	r20, r4
     404:	81 11       	cpse	r24, r1
     406:	45 2d       	mov	r20, r5
     408:	ae 2c       	mov	r10, r14
     40a:	bf 2c       	mov	r11, r15
     40c:	5c cf       	rjmp	.-328    	; 0x2c6 <prvTimerTask+0xc0>

0000040e <__ctors_end>:
     40e:	11 24       	eor	r1, r1
     410:	1f be       	out	0x3f, r1	; 63
     412:	cf ef       	ldi	r28, 0xFF	; 255
     414:	d1 e2       	ldi	r29, 0x21	; 33
     416:	de bf       	out	0x3e, r29	; 62
     418:	cd bf       	out	0x3d, r28	; 61
     41a:	00 e0       	ldi	r16, 0x00	; 0
     41c:	0c bf       	out	0x3c, r16	; 60

0000041e <__do_copy_data>:
     41e:	17 e0       	ldi	r17, 0x07	; 7
     420:	a0 e0       	ldi	r26, 0x00	; 0
     422:	b2 e0       	ldi	r27, 0x02	; 2
     424:	e6 e7       	ldi	r30, 0x76	; 118
     426:	f4 e5       	ldi	r31, 0x54	; 84
     428:	00 e0       	ldi	r16, 0x00	; 0
     42a:	0b bf       	out	0x3b, r16	; 59
     42c:	02 c0       	rjmp	.+4      	; 0x432 <__do_copy_data+0x14>
     42e:	07 90       	elpm	r0, Z+
     430:	0d 92       	st	X+, r0
     432:	a8 3d       	cpi	r26, 0xD8	; 216
     434:	b1 07       	cpc	r27, r17
     436:	d9 f7       	brne	.-10     	; 0x42e <__do_copy_data+0x10>

00000438 <__do_clear_bss>:
     438:	2a e0       	ldi	r18, 0x0A	; 10
     43a:	a8 ed       	ldi	r26, 0xD8	; 216
     43c:	b7 e0       	ldi	r27, 0x07	; 7
     43e:	01 c0       	rjmp	.+2      	; 0x442 <.do_clear_bss_start>

00000440 <.do_clear_bss_loop>:
     440:	1d 92       	st	X+, r1

00000442 <.do_clear_bss_start>:
     442:	ac 35       	cpi	r26, 0x5C	; 92
     444:	b2 07       	cpc	r27, r18
     446:	e1 f7       	brne	.-8      	; 0x440 <.do_clear_bss_loop>
     448:	20 d2       	rcall	.+1088   	; 0x88a <main>
     44a:	0c 94 39 2a 	jmp	0x5472	; 0x5472 <_exit>

0000044e <__bad_interrupt>:
     44e:	d8 cd       	rjmp	.-1104   	; 0x0 <__vectors>

00000450 <tempSensorTask>:

void waterTask(void* pvParamters) {
	(void)pvParamters;

	while(1) {
		while(plantdata.water > 0) {
     450:	0f 2e       	mov	r0, r31
     452:	fe e6       	ldi	r31, 0x6E	; 110
     454:	cf 2e       	mov	r12, r31
     456:	f2 e0       	ldi	r31, 0x02	; 2
     458:	df 2e       	mov	r13, r31
     45a:	f0 2d       	mov	r31, r0
     45c:	0f 2e       	mov	r0, r31
     45e:	f3 e8       	ldi	r31, 0x83	; 131
     460:	ef 2e       	mov	r14, r31
     462:	f2 e0       	ldi	r31, 0x02	; 2
     464:	ff 2e       	mov	r15, r31
     466:	f0 2d       	mov	r31, r0
     468:	c0 e3       	ldi	r28, 0x30	; 48
     46a:	da e0       	ldi	r29, 0x0A	; 10
     46c:	08 e9       	ldi	r16, 0x98	; 152
     46e:	12 e0       	ldi	r17, 0x02	; 2
     470:	8e e3       	ldi	r24, 0x3E	; 62
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <vTaskDelay>
     478:	0e 94 05 1a 	call	0x340a	; 0x340a <hih8120Wakeup>
     47c:	28 2f       	mov	r18, r24
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	21 15       	cp	r18, r1
     482:	31 05       	cpc	r19, r1
     484:	69 f0       	breq	.+26     	; 0x4a0 <tempSensorTask+0x50>
     486:	23 30       	cpi	r18, 0x03	; 3
     488:	31 05       	cpc	r19, r1
     48a:	51 f0       	breq	.+20     	; 0x4a0 <tempSensorTask+0x50>
     48c:	1f 92       	push	r1
     48e:	8f 93       	push	r24
     490:	df 92       	push	r13
     492:	cf 92       	push	r12
     494:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <printf>
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	0f 90       	pop	r0
     4a0:	86 e0       	ldi	r24, 0x06	; 6
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <vTaskDelay>
     4a8:	0e 94 1a 1a 	call	0x3434	; 0x3434 <hih8120Meassure>
     4ac:	28 2f       	mov	r18, r24
     4ae:	30 e0       	ldi	r19, 0x00	; 0
     4b0:	21 15       	cp	r18, r1
     4b2:	31 05       	cpc	r19, r1
     4b4:	69 f0       	breq	.+26     	; 0x4d0 <tempSensorTask+0x80>
     4b6:	23 30       	cpi	r18, 0x03	; 3
     4b8:	31 05       	cpc	r19, r1
     4ba:	51 f0       	breq	.+20     	; 0x4d0 <tempSensorTask+0x80>
     4bc:	1f 92       	push	r1
     4be:	8f 93       	push	r24
     4c0:	ff 92       	push	r15
     4c2:	ef 92       	push	r14
     4c4:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <printf>
     4c8:	0f 90       	pop	r0
     4ca:	0f 90       	pop	r0
     4cc:	0f 90       	pop	r0
     4ce:	0f 90       	pop	r0
     4d0:	86 e0       	ldi	r24, 0x06	; 6
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <vTaskDelay>
     4d8:	6f ef       	ldi	r22, 0xFF	; 255
     4da:	7f ef       	ldi	r23, 0xFF	; 255
     4dc:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <__data_end>
     4e0:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <__data_end+0x1>
     4e4:	58 d7       	rcall	.+3760   	; 0x1396 <xQueueSemaphoreTake>
     4e6:	0e 94 2b 1a 	call	0x3456	; 0x3456 <hih8120GetHumidity>
     4ea:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <__fixsfsi>
     4ee:	7b 83       	std	Y+3, r23	; 0x03
     4f0:	6a 83       	std	Y+2, r22	; 0x02
     4f2:	0e 94 40 1a 	call	0x3480	; 0x3480 <hih8120GetTemperature>
     4f6:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <__fixsfsi>
     4fa:	68 83       	st	Y, r22
     4fc:	79 83       	std	Y+1, r23	; 0x01
     4fe:	7f 93       	push	r23
     500:	6f 93       	push	r22
     502:	8b 81       	ldd	r24, Y+3	; 0x03
     504:	8f 93       	push	r24
     506:	8a 81       	ldd	r24, Y+2	; 0x02
     508:	8f 93       	push	r24
     50a:	1f 93       	push	r17
     50c:	0f 93       	push	r16
     50e:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <printf>
     512:	20 e0       	ldi	r18, 0x00	; 0
     514:	40 e0       	ldi	r20, 0x00	; 0
     516:	50 e0       	ldi	r21, 0x00	; 0
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	70 e0       	ldi	r23, 0x00	; 0
     51c:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <__data_end>
     520:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <__data_end+0x1>
     524:	ca d5       	rcall	.+2964   	; 0x10ba <xQueueGenericSend>
     526:	0f 90       	pop	r0
     528:	0f 90       	pop	r0
     52a:	0f 90       	pop	r0
     52c:	0f 90       	pop	r0
     52e:	0f 90       	pop	r0
     530:	0f 90       	pop	r0
     532:	9e cf       	rjmp	.-196    	; 0x470 <tempSensorTask+0x20>

00000534 <co2Callback>:
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	c8 2f       	mov	r28, r24
     53a:	d9 2f       	mov	r29, r25
     53c:	6f ef       	ldi	r22, 0xFF	; 255
     53e:	7f ef       	ldi	r23, 0xFF	; 255
     540:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <__data_end>
     544:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <__data_end+0x1>
     548:	26 d7       	rcall	.+3660   	; 0x1396 <xQueueSemaphoreTake>
     54a:	e0 e3       	ldi	r30, 0x30	; 48
     54c:	fa e0       	ldi	r31, 0x0A	; 10
     54e:	c4 83       	std	Z+4, r28	; 0x04
     550:	d5 83       	std	Z+5, r29	; 0x05
     552:	df 93       	push	r29
     554:	cf 93       	push	r28
     556:	8b ea       	ldi	r24, 0xAB	; 171
     558:	92 e0       	ldi	r25, 0x02	; 2
     55a:	9f 93       	push	r25
     55c:	8f 93       	push	r24
     55e:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <printf>
     562:	20 e0       	ldi	r18, 0x00	; 0
     564:	40 e0       	ldi	r20, 0x00	; 0
     566:	50 e0       	ldi	r21, 0x00	; 0
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <__data_end>
     570:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <__data_end+0x1>
     574:	a2 d5       	rcall	.+2884   	; 0x10ba <xQueueGenericSend>
     576:	0f 90       	pop	r0
     578:	0f 90       	pop	r0
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	df 91       	pop	r29
     580:	cf 91       	pop	r28
     582:	08 95       	ret

00000584 <co2SensorTask>:
     584:	ca eb       	ldi	r28, 0xBA	; 186
     586:	d2 e0       	ldi	r29, 0x02	; 2
     588:	8e e3       	ldi	r24, 0x3E	; 62
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <vTaskDelay>
     590:	0e 94 37 20 	call	0x406e	; 0x406e <mh_z19_take_meassuring>
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	00 97       	sbiw	r24, 0x00	; 0
     598:	b9 f3       	breq	.-18     	; 0x588 <co2SensorTask+0x4>
     59a:	9f 93       	push	r25
     59c:	8f 93       	push	r24
     59e:	df 93       	push	r29
     5a0:	cf 93       	push	r28
     5a2:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <printf>
     5a6:	0f 90       	pop	r0
     5a8:	0f 90       	pop	r0
     5aa:	0f 90       	pop	r0
     5ac:	0f 90       	pop	r0
     5ae:	ec cf       	rjmp	.-40     	; 0x588 <co2SensorTask+0x4>

000005b0 <lightSensorTask>:
     5b0:	c9 ec       	ldi	r28, 0xC9	; 201
     5b2:	d2 e0       	ldi	r29, 0x02	; 2
     5b4:	8e e3       	ldi	r24, 0x3E	; 62
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <vTaskDelay>
     5bc:	0e 94 2a 21 	call	0x4254	; 0x4254 <tsl2591FetchData>
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	00 97       	sbiw	r24, 0x00	; 0
     5c4:	b9 f3       	breq	.-18     	; 0x5b4 <lightSensorTask+0x4>
     5c6:	9f 93       	push	r25
     5c8:	8f 93       	push	r24
     5ca:	df 93       	push	r29
     5cc:	cf 93       	push	r28
     5ce:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <printf>
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	0f 90       	pop	r0
     5da:	ec cf       	rjmp	.-40     	; 0x5b4 <lightSensorTask+0x4>

000005dc <lightCallback>:
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	00 d0       	rcall	.+0      	; 0x5e2 <lightCallback+0x6>
     5e2:	1f 92       	push	r1
     5e4:	cd b7       	in	r28, 0x3d	; 61
     5e6:	de b7       	in	r29, 0x3e	; 62
     5e8:	81 30       	cpi	r24, 0x01	; 1
     5ea:	29 f0       	breq	.+10     	; 0x5f6 <lightCallback+0x1a>
     5ec:	89 ee       	ldi	r24, 0xE9	; 233
     5ee:	92 e0       	ldi	r25, 0x02	; 2
     5f0:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <puts>
     5f4:	36 c0       	rjmp	.+108    	; 0x662 <lightCallback+0x86>
     5f6:	ce 01       	movw	r24, r28
     5f8:	01 96       	adiw	r24, 0x01	; 1
     5fa:	0e 94 3c 21 	call	0x4278	; 0x4278 <tsl2591GetLux>
     5fe:	81 11       	cpse	r24, r1
     600:	2c c0       	rjmp	.+88     	; 0x65a <lightCallback+0x7e>
     602:	6f ef       	ldi	r22, 0xFF	; 255
     604:	7f ef       	ldi	r23, 0xFF	; 255
     606:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <__data_end>
     60a:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <__data_end+0x1>
     60e:	c3 d6       	rcall	.+3462   	; 0x1396 <xQueueSemaphoreTake>
     610:	69 81       	ldd	r22, Y+1	; 0x01
     612:	7a 81       	ldd	r23, Y+2	; 0x02
     614:	8b 81       	ldd	r24, Y+3	; 0x03
     616:	9c 81       	ldd	r25, Y+4	; 0x04
     618:	60 93 36 0a 	sts	0x0A36, r22	; 0x800a36 <plantdata+0x6>
     61c:	70 93 37 0a 	sts	0x0A37, r23	; 0x800a37 <plantdata+0x7>
     620:	80 93 38 0a 	sts	0x0A38, r24	; 0x800a38 <plantdata+0x8>
     624:	90 93 39 0a 	sts	0x0A39, r25	; 0x800a39 <plantdata+0x9>
     628:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__fixunssfsi>
     62c:	7f 93       	push	r23
     62e:	6f 93       	push	r22
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	93 e0       	ldi	r25, 0x03	; 3
     634:	9f 93       	push	r25
     636:	8f 93       	push	r24
     638:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <printf>
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	40 e0       	ldi	r20, 0x00	; 0
     640:	50 e0       	ldi	r21, 0x00	; 0
     642:	60 e0       	ldi	r22, 0x00	; 0
     644:	70 e0       	ldi	r23, 0x00	; 0
     646:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <__data_end>
     64a:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <__data_end+0x1>
     64e:	35 d5       	rcall	.+2666   	; 0x10ba <xQueueGenericSend>
     650:	0f 90       	pop	r0
     652:	0f 90       	pop	r0
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
     658:	04 c0       	rjmp	.+8      	; 0x662 <lightCallback+0x86>
     65a:	8b e0       	ldi	r24, 0x0B	; 11
     65c:	93 e0       	ldi	r25, 0x03	; 3
     65e:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <puts>
     662:	0f 90       	pop	r0
     664:	0f 90       	pop	r0
     666:	0f 90       	pop	r0
     668:	0f 90       	pop	r0
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
     66e:	08 95       	ret

00000670 <servoMotorTask>:
     670:	64 e6       	ldi	r22, 0x64	; 100
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	0e 94 67 20 	call	0x40ce	; 0x40ce <rcServoSet>
     678:	8e e1       	ldi	r24, 0x1E	; 30
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <vTaskDelay>
     680:	f7 cf       	rjmp	.-18     	; 0x670 <servoMotorTask>

00000682 <_loRa_setup>:

//added:



void _loRa_setup(void){
     682:	ef 92       	push	r14
     684:	ff 92       	push	r15
     686:	1f 93       	push	r17
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
	
	e_LoRa_return_code_t rc;
	
	
	//For factory reset.
	printf("FactoryRest >%s<\n", 
     68c:	0e 94 b3 1c 	call	0x3966	; 0x3966 <lora_driver_rn2483_factory_reset>
     690:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <lora_driver_map_return_code_to_text>
     694:	9f 93       	push	r25
     696:	8f 93       	push	r24
     698:	88 e1       	ldi	r24, 0x18	; 24
     69a:	93 e0       	ldi	r25, 0x03	; 3
     69c:	9f 93       	push	r25
     69e:	8f 93       	push	r24
     6a0:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <printf>
	lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
	
	//Configure to EU868 LoRaWAN standards.
	printf("Configure to EU868 >%s<\n", 
     6a4:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <lora_driver_configure_to_eu868>
     6a8:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <lora_driver_map_return_code_to_text>
     6ac:	9f 93       	push	r25
     6ae:	8f 93       	push	r24
     6b0:	8a e2       	ldi	r24, 0x2A	; 42
     6b2:	93 e0       	ldi	r25, 0x03	; 3
     6b4:	9f 93       	push	r25
     6b6:	8f 93       	push	r24
     6b8:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <printf>
	lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
	
	//Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buff);
     6bc:	8c ec       	ldi	r24, 0xCC	; 204
     6be:	99 e0       	ldi	r25, 0x09	; 9
     6c0:	0e 94 c5 1c 	call	0x398a	; 0x398a <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI: %s >%s< \n", lora_driver_map_return_code_to_text(rc), _out_buff );
     6c4:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <lora_driver_map_return_code_to_text>
     6c8:	cc ec       	ldi	r28, 0xCC	; 204
     6ca:	d9 e0       	ldi	r29, 0x09	; 9
     6cc:	df 93       	push	r29
     6ce:	cf 93       	push	r28
     6d0:	9f 93       	push	r25
     6d2:	8f 93       	push	r24
     6d4:	83 e4       	ldi	r24, 0x43	; 67
     6d6:	93 e0       	ldi	r25, 0x03	; 3
     6d8:	9f 93       	push	r25
     6da:	8f 93       	push	r24
     6dc:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <printf>
	
	
	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buff, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buff)));
     6e0:	ce 01       	movw	r24, r28
     6e2:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <lora_driver_set_device_identifier>
     6e6:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <lora_driver_map_return_code_to_text>
     6ea:	9f 93       	push	r25
     6ec:	8f 93       	push	r24
     6ee:	df 93       	push	r29
     6f0:	cf 93       	push	r28
     6f2:	88 e5       	ldi	r24, 0x58	; 88
     6f4:	93 e0       	ldi	r25, 0x03	; 3
     6f6:	9f 93       	push	r25
     6f8:	8f 93       	push	r24
     6fa:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buff, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buff)));
     6fe:	ae 01       	movw	r20, r28
     700:	6d e6       	ldi	r22, 0x6D	; 109
     702:	73 e0       	ldi	r23, 0x03	; 3
     704:	8e e8       	ldi	r24, 0x8E	; 142
     706:	93 e0       	ldi	r25, 0x03	; 3
     708:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <lora_driver_set_otaa_identity>
     70c:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <lora_driver_map_return_code_to_text>
     710:	9f 93       	push	r25
     712:	8f 93       	push	r24
     714:	df 93       	push	r29
     716:	cf 93       	push	r28
     718:	8d e6       	ldi	r24, 0x6D	; 109
     71a:	93 e0       	ldi	r25, 0x03	; 3
     71c:	9f 93       	push	r25
     71e:	8f 93       	push	r24
     720:	8e e8       	ldi	r24, 0x8E	; 142
     722:	93 e0       	ldi	r25, 0x03	; 3
     724:	9f 93       	push	r25
     726:	8f 93       	push	r24
     728:	8f e9       	ldi	r24, 0x9F	; 159
     72a:	93 e0       	ldi	r25, 0x03	; 3
     72c:	9f 93       	push	r25
     72e:	8f 93       	push	r24
     730:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
     734:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <lora_driver_save_mac>
     738:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <lora_driver_map_return_code_to_text>
     73c:	9f 93       	push	r25
     73e:	8f 93       	push	r24
     740:	85 ed       	ldi	r24, 0xD5	; 213
     742:	93 e0       	ldi	r25, 0x03	; 3
     744:	9f 93       	push	r25
     746:	8f 93       	push	r24
     748:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
     74c:	8d b7       	in	r24, 0x3d	; 61
     74e:	9e b7       	in	r25, 0x3e	; 62
     750:	82 96       	adiw	r24, 0x22	; 34
     752:	0f b6       	in	r0, 0x3f	; 63
     754:	f8 94       	cli
     756:	9e bf       	out	0x3e, r25	; 62
     758:	0f be       	out	0x3f, r0	; 63
     75a:	8d bf       	out	0x3d, r24	; 61
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <lora_driver_set_adaptive_data_rate>
     762:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <lora_driver_map_return_code_to_text>
     766:	9f 93       	push	r25
     768:	8f 93       	push	r24
     76a:	84 ee       	ldi	r24, 0xE4	; 228
     76c:	93 e0       	ldi	r25, 0x03	; 3
     76e:	9f 93       	push	r25
     770:	8f 93       	push	r24
     772:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <printf>
     776:	0f 90       	pop	r0
     778:	0f 90       	pop	r0
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	c5 e0       	ldi	r28, 0x05	; 5
     780:	d0 e0       	ldi	r29, 0x00	; 0

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 5;
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     782:	0f 2e       	mov	r0, r31
     784:	f5 e0       	ldi	r31, 0x05	; 5
     786:	ef 2e       	mov	r14, r31
     788:	f4 e0       	ldi	r31, 0x04	; 4
     78a:	ff 2e       	mov	r15, r31
     78c:	f0 2d       	mov	r31, r0
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 5;
	do {
		rc = lora_driver_join(LoRa_OTAA);
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <lora_driver_join>
     794:	18 2f       	mov	r17, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     796:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <lora_driver_map_return_code_to_text>
     79a:	9f 93       	push	r25
     79c:	8f 93       	push	r24
     79e:	df 93       	push	r29
     7a0:	cf 93       	push	r28
     7a2:	ff 92       	push	r15
     7a4:	ef 92       	push	r14
     7a6:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <printf>

		if ( rc != LoRa_ACCEPTED)
     7aa:	0f 90       	pop	r0
     7ac:	0f 90       	pop	r0
     7ae:	0f 90       	pop	r0
     7b0:	0f 90       	pop	r0
     7b2:	0f 90       	pop	r0
     7b4:	0f 90       	pop	r0
     7b6:	18 30       	cpi	r17, 0x08	; 8
     7b8:	31 f0       	breq	.+12     	; 0x7c6 <_loRa_setup+0x144>
		{
			// Make the red led pulse to tell something went wrong
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     7ba:	8f e2       	ldi	r24, 0x2F	; 47
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <vTaskDelay>
     7c2:	21 97       	sbiw	r28, 0x01	; 1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     7c4:	21 f7       	brne	.-56     	; 0x78e <_loRa_setup+0x10c>

}
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	ff 90       	pop	r15
     7ce:	ef 90       	pop	r14
     7d0:	08 95       	ret

000007d2 <loRaWanTask>:

void loRaWanTask(void* pvParamters){
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	cd b7       	in	r28, 0x3d	; 61
     7d8:	de b7       	in	r29, 0x3e	; 62
     7da:	66 97       	sbiw	r28, 0x16	; 22
     7dc:	0f b6       	in	r0, 0x3f	; 63
     7de:	f8 94       	cli
     7e0:	de bf       	out	0x3e, r29	; 62
     7e2:	0f be       	out	0x3f, r0	; 63
     7e4:	cd bf       	out	0x3d, r28	; 61

	//for resetting the LoRaWAN hardware.
	lora_driver_reset_rn2483(1);
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	0e 94 9f 1c 	call	0x393e	; 0x393e <lora_driver_reset_rn2483>
	vTaskDelay(2);
     7ec:	82 e0       	ldi	r24, 0x02	; 2
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <vTaskDelay>
	lora_driver_reset_rn2483(0);
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	0e 94 9f 1c 	call	0x393e	; 0x393e <lora_driver_reset_rn2483>
	vTaskDelay(150);
     7fa:	86 e9       	ldi	r24, 0x96	; 150
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <vTaskDelay>
	lora_driver_flush_buffers();
     802:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <lora_driver_flush_buffers>
	
	_loRa_setup();
     806:	3d df       	rcall	.-390    	; 0x682 <_loRa_setup>
	vTaskDelay(pdMS_TO_TICKS(200UL));
     808:	8c e0       	ldi	r24, 0x0C	; 12
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <vTaskDelay>
	
	lora_payload_t _uplink_payload;
	
	_uplink_payload.len = 6;
     810:	86 e0       	ldi	r24, 0x06	; 6
     812:	8a 83       	std	Y+2, r24	; 0x02
	_uplink_payload.port_no = 2;
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
	while(1){
		
		vTaskDelay(pdMS_TO_TICKS(5000UL));
		///////////////////semaphore:
		xSemaphoreTake(semaphore, portMAX_DELAY);
		_uplink_payload.bytes[0] = plantdata.humidity;
     818:	00 e3       	ldi	r16, 0x30	; 48
     81a:	1a e0       	ldi	r17, 0x0A	; 10
		_uplink_payload.bytes[2] = plantdata.co2 >> 8;
		_uplink_payload.bytes[3] = plantdata.co2 & 0xFF;
		_uplink_payload.bytes[4] = plantdata.light;
		_uplink_payload.bytes[5] = plantdata.water;
		
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
     81c:	0f 2e       	mov	r0, r31
     81e:	f5 e2       	ldi	r31, 0x25	; 37
     820:	ef 2e       	mov	r14, r31
     822:	f4 e0       	ldi	r31, 0x04	; 4
     824:	ff 2e       	mov	r15, r31
     826:	f0 2d       	mov	r31, r0
	_uplink_payload.port_no = 2;
	
	
	while(1){
		
		vTaskDelay(pdMS_TO_TICKS(5000UL));
     828:	8f e2       	ldi	r24, 0x2F	; 47
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <vTaskDelay>
		///////////////////semaphore:
		xSemaphoreTake(semaphore, portMAX_DELAY);
     830:	6f ef       	ldi	r22, 0xFF	; 255
     832:	7f ef       	ldi	r23, 0xFF	; 255
     834:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <__data_end>
     838:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <__data_end+0x1>
     83c:	ac d5       	rcall	.+2904   	; 0x1396 <xQueueSemaphoreTake>
		_uplink_payload.bytes[0] = plantdata.humidity;
     83e:	f8 01       	movw	r30, r16
     840:	82 81       	ldd	r24, Z+2	; 0x02
     842:	8b 83       	std	Y+3, r24	; 0x03
		_uplink_payload.bytes[1] = plantdata.temperature;
     844:	80 81       	ld	r24, Z
     846:	8c 83       	std	Y+4, r24	; 0x04
		_uplink_payload.bytes[2] = plantdata.co2 >> 8;
     848:	84 81       	ldd	r24, Z+4	; 0x04
     84a:	95 81       	ldd	r25, Z+5	; 0x05
     84c:	9d 83       	std	Y+5, r25	; 0x05
		_uplink_payload.bytes[3] = plantdata.co2 & 0xFF;
     84e:	8e 83       	std	Y+6, r24	; 0x06
		_uplink_payload.bytes[4] = plantdata.light;
     850:	66 81       	ldd	r22, Z+6	; 0x06
     852:	77 81       	ldd	r23, Z+7	; 0x07
     854:	80 85       	ldd	r24, Z+8	; 0x08
     856:	91 85       	ldd	r25, Z+9	; 0x09
     858:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__fixunssfsi>
     85c:	6f 83       	std	Y+7, r22	; 0x07
		_uplink_payload.bytes[5] = plantdata.water;
     85e:	f8 01       	movw	r30, r16
     860:	82 85       	ldd	r24, Z+10	; 0x0a
     862:	88 87       	std	Y+8, r24	; 0x08
		
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
     864:	be 01       	movw	r22, r28
     866:	6f 5f       	subi	r22, 0xFF	; 255
     868:	7f 4f       	sbci	r23, 0xFF	; 255
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <lora_driver_sent_upload_message>
     870:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <lora_driver_map_return_code_to_text>
     874:	9f 93       	push	r25
     876:	8f 93       	push	r24
     878:	ff 92       	push	r15
     87a:	ef 92       	push	r14
     87c:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <printf>
     880:	0f 90       	pop	r0
     882:	0f 90       	pop	r0
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	cf cf       	rjmp	.-98     	; 0x828 <loRaWanTask+0x56>

0000088a <main>:
	vTaskDelete(NULL);
}
	
//

int main() {
     88a:	ef 92       	push	r14
     88c:	ff 92       	push	r15
     88e:	0f 93       	push	r16
	
	hal_create(LED_TASK_PRIORITY);
     890:	83 e0       	ldi	r24, 0x03	; 3
     892:	0e 94 8e 19 	call	0x331c	; 0x331c <hal_create>
	lora_driver_create(ser_USART1);
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <lora_driver_create>
	stdioCreate(0);
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <stdioCreate>
	sei();
     8a2:	78 94       	sei

	
	xTaskCreate(tempSensorTask, "Temperature measurement", configMINIMAL_STACK_SIZE, NULL, TEMP_TASK_PRIORITY, &tempSensorHandle);
     8a4:	0f 2e       	mov	r0, r31
     8a6:	f2 ee       	ldi	r31, 0xE2	; 226
     8a8:	ef 2e       	mov	r14, r31
     8aa:	f7 e0       	ldi	r31, 0x07	; 7
     8ac:	ff 2e       	mov	r15, r31
     8ae:	f0 2d       	mov	r31, r0
     8b0:	01 e0       	ldi	r16, 0x01	; 1
     8b2:	20 e0       	ldi	r18, 0x00	; 0
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	40 ec       	ldi	r20, 0xC0	; 192
     8b8:	50 e0       	ldi	r21, 0x00	; 0
     8ba:	6a e3       	ldi	r22, 0x3A	; 58
     8bc:	74 e0       	ldi	r23, 0x04	; 4
     8be:	88 e2       	ldi	r24, 0x28	; 40
     8c0:	92 e0       	ldi	r25, 0x02	; 2
     8c2:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <xTaskCreate>
	xTaskCreate(co2SensorTask, "CO2 measurement", configMINIMAL_STACK_SIZE, NULL, CO2_TASK_PRIORITY, &co2SensorHandle);
     8c6:	0f 2e       	mov	r0, r31
     8c8:	f0 ee       	ldi	r31, 0xE0	; 224
     8ca:	ef 2e       	mov	r14, r31
     8cc:	f7 e0       	ldi	r31, 0x07	; 7
     8ce:	ff 2e       	mov	r15, r31
     8d0:	f0 2d       	mov	r31, r0
     8d2:	20 e0       	ldi	r18, 0x00	; 0
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	40 ec       	ldi	r20, 0xC0	; 192
     8d8:	50 e0       	ldi	r21, 0x00	; 0
     8da:	62 e5       	ldi	r22, 0x52	; 82
     8dc:	74 e0       	ldi	r23, 0x04	; 4
     8de:	82 ec       	ldi	r24, 0xC2	; 194
     8e0:	92 e0       	ldi	r25, 0x02	; 2
     8e2:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <xTaskCreate>
	xTaskCreate(lightSensorTask, "Light measurement", configMINIMAL_STACK_SIZE, NULL, LIGHT_TASK_PRIORITY, &lightSensorHandle);
     8e6:	0f 2e       	mov	r0, r31
     8e8:	fe ed       	ldi	r31, 0xDE	; 222
     8ea:	ef 2e       	mov	r14, r31
     8ec:	f7 e0       	ldi	r31, 0x07	; 7
     8ee:	ff 2e       	mov	r15, r31
     8f0:	f0 2d       	mov	r31, r0
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	40 ec       	ldi	r20, 0xC0	; 192
     8f8:	50 e0       	ldi	r21, 0x00	; 0
     8fa:	62 e6       	ldi	r22, 0x62	; 98
     8fc:	74 e0       	ldi	r23, 0x04	; 4
     8fe:	88 ed       	ldi	r24, 0xD8	; 216
     900:	92 e0       	ldi	r25, 0x02	; 2
     902:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <xTaskCreate>
	semaphore = xSemaphoreCreateMutex();
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	6d d4       	rcall	.+2266   	; 0x11e4 <xQueueCreateMutex>
     90a:	90 93 d9 07 	sts	0x07D9, r25	; 0x8007d9 <__data_end+0x1>
     90e:	80 93 d8 07 	sts	0x07D8, r24	; 0x8007d8 <__data_end>
	//added:
	xTaskCreate(loRaWanTask, "Led", configMINIMAL_STACK_SIZE, NULL,LED_TASK_PRIORITY, &loRaWanHandle);
     912:	0f 2e       	mov	r0, r31
     914:	fa ed       	ldi	r31, 0xDA	; 218
     916:	ef 2e       	mov	r14, r31
     918:	f7 e0       	ldi	r31, 0x07	; 7
     91a:	ff 2e       	mov	r15, r31
     91c:	f0 2d       	mov	r31, r0
     91e:	03 e0       	ldi	r16, 0x03	; 3
     920:	20 e0       	ldi	r18, 0x00	; 0
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	40 ec       	ldi	r20, 0xC0	; 192
     926:	50 e0       	ldi	r21, 0x00	; 0
     928:	64 e7       	ldi	r22, 0x74	; 116
     92a:	74 e0       	ldi	r23, 0x04	; 4
     92c:	89 ee       	ldi	r24, 0xE9	; 233
     92e:	93 e0       	ldi	r25, 0x03	; 3
     930:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <xTaskCreate>
	xTaskCreate(servoMotorTask, "Servo Motor", configMINIMAL_STACK_SIZE, NULL, SERVO_TASK_PRIORITY,&ServoMotorHandle);
     934:	0f 2e       	mov	r0, r31
     936:	fc ed       	ldi	r31, 0xDC	; 220
     938:	ef 2e       	mov	r14, r31
     93a:	f7 e0       	ldi	r31, 0x07	; 7
     93c:	ff 2e       	mov	r15, r31
     93e:	f0 2d       	mov	r31, r0
     940:	01 e0       	ldi	r16, 0x01	; 1
     942:	20 e0       	ldi	r18, 0x00	; 0
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	40 ec       	ldi	r20, 0xC0	; 192
     948:	50 e0       	ldi	r21, 0x00	; 0
     94a:	68 e7       	ldi	r22, 0x78	; 120
     94c:	74 e0       	ldi	r23, 0x04	; 4
     94e:	88 e3       	ldi	r24, 0x38	; 56
     950:	93 e0       	ldi	r25, 0x03	; 3
     952:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <xTaskCreate>
	//
	stdioCreate(0);
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <stdioCreate>
	sei();
     95c:	78 94       	sei
	//setup temperature/humidity sensor
	if(HIH8120_OK != hih8120Create()) {
     95e:	0e 94 ed 19 	call	0x33da	; 0x33da <hih8120Create>
     962:	81 11       	cpse	r24, r1
     964:	2c c0       	rjmp	.+88     	; 0x9be <main+0x134>
		printf("Failed to initialize temperature sensor\n");
		return 1;
	}
	//setup servoMotor
	rcServoCreate();
     966:	0e 94 7f 20 	call	0x40fe	; 0x40fe <rcServoCreate>

	//setup co2 sensor
	mh_z19_create(ser_USART3, co2Callback);
     96a:	6a e9       	ldi	r22, 0x9A	; 154
     96c:	72 e0       	ldi	r23, 0x02	; 2
     96e:	83 e0       	ldi	r24, 0x03	; 3
     970:	0e 94 08 20 	call	0x4010	; 0x4010 <mh_z19_create>

	//setup light sensor
	int r = tsl2591Create(lightCallback);
     974:	8e ee       	ldi	r24, 0xEE	; 238
     976:	92 e0       	ldi	r25, 0x02	; 2
     978:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <tsl2591Create>
	if(r != TSL2591_OK) {
     97c:	88 23       	and	r24, r24
     97e:	61 f0       	breq	.+24     	; 0x998 <main+0x10e>
		printf("Failed to initialize light sensor: %d\n", r);
     980:	1f 92       	push	r1
     982:	8f 93       	push	r24
     984:	8c ea       	ldi	r24, 0xAC	; 172
     986:	94 e0       	ldi	r25, 0x04	; 4
     988:	9f 93       	push	r25
     98a:	8f 93       	push	r24
     98c:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <printf>
     990:	0f 90       	pop	r0
     992:	0f 90       	pop	r0
     994:	0f 90       	pop	r0
     996:	0f 90       	pop	r0
	}

	r = tsl2591Enable();
     998:	0e 94 15 21 	call	0x422a	; 0x422a <tsl2591Enable>
	if(r != TSL2591_OK) {
     99c:	88 23       	and	r24, r24
     99e:	61 f0       	breq	.+24     	; 0x9b8 <main+0x12e>
		printf("Failed to enable light sensor %d\n", r);
     9a0:	1f 92       	push	r1
     9a2:	8f 93       	push	r24
     9a4:	83 ed       	ldi	r24, 0xD3	; 211
     9a6:	94 e0       	ldi	r25, 0x04	; 4
     9a8:	9f 93       	push	r25
     9aa:	8f 93       	push	r24
     9ac:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <printf>
     9b0:	0f 90       	pop	r0
     9b2:	0f 90       	pop	r0
     9b4:	0f 90       	pop	r0
     9b6:	0f 90       	pop	r0
	}
	
	vTaskStartScheduler();
     9b8:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <vTaskStartScheduler>
     9bc:	ff cf       	rjmp	.-2      	; 0x9bc <main+0x132>
	//
	stdioCreate(0);
	sei();
	//setup temperature/humidity sensor
	if(HIH8120_OK != hih8120Create()) {
		printf("Failed to initialize temperature sensor\n");
     9be:	84 e8       	ldi	r24, 0x84	; 132
     9c0:	94 e0       	ldi	r25, 0x04	; 4
     9c2:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <puts>
	vTaskStartScheduler();
	
	while(1) {
		;
	}
}
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	0f 91       	pop	r16
     9cc:	ff 90       	pop	r15
     9ce:	ef 90       	pop	r14
     9d0:	08 95       	ret

000009d2 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     9d2:	e8 e0       	ldi	r30, 0x08	; 8
     9d4:	f1 e0       	ldi	r31, 0x01	; 1
     9d6:	90 81       	ld	r25, Z
     9d8:	90 7f       	andi	r25, 0xF0	; 240
     9da:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     9dc:	90 81       	ld	r25, Z
     9de:	8f 70       	andi	r24, 0x0F	; 15
     9e0:	98 2b       	or	r25, r24
     9e2:	90 83       	st	Z, r25
     9e4:	08 95       	ret

000009e6 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     9e6:	e8 e0       	ldi	r30, 0x08	; 8
     9e8:	f1 e0       	ldi	r31, 0x01	; 1
     9ea:	80 81       	ld	r24, Z
     9ec:	80 7f       	andi	r24, 0xF0	; 240
     9ee:	80 83       	st	Z, r24
     9f0:	08 95       	ret

000009f2 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     9f2:	cf 93       	push	r28
     9f4:	df 93       	push	r29
     9f6:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
     9f8:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     9fc:	ce 01       	movw	r24, r28
     9fe:	0e 94 bc 25 	call	0x4b78	; 0x4b78 <malloc>
     a02:	ec 01       	movw	r28, r24
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     a04:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
     a08:	20 97       	sbiw	r28, 0x00	; 0
     a0a:	11 f4       	brne	.+4      	; 0xa10 <pvPortMalloc+0x1e>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
     a0c:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
     a10:	ce 01       	movw	r24, r28
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	08 95       	ret

00000a18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
    if( pv )
     a1c:	00 97       	sbiw	r24, 0x00	; 0
     a1e:	41 f0       	breq	.+16     	; 0xa30 <vPortFree+0x18>
     a20:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
     a22:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <vTaskSuspendAll>
        {
            free( pv );
     a26:	ce 01       	movw	r24, r28
     a28:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
     a2c:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <xTaskResumeAll>
    }
}
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	08 95       	ret

00000a36 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     a36:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a38:	03 96       	adiw	r24, 0x03	; 3
     a3a:	92 83       	std	Z+2, r25	; 0x02
     a3c:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     a3e:	2f ef       	ldi	r18, 0xFF	; 255
     a40:	3f ef       	ldi	r19, 0xFF	; 255
     a42:	34 83       	std	Z+4, r19	; 0x04
     a44:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a46:	96 83       	std	Z+6, r25	; 0x06
     a48:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a4a:	90 87       	std	Z+8, r25	; 0x08
     a4c:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     a4e:	10 82       	st	Z, r1
     a50:	08 95       	ret

00000a52 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     a52:	fc 01       	movw	r30, r24
     a54:	11 86       	std	Z+9, r1	; 0x09
     a56:	10 86       	std	Z+8, r1	; 0x08
     a58:	08 95       	ret

00000a5a <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29
     a5e:	9c 01       	movw	r18, r24
     a60:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     a62:	dc 01       	movw	r26, r24
     a64:	11 96       	adiw	r26, 0x01	; 1
     a66:	cd 91       	ld	r28, X+
     a68:	dc 91       	ld	r29, X
     a6a:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     a6c:	d3 83       	std	Z+3, r29	; 0x03
     a6e:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     a70:	8c 81       	ldd	r24, Y+4	; 0x04
     a72:	9d 81       	ldd	r25, Y+5	; 0x05
     a74:	95 83       	std	Z+5, r25	; 0x05
     a76:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     a78:	8c 81       	ldd	r24, Y+4	; 0x04
     a7a:	9d 81       	ldd	r25, Y+5	; 0x05
     a7c:	dc 01       	movw	r26, r24
     a7e:	13 96       	adiw	r26, 0x03	; 3
     a80:	7c 93       	st	X, r23
     a82:	6e 93       	st	-X, r22
     a84:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     a86:	7d 83       	std	Y+5, r23	; 0x05
     a88:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     a8a:	31 87       	std	Z+9, r19	; 0x09
     a8c:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     a8e:	f9 01       	movw	r30, r18
     a90:	80 81       	ld	r24, Z
     a92:	8f 5f       	subi	r24, 0xFF	; 255
     a94:	80 83       	st	Z, r24
}
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	08 95       	ret

00000a9c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     aa2:	48 81       	ld	r20, Y
     aa4:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     aa6:	4f 3f       	cpi	r20, 0xFF	; 255
     aa8:	2f ef       	ldi	r18, 0xFF	; 255
     aaa:	52 07       	cpc	r21, r18
     aac:	21 f4       	brne	.+8      	; 0xab6 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     aae:	fc 01       	movw	r30, r24
     ab0:	a7 81       	ldd	r26, Z+7	; 0x07
     ab2:	b0 85       	ldd	r27, Z+8	; 0x08
     ab4:	0d c0       	rjmp	.+26     	; 0xad0 <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     ab6:	dc 01       	movw	r26, r24
     ab8:	13 96       	adiw	r26, 0x03	; 3
     aba:	01 c0       	rjmp	.+2      	; 0xabe <vListInsert+0x22>
     abc:	df 01       	movw	r26, r30
     abe:	12 96       	adiw	r26, 0x02	; 2
     ac0:	ed 91       	ld	r30, X+
     ac2:	fc 91       	ld	r31, X
     ac4:	13 97       	sbiw	r26, 0x03	; 3
     ac6:	20 81       	ld	r18, Z
     ac8:	31 81       	ldd	r19, Z+1	; 0x01
     aca:	42 17       	cp	r20, r18
     acc:	53 07       	cpc	r21, r19
     ace:	b0 f7       	brcc	.-20     	; 0xabc <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     ad0:	12 96       	adiw	r26, 0x02	; 2
     ad2:	ed 91       	ld	r30, X+
     ad4:	fc 91       	ld	r31, X
     ad6:	13 97       	sbiw	r26, 0x03	; 3
     ad8:	fb 83       	std	Y+3, r31	; 0x03
     ada:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     adc:	d5 83       	std	Z+5, r29	; 0x05
     ade:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     ae0:	bd 83       	std	Y+5, r27	; 0x05
     ae2:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     ae4:	13 96       	adiw	r26, 0x03	; 3
     ae6:	dc 93       	st	X, r29
     ae8:	ce 93       	st	-X, r28
     aea:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     aec:	99 87       	std	Y+9, r25	; 0x09
     aee:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     af0:	fc 01       	movw	r30, r24
     af2:	20 81       	ld	r18, Z
     af4:	2f 5f       	subi	r18, 0xFF	; 255
     af6:	20 83       	st	Z, r18
}
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	08 95       	ret

00000afe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     b04:	a0 85       	ldd	r26, Z+8	; 0x08
     b06:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     b08:	c2 81       	ldd	r28, Z+2	; 0x02
     b0a:	d3 81       	ldd	r29, Z+3	; 0x03
     b0c:	84 81       	ldd	r24, Z+4	; 0x04
     b0e:	95 81       	ldd	r25, Z+5	; 0x05
     b10:	9d 83       	std	Y+5, r25	; 0x05
     b12:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     b14:	c4 81       	ldd	r28, Z+4	; 0x04
     b16:	d5 81       	ldd	r29, Z+5	; 0x05
     b18:	82 81       	ldd	r24, Z+2	; 0x02
     b1a:	93 81       	ldd	r25, Z+3	; 0x03
     b1c:	9b 83       	std	Y+3, r25	; 0x03
     b1e:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     b20:	11 96       	adiw	r26, 0x01	; 1
     b22:	8d 91       	ld	r24, X+
     b24:	9c 91       	ld	r25, X
     b26:	12 97       	sbiw	r26, 0x02	; 2
     b28:	e8 17       	cp	r30, r24
     b2a:	f9 07       	cpc	r31, r25
     b2c:	31 f4       	brne	.+12     	; 0xb3a <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     b2e:	84 81       	ldd	r24, Z+4	; 0x04
     b30:	95 81       	ldd	r25, Z+5	; 0x05
     b32:	12 96       	adiw	r26, 0x02	; 2
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     b3a:	11 86       	std	Z+9, r1	; 0x09
     b3c:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     b3e:	8c 91       	ld	r24, X
     b40:	81 50       	subi	r24, 0x01	; 1
     b42:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     b44:	8c 91       	ld	r24, X
}
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	08 95       	ret

00000b4c <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     b4c:	31 e1       	ldi	r19, 0x11	; 17
     b4e:	fc 01       	movw	r30, r24
     b50:	30 83       	st	Z, r19
     b52:	31 97       	sbiw	r30, 0x01	; 1
     b54:	22 e2       	ldi	r18, 0x22	; 34
     b56:	20 83       	st	Z, r18
     b58:	31 97       	sbiw	r30, 0x01	; 1
     b5a:	a3 e3       	ldi	r26, 0x33	; 51
     b5c:	a0 83       	st	Z, r26
     b5e:	31 97       	sbiw	r30, 0x01	; 1
     b60:	60 83       	st	Z, r22
     b62:	31 97       	sbiw	r30, 0x01	; 1
     b64:	70 83       	st	Z, r23
     b66:	31 97       	sbiw	r30, 0x01	; 1
     b68:	10 82       	st	Z, r1
     b6a:	31 97       	sbiw	r30, 0x01	; 1
     b6c:	10 82       	st	Z, r1
     b6e:	31 97       	sbiw	r30, 0x01	; 1
     b70:	60 e8       	ldi	r22, 0x80	; 128
     b72:	60 83       	st	Z, r22
     b74:	31 97       	sbiw	r30, 0x01	; 1
     b76:	10 82       	st	Z, r1
     b78:	31 97       	sbiw	r30, 0x01	; 1
     b7a:	10 82       	st	Z, r1
     b7c:	31 97       	sbiw	r30, 0x01	; 1
     b7e:	10 82       	st	Z, r1
     b80:	31 97       	sbiw	r30, 0x01	; 1
     b82:	62 e0       	ldi	r22, 0x02	; 2
     b84:	60 83       	st	Z, r22
     b86:	31 97       	sbiw	r30, 0x01	; 1
     b88:	63 e0       	ldi	r22, 0x03	; 3
     b8a:	60 83       	st	Z, r22
     b8c:	31 97       	sbiw	r30, 0x01	; 1
     b8e:	64 e0       	ldi	r22, 0x04	; 4
     b90:	60 83       	st	Z, r22
     b92:	31 97       	sbiw	r30, 0x01	; 1
     b94:	65 e0       	ldi	r22, 0x05	; 5
     b96:	60 83       	st	Z, r22
     b98:	31 97       	sbiw	r30, 0x01	; 1
     b9a:	66 e0       	ldi	r22, 0x06	; 6
     b9c:	60 83       	st	Z, r22
     b9e:	31 97       	sbiw	r30, 0x01	; 1
     ba0:	67 e0       	ldi	r22, 0x07	; 7
     ba2:	60 83       	st	Z, r22
     ba4:	31 97       	sbiw	r30, 0x01	; 1
     ba6:	68 e0       	ldi	r22, 0x08	; 8
     ba8:	60 83       	st	Z, r22
     baa:	31 97       	sbiw	r30, 0x01	; 1
     bac:	69 e0       	ldi	r22, 0x09	; 9
     bae:	60 83       	st	Z, r22
     bb0:	31 97       	sbiw	r30, 0x01	; 1
     bb2:	60 e1       	ldi	r22, 0x10	; 16
     bb4:	60 83       	st	Z, r22
     bb6:	31 97       	sbiw	r30, 0x01	; 1
     bb8:	30 83       	st	Z, r19
     bba:	31 97       	sbiw	r30, 0x01	; 1
     bbc:	32 e1       	ldi	r19, 0x12	; 18
     bbe:	30 83       	st	Z, r19
     bc0:	31 97       	sbiw	r30, 0x01	; 1
     bc2:	33 e1       	ldi	r19, 0x13	; 19
     bc4:	30 83       	st	Z, r19
     bc6:	31 97       	sbiw	r30, 0x01	; 1
     bc8:	34 e1       	ldi	r19, 0x14	; 20
     bca:	30 83       	st	Z, r19
     bcc:	31 97       	sbiw	r30, 0x01	; 1
     bce:	35 e1       	ldi	r19, 0x15	; 21
     bd0:	30 83       	st	Z, r19
     bd2:	31 97       	sbiw	r30, 0x01	; 1
     bd4:	36 e1       	ldi	r19, 0x16	; 22
     bd6:	30 83       	st	Z, r19
     bd8:	31 97       	sbiw	r30, 0x01	; 1
     bda:	37 e1       	ldi	r19, 0x17	; 23
     bdc:	30 83       	st	Z, r19
     bde:	31 97       	sbiw	r30, 0x01	; 1
     be0:	38 e1       	ldi	r19, 0x18	; 24
     be2:	30 83       	st	Z, r19
     be4:	31 97       	sbiw	r30, 0x01	; 1
     be6:	39 e1       	ldi	r19, 0x19	; 25
     be8:	30 83       	st	Z, r19
     bea:	31 97       	sbiw	r30, 0x01	; 1
     bec:	30 e2       	ldi	r19, 0x20	; 32
     bee:	30 83       	st	Z, r19
     bf0:	31 97       	sbiw	r30, 0x01	; 1
     bf2:	31 e2       	ldi	r19, 0x21	; 33
     bf4:	30 83       	st	Z, r19
     bf6:	31 97       	sbiw	r30, 0x01	; 1
     bf8:	20 83       	st	Z, r18
     bfa:	31 97       	sbiw	r30, 0x01	; 1
     bfc:	23 e2       	ldi	r18, 0x23	; 35
     bfe:	20 83       	st	Z, r18
     c00:	31 97       	sbiw	r30, 0x01	; 1
     c02:	40 83       	st	Z, r20
     c04:	31 97       	sbiw	r30, 0x01	; 1
     c06:	50 83       	st	Z, r21
     c08:	31 97       	sbiw	r30, 0x01	; 1
     c0a:	26 e2       	ldi	r18, 0x26	; 38
     c0c:	20 83       	st	Z, r18
     c0e:	31 97       	sbiw	r30, 0x01	; 1
     c10:	27 e2       	ldi	r18, 0x27	; 39
     c12:	20 83       	st	Z, r18
     c14:	31 97       	sbiw	r30, 0x01	; 1
     c16:	28 e2       	ldi	r18, 0x28	; 40
     c18:	20 83       	st	Z, r18
     c1a:	31 97       	sbiw	r30, 0x01	; 1
     c1c:	29 e2       	ldi	r18, 0x29	; 41
     c1e:	20 83       	st	Z, r18
     c20:	31 97       	sbiw	r30, 0x01	; 1
     c22:	20 e3       	ldi	r18, 0x30	; 48
     c24:	20 83       	st	Z, r18
     c26:	31 97       	sbiw	r30, 0x01	; 1
     c28:	21 e3       	ldi	r18, 0x31	; 49
     c2a:	20 83       	st	Z, r18
     c2c:	89 97       	sbiw	r24, 0x29	; 41
     c2e:	08 95       	ret

00000c30 <xPortStartScheduler>:
     c30:	a8 95       	wdr
     c32:	90 ec       	ldi	r25, 0xC0	; 192
     c34:	88 e1       	ldi	r24, 0x18	; 24
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	f8 94       	cli
     c3a:	a8 95       	wdr
     c3c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     c40:	0f be       	out	0x3f, r0	; 63
     c42:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     c46:	a0 91 48 08 	lds	r26, 0x0848	; 0x800848 <pxCurrentTCB>
     c4a:	b0 91 49 08 	lds	r27, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
     c4e:	cd 91       	ld	r28, X+
     c50:	cd bf       	out	0x3d, r28	; 61
     c52:	dd 91       	ld	r29, X+
     c54:	de bf       	out	0x3e, r29	; 62
     c56:	ff 91       	pop	r31
     c58:	ef 91       	pop	r30
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	bf 91       	pop	r27
     c60:	af 91       	pop	r26
     c62:	9f 91       	pop	r25
     c64:	8f 91       	pop	r24
     c66:	7f 91       	pop	r23
     c68:	6f 91       	pop	r22
     c6a:	5f 91       	pop	r21
     c6c:	4f 91       	pop	r20
     c6e:	3f 91       	pop	r19
     c70:	2f 91       	pop	r18
     c72:	1f 91       	pop	r17
     c74:	0f 91       	pop	r16
     c76:	ff 90       	pop	r15
     c78:	ef 90       	pop	r14
     c7a:	df 90       	pop	r13
     c7c:	cf 90       	pop	r12
     c7e:	bf 90       	pop	r11
     c80:	af 90       	pop	r10
     c82:	9f 90       	pop	r9
     c84:	8f 90       	pop	r8
     c86:	7f 90       	pop	r7
     c88:	6f 90       	pop	r6
     c8a:	5f 90       	pop	r5
     c8c:	4f 90       	pop	r4
     c8e:	3f 90       	pop	r3
     c90:	2f 90       	pop	r2
     c92:	1f 90       	pop	r1
     c94:	0f 90       	pop	r0
     c96:	0c be       	out	0x3c, r0	; 60
     c98:	0f 90       	pop	r0
     c9a:	0b be       	out	0x3b, r0	; 59
     c9c:	0f 90       	pop	r0
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	0f 90       	pop	r0
     ca2:	08 95       	ret
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	08 95       	ret

00000ca8 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     ca8:	0f 92       	push	r0
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	0f 92       	push	r0
     cb0:	0b b6       	in	r0, 0x3b	; 59
     cb2:	0f 92       	push	r0
     cb4:	0c b6       	in	r0, 0x3c	; 60
     cb6:	0f 92       	push	r0
     cb8:	1f 92       	push	r1
     cba:	11 24       	eor	r1, r1
     cbc:	2f 92       	push	r2
     cbe:	3f 92       	push	r3
     cc0:	4f 92       	push	r4
     cc2:	5f 92       	push	r5
     cc4:	6f 92       	push	r6
     cc6:	7f 92       	push	r7
     cc8:	8f 92       	push	r8
     cca:	9f 92       	push	r9
     ccc:	af 92       	push	r10
     cce:	bf 92       	push	r11
     cd0:	cf 92       	push	r12
     cd2:	df 92       	push	r13
     cd4:	ef 92       	push	r14
     cd6:	ff 92       	push	r15
     cd8:	0f 93       	push	r16
     cda:	1f 93       	push	r17
     cdc:	2f 93       	push	r18
     cde:	3f 93       	push	r19
     ce0:	4f 93       	push	r20
     ce2:	5f 93       	push	r21
     ce4:	6f 93       	push	r22
     ce6:	7f 93       	push	r23
     ce8:	8f 93       	push	r24
     cea:	9f 93       	push	r25
     cec:	af 93       	push	r26
     cee:	bf 93       	push	r27
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
     cf4:	ef 93       	push	r30
     cf6:	ff 93       	push	r31
     cf8:	a0 91 48 08 	lds	r26, 0x0848	; 0x800848 <pxCurrentTCB>
     cfc:	b0 91 49 08 	lds	r27, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
     d00:	0d b6       	in	r0, 0x3d	; 61
     d02:	0d 92       	st	X+, r0
     d04:	0e b6       	in	r0, 0x3e	; 62
     d06:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     d08:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     d0c:	a0 91 48 08 	lds	r26, 0x0848	; 0x800848 <pxCurrentTCB>
     d10:	b0 91 49 08 	lds	r27, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
     d14:	cd 91       	ld	r28, X+
     d16:	cd bf       	out	0x3d, r28	; 61
     d18:	dd 91       	ld	r29, X+
     d1a:	de bf       	out	0x3e, r29	; 62
     d1c:	ff 91       	pop	r31
     d1e:	ef 91       	pop	r30
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	bf 91       	pop	r27
     d26:	af 91       	pop	r26
     d28:	9f 91       	pop	r25
     d2a:	8f 91       	pop	r24
     d2c:	7f 91       	pop	r23
     d2e:	6f 91       	pop	r22
     d30:	5f 91       	pop	r21
     d32:	4f 91       	pop	r20
     d34:	3f 91       	pop	r19
     d36:	2f 91       	pop	r18
     d38:	1f 91       	pop	r17
     d3a:	0f 91       	pop	r16
     d3c:	ff 90       	pop	r15
     d3e:	ef 90       	pop	r14
     d40:	df 90       	pop	r13
     d42:	cf 90       	pop	r12
     d44:	bf 90       	pop	r11
     d46:	af 90       	pop	r10
     d48:	9f 90       	pop	r9
     d4a:	8f 90       	pop	r8
     d4c:	7f 90       	pop	r7
     d4e:	6f 90       	pop	r6
     d50:	5f 90       	pop	r5
     d52:	4f 90       	pop	r4
     d54:	3f 90       	pop	r3
     d56:	2f 90       	pop	r2
     d58:	1f 90       	pop	r1
     d5a:	0f 90       	pop	r0
     d5c:	0c be       	out	0x3c, r0	; 60
     d5e:	0f 90       	pop	r0
     d60:	0b be       	out	0x3b, r0	; 59
     d62:	0f 90       	pop	r0
     d64:	0f be       	out	0x3f, r0	; 63
     d66:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     d68:	08 95       	ret

00000d6a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     d6a:	0f 92       	push	r0
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	f8 94       	cli
     d70:	0f 92       	push	r0
     d72:	0b b6       	in	r0, 0x3b	; 59
     d74:	0f 92       	push	r0
     d76:	0c b6       	in	r0, 0x3c	; 60
     d78:	0f 92       	push	r0
     d7a:	1f 92       	push	r1
     d7c:	11 24       	eor	r1, r1
     d7e:	2f 92       	push	r2
     d80:	3f 92       	push	r3
     d82:	4f 92       	push	r4
     d84:	5f 92       	push	r5
     d86:	6f 92       	push	r6
     d88:	7f 92       	push	r7
     d8a:	8f 92       	push	r8
     d8c:	9f 92       	push	r9
     d8e:	af 92       	push	r10
     d90:	bf 92       	push	r11
     d92:	cf 92       	push	r12
     d94:	df 92       	push	r13
     d96:	ef 92       	push	r14
     d98:	ff 92       	push	r15
     d9a:	0f 93       	push	r16
     d9c:	1f 93       	push	r17
     d9e:	2f 93       	push	r18
     da0:	3f 93       	push	r19
     da2:	4f 93       	push	r20
     da4:	5f 93       	push	r21
     da6:	6f 93       	push	r22
     da8:	7f 93       	push	r23
     daa:	8f 93       	push	r24
     dac:	9f 93       	push	r25
     dae:	af 93       	push	r26
     db0:	bf 93       	push	r27
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	ef 93       	push	r30
     db8:	ff 93       	push	r31
     dba:	a0 91 48 08 	lds	r26, 0x0848	; 0x800848 <pxCurrentTCB>
     dbe:	b0 91 49 08 	lds	r27, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
     dc2:	0d b6       	in	r0, 0x3d	; 61
     dc4:	0d 92       	st	X+, r0
     dc6:	0e b6       	in	r0, 0x3e	; 62
     dc8:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     dca:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     dcc:	c0 d7       	rcall	.+3968   	; 0x1d4e <xTaskIncrementTick>
     dce:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     dd0:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
     dd4:	a0 91 48 08 	lds	r26, 0x0848	; 0x800848 <pxCurrentTCB>
     dd8:	b0 91 49 08 	lds	r27, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
     ddc:	cd 91       	ld	r28, X+
     dde:	cd bf       	out	0x3d, r28	; 61
     de0:	dd 91       	ld	r29, X+
     de2:	de bf       	out	0x3e, r29	; 62
     de4:	ff 91       	pop	r31
     de6:	ef 91       	pop	r30
     de8:	df 91       	pop	r29
     dea:	cf 91       	pop	r28
     dec:	bf 91       	pop	r27
     dee:	af 91       	pop	r26
     df0:	9f 91       	pop	r25
     df2:	8f 91       	pop	r24
     df4:	7f 91       	pop	r23
     df6:	6f 91       	pop	r22
     df8:	5f 91       	pop	r21
     dfa:	4f 91       	pop	r20
     dfc:	3f 91       	pop	r19
     dfe:	2f 91       	pop	r18
     e00:	1f 91       	pop	r17
     e02:	0f 91       	pop	r16
     e04:	ff 90       	pop	r15
     e06:	ef 90       	pop	r14
     e08:	df 90       	pop	r13
     e0a:	cf 90       	pop	r12
     e0c:	bf 90       	pop	r11
     e0e:	af 90       	pop	r10
     e10:	9f 90       	pop	r9
     e12:	8f 90       	pop	r8
     e14:	7f 90       	pop	r7
     e16:	6f 90       	pop	r6
     e18:	5f 90       	pop	r5
     e1a:	4f 90       	pop	r4
     e1c:	3f 90       	pop	r3
     e1e:	2f 90       	pop	r2
     e20:	1f 90       	pop	r1
     e22:	0f 90       	pop	r0
     e24:	0c be       	out	0x3c, r0	; 60
     e26:	0f 90       	pop	r0
     e28:	0b be       	out	0x3b, r0	; 59
     e2a:	0f 90       	pop	r0
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     e30:	08 95       	ret

00000e32 <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     e32:	9b df       	rcall	.-202    	; 0xd6a <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     e34:	18 95       	reti

00000e36 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	f8 94       	cli
     e3a:	0f 92       	push	r0
     e3c:	fc 01       	movw	r30, r24
     e3e:	92 8d       	ldd	r25, Z+26	; 0x1a
     e40:	0f 90       	pop	r0
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	91 11       	cpse	r25, r1
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	08 95       	ret

00000e4c <prvCopyDataToQueue>:
     e4c:	0f 93       	push	r16
     e4e:	1f 93       	push	r17
     e50:	cf 93       	push	r28
     e52:	df 93       	push	r29
     e54:	ec 01       	movw	r28, r24
     e56:	04 2f       	mov	r16, r20
     e58:	1a 8d       	ldd	r17, Y+26	; 0x1a
     e5a:	4c 8d       	ldd	r20, Y+28	; 0x1c
     e5c:	41 11       	cpse	r20, r1
     e5e:	0c c0       	rjmp	.+24     	; 0xe78 <prvCopyDataToQueue+0x2c>
     e60:	88 81       	ld	r24, Y
     e62:	99 81       	ldd	r25, Y+1	; 0x01
     e64:	89 2b       	or	r24, r25
     e66:	09 f0       	breq	.+2      	; 0xe6a <prvCopyDataToQueue+0x1e>
     e68:	42 c0       	rjmp	.+132    	; 0xeee <prvCopyDataToQueue+0xa2>
     e6a:	8c 81       	ldd	r24, Y+4	; 0x04
     e6c:	9d 81       	ldd	r25, Y+5	; 0x05
     e6e:	0e 94 b7 11 	call	0x236e	; 0x236e <xTaskPriorityDisinherit>
     e72:	1d 82       	std	Y+5, r1	; 0x05
     e74:	1c 82       	std	Y+4, r1	; 0x04
     e76:	42 c0       	rjmp	.+132    	; 0xefc <prvCopyDataToQueue+0xb0>
     e78:	01 11       	cpse	r16, r1
     e7a:	17 c0       	rjmp	.+46     	; 0xeaa <prvCopyDataToQueue+0x5e>
     e7c:	50 e0       	ldi	r21, 0x00	; 0
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	9b 81       	ldd	r25, Y+3	; 0x03
     e82:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <memcpy>
     e86:	2c 8d       	ldd	r18, Y+28	; 0x1c
     e88:	8a 81       	ldd	r24, Y+2	; 0x02
     e8a:	9b 81       	ldd	r25, Y+3	; 0x03
     e8c:	82 0f       	add	r24, r18
     e8e:	91 1d       	adc	r25, r1
     e90:	9b 83       	std	Y+3, r25	; 0x03
     e92:	8a 83       	std	Y+2, r24	; 0x02
     e94:	2c 81       	ldd	r18, Y+4	; 0x04
     e96:	3d 81       	ldd	r19, Y+5	; 0x05
     e98:	82 17       	cp	r24, r18
     e9a:	93 07       	cpc	r25, r19
     e9c:	50 f1       	brcs	.+84     	; 0xef2 <prvCopyDataToQueue+0xa6>
     e9e:	88 81       	ld	r24, Y
     ea0:	99 81       	ldd	r25, Y+1	; 0x01
     ea2:	9b 83       	std	Y+3, r25	; 0x03
     ea4:	8a 83       	std	Y+2, r24	; 0x02
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	29 c0       	rjmp	.+82     	; 0xefc <prvCopyDataToQueue+0xb0>
     eaa:	50 e0       	ldi	r21, 0x00	; 0
     eac:	8e 81       	ldd	r24, Y+6	; 0x06
     eae:	9f 81       	ldd	r25, Y+7	; 0x07
     eb0:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <memcpy>
     eb4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	91 95       	neg	r25
     eba:	81 95       	neg	r24
     ebc:	91 09       	sbc	r25, r1
     ebe:	2e 81       	ldd	r18, Y+6	; 0x06
     ec0:	3f 81       	ldd	r19, Y+7	; 0x07
     ec2:	28 0f       	add	r18, r24
     ec4:	39 1f       	adc	r19, r25
     ec6:	3f 83       	std	Y+7, r19	; 0x07
     ec8:	2e 83       	std	Y+6, r18	; 0x06
     eca:	48 81       	ld	r20, Y
     ecc:	59 81       	ldd	r21, Y+1	; 0x01
     ece:	24 17       	cp	r18, r20
     ed0:	35 07       	cpc	r19, r21
     ed2:	30 f4       	brcc	.+12     	; 0xee0 <prvCopyDataToQueue+0x94>
     ed4:	2c 81       	ldd	r18, Y+4	; 0x04
     ed6:	3d 81       	ldd	r19, Y+5	; 0x05
     ed8:	82 0f       	add	r24, r18
     eda:	93 1f       	adc	r25, r19
     edc:	9f 83       	std	Y+7, r25	; 0x07
     ede:	8e 83       	std	Y+6, r24	; 0x06
     ee0:	02 30       	cpi	r16, 0x02	; 2
     ee2:	49 f4       	brne	.+18     	; 0xef6 <prvCopyDataToQueue+0xaa>
     ee4:	11 23       	and	r17, r17
     ee6:	49 f0       	breq	.+18     	; 0xefa <prvCopyDataToQueue+0xae>
     ee8:	11 50       	subi	r17, 0x01	; 1
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	07 c0       	rjmp	.+14     	; 0xefc <prvCopyDataToQueue+0xb0>
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	05 c0       	rjmp	.+10     	; 0xefc <prvCopyDataToQueue+0xb0>
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	03 c0       	rjmp	.+6      	; 0xefc <prvCopyDataToQueue+0xb0>
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	01 c0       	rjmp	.+2      	; 0xefc <prvCopyDataToQueue+0xb0>
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	1f 5f       	subi	r17, 0xFF	; 255
     efe:	1a 8f       	std	Y+26, r17	; 0x1a
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	08 95       	ret

00000f0a <prvCopyDataFromQueue>:
     f0a:	fc 01       	movw	r30, r24
     f0c:	44 8d       	ldd	r20, Z+28	; 0x1c
     f0e:	44 23       	and	r20, r20
     f10:	a9 f0       	breq	.+42     	; 0xf3c <prvCopyDataFromQueue+0x32>
     f12:	50 e0       	ldi	r21, 0x00	; 0
     f14:	26 81       	ldd	r18, Z+6	; 0x06
     f16:	37 81       	ldd	r19, Z+7	; 0x07
     f18:	24 0f       	add	r18, r20
     f1a:	35 1f       	adc	r19, r21
     f1c:	37 83       	std	Z+7, r19	; 0x07
     f1e:	26 83       	std	Z+6, r18	; 0x06
     f20:	84 81       	ldd	r24, Z+4	; 0x04
     f22:	95 81       	ldd	r25, Z+5	; 0x05
     f24:	28 17       	cp	r18, r24
     f26:	39 07       	cpc	r19, r25
     f28:	20 f0       	brcs	.+8      	; 0xf32 <prvCopyDataFromQueue+0x28>
     f2a:	80 81       	ld	r24, Z
     f2c:	91 81       	ldd	r25, Z+1	; 0x01
     f2e:	97 83       	std	Z+7, r25	; 0x07
     f30:	86 83       	std	Z+6, r24	; 0x06
     f32:	cb 01       	movw	r24, r22
     f34:	66 81       	ldd	r22, Z+6	; 0x06
     f36:	77 81       	ldd	r23, Z+7	; 0x07
     f38:	0c 94 e1 26 	jmp	0x4dc2	; 0x4dc2 <memcpy>
     f3c:	08 95       	ret

00000f3e <prvUnlockQueue>:
     f3e:	ef 92       	push	r14
     f40:	ff 92       	push	r15
     f42:	0f 93       	push	r16
     f44:	1f 93       	push	r17
     f46:	cf 93       	push	r28
     f48:	8c 01       	movw	r16, r24
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	f8 94       	cli
     f4e:	0f 92       	push	r0
     f50:	fc 01       	movw	r30, r24
     f52:	c6 8d       	ldd	r28, Z+30	; 0x1e
     f54:	1c 16       	cp	r1, r28
     f56:	ac f4       	brge	.+42     	; 0xf82 <prvUnlockQueue+0x44>
     f58:	81 89       	ldd	r24, Z+17	; 0x11
     f5a:	81 11       	cpse	r24, r1
     f5c:	06 c0       	rjmp	.+12     	; 0xf6a <prvUnlockQueue+0x2c>
     f5e:	11 c0       	rjmp	.+34     	; 0xf82 <prvUnlockQueue+0x44>
     f60:	f8 01       	movw	r30, r16
     f62:	81 89       	ldd	r24, Z+17	; 0x11
     f64:	81 11       	cpse	r24, r1
     f66:	05 c0       	rjmp	.+10     	; 0xf72 <prvUnlockQueue+0x34>
     f68:	0c c0       	rjmp	.+24     	; 0xf82 <prvUnlockQueue+0x44>
     f6a:	78 01       	movw	r14, r16
     f6c:	f1 e1       	ldi	r31, 0x11	; 17
     f6e:	ef 0e       	add	r14, r31
     f70:	f1 1c       	adc	r15, r1
     f72:	c7 01       	movw	r24, r14
     f74:	0e 94 a6 10 	call	0x214c	; 0x214c <xTaskRemoveFromEventList>
     f78:	81 11       	cpse	r24, r1
     f7a:	0e 94 2e 11 	call	0x225c	; 0x225c <vTaskMissedYield>
     f7e:	c1 50       	subi	r28, 0x01	; 1
     f80:	79 f7       	brne	.-34     	; 0xf60 <prvUnlockQueue+0x22>
     f82:	8f ef       	ldi	r24, 0xFF	; 255
     f84:	f8 01       	movw	r30, r16
     f86:	86 8f       	std	Z+30, r24	; 0x1e
     f88:	0f 90       	pop	r0
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	0f 92       	push	r0
     f92:	c5 8d       	ldd	r28, Z+29	; 0x1d
     f94:	1c 16       	cp	r1, r28
     f96:	ac f4       	brge	.+42     	; 0xfc2 <prvUnlockQueue+0x84>
     f98:	80 85       	ldd	r24, Z+8	; 0x08
     f9a:	81 11       	cpse	r24, r1
     f9c:	06 c0       	rjmp	.+12     	; 0xfaa <prvUnlockQueue+0x6c>
     f9e:	11 c0       	rjmp	.+34     	; 0xfc2 <prvUnlockQueue+0x84>
     fa0:	f8 01       	movw	r30, r16
     fa2:	80 85       	ldd	r24, Z+8	; 0x08
     fa4:	81 11       	cpse	r24, r1
     fa6:	05 c0       	rjmp	.+10     	; 0xfb2 <prvUnlockQueue+0x74>
     fa8:	0c c0       	rjmp	.+24     	; 0xfc2 <prvUnlockQueue+0x84>
     faa:	78 01       	movw	r14, r16
     fac:	f8 e0       	ldi	r31, 0x08	; 8
     fae:	ef 0e       	add	r14, r31
     fb0:	f1 1c       	adc	r15, r1
     fb2:	c7 01       	movw	r24, r14
     fb4:	0e 94 a6 10 	call	0x214c	; 0x214c <xTaskRemoveFromEventList>
     fb8:	81 11       	cpse	r24, r1
     fba:	0e 94 2e 11 	call	0x225c	; 0x225c <vTaskMissedYield>
     fbe:	c1 50       	subi	r28, 0x01	; 1
     fc0:	79 f7       	brne	.-34     	; 0xfa0 <prvUnlockQueue+0x62>
     fc2:	8f ef       	ldi	r24, 0xFF	; 255
     fc4:	f8 01       	movw	r30, r16
     fc6:	85 8f       	std	Z+29, r24	; 0x1d
     fc8:	0f 90       	pop	r0
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	cf 91       	pop	r28
     fce:	1f 91       	pop	r17
     fd0:	0f 91       	pop	r16
     fd2:	ff 90       	pop	r15
     fd4:	ef 90       	pop	r14
     fd6:	08 95       	ret

00000fd8 <xQueueGenericReset>:
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
     fdc:	ec 01       	movw	r28, r24
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	0f 92       	push	r0
     fe4:	e8 81       	ld	r30, Y
     fe6:	f9 81       	ldd	r31, Y+1	; 0x01
     fe8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fea:	2c 8d       	ldd	r18, Y+28	; 0x1c
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	82 9f       	mul	r24, r18
     ff2:	a0 01       	movw	r20, r0
     ff4:	83 9f       	mul	r24, r19
     ff6:	50 0d       	add	r21, r0
     ff8:	92 9f       	mul	r25, r18
     ffa:	50 0d       	add	r21, r0
     ffc:	11 24       	eor	r1, r1
     ffe:	4e 0f       	add	r20, r30
    1000:	5f 1f       	adc	r21, r31
    1002:	5d 83       	std	Y+5, r21	; 0x05
    1004:	4c 83       	std	Y+4, r20	; 0x04
    1006:	1a 8e       	std	Y+26, r1	; 0x1a
    1008:	fb 83       	std	Y+3, r31	; 0x03
    100a:	ea 83       	std	Y+2, r30	; 0x02
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	82 9f       	mul	r24, r18
    1010:	a0 01       	movw	r20, r0
    1012:	83 9f       	mul	r24, r19
    1014:	50 0d       	add	r21, r0
    1016:	92 9f       	mul	r25, r18
    1018:	50 0d       	add	r21, r0
    101a:	11 24       	eor	r1, r1
    101c:	cf 01       	movw	r24, r30
    101e:	84 0f       	add	r24, r20
    1020:	95 1f       	adc	r25, r21
    1022:	9f 83       	std	Y+7, r25	; 0x07
    1024:	8e 83       	std	Y+6, r24	; 0x06
    1026:	8f ef       	ldi	r24, 0xFF	; 255
    1028:	8d 8f       	std	Y+29, r24	; 0x1d
    102a:	8e 8f       	std	Y+30, r24	; 0x1e
    102c:	61 11       	cpse	r22, r1
    102e:	0b c0       	rjmp	.+22     	; 0x1046 <xQueueGenericReset+0x6e>
    1030:	88 85       	ldd	r24, Y+8	; 0x08
    1032:	88 23       	and	r24, r24
    1034:	71 f0       	breq	.+28     	; 0x1052 <xQueueGenericReset+0x7a>
    1036:	ce 01       	movw	r24, r28
    1038:	08 96       	adiw	r24, 0x08	; 8
    103a:	0e 94 a6 10 	call	0x214c	; 0x214c <xTaskRemoveFromEventList>
    103e:	88 23       	and	r24, r24
    1040:	41 f0       	breq	.+16     	; 0x1052 <xQueueGenericReset+0x7a>
    1042:	32 de       	rcall	.-924    	; 0xca8 <vPortYield>
    1044:	06 c0       	rjmp	.+12     	; 0x1052 <xQueueGenericReset+0x7a>
    1046:	ce 01       	movw	r24, r28
    1048:	08 96       	adiw	r24, 0x08	; 8
    104a:	f5 dc       	rcall	.-1558   	; 0xa36 <vListInitialise>
    104c:	ce 01       	movw	r24, r28
    104e:	41 96       	adiw	r24, 0x11	; 17
    1050:	f2 dc       	rcall	.-1564   	; 0xa36 <vListInitialise>
    1052:	0f 90       	pop	r0
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	08 95       	ret

0000105e <xQueueGenericCreate>:
    105e:	ff 92       	push	r15
    1060:	0f 93       	push	r16
    1062:	1f 93       	push	r17
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
    1068:	08 2f       	mov	r16, r24
    106a:	16 2f       	mov	r17, r22
    106c:	f4 2e       	mov	r15, r20
    106e:	66 23       	and	r22, r22
    1070:	b9 f0       	breq	.+46     	; 0x10a0 <xQueueGenericCreate+0x42>
    1072:	86 9f       	mul	r24, r22
    1074:	c0 01       	movw	r24, r0
    1076:	11 24       	eor	r1, r1
    1078:	81 96       	adiw	r24, 0x21	; 33
    107a:	bb dc       	rcall	.-1674   	; 0x9f2 <pvPortMalloc>
    107c:	ec 01       	movw	r28, r24
    107e:	00 97       	sbiw	r24, 0x00	; 0
    1080:	41 f4       	brne	.+16     	; 0x1092 <xQueueGenericCreate+0x34>
    1082:	14 c0       	rjmp	.+40     	; 0x10ac <xQueueGenericCreate+0x4e>
    1084:	0b 8f       	std	Y+27, r16	; 0x1b
    1086:	1c 8f       	std	Y+28, r17	; 0x1c
    1088:	61 e0       	ldi	r22, 0x01	; 1
    108a:	ce 01       	movw	r24, r28
    108c:	a5 df       	rcall	.-182    	; 0xfd8 <xQueueGenericReset>
    108e:	f8 a2       	std	Y+32, r15	; 0x20
    1090:	0d c0       	rjmp	.+26     	; 0x10ac <xQueueGenericCreate+0x4e>
    1092:	81 96       	adiw	r24, 0x21	; 33
    1094:	99 83       	std	Y+1, r25	; 0x01
    1096:	88 83       	st	Y, r24
    1098:	f5 cf       	rjmp	.-22     	; 0x1084 <xQueueGenericCreate+0x26>
    109a:	d9 83       	std	Y+1, r29	; 0x01
    109c:	c8 83       	st	Y, r28
    109e:	f2 cf       	rjmp	.-28     	; 0x1084 <xQueueGenericCreate+0x26>
    10a0:	81 e2       	ldi	r24, 0x21	; 33
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	a6 dc       	rcall	.-1716   	; 0x9f2 <pvPortMalloc>
    10a6:	ec 01       	movw	r28, r24
    10a8:	89 2b       	or	r24, r25
    10aa:	b9 f7       	brne	.-18     	; 0x109a <xQueueGenericCreate+0x3c>
    10ac:	ce 01       	movw	r24, r28
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	1f 91       	pop	r17
    10b4:	0f 91       	pop	r16
    10b6:	ff 90       	pop	r15
    10b8:	08 95       	ret

000010ba <xQueueGenericSend>:
    10ba:	9f 92       	push	r9
    10bc:	af 92       	push	r10
    10be:	bf 92       	push	r11
    10c0:	cf 92       	push	r12
    10c2:	df 92       	push	r13
    10c4:	ef 92       	push	r14
    10c6:	ff 92       	push	r15
    10c8:	0f 93       	push	r16
    10ca:	1f 93       	push	r17
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
    10d0:	00 d0       	rcall	.+0      	; 0x10d2 <xQueueGenericSend+0x18>
    10d2:	1f 92       	push	r1
    10d4:	1f 92       	push	r1
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	8c 01       	movw	r16, r24
    10dc:	6b 01       	movw	r12, r22
    10de:	5d 83       	std	Y+5, r21	; 0x05
    10e0:	4c 83       	std	Y+4, r20	; 0x04
    10e2:	a2 2e       	mov	r10, r18
    10e4:	b1 2c       	mov	r11, r1
    10e6:	99 24       	eor	r9, r9
    10e8:	93 94       	inc	r9
    10ea:	7c 01       	movw	r14, r24
    10ec:	88 e0       	ldi	r24, 0x08	; 8
    10ee:	e8 0e       	add	r14, r24
    10f0:	f1 1c       	adc	r15, r1
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	f8 94       	cli
    10f6:	0f 92       	push	r0
    10f8:	f8 01       	movw	r30, r16
    10fa:	92 8d       	ldd	r25, Z+26	; 0x1a
    10fc:	83 8d       	ldd	r24, Z+27	; 0x1b
    10fe:	98 17       	cp	r25, r24
    1100:	18 f0       	brcs	.+6      	; 0x1108 <xQueueGenericSend+0x4e>
    1102:	f2 e0       	ldi	r31, 0x02	; 2
    1104:	af 12       	cpse	r10, r31
    1106:	16 c0       	rjmp	.+44     	; 0x1134 <xQueueGenericSend+0x7a>
    1108:	4a 2d       	mov	r20, r10
    110a:	b6 01       	movw	r22, r12
    110c:	c8 01       	movw	r24, r16
    110e:	9e de       	rcall	.-708    	; 0xe4c <prvCopyDataToQueue>
    1110:	f8 01       	movw	r30, r16
    1112:	91 89       	ldd	r25, Z+17	; 0x11
    1114:	99 23       	and	r25, r25
    1116:	41 f0       	breq	.+16     	; 0x1128 <xQueueGenericSend+0x6e>
    1118:	c8 01       	movw	r24, r16
    111a:	41 96       	adiw	r24, 0x11	; 17
    111c:	0e 94 a6 10 	call	0x214c	; 0x214c <xTaskRemoveFromEventList>
    1120:	88 23       	and	r24, r24
    1122:	21 f0       	breq	.+8      	; 0x112c <xQueueGenericSend+0x72>
    1124:	c1 dd       	rcall	.-1150   	; 0xca8 <vPortYield>
    1126:	02 c0       	rjmp	.+4      	; 0x112c <xQueueGenericSend+0x72>
    1128:	81 11       	cpse	r24, r1
    112a:	be dd       	rcall	.-1156   	; 0xca8 <vPortYield>
    112c:	0f 90       	pop	r0
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	47 c0       	rjmp	.+142    	; 0x11c2 <xQueueGenericSend+0x108>
    1134:	8c 81       	ldd	r24, Y+4	; 0x04
    1136:	9d 81       	ldd	r25, Y+5	; 0x05
    1138:	89 2b       	or	r24, r25
    113a:	21 f4       	brne	.+8      	; 0x1144 <xQueueGenericSend+0x8a>
    113c:	0f 90       	pop	r0
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	3f c0       	rjmp	.+126    	; 0x11c2 <xQueueGenericSend+0x108>
    1144:	b1 10       	cpse	r11, r1
    1146:	05 c0       	rjmp	.+10     	; 0x1152 <xQueueGenericSend+0x98>
    1148:	ce 01       	movw	r24, r28
    114a:	01 96       	adiw	r24, 0x01	; 1
    114c:	0e 94 ee 10 	call	0x21dc	; 0x21dc <vTaskInternalSetTimeOutState>
    1150:	b9 2c       	mov	r11, r9
    1152:	0f 90       	pop	r0
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	eb d5       	rcall	.+3030   	; 0x1d2e <vTaskSuspendAll>
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	f8 94       	cli
    115c:	0f 92       	push	r0
    115e:	f8 01       	movw	r30, r16
    1160:	85 8d       	ldd	r24, Z+29	; 0x1d
    1162:	8f 3f       	cpi	r24, 0xFF	; 255
    1164:	09 f4       	brne	.+2      	; 0x1168 <xQueueGenericSend+0xae>
    1166:	15 8e       	std	Z+29, r1	; 0x1d
    1168:	f8 01       	movw	r30, r16
    116a:	86 8d       	ldd	r24, Z+30	; 0x1e
    116c:	8f 3f       	cpi	r24, 0xFF	; 255
    116e:	09 f4       	brne	.+2      	; 0x1172 <xQueueGenericSend+0xb8>
    1170:	16 8e       	std	Z+30, r1	; 0x1e
    1172:	0f 90       	pop	r0
    1174:	0f be       	out	0x3f, r0	; 63
    1176:	be 01       	movw	r22, r28
    1178:	6c 5f       	subi	r22, 0xFC	; 252
    117a:	7f 4f       	sbci	r23, 0xFF	; 255
    117c:	ce 01       	movw	r24, r28
    117e:	01 96       	adiw	r24, 0x01	; 1
    1180:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <xTaskCheckForTimeOut>
    1184:	81 11       	cpse	r24, r1
    1186:	19 c0       	rjmp	.+50     	; 0x11ba <xQueueGenericSend+0x100>
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	0f 92       	push	r0
    118e:	f8 01       	movw	r30, r16
    1190:	92 8d       	ldd	r25, Z+26	; 0x1a
    1192:	83 8d       	ldd	r24, Z+27	; 0x1b
    1194:	0f 90       	pop	r0
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	98 13       	cpse	r25, r24
    119a:	0b c0       	rjmp	.+22     	; 0x11b2 <xQueueGenericSend+0xf8>
    119c:	6c 81       	ldd	r22, Y+4	; 0x04
    119e:	7d 81       	ldd	r23, Y+5	; 0x05
    11a0:	c7 01       	movw	r24, r14
    11a2:	ab d7       	rcall	.+3926   	; 0x20fa <vTaskPlaceOnEventList>
    11a4:	c8 01       	movw	r24, r16
    11a6:	cb de       	rcall	.-618    	; 0xf3e <prvUnlockQueue>
    11a8:	8c d6       	rcall	.+3352   	; 0x1ec2 <xTaskResumeAll>
    11aa:	81 11       	cpse	r24, r1
    11ac:	a2 cf       	rjmp	.-188    	; 0x10f2 <xQueueGenericSend+0x38>
    11ae:	7c dd       	rcall	.-1288   	; 0xca8 <vPortYield>
    11b0:	a0 cf       	rjmp	.-192    	; 0x10f2 <xQueueGenericSend+0x38>
    11b2:	c8 01       	movw	r24, r16
    11b4:	c4 de       	rcall	.-632    	; 0xf3e <prvUnlockQueue>
    11b6:	85 d6       	rcall	.+3338   	; 0x1ec2 <xTaskResumeAll>
    11b8:	9c cf       	rjmp	.-200    	; 0x10f2 <xQueueGenericSend+0x38>
    11ba:	c8 01       	movw	r24, r16
    11bc:	c0 de       	rcall	.-640    	; 0xf3e <prvUnlockQueue>
    11be:	81 d6       	rcall	.+3330   	; 0x1ec2 <xTaskResumeAll>
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	df 91       	pop	r29
    11ce:	cf 91       	pop	r28
    11d0:	1f 91       	pop	r17
    11d2:	0f 91       	pop	r16
    11d4:	ff 90       	pop	r15
    11d6:	ef 90       	pop	r14
    11d8:	df 90       	pop	r13
    11da:	cf 90       	pop	r12
    11dc:	bf 90       	pop	r11
    11de:	af 90       	pop	r10
    11e0:	9f 90       	pop	r9
    11e2:	08 95       	ret

000011e4 <xQueueCreateMutex>:
    11e4:	cf 93       	push	r28
    11e6:	df 93       	push	r29
    11e8:	48 2f       	mov	r20, r24
    11ea:	60 e0       	ldi	r22, 0x00	; 0
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	37 df       	rcall	.-402    	; 0x105e <xQueueGenericCreate>
    11f0:	ec 01       	movw	r28, r24
    11f2:	00 97       	sbiw	r24, 0x00	; 0
    11f4:	59 f0       	breq	.+22     	; 0x120c <xQueueCreateMutex+0x28>
    11f6:	1d 82       	std	Y+5, r1	; 0x05
    11f8:	1c 82       	std	Y+4, r1	; 0x04
    11fa:	19 82       	std	Y+1, r1	; 0x01
    11fc:	18 82       	st	Y, r1
    11fe:	1e 82       	std	Y+6, r1	; 0x06
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	40 e0       	ldi	r20, 0x00	; 0
    1204:	50 e0       	ldi	r21, 0x00	; 0
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	70 e0       	ldi	r23, 0x00	; 0
    120a:	57 df       	rcall	.-338    	; 0x10ba <xQueueGenericSend>
    120c:	ce 01       	movw	r24, r28
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	08 95       	ret

00001214 <xQueueGenericSendFromISR>:
    1214:	ef 92       	push	r14
    1216:	ff 92       	push	r15
    1218:	0f 93       	push	r16
    121a:	1f 93       	push	r17
    121c:	cf 93       	push	r28
    121e:	df 93       	push	r29
    1220:	8a 01       	movw	r16, r20
    1222:	fc 01       	movw	r30, r24
    1224:	52 8d       	ldd	r21, Z+26	; 0x1a
    1226:	33 8d       	ldd	r19, Z+27	; 0x1b
    1228:	53 17       	cp	r21, r19
    122a:	10 f0       	brcs	.+4      	; 0x1230 <xQueueGenericSendFromISR+0x1c>
    122c:	22 30       	cpi	r18, 0x02	; 2
    122e:	e1 f4       	brne	.+56     	; 0x1268 <xQueueGenericSendFromISR+0x54>
    1230:	42 2f       	mov	r20, r18
    1232:	78 01       	movw	r14, r16
    1234:	ec 01       	movw	r28, r24
    1236:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1238:	09 de       	rcall	.-1006   	; 0xe4c <prvCopyDataToQueue>
    123a:	1f 3f       	cpi	r17, 0xFF	; 255
    123c:	79 f4       	brne	.+30     	; 0x125c <xQueueGenericSendFromISR+0x48>
    123e:	89 89       	ldd	r24, Y+17	; 0x11
    1240:	88 23       	and	r24, r24
    1242:	a1 f0       	breq	.+40     	; 0x126c <xQueueGenericSendFromISR+0x58>
    1244:	ce 01       	movw	r24, r28
    1246:	41 96       	adiw	r24, 0x11	; 17
    1248:	81 d7       	rcall	.+3842   	; 0x214c <xTaskRemoveFromEventList>
    124a:	88 23       	and	r24, r24
    124c:	89 f0       	breq	.+34     	; 0x1270 <xQueueGenericSendFromISR+0x5c>
    124e:	e1 14       	cp	r14, r1
    1250:	f1 04       	cpc	r15, r1
    1252:	81 f0       	breq	.+32     	; 0x1274 <xQueueGenericSendFromISR+0x60>
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	f7 01       	movw	r30, r14
    1258:	80 83       	st	Z, r24
    125a:	0d c0       	rjmp	.+26     	; 0x1276 <xQueueGenericSendFromISR+0x62>
    125c:	ff 24       	eor	r15, r15
    125e:	f3 94       	inc	r15
    1260:	f1 0e       	add	r15, r17
    1262:	fe 8e       	std	Y+30, r15	; 0x1e
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	07 c0       	rjmp	.+14     	; 0x1276 <xQueueGenericSendFromISR+0x62>
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	05 c0       	rjmp	.+10     	; 0x1276 <xQueueGenericSendFromISR+0x62>
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	03 c0       	rjmp	.+6      	; 0x1276 <xQueueGenericSendFromISR+0x62>
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	01 c0       	rjmp	.+2      	; 0x1276 <xQueueGenericSendFromISR+0x62>
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	df 91       	pop	r29
    1278:	cf 91       	pop	r28
    127a:	1f 91       	pop	r17
    127c:	0f 91       	pop	r16
    127e:	ff 90       	pop	r15
    1280:	ef 90       	pop	r14
    1282:	08 95       	ret

00001284 <xQueueReceive>:
    1284:	9f 92       	push	r9
    1286:	af 92       	push	r10
    1288:	bf 92       	push	r11
    128a:	cf 92       	push	r12
    128c:	df 92       	push	r13
    128e:	ef 92       	push	r14
    1290:	ff 92       	push	r15
    1292:	0f 93       	push	r16
    1294:	1f 93       	push	r17
    1296:	cf 93       	push	r28
    1298:	df 93       	push	r29
    129a:	00 d0       	rcall	.+0      	; 0x129c <xQueueReceive+0x18>
    129c:	1f 92       	push	r1
    129e:	1f 92       	push	r1
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
    12a4:	8c 01       	movw	r16, r24
    12a6:	5b 01       	movw	r10, r22
    12a8:	5d 83       	std	Y+5, r21	; 0x05
    12aa:	4c 83       	std	Y+4, r20	; 0x04
    12ac:	e1 2c       	mov	r14, r1
    12ae:	99 24       	eor	r9, r9
    12b0:	93 94       	inc	r9
    12b2:	6c 01       	movw	r12, r24
    12b4:	81 e1       	ldi	r24, 0x11	; 17
    12b6:	c8 0e       	add	r12, r24
    12b8:	d1 1c       	adc	r13, r1
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	0f 92       	push	r0
    12c0:	f8 01       	movw	r30, r16
    12c2:	f2 8c       	ldd	r15, Z+26	; 0x1a
    12c4:	ff 20       	and	r15, r15
    12c6:	91 f0       	breq	.+36     	; 0x12ec <xQueueReceive+0x68>
    12c8:	b5 01       	movw	r22, r10
    12ca:	c8 01       	movw	r24, r16
    12cc:	1e de       	rcall	.-964    	; 0xf0a <prvCopyDataFromQueue>
    12ce:	fa 94       	dec	r15
    12d0:	f8 01       	movw	r30, r16
    12d2:	f2 8e       	std	Z+26, r15	; 0x1a
    12d4:	80 85       	ldd	r24, Z+8	; 0x08
    12d6:	88 23       	and	r24, r24
    12d8:	29 f0       	breq	.+10     	; 0x12e4 <xQueueReceive+0x60>
    12da:	c8 01       	movw	r24, r16
    12dc:	08 96       	adiw	r24, 0x08	; 8
    12de:	36 d7       	rcall	.+3692   	; 0x214c <xTaskRemoveFromEventList>
    12e0:	81 11       	cpse	r24, r1
    12e2:	e2 dc       	rcall	.-1596   	; 0xca8 <vPortYield>
    12e4:	0f 90       	pop	r0
    12e6:	0f be       	out	0x3f, r0	; 63
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	44 c0       	rjmp	.+136    	; 0x1374 <xQueueReceive+0xf0>
    12ec:	8c 81       	ldd	r24, Y+4	; 0x04
    12ee:	9d 81       	ldd	r25, Y+5	; 0x05
    12f0:	89 2b       	or	r24, r25
    12f2:	21 f4       	brne	.+8      	; 0x12fc <xQueueReceive+0x78>
    12f4:	0f 90       	pop	r0
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	3c c0       	rjmp	.+120    	; 0x1374 <xQueueReceive+0xf0>
    12fc:	e1 10       	cpse	r14, r1
    12fe:	04 c0       	rjmp	.+8      	; 0x1308 <xQueueReceive+0x84>
    1300:	ce 01       	movw	r24, r28
    1302:	01 96       	adiw	r24, 0x01	; 1
    1304:	6b d7       	rcall	.+3798   	; 0x21dc <vTaskInternalSetTimeOutState>
    1306:	e9 2c       	mov	r14, r9
    1308:	0f 90       	pop	r0
    130a:	0f be       	out	0x3f, r0	; 63
    130c:	10 d5       	rcall	.+2592   	; 0x1d2e <vTaskSuspendAll>
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	f8 94       	cli
    1312:	0f 92       	push	r0
    1314:	f8 01       	movw	r30, r16
    1316:	85 8d       	ldd	r24, Z+29	; 0x1d
    1318:	8f 3f       	cpi	r24, 0xFF	; 255
    131a:	09 f4       	brne	.+2      	; 0x131e <xQueueReceive+0x9a>
    131c:	15 8e       	std	Z+29, r1	; 0x1d
    131e:	f8 01       	movw	r30, r16
    1320:	86 8d       	ldd	r24, Z+30	; 0x1e
    1322:	8f 3f       	cpi	r24, 0xFF	; 255
    1324:	09 f4       	brne	.+2      	; 0x1328 <xQueueReceive+0xa4>
    1326:	16 8e       	std	Z+30, r1	; 0x1e
    1328:	0f 90       	pop	r0
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	be 01       	movw	r22, r28
    132e:	6c 5f       	subi	r22, 0xFC	; 252
    1330:	7f 4f       	sbci	r23, 0xFF	; 255
    1332:	ce 01       	movw	r24, r28
    1334:	01 96       	adiw	r24, 0x01	; 1
    1336:	5d d7       	rcall	.+3770   	; 0x21f2 <xTaskCheckForTimeOut>
    1338:	81 11       	cpse	r24, r1
    133a:	13 c0       	rjmp	.+38     	; 0x1362 <xQueueReceive+0xde>
    133c:	c8 01       	movw	r24, r16
    133e:	7b dd       	rcall	.-1290   	; 0xe36 <prvIsQueueEmpty>
    1340:	88 23       	and	r24, r24
    1342:	59 f0       	breq	.+22     	; 0x135a <xQueueReceive+0xd6>
    1344:	6c 81       	ldd	r22, Y+4	; 0x04
    1346:	7d 81       	ldd	r23, Y+5	; 0x05
    1348:	c6 01       	movw	r24, r12
    134a:	d7 d6       	rcall	.+3502   	; 0x20fa <vTaskPlaceOnEventList>
    134c:	c8 01       	movw	r24, r16
    134e:	f7 dd       	rcall	.-1042   	; 0xf3e <prvUnlockQueue>
    1350:	b8 d5       	rcall	.+2928   	; 0x1ec2 <xTaskResumeAll>
    1352:	81 11       	cpse	r24, r1
    1354:	b2 cf       	rjmp	.-156    	; 0x12ba <xQueueReceive+0x36>
    1356:	a8 dc       	rcall	.-1712   	; 0xca8 <vPortYield>
    1358:	b0 cf       	rjmp	.-160    	; 0x12ba <xQueueReceive+0x36>
    135a:	c8 01       	movw	r24, r16
    135c:	f0 dd       	rcall	.-1056   	; 0xf3e <prvUnlockQueue>
    135e:	b1 d5       	rcall	.+2914   	; 0x1ec2 <xTaskResumeAll>
    1360:	ac cf       	rjmp	.-168    	; 0x12ba <xQueueReceive+0x36>
    1362:	c8 01       	movw	r24, r16
    1364:	ec dd       	rcall	.-1064   	; 0xf3e <prvUnlockQueue>
    1366:	ad d5       	rcall	.+2906   	; 0x1ec2 <xTaskResumeAll>
    1368:	c8 01       	movw	r24, r16
    136a:	65 dd       	rcall	.-1334   	; 0xe36 <prvIsQueueEmpty>
    136c:	88 23       	and	r24, r24
    136e:	09 f4       	brne	.+2      	; 0x1372 <xQueueReceive+0xee>
    1370:	a4 cf       	rjmp	.-184    	; 0x12ba <xQueueReceive+0x36>
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	df 91       	pop	r29
    1380:	cf 91       	pop	r28
    1382:	1f 91       	pop	r17
    1384:	0f 91       	pop	r16
    1386:	ff 90       	pop	r15
    1388:	ef 90       	pop	r14
    138a:	df 90       	pop	r13
    138c:	cf 90       	pop	r12
    138e:	bf 90       	pop	r11
    1390:	af 90       	pop	r10
    1392:	9f 90       	pop	r9
    1394:	08 95       	ret

00001396 <xQueueSemaphoreTake>:
    1396:	bf 92       	push	r11
    1398:	cf 92       	push	r12
    139a:	df 92       	push	r13
    139c:	ef 92       	push	r14
    139e:	ff 92       	push	r15
    13a0:	0f 93       	push	r16
    13a2:	1f 93       	push	r17
    13a4:	cf 93       	push	r28
    13a6:	df 93       	push	r29
    13a8:	00 d0       	rcall	.+0      	; 0x13aa <xQueueSemaphoreTake+0x14>
    13aa:	1f 92       	push	r1
    13ac:	1f 92       	push	r1
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
    13b2:	8c 01       	movw	r16, r24
    13b4:	7d 83       	std	Y+5, r23	; 0x05
    13b6:	6c 83       	std	Y+4, r22	; 0x04
    13b8:	b1 2c       	mov	r11, r1
    13ba:	d1 2c       	mov	r13, r1
    13bc:	cc 24       	eor	r12, r12
    13be:	c3 94       	inc	r12
    13c0:	7c 01       	movw	r14, r24
    13c2:	81 e1       	ldi	r24, 0x11	; 17
    13c4:	e8 0e       	add	r14, r24
    13c6:	f1 1c       	adc	r15, r1
    13c8:	0f b6       	in	r0, 0x3f	; 63
    13ca:	f8 94       	cli
    13cc:	0f 92       	push	r0
    13ce:	d8 01       	movw	r26, r16
    13d0:	5a 96       	adiw	r26, 0x1a	; 26
    13d2:	8c 91       	ld	r24, X
    13d4:	5a 97       	sbiw	r26, 0x1a	; 26
    13d6:	88 23       	and	r24, r24
    13d8:	d9 f0       	breq	.+54     	; 0x1410 <xQueueSemaphoreTake+0x7a>
    13da:	81 50       	subi	r24, 0x01	; 1
    13dc:	5a 96       	adiw	r26, 0x1a	; 26
    13de:	8c 93       	st	X, r24
    13e0:	5a 97       	sbiw	r26, 0x1a	; 26
    13e2:	8d 91       	ld	r24, X+
    13e4:	9c 91       	ld	r25, X
    13e6:	89 2b       	or	r24, r25
    13e8:	29 f4       	brne	.+10     	; 0x13f4 <xQueueSemaphoreTake+0x5e>
    13ea:	0e 94 47 12 	call	0x248e	; 0x248e <pvTaskIncrementMutexHeldCount>
    13ee:	f8 01       	movw	r30, r16
    13f0:	95 83       	std	Z+5, r25	; 0x05
    13f2:	84 83       	std	Z+4, r24	; 0x04
    13f4:	d8 01       	movw	r26, r16
    13f6:	18 96       	adiw	r26, 0x08	; 8
    13f8:	8c 91       	ld	r24, X
    13fa:	88 23       	and	r24, r24
    13fc:	29 f0       	breq	.+10     	; 0x1408 <xQueueSemaphoreTake+0x72>
    13fe:	c8 01       	movw	r24, r16
    1400:	08 96       	adiw	r24, 0x08	; 8
    1402:	a4 d6       	rcall	.+3400   	; 0x214c <xTaskRemoveFromEventList>
    1404:	81 11       	cpse	r24, r1
    1406:	50 dc       	rcall	.-1888   	; 0xca8 <vPortYield>
    1408:	0f 90       	pop	r0
    140a:	0f be       	out	0x3f, r0	; 63
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	70 c0       	rjmp	.+224    	; 0x14f0 <xQueueSemaphoreTake+0x15a>
    1410:	8c 81       	ldd	r24, Y+4	; 0x04
    1412:	9d 81       	ldd	r25, Y+5	; 0x05
    1414:	89 2b       	or	r24, r25
    1416:	21 f4       	brne	.+8      	; 0x1420 <xQueueSemaphoreTake+0x8a>
    1418:	0f 90       	pop	r0
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	68 c0       	rjmp	.+208    	; 0x14f0 <xQueueSemaphoreTake+0x15a>
    1420:	d1 10       	cpse	r13, r1
    1422:	04 c0       	rjmp	.+8      	; 0x142c <xQueueSemaphoreTake+0x96>
    1424:	ce 01       	movw	r24, r28
    1426:	01 96       	adiw	r24, 0x01	; 1
    1428:	d9 d6       	rcall	.+3506   	; 0x21dc <vTaskInternalSetTimeOutState>
    142a:	dc 2c       	mov	r13, r12
    142c:	0f 90       	pop	r0
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	7e d4       	rcall	.+2300   	; 0x1d2e <vTaskSuspendAll>
    1432:	0f b6       	in	r0, 0x3f	; 63
    1434:	f8 94       	cli
    1436:	0f 92       	push	r0
    1438:	f8 01       	movw	r30, r16
    143a:	85 8d       	ldd	r24, Z+29	; 0x1d
    143c:	8f 3f       	cpi	r24, 0xFF	; 255
    143e:	09 f4       	brne	.+2      	; 0x1442 <xQueueSemaphoreTake+0xac>
    1440:	15 8e       	std	Z+29, r1	; 0x1d
    1442:	d8 01       	movw	r26, r16
    1444:	5e 96       	adiw	r26, 0x1e	; 30
    1446:	8c 91       	ld	r24, X
    1448:	5e 97       	sbiw	r26, 0x1e	; 30
    144a:	8f 3f       	cpi	r24, 0xFF	; 255
    144c:	11 f4       	brne	.+4      	; 0x1452 <xQueueSemaphoreTake+0xbc>
    144e:	5e 96       	adiw	r26, 0x1e	; 30
    1450:	1c 92       	st	X, r1
    1452:	0f 90       	pop	r0
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	be 01       	movw	r22, r28
    1458:	6c 5f       	subi	r22, 0xFC	; 252
    145a:	7f 4f       	sbci	r23, 0xFF	; 255
    145c:	ce 01       	movw	r24, r28
    145e:	01 96       	adiw	r24, 0x01	; 1
    1460:	c8 d6       	rcall	.+3472   	; 0x21f2 <xTaskCheckForTimeOut>
    1462:	81 11       	cpse	r24, r1
    1464:	21 c0       	rjmp	.+66     	; 0x14a8 <xQueueSemaphoreTake+0x112>
    1466:	c8 01       	movw	r24, r16
    1468:	e6 dc       	rcall	.-1588   	; 0xe36 <prvIsQueueEmpty>
    146a:	88 23       	and	r24, r24
    146c:	c9 f0       	breq	.+50     	; 0x14a0 <xQueueSemaphoreTake+0x10a>
    146e:	f8 01       	movw	r30, r16
    1470:	80 81       	ld	r24, Z
    1472:	91 81       	ldd	r25, Z+1	; 0x01
    1474:	89 2b       	or	r24, r25
    1476:	49 f4       	brne	.+18     	; 0x148a <xQueueSemaphoreTake+0xf4>
    1478:	0f b6       	in	r0, 0x3f	; 63
    147a:	f8 94       	cli
    147c:	0f 92       	push	r0
    147e:	84 81       	ldd	r24, Z+4	; 0x04
    1480:	95 81       	ldd	r25, Z+5	; 0x05
    1482:	03 d7       	rcall	.+3590   	; 0x228a <xTaskPriorityInherit>
    1484:	b8 2e       	mov	r11, r24
    1486:	0f 90       	pop	r0
    1488:	0f be       	out	0x3f, r0	; 63
    148a:	6c 81       	ldd	r22, Y+4	; 0x04
    148c:	7d 81       	ldd	r23, Y+5	; 0x05
    148e:	c7 01       	movw	r24, r14
    1490:	34 d6       	rcall	.+3176   	; 0x20fa <vTaskPlaceOnEventList>
    1492:	c8 01       	movw	r24, r16
    1494:	54 dd       	rcall	.-1368   	; 0xf3e <prvUnlockQueue>
    1496:	15 d5       	rcall	.+2602   	; 0x1ec2 <xTaskResumeAll>
    1498:	81 11       	cpse	r24, r1
    149a:	96 cf       	rjmp	.-212    	; 0x13c8 <xQueueSemaphoreTake+0x32>
    149c:	05 dc       	rcall	.-2038   	; 0xca8 <vPortYield>
    149e:	94 cf       	rjmp	.-216    	; 0x13c8 <xQueueSemaphoreTake+0x32>
    14a0:	c8 01       	movw	r24, r16
    14a2:	4d dd       	rcall	.-1382   	; 0xf3e <prvUnlockQueue>
    14a4:	0e d5       	rcall	.+2588   	; 0x1ec2 <xTaskResumeAll>
    14a6:	90 cf       	rjmp	.-224    	; 0x13c8 <xQueueSemaphoreTake+0x32>
    14a8:	c8 01       	movw	r24, r16
    14aa:	49 dd       	rcall	.-1390   	; 0xf3e <prvUnlockQueue>
    14ac:	0a d5       	rcall	.+2580   	; 0x1ec2 <xTaskResumeAll>
    14ae:	c8 01       	movw	r24, r16
    14b0:	c2 dc       	rcall	.-1660   	; 0xe36 <prvIsQueueEmpty>
    14b2:	88 23       	and	r24, r24
    14b4:	09 f4       	brne	.+2      	; 0x14b8 <xQueueSemaphoreTake+0x122>
    14b6:	88 cf       	rjmp	.-240    	; 0x13c8 <xQueueSemaphoreTake+0x32>
    14b8:	bb 20       	and	r11, r11
    14ba:	c9 f0       	breq	.+50     	; 0x14ee <xQueueSemaphoreTake+0x158>
    14bc:	0f b6       	in	r0, 0x3f	; 63
    14be:	f8 94       	cli
    14c0:	0f 92       	push	r0
    14c2:	f8 01       	movw	r30, r16
    14c4:	81 89       	ldd	r24, Z+17	; 0x11
    14c6:	88 23       	and	r24, r24
    14c8:	39 f0       	breq	.+14     	; 0x14d8 <xQueueSemaphoreTake+0x142>
    14ca:	06 88       	ldd	r0, Z+22	; 0x16
    14cc:	f7 89       	ldd	r31, Z+23	; 0x17
    14ce:	e0 2d       	mov	r30, r0
    14d0:	80 81       	ld	r24, Z
    14d2:	64 e0       	ldi	r22, 0x04	; 4
    14d4:	68 1b       	sub	r22, r24
    14d6:	01 c0       	rjmp	.+2      	; 0x14da <xQueueSemaphoreTake+0x144>
    14d8:	60 e0       	ldi	r22, 0x00	; 0
    14da:	d8 01       	movw	r26, r16
    14dc:	14 96       	adiw	r26, 0x04	; 4
    14de:	8d 91       	ld	r24, X+
    14e0:	9c 91       	ld	r25, X
    14e2:	15 97       	sbiw	r26, 0x05	; 5
    14e4:	84 d7       	rcall	.+3848   	; 0x23ee <vTaskPriorityDisinheritAfterTimeout>
    14e6:	0f 90       	pop	r0
    14e8:	0f be       	out	0x3f, r0	; 63
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	01 c0       	rjmp	.+2      	; 0x14f0 <xQueueSemaphoreTake+0x15a>
    14ee:	80 e0       	ldi	r24, 0x00	; 0
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	df 91       	pop	r29
    14fc:	cf 91       	pop	r28
    14fe:	1f 91       	pop	r17
    1500:	0f 91       	pop	r16
    1502:	ff 90       	pop	r15
    1504:	ef 90       	pop	r14
    1506:	df 90       	pop	r13
    1508:	cf 90       	pop	r12
    150a:	bf 90       	pop	r11
    150c:	08 95       	ret

0000150e <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    150e:	cf 93       	push	r28
    1510:	df 93       	push	r29
    1512:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	f8 94       	cli
    1518:	0f 92       	push	r0
    151a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    151c:	8f 3f       	cpi	r24, 0xFF	; 255
    151e:	09 f4       	brne	.+2      	; 0x1522 <vQueueWaitForMessageRestricted+0x14>
    1520:	1d 8e       	std	Y+29, r1	; 0x1d
    1522:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1524:	8f 3f       	cpi	r24, 0xFF	; 255
    1526:	09 f4       	brne	.+2      	; 0x152a <vQueueWaitForMessageRestricted+0x1c>
    1528:	1e 8e       	std	Y+30, r1	; 0x1e
    152a:	0f 90       	pop	r0
    152c:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    152e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1530:	81 11       	cpse	r24, r1
    1532:	03 c0       	rjmp	.+6      	; 0x153a <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1534:	ce 01       	movw	r24, r28
    1536:	41 96       	adiw	r24, 0x11	; 17
    1538:	f1 d5       	rcall	.+3042   	; 0x211c <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    153a:	ce 01       	movw	r24, r28
    153c:	00 dd       	rcall	.-1536   	; 0xf3e <prvUnlockQueue>
    }
    153e:	df 91       	pop	r29
    1540:	cf 91       	pop	r28
    1542:	08 95       	ret

00001544 <prvBytesInBuffer>:
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1544:	fc 01       	movw	r30, r24
    1546:	44 81       	ldd	r20, Z+4	; 0x04
    1548:	55 81       	ldd	r21, Z+5	; 0x05
    154a:	22 81       	ldd	r18, Z+2	; 0x02
    154c:	33 81       	ldd	r19, Z+3	; 0x03
    154e:	24 0f       	add	r18, r20
    1550:	35 1f       	adc	r19, r21
    1552:	80 81       	ld	r24, Z
    1554:	91 81       	ldd	r25, Z+1	; 0x01
    1556:	b9 01       	movw	r22, r18
    1558:	68 1b       	sub	r22, r24
    155a:	79 0b       	sbc	r23, r25
    155c:	cb 01       	movw	r24, r22
    155e:	64 17       	cp	r22, r20
    1560:	75 07       	cpc	r23, r21
    1562:	10 f0       	brcs	.+4      	; 0x1568 <prvBytesInBuffer+0x24>
    1564:	84 1b       	sub	r24, r20
    1566:	95 0b       	sbc	r25, r21
    1568:	08 95       	ret

0000156a <prvWriteBytesToBuffer>:
    156a:	af 92       	push	r10
    156c:	bf 92       	push	r11
    156e:	cf 92       	push	r12
    1570:	df 92       	push	r13
    1572:	ef 92       	push	r14
    1574:	ff 92       	push	r15
    1576:	0f 93       	push	r16
    1578:	1f 93       	push	r17
    157a:	cf 93       	push	r28
    157c:	df 93       	push	r29
    157e:	6c 01       	movw	r12, r24
    1580:	5b 01       	movw	r10, r22
    1582:	7a 01       	movw	r14, r20
    1584:	fc 01       	movw	r30, r24
    1586:	c2 81       	ldd	r28, Z+2	; 0x02
    1588:	d3 81       	ldd	r29, Z+3	; 0x03
    158a:	04 81       	ldd	r16, Z+4	; 0x04
    158c:	15 81       	ldd	r17, Z+5	; 0x05
    158e:	0c 1b       	sub	r16, r28
    1590:	1d 0b       	sbc	r17, r29
    1592:	40 17       	cp	r20, r16
    1594:	51 07       	cpc	r21, r17
    1596:	08 f4       	brcc	.+2      	; 0x159a <prvWriteBytesToBuffer+0x30>
    1598:	8a 01       	movw	r16, r20
    159a:	f6 01       	movw	r30, r12
    159c:	84 85       	ldd	r24, Z+12	; 0x0c
    159e:	95 85       	ldd	r25, Z+13	; 0x0d
    15a0:	a8 01       	movw	r20, r16
    15a2:	b5 01       	movw	r22, r10
    15a4:	8c 0f       	add	r24, r28
    15a6:	9d 1f       	adc	r25, r29
    15a8:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <memcpy>
    15ac:	0e 15       	cp	r16, r14
    15ae:	1f 05       	cpc	r17, r15
    15b0:	58 f4       	brcc	.+22     	; 0x15c8 <prvWriteBytesToBuffer+0x5e>
    15b2:	a7 01       	movw	r20, r14
    15b4:	40 1b       	sub	r20, r16
    15b6:	51 0b       	sbc	r21, r17
    15b8:	b5 01       	movw	r22, r10
    15ba:	60 0f       	add	r22, r16
    15bc:	71 1f       	adc	r23, r17
    15be:	f6 01       	movw	r30, r12
    15c0:	84 85       	ldd	r24, Z+12	; 0x0c
    15c2:	95 85       	ldd	r25, Z+13	; 0x0d
    15c4:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <memcpy>
    15c8:	ce 01       	movw	r24, r28
    15ca:	8e 0d       	add	r24, r14
    15cc:	9f 1d       	adc	r25, r15
    15ce:	f6 01       	movw	r30, r12
    15d0:	24 81       	ldd	r18, Z+4	; 0x04
    15d2:	35 81       	ldd	r19, Z+5	; 0x05
    15d4:	82 17       	cp	r24, r18
    15d6:	93 07       	cpc	r25, r19
    15d8:	10 f0       	brcs	.+4      	; 0x15de <prvWriteBytesToBuffer+0x74>
    15da:	82 1b       	sub	r24, r18
    15dc:	93 0b       	sbc	r25, r19
    15de:	f6 01       	movw	r30, r12
    15e0:	93 83       	std	Z+3, r25	; 0x03
    15e2:	82 83       	std	Z+2, r24	; 0x02
    15e4:	c7 01       	movw	r24, r14
    15e6:	df 91       	pop	r29
    15e8:	cf 91       	pop	r28
    15ea:	1f 91       	pop	r17
    15ec:	0f 91       	pop	r16
    15ee:	ff 90       	pop	r15
    15f0:	ef 90       	pop	r14
    15f2:	df 90       	pop	r13
    15f4:	cf 90       	pop	r12
    15f6:	bf 90       	pop	r11
    15f8:	af 90       	pop	r10
    15fa:	08 95       	ret

000015fc <prvWriteMessageToBuffer>:
    15fc:	cf 92       	push	r12
    15fe:	df 92       	push	r13
    1600:	ef 92       	push	r14
    1602:	ff 92       	push	r15
    1604:	0f 93       	push	r16
    1606:	1f 93       	push	r17
    1608:	cf 93       	push	r28
    160a:	df 93       	push	r29
    160c:	1f 92       	push	r1
    160e:	1f 92       	push	r1
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	5a 83       	std	Y+2, r21	; 0x02
    1616:	49 83       	std	Y+1, r20	; 0x01
    1618:	21 15       	cp	r18, r1
    161a:	31 05       	cpc	r19, r1
    161c:	c9 f0       	breq	.+50     	; 0x1650 <prvWriteMessageToBuffer+0x54>
    161e:	6b 01       	movw	r12, r22
    1620:	7c 01       	movw	r14, r24
    1622:	fc 01       	movw	r30, r24
    1624:	86 85       	ldd	r24, Z+14	; 0x0e
    1626:	80 fd       	sbrc	r24, 0
    1628:	08 c0       	rjmp	.+16     	; 0x163a <prvWriteMessageToBuffer+0x3e>
    162a:	ca 01       	movw	r24, r20
    162c:	24 17       	cp	r18, r20
    162e:	35 07       	cpc	r19, r21
    1630:	08 f4       	brcc	.+2      	; 0x1634 <prvWriteMessageToBuffer+0x38>
    1632:	c9 01       	movw	r24, r18
    1634:	9a 83       	std	Y+2, r25	; 0x02
    1636:	89 83       	std	Y+1, r24	; 0x01
    1638:	11 c0       	rjmp	.+34     	; 0x165c <prvWriteMessageToBuffer+0x60>
    163a:	20 17       	cp	r18, r16
    163c:	31 07       	cpc	r19, r17
    163e:	58 f0       	brcs	.+22     	; 0x1656 <prvWriteMessageToBuffer+0x5a>
    1640:	42 e0       	ldi	r20, 0x02	; 2
    1642:	50 e0       	ldi	r21, 0x00	; 0
    1644:	be 01       	movw	r22, r28
    1646:	6f 5f       	subi	r22, 0xFF	; 255
    1648:	7f 4f       	sbci	r23, 0xFF	; 255
    164a:	c7 01       	movw	r24, r14
    164c:	8e df       	rcall	.-228    	; 0x156a <prvWriteBytesToBuffer>
    164e:	06 c0       	rjmp	.+12     	; 0x165c <prvWriteMessageToBuffer+0x60>
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	08 c0       	rjmp	.+16     	; 0x1666 <prvWriteMessageToBuffer+0x6a>
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	05 c0       	rjmp	.+10     	; 0x1666 <prvWriteMessageToBuffer+0x6a>
    165c:	49 81       	ldd	r20, Y+1	; 0x01
    165e:	5a 81       	ldd	r21, Y+2	; 0x02
    1660:	b6 01       	movw	r22, r12
    1662:	c7 01       	movw	r24, r14
    1664:	82 df       	rcall	.-252    	; 0x156a <prvWriteBytesToBuffer>
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	df 91       	pop	r29
    166c:	cf 91       	pop	r28
    166e:	1f 91       	pop	r17
    1670:	0f 91       	pop	r16
    1672:	ff 90       	pop	r15
    1674:	ef 90       	pop	r14
    1676:	df 90       	pop	r13
    1678:	cf 90       	pop	r12
    167a:	08 95       	ret

0000167c <prvReadBytesFromBuffer>:
    167c:	af 92       	push	r10
    167e:	bf 92       	push	r11
    1680:	cf 92       	push	r12
    1682:	df 92       	push	r13
    1684:	ef 92       	push	r14
    1686:	ff 92       	push	r15
    1688:	0f 93       	push	r16
    168a:	1f 93       	push	r17
    168c:	cf 93       	push	r28
    168e:	df 93       	push	r29
    1690:	7c 01       	movw	r14, r24
    1692:	5b 01       	movw	r10, r22
    1694:	e9 01       	movw	r28, r18
    1696:	42 17       	cp	r20, r18
    1698:	53 07       	cpc	r21, r19
    169a:	08 f4       	brcc	.+2      	; 0x169e <prvReadBytesFromBuffer+0x22>
    169c:	ea 01       	movw	r28, r20
    169e:	20 97       	sbiw	r28, 0x00	; 0
    16a0:	79 f1       	breq	.+94     	; 0x1700 <prvReadBytesFromBuffer+0x84>
    16a2:	f7 01       	movw	r30, r14
    16a4:	00 81       	ld	r16, Z
    16a6:	11 81       	ldd	r17, Z+1	; 0x01
    16a8:	c4 80       	ldd	r12, Z+4	; 0x04
    16aa:	d5 80       	ldd	r13, Z+5	; 0x05
    16ac:	c0 1a       	sub	r12, r16
    16ae:	d1 0a       	sbc	r13, r17
    16b0:	cc 15       	cp	r28, r12
    16b2:	dd 05       	cpc	r29, r13
    16b4:	08 f4       	brcc	.+2      	; 0x16b8 <prvReadBytesFromBuffer+0x3c>
    16b6:	6e 01       	movw	r12, r28
    16b8:	f7 01       	movw	r30, r14
    16ba:	64 85       	ldd	r22, Z+12	; 0x0c
    16bc:	75 85       	ldd	r23, Z+13	; 0x0d
    16be:	60 0f       	add	r22, r16
    16c0:	71 1f       	adc	r23, r17
    16c2:	a6 01       	movw	r20, r12
    16c4:	c5 01       	movw	r24, r10
    16c6:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <memcpy>
    16ca:	cc 16       	cp	r12, r28
    16cc:	dd 06       	cpc	r13, r29
    16ce:	58 f4       	brcc	.+22     	; 0x16e6 <prvReadBytesFromBuffer+0x6a>
    16d0:	ae 01       	movw	r20, r28
    16d2:	4c 19       	sub	r20, r12
    16d4:	5d 09       	sbc	r21, r13
    16d6:	f7 01       	movw	r30, r14
    16d8:	64 85       	ldd	r22, Z+12	; 0x0c
    16da:	75 85       	ldd	r23, Z+13	; 0x0d
    16dc:	c5 01       	movw	r24, r10
    16de:	8c 0d       	add	r24, r12
    16e0:	9d 1d       	adc	r25, r13
    16e2:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <memcpy>
    16e6:	0c 0f       	add	r16, r28
    16e8:	1d 1f       	adc	r17, r29
    16ea:	f7 01       	movw	r30, r14
    16ec:	84 81       	ldd	r24, Z+4	; 0x04
    16ee:	95 81       	ldd	r25, Z+5	; 0x05
    16f0:	08 17       	cp	r16, r24
    16f2:	19 07       	cpc	r17, r25
    16f4:	10 f0       	brcs	.+4      	; 0x16fa <prvReadBytesFromBuffer+0x7e>
    16f6:	08 1b       	sub	r16, r24
    16f8:	19 0b       	sbc	r17, r25
    16fa:	f7 01       	movw	r30, r14
    16fc:	11 83       	std	Z+1, r17	; 0x01
    16fe:	00 83       	st	Z, r16
    1700:	ce 01       	movw	r24, r28
    1702:	df 91       	pop	r29
    1704:	cf 91       	pop	r28
    1706:	1f 91       	pop	r17
    1708:	0f 91       	pop	r16
    170a:	ff 90       	pop	r15
    170c:	ef 90       	pop	r14
    170e:	df 90       	pop	r13
    1710:	cf 90       	pop	r12
    1712:	bf 90       	pop	r11
    1714:	af 90       	pop	r10
    1716:	08 95       	ret

00001718 <xStreamBufferGenericCreate>:
    1718:	ef 92       	push	r14
    171a:	ff 92       	push	r15
    171c:	1f 93       	push	r17
    171e:	cf 93       	push	r28
    1720:	df 93       	push	r29
    1722:	eb 01       	movw	r28, r22
    1724:	11 e0       	ldi	r17, 0x01	; 1
    1726:	41 30       	cpi	r20, 0x01	; 1
    1728:	09 f0       	breq	.+2      	; 0x172c <xStreamBufferGenericCreate+0x14>
    172a:	10 e0       	ldi	r17, 0x00	; 0
    172c:	20 97       	sbiw	r28, 0x00	; 0
    172e:	11 f4       	brne	.+4      	; 0x1734 <xStreamBufferGenericCreate+0x1c>
    1730:	c1 e0       	ldi	r28, 0x01	; 1
    1732:	d0 e0       	ldi	r29, 0x00	; 0
    1734:	7c 01       	movw	r14, r24
    1736:	2f ef       	ldi	r18, 0xFF	; 255
    1738:	e2 1a       	sub	r14, r18
    173a:	f2 0a       	sbc	r15, r18
    173c:	41 96       	adiw	r24, 0x11	; 17
    173e:	59 d9       	rcall	.-3406   	; 0x9f2 <pvPortMalloc>
    1740:	00 97       	sbiw	r24, 0x00	; 0
    1742:	81 f0       	breq	.+32     	; 0x1764 <xStreamBufferGenericCreate+0x4c>
    1744:	20 e1       	ldi	r18, 0x10	; 16
    1746:	fc 01       	movw	r30, r24
    1748:	11 92       	st	Z+, r1
    174a:	2a 95       	dec	r18
    174c:	e9 f7       	brne	.-6      	; 0x1748 <xStreamBufferGenericCreate+0x30>
    174e:	9c 01       	movw	r18, r24
    1750:	20 5f       	subi	r18, 0xF0	; 240
    1752:	3f 4f       	sbci	r19, 0xFF	; 255
    1754:	fc 01       	movw	r30, r24
    1756:	35 87       	std	Z+13, r19	; 0x0d
    1758:	24 87       	std	Z+12, r18	; 0x0c
    175a:	f5 82       	std	Z+5, r15	; 0x05
    175c:	e4 82       	std	Z+4, r14	; 0x04
    175e:	d7 83       	std	Z+7, r29	; 0x07
    1760:	c6 83       	std	Z+6, r28	; 0x06
    1762:	16 87       	std	Z+14, r17	; 0x0e
    1764:	df 91       	pop	r29
    1766:	cf 91       	pop	r28
    1768:	1f 91       	pop	r17
    176a:	ff 90       	pop	r15
    176c:	ef 90       	pop	r14
    176e:	08 95       	ret

00001770 <xStreamBufferReset>:
    1770:	cf 93       	push	r28
    1772:	df 93       	push	r29
    1774:	fc 01       	movw	r30, r24
    1776:	27 85       	ldd	r18, Z+15	; 0x0f
    1778:	0f b6       	in	r0, 0x3f	; 63
    177a:	f8 94       	cli
    177c:	0f 92       	push	r0
    177e:	80 85       	ldd	r24, Z+8	; 0x08
    1780:	91 85       	ldd	r25, Z+9	; 0x09
    1782:	89 2b       	or	r24, r25
    1784:	d1 f4       	brne	.+52     	; 0x17ba <xStreamBufferReset+0x4a>
    1786:	82 85       	ldd	r24, Z+10	; 0x0a
    1788:	93 85       	ldd	r25, Z+11	; 0x0b
    178a:	89 2b       	or	r24, r25
    178c:	c1 f4       	brne	.+48     	; 0x17be <xStreamBufferReset+0x4e>
    178e:	86 85       	ldd	r24, Z+14	; 0x0e
    1790:	46 81       	ldd	r20, Z+6	; 0x06
    1792:	57 81       	ldd	r21, Z+7	; 0x07
    1794:	64 81       	ldd	r22, Z+4	; 0x04
    1796:	75 81       	ldd	r23, Z+5	; 0x05
    1798:	a4 85       	ldd	r26, Z+12	; 0x0c
    179a:	b5 85       	ldd	r27, Z+13	; 0x0d
    179c:	90 e1       	ldi	r25, 0x10	; 16
    179e:	ef 01       	movw	r28, r30
    17a0:	19 92       	st	Y+, r1
    17a2:	9a 95       	dec	r25
    17a4:	e9 f7       	brne	.-6      	; 0x17a0 <xStreamBufferReset+0x30>
    17a6:	b5 87       	std	Z+13, r27	; 0x0d
    17a8:	a4 87       	std	Z+12, r26	; 0x0c
    17aa:	75 83       	std	Z+5, r23	; 0x05
    17ac:	64 83       	std	Z+4, r22	; 0x04
    17ae:	57 83       	std	Z+7, r21	; 0x07
    17b0:	46 83       	std	Z+6, r20	; 0x06
    17b2:	86 87       	std	Z+14, r24	; 0x0e
    17b4:	27 87       	std	Z+15, r18	; 0x0f
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	03 c0       	rjmp	.+6      	; 0x17c0 <xStreamBufferReset+0x50>
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	01 c0       	rjmp	.+2      	; 0x17c0 <xStreamBufferReset+0x50>
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	0f 90       	pop	r0
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	df 91       	pop	r29
    17c6:	cf 91       	pop	r28
    17c8:	08 95       	ret

000017ca <xStreamBufferSpacesAvailable>:
    17ca:	fc 01       	movw	r30, r24
    17cc:	24 81       	ldd	r18, Z+4	; 0x04
    17ce:	35 81       	ldd	r19, Z+5	; 0x05
    17d0:	80 81       	ld	r24, Z
    17d2:	91 81       	ldd	r25, Z+1	; 0x01
    17d4:	42 81       	ldd	r20, Z+2	; 0x02
    17d6:	53 81       	ldd	r21, Z+3	; 0x03
    17d8:	82 0f       	add	r24, r18
    17da:	93 1f       	adc	r25, r19
    17dc:	01 97       	sbiw	r24, 0x01	; 1
    17de:	84 1b       	sub	r24, r20
    17e0:	95 0b       	sbc	r25, r21
    17e2:	82 17       	cp	r24, r18
    17e4:	93 07       	cpc	r25, r19
    17e6:	10 f0       	brcs	.+4      	; 0x17ec <xStreamBufferSpacesAvailable+0x22>
    17e8:	82 1b       	sub	r24, r18
    17ea:	93 0b       	sbc	r25, r19
    17ec:	08 95       	ret

000017ee <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    17ee:	af 92       	push	r10
    17f0:	bf 92       	push	r11
    17f2:	cf 92       	push	r12
    17f4:	df 92       	push	r13
    17f6:	ef 92       	push	r14
    17f8:	ff 92       	push	r15
    17fa:	0f 93       	push	r16
    17fc:	1f 93       	push	r17
    17fe:	cf 93       	push	r28
    1800:	df 93       	push	r29
    1802:	ec 01       	movw	r28, r24
    1804:	5b 01       	movw	r10, r22
    1806:	6a 01       	movw	r12, r20
    1808:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    180a:	8e 85       	ldd	r24, Y+14	; 0x0e
    180c:	80 ff       	sbrs	r24, 0
    180e:	04 c0       	rjmp	.+8      	; 0x1818 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1810:	8a 01       	movw	r16, r20
    1812:	0e 5f       	subi	r16, 0xFE	; 254
    1814:	1f 4f       	sbci	r17, 0xFF	; 255
    1816:	01 c0       	rjmp	.+2      	; 0x181a <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    1818:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    181a:	ce 01       	movw	r24, r28
    181c:	d6 df       	rcall	.-84     	; 0x17ca <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    181e:	9c 01       	movw	r18, r24
    1820:	a6 01       	movw	r20, r12
    1822:	b5 01       	movw	r22, r10
    1824:	ce 01       	movw	r24, r28
    1826:	ea de       	rcall	.-556    	; 0x15fc <prvWriteMessageToBuffer>
    1828:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    182a:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    182c:	b1 f0       	breq	.+44     	; 0x185a <xStreamBufferSendFromISR+0x6c>
    182e:	ce 01       	movw	r24, r28
    1830:	89 de       	rcall	.-750    	; 0x1544 <prvBytesInBuffer>
    1832:	2e 81       	ldd	r18, Y+6	; 0x06
    1834:	3f 81       	ldd	r19, Y+7	; 0x07
    1836:	82 17       	cp	r24, r18
    1838:	93 07       	cpc	r25, r19
    183a:	78 f0       	brcs	.+30     	; 0x185a <xStreamBufferSendFromISR+0x6c>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    183c:	88 85       	ldd	r24, Y+8	; 0x08
    183e:	99 85       	ldd	r25, Y+9	; 0x09
    1840:	89 2b       	or	r24, r25
    1842:	59 f0       	breq	.+22     	; 0x185a <xStreamBufferSendFromISR+0x6c>
    1844:	88 85       	ldd	r24, Y+8	; 0x08
    1846:	99 85       	ldd	r25, Y+9	; 0x09
    1848:	00 e0       	ldi	r16, 0x00	; 0
    184a:	10 e0       	ldi	r17, 0x00	; 0
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	40 e0       	ldi	r20, 0x00	; 0
    1850:	50 e0       	ldi	r21, 0x00	; 0
    1852:	ba 01       	movw	r22, r20
    1854:	2f d7       	rcall	.+3678   	; 0x26b4 <xTaskGenericNotifyFromISR>
    1856:	19 86       	std	Y+9, r1	; 0x09
    1858:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    185a:	c6 01       	movw	r24, r12
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	1f 91       	pop	r17
    1862:	0f 91       	pop	r16
    1864:	ff 90       	pop	r15
    1866:	ef 90       	pop	r14
    1868:	df 90       	pop	r13
    186a:	cf 90       	pop	r12
    186c:	bf 90       	pop	r11
    186e:	af 90       	pop	r10
    1870:	08 95       	ret

00001872 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1872:	6f 92       	push	r6
    1874:	7f 92       	push	r7
    1876:	8f 92       	push	r8
    1878:	9f 92       	push	r9
    187a:	af 92       	push	r10
    187c:	bf 92       	push	r11
    187e:	cf 92       	push	r12
    1880:	df 92       	push	r13
    1882:	ef 92       	push	r14
    1884:	ff 92       	push	r15
    1886:	0f 93       	push	r16
    1888:	1f 93       	push	r17
    188a:	cf 93       	push	r28
    188c:	df 93       	push	r29
    188e:	1f 92       	push	r1
    1890:	1f 92       	push	r1
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
    1896:	6c 01       	movw	r12, r24
    1898:	3b 01       	movw	r6, r22
    189a:	4a 01       	movw	r8, r20
    189c:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    189e:	fc 01       	movw	r30, r24
    18a0:	86 85       	ldd	r24, Z+14	; 0x0e
    18a2:	80 fd       	sbrc	r24, 0
    18a4:	03 c0       	rjmp	.+6      	; 0x18ac <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    18a6:	a1 2c       	mov	r10, r1
    18a8:	b1 2c       	mov	r11, r1
    18aa:	04 c0       	rjmp	.+8      	; 0x18b4 <xStreamBufferReceive+0x42>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    18ac:	68 94       	set
    18ae:	aa 24       	eor	r10, r10
    18b0:	a1 f8       	bld	r10, 1
    18b2:	b1 2c       	mov	r11, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    18b4:	e1 14       	cp	r14, r1
    18b6:	f1 04       	cpc	r15, r1
    18b8:	29 f1       	breq	.+74     	; 0x1904 <xStreamBufferReceive+0x92>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	f8 94       	cli
    18be:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    18c0:	c6 01       	movw	r24, r12
    18c2:	40 de       	rcall	.-896    	; 0x1544 <prvBytesInBuffer>
    18c4:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    18c6:	a8 16       	cp	r10, r24
    18c8:	b9 06       	cpc	r11, r25
    18ca:	38 f0       	brcs	.+14     	; 0x18da <xStreamBufferReceive+0x68>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	90 e0       	ldi	r25, 0x00	; 0

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    18d0:	81 d7       	rcall	.+3842   	; 0x27d4 <xTaskNotifyStateClear>
    18d2:	c8 d4       	rcall	.+2448   	; 0x2264 <xTaskGetCurrentTaskHandle>
    18d4:	f6 01       	movw	r30, r12
    18d6:	91 87       	std	Z+9, r25	; 0x09
    18d8:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    18da:	0f 90       	pop	r0
    18dc:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    18de:	a0 16       	cp	r10, r16
    18e0:	b1 06       	cpc	r11, r17
    18e2:	b0 f0       	brcs	.+44     	; 0x1910 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    18e4:	00 e0       	ldi	r16, 0x00	; 0
    18e6:	10 e0       	ldi	r17, 0x00	; 0
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	a9 01       	movw	r20, r18
    18ee:	60 e0       	ldi	r22, 0x00	; 0
    18f0:	70 e0       	ldi	r23, 0x00	; 0
    18f2:	cb 01       	movw	r24, r22
    18f4:	de d5       	rcall	.+3004   	; 0x24b2 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    18f6:	f6 01       	movw	r30, r12
    18f8:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    18fa:	10 86       	std	Z+8, r1	; 0x08
    18fc:	c6 01       	movw	r24, r12
    18fe:	22 de       	rcall	.-956    	; 0x1544 <prvBytesInBuffer>
    1900:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1902:	03 c0       	rjmp	.+6      	; 0x190a <xStreamBufferReceive+0x98>
    1904:	c6 01       	movw	r24, r12
    1906:	1e de       	rcall	.-964    	; 0x1544 <prvBytesInBuffer>
    1908:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    190a:	a0 16       	cp	r10, r16
    190c:	b1 06       	cpc	r11, r17
    190e:	b8 f5       	brcc	.+110    	; 0x197e <xStreamBufferReceive+0x10c>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    1910:	a1 14       	cp	r10, r1
    1912:	b1 04       	cpc	r11, r1
    1914:	c1 f0       	breq	.+48     	; 0x1946 <xStreamBufferReceive+0xd4>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    1916:	f6 01       	movw	r30, r12
    1918:	e0 80       	ld	r14, Z
    191a:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    191c:	98 01       	movw	r18, r16
    191e:	a5 01       	movw	r20, r10
    1920:	be 01       	movw	r22, r28
    1922:	6f 5f       	subi	r22, 0xFF	; 255
    1924:	7f 4f       	sbci	r23, 0xFF	; 255
    1926:	c6 01       	movw	r24, r12
    1928:	a9 de       	rcall	.-686    	; 0x167c <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    192a:	89 81       	ldd	r24, Y+1	; 0x01
    192c:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    192e:	0a 19       	sub	r16, r10
    1930:	1b 09       	sbc	r17, r11

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    1932:	88 16       	cp	r8, r24
    1934:	99 06       	cpc	r9, r25
    1936:	30 f4       	brcc	.+12     	; 0x1944 <xStreamBufferReceive+0xd2>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    1938:	f6 01       	movw	r30, r12
    193a:	f1 82       	std	Z+1, r15	; 0x01
    193c:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    193e:	81 2c       	mov	r8, r1
    1940:	91 2c       	mov	r9, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    1942:	01 c0       	rjmp	.+2      	; 0x1946 <xStreamBufferReceive+0xd4>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    1944:	4c 01       	movw	r8, r24
    1946:	98 01       	movw	r18, r16
    1948:	a4 01       	movw	r20, r8
    194a:	b3 01       	movw	r22, r6
    194c:	c6 01       	movw	r24, r12
    194e:	96 de       	rcall	.-724    	; 0x167c <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1950:	7c 01       	movw	r14, r24
    1952:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1954:	b1 f0       	breq	.+44     	; 0x1982 <xStreamBufferReceive+0x110>
    1956:	eb d1       	rcall	.+982    	; 0x1d2e <vTaskSuspendAll>
    1958:	f6 01       	movw	r30, r12
    195a:	82 85       	ldd	r24, Z+10	; 0x0a
    195c:	93 85       	ldd	r25, Z+11	; 0x0b
    195e:	89 2b       	or	r24, r25
    1960:	61 f0       	breq	.+24     	; 0x197a <xStreamBufferReceive+0x108>
    1962:	82 85       	ldd	r24, Z+10	; 0x0a
    1964:	93 85       	ldd	r25, Z+11	; 0x0b
    1966:	00 e0       	ldi	r16, 0x00	; 0
    1968:	10 e0       	ldi	r17, 0x00	; 0
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	40 e0       	ldi	r20, 0x00	; 0
    196e:	50 e0       	ldi	r21, 0x00	; 0
    1970:	ba 01       	movw	r22, r20
    1972:	22 d6       	rcall	.+3140   	; 0x25b8 <xTaskGenericNotify>
    1974:	f6 01       	movw	r30, r12
    1976:	13 86       	std	Z+11, r1	; 0x0b
    1978:	12 86       	std	Z+10, r1	; 0x0a
    197a:	a3 d2       	rcall	.+1350   	; 0x1ec2 <xTaskResumeAll>
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <xStreamBufferReceive+0x110>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    197e:	e1 2c       	mov	r14, r1
    1980:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1982:	c7 01       	movw	r24, r14
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	df 91       	pop	r29
    198a:	cf 91       	pop	r28
    198c:	1f 91       	pop	r17
    198e:	0f 91       	pop	r16
    1990:	ff 90       	pop	r15
    1992:	ef 90       	pop	r14
    1994:	df 90       	pop	r13
    1996:	cf 90       	pop	r12
    1998:	bf 90       	pop	r11
    199a:	af 90       	pop	r10
    199c:	9f 90       	pop	r9
    199e:	8f 90       	pop	r8
    19a0:	7f 90       	pop	r7
    19a2:	6f 90       	pop	r6
    19a4:	08 95       	ret

000019a6 <prvResetNextTaskUnblockTime>:
    19a6:	e0 91 10 08 	lds	r30, 0x0810	; 0x800810 <pxDelayedTaskList>
    19aa:	f0 91 11 08 	lds	r31, 0x0811	; 0x800811 <pxDelayedTaskList+0x1>
    19ae:	80 81       	ld	r24, Z
    19b0:	81 11       	cpse	r24, r1
    19b2:	07 c0       	rjmp	.+14     	; 0x19c2 <prvResetNextTaskUnblockTime+0x1c>
    19b4:	8f ef       	ldi	r24, 0xFF	; 255
    19b6:	9f ef       	ldi	r25, 0xFF	; 255
    19b8:	90 93 e8 07 	sts	0x07E8, r25	; 0x8007e8 <xNextTaskUnblockTime+0x1>
    19bc:	80 93 e7 07 	sts	0x07E7, r24	; 0x8007e7 <xNextTaskUnblockTime>
    19c0:	08 95       	ret
    19c2:	e0 91 10 08 	lds	r30, 0x0810	; 0x800810 <pxDelayedTaskList>
    19c6:	f0 91 11 08 	lds	r31, 0x0811	; 0x800811 <pxDelayedTaskList+0x1>
    19ca:	05 80       	ldd	r0, Z+5	; 0x05
    19cc:	f6 81       	ldd	r31, Z+6	; 0x06
    19ce:	e0 2d       	mov	r30, r0
    19d0:	06 80       	ldd	r0, Z+6	; 0x06
    19d2:	f7 81       	ldd	r31, Z+7	; 0x07
    19d4:	e0 2d       	mov	r30, r0
    19d6:	82 81       	ldd	r24, Z+2	; 0x02
    19d8:	93 81       	ldd	r25, Z+3	; 0x03
    19da:	90 93 e8 07 	sts	0x07E8, r25	; 0x8007e8 <xNextTaskUnblockTime+0x1>
    19de:	80 93 e7 07 	sts	0x07E7, r24	; 0x8007e7 <xNextTaskUnblockTime>
    19e2:	08 95       	ret

000019e4 <prvAddCurrentTaskToDelayedList>:
    19e4:	ff 92       	push	r15
    19e6:	0f 93       	push	r16
    19e8:	1f 93       	push	r17
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	ec 01       	movw	r28, r24
    19f0:	f6 2e       	mov	r15, r22
    19f2:	00 91 ef 07 	lds	r16, 0x07EF	; 0x8007ef <xTickCount>
    19f6:	10 91 f0 07 	lds	r17, 0x07F0	; 0x8007f0 <xTickCount+0x1>
    19fa:	80 91 48 08 	lds	r24, 0x0848	; 0x800848 <pxCurrentTCB>
    19fe:	90 91 49 08 	lds	r25, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    1a02:	02 96       	adiw	r24, 0x02	; 2
    1a04:	7c d8       	rcall	.-3848   	; 0xafe <uxListRemove>
    1a06:	cf 3f       	cpi	r28, 0xFF	; 255
    1a08:	8f ef       	ldi	r24, 0xFF	; 255
    1a0a:	d8 07       	cpc	r29, r24
    1a0c:	61 f4       	brne	.+24     	; 0x1a26 <prvAddCurrentTaskToDelayedList+0x42>
    1a0e:	ff 20       	and	r15, r15
    1a10:	51 f0       	breq	.+20     	; 0x1a26 <prvAddCurrentTaskToDelayedList+0x42>
    1a12:	60 91 48 08 	lds	r22, 0x0848	; 0x800848 <pxCurrentTCB>
    1a16:	70 91 49 08 	lds	r23, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    1a1a:	6e 5f       	subi	r22, 0xFE	; 254
    1a1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a1e:	82 ef       	ldi	r24, 0xF2	; 242
    1a20:	97 e0       	ldi	r25, 0x07	; 7
    1a22:	1b d8       	rcall	.-4042   	; 0xa5a <vListInsertEnd>
    1a24:	2d c0       	rjmp	.+90     	; 0x1a80 <prvAddCurrentTaskToDelayedList+0x9c>
    1a26:	c0 0f       	add	r28, r16
    1a28:	d1 1f       	adc	r29, r17
    1a2a:	e0 91 48 08 	lds	r30, 0x0848	; 0x800848 <pxCurrentTCB>
    1a2e:	f0 91 49 08 	lds	r31, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    1a32:	d3 83       	std	Z+3, r29	; 0x03
    1a34:	c2 83       	std	Z+2, r28	; 0x02
    1a36:	c0 17       	cp	r28, r16
    1a38:	d1 07       	cpc	r29, r17
    1a3a:	60 f4       	brcc	.+24     	; 0x1a54 <prvAddCurrentTaskToDelayedList+0x70>
    1a3c:	60 91 48 08 	lds	r22, 0x0848	; 0x800848 <pxCurrentTCB>
    1a40:	70 91 49 08 	lds	r23, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    1a44:	80 91 0e 08 	lds	r24, 0x080E	; 0x80080e <pxOverflowDelayedTaskList>
    1a48:	90 91 0f 08 	lds	r25, 0x080F	; 0x80080f <pxOverflowDelayedTaskList+0x1>
    1a4c:	6e 5f       	subi	r22, 0xFE	; 254
    1a4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a50:	25 d8       	rcall	.-4022   	; 0xa9c <vListInsert>
    1a52:	16 c0       	rjmp	.+44     	; 0x1a80 <prvAddCurrentTaskToDelayedList+0x9c>
    1a54:	60 91 48 08 	lds	r22, 0x0848	; 0x800848 <pxCurrentTCB>
    1a58:	70 91 49 08 	lds	r23, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    1a5c:	80 91 10 08 	lds	r24, 0x0810	; 0x800810 <pxDelayedTaskList>
    1a60:	90 91 11 08 	lds	r25, 0x0811	; 0x800811 <pxDelayedTaskList+0x1>
    1a64:	6e 5f       	subi	r22, 0xFE	; 254
    1a66:	7f 4f       	sbci	r23, 0xFF	; 255
    1a68:	19 d8       	rcall	.-4046   	; 0xa9c <vListInsert>
    1a6a:	80 91 e7 07 	lds	r24, 0x07E7	; 0x8007e7 <xNextTaskUnblockTime>
    1a6e:	90 91 e8 07 	lds	r25, 0x07E8	; 0x8007e8 <xNextTaskUnblockTime+0x1>
    1a72:	c8 17       	cp	r28, r24
    1a74:	d9 07       	cpc	r29, r25
    1a76:	20 f4       	brcc	.+8      	; 0x1a80 <prvAddCurrentTaskToDelayedList+0x9c>
    1a78:	d0 93 e8 07 	sts	0x07E8, r29	; 0x8007e8 <xNextTaskUnblockTime+0x1>
    1a7c:	c0 93 e7 07 	sts	0x07E7, r28	; 0x8007e7 <xNextTaskUnblockTime>
    1a80:	df 91       	pop	r29
    1a82:	cf 91       	pop	r28
    1a84:	1f 91       	pop	r17
    1a86:	0f 91       	pop	r16
    1a88:	ff 90       	pop	r15
    1a8a:	08 95       	ret

00001a8c <xTaskCreate>:
    1a8c:	4f 92       	push	r4
    1a8e:	5f 92       	push	r5
    1a90:	6f 92       	push	r6
    1a92:	7f 92       	push	r7
    1a94:	8f 92       	push	r8
    1a96:	9f 92       	push	r9
    1a98:	af 92       	push	r10
    1a9a:	bf 92       	push	r11
    1a9c:	cf 92       	push	r12
    1a9e:	df 92       	push	r13
    1aa0:	ef 92       	push	r14
    1aa2:	ff 92       	push	r15
    1aa4:	0f 93       	push	r16
    1aa6:	cf 93       	push	r28
    1aa8:	df 93       	push	r29
    1aaa:	4c 01       	movw	r8, r24
    1aac:	6b 01       	movw	r12, r22
    1aae:	5a 01       	movw	r10, r20
    1ab0:	29 01       	movw	r4, r18
    1ab2:	ca 01       	movw	r24, r20
    1ab4:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <pvPortMalloc>
    1ab8:	3c 01       	movw	r6, r24
    1aba:	89 2b       	or	r24, r25
    1abc:	09 f4       	brne	.+2      	; 0x1ac0 <xTaskCreate+0x34>
    1abe:	f3 c0       	rjmp	.+486    	; 0x1ca6 <xTaskCreate+0x21a>
    1ac0:	8c e2       	ldi	r24, 0x2C	; 44
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <pvPortMalloc>
    1ac8:	ec 01       	movw	r28, r24
    1aca:	89 2b       	or	r24, r25
    1acc:	99 f0       	breq	.+38     	; 0x1af4 <xTaskCreate+0x68>
    1ace:	78 8e       	std	Y+24, r7	; 0x18
    1ad0:	6f 8a       	std	Y+23, r6	; 0x17
    1ad2:	a5 01       	movw	r20, r10
    1ad4:	65 ea       	ldi	r22, 0xA5	; 165
    1ad6:	70 e0       	ldi	r23, 0x00	; 0
    1ad8:	c3 01       	movw	r24, r6
    1ada:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <memset>
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	a8 1a       	sub	r10, r24
    1ae2:	b1 08       	sbc	r11, r1
    1ae4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ae8:	a8 0e       	add	r10, r24
    1aea:	b9 1e       	adc	r11, r25
    1aec:	c1 14       	cp	r12, r1
    1aee:	d1 04       	cpc	r13, r1
    1af0:	29 f4       	brne	.+10     	; 0x1afc <xTaskCreate+0x70>
    1af2:	20 c0       	rjmp	.+64     	; 0x1b34 <xTaskCreate+0xa8>
    1af4:	c3 01       	movw	r24, r6
    1af6:	0e 94 0c 05 	call	0xa18	; 0xa18 <vPortFree>
    1afa:	d5 c0       	rjmp	.+426    	; 0x1ca6 <xTaskCreate+0x21a>
    1afc:	d6 01       	movw	r26, r12
    1afe:	8c 91       	ld	r24, X
    1b00:	89 8f       	std	Y+25, r24	; 0x19
    1b02:	8c 91       	ld	r24, X
    1b04:	88 23       	and	r24, r24
    1b06:	a1 f0       	breq	.+40     	; 0x1b30 <xTaskCreate+0xa4>
    1b08:	ae 01       	movw	r20, r28
    1b0a:	46 5e       	subi	r20, 0xE6	; 230
    1b0c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b0e:	f6 01       	movw	r30, r12
    1b10:	31 96       	adiw	r30, 0x01	; 1
    1b12:	b8 e0       	ldi	r27, 0x08	; 8
    1b14:	cb 0e       	add	r12, r27
    1b16:	d1 1c       	adc	r13, r1
    1b18:	cf 01       	movw	r24, r30
    1b1a:	21 91       	ld	r18, Z+
    1b1c:	da 01       	movw	r26, r20
    1b1e:	2d 93       	st	X+, r18
    1b20:	ad 01       	movw	r20, r26
    1b22:	dc 01       	movw	r26, r24
    1b24:	8c 91       	ld	r24, X
    1b26:	88 23       	and	r24, r24
    1b28:	19 f0       	breq	.+6      	; 0x1b30 <xTaskCreate+0xa4>
    1b2a:	ec 15       	cp	r30, r12
    1b2c:	fd 05       	cpc	r31, r13
    1b2e:	a1 f7       	brne	.-24     	; 0x1b18 <xTaskCreate+0x8c>
    1b30:	18 a2       	std	Y+32, r1	; 0x20
    1b32:	01 c0       	rjmp	.+2      	; 0x1b36 <xTaskCreate+0xaa>
    1b34:	19 8e       	std	Y+25, r1	; 0x19
    1b36:	04 30       	cpi	r16, 0x04	; 4
    1b38:	08 f0       	brcs	.+2      	; 0x1b3c <xTaskCreate+0xb0>
    1b3a:	03 e0       	ldi	r16, 0x03	; 3
    1b3c:	0e 8b       	std	Y+22, r16	; 0x16
    1b3e:	0b a3       	std	Y+35, r16	; 0x23
    1b40:	1c a2       	std	Y+36, r1	; 0x24
    1b42:	6e 01       	movw	r12, r28
    1b44:	b2 e0       	ldi	r27, 0x02	; 2
    1b46:	cb 0e       	add	r12, r27
    1b48:	d1 1c       	adc	r13, r1
    1b4a:	c6 01       	movw	r24, r12
    1b4c:	0e 94 29 05 	call	0xa52	; 0xa52 <vListInitialiseItem>
    1b50:	ce 01       	movw	r24, r28
    1b52:	0c 96       	adiw	r24, 0x0c	; 12
    1b54:	0e 94 29 05 	call	0xa52	; 0xa52 <vListInitialiseItem>
    1b58:	d9 87       	std	Y+9, r29	; 0x09
    1b5a:	c8 87       	std	Y+8, r28	; 0x08
    1b5c:	84 e0       	ldi	r24, 0x04	; 4
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	80 1b       	sub	r24, r16
    1b62:	91 09       	sbc	r25, r1
    1b64:	9d 87       	std	Y+13, r25	; 0x0d
    1b66:	8c 87       	std	Y+12, r24	; 0x0c
    1b68:	db 8b       	std	Y+19, r29	; 0x13
    1b6a:	ca 8b       	std	Y+18, r28	; 0x12
    1b6c:	1e a2       	std	Y+38, r1	; 0x26
    1b6e:	1d a2       	std	Y+37, r1	; 0x25
    1b70:	1f a2       	std	Y+39, r1	; 0x27
    1b72:	18 a6       	std	Y+40, r1	; 0x28
    1b74:	19 a6       	std	Y+41, r1	; 0x29
    1b76:	1a a6       	std	Y+42, r1	; 0x2a
    1b78:	1b a6       	std	Y+43, r1	; 0x2b
    1b7a:	a2 01       	movw	r20, r4
    1b7c:	b4 01       	movw	r22, r8
    1b7e:	c5 01       	movw	r24, r10
    1b80:	0e 94 a6 05 	call	0xb4c	; 0xb4c <pxPortInitialiseStack>
    1b84:	99 83       	std	Y+1, r25	; 0x01
    1b86:	88 83       	st	Y, r24
    1b88:	e1 14       	cp	r14, r1
    1b8a:	f1 04       	cpc	r15, r1
    1b8c:	19 f0       	breq	.+6      	; 0x1b94 <xTaskCreate+0x108>
    1b8e:	f7 01       	movw	r30, r14
    1b90:	d1 83       	std	Z+1, r29	; 0x01
    1b92:	c0 83       	st	Z, r28
    1b94:	0f b6       	in	r0, 0x3f	; 63
    1b96:	f8 94       	cli
    1b98:	0f 92       	push	r0
    1b9a:	80 91 f1 07 	lds	r24, 0x07F1	; 0x8007f1 <uxCurrentNumberOfTasks>
    1b9e:	8f 5f       	subi	r24, 0xFF	; 255
    1ba0:	80 93 f1 07 	sts	0x07F1, r24	; 0x8007f1 <uxCurrentNumberOfTasks>
    1ba4:	80 91 48 08 	lds	r24, 0x0848	; 0x800848 <pxCurrentTCB>
    1ba8:	90 91 49 08 	lds	r25, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    1bac:	89 2b       	or	r24, r25
    1bae:	d1 f5       	brne	.+116    	; 0x1c24 <xTaskCreate+0x198>
    1bb0:	d0 93 49 08 	sts	0x0849, r29	; 0x800849 <pxCurrentTCB+0x1>
    1bb4:	c0 93 48 08 	sts	0x0848, r28	; 0x800848 <pxCurrentTCB>
    1bb8:	80 91 f1 07 	lds	r24, 0x07F1	; 0x8007f1 <uxCurrentNumberOfTasks>
    1bbc:	81 30       	cpi	r24, 0x01	; 1
    1bbe:	09 f0       	breq	.+2      	; 0x1bc2 <xTaskCreate+0x136>
    1bc0:	41 c0       	rjmp	.+130    	; 0x1c44 <xTaskCreate+0x1b8>
    1bc2:	84 e2       	ldi	r24, 0x24	; 36
    1bc4:	98 e0       	ldi	r25, 0x08	; 8
    1bc6:	0e 94 1b 05 	call	0xa36	; 0xa36 <vListInitialise>
    1bca:	8d e2       	ldi	r24, 0x2D	; 45
    1bcc:	98 e0       	ldi	r25, 0x08	; 8
    1bce:	0e 94 1b 05 	call	0xa36	; 0xa36 <vListInitialise>
    1bd2:	86 e3       	ldi	r24, 0x36	; 54
    1bd4:	98 e0       	ldi	r25, 0x08	; 8
    1bd6:	0e 94 1b 05 	call	0xa36	; 0xa36 <vListInitialise>
    1bda:	8f e3       	ldi	r24, 0x3F	; 63
    1bdc:	98 e0       	ldi	r25, 0x08	; 8
    1bde:	0e 94 1b 05 	call	0xa36	; 0xa36 <vListInitialise>
    1be2:	8b e1       	ldi	r24, 0x1B	; 27
    1be4:	98 e0       	ldi	r25, 0x08	; 8
    1be6:	0e 94 1b 05 	call	0xa36	; 0xa36 <vListInitialise>
    1bea:	82 e1       	ldi	r24, 0x12	; 18
    1bec:	98 e0       	ldi	r25, 0x08	; 8
    1bee:	0e 94 1b 05 	call	0xa36	; 0xa36 <vListInitialise>
    1bf2:	85 e0       	ldi	r24, 0x05	; 5
    1bf4:	98 e0       	ldi	r25, 0x08	; 8
    1bf6:	0e 94 1b 05 	call	0xa36	; 0xa36 <vListInitialise>
    1bfa:	8c ef       	ldi	r24, 0xFC	; 252
    1bfc:	97 e0       	ldi	r25, 0x07	; 7
    1bfe:	0e 94 1b 05 	call	0xa36	; 0xa36 <vListInitialise>
    1c02:	82 ef       	ldi	r24, 0xF2	; 242
    1c04:	97 e0       	ldi	r25, 0x07	; 7
    1c06:	0e 94 1b 05 	call	0xa36	; 0xa36 <vListInitialise>
    1c0a:	8b e1       	ldi	r24, 0x1B	; 27
    1c0c:	98 e0       	ldi	r25, 0x08	; 8
    1c0e:	90 93 11 08 	sts	0x0811, r25	; 0x800811 <pxDelayedTaskList+0x1>
    1c12:	80 93 10 08 	sts	0x0810, r24	; 0x800810 <pxDelayedTaskList>
    1c16:	82 e1       	ldi	r24, 0x12	; 18
    1c18:	98 e0       	ldi	r25, 0x08	; 8
    1c1a:	90 93 0f 08 	sts	0x080F, r25	; 0x80080f <pxOverflowDelayedTaskList+0x1>
    1c1e:	80 93 0e 08 	sts	0x080E, r24	; 0x80080e <pxOverflowDelayedTaskList>
    1c22:	10 c0       	rjmp	.+32     	; 0x1c44 <xTaskCreate+0x1b8>
    1c24:	80 91 ed 07 	lds	r24, 0x07ED	; 0x8007ed <xSchedulerRunning>
    1c28:	81 11       	cpse	r24, r1
    1c2a:	0c c0       	rjmp	.+24     	; 0x1c44 <xTaskCreate+0x1b8>
    1c2c:	e0 91 48 08 	lds	r30, 0x0848	; 0x800848 <pxCurrentTCB>
    1c30:	f0 91 49 08 	lds	r31, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    1c34:	96 89       	ldd	r25, Z+22	; 0x16
    1c36:	8e 89       	ldd	r24, Y+22	; 0x16
    1c38:	89 17       	cp	r24, r25
    1c3a:	20 f0       	brcs	.+8      	; 0x1c44 <xTaskCreate+0x1b8>
    1c3c:	d0 93 49 08 	sts	0x0849, r29	; 0x800849 <pxCurrentTCB+0x1>
    1c40:	c0 93 48 08 	sts	0x0848, r28	; 0x800848 <pxCurrentTCB>
    1c44:	80 91 e9 07 	lds	r24, 0x07E9	; 0x8007e9 <uxTaskNumber>
    1c48:	8f 5f       	subi	r24, 0xFF	; 255
    1c4a:	80 93 e9 07 	sts	0x07E9, r24	; 0x8007e9 <uxTaskNumber>
    1c4e:	89 a3       	std	Y+33, r24	; 0x21
    1c50:	8e 89       	ldd	r24, Y+22	; 0x16
    1c52:	90 91 ee 07 	lds	r25, 0x07EE	; 0x8007ee <uxTopReadyPriority>
    1c56:	98 17       	cp	r25, r24
    1c58:	10 f4       	brcc	.+4      	; 0x1c5e <xTaskCreate+0x1d2>
    1c5a:	80 93 ee 07 	sts	0x07EE, r24	; 0x8007ee <uxTopReadyPriority>
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	9c 01       	movw	r18, r24
    1c62:	22 0f       	add	r18, r18
    1c64:	33 1f       	adc	r19, r19
    1c66:	22 0f       	add	r18, r18
    1c68:	33 1f       	adc	r19, r19
    1c6a:	22 0f       	add	r18, r18
    1c6c:	33 1f       	adc	r19, r19
    1c6e:	82 0f       	add	r24, r18
    1c70:	93 1f       	adc	r25, r19
    1c72:	b6 01       	movw	r22, r12
    1c74:	8c 5d       	subi	r24, 0xDC	; 220
    1c76:	97 4f       	sbci	r25, 0xF7	; 247
    1c78:	0e 94 2d 05 	call	0xa5a	; 0xa5a <vListInsertEnd>
    1c7c:	0f 90       	pop	r0
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	80 91 ed 07 	lds	r24, 0x07ED	; 0x8007ed <xSchedulerRunning>
    1c84:	88 23       	and	r24, r24
    1c86:	59 f0       	breq	.+22     	; 0x1c9e <xTaskCreate+0x212>
    1c88:	e0 91 48 08 	lds	r30, 0x0848	; 0x800848 <pxCurrentTCB>
    1c8c:	f0 91 49 08 	lds	r31, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    1c90:	96 89       	ldd	r25, Z+22	; 0x16
    1c92:	8e 89       	ldd	r24, Y+22	; 0x16
    1c94:	98 17       	cp	r25, r24
    1c96:	28 f4       	brcc	.+10     	; 0x1ca2 <xTaskCreate+0x216>
    1c98:	07 d8       	rcall	.-4082   	; 0xca8 <vPortYield>
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	05 c0       	rjmp	.+10     	; 0x1ca8 <xTaskCreate+0x21c>
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	03 c0       	rjmp	.+6      	; 0x1ca8 <xTaskCreate+0x21c>
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	01 c0       	rjmp	.+2      	; 0x1ca8 <xTaskCreate+0x21c>
    1ca6:	8f ef       	ldi	r24, 0xFF	; 255
    1ca8:	df 91       	pop	r29
    1caa:	cf 91       	pop	r28
    1cac:	0f 91       	pop	r16
    1cae:	ff 90       	pop	r15
    1cb0:	ef 90       	pop	r14
    1cb2:	df 90       	pop	r13
    1cb4:	cf 90       	pop	r12
    1cb6:	bf 90       	pop	r11
    1cb8:	af 90       	pop	r10
    1cba:	9f 90       	pop	r9
    1cbc:	8f 90       	pop	r8
    1cbe:	7f 90       	pop	r7
    1cc0:	6f 90       	pop	r6
    1cc2:	5f 90       	pop	r5
    1cc4:	4f 90       	pop	r4
    1cc6:	08 95       	ret

00001cc8 <vTaskStartScheduler>:
    1cc8:	ef 92       	push	r14
    1cca:	ff 92       	push	r15
    1ccc:	0f 93       	push	r16
    1cce:	0f 2e       	mov	r0, r31
    1cd0:	f5 ee       	ldi	r31, 0xE5	; 229
    1cd2:	ef 2e       	mov	r14, r31
    1cd4:	f7 e0       	ldi	r31, 0x07	; 7
    1cd6:	ff 2e       	mov	r15, r31
    1cd8:	f0 2d       	mov	r31, r0
    1cda:	00 e0       	ldi	r16, 0x00	; 0
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	40 ec       	ldi	r20, 0xC0	; 192
    1ce2:	50 e0       	ldi	r21, 0x00	; 0
    1ce4:	65 ef       	ldi	r22, 0xF5	; 245
    1ce6:	74 e0       	ldi	r23, 0x04	; 4
    1ce8:	8d ec       	ldi	r24, 0xCD	; 205
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	cf de       	rcall	.-610    	; 0x1a8c <xTaskCreate>
    1cee:	81 30       	cpi	r24, 0x01	; 1
    1cf0:	d1 f4       	brne	.+52     	; 0x1d26 <vTaskStartScheduler+0x5e>
    1cf2:	dc d5       	rcall	.+3000   	; 0x28ac <xTimerCreateTimerTask>
    1cf4:	81 30       	cpi	r24, 0x01	; 1
    1cf6:	b9 f4       	brne	.+46     	; 0x1d26 <vTaskStartScheduler+0x5e>
    1cf8:	f8 94       	cli
    1cfa:	8f ef       	ldi	r24, 0xFF	; 255
    1cfc:	9f ef       	ldi	r25, 0xFF	; 255
    1cfe:	90 93 e8 07 	sts	0x07E8, r25	; 0x8007e8 <xNextTaskUnblockTime+0x1>
    1d02:	80 93 e7 07 	sts	0x07E7, r24	; 0x8007e7 <xNextTaskUnblockTime>
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	80 93 ed 07 	sts	0x07ED, r24	; 0x8007ed <xSchedulerRunning>
    1d0c:	10 92 f0 07 	sts	0x07F0, r1	; 0x8007f0 <xTickCount+0x1>
    1d10:	10 92 ef 07 	sts	0x07EF, r1	; 0x8007ef <xTickCount>
    1d14:	e0 91 48 08 	lds	r30, 0x0848	; 0x800848 <pxCurrentTCB>
    1d18:	f0 91 49 08 	lds	r31, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    1d1c:	85 a1       	ldd	r24, Z+37	; 0x25
    1d1e:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <task_switch_in>
    1d22:	0e 94 18 06 	call	0xc30	; 0xc30 <xPortStartScheduler>
    1d26:	0f 91       	pop	r16
    1d28:	ff 90       	pop	r15
    1d2a:	ef 90       	pop	r14
    1d2c:	08 95       	ret

00001d2e <vTaskSuspendAll>:
    1d2e:	80 91 e4 07 	lds	r24, 0x07E4	; 0x8007e4 <uxSchedulerSuspended>
    1d32:	8f 5f       	subi	r24, 0xFF	; 255
    1d34:	80 93 e4 07 	sts	0x07E4, r24	; 0x8007e4 <uxSchedulerSuspended>
    1d38:	08 95       	ret

00001d3a <xTaskGetTickCount>:
    1d3a:	0f b6       	in	r0, 0x3f	; 63
    1d3c:	f8 94       	cli
    1d3e:	0f 92       	push	r0
    1d40:	80 91 ef 07 	lds	r24, 0x07EF	; 0x8007ef <xTickCount>
    1d44:	90 91 f0 07 	lds	r25, 0x07F0	; 0x8007f0 <xTickCount+0x1>
    1d48:	0f 90       	pop	r0
    1d4a:	0f be       	out	0x3f, r0	; 63
    1d4c:	08 95       	ret

00001d4e <xTaskIncrementTick>:
    1d4e:	cf 92       	push	r12
    1d50:	df 92       	push	r13
    1d52:	ef 92       	push	r14
    1d54:	ff 92       	push	r15
    1d56:	0f 93       	push	r16
    1d58:	1f 93       	push	r17
    1d5a:	cf 93       	push	r28
    1d5c:	df 93       	push	r29
    1d5e:	80 91 e4 07 	lds	r24, 0x07E4	; 0x8007e4 <uxSchedulerSuspended>
    1d62:	81 11       	cpse	r24, r1
    1d64:	98 c0       	rjmp	.+304    	; 0x1e96 <xTaskIncrementTick+0x148>
    1d66:	e0 90 ef 07 	lds	r14, 0x07EF	; 0x8007ef <xTickCount>
    1d6a:	f0 90 f0 07 	lds	r15, 0x07F0	; 0x8007f0 <xTickCount+0x1>
    1d6e:	8f ef       	ldi	r24, 0xFF	; 255
    1d70:	e8 1a       	sub	r14, r24
    1d72:	f8 0a       	sbc	r15, r24
    1d74:	f0 92 f0 07 	sts	0x07F0, r15	; 0x8007f0 <xTickCount+0x1>
    1d78:	e0 92 ef 07 	sts	0x07EF, r14	; 0x8007ef <xTickCount>
    1d7c:	e1 14       	cp	r14, r1
    1d7e:	f1 04       	cpc	r15, r1
    1d80:	b1 f4       	brne	.+44     	; 0x1dae <xTaskIncrementTick+0x60>
    1d82:	80 91 10 08 	lds	r24, 0x0810	; 0x800810 <pxDelayedTaskList>
    1d86:	90 91 11 08 	lds	r25, 0x0811	; 0x800811 <pxDelayedTaskList+0x1>
    1d8a:	20 91 0e 08 	lds	r18, 0x080E	; 0x80080e <pxOverflowDelayedTaskList>
    1d8e:	30 91 0f 08 	lds	r19, 0x080F	; 0x80080f <pxOverflowDelayedTaskList+0x1>
    1d92:	30 93 11 08 	sts	0x0811, r19	; 0x800811 <pxDelayedTaskList+0x1>
    1d96:	20 93 10 08 	sts	0x0810, r18	; 0x800810 <pxDelayedTaskList>
    1d9a:	90 93 0f 08 	sts	0x080F, r25	; 0x80080f <pxOverflowDelayedTaskList+0x1>
    1d9e:	80 93 0e 08 	sts	0x080E, r24	; 0x80080e <pxOverflowDelayedTaskList>
    1da2:	80 91 ea 07 	lds	r24, 0x07EA	; 0x8007ea <xNumOfOverflows>
    1da6:	8f 5f       	subi	r24, 0xFF	; 255
    1da8:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <xNumOfOverflows>
    1dac:	fc dd       	rcall	.-1032   	; 0x19a6 <prvResetNextTaskUnblockTime>
    1dae:	80 91 e7 07 	lds	r24, 0x07E7	; 0x8007e7 <xNextTaskUnblockTime>
    1db2:	90 91 e8 07 	lds	r25, 0x07E8	; 0x8007e8 <xNextTaskUnblockTime+0x1>
    1db6:	e8 16       	cp	r14, r24
    1db8:	f9 06       	cpc	r15, r25
    1dba:	10 f4       	brcc	.+4      	; 0x1dc0 <xTaskIncrementTick+0x72>
    1dbc:	d1 2c       	mov	r13, r1
    1dbe:	53 c0       	rjmp	.+166    	; 0x1e66 <xTaskIncrementTick+0x118>
    1dc0:	d1 2c       	mov	r13, r1
    1dc2:	cc 24       	eor	r12, r12
    1dc4:	c3 94       	inc	r12
    1dc6:	e0 91 10 08 	lds	r30, 0x0810	; 0x800810 <pxDelayedTaskList>
    1dca:	f0 91 11 08 	lds	r31, 0x0811	; 0x800811 <pxDelayedTaskList+0x1>
    1dce:	80 81       	ld	r24, Z
    1dd0:	81 11       	cpse	r24, r1
    1dd2:	07 c0       	rjmp	.+14     	; 0x1de2 <xTaskIncrementTick+0x94>
    1dd4:	8f ef       	ldi	r24, 0xFF	; 255
    1dd6:	9f ef       	ldi	r25, 0xFF	; 255
    1dd8:	90 93 e8 07 	sts	0x07E8, r25	; 0x8007e8 <xNextTaskUnblockTime+0x1>
    1ddc:	80 93 e7 07 	sts	0x07E7, r24	; 0x8007e7 <xNextTaskUnblockTime>
    1de0:	42 c0       	rjmp	.+132    	; 0x1e66 <xTaskIncrementTick+0x118>
    1de2:	e0 91 10 08 	lds	r30, 0x0810	; 0x800810 <pxDelayedTaskList>
    1de6:	f0 91 11 08 	lds	r31, 0x0811	; 0x800811 <pxDelayedTaskList+0x1>
    1dea:	05 80       	ldd	r0, Z+5	; 0x05
    1dec:	f6 81       	ldd	r31, Z+6	; 0x06
    1dee:	e0 2d       	mov	r30, r0
    1df0:	c6 81       	ldd	r28, Z+6	; 0x06
    1df2:	d7 81       	ldd	r29, Z+7	; 0x07
    1df4:	8a 81       	ldd	r24, Y+2	; 0x02
    1df6:	9b 81       	ldd	r25, Y+3	; 0x03
    1df8:	e8 16       	cp	r14, r24
    1dfa:	f9 06       	cpc	r15, r25
    1dfc:	28 f4       	brcc	.+10     	; 0x1e08 <xTaskIncrementTick+0xba>
    1dfe:	90 93 e8 07 	sts	0x07E8, r25	; 0x8007e8 <xNextTaskUnblockTime+0x1>
    1e02:	80 93 e7 07 	sts	0x07E7, r24	; 0x8007e7 <xNextTaskUnblockTime>
    1e06:	2f c0       	rjmp	.+94     	; 0x1e66 <xTaskIncrementTick+0x118>
    1e08:	8e 01       	movw	r16, r28
    1e0a:	0e 5f       	subi	r16, 0xFE	; 254
    1e0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e0e:	c8 01       	movw	r24, r16
    1e10:	0e 94 7f 05 	call	0xafe	; 0xafe <uxListRemove>
    1e14:	8c 89       	ldd	r24, Y+20	; 0x14
    1e16:	9d 89       	ldd	r25, Y+21	; 0x15
    1e18:	89 2b       	or	r24, r25
    1e1a:	21 f0       	breq	.+8      	; 0x1e24 <xTaskIncrementTick+0xd6>
    1e1c:	ce 01       	movw	r24, r28
    1e1e:	0c 96       	adiw	r24, 0x0c	; 12
    1e20:	0e 94 7f 05 	call	0xafe	; 0xafe <uxListRemove>
    1e24:	8e 89       	ldd	r24, Y+22	; 0x16
    1e26:	90 91 ee 07 	lds	r25, 0x07EE	; 0x8007ee <uxTopReadyPriority>
    1e2a:	98 17       	cp	r25, r24
    1e2c:	10 f4       	brcc	.+4      	; 0x1e32 <xTaskIncrementTick+0xe4>
    1e2e:	80 93 ee 07 	sts	0x07EE, r24	; 0x8007ee <uxTopReadyPriority>
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	9c 01       	movw	r18, r24
    1e36:	22 0f       	add	r18, r18
    1e38:	33 1f       	adc	r19, r19
    1e3a:	22 0f       	add	r18, r18
    1e3c:	33 1f       	adc	r19, r19
    1e3e:	22 0f       	add	r18, r18
    1e40:	33 1f       	adc	r19, r19
    1e42:	82 0f       	add	r24, r18
    1e44:	93 1f       	adc	r25, r19
    1e46:	b8 01       	movw	r22, r16
    1e48:	8c 5d       	subi	r24, 0xDC	; 220
    1e4a:	97 4f       	sbci	r25, 0xF7	; 247
    1e4c:	0e 94 2d 05 	call	0xa5a	; 0xa5a <vListInsertEnd>
    1e50:	e0 91 48 08 	lds	r30, 0x0848	; 0x800848 <pxCurrentTCB>
    1e54:	f0 91 49 08 	lds	r31, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    1e58:	9e 89       	ldd	r25, Y+22	; 0x16
    1e5a:	86 89       	ldd	r24, Z+22	; 0x16
    1e5c:	98 17       	cp	r25, r24
    1e5e:	08 f4       	brcc	.+2      	; 0x1e62 <xTaskIncrementTick+0x114>
    1e60:	b2 cf       	rjmp	.-156    	; 0x1dc6 <xTaskIncrementTick+0x78>
    1e62:	dc 2c       	mov	r13, r12
    1e64:	b0 cf       	rjmp	.-160    	; 0x1dc6 <xTaskIncrementTick+0x78>
    1e66:	e0 91 48 08 	lds	r30, 0x0848	; 0x800848 <pxCurrentTCB>
    1e6a:	f0 91 49 08 	lds	r31, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    1e6e:	86 89       	ldd	r24, Z+22	; 0x16
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	fc 01       	movw	r30, r24
    1e74:	ee 0f       	add	r30, r30
    1e76:	ff 1f       	adc	r31, r31
    1e78:	ee 0f       	add	r30, r30
    1e7a:	ff 1f       	adc	r31, r31
    1e7c:	ee 0f       	add	r30, r30
    1e7e:	ff 1f       	adc	r31, r31
    1e80:	8e 0f       	add	r24, r30
    1e82:	9f 1f       	adc	r25, r31
    1e84:	fc 01       	movw	r30, r24
    1e86:	ec 5d       	subi	r30, 0xDC	; 220
    1e88:	f7 4f       	sbci	r31, 0xF7	; 247
    1e8a:	80 81       	ld	r24, Z
    1e8c:	82 30       	cpi	r24, 0x02	; 2
    1e8e:	48 f0       	brcs	.+18     	; 0x1ea2 <xTaskIncrementTick+0x154>
    1e90:	dd 24       	eor	r13, r13
    1e92:	d3 94       	inc	r13
    1e94:	06 c0       	rjmp	.+12     	; 0x1ea2 <xTaskIncrementTick+0x154>
    1e96:	80 91 ec 07 	lds	r24, 0x07EC	; 0x8007ec <uxPendedTicks>
    1e9a:	8f 5f       	subi	r24, 0xFF	; 255
    1e9c:	80 93 ec 07 	sts	0x07EC, r24	; 0x8007ec <uxPendedTicks>
    1ea0:	d1 2c       	mov	r13, r1
    1ea2:	80 91 eb 07 	lds	r24, 0x07EB	; 0x8007eb <xYieldPending>
    1ea6:	88 23       	and	r24, r24
    1ea8:	11 f0       	breq	.+4      	; 0x1eae <xTaskIncrementTick+0x160>
    1eaa:	dd 24       	eor	r13, r13
    1eac:	d3 94       	inc	r13
    1eae:	8d 2d       	mov	r24, r13
    1eb0:	df 91       	pop	r29
    1eb2:	cf 91       	pop	r28
    1eb4:	1f 91       	pop	r17
    1eb6:	0f 91       	pop	r16
    1eb8:	ff 90       	pop	r15
    1eba:	ef 90       	pop	r14
    1ebc:	df 90       	pop	r13
    1ebe:	cf 90       	pop	r12
    1ec0:	08 95       	ret

00001ec2 <xTaskResumeAll>:
    1ec2:	df 92       	push	r13
    1ec4:	ef 92       	push	r14
    1ec6:	ff 92       	push	r15
    1ec8:	0f 93       	push	r16
    1eca:	1f 93       	push	r17
    1ecc:	cf 93       	push	r28
    1ece:	df 93       	push	r29
    1ed0:	0f b6       	in	r0, 0x3f	; 63
    1ed2:	f8 94       	cli
    1ed4:	0f 92       	push	r0
    1ed6:	80 91 e4 07 	lds	r24, 0x07E4	; 0x8007e4 <uxSchedulerSuspended>
    1eda:	81 50       	subi	r24, 0x01	; 1
    1edc:	80 93 e4 07 	sts	0x07E4, r24	; 0x8007e4 <uxSchedulerSuspended>
    1ee0:	80 91 e4 07 	lds	r24, 0x07E4	; 0x8007e4 <uxSchedulerSuspended>
    1ee4:	81 11       	cpse	r24, r1
    1ee6:	5d c0       	rjmp	.+186    	; 0x1fa2 <xTaskResumeAll+0xe0>
    1ee8:	80 91 f1 07 	lds	r24, 0x07F1	; 0x8007f1 <uxCurrentNumberOfTasks>
    1eec:	81 11       	cpse	r24, r1
    1eee:	33 c0       	rjmp	.+102    	; 0x1f56 <xTaskResumeAll+0x94>
    1ef0:	5b c0       	rjmp	.+182    	; 0x1fa8 <xTaskResumeAll+0xe6>
    1ef2:	d7 01       	movw	r26, r14
    1ef4:	15 96       	adiw	r26, 0x05	; 5
    1ef6:	ed 91       	ld	r30, X+
    1ef8:	fc 91       	ld	r31, X
    1efa:	16 97       	sbiw	r26, 0x06	; 6
    1efc:	c6 81       	ldd	r28, Z+6	; 0x06
    1efe:	d7 81       	ldd	r29, Z+7	; 0x07
    1f00:	ce 01       	movw	r24, r28
    1f02:	0c 96       	adiw	r24, 0x0c	; 12
    1f04:	0e 94 7f 05 	call	0xafe	; 0xafe <uxListRemove>
    1f08:	8e 01       	movw	r16, r28
    1f0a:	0e 5f       	subi	r16, 0xFE	; 254
    1f0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f0e:	c8 01       	movw	r24, r16
    1f10:	0e 94 7f 05 	call	0xafe	; 0xafe <uxListRemove>
    1f14:	8e 89       	ldd	r24, Y+22	; 0x16
    1f16:	90 91 ee 07 	lds	r25, 0x07EE	; 0x8007ee <uxTopReadyPriority>
    1f1a:	98 17       	cp	r25, r24
    1f1c:	10 f4       	brcc	.+4      	; 0x1f22 <xTaskResumeAll+0x60>
    1f1e:	80 93 ee 07 	sts	0x07EE, r24	; 0x8007ee <uxTopReadyPriority>
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	9c 01       	movw	r18, r24
    1f26:	22 0f       	add	r18, r18
    1f28:	33 1f       	adc	r19, r19
    1f2a:	22 0f       	add	r18, r18
    1f2c:	33 1f       	adc	r19, r19
    1f2e:	22 0f       	add	r18, r18
    1f30:	33 1f       	adc	r19, r19
    1f32:	82 0f       	add	r24, r18
    1f34:	93 1f       	adc	r25, r19
    1f36:	b8 01       	movw	r22, r16
    1f38:	8c 5d       	subi	r24, 0xDC	; 220
    1f3a:	97 4f       	sbci	r25, 0xF7	; 247
    1f3c:	0e 94 2d 05 	call	0xa5a	; 0xa5a <vListInsertEnd>
    1f40:	e0 91 48 08 	lds	r30, 0x0848	; 0x800848 <pxCurrentTCB>
    1f44:	f0 91 49 08 	lds	r31, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    1f48:	9e 89       	ldd	r25, Y+22	; 0x16
    1f4a:	86 89       	ldd	r24, Z+22	; 0x16
    1f4c:	98 17       	cp	r25, r24
    1f4e:	68 f0       	brcs	.+26     	; 0x1f6a <xTaskResumeAll+0xa8>
    1f50:	d0 92 eb 07 	sts	0x07EB, r13	; 0x8007eb <xYieldPending>
    1f54:	0a c0       	rjmp	.+20     	; 0x1f6a <xTaskResumeAll+0xa8>
    1f56:	c0 e0       	ldi	r28, 0x00	; 0
    1f58:	d0 e0       	ldi	r29, 0x00	; 0
    1f5a:	0f 2e       	mov	r0, r31
    1f5c:	f5 e0       	ldi	r31, 0x05	; 5
    1f5e:	ef 2e       	mov	r14, r31
    1f60:	f8 e0       	ldi	r31, 0x08	; 8
    1f62:	ff 2e       	mov	r15, r31
    1f64:	f0 2d       	mov	r31, r0
    1f66:	dd 24       	eor	r13, r13
    1f68:	d3 94       	inc	r13
    1f6a:	f7 01       	movw	r30, r14
    1f6c:	80 81       	ld	r24, Z
    1f6e:	81 11       	cpse	r24, r1
    1f70:	c0 cf       	rjmp	.-128    	; 0x1ef2 <xTaskResumeAll+0x30>
    1f72:	cd 2b       	or	r28, r29
    1f74:	09 f0       	breq	.+2      	; 0x1f78 <xTaskResumeAll+0xb6>
    1f76:	17 dd       	rcall	.-1490   	; 0x19a6 <prvResetNextTaskUnblockTime>
    1f78:	c0 91 ec 07 	lds	r28, 0x07EC	; 0x8007ec <uxPendedTicks>
    1f7c:	cc 23       	and	r28, r28
    1f7e:	49 f0       	breq	.+18     	; 0x1f92 <xTaskResumeAll+0xd0>
    1f80:	d1 e0       	ldi	r29, 0x01	; 1
    1f82:	e5 de       	rcall	.-566    	; 0x1d4e <xTaskIncrementTick>
    1f84:	81 11       	cpse	r24, r1
    1f86:	d0 93 eb 07 	sts	0x07EB, r29	; 0x8007eb <xYieldPending>
    1f8a:	c1 50       	subi	r28, 0x01	; 1
    1f8c:	d1 f7       	brne	.-12     	; 0x1f82 <xTaskResumeAll+0xc0>
    1f8e:	10 92 ec 07 	sts	0x07EC, r1	; 0x8007ec <uxPendedTicks>
    1f92:	80 91 eb 07 	lds	r24, 0x07EB	; 0x8007eb <xYieldPending>
    1f96:	88 23       	and	r24, r24
    1f98:	31 f0       	breq	.+12     	; 0x1fa6 <xTaskResumeAll+0xe4>
    1f9a:	0e 94 54 06 	call	0xca8	; 0xca8 <vPortYield>
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	03 c0       	rjmp	.+6      	; 0x1fa8 <xTaskResumeAll+0xe6>
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	01 c0       	rjmp	.+2      	; 0x1fa8 <xTaskResumeAll+0xe6>
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	0f 90       	pop	r0
    1faa:	0f be       	out	0x3f, r0	; 63
    1fac:	df 91       	pop	r29
    1fae:	cf 91       	pop	r28
    1fb0:	1f 91       	pop	r17
    1fb2:	0f 91       	pop	r16
    1fb4:	ff 90       	pop	r15
    1fb6:	ef 90       	pop	r14
    1fb8:	df 90       	pop	r13
    1fba:	08 95       	ret

00001fbc <vTaskDelay>:
    1fbc:	cf 93       	push	r28
    1fbe:	df 93       	push	r29
    1fc0:	ec 01       	movw	r28, r24
    1fc2:	89 2b       	or	r24, r25
    1fc4:	39 f0       	breq	.+14     	; 0x1fd4 <vTaskDelay+0x18>
    1fc6:	b3 de       	rcall	.-666    	; 0x1d2e <vTaskSuspendAll>
    1fc8:	60 e0       	ldi	r22, 0x00	; 0
    1fca:	ce 01       	movw	r24, r28
    1fcc:	0b dd       	rcall	.-1514   	; 0x19e4 <prvAddCurrentTaskToDelayedList>
    1fce:	79 df       	rcall	.-270    	; 0x1ec2 <xTaskResumeAll>
    1fd0:	81 11       	cpse	r24, r1
    1fd2:	02 c0       	rjmp	.+4      	; 0x1fd8 <vTaskDelay+0x1c>
    1fd4:	0e 94 54 06 	call	0xca8	; 0xca8 <vPortYield>
    1fd8:	df 91       	pop	r29
    1fda:	cf 91       	pop	r28
    1fdc:	08 95       	ret

00001fde <vTaskSwitchContext>:
    1fde:	80 91 e4 07 	lds	r24, 0x07E4	; 0x8007e4 <uxSchedulerSuspended>
    1fe2:	88 23       	and	r24, r24
    1fe4:	21 f0       	breq	.+8      	; 0x1fee <vTaskSwitchContext+0x10>
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	80 93 eb 07 	sts	0x07EB, r24	; 0x8007eb <xYieldPending>
    1fec:	08 95       	ret
    1fee:	10 92 eb 07 	sts	0x07EB, r1	; 0x8007eb <xYieldPending>
    1ff2:	e0 91 48 08 	lds	r30, 0x0848	; 0x800848 <pxCurrentTCB>
    1ff6:	f0 91 49 08 	lds	r31, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    1ffa:	85 a1       	ldd	r24, Z+37	; 0x25
    1ffc:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <task_switch_out>
    2000:	a0 91 48 08 	lds	r26, 0x0848	; 0x800848 <pxCurrentTCB>
    2004:	b0 91 49 08 	lds	r27, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    2008:	e0 91 48 08 	lds	r30, 0x0848	; 0x800848 <pxCurrentTCB>
    200c:	f0 91 49 08 	lds	r31, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    2010:	2d 91       	ld	r18, X+
    2012:	3c 91       	ld	r19, X
    2014:	87 89       	ldd	r24, Z+23	; 0x17
    2016:	90 8d       	ldd	r25, Z+24	; 0x18
    2018:	82 17       	cp	r24, r18
    201a:	93 07       	cpc	r25, r19
    201c:	58 f0       	brcs	.+22     	; 0x2034 <vTaskSwitchContext+0x56>
    201e:	60 91 48 08 	lds	r22, 0x0848	; 0x800848 <pxCurrentTCB>
    2022:	70 91 49 08 	lds	r23, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    2026:	80 91 48 08 	lds	r24, 0x0848	; 0x800848 <pxCurrentTCB>
    202a:	90 91 49 08 	lds	r25, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    202e:	67 5e       	subi	r22, 0xE7	; 231
    2030:	7f 4f       	sbci	r23, 0xFF	; 255
    2032:	1f d5       	rcall	.+2622   	; 0x2a72 <vApplicationStackOverflowHook>
    2034:	20 91 ee 07 	lds	r18, 0x07EE	; 0x8007ee <uxTopReadyPriority>
    2038:	82 2f       	mov	r24, r18
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	fc 01       	movw	r30, r24
    203e:	ee 0f       	add	r30, r30
    2040:	ff 1f       	adc	r31, r31
    2042:	ee 0f       	add	r30, r30
    2044:	ff 1f       	adc	r31, r31
    2046:	ee 0f       	add	r30, r30
    2048:	ff 1f       	adc	r31, r31
    204a:	e8 0f       	add	r30, r24
    204c:	f9 1f       	adc	r31, r25
    204e:	ec 5d       	subi	r30, 0xDC	; 220
    2050:	f7 4f       	sbci	r31, 0xF7	; 247
    2052:	30 81       	ld	r19, Z
    2054:	31 11       	cpse	r19, r1
    2056:	11 c0       	rjmp	.+34     	; 0x207a <vTaskSwitchContext+0x9c>
    2058:	21 50       	subi	r18, 0x01	; 1
    205a:	82 2f       	mov	r24, r18
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	fc 01       	movw	r30, r24
    2060:	ee 0f       	add	r30, r30
    2062:	ff 1f       	adc	r31, r31
    2064:	ee 0f       	add	r30, r30
    2066:	ff 1f       	adc	r31, r31
    2068:	ee 0f       	add	r30, r30
    206a:	ff 1f       	adc	r31, r31
    206c:	e8 0f       	add	r30, r24
    206e:	f9 1f       	adc	r31, r25
    2070:	ec 5d       	subi	r30, 0xDC	; 220
    2072:	f7 4f       	sbci	r31, 0xF7	; 247
    2074:	30 81       	ld	r19, Z
    2076:	33 23       	and	r19, r19
    2078:	79 f3       	breq	.-34     	; 0x2058 <vTaskSwitchContext+0x7a>
    207a:	ac 01       	movw	r20, r24
    207c:	44 0f       	add	r20, r20
    207e:	55 1f       	adc	r21, r21
    2080:	44 0f       	add	r20, r20
    2082:	55 1f       	adc	r21, r21
    2084:	44 0f       	add	r20, r20
    2086:	55 1f       	adc	r21, r21
    2088:	48 0f       	add	r20, r24
    208a:	59 1f       	adc	r21, r25
    208c:	da 01       	movw	r26, r20
    208e:	ac 5d       	subi	r26, 0xDC	; 220
    2090:	b7 4f       	sbci	r27, 0xF7	; 247
    2092:	11 96       	adiw	r26, 0x01	; 1
    2094:	ed 91       	ld	r30, X+
    2096:	fc 91       	ld	r31, X
    2098:	12 97       	sbiw	r26, 0x02	; 2
    209a:	02 80       	ldd	r0, Z+2	; 0x02
    209c:	f3 81       	ldd	r31, Z+3	; 0x03
    209e:	e0 2d       	mov	r30, r0
    20a0:	12 96       	adiw	r26, 0x02	; 2
    20a2:	fc 93       	st	X, r31
    20a4:	ee 93       	st	-X, r30
    20a6:	11 97       	sbiw	r26, 0x01	; 1
    20a8:	49 5d       	subi	r20, 0xD9	; 217
    20aa:	57 4f       	sbci	r21, 0xF7	; 247
    20ac:	e4 17       	cp	r30, r20
    20ae:	f5 07       	cpc	r31, r21
    20b0:	29 f4       	brne	.+10     	; 0x20bc <vTaskSwitchContext+0xde>
    20b2:	42 81       	ldd	r20, Z+2	; 0x02
    20b4:	53 81       	ldd	r21, Z+3	; 0x03
    20b6:	fd 01       	movw	r30, r26
    20b8:	52 83       	std	Z+2, r21	; 0x02
    20ba:	41 83       	std	Z+1, r20	; 0x01
    20bc:	fc 01       	movw	r30, r24
    20be:	ee 0f       	add	r30, r30
    20c0:	ff 1f       	adc	r31, r31
    20c2:	ee 0f       	add	r30, r30
    20c4:	ff 1f       	adc	r31, r31
    20c6:	ee 0f       	add	r30, r30
    20c8:	ff 1f       	adc	r31, r31
    20ca:	8e 0f       	add	r24, r30
    20cc:	9f 1f       	adc	r25, r31
    20ce:	fc 01       	movw	r30, r24
    20d0:	ec 5d       	subi	r30, 0xDC	; 220
    20d2:	f7 4f       	sbci	r31, 0xF7	; 247
    20d4:	01 80       	ldd	r0, Z+1	; 0x01
    20d6:	f2 81       	ldd	r31, Z+2	; 0x02
    20d8:	e0 2d       	mov	r30, r0
    20da:	86 81       	ldd	r24, Z+6	; 0x06
    20dc:	97 81       	ldd	r25, Z+7	; 0x07
    20de:	90 93 49 08 	sts	0x0849, r25	; 0x800849 <pxCurrentTCB+0x1>
    20e2:	80 93 48 08 	sts	0x0848, r24	; 0x800848 <pxCurrentTCB>
    20e6:	20 93 ee 07 	sts	0x07EE, r18	; 0x8007ee <uxTopReadyPriority>
    20ea:	e0 91 48 08 	lds	r30, 0x0848	; 0x800848 <pxCurrentTCB>
    20ee:	f0 91 49 08 	lds	r31, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    20f2:	85 a1       	ldd	r24, Z+37	; 0x25
    20f4:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <task_switch_in>
    20f8:	08 95       	ret

000020fa <vTaskPlaceOnEventList>:
    20fa:	cf 93       	push	r28
    20fc:	df 93       	push	r29
    20fe:	eb 01       	movw	r28, r22
    2100:	60 91 48 08 	lds	r22, 0x0848	; 0x800848 <pxCurrentTCB>
    2104:	70 91 49 08 	lds	r23, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    2108:	64 5f       	subi	r22, 0xF4	; 244
    210a:	7f 4f       	sbci	r23, 0xFF	; 255
    210c:	0e 94 4e 05 	call	0xa9c	; 0xa9c <vListInsert>
    2110:	61 e0       	ldi	r22, 0x01	; 1
    2112:	ce 01       	movw	r24, r28
    2114:	67 dc       	rcall	.-1842   	; 0x19e4 <prvAddCurrentTaskToDelayedList>
    2116:	df 91       	pop	r29
    2118:	cf 91       	pop	r28
    211a:	08 95       	ret

0000211c <vTaskPlaceOnEventListRestricted>:
    211c:	0f 93       	push	r16
    211e:	1f 93       	push	r17
    2120:	cf 93       	push	r28
    2122:	8b 01       	movw	r16, r22
    2124:	c4 2f       	mov	r28, r20
    2126:	60 91 48 08 	lds	r22, 0x0848	; 0x800848 <pxCurrentTCB>
    212a:	70 91 49 08 	lds	r23, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    212e:	64 5f       	subi	r22, 0xF4	; 244
    2130:	7f 4f       	sbci	r23, 0xFF	; 255
    2132:	0e 94 2d 05 	call	0xa5a	; 0xa5a <vListInsertEnd>
    2136:	cc 23       	and	r28, r28
    2138:	11 f0       	breq	.+4      	; 0x213e <vTaskPlaceOnEventListRestricted+0x22>
    213a:	0f ef       	ldi	r16, 0xFF	; 255
    213c:	1f ef       	ldi	r17, 0xFF	; 255
    213e:	6c 2f       	mov	r22, r28
    2140:	c8 01       	movw	r24, r16
    2142:	50 dc       	rcall	.-1888   	; 0x19e4 <prvAddCurrentTaskToDelayedList>
    2144:	cf 91       	pop	r28
    2146:	1f 91       	pop	r17
    2148:	0f 91       	pop	r16
    214a:	08 95       	ret

0000214c <xTaskRemoveFromEventList>:
    214c:	0f 93       	push	r16
    214e:	1f 93       	push	r17
    2150:	cf 93       	push	r28
    2152:	df 93       	push	r29
    2154:	dc 01       	movw	r26, r24
    2156:	15 96       	adiw	r26, 0x05	; 5
    2158:	ed 91       	ld	r30, X+
    215a:	fc 91       	ld	r31, X
    215c:	16 97       	sbiw	r26, 0x06	; 6
    215e:	c6 81       	ldd	r28, Z+6	; 0x06
    2160:	d7 81       	ldd	r29, Z+7	; 0x07
    2162:	8e 01       	movw	r16, r28
    2164:	04 5f       	subi	r16, 0xF4	; 244
    2166:	1f 4f       	sbci	r17, 0xFF	; 255
    2168:	c8 01       	movw	r24, r16
    216a:	0e 94 7f 05 	call	0xafe	; 0xafe <uxListRemove>
    216e:	80 91 e4 07 	lds	r24, 0x07E4	; 0x8007e4 <uxSchedulerSuspended>
    2172:	81 11       	cpse	r24, r1
    2174:	1c c0       	rjmp	.+56     	; 0x21ae <xTaskRemoveFromEventList+0x62>
    2176:	0a 50       	subi	r16, 0x0A	; 10
    2178:	11 09       	sbc	r17, r1
    217a:	c8 01       	movw	r24, r16
    217c:	0e 94 7f 05 	call	0xafe	; 0xafe <uxListRemove>
    2180:	8e 89       	ldd	r24, Y+22	; 0x16
    2182:	90 91 ee 07 	lds	r25, 0x07EE	; 0x8007ee <uxTopReadyPriority>
    2186:	98 17       	cp	r25, r24
    2188:	10 f4       	brcc	.+4      	; 0x218e <xTaskRemoveFromEventList+0x42>
    218a:	80 93 ee 07 	sts	0x07EE, r24	; 0x8007ee <uxTopReadyPriority>
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	9c 01       	movw	r18, r24
    2192:	22 0f       	add	r18, r18
    2194:	33 1f       	adc	r19, r19
    2196:	22 0f       	add	r18, r18
    2198:	33 1f       	adc	r19, r19
    219a:	22 0f       	add	r18, r18
    219c:	33 1f       	adc	r19, r19
    219e:	82 0f       	add	r24, r18
    21a0:	93 1f       	adc	r25, r19
    21a2:	b8 01       	movw	r22, r16
    21a4:	8c 5d       	subi	r24, 0xDC	; 220
    21a6:	97 4f       	sbci	r25, 0xF7	; 247
    21a8:	0e 94 2d 05 	call	0xa5a	; 0xa5a <vListInsertEnd>
    21ac:	05 c0       	rjmp	.+10     	; 0x21b8 <xTaskRemoveFromEventList+0x6c>
    21ae:	b8 01       	movw	r22, r16
    21b0:	85 e0       	ldi	r24, 0x05	; 5
    21b2:	98 e0       	ldi	r25, 0x08	; 8
    21b4:	0e 94 2d 05 	call	0xa5a	; 0xa5a <vListInsertEnd>
    21b8:	e0 91 48 08 	lds	r30, 0x0848	; 0x800848 <pxCurrentTCB>
    21bc:	f0 91 49 08 	lds	r31, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    21c0:	9e 89       	ldd	r25, Y+22	; 0x16
    21c2:	86 89       	ldd	r24, Z+22	; 0x16
    21c4:	89 17       	cp	r24, r25
    21c6:	20 f4       	brcc	.+8      	; 0x21d0 <xTaskRemoveFromEventList+0x84>
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	80 93 eb 07 	sts	0x07EB, r24	; 0x8007eb <xYieldPending>
    21ce:	01 c0       	rjmp	.+2      	; 0x21d2 <xTaskRemoveFromEventList+0x86>
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	df 91       	pop	r29
    21d4:	cf 91       	pop	r28
    21d6:	1f 91       	pop	r17
    21d8:	0f 91       	pop	r16
    21da:	08 95       	ret

000021dc <vTaskInternalSetTimeOutState>:
    21dc:	20 91 ea 07 	lds	r18, 0x07EA	; 0x8007ea <xNumOfOverflows>
    21e0:	fc 01       	movw	r30, r24
    21e2:	20 83       	st	Z, r18
    21e4:	20 91 ef 07 	lds	r18, 0x07EF	; 0x8007ef <xTickCount>
    21e8:	30 91 f0 07 	lds	r19, 0x07F0	; 0x8007f0 <xTickCount+0x1>
    21ec:	32 83       	std	Z+2, r19	; 0x02
    21ee:	21 83       	std	Z+1, r18	; 0x01
    21f0:	08 95       	ret

000021f2 <xTaskCheckForTimeOut>:
    21f2:	cf 93       	push	r28
    21f4:	df 93       	push	r29
    21f6:	0f b6       	in	r0, 0x3f	; 63
    21f8:	f8 94       	cli
    21fa:	0f 92       	push	r0
    21fc:	20 91 ef 07 	lds	r18, 0x07EF	; 0x8007ef <xTickCount>
    2200:	30 91 f0 07 	lds	r19, 0x07F0	; 0x8007f0 <xTickCount+0x1>
    2204:	db 01       	movw	r26, r22
    2206:	4d 91       	ld	r20, X+
    2208:	5c 91       	ld	r21, X
    220a:	4f 3f       	cpi	r20, 0xFF	; 255
    220c:	bf ef       	ldi	r27, 0xFF	; 255
    220e:	5b 07       	cpc	r21, r27
    2210:	e9 f0       	breq	.+58     	; 0x224c <__stack+0x4d>
    2212:	ec 01       	movw	r28, r24
    2214:	e9 81       	ldd	r30, Y+1	; 0x01
    2216:	fa 81       	ldd	r31, Y+2	; 0x02
    2218:	a0 91 ea 07 	lds	r26, 0x07EA	; 0x8007ea <xNumOfOverflows>
    221c:	b8 81       	ld	r27, Y
    221e:	ba 17       	cp	r27, r26
    2220:	19 f0       	breq	.+6      	; 0x2228 <__stack+0x29>
    2222:	2e 17       	cp	r18, r30
    2224:	3f 07       	cpc	r19, r31
    2226:	a0 f4       	brcc	.+40     	; 0x2250 <__stack+0x51>
    2228:	2e 1b       	sub	r18, r30
    222a:	3f 0b       	sbc	r19, r31
    222c:	24 17       	cp	r18, r20
    222e:	35 07       	cpc	r19, r21
    2230:	40 f4       	brcc	.+16     	; 0x2242 <__stack+0x43>
    2232:	fb 01       	movw	r30, r22
    2234:	42 1b       	sub	r20, r18
    2236:	53 0b       	sbc	r21, r19
    2238:	51 83       	std	Z+1, r21	; 0x01
    223a:	40 83       	st	Z, r20
    223c:	cf df       	rcall	.-98     	; 0x21dc <vTaskInternalSetTimeOutState>
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	08 c0       	rjmp	.+16     	; 0x2252 <__stack+0x53>
    2242:	fb 01       	movw	r30, r22
    2244:	11 82       	std	Z+1, r1	; 0x01
    2246:	10 82       	st	Z, r1
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	03 c0       	rjmp	.+6      	; 0x2252 <__stack+0x53>
    224c:	80 e0       	ldi	r24, 0x00	; 0
    224e:	01 c0       	rjmp	.+2      	; 0x2252 <__stack+0x53>
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	0f 90       	pop	r0
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	df 91       	pop	r29
    2258:	cf 91       	pop	r28
    225a:	08 95       	ret

0000225c <vTaskMissedYield>:
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	80 93 eb 07 	sts	0x07EB, r24	; 0x8007eb <xYieldPending>
    2262:	08 95       	ret

00002264 <xTaskGetCurrentTaskHandle>:
    2264:	80 91 48 08 	lds	r24, 0x0848	; 0x800848 <pxCurrentTCB>
    2268:	90 91 49 08 	lds	r25, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    226c:	08 95       	ret

0000226e <xTaskGetSchedulerState>:
    226e:	80 91 ed 07 	lds	r24, 0x07ED	; 0x8007ed <xSchedulerRunning>
    2272:	88 23       	and	r24, r24
    2274:	31 f0       	breq	.+12     	; 0x2282 <xTaskGetSchedulerState+0x14>
    2276:	80 91 e4 07 	lds	r24, 0x07E4	; 0x8007e4 <uxSchedulerSuspended>
    227a:	88 23       	and	r24, r24
    227c:	21 f0       	breq	.+8      	; 0x2286 <xTaskGetSchedulerState+0x18>
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	08 95       	ret
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	08 95       	ret
    2286:	82 e0       	ldi	r24, 0x02	; 2
    2288:	08 95       	ret

0000228a <xTaskPriorityInherit>:
    228a:	0f 93       	push	r16
    228c:	1f 93       	push	r17
    228e:	cf 93       	push	r28
    2290:	df 93       	push	r29
    2292:	fc 01       	movw	r30, r24
    2294:	89 2b       	or	r24, r25
    2296:	09 f4       	brne	.+2      	; 0x229a <xTaskPriorityInherit+0x10>
    2298:	64 c0       	rjmp	.+200    	; 0x2362 <xTaskPriorityInherit+0xd8>
    229a:	26 89       	ldd	r18, Z+22	; 0x16
    229c:	a0 91 48 08 	lds	r26, 0x0848	; 0x800848 <pxCurrentTCB>
    22a0:	b0 91 49 08 	lds	r27, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    22a4:	56 96       	adiw	r26, 0x16	; 22
    22a6:	8c 91       	ld	r24, X
    22a8:	28 17       	cp	r18, r24
    22aa:	08 f0       	brcs	.+2      	; 0x22ae <xTaskPriorityInherit+0x24>
    22ac:	4e c0       	rjmp	.+156    	; 0x234a <xTaskPriorityInherit+0xc0>
    22ae:	84 85       	ldd	r24, Z+12	; 0x0c
    22b0:	95 85       	ldd	r25, Z+13	; 0x0d
    22b2:	99 23       	and	r25, r25
    22b4:	64 f0       	brlt	.+24     	; 0x22ce <xTaskPriorityInherit+0x44>
    22b6:	a0 91 48 08 	lds	r26, 0x0848	; 0x800848 <pxCurrentTCB>
    22ba:	b0 91 49 08 	lds	r27, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    22be:	56 96       	adiw	r26, 0x16	; 22
    22c0:	3c 91       	ld	r19, X
    22c2:	84 e0       	ldi	r24, 0x04	; 4
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	83 1b       	sub	r24, r19
    22c8:	91 09       	sbc	r25, r1
    22ca:	95 87       	std	Z+13, r25	; 0x0d
    22cc:	84 87       	std	Z+12, r24	; 0x0c
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	c9 01       	movw	r24, r18
    22d2:	88 0f       	add	r24, r24
    22d4:	99 1f       	adc	r25, r25
    22d6:	88 0f       	add	r24, r24
    22d8:	99 1f       	adc	r25, r25
    22da:	88 0f       	add	r24, r24
    22dc:	99 1f       	adc	r25, r25
    22de:	28 0f       	add	r18, r24
    22e0:	39 1f       	adc	r19, r25
    22e2:	2c 5d       	subi	r18, 0xDC	; 220
    22e4:	37 4f       	sbci	r19, 0xF7	; 247
    22e6:	82 85       	ldd	r24, Z+10	; 0x0a
    22e8:	93 85       	ldd	r25, Z+11	; 0x0b
    22ea:	82 17       	cp	r24, r18
    22ec:	93 07       	cpc	r25, r19
    22ee:	21 f5       	brne	.+72     	; 0x2338 <xTaskPriorityInherit+0xae>
    22f0:	8f 01       	movw	r16, r30
    22f2:	ef 01       	movw	r28, r30
    22f4:	22 96       	adiw	r28, 0x02	; 2
    22f6:	ce 01       	movw	r24, r28
    22f8:	0e 94 7f 05 	call	0xafe	; 0xafe <uxListRemove>
    22fc:	e0 91 48 08 	lds	r30, 0x0848	; 0x800848 <pxCurrentTCB>
    2300:	f0 91 49 08 	lds	r31, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    2304:	86 89       	ldd	r24, Z+22	; 0x16
    2306:	f8 01       	movw	r30, r16
    2308:	86 8b       	std	Z+22, r24	; 0x16
    230a:	90 91 ee 07 	lds	r25, 0x07EE	; 0x8007ee <uxTopReadyPriority>
    230e:	98 17       	cp	r25, r24
    2310:	10 f4       	brcc	.+4      	; 0x2316 <xTaskPriorityInherit+0x8c>
    2312:	80 93 ee 07 	sts	0x07EE, r24	; 0x8007ee <uxTopReadyPriority>
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	9c 01       	movw	r18, r24
    231a:	22 0f       	add	r18, r18
    231c:	33 1f       	adc	r19, r19
    231e:	22 0f       	add	r18, r18
    2320:	33 1f       	adc	r19, r19
    2322:	22 0f       	add	r18, r18
    2324:	33 1f       	adc	r19, r19
    2326:	82 0f       	add	r24, r18
    2328:	93 1f       	adc	r25, r19
    232a:	be 01       	movw	r22, r28
    232c:	8c 5d       	subi	r24, 0xDC	; 220
    232e:	97 4f       	sbci	r25, 0xF7	; 247
    2330:	0e 94 2d 05 	call	0xa5a	; 0xa5a <vListInsertEnd>
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	16 c0       	rjmp	.+44     	; 0x2364 <xTaskPriorityInherit+0xda>
    2338:	a0 91 48 08 	lds	r26, 0x0848	; 0x800848 <pxCurrentTCB>
    233c:	b0 91 49 08 	lds	r27, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    2340:	56 96       	adiw	r26, 0x16	; 22
    2342:	8c 91       	ld	r24, X
    2344:	86 8b       	std	Z+22, r24	; 0x16
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	0d c0       	rjmp	.+26     	; 0x2364 <xTaskPriorityInherit+0xda>
    234a:	a0 91 48 08 	lds	r26, 0x0848	; 0x800848 <pxCurrentTCB>
    234e:	b0 91 49 08 	lds	r27, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	23 a1       	ldd	r18, Z+35	; 0x23
    2356:	56 96       	adiw	r26, 0x16	; 22
    2358:	9c 91       	ld	r25, X
    235a:	29 17       	cp	r18, r25
    235c:	18 f0       	brcs	.+6      	; 0x2364 <xTaskPriorityInherit+0xda>
    235e:	80 e0       	ldi	r24, 0x00	; 0
    2360:	01 c0       	rjmp	.+2      	; 0x2364 <xTaskPriorityInherit+0xda>
    2362:	80 e0       	ldi	r24, 0x00	; 0
    2364:	df 91       	pop	r29
    2366:	cf 91       	pop	r28
    2368:	1f 91       	pop	r17
    236a:	0f 91       	pop	r16
    236c:	08 95       	ret

0000236e <xTaskPriorityDisinherit>:
    236e:	0f 93       	push	r16
    2370:	1f 93       	push	r17
    2372:	cf 93       	push	r28
    2374:	df 93       	push	r29
    2376:	fc 01       	movw	r30, r24
    2378:	89 2b       	or	r24, r25
    237a:	79 f1       	breq	.+94     	; 0x23da <xTaskPriorityDisinherit+0x6c>
    237c:	84 a1       	ldd	r24, Z+36	; 0x24
    237e:	81 50       	subi	r24, 0x01	; 1
    2380:	84 a3       	std	Z+36, r24	; 0x24
    2382:	26 89       	ldd	r18, Z+22	; 0x16
    2384:	93 a1       	ldd	r25, Z+35	; 0x23
    2386:	29 17       	cp	r18, r25
    2388:	51 f1       	breq	.+84     	; 0x23de <xTaskPriorityDisinherit+0x70>
    238a:	81 11       	cpse	r24, r1
    238c:	2a c0       	rjmp	.+84     	; 0x23e2 <xTaskPriorityDisinherit+0x74>
    238e:	ef 01       	movw	r28, r30
    2390:	8f 01       	movw	r16, r30
    2392:	0e 5f       	subi	r16, 0xFE	; 254
    2394:	1f 4f       	sbci	r17, 0xFF	; 255
    2396:	c8 01       	movw	r24, r16
    2398:	0e 94 7f 05 	call	0xafe	; 0xafe <uxListRemove>
    239c:	8b a1       	ldd	r24, Y+35	; 0x23
    239e:	8e 8b       	std	Y+22, r24	; 0x16
    23a0:	24 e0       	ldi	r18, 0x04	; 4
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	28 1b       	sub	r18, r24
    23a6:	31 09       	sbc	r19, r1
    23a8:	3d 87       	std	Y+13, r19	; 0x0d
    23aa:	2c 87       	std	Y+12, r18	; 0x0c
    23ac:	90 91 ee 07 	lds	r25, 0x07EE	; 0x8007ee <uxTopReadyPriority>
    23b0:	98 17       	cp	r25, r24
    23b2:	10 f4       	brcc	.+4      	; 0x23b8 <xTaskPriorityDisinherit+0x4a>
    23b4:	80 93 ee 07 	sts	0x07EE, r24	; 0x8007ee <uxTopReadyPriority>
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	9c 01       	movw	r18, r24
    23bc:	22 0f       	add	r18, r18
    23be:	33 1f       	adc	r19, r19
    23c0:	22 0f       	add	r18, r18
    23c2:	33 1f       	adc	r19, r19
    23c4:	22 0f       	add	r18, r18
    23c6:	33 1f       	adc	r19, r19
    23c8:	82 0f       	add	r24, r18
    23ca:	93 1f       	adc	r25, r19
    23cc:	b8 01       	movw	r22, r16
    23ce:	8c 5d       	subi	r24, 0xDC	; 220
    23d0:	97 4f       	sbci	r25, 0xF7	; 247
    23d2:	0e 94 2d 05 	call	0xa5a	; 0xa5a <vListInsertEnd>
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	05 c0       	rjmp	.+10     	; 0x23e4 <xTaskPriorityDisinherit+0x76>
    23da:	80 e0       	ldi	r24, 0x00	; 0
    23dc:	03 c0       	rjmp	.+6      	; 0x23e4 <xTaskPriorityDisinherit+0x76>
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	01 c0       	rjmp	.+2      	; 0x23e4 <xTaskPriorityDisinherit+0x76>
    23e2:	80 e0       	ldi	r24, 0x00	; 0
    23e4:	df 91       	pop	r29
    23e6:	cf 91       	pop	r28
    23e8:	1f 91       	pop	r17
    23ea:	0f 91       	pop	r16
    23ec:	08 95       	ret

000023ee <vTaskPriorityDisinheritAfterTimeout>:
    23ee:	0f 93       	push	r16
    23f0:	1f 93       	push	r17
    23f2:	cf 93       	push	r28
    23f4:	df 93       	push	r29
    23f6:	fc 01       	movw	r30, r24
    23f8:	89 2b       	or	r24, r25
    23fa:	09 f4       	brne	.+2      	; 0x23fe <vTaskPriorityDisinheritAfterTimeout+0x10>
    23fc:	43 c0       	rjmp	.+134    	; 0x2484 <vTaskPriorityDisinheritAfterTimeout+0x96>
    23fe:	93 a1       	ldd	r25, Z+35	; 0x23
    2400:	96 17       	cp	r25, r22
    2402:	08 f4       	brcc	.+2      	; 0x2406 <vTaskPriorityDisinheritAfterTimeout+0x18>
    2404:	96 2f       	mov	r25, r22
    2406:	86 89       	ldd	r24, Z+22	; 0x16
    2408:	89 17       	cp	r24, r25
    240a:	e1 f1       	breq	.+120    	; 0x2484 <vTaskPriorityDisinheritAfterTimeout+0x96>
    240c:	24 a1       	ldd	r18, Z+36	; 0x24
    240e:	21 30       	cpi	r18, 0x01	; 1
    2410:	c9 f5       	brne	.+114    	; 0x2484 <vTaskPriorityDisinheritAfterTimeout+0x96>
    2412:	96 8b       	std	Z+22, r25	; 0x16
    2414:	24 85       	ldd	r18, Z+12	; 0x0c
    2416:	35 85       	ldd	r19, Z+13	; 0x0d
    2418:	33 23       	and	r19, r19
    241a:	34 f0       	brlt	.+12     	; 0x2428 <vTaskPriorityDisinheritAfterTimeout+0x3a>
    241c:	24 e0       	ldi	r18, 0x04	; 4
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	29 1b       	sub	r18, r25
    2422:	31 09       	sbc	r19, r1
    2424:	35 87       	std	Z+13, r19	; 0x0d
    2426:	24 87       	std	Z+12, r18	; 0x0c
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	9c 01       	movw	r18, r24
    242c:	22 0f       	add	r18, r18
    242e:	33 1f       	adc	r19, r19
    2430:	22 0f       	add	r18, r18
    2432:	33 1f       	adc	r19, r19
    2434:	22 0f       	add	r18, r18
    2436:	33 1f       	adc	r19, r19
    2438:	82 0f       	add	r24, r18
    243a:	93 1f       	adc	r25, r19
    243c:	8c 5d       	subi	r24, 0xDC	; 220
    243e:	97 4f       	sbci	r25, 0xF7	; 247
    2440:	22 85       	ldd	r18, Z+10	; 0x0a
    2442:	33 85       	ldd	r19, Z+11	; 0x0b
    2444:	28 17       	cp	r18, r24
    2446:	39 07       	cpc	r19, r25
    2448:	e9 f4       	brne	.+58     	; 0x2484 <vTaskPriorityDisinheritAfterTimeout+0x96>
    244a:	ef 01       	movw	r28, r30
    244c:	8f 01       	movw	r16, r30
    244e:	0e 5f       	subi	r16, 0xFE	; 254
    2450:	1f 4f       	sbci	r17, 0xFF	; 255
    2452:	c8 01       	movw	r24, r16
    2454:	0e 94 7f 05 	call	0xafe	; 0xafe <uxListRemove>
    2458:	8e 89       	ldd	r24, Y+22	; 0x16
    245a:	90 91 ee 07 	lds	r25, 0x07EE	; 0x8007ee <uxTopReadyPriority>
    245e:	98 17       	cp	r25, r24
    2460:	10 f4       	brcc	.+4      	; 0x2466 <vTaskPriorityDisinheritAfterTimeout+0x78>
    2462:	80 93 ee 07 	sts	0x07EE, r24	; 0x8007ee <uxTopReadyPriority>
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	9c 01       	movw	r18, r24
    246a:	22 0f       	add	r18, r18
    246c:	33 1f       	adc	r19, r19
    246e:	22 0f       	add	r18, r18
    2470:	33 1f       	adc	r19, r19
    2472:	22 0f       	add	r18, r18
    2474:	33 1f       	adc	r19, r19
    2476:	82 0f       	add	r24, r18
    2478:	93 1f       	adc	r25, r19
    247a:	b8 01       	movw	r22, r16
    247c:	8c 5d       	subi	r24, 0xDC	; 220
    247e:	97 4f       	sbci	r25, 0xF7	; 247
    2480:	0e 94 2d 05 	call	0xa5a	; 0xa5a <vListInsertEnd>
    2484:	df 91       	pop	r29
    2486:	cf 91       	pop	r28
    2488:	1f 91       	pop	r17
    248a:	0f 91       	pop	r16
    248c:	08 95       	ret

0000248e <pvTaskIncrementMutexHeldCount>:
    248e:	80 91 48 08 	lds	r24, 0x0848	; 0x800848 <pxCurrentTCB>
    2492:	90 91 49 08 	lds	r25, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    2496:	89 2b       	or	r24, r25
    2498:	39 f0       	breq	.+14     	; 0x24a8 <pvTaskIncrementMutexHeldCount+0x1a>
    249a:	e0 91 48 08 	lds	r30, 0x0848	; 0x800848 <pxCurrentTCB>
    249e:	f0 91 49 08 	lds	r31, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    24a2:	84 a1       	ldd	r24, Z+36	; 0x24
    24a4:	8f 5f       	subi	r24, 0xFF	; 255
    24a6:	84 a3       	std	Z+36, r24	; 0x24
    24a8:	80 91 48 08 	lds	r24, 0x0848	; 0x800848 <pxCurrentTCB>
    24ac:	90 91 49 08 	lds	r25, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    24b0:	08 95       	ret

000024b2 <xTaskNotifyWait>:
    24b2:	4f 92       	push	r4
    24b4:	5f 92       	push	r5
    24b6:	6f 92       	push	r6
    24b8:	7f 92       	push	r7
    24ba:	8f 92       	push	r8
    24bc:	9f 92       	push	r9
    24be:	af 92       	push	r10
    24c0:	bf 92       	push	r11
    24c2:	ef 92       	push	r14
    24c4:	ff 92       	push	r15
    24c6:	0f 93       	push	r16
    24c8:	1f 93       	push	r17
    24ca:	49 01       	movw	r8, r18
    24cc:	5a 01       	movw	r10, r20
    24ce:	0f b6       	in	r0, 0x3f	; 63
    24d0:	f8 94       	cli
    24d2:	0f 92       	push	r0
    24d4:	e0 91 48 08 	lds	r30, 0x0848	; 0x800848 <pxCurrentTCB>
    24d8:	f0 91 49 08 	lds	r31, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    24dc:	23 a5       	ldd	r18, Z+43	; 0x2b
    24de:	22 30       	cpi	r18, 0x02	; 2
    24e0:	21 f1       	breq	.+72     	; 0x252a <xTaskNotifyWait+0x78>
    24e2:	e0 91 48 08 	lds	r30, 0x0848	; 0x800848 <pxCurrentTCB>
    24e6:	f0 91 49 08 	lds	r31, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    24ea:	47 a0       	ldd	r4, Z+39	; 0x27
    24ec:	50 a4       	ldd	r5, Z+40	; 0x28
    24ee:	61 a4       	ldd	r6, Z+41	; 0x29
    24f0:	72 a4       	ldd	r7, Z+42	; 0x2a
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	80 95       	com	r24
    24f8:	90 95       	com	r25
    24fa:	a0 95       	com	r26
    24fc:	b0 95       	com	r27
    24fe:	84 21       	and	r24, r4
    2500:	95 21       	and	r25, r5
    2502:	a6 21       	and	r26, r6
    2504:	b7 21       	and	r27, r7
    2506:	87 a3       	std	Z+39, r24	; 0x27
    2508:	90 a7       	std	Z+40, r25	; 0x28
    250a:	a1 a7       	std	Z+41, r26	; 0x29
    250c:	b2 a7       	std	Z+42, r27	; 0x2a
    250e:	e0 91 48 08 	lds	r30, 0x0848	; 0x800848 <pxCurrentTCB>
    2512:	f0 91 49 08 	lds	r31, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    2516:	81 e0       	ldi	r24, 0x01	; 1
    2518:	83 a7       	std	Z+43, r24	; 0x2b
    251a:	e1 14       	cp	r14, r1
    251c:	f1 04       	cpc	r15, r1
    251e:	29 f0       	breq	.+10     	; 0x252a <xTaskNotifyWait+0x78>
    2520:	61 e0       	ldi	r22, 0x01	; 1
    2522:	c7 01       	movw	r24, r14
    2524:	5f da       	rcall	.-2882   	; 0x19e4 <prvAddCurrentTaskToDelayedList>
    2526:	0e 94 54 06 	call	0xca8	; 0xca8 <vPortYield>
    252a:	0f 90       	pop	r0
    252c:	0f be       	out	0x3f, r0	; 63
    252e:	0f b6       	in	r0, 0x3f	; 63
    2530:	f8 94       	cli
    2532:	0f 92       	push	r0
    2534:	01 15       	cp	r16, r1
    2536:	11 05       	cpc	r17, r1
    2538:	69 f0       	breq	.+26     	; 0x2554 <xTaskNotifyWait+0xa2>
    253a:	e0 91 48 08 	lds	r30, 0x0848	; 0x800848 <pxCurrentTCB>
    253e:	f0 91 49 08 	lds	r31, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    2542:	87 a1       	ldd	r24, Z+39	; 0x27
    2544:	90 a5       	ldd	r25, Z+40	; 0x28
    2546:	a1 a5       	ldd	r26, Z+41	; 0x29
    2548:	b2 a5       	ldd	r27, Z+42	; 0x2a
    254a:	f8 01       	movw	r30, r16
    254c:	80 83       	st	Z, r24
    254e:	91 83       	std	Z+1, r25	; 0x01
    2550:	a2 83       	std	Z+2, r26	; 0x02
    2552:	b3 83       	std	Z+3, r27	; 0x03
    2554:	e0 91 48 08 	lds	r30, 0x0848	; 0x800848 <pxCurrentTCB>
    2558:	f0 91 49 08 	lds	r31, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    255c:	83 a5       	ldd	r24, Z+43	; 0x2b
    255e:	82 30       	cpi	r24, 0x02	; 2
    2560:	b1 f4       	brne	.+44     	; 0x258e <xTaskNotifyWait+0xdc>
    2562:	e0 91 48 08 	lds	r30, 0x0848	; 0x800848 <pxCurrentTCB>
    2566:	f0 91 49 08 	lds	r31, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    256a:	87 a1       	ldd	r24, Z+39	; 0x27
    256c:	90 a5       	ldd	r25, Z+40	; 0x28
    256e:	a1 a5       	ldd	r26, Z+41	; 0x29
    2570:	b2 a5       	ldd	r27, Z+42	; 0x2a
    2572:	80 94       	com	r8
    2574:	90 94       	com	r9
    2576:	a0 94       	com	r10
    2578:	b0 94       	com	r11
    257a:	88 22       	and	r8, r24
    257c:	99 22       	and	r9, r25
    257e:	aa 22       	and	r10, r26
    2580:	bb 22       	and	r11, r27
    2582:	87 a2       	std	Z+39, r8	; 0x27
    2584:	90 a6       	std	Z+40, r9	; 0x28
    2586:	a1 a6       	std	Z+41, r10	; 0x29
    2588:	b2 a6       	std	Z+42, r11	; 0x2a
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	01 c0       	rjmp	.+2      	; 0x2590 <xTaskNotifyWait+0xde>
    258e:	80 e0       	ldi	r24, 0x00	; 0
    2590:	e0 91 48 08 	lds	r30, 0x0848	; 0x800848 <pxCurrentTCB>
    2594:	f0 91 49 08 	lds	r31, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    2598:	13 a6       	std	Z+43, r1	; 0x2b
    259a:	0f 90       	pop	r0
    259c:	0f be       	out	0x3f, r0	; 63
    259e:	1f 91       	pop	r17
    25a0:	0f 91       	pop	r16
    25a2:	ff 90       	pop	r15
    25a4:	ef 90       	pop	r14
    25a6:	bf 90       	pop	r11
    25a8:	af 90       	pop	r10
    25aa:	9f 90       	pop	r9
    25ac:	8f 90       	pop	r8
    25ae:	7f 90       	pop	r7
    25b0:	6f 90       	pop	r6
    25b2:	5f 90       	pop	r5
    25b4:	4f 90       	pop	r4
    25b6:	08 95       	ret

000025b8 <xTaskGenericNotify>:
    25b8:	0f 93       	push	r16
    25ba:	1f 93       	push	r17
    25bc:	cf 93       	push	r28
    25be:	df 93       	push	r29
    25c0:	fc 01       	movw	r30, r24
    25c2:	0f b6       	in	r0, 0x3f	; 63
    25c4:	f8 94       	cli
    25c6:	0f 92       	push	r0
    25c8:	01 15       	cp	r16, r1
    25ca:	11 05       	cpc	r17, r1
    25cc:	49 f0       	breq	.+18     	; 0x25e0 <xTaskGenericNotify+0x28>
    25ce:	87 a1       	ldd	r24, Z+39	; 0x27
    25d0:	90 a5       	ldd	r25, Z+40	; 0x28
    25d2:	a1 a5       	ldd	r26, Z+41	; 0x29
    25d4:	b2 a5       	ldd	r27, Z+42	; 0x2a
    25d6:	e8 01       	movw	r28, r16
    25d8:	88 83       	st	Y, r24
    25da:	99 83       	std	Y+1, r25	; 0x01
    25dc:	aa 83       	std	Y+2, r26	; 0x02
    25de:	bb 83       	std	Y+3, r27	; 0x03
    25e0:	83 a5       	ldd	r24, Z+43	; 0x2b
    25e2:	92 e0       	ldi	r25, 0x02	; 2
    25e4:	93 a7       	std	Z+43, r25	; 0x2b
    25e6:	22 30       	cpi	r18, 0x02	; 2
    25e8:	b1 f0       	breq	.+44     	; 0x2616 <xTaskGenericNotify+0x5e>
    25ea:	18 f4       	brcc	.+6      	; 0x25f2 <xTaskGenericNotify+0x3a>
    25ec:	21 30       	cpi	r18, 0x01	; 1
    25ee:	31 f0       	breq	.+12     	; 0x25fc <xTaskGenericNotify+0x44>
    25f0:	2a c0       	rjmp	.+84     	; 0x2646 <xTaskGenericNotify+0x8e>
    25f2:	23 30       	cpi	r18, 0x03	; 3
    25f4:	e9 f0       	breq	.+58     	; 0x2630 <xTaskGenericNotify+0x78>
    25f6:	24 30       	cpi	r18, 0x04	; 4
    25f8:	01 f1       	breq	.+64     	; 0x263a <xTaskGenericNotify+0x82>
    25fa:	25 c0       	rjmp	.+74     	; 0x2646 <xTaskGenericNotify+0x8e>
    25fc:	07 a1       	ldd	r16, Z+39	; 0x27
    25fe:	10 a5       	ldd	r17, Z+40	; 0x28
    2600:	21 a5       	ldd	r18, Z+41	; 0x29
    2602:	32 a5       	ldd	r19, Z+42	; 0x2a
    2604:	40 2b       	or	r20, r16
    2606:	51 2b       	or	r21, r17
    2608:	62 2b       	or	r22, r18
    260a:	73 2b       	or	r23, r19
    260c:	47 a3       	std	Z+39, r20	; 0x27
    260e:	50 a7       	std	Z+40, r21	; 0x28
    2610:	61 a7       	std	Z+41, r22	; 0x29
    2612:	72 a7       	std	Z+42, r23	; 0x2a
    2614:	18 c0       	rjmp	.+48     	; 0x2646 <xTaskGenericNotify+0x8e>
    2616:	47 a1       	ldd	r20, Z+39	; 0x27
    2618:	50 a5       	ldd	r21, Z+40	; 0x28
    261a:	61 a5       	ldd	r22, Z+41	; 0x29
    261c:	72 a5       	ldd	r23, Z+42	; 0x2a
    261e:	4f 5f       	subi	r20, 0xFF	; 255
    2620:	5f 4f       	sbci	r21, 0xFF	; 255
    2622:	6f 4f       	sbci	r22, 0xFF	; 255
    2624:	7f 4f       	sbci	r23, 0xFF	; 255
    2626:	47 a3       	std	Z+39, r20	; 0x27
    2628:	50 a7       	std	Z+40, r21	; 0x28
    262a:	61 a7       	std	Z+41, r22	; 0x29
    262c:	72 a7       	std	Z+42, r23	; 0x2a
    262e:	0b c0       	rjmp	.+22     	; 0x2646 <xTaskGenericNotify+0x8e>
    2630:	47 a3       	std	Z+39, r20	; 0x27
    2632:	50 a7       	std	Z+40, r21	; 0x28
    2634:	61 a7       	std	Z+41, r22	; 0x29
    2636:	72 a7       	std	Z+42, r23	; 0x2a
    2638:	06 c0       	rjmp	.+12     	; 0x2646 <xTaskGenericNotify+0x8e>
    263a:	82 30       	cpi	r24, 0x02	; 2
    263c:	79 f1       	breq	.+94     	; 0x269c <xTaskGenericNotify+0xe4>
    263e:	47 a3       	std	Z+39, r20	; 0x27
    2640:	50 a7       	std	Z+40, r21	; 0x28
    2642:	61 a7       	std	Z+41, r22	; 0x29
    2644:	72 a7       	std	Z+42, r23	; 0x2a
    2646:	81 30       	cpi	r24, 0x01	; 1
    2648:	59 f5       	brne	.+86     	; 0x26a0 <xTaskGenericNotify+0xe8>
    264a:	ef 01       	movw	r28, r30
    264c:	8f 01       	movw	r16, r30
    264e:	0e 5f       	subi	r16, 0xFE	; 254
    2650:	1f 4f       	sbci	r17, 0xFF	; 255
    2652:	c8 01       	movw	r24, r16
    2654:	0e 94 7f 05 	call	0xafe	; 0xafe <uxListRemove>
    2658:	8e 89       	ldd	r24, Y+22	; 0x16
    265a:	90 91 ee 07 	lds	r25, 0x07EE	; 0x8007ee <uxTopReadyPriority>
    265e:	98 17       	cp	r25, r24
    2660:	10 f4       	brcc	.+4      	; 0x2666 <xTaskGenericNotify+0xae>
    2662:	80 93 ee 07 	sts	0x07EE, r24	; 0x8007ee <uxTopReadyPriority>
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	9c 01       	movw	r18, r24
    266a:	22 0f       	add	r18, r18
    266c:	33 1f       	adc	r19, r19
    266e:	22 0f       	add	r18, r18
    2670:	33 1f       	adc	r19, r19
    2672:	22 0f       	add	r18, r18
    2674:	33 1f       	adc	r19, r19
    2676:	82 0f       	add	r24, r18
    2678:	93 1f       	adc	r25, r19
    267a:	b8 01       	movw	r22, r16
    267c:	8c 5d       	subi	r24, 0xDC	; 220
    267e:	97 4f       	sbci	r25, 0xF7	; 247
    2680:	0e 94 2d 05 	call	0xa5a	; 0xa5a <vListInsertEnd>
    2684:	e0 91 48 08 	lds	r30, 0x0848	; 0x800848 <pxCurrentTCB>
    2688:	f0 91 49 08 	lds	r31, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    268c:	9e 89       	ldd	r25, Y+22	; 0x16
    268e:	86 89       	ldd	r24, Z+22	; 0x16
    2690:	89 17       	cp	r24, r25
    2692:	40 f4       	brcc	.+16     	; 0x26a4 <xTaskGenericNotify+0xec>
    2694:	0e 94 54 06 	call	0xca8	; 0xca8 <vPortYield>
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	05 c0       	rjmp	.+10     	; 0x26a6 <xTaskGenericNotify+0xee>
    269c:	80 e0       	ldi	r24, 0x00	; 0
    269e:	03 c0       	rjmp	.+6      	; 0x26a6 <xTaskGenericNotify+0xee>
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	01 c0       	rjmp	.+2      	; 0x26a6 <xTaskGenericNotify+0xee>
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	0f 90       	pop	r0
    26a8:	0f be       	out	0x3f, r0	; 63
    26aa:	df 91       	pop	r29
    26ac:	cf 91       	pop	r28
    26ae:	1f 91       	pop	r17
    26b0:	0f 91       	pop	r16
    26b2:	08 95       	ret

000026b4 <xTaskGenericNotifyFromISR>:
    26b4:	ef 92       	push	r14
    26b6:	ff 92       	push	r15
    26b8:	0f 93       	push	r16
    26ba:	1f 93       	push	r17
    26bc:	cf 93       	push	r28
    26be:	df 93       	push	r29
    26c0:	fc 01       	movw	r30, r24
    26c2:	01 15       	cp	r16, r1
    26c4:	11 05       	cpc	r17, r1
    26c6:	49 f0       	breq	.+18     	; 0x26da <xTaskGenericNotifyFromISR+0x26>
    26c8:	87 a1       	ldd	r24, Z+39	; 0x27
    26ca:	90 a5       	ldd	r25, Z+40	; 0x28
    26cc:	a1 a5       	ldd	r26, Z+41	; 0x29
    26ce:	b2 a5       	ldd	r27, Z+42	; 0x2a
    26d0:	e8 01       	movw	r28, r16
    26d2:	88 83       	st	Y, r24
    26d4:	99 83       	std	Y+1, r25	; 0x01
    26d6:	aa 83       	std	Y+2, r26	; 0x02
    26d8:	bb 83       	std	Y+3, r27	; 0x03
    26da:	83 a5       	ldd	r24, Z+43	; 0x2b
    26dc:	92 e0       	ldi	r25, 0x02	; 2
    26de:	93 a7       	std	Z+43, r25	; 0x2b
    26e0:	22 30       	cpi	r18, 0x02	; 2
    26e2:	b1 f0       	breq	.+44     	; 0x2710 <xTaskGenericNotifyFromISR+0x5c>
    26e4:	18 f4       	brcc	.+6      	; 0x26ec <xTaskGenericNotifyFromISR+0x38>
    26e6:	21 30       	cpi	r18, 0x01	; 1
    26e8:	31 f0       	breq	.+12     	; 0x26f6 <xTaskGenericNotifyFromISR+0x42>
    26ea:	2b c0       	rjmp	.+86     	; 0x2742 <xTaskGenericNotifyFromISR+0x8e>
    26ec:	23 30       	cpi	r18, 0x03	; 3
    26ee:	e9 f0       	breq	.+58     	; 0x272a <xTaskGenericNotifyFromISR+0x76>
    26f0:	24 30       	cpi	r18, 0x04	; 4
    26f2:	01 f1       	breq	.+64     	; 0x2734 <xTaskGenericNotifyFromISR+0x80>
    26f4:	26 c0       	rjmp	.+76     	; 0x2742 <xTaskGenericNotifyFromISR+0x8e>
    26f6:	07 a1       	ldd	r16, Z+39	; 0x27
    26f8:	10 a5       	ldd	r17, Z+40	; 0x28
    26fa:	21 a5       	ldd	r18, Z+41	; 0x29
    26fc:	32 a5       	ldd	r19, Z+42	; 0x2a
    26fe:	40 2b       	or	r20, r16
    2700:	51 2b       	or	r21, r17
    2702:	62 2b       	or	r22, r18
    2704:	73 2b       	or	r23, r19
    2706:	47 a3       	std	Z+39, r20	; 0x27
    2708:	50 a7       	std	Z+40, r21	; 0x28
    270a:	61 a7       	std	Z+41, r22	; 0x29
    270c:	72 a7       	std	Z+42, r23	; 0x2a
    270e:	19 c0       	rjmp	.+50     	; 0x2742 <xTaskGenericNotifyFromISR+0x8e>
    2710:	47 a1       	ldd	r20, Z+39	; 0x27
    2712:	50 a5       	ldd	r21, Z+40	; 0x28
    2714:	61 a5       	ldd	r22, Z+41	; 0x29
    2716:	72 a5       	ldd	r23, Z+42	; 0x2a
    2718:	4f 5f       	subi	r20, 0xFF	; 255
    271a:	5f 4f       	sbci	r21, 0xFF	; 255
    271c:	6f 4f       	sbci	r22, 0xFF	; 255
    271e:	7f 4f       	sbci	r23, 0xFF	; 255
    2720:	47 a3       	std	Z+39, r20	; 0x27
    2722:	50 a7       	std	Z+40, r21	; 0x28
    2724:	61 a7       	std	Z+41, r22	; 0x29
    2726:	72 a7       	std	Z+42, r23	; 0x2a
    2728:	0c c0       	rjmp	.+24     	; 0x2742 <xTaskGenericNotifyFromISR+0x8e>
    272a:	47 a3       	std	Z+39, r20	; 0x27
    272c:	50 a7       	std	Z+40, r21	; 0x28
    272e:	61 a7       	std	Z+41, r22	; 0x29
    2730:	72 a7       	std	Z+42, r23	; 0x2a
    2732:	07 c0       	rjmp	.+14     	; 0x2742 <xTaskGenericNotifyFromISR+0x8e>
    2734:	82 30       	cpi	r24, 0x02	; 2
    2736:	09 f4       	brne	.+2      	; 0x273a <xTaskGenericNotifyFromISR+0x86>
    2738:	41 c0       	rjmp	.+130    	; 0x27bc <xTaskGenericNotifyFromISR+0x108>
    273a:	47 a3       	std	Z+39, r20	; 0x27
    273c:	50 a7       	std	Z+40, r21	; 0x28
    273e:	61 a7       	std	Z+41, r22	; 0x29
    2740:	72 a7       	std	Z+42, r23	; 0x2a
    2742:	81 30       	cpi	r24, 0x01	; 1
    2744:	e9 f5       	brne	.+122    	; 0x27c0 <xTaskGenericNotifyFromISR+0x10c>
    2746:	ef 01       	movw	r28, r30
    2748:	80 91 e4 07 	lds	r24, 0x07E4	; 0x8007e4 <uxSchedulerSuspended>
    274c:	81 11       	cpse	r24, r1
    274e:	1d c0       	rjmp	.+58     	; 0x278a <xTaskGenericNotifyFromISR+0xd6>
    2750:	8f 01       	movw	r16, r30
    2752:	0e 5f       	subi	r16, 0xFE	; 254
    2754:	1f 4f       	sbci	r17, 0xFF	; 255
    2756:	c8 01       	movw	r24, r16
    2758:	0e 94 7f 05 	call	0xafe	; 0xafe <uxListRemove>
    275c:	8e 89       	ldd	r24, Y+22	; 0x16
    275e:	90 91 ee 07 	lds	r25, 0x07EE	; 0x8007ee <uxTopReadyPriority>
    2762:	98 17       	cp	r25, r24
    2764:	10 f4       	brcc	.+4      	; 0x276a <xTaskGenericNotifyFromISR+0xb6>
    2766:	80 93 ee 07 	sts	0x07EE, r24	; 0x8007ee <uxTopReadyPriority>
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	9c 01       	movw	r18, r24
    276e:	22 0f       	add	r18, r18
    2770:	33 1f       	adc	r19, r19
    2772:	22 0f       	add	r18, r18
    2774:	33 1f       	adc	r19, r19
    2776:	22 0f       	add	r18, r18
    2778:	33 1f       	adc	r19, r19
    277a:	82 0f       	add	r24, r18
    277c:	93 1f       	adc	r25, r19
    277e:	b8 01       	movw	r22, r16
    2780:	8c 5d       	subi	r24, 0xDC	; 220
    2782:	97 4f       	sbci	r25, 0xF7	; 247
    2784:	0e 94 2d 05 	call	0xa5a	; 0xa5a <vListInsertEnd>
    2788:	07 c0       	rjmp	.+14     	; 0x2798 <xTaskGenericNotifyFromISR+0xe4>
    278a:	bf 01       	movw	r22, r30
    278c:	64 5f       	subi	r22, 0xF4	; 244
    278e:	7f 4f       	sbci	r23, 0xFF	; 255
    2790:	85 e0       	ldi	r24, 0x05	; 5
    2792:	98 e0       	ldi	r25, 0x08	; 8
    2794:	0e 94 2d 05 	call	0xa5a	; 0xa5a <vListInsertEnd>
    2798:	e0 91 48 08 	lds	r30, 0x0848	; 0x800848 <pxCurrentTCB>
    279c:	f0 91 49 08 	lds	r31, 0x0849	; 0x800849 <pxCurrentTCB+0x1>
    27a0:	9e 89       	ldd	r25, Y+22	; 0x16
    27a2:	86 89       	ldd	r24, Z+22	; 0x16
    27a4:	89 17       	cp	r24, r25
    27a6:	70 f4       	brcc	.+28     	; 0x27c4 <xTaskGenericNotifyFromISR+0x110>
    27a8:	e1 14       	cp	r14, r1
    27aa:	f1 04       	cpc	r15, r1
    27ac:	19 f0       	breq	.+6      	; 0x27b4 <xTaskGenericNotifyFromISR+0x100>
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	f7 01       	movw	r30, r14
    27b2:	80 83       	st	Z, r24
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	80 93 eb 07 	sts	0x07EB, r24	; 0x8007eb <xYieldPending>
    27ba:	05 c0       	rjmp	.+10     	; 0x27c6 <xTaskGenericNotifyFromISR+0x112>
    27bc:	80 e0       	ldi	r24, 0x00	; 0
    27be:	03 c0       	rjmp	.+6      	; 0x27c6 <xTaskGenericNotifyFromISR+0x112>
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	01 c0       	rjmp	.+2      	; 0x27c6 <xTaskGenericNotifyFromISR+0x112>
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	df 91       	pop	r29
    27c8:	cf 91       	pop	r28
    27ca:	1f 91       	pop	r17
    27cc:	0f 91       	pop	r16
    27ce:	ff 90       	pop	r15
    27d0:	ef 90       	pop	r14
    27d2:	08 95       	ret

000027d4 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    27d4:	00 97       	sbiw	r24, 0x00	; 0
    27d6:	21 f4       	brne	.+8      	; 0x27e0 <xTaskNotifyStateClear+0xc>
    27d8:	80 91 48 08 	lds	r24, 0x0848	; 0x800848 <pxCurrentTCB>
    27dc:	90 91 49 08 	lds	r25, 0x0849	; 0x800849 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    27e0:	0f b6       	in	r0, 0x3f	; 63
    27e2:	f8 94       	cli
    27e4:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    27e6:	fc 01       	movw	r30, r24
    27e8:	23 a5       	ldd	r18, Z+43	; 0x2b
    27ea:	22 30       	cpi	r18, 0x02	; 2
    27ec:	19 f4       	brne	.+6      	; 0x27f4 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    27ee:	13 a6       	std	Z+43, r1	; 0x2b
                xReturn = pdPASS;
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	01 c0       	rjmp	.+2      	; 0x27f6 <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    27f4:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    27f6:	0f 90       	pop	r0
    27f8:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    27fa:	08 95       	ret

000027fc <prvInsertTimerInActiveList>:
    27fc:	fc 01       	movw	r30, r24
    27fe:	73 83       	std	Z+3, r23	; 0x03
    2800:	62 83       	std	Z+2, r22	; 0x02
    2802:	91 87       	std	Z+9, r25	; 0x09
    2804:	80 87       	std	Z+8, r24	; 0x08
    2806:	46 17       	cp	r20, r22
    2808:	57 07       	cpc	r21, r23
    280a:	90 f0       	brcs	.+36     	; 0x2830 <prvInsertTimerInActiveList+0x34>
    280c:	42 1b       	sub	r20, r18
    280e:	53 0b       	sbc	r21, r19
    2810:	84 85       	ldd	r24, Z+12	; 0x0c
    2812:	95 85       	ldd	r25, Z+13	; 0x0d
    2814:	48 17       	cp	r20, r24
    2816:	59 07       	cpc	r21, r25
    2818:	e0 f4       	brcc	.+56     	; 0x2852 <prvInsertTimerInActiveList+0x56>
    281a:	bf 01       	movw	r22, r30
    281c:	6e 5f       	subi	r22, 0xFE	; 254
    281e:	7f 4f       	sbci	r23, 0xFF	; 255
    2820:	80 91 50 08 	lds	r24, 0x0850	; 0x800850 <pxOverflowTimerList>
    2824:	90 91 51 08 	lds	r25, 0x0851	; 0x800851 <pxOverflowTimerList+0x1>
    2828:	0e 94 4e 05 	call	0xa9c	; 0xa9c <vListInsert>
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	08 95       	ret
    2830:	42 17       	cp	r20, r18
    2832:	53 07       	cpc	r21, r19
    2834:	18 f4       	brcc	.+6      	; 0x283c <prvInsertTimerInActiveList+0x40>
    2836:	62 17       	cp	r22, r18
    2838:	73 07       	cpc	r23, r19
    283a:	68 f4       	brcc	.+26     	; 0x2856 <prvInsertTimerInActiveList+0x5a>
    283c:	bf 01       	movw	r22, r30
    283e:	6e 5f       	subi	r22, 0xFE	; 254
    2840:	7f 4f       	sbci	r23, 0xFF	; 255
    2842:	80 91 52 08 	lds	r24, 0x0852	; 0x800852 <pxCurrentTimerList>
    2846:	90 91 53 08 	lds	r25, 0x0853	; 0x800853 <pxCurrentTimerList+0x1>
    284a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <vListInsert>
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	08 95       	ret
    2852:	81 e0       	ldi	r24, 0x01	; 1
    2854:	08 95       	ret
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	08 95       	ret

0000285a <prvCheckForValidListAndQueue>:
    285a:	0f b6       	in	r0, 0x3f	; 63
    285c:	f8 94       	cli
    285e:	0f 92       	push	r0
    2860:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <xTimerQueue>
    2864:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <xTimerQueue+0x1>
    2868:	89 2b       	or	r24, r25
    286a:	e9 f4       	brne	.+58     	; 0x28a6 <prvCheckForValidListAndQueue+0x4c>
    286c:	8d e5       	ldi	r24, 0x5D	; 93
    286e:	98 e0       	ldi	r25, 0x08	; 8
    2870:	0e 94 1b 05 	call	0xa36	; 0xa36 <vListInitialise>
    2874:	84 e5       	ldi	r24, 0x54	; 84
    2876:	98 e0       	ldi	r25, 0x08	; 8
    2878:	0e 94 1b 05 	call	0xa36	; 0xa36 <vListInitialise>
    287c:	8d e5       	ldi	r24, 0x5D	; 93
    287e:	98 e0       	ldi	r25, 0x08	; 8
    2880:	90 93 53 08 	sts	0x0853, r25	; 0x800853 <pxCurrentTimerList+0x1>
    2884:	80 93 52 08 	sts	0x0852, r24	; 0x800852 <pxCurrentTimerList>
    2888:	84 e5       	ldi	r24, 0x54	; 84
    288a:	98 e0       	ldi	r25, 0x08	; 8
    288c:	90 93 51 08 	sts	0x0851, r25	; 0x800851 <pxOverflowTimerList+0x1>
    2890:	80 93 50 08 	sts	0x0850, r24	; 0x800850 <pxOverflowTimerList>
    2894:	40 e0       	ldi	r20, 0x00	; 0
    2896:	65 e0       	ldi	r22, 0x05	; 5
    2898:	8a e0       	ldi	r24, 0x0A	; 10
    289a:	0e 94 2f 08 	call	0x105e	; 0x105e <xQueueGenericCreate>
    289e:	90 93 4f 08 	sts	0x084F, r25	; 0x80084f <xTimerQueue+0x1>
    28a2:	80 93 4e 08 	sts	0x084E, r24	; 0x80084e <xTimerQueue>
    28a6:	0f 90       	pop	r0
    28a8:	0f be       	out	0x3f, r0	; 63
    28aa:	08 95       	ret

000028ac <xTimerCreateTimerTask>:
    28ac:	ef 92       	push	r14
    28ae:	ff 92       	push	r15
    28b0:	0f 93       	push	r16
    28b2:	d3 df       	rcall	.-90     	; 0x285a <prvCheckForValidListAndQueue>
    28b4:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <xTimerQueue>
    28b8:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <xTimerQueue+0x1>
    28bc:	89 2b       	or	r24, r25
    28be:	89 f0       	breq	.+34     	; 0x28e2 <xTimerCreateTimerTask+0x36>
    28c0:	0f 2e       	mov	r0, r31
    28c2:	fc e4       	ldi	r31, 0x4C	; 76
    28c4:	ef 2e       	mov	r14, r31
    28c6:	f8 e0       	ldi	r31, 0x08	; 8
    28c8:	ff 2e       	mov	r15, r31
    28ca:	f0 2d       	mov	r31, r0
    28cc:	06 e0       	ldi	r16, 0x06	; 6
    28ce:	20 e0       	ldi	r18, 0x00	; 0
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	45 e5       	ldi	r20, 0x55	; 85
    28d4:	50 e0       	ldi	r21, 0x00	; 0
    28d6:	6a ef       	ldi	r22, 0xFA	; 250
    28d8:	74 e0       	ldi	r23, 0x04	; 4
    28da:	83 e0       	ldi	r24, 0x03	; 3
    28dc:	91 e0       	ldi	r25, 0x01	; 1
    28de:	d6 d8       	rcall	.-3668   	; 0x1a8c <xTaskCreate>
    28e0:	01 c0       	rjmp	.+2      	; 0x28e4 <xTimerCreateTimerTask+0x38>
    28e2:	80 e0       	ldi	r24, 0x00	; 0
    28e4:	0f 91       	pop	r16
    28e6:	ff 90       	pop	r15
    28e8:	ef 90       	pop	r14
    28ea:	08 95       	ret

000028ec <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    28ec:	0f 93       	push	r16
    28ee:	1f 93       	push	r17
    28f0:	cf 93       	push	r28
    28f2:	df 93       	push	r29
    28f4:	00 d0       	rcall	.+0      	; 0x28f6 <xTimerGenericCommand+0xa>
    28f6:	1f 92       	push	r1
    28f8:	1f 92       	push	r1
    28fa:	cd b7       	in	r28, 0x3d	; 61
    28fc:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    28fe:	e0 91 4e 08 	lds	r30, 0x084E	; 0x80084e <xTimerQueue>
    2902:	f0 91 4f 08 	lds	r31, 0x084F	; 0x80084f <xTimerQueue+0x1>
    2906:	30 97       	sbiw	r30, 0x00	; 0
    2908:	69 f1       	breq	.+90     	; 0x2964 <xTimerGenericCommand+0x78>
    290a:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    290c:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    290e:	5b 83       	std	Y+3, r21	; 0x03
    2910:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    2912:	9d 83       	std	Y+5, r25	; 0x05
    2914:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2916:	66 30       	cpi	r22, 0x06	; 6
    2918:	e4 f4       	brge	.+56     	; 0x2952 <xTimerGenericCommand+0x66>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    291a:	a9 dc       	rcall	.-1710   	; 0x226e <xTaskGetSchedulerState>
    291c:	82 30       	cpi	r24, 0x02	; 2
    291e:	61 f4       	brne	.+24     	; 0x2938 <xTimerGenericCommand+0x4c>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	a8 01       	movw	r20, r16
    2924:	be 01       	movw	r22, r28
    2926:	6f 5f       	subi	r22, 0xFF	; 255
    2928:	7f 4f       	sbci	r23, 0xFF	; 255
    292a:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <xTimerQueue>
    292e:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <xTimerQueue+0x1>
    2932:	0e 94 5d 08 	call	0x10ba	; 0x10ba <xQueueGenericSend>
    2936:	17 c0       	rjmp	.+46     	; 0x2966 <xTimerGenericCommand+0x7a>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	40 e0       	ldi	r20, 0x00	; 0
    293c:	50 e0       	ldi	r21, 0x00	; 0
    293e:	be 01       	movw	r22, r28
    2940:	6f 5f       	subi	r22, 0xFF	; 255
    2942:	7f 4f       	sbci	r23, 0xFF	; 255
    2944:	80 91 4e 08 	lds	r24, 0x084E	; 0x80084e <xTimerQueue>
    2948:	90 91 4f 08 	lds	r25, 0x084F	; 0x80084f <xTimerQueue+0x1>
    294c:	0e 94 5d 08 	call	0x10ba	; 0x10ba <xQueueGenericSend>
    2950:	0a c0       	rjmp	.+20     	; 0x2966 <xTimerGenericCommand+0x7a>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	ad 01       	movw	r20, r26
    2956:	be 01       	movw	r22, r28
    2958:	6f 5f       	subi	r22, 0xFF	; 255
    295a:	7f 4f       	sbci	r23, 0xFF	; 255
    295c:	cf 01       	movw	r24, r30
    295e:	0e 94 0a 09 	call	0x1214	; 0x1214 <xQueueGenericSendFromISR>
    2962:	01 c0       	rjmp	.+2      	; 0x2966 <xTimerGenericCommand+0x7a>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    2964:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    2966:	0f 90       	pop	r0
    2968:	0f 90       	pop	r0
    296a:	0f 90       	pop	r0
    296c:	0f 90       	pop	r0
    296e:	0f 90       	pop	r0
    2970:	df 91       	pop	r29
    2972:	cf 91       	pop	r28
    2974:	1f 91       	pop	r17
    2976:	0f 91       	pop	r16
    2978:	08 95       	ret

0000297a <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    297a:	af 92       	push	r10
    297c:	bf 92       	push	r11
    297e:	cf 92       	push	r12
    2980:	df 92       	push	r13
    2982:	ef 92       	push	r14
    2984:	ff 92       	push	r15
    2986:	0f 93       	push	r16
    2988:	1f 93       	push	r17
    298a:	cf 93       	push	r28
    298c:	df 93       	push	r29
    298e:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    2990:	d4 d9       	rcall	.-3160   	; 0x1d3a <xTaskGetTickCount>
    2992:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    2994:	80 91 4a 08 	lds	r24, 0x084A	; 0x80084a <xLastTime.2432>
    2998:	90 91 4b 08 	lds	r25, 0x084B	; 0x80084b <xLastTime.2432+0x1>
    299c:	e8 16       	cp	r14, r24
    299e:	f9 06       	cpc	r15, r25
    29a0:	08 f0       	brcs	.+2      	; 0x29a4 <prvSampleTimeNow+0x2a>
    29a2:	47 c0       	rjmp	.+142    	; 0x2a32 <prvSampleTimeNow+0xb8>
    29a4:	2f c0       	rjmp	.+94     	; 0x2a04 <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    29a6:	05 80       	ldd	r0, Z+5	; 0x05
    29a8:	f6 81       	ldd	r31, Z+6	; 0x06
    29aa:	e0 2d       	mov	r30, r0
    29ac:	a0 80       	ld	r10, Z
    29ae:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    29b0:	c6 81       	ldd	r28, Z+6	; 0x06
    29b2:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    29b4:	8e 01       	movw	r16, r28
    29b6:	0e 5f       	subi	r16, 0xFE	; 254
    29b8:	1f 4f       	sbci	r17, 0xFF	; 255
    29ba:	c8 01       	movw	r24, r16
    29bc:	0e 94 7f 05 	call	0xafe	; 0xafe <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    29c0:	e8 89       	ldd	r30, Y+16	; 0x10
    29c2:	f9 89       	ldd	r31, Y+17	; 0x11
    29c4:	ce 01       	movw	r24, r28
    29c6:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    29c8:	8b 89       	ldd	r24, Y+19	; 0x13
    29ca:	82 ff       	sbrs	r24, 2
    29cc:	1b c0       	rjmp	.+54     	; 0x2a04 <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    29ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    29d0:	9d 85       	ldd	r25, Y+13	; 0x0d
    29d2:	8a 0d       	add	r24, r10
    29d4:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    29d6:	a8 16       	cp	r10, r24
    29d8:	b9 06       	cpc	r11, r25
    29da:	60 f4       	brcc	.+24     	; 0x29f4 <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    29dc:	9b 83       	std	Y+3, r25	; 0x03
    29de:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    29e0:	d9 87       	std	Y+9, r29	; 0x09
    29e2:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    29e4:	b8 01       	movw	r22, r16
    29e6:	80 91 52 08 	lds	r24, 0x0852	; 0x800852 <pxCurrentTimerList>
    29ea:	90 91 53 08 	lds	r25, 0x0853	; 0x800853 <pxCurrentTimerList+0x1>
    29ee:	0e 94 4e 05 	call	0xa9c	; 0xa9c <vListInsert>
    29f2:	08 c0       	rjmp	.+16     	; 0x2a04 <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    29f4:	00 e0       	ldi	r16, 0x00	; 0
    29f6:	10 e0       	ldi	r17, 0x00	; 0
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	a5 01       	movw	r20, r10
    29fe:	60 e0       	ldi	r22, 0x00	; 0
    2a00:	ce 01       	movw	r24, r28
    2a02:	74 df       	rcall	.-280    	; 0x28ec <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2a04:	e0 91 52 08 	lds	r30, 0x0852	; 0x800852 <pxCurrentTimerList>
    2a08:	f0 91 53 08 	lds	r31, 0x0853	; 0x800853 <pxCurrentTimerList+0x1>
    2a0c:	80 81       	ld	r24, Z
    2a0e:	81 11       	cpse	r24, r1
    2a10:	ca cf       	rjmp	.-108    	; 0x29a6 <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    2a12:	80 91 50 08 	lds	r24, 0x0850	; 0x800850 <pxOverflowTimerList>
    2a16:	90 91 51 08 	lds	r25, 0x0851	; 0x800851 <pxOverflowTimerList+0x1>
    2a1a:	90 93 53 08 	sts	0x0853, r25	; 0x800853 <pxCurrentTimerList+0x1>
    2a1e:	80 93 52 08 	sts	0x0852, r24	; 0x800852 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    2a22:	f0 93 51 08 	sts	0x0851, r31	; 0x800851 <pxOverflowTimerList+0x1>
    2a26:	e0 93 50 08 	sts	0x0850, r30	; 0x800850 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    2a2a:	81 e0       	ldi	r24, 0x01	; 1
    2a2c:	f6 01       	movw	r30, r12
    2a2e:	80 83       	st	Z, r24
    2a30:	02 c0       	rjmp	.+4      	; 0x2a36 <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    2a32:	f6 01       	movw	r30, r12
    2a34:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    2a36:	f0 92 4b 08 	sts	0x084B, r15	; 0x80084b <xLastTime.2432+0x1>
    2a3a:	e0 92 4a 08 	sts	0x084A, r14	; 0x80084a <xLastTime.2432>

    return xTimeNow;
}
    2a3e:	c7 01       	movw	r24, r14
    2a40:	df 91       	pop	r29
    2a42:	cf 91       	pop	r28
    2a44:	1f 91       	pop	r17
    2a46:	0f 91       	pop	r16
    2a48:	ff 90       	pop	r15
    2a4a:	ef 90       	pop	r14
    2a4c:	df 90       	pop	r13
    2a4e:	cf 90       	pop	r12
    2a50:	bf 90       	pop	r11
    2a52:	af 90       	pop	r10
    2a54:	08 95       	ret

00002a56 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2a56:	08 95       	ret

00002a58 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2a58:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2a5a:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2a5c:	2f ef       	ldi	r18, 0xFF	; 255
    2a5e:	80 e7       	ldi	r24, 0x70	; 112
    2a60:	92 e0       	ldi	r25, 0x02	; 2
    2a62:	21 50       	subi	r18, 0x01	; 1
    2a64:	80 40       	sbci	r24, 0x00	; 0
    2a66:	90 40       	sbci	r25, 0x00	; 0
    2a68:	e1 f7       	brne	.-8      	; 0x2a62 <vApplicationMallocFailedHook+0xa>
    2a6a:	00 c0       	rjmp	.+0      	; 0x2a6c <vApplicationMallocFailedHook+0x14>
    2a6c:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    2a6e:	1f 9a       	sbi	0x03, 7	; 3
    2a70:	f5 cf       	rjmp	.-22     	; 0x2a5c <vApplicationMallocFailedHook+0x4>

00002a72 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2a72:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2a74:	2f 9a       	sbi	0x05, 7	; 5
    2a76:	2f ef       	ldi	r18, 0xFF	; 255
    2a78:	87 ea       	ldi	r24, 0xA7	; 167
    2a7a:	91 e6       	ldi	r25, 0x61	; 97
    2a7c:	21 50       	subi	r18, 0x01	; 1
    2a7e:	80 40       	sbci	r24, 0x00	; 0
    2a80:	90 40       	sbci	r25, 0x00	; 0
    2a82:	e1 f7       	brne	.-8      	; 0x2a7c <vApplicationStackOverflowHook+0xa>
    2a84:	00 c0       	rjmp	.+0      	; 0x2a86 <vApplicationStackOverflowHook+0x14>
    2a86:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    2a88:	1f 9a       	sbi	0x03, 7	; 3
    2a8a:	f5 cf       	rjmp	.-22     	; 0x2a76 <vApplicationStackOverflowHook+0x4>

00002a8c <__fixsfsi>:
    2a8c:	04 d0       	rcall	.+8      	; 0x2a96 <__fixunssfsi>
    2a8e:	68 94       	set
    2a90:	b1 11       	cpse	r27, r1
    2a92:	50 c0       	rjmp	.+160    	; 0x2b34 <__fp_szero>
    2a94:	08 95       	ret

00002a96 <__fixunssfsi>:
    2a96:	33 d0       	rcall	.+102    	; 0x2afe <__fp_splitA>
    2a98:	88 f0       	brcs	.+34     	; 0x2abc <__fixunssfsi+0x26>
    2a9a:	9f 57       	subi	r25, 0x7F	; 127
    2a9c:	90 f0       	brcs	.+36     	; 0x2ac2 <__fixunssfsi+0x2c>
    2a9e:	b9 2f       	mov	r27, r25
    2aa0:	99 27       	eor	r25, r25
    2aa2:	b7 51       	subi	r27, 0x17	; 23
    2aa4:	a0 f0       	brcs	.+40     	; 0x2ace <__fixunssfsi+0x38>
    2aa6:	d1 f0       	breq	.+52     	; 0x2adc <__fixunssfsi+0x46>
    2aa8:	66 0f       	add	r22, r22
    2aaa:	77 1f       	adc	r23, r23
    2aac:	88 1f       	adc	r24, r24
    2aae:	99 1f       	adc	r25, r25
    2ab0:	1a f0       	brmi	.+6      	; 0x2ab8 <__fixunssfsi+0x22>
    2ab2:	ba 95       	dec	r27
    2ab4:	c9 f7       	brne	.-14     	; 0x2aa8 <__fixunssfsi+0x12>
    2ab6:	12 c0       	rjmp	.+36     	; 0x2adc <__fixunssfsi+0x46>
    2ab8:	b1 30       	cpi	r27, 0x01	; 1
    2aba:	81 f0       	breq	.+32     	; 0x2adc <__fixunssfsi+0x46>
    2abc:	3a d0       	rcall	.+116    	; 0x2b32 <__fp_zero>
    2abe:	b1 e0       	ldi	r27, 0x01	; 1
    2ac0:	08 95       	ret
    2ac2:	37 c0       	rjmp	.+110    	; 0x2b32 <__fp_zero>
    2ac4:	67 2f       	mov	r22, r23
    2ac6:	78 2f       	mov	r23, r24
    2ac8:	88 27       	eor	r24, r24
    2aca:	b8 5f       	subi	r27, 0xF8	; 248
    2acc:	39 f0       	breq	.+14     	; 0x2adc <__fixunssfsi+0x46>
    2ace:	b9 3f       	cpi	r27, 0xF9	; 249
    2ad0:	cc f3       	brlt	.-14     	; 0x2ac4 <__fixunssfsi+0x2e>
    2ad2:	86 95       	lsr	r24
    2ad4:	77 95       	ror	r23
    2ad6:	67 95       	ror	r22
    2ad8:	b3 95       	inc	r27
    2ada:	d9 f7       	brne	.-10     	; 0x2ad2 <__fixunssfsi+0x3c>
    2adc:	3e f4       	brtc	.+14     	; 0x2aec <__fixunssfsi+0x56>
    2ade:	90 95       	com	r25
    2ae0:	80 95       	com	r24
    2ae2:	70 95       	com	r23
    2ae4:	61 95       	neg	r22
    2ae6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ae8:	8f 4f       	sbci	r24, 0xFF	; 255
    2aea:	9f 4f       	sbci	r25, 0xFF	; 255
    2aec:	08 95       	ret

00002aee <__fp_split3>:
    2aee:	57 fd       	sbrc	r21, 7
    2af0:	90 58       	subi	r25, 0x80	; 128
    2af2:	44 0f       	add	r20, r20
    2af4:	55 1f       	adc	r21, r21
    2af6:	59 f0       	breq	.+22     	; 0x2b0e <__fp_splitA+0x10>
    2af8:	5f 3f       	cpi	r21, 0xFF	; 255
    2afa:	71 f0       	breq	.+28     	; 0x2b18 <__fp_splitA+0x1a>
    2afc:	47 95       	ror	r20

00002afe <__fp_splitA>:
    2afe:	88 0f       	add	r24, r24
    2b00:	97 fb       	bst	r25, 7
    2b02:	99 1f       	adc	r25, r25
    2b04:	61 f0       	breq	.+24     	; 0x2b1e <__fp_splitA+0x20>
    2b06:	9f 3f       	cpi	r25, 0xFF	; 255
    2b08:	79 f0       	breq	.+30     	; 0x2b28 <__fp_splitA+0x2a>
    2b0a:	87 95       	ror	r24
    2b0c:	08 95       	ret
    2b0e:	12 16       	cp	r1, r18
    2b10:	13 06       	cpc	r1, r19
    2b12:	14 06       	cpc	r1, r20
    2b14:	55 1f       	adc	r21, r21
    2b16:	f2 cf       	rjmp	.-28     	; 0x2afc <__fp_split3+0xe>
    2b18:	46 95       	lsr	r20
    2b1a:	f1 df       	rcall	.-30     	; 0x2afe <__fp_splitA>
    2b1c:	08 c0       	rjmp	.+16     	; 0x2b2e <__fp_splitA+0x30>
    2b1e:	16 16       	cp	r1, r22
    2b20:	17 06       	cpc	r1, r23
    2b22:	18 06       	cpc	r1, r24
    2b24:	99 1f       	adc	r25, r25
    2b26:	f1 cf       	rjmp	.-30     	; 0x2b0a <__fp_splitA+0xc>
    2b28:	86 95       	lsr	r24
    2b2a:	71 05       	cpc	r23, r1
    2b2c:	61 05       	cpc	r22, r1
    2b2e:	08 94       	sec
    2b30:	08 95       	ret

00002b32 <__fp_zero>:
    2b32:	e8 94       	clt

00002b34 <__fp_szero>:
    2b34:	bb 27       	eor	r27, r27
    2b36:	66 27       	eor	r22, r22
    2b38:	77 27       	eor	r23, r23
    2b3a:	cb 01       	movw	r24, r22
    2b3c:	97 f9       	bld	r25, 7
    2b3e:	08 95       	ret

00002b40 <usart_getchar>:
    2b40:	cf 93       	push	r28
    2b42:	df 93       	push	r29
    2b44:	1f 92       	push	r1
    2b46:	cd b7       	in	r28, 0x3d	; 61
    2b48:	de b7       	in	r29, 0x3e	; 62
    2b4a:	be 01       	movw	r22, r28
    2b4c:	6f 5f       	subi	r22, 0xFF	; 255
    2b4e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b50:	80 91 66 08 	lds	r24, 0x0866	; 0x800866 <_com_serial_instance>
    2b54:	90 91 67 08 	lds	r25, 0x0867	; 0x800867 <_com_serial_instance+0x1>
    2b58:	4e d1       	rcall	.+668    	; 0x2df6 <serial_get_byte>
    2b5a:	81 11       	cpse	r24, r1
    2b5c:	f6 cf       	rjmp	.-20     	; 0x2b4a <usart_getchar+0xa>
    2b5e:	89 81       	ldd	r24, Y+1	; 0x01
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	0f 90       	pop	r0
    2b64:	df 91       	pop	r29
    2b66:	cf 91       	pop	r28
    2b68:	08 95       	ret

00002b6a <usart_putchar>:
    2b6a:	68 2f       	mov	r22, r24
    2b6c:	80 91 66 08 	lds	r24, 0x0866	; 0x800866 <_com_serial_instance>
    2b70:	90 91 67 08 	lds	r25, 0x0867	; 0x800867 <_com_serial_instance+0x1>
    2b74:	cb d0       	rcall	.+406    	; 0x2d0c <serial_send_byte>
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	08 95       	ret

00002b7c <stdioCreate>:
    2b7c:	8f 92       	push	r8
    2b7e:	9f 92       	push	r9
    2b80:	af 92       	push	r10
    2b82:	cf 92       	push	r12
    2b84:	ef 92       	push	r14
    2b86:	0f 93       	push	r16
    2b88:	81 2c       	mov	r8, r1
    2b8a:	91 2c       	mov	r9, r1
    2b8c:	68 94       	set
    2b8e:	aa 24       	eor	r10, r10
    2b90:	a7 f8       	bld	r10, 7
    2b92:	68 94       	set
    2b94:	cc 24       	eor	r12, r12
    2b96:	c7 f8       	bld	r12, 7
    2b98:	e1 2c       	mov	r14, r1
    2b9a:	00 e0       	ldi	r16, 0x00	; 0
    2b9c:	23 e0       	ldi	r18, 0x03	; 3
    2b9e:	40 e0       	ldi	r20, 0x00	; 0
    2ba0:	51 ee       	ldi	r21, 0xE1	; 225
    2ba2:	60 e0       	ldi	r22, 0x00	; 0
    2ba4:	70 e0       	ldi	r23, 0x00	; 0
    2ba6:	13 d0       	rcall	.+38     	; 0x2bce <serial_new_instance>
    2ba8:	90 93 67 08 	sts	0x0867, r25	; 0x800867 <_com_serial_instance+0x1>
    2bac:	80 93 66 08 	sts	0x0866, r24	; 0x800866 <_com_serial_instance>
    2bb0:	e6 e5       	ldi	r30, 0x56	; 86
    2bb2:	fa e0       	ldi	r31, 0x0A	; 10
    2bb4:	86 e0       	ldi	r24, 0x06	; 6
    2bb6:	92 e0       	ldi	r25, 0x02	; 2
    2bb8:	91 83       	std	Z+1, r25	; 0x01
    2bba:	80 83       	st	Z, r24
    2bbc:	93 83       	std	Z+3, r25	; 0x03
    2bbe:	82 83       	std	Z+2, r24	; 0x02
    2bc0:	0f 91       	pop	r16
    2bc2:	ef 90       	pop	r14
    2bc4:	cf 90       	pop	r12
    2bc6:	af 90       	pop	r10
    2bc8:	9f 90       	pop	r9
    2bca:	8f 90       	pop	r8
    2bcc:	08 95       	ret

00002bce <serial_new_instance>:
    2bce:	2f 92       	push	r2
    2bd0:	3f 92       	push	r3
    2bd2:	4f 92       	push	r4
    2bd4:	5f 92       	push	r5
    2bd6:	6f 92       	push	r6
    2bd8:	7f 92       	push	r7
    2bda:	8f 92       	push	r8
    2bdc:	9f 92       	push	r9
    2bde:	af 92       	push	r10
    2be0:	cf 92       	push	r12
    2be2:	ef 92       	push	r14
    2be4:	ff 92       	push	r15
    2be6:	0f 93       	push	r16
    2be8:	1f 93       	push	r17
    2bea:	cf 93       	push	r28
    2bec:	df 93       	push	r29
    2bee:	cd b7       	in	r28, 0x3d	; 61
    2bf0:	de b7       	in	r29, 0x3e	; 62
    2bf2:	f8 2e       	mov	r15, r24
    2bf4:	2a 01       	movw	r4, r20
    2bf6:	3b 01       	movw	r6, r22
    2bf8:	88 e0       	ldi	r24, 0x08	; 8
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	0e 94 bc 25 	call	0x4b78	; 0x4b78 <malloc>
    2c00:	8c 01       	movw	r16, r24
    2c02:	8f 2d       	mov	r24, r15
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	88 0f       	add	r24, r24
    2c08:	99 1f       	adc	r25, r25
    2c0a:	fc 01       	movw	r30, r24
    2c0c:	e8 59       	subi	r30, 0x98	; 152
    2c0e:	f7 4f       	sbci	r31, 0xF7	; 247
    2c10:	11 83       	std	Z+1, r17	; 0x01
    2c12:	00 83       	st	Z, r16
    2c14:	fc 01       	movw	r30, r24
    2c16:	ec 5e       	subi	r30, 0xEC	; 236
    2c18:	fd 4f       	sbci	r31, 0xFD	; 253
    2c1a:	80 81       	ld	r24, Z
    2c1c:	91 81       	ldd	r25, Z+1	; 0x01
    2c1e:	d8 01       	movw	r26, r16
    2c20:	8d 93       	st	X+, r24
    2c22:	9c 93       	st	X, r25
    2c24:	6c 2d       	mov	r22, r12
    2c26:	70 e0       	ldi	r23, 0x00	; 0
    2c28:	84 e0       	ldi	r24, 0x04	; 4
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	0e 94 a2 25 	call	0x4b44	; 0x4b44 <calloc>
    2c30:	1c 01       	movw	r2, r24
    2c32:	61 e0       	ldi	r22, 0x01	; 1
    2c34:	70 e0       	ldi	r23, 0x00	; 0
    2c36:	86 e0       	ldi	r24, 0x06	; 6
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	0e 94 a2 25 	call	0x4b44	; 0x4b44 <calloc>
    2c3e:	7c 01       	movw	r14, r24
    2c40:	4c 2d       	mov	r20, r12
    2c42:	b1 01       	movw	r22, r2
    2c44:	4c d3       	rcall	.+1688   	; 0x32de <fifo_init>
    2c46:	f8 01       	movw	r30, r16
    2c48:	f5 82       	std	Z+5, r15	; 0x05
    2c4a:	e4 82       	std	Z+4, r14	; 0x04
    2c4c:	6a 2d       	mov	r22, r10
    2c4e:	70 e0       	ldi	r23, 0x00	; 0
    2c50:	84 e0       	ldi	r24, 0x04	; 4
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	0e 94 a2 25 	call	0x4b44	; 0x4b44 <calloc>
    2c58:	1c 01       	movw	r2, r24
    2c5a:	61 e0       	ldi	r22, 0x01	; 1
    2c5c:	70 e0       	ldi	r23, 0x00	; 0
    2c5e:	86 e0       	ldi	r24, 0x06	; 6
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	0e 94 a2 25 	call	0x4b44	; 0x4b44 <calloc>
    2c66:	7c 01       	movw	r14, r24
    2c68:	4a 2d       	mov	r20, r10
    2c6a:	b1 01       	movw	r22, r2
    2c6c:	38 d3       	rcall	.+1648   	; 0x32de <fifo_init>
    2c6e:	d8 01       	movw	r26, r16
    2c70:	13 96       	adiw	r26, 0x03	; 3
    2c72:	fc 92       	st	X, r15
    2c74:	ee 92       	st	-X, r14
    2c76:	12 97       	sbiw	r26, 0x02	; 2
    2c78:	17 96       	adiw	r26, 0x07	; 7
    2c7a:	9c 92       	st	X, r9
    2c7c:	8e 92       	st	-X, r8
    2c7e:	16 97       	sbiw	r26, 0x06	; 6
    2c80:	ff b6       	in	r15, 0x3f	; 63
    2c82:	f8 94       	cli
    2c84:	ed 91       	ld	r30, X+
    2c86:	fc 91       	ld	r31, X
    2c88:	11 97       	sbiw	r26, 0x01	; 1
    2c8a:	36 97       	sbiw	r30, 0x06	; 6
    2c8c:	80 81       	ld	r24, Z
    2c8e:	82 60       	ori	r24, 0x02	; 2
    2c90:	80 83       	st	Z, r24
    2c92:	8d 90       	ld	r8, X+
    2c94:	9c 90       	ld	r9, X
    2c96:	c3 01       	movw	r24, r6
    2c98:	b2 01       	movw	r22, r4
    2c9a:	0e 94 85 24 	call	0x490a	; 0x490a <__floatunsisf>
    2c9e:	20 e0       	ldi	r18, 0x00	; 0
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	40 e0       	ldi	r20, 0x00	; 0
    2ca4:	51 e4       	ldi	r21, 0x41	; 65
    2ca6:	0e 94 ee 24 	call	0x49dc	; 0x49dc <__mulsf3>
    2caa:	9b 01       	movw	r18, r22
    2cac:	ac 01       	movw	r20, r24
    2cae:	60 e0       	ldi	r22, 0x00	; 0
    2cb0:	74 e2       	ldi	r23, 0x24	; 36
    2cb2:	84 e7       	ldi	r24, 0x74	; 116
    2cb4:	9b e4       	ldi	r25, 0x4B	; 75
    2cb6:	0e 94 1a 24 	call	0x4834	; 0x4834 <__divsf3>
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	40 e8       	ldi	r20, 0x80	; 128
    2cc0:	5f e3       	ldi	r21, 0x3F	; 63
    2cc2:	0e 94 b3 23 	call	0x4766	; 0x4766 <__subsf3>
    2cc6:	e7 de       	rcall	.-562    	; 0x2a96 <__fixunssfsi>
    2cc8:	f4 01       	movw	r30, r8
    2cca:	32 97       	sbiw	r30, 0x02	; 2
    2ccc:	60 83       	st	Z, r22
    2cce:	d8 01       	movw	r26, r16
    2cd0:	ed 91       	ld	r30, X+
    2cd2:	fc 91       	ld	r31, X
    2cd4:	11 97       	sbiw	r26, 0x01	; 1
    2cd6:	35 97       	sbiw	r30, 0x05	; 5
    2cd8:	88 e9       	ldi	r24, 0x98	; 152
    2cda:	80 83       	st	Z, r24
    2cdc:	ed 91       	ld	r30, X+
    2cde:	fc 91       	ld	r31, X
    2ce0:	34 97       	sbiw	r30, 0x04	; 4
    2ce2:	86 e0       	ldi	r24, 0x06	; 6
    2ce4:	80 83       	st	Z, r24
    2ce6:	ff be       	out	0x3f, r15	; 63
    2ce8:	c8 01       	movw	r24, r16
    2cea:	df 91       	pop	r29
    2cec:	cf 91       	pop	r28
    2cee:	1f 91       	pop	r17
    2cf0:	0f 91       	pop	r16
    2cf2:	ff 90       	pop	r15
    2cf4:	ef 90       	pop	r14
    2cf6:	cf 90       	pop	r12
    2cf8:	af 90       	pop	r10
    2cfa:	9f 90       	pop	r9
    2cfc:	8f 90       	pop	r8
    2cfe:	7f 90       	pop	r7
    2d00:	6f 90       	pop	r6
    2d02:	5f 90       	pop	r5
    2d04:	4f 90       	pop	r4
    2d06:	3f 90       	pop	r3
    2d08:	2f 90       	pop	r2
    2d0a:	08 95       	ret

00002d0c <serial_send_byte>:
    2d0c:	cf 93       	push	r28
    2d0e:	df 93       	push	r29
    2d10:	ec 01       	movw	r28, r24
    2d12:	ea 81       	ldd	r30, Y+2	; 0x02
    2d14:	fb 81       	ldd	r31, Y+3	; 0x03
    2d16:	93 81       	ldd	r25, Z+3	; 0x03
    2d18:	82 81       	ldd	r24, Z+2	; 0x02
    2d1a:	25 81       	ldd	r18, Z+5	; 0x05
    2d1c:	98 1b       	sub	r25, r24
    2d1e:	92 23       	and	r25, r18
    2d20:	84 81       	ldd	r24, Z+4	; 0x04
    2d22:	98 17       	cp	r25, r24
    2d24:	a1 f0       	breq	.+40     	; 0x2d4e <serial_send_byte+0x42>
    2d26:	93 81       	ldd	r25, Z+3	; 0x03
    2d28:	26 95       	lsr	r18
    2d2a:	29 23       	and	r18, r25
    2d2c:	a0 81       	ld	r26, Z
    2d2e:	b1 81       	ldd	r27, Z+1	; 0x01
    2d30:	a2 0f       	add	r26, r18
    2d32:	b1 1d       	adc	r27, r1
    2d34:	6c 93       	st	X, r22
    2d36:	9f 5f       	subi	r25, 0xFF	; 255
    2d38:	25 81       	ldd	r18, Z+5	; 0x05
    2d3a:	92 23       	and	r25, r18
    2d3c:	93 83       	std	Z+3, r25	; 0x03
    2d3e:	e8 81       	ld	r30, Y
    2d40:	f9 81       	ldd	r31, Y+1	; 0x01
    2d42:	35 97       	sbiw	r30, 0x05	; 5
    2d44:	80 81       	ld	r24, Z
    2d46:	80 62       	ori	r24, 0x20	; 32
    2d48:	80 83       	st	Z, r24
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
    2d4c:	01 c0       	rjmp	.+2      	; 0x2d50 <serial_send_byte+0x44>
    2d4e:	82 e0       	ldi	r24, 0x02	; 2
    2d50:	df 91       	pop	r29
    2d52:	cf 91       	pop	r28
    2d54:	08 95       	ret

00002d56 <serial_send_bytes>:
    2d56:	ef 92       	push	r14
    2d58:	ff 92       	push	r15
    2d5a:	0f 93       	push	r16
    2d5c:	1f 93       	push	r17
    2d5e:	cf 93       	push	r28
    2d60:	df 93       	push	r29
    2d62:	7c 01       	movw	r14, r24
    2d64:	dc 01       	movw	r26, r24
    2d66:	12 96       	adiw	r26, 0x02	; 2
    2d68:	ed 91       	ld	r30, X+
    2d6a:	fc 91       	ld	r31, X
    2d6c:	13 97       	sbiw	r26, 0x03	; 3
    2d6e:	93 81       	ldd	r25, Z+3	; 0x03
    2d70:	82 81       	ldd	r24, Z+2	; 0x02
    2d72:	98 1b       	sub	r25, r24
    2d74:	85 81       	ldd	r24, Z+5	; 0x05
    2d76:	98 23       	and	r25, r24
    2d78:	84 81       	ldd	r24, Z+4	; 0x04
    2d7a:	89 1b       	sub	r24, r25
    2d7c:	86 17       	cp	r24, r22
    2d7e:	98 f1       	brcs	.+102    	; 0x2de6 <serial_send_bytes+0x90>
    2d80:	66 23       	and	r22, r22
    2d82:	41 f1       	breq	.+80     	; 0x2dd4 <serial_send_bytes+0x7e>
    2d84:	84 2f       	mov	r24, r20
    2d86:	95 2f       	mov	r25, r21
    2d88:	dc 01       	movw	r26, r24
    2d8a:	61 50       	subi	r22, 0x01	; 1
    2d8c:	46 2f       	mov	r20, r22
    2d8e:	50 e0       	ldi	r21, 0x00	; 0
    2d90:	4f 5f       	subi	r20, 0xFF	; 255
    2d92:	5f 4f       	sbci	r21, 0xFF	; 255
    2d94:	48 0f       	add	r20, r24
    2d96:	59 1f       	adc	r21, r25
    2d98:	e7 01       	movw	r28, r14
    2d9a:	ea 81       	ldd	r30, Y+2	; 0x02
    2d9c:	fb 81       	ldd	r31, Y+3	; 0x03
    2d9e:	93 81       	ldd	r25, Z+3	; 0x03
    2da0:	82 81       	ldd	r24, Z+2	; 0x02
    2da2:	25 81       	ldd	r18, Z+5	; 0x05
    2da4:	98 1b       	sub	r25, r24
    2da6:	92 23       	and	r25, r18
    2da8:	84 81       	ldd	r24, Z+4	; 0x04
    2daa:	98 17       	cp	r25, r24
    2dac:	79 f0       	breq	.+30     	; 0x2dcc <serial_send_bytes+0x76>
    2dae:	8c 91       	ld	r24, X
    2db0:	93 81       	ldd	r25, Z+3	; 0x03
    2db2:	26 95       	lsr	r18
    2db4:	29 23       	and	r18, r25
    2db6:	60 81       	ld	r22, Z
    2db8:	71 81       	ldd	r23, Z+1	; 0x01
    2dba:	8b 01       	movw	r16, r22
    2dbc:	02 0f       	add	r16, r18
    2dbe:	11 1d       	adc	r17, r1
    2dc0:	e8 01       	movw	r28, r16
    2dc2:	88 83       	st	Y, r24
    2dc4:	9f 5f       	subi	r25, 0xFF	; 255
    2dc6:	85 81       	ldd	r24, Z+5	; 0x05
    2dc8:	98 23       	and	r25, r24
    2dca:	93 83       	std	Z+3, r25	; 0x03
    2dcc:	11 96       	adiw	r26, 0x01	; 1
    2dce:	a4 17       	cp	r26, r20
    2dd0:	b5 07       	cpc	r27, r21
    2dd2:	11 f7       	brne	.-60     	; 0x2d98 <serial_send_bytes+0x42>
    2dd4:	d7 01       	movw	r26, r14
    2dd6:	ed 91       	ld	r30, X+
    2dd8:	fc 91       	ld	r31, X
    2dda:	35 97       	sbiw	r30, 0x05	; 5
    2ddc:	80 81       	ld	r24, Z
    2dde:	80 62       	ori	r24, 0x20	; 32
    2de0:	80 83       	st	Z, r24
    2de2:	80 e0       	ldi	r24, 0x00	; 0
    2de4:	01 c0       	rjmp	.+2      	; 0x2de8 <serial_send_bytes+0x92>
    2de6:	82 e0       	ldi	r24, 0x02	; 2
    2de8:	df 91       	pop	r29
    2dea:	cf 91       	pop	r28
    2dec:	1f 91       	pop	r17
    2dee:	0f 91       	pop	r16
    2df0:	ff 90       	pop	r15
    2df2:	ef 90       	pop	r14
    2df4:	08 95       	ret

00002df6 <serial_get_byte>:
    2df6:	dc 01       	movw	r26, r24
    2df8:	14 96       	adiw	r26, 0x04	; 4
    2dfa:	ed 91       	ld	r30, X+
    2dfc:	fc 91       	ld	r31, X
    2dfe:	15 97       	sbiw	r26, 0x05	; 5
    2e00:	93 81       	ldd	r25, Z+3	; 0x03
    2e02:	82 81       	ldd	r24, Z+2	; 0x02
    2e04:	98 17       	cp	r25, r24
    2e06:	89 f0       	breq	.+34     	; 0x2e2a <serial_get_byte+0x34>
    2e08:	92 81       	ldd	r25, Z+2	; 0x02
    2e0a:	85 81       	ldd	r24, Z+5	; 0x05
    2e0c:	86 95       	lsr	r24
    2e0e:	89 23       	and	r24, r25
    2e10:	a0 81       	ld	r26, Z
    2e12:	b1 81       	ldd	r27, Z+1	; 0x01
    2e14:	a8 0f       	add	r26, r24
    2e16:	b1 1d       	adc	r27, r1
    2e18:	8c 91       	ld	r24, X
    2e1a:	db 01       	movw	r26, r22
    2e1c:	8c 93       	st	X, r24
    2e1e:	9f 5f       	subi	r25, 0xFF	; 255
    2e20:	85 81       	ldd	r24, Z+5	; 0x05
    2e22:	98 23       	and	r25, r24
    2e24:	92 83       	std	Z+2, r25	; 0x02
    2e26:	80 e0       	ldi	r24, 0x00	; 0
    2e28:	08 95       	ret
    2e2a:	83 e0       	ldi	r24, 0x03	; 3
    2e2c:	08 95       	ret

00002e2e <__vector_25>:
    2e2e:	1f 92       	push	r1
    2e30:	0f 92       	push	r0
    2e32:	0f b6       	in	r0, 0x3f	; 63
    2e34:	0f 92       	push	r0
    2e36:	11 24       	eor	r1, r1
    2e38:	0b b6       	in	r0, 0x3b	; 59
    2e3a:	0f 92       	push	r0
    2e3c:	2f 93       	push	r18
    2e3e:	3f 93       	push	r19
    2e40:	4f 93       	push	r20
    2e42:	5f 93       	push	r21
    2e44:	6f 93       	push	r22
    2e46:	7f 93       	push	r23
    2e48:	8f 93       	push	r24
    2e4a:	9f 93       	push	r25
    2e4c:	af 93       	push	r26
    2e4e:	bf 93       	push	r27
    2e50:	cf 93       	push	r28
    2e52:	df 93       	push	r29
    2e54:	ef 93       	push	r30
    2e56:	ff 93       	push	r31
    2e58:	a0 91 68 08 	lds	r26, 0x0868	; 0x800868 <_ser_handle>
    2e5c:	b0 91 69 08 	lds	r27, 0x0869	; 0x800869 <_ser_handle+0x1>
    2e60:	10 97       	sbiw	r26, 0x00	; 0
    2e62:	11 f1       	breq	.+68     	; 0x2ea8 <__vector_25+0x7a>
    2e64:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    2e68:	14 96       	adiw	r26, 0x04	; 4
    2e6a:	ed 91       	ld	r30, X+
    2e6c:	fc 91       	ld	r31, X
    2e6e:	15 97       	sbiw	r26, 0x05	; 5
    2e70:	93 81       	ldd	r25, Z+3	; 0x03
    2e72:	82 81       	ldd	r24, Z+2	; 0x02
    2e74:	25 81       	ldd	r18, Z+5	; 0x05
    2e76:	98 1b       	sub	r25, r24
    2e78:	92 23       	and	r25, r18
    2e7a:	84 81       	ldd	r24, Z+4	; 0x04
    2e7c:	98 17       	cp	r25, r24
    2e7e:	61 f0       	breq	.+24     	; 0x2e98 <__vector_25+0x6a>
    2e80:	83 81       	ldd	r24, Z+3	; 0x03
    2e82:	26 95       	lsr	r18
    2e84:	28 23       	and	r18, r24
    2e86:	c0 81       	ld	r28, Z
    2e88:	d1 81       	ldd	r29, Z+1	; 0x01
    2e8a:	c2 0f       	add	r28, r18
    2e8c:	d1 1d       	adc	r29, r1
    2e8e:	68 83       	st	Y, r22
    2e90:	8f 5f       	subi	r24, 0xFF	; 255
    2e92:	95 81       	ldd	r25, Z+5	; 0x05
    2e94:	89 23       	and	r24, r25
    2e96:	83 83       	std	Z+3, r24	; 0x03
    2e98:	16 96       	adiw	r26, 0x06	; 6
    2e9a:	ed 91       	ld	r30, X+
    2e9c:	fc 91       	ld	r31, X
    2e9e:	17 97       	sbiw	r26, 0x07	; 7
    2ea0:	30 97       	sbiw	r30, 0x00	; 0
    2ea2:	11 f0       	breq	.+4      	; 0x2ea8 <__vector_25+0x7a>
    2ea4:	cd 01       	movw	r24, r26
    2ea6:	19 95       	eicall
    2ea8:	ff 91       	pop	r31
    2eaa:	ef 91       	pop	r30
    2eac:	df 91       	pop	r29
    2eae:	cf 91       	pop	r28
    2eb0:	bf 91       	pop	r27
    2eb2:	af 91       	pop	r26
    2eb4:	9f 91       	pop	r25
    2eb6:	8f 91       	pop	r24
    2eb8:	7f 91       	pop	r23
    2eba:	6f 91       	pop	r22
    2ebc:	5f 91       	pop	r21
    2ebe:	4f 91       	pop	r20
    2ec0:	3f 91       	pop	r19
    2ec2:	2f 91       	pop	r18
    2ec4:	0f 90       	pop	r0
    2ec6:	0b be       	out	0x3b, r0	; 59
    2ec8:	0f 90       	pop	r0
    2eca:	0f be       	out	0x3f, r0	; 63
    2ecc:	0f 90       	pop	r0
    2ece:	1f 90       	pop	r1
    2ed0:	18 95       	reti

00002ed2 <__vector_26>:
    2ed2:	1f 92       	push	r1
    2ed4:	0f 92       	push	r0
    2ed6:	0f b6       	in	r0, 0x3f	; 63
    2ed8:	0f 92       	push	r0
    2eda:	11 24       	eor	r1, r1
    2edc:	0b b6       	in	r0, 0x3b	; 59
    2ede:	0f 92       	push	r0
    2ee0:	2f 93       	push	r18
    2ee2:	8f 93       	push	r24
    2ee4:	9f 93       	push	r25
    2ee6:	af 93       	push	r26
    2ee8:	bf 93       	push	r27
    2eea:	ef 93       	push	r30
    2eec:	ff 93       	push	r31
    2eee:	e0 91 68 08 	lds	r30, 0x0868	; 0x800868 <_ser_handle>
    2ef2:	f0 91 69 08 	lds	r31, 0x0869	; 0x800869 <_ser_handle+0x1>
    2ef6:	30 97       	sbiw	r30, 0x00	; 0
    2ef8:	b9 f0       	breq	.+46     	; 0x2f28 <__vector_26+0x56>
    2efa:	02 80       	ldd	r0, Z+2	; 0x02
    2efc:	f3 81       	ldd	r31, Z+3	; 0x03
    2efe:	e0 2d       	mov	r30, r0
    2f00:	93 81       	ldd	r25, Z+3	; 0x03
    2f02:	82 81       	ldd	r24, Z+2	; 0x02
    2f04:	98 17       	cp	r25, r24
    2f06:	b1 f0       	breq	.+44     	; 0x2f34 <__vector_26+0x62>
    2f08:	92 81       	ldd	r25, Z+2	; 0x02
    2f0a:	85 81       	ldd	r24, Z+5	; 0x05
    2f0c:	28 2f       	mov	r18, r24
    2f0e:	26 95       	lsr	r18
    2f10:	29 23       	and	r18, r25
    2f12:	a0 81       	ld	r26, Z
    2f14:	b1 81       	ldd	r27, Z+1	; 0x01
    2f16:	a2 0f       	add	r26, r18
    2f18:	b1 1d       	adc	r27, r1
    2f1a:	2c 91       	ld	r18, X
    2f1c:	9f 5f       	subi	r25, 0xFF	; 255
    2f1e:	89 23       	and	r24, r25
    2f20:	82 83       	std	Z+2, r24	; 0x02
    2f22:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    2f26:	0b c0       	rjmp	.+22     	; 0x2f3e <__vector_26+0x6c>
    2f28:	e1 ec       	ldi	r30, 0xC1	; 193
    2f2a:	f0 e0       	ldi	r31, 0x00	; 0
    2f2c:	80 81       	ld	r24, Z
    2f2e:	8f 7d       	andi	r24, 0xDF	; 223
    2f30:	80 83       	st	Z, r24
    2f32:	05 c0       	rjmp	.+10     	; 0x2f3e <__vector_26+0x6c>
    2f34:	e1 ec       	ldi	r30, 0xC1	; 193
    2f36:	f0 e0       	ldi	r31, 0x00	; 0
    2f38:	80 81       	ld	r24, Z
    2f3a:	8f 7d       	andi	r24, 0xDF	; 223
    2f3c:	80 83       	st	Z, r24
    2f3e:	ff 91       	pop	r31
    2f40:	ef 91       	pop	r30
    2f42:	bf 91       	pop	r27
    2f44:	af 91       	pop	r26
    2f46:	9f 91       	pop	r25
    2f48:	8f 91       	pop	r24
    2f4a:	2f 91       	pop	r18
    2f4c:	0f 90       	pop	r0
    2f4e:	0b be       	out	0x3b, r0	; 59
    2f50:	0f 90       	pop	r0
    2f52:	0f be       	out	0x3f, r0	; 63
    2f54:	0f 90       	pop	r0
    2f56:	1f 90       	pop	r1
    2f58:	18 95       	reti

00002f5a <__vector_36>:
    2f5a:	1f 92       	push	r1
    2f5c:	0f 92       	push	r0
    2f5e:	0f b6       	in	r0, 0x3f	; 63
    2f60:	0f 92       	push	r0
    2f62:	11 24       	eor	r1, r1
    2f64:	0b b6       	in	r0, 0x3b	; 59
    2f66:	0f 92       	push	r0
    2f68:	2f 93       	push	r18
    2f6a:	3f 93       	push	r19
    2f6c:	4f 93       	push	r20
    2f6e:	5f 93       	push	r21
    2f70:	6f 93       	push	r22
    2f72:	7f 93       	push	r23
    2f74:	8f 93       	push	r24
    2f76:	9f 93       	push	r25
    2f78:	af 93       	push	r26
    2f7a:	bf 93       	push	r27
    2f7c:	cf 93       	push	r28
    2f7e:	df 93       	push	r29
    2f80:	ef 93       	push	r30
    2f82:	ff 93       	push	r31
    2f84:	a0 91 6a 08 	lds	r26, 0x086A	; 0x80086a <_ser_handle+0x2>
    2f88:	b0 91 6b 08 	lds	r27, 0x086B	; 0x80086b <_ser_handle+0x3>
    2f8c:	10 97       	sbiw	r26, 0x00	; 0
    2f8e:	11 f1       	breq	.+68     	; 0x2fd4 <__vector_36+0x7a>
    2f90:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    2f94:	14 96       	adiw	r26, 0x04	; 4
    2f96:	ed 91       	ld	r30, X+
    2f98:	fc 91       	ld	r31, X
    2f9a:	15 97       	sbiw	r26, 0x05	; 5
    2f9c:	93 81       	ldd	r25, Z+3	; 0x03
    2f9e:	82 81       	ldd	r24, Z+2	; 0x02
    2fa0:	25 81       	ldd	r18, Z+5	; 0x05
    2fa2:	98 1b       	sub	r25, r24
    2fa4:	92 23       	and	r25, r18
    2fa6:	84 81       	ldd	r24, Z+4	; 0x04
    2fa8:	98 17       	cp	r25, r24
    2faa:	61 f0       	breq	.+24     	; 0x2fc4 <__vector_36+0x6a>
    2fac:	83 81       	ldd	r24, Z+3	; 0x03
    2fae:	26 95       	lsr	r18
    2fb0:	28 23       	and	r18, r24
    2fb2:	c0 81       	ld	r28, Z
    2fb4:	d1 81       	ldd	r29, Z+1	; 0x01
    2fb6:	c2 0f       	add	r28, r18
    2fb8:	d1 1d       	adc	r29, r1
    2fba:	68 83       	st	Y, r22
    2fbc:	8f 5f       	subi	r24, 0xFF	; 255
    2fbe:	95 81       	ldd	r25, Z+5	; 0x05
    2fc0:	89 23       	and	r24, r25
    2fc2:	83 83       	std	Z+3, r24	; 0x03
    2fc4:	16 96       	adiw	r26, 0x06	; 6
    2fc6:	ed 91       	ld	r30, X+
    2fc8:	fc 91       	ld	r31, X
    2fca:	17 97       	sbiw	r26, 0x07	; 7
    2fcc:	30 97       	sbiw	r30, 0x00	; 0
    2fce:	11 f0       	breq	.+4      	; 0x2fd4 <__vector_36+0x7a>
    2fd0:	cd 01       	movw	r24, r26
    2fd2:	19 95       	eicall
    2fd4:	ff 91       	pop	r31
    2fd6:	ef 91       	pop	r30
    2fd8:	df 91       	pop	r29
    2fda:	cf 91       	pop	r28
    2fdc:	bf 91       	pop	r27
    2fde:	af 91       	pop	r26
    2fe0:	9f 91       	pop	r25
    2fe2:	8f 91       	pop	r24
    2fe4:	7f 91       	pop	r23
    2fe6:	6f 91       	pop	r22
    2fe8:	5f 91       	pop	r21
    2fea:	4f 91       	pop	r20
    2fec:	3f 91       	pop	r19
    2fee:	2f 91       	pop	r18
    2ff0:	0f 90       	pop	r0
    2ff2:	0b be       	out	0x3b, r0	; 59
    2ff4:	0f 90       	pop	r0
    2ff6:	0f be       	out	0x3f, r0	; 63
    2ff8:	0f 90       	pop	r0
    2ffa:	1f 90       	pop	r1
    2ffc:	18 95       	reti

00002ffe <__vector_37>:
    2ffe:	1f 92       	push	r1
    3000:	0f 92       	push	r0
    3002:	0f b6       	in	r0, 0x3f	; 63
    3004:	0f 92       	push	r0
    3006:	11 24       	eor	r1, r1
    3008:	0b b6       	in	r0, 0x3b	; 59
    300a:	0f 92       	push	r0
    300c:	2f 93       	push	r18
    300e:	8f 93       	push	r24
    3010:	9f 93       	push	r25
    3012:	af 93       	push	r26
    3014:	bf 93       	push	r27
    3016:	ef 93       	push	r30
    3018:	ff 93       	push	r31
    301a:	e0 91 6a 08 	lds	r30, 0x086A	; 0x80086a <_ser_handle+0x2>
    301e:	f0 91 6b 08 	lds	r31, 0x086B	; 0x80086b <_ser_handle+0x3>
    3022:	30 97       	sbiw	r30, 0x00	; 0
    3024:	b9 f0       	breq	.+46     	; 0x3054 <__vector_37+0x56>
    3026:	02 80       	ldd	r0, Z+2	; 0x02
    3028:	f3 81       	ldd	r31, Z+3	; 0x03
    302a:	e0 2d       	mov	r30, r0
    302c:	93 81       	ldd	r25, Z+3	; 0x03
    302e:	82 81       	ldd	r24, Z+2	; 0x02
    3030:	98 17       	cp	r25, r24
    3032:	b1 f0       	breq	.+44     	; 0x3060 <__vector_37+0x62>
    3034:	92 81       	ldd	r25, Z+2	; 0x02
    3036:	85 81       	ldd	r24, Z+5	; 0x05
    3038:	28 2f       	mov	r18, r24
    303a:	26 95       	lsr	r18
    303c:	29 23       	and	r18, r25
    303e:	a0 81       	ld	r26, Z
    3040:	b1 81       	ldd	r27, Z+1	; 0x01
    3042:	a2 0f       	add	r26, r18
    3044:	b1 1d       	adc	r27, r1
    3046:	2c 91       	ld	r18, X
    3048:	9f 5f       	subi	r25, 0xFF	; 255
    304a:	89 23       	and	r24, r25
    304c:	82 83       	std	Z+2, r24	; 0x02
    304e:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3052:	0b c0       	rjmp	.+22     	; 0x306a <__vector_37+0x6c>
    3054:	e9 ec       	ldi	r30, 0xC9	; 201
    3056:	f0 e0       	ldi	r31, 0x00	; 0
    3058:	80 81       	ld	r24, Z
    305a:	8f 7d       	andi	r24, 0xDF	; 223
    305c:	80 83       	st	Z, r24
    305e:	05 c0       	rjmp	.+10     	; 0x306a <__vector_37+0x6c>
    3060:	e9 ec       	ldi	r30, 0xC9	; 201
    3062:	f0 e0       	ldi	r31, 0x00	; 0
    3064:	80 81       	ld	r24, Z
    3066:	8f 7d       	andi	r24, 0xDF	; 223
    3068:	80 83       	st	Z, r24
    306a:	ff 91       	pop	r31
    306c:	ef 91       	pop	r30
    306e:	bf 91       	pop	r27
    3070:	af 91       	pop	r26
    3072:	9f 91       	pop	r25
    3074:	8f 91       	pop	r24
    3076:	2f 91       	pop	r18
    3078:	0f 90       	pop	r0
    307a:	0b be       	out	0x3b, r0	; 59
    307c:	0f 90       	pop	r0
    307e:	0f be       	out	0x3f, r0	; 63
    3080:	0f 90       	pop	r0
    3082:	1f 90       	pop	r1
    3084:	18 95       	reti

00003086 <__vector_51>:
    3086:	1f 92       	push	r1
    3088:	0f 92       	push	r0
    308a:	0f b6       	in	r0, 0x3f	; 63
    308c:	0f 92       	push	r0
    308e:	11 24       	eor	r1, r1
    3090:	0b b6       	in	r0, 0x3b	; 59
    3092:	0f 92       	push	r0
    3094:	2f 93       	push	r18
    3096:	3f 93       	push	r19
    3098:	4f 93       	push	r20
    309a:	5f 93       	push	r21
    309c:	6f 93       	push	r22
    309e:	7f 93       	push	r23
    30a0:	8f 93       	push	r24
    30a2:	9f 93       	push	r25
    30a4:	af 93       	push	r26
    30a6:	bf 93       	push	r27
    30a8:	cf 93       	push	r28
    30aa:	df 93       	push	r29
    30ac:	ef 93       	push	r30
    30ae:	ff 93       	push	r31
    30b0:	a0 91 6c 08 	lds	r26, 0x086C	; 0x80086c <_ser_handle+0x4>
    30b4:	b0 91 6d 08 	lds	r27, 0x086D	; 0x80086d <_ser_handle+0x5>
    30b8:	10 97       	sbiw	r26, 0x00	; 0
    30ba:	11 f1       	breq	.+68     	; 0x3100 <__vector_51+0x7a>
    30bc:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    30c0:	14 96       	adiw	r26, 0x04	; 4
    30c2:	ed 91       	ld	r30, X+
    30c4:	fc 91       	ld	r31, X
    30c6:	15 97       	sbiw	r26, 0x05	; 5
    30c8:	93 81       	ldd	r25, Z+3	; 0x03
    30ca:	82 81       	ldd	r24, Z+2	; 0x02
    30cc:	25 81       	ldd	r18, Z+5	; 0x05
    30ce:	98 1b       	sub	r25, r24
    30d0:	92 23       	and	r25, r18
    30d2:	84 81       	ldd	r24, Z+4	; 0x04
    30d4:	98 17       	cp	r25, r24
    30d6:	61 f0       	breq	.+24     	; 0x30f0 <__vector_51+0x6a>
    30d8:	83 81       	ldd	r24, Z+3	; 0x03
    30da:	26 95       	lsr	r18
    30dc:	28 23       	and	r18, r24
    30de:	c0 81       	ld	r28, Z
    30e0:	d1 81       	ldd	r29, Z+1	; 0x01
    30e2:	c2 0f       	add	r28, r18
    30e4:	d1 1d       	adc	r29, r1
    30e6:	68 83       	st	Y, r22
    30e8:	8f 5f       	subi	r24, 0xFF	; 255
    30ea:	95 81       	ldd	r25, Z+5	; 0x05
    30ec:	89 23       	and	r24, r25
    30ee:	83 83       	std	Z+3, r24	; 0x03
    30f0:	16 96       	adiw	r26, 0x06	; 6
    30f2:	ed 91       	ld	r30, X+
    30f4:	fc 91       	ld	r31, X
    30f6:	17 97       	sbiw	r26, 0x07	; 7
    30f8:	30 97       	sbiw	r30, 0x00	; 0
    30fa:	11 f0       	breq	.+4      	; 0x3100 <__vector_51+0x7a>
    30fc:	cd 01       	movw	r24, r26
    30fe:	19 95       	eicall
    3100:	ff 91       	pop	r31
    3102:	ef 91       	pop	r30
    3104:	df 91       	pop	r29
    3106:	cf 91       	pop	r28
    3108:	bf 91       	pop	r27
    310a:	af 91       	pop	r26
    310c:	9f 91       	pop	r25
    310e:	8f 91       	pop	r24
    3110:	7f 91       	pop	r23
    3112:	6f 91       	pop	r22
    3114:	5f 91       	pop	r21
    3116:	4f 91       	pop	r20
    3118:	3f 91       	pop	r19
    311a:	2f 91       	pop	r18
    311c:	0f 90       	pop	r0
    311e:	0b be       	out	0x3b, r0	; 59
    3120:	0f 90       	pop	r0
    3122:	0f be       	out	0x3f, r0	; 63
    3124:	0f 90       	pop	r0
    3126:	1f 90       	pop	r1
    3128:	18 95       	reti

0000312a <__vector_52>:
    312a:	1f 92       	push	r1
    312c:	0f 92       	push	r0
    312e:	0f b6       	in	r0, 0x3f	; 63
    3130:	0f 92       	push	r0
    3132:	11 24       	eor	r1, r1
    3134:	0b b6       	in	r0, 0x3b	; 59
    3136:	0f 92       	push	r0
    3138:	2f 93       	push	r18
    313a:	8f 93       	push	r24
    313c:	9f 93       	push	r25
    313e:	af 93       	push	r26
    3140:	bf 93       	push	r27
    3142:	ef 93       	push	r30
    3144:	ff 93       	push	r31
    3146:	e0 91 6c 08 	lds	r30, 0x086C	; 0x80086c <_ser_handle+0x4>
    314a:	f0 91 6d 08 	lds	r31, 0x086D	; 0x80086d <_ser_handle+0x5>
    314e:	30 97       	sbiw	r30, 0x00	; 0
    3150:	b9 f0       	breq	.+46     	; 0x3180 <__vector_52+0x56>
    3152:	02 80       	ldd	r0, Z+2	; 0x02
    3154:	f3 81       	ldd	r31, Z+3	; 0x03
    3156:	e0 2d       	mov	r30, r0
    3158:	93 81       	ldd	r25, Z+3	; 0x03
    315a:	82 81       	ldd	r24, Z+2	; 0x02
    315c:	98 17       	cp	r25, r24
    315e:	b1 f0       	breq	.+44     	; 0x318c <__vector_52+0x62>
    3160:	92 81       	ldd	r25, Z+2	; 0x02
    3162:	85 81       	ldd	r24, Z+5	; 0x05
    3164:	28 2f       	mov	r18, r24
    3166:	26 95       	lsr	r18
    3168:	29 23       	and	r18, r25
    316a:	a0 81       	ld	r26, Z
    316c:	b1 81       	ldd	r27, Z+1	; 0x01
    316e:	a2 0f       	add	r26, r18
    3170:	b1 1d       	adc	r27, r1
    3172:	2c 91       	ld	r18, X
    3174:	9f 5f       	subi	r25, 0xFF	; 255
    3176:	89 23       	and	r24, r25
    3178:	82 83       	std	Z+2, r24	; 0x02
    317a:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    317e:	0b c0       	rjmp	.+22     	; 0x3196 <__vector_52+0x6c>
    3180:	e1 ed       	ldi	r30, 0xD1	; 209
    3182:	f0 e0       	ldi	r31, 0x00	; 0
    3184:	80 81       	ld	r24, Z
    3186:	8f 7d       	andi	r24, 0xDF	; 223
    3188:	80 83       	st	Z, r24
    318a:	05 c0       	rjmp	.+10     	; 0x3196 <__vector_52+0x6c>
    318c:	e1 ed       	ldi	r30, 0xD1	; 209
    318e:	f0 e0       	ldi	r31, 0x00	; 0
    3190:	80 81       	ld	r24, Z
    3192:	8f 7d       	andi	r24, 0xDF	; 223
    3194:	80 83       	st	Z, r24
    3196:	ff 91       	pop	r31
    3198:	ef 91       	pop	r30
    319a:	bf 91       	pop	r27
    319c:	af 91       	pop	r26
    319e:	9f 91       	pop	r25
    31a0:	8f 91       	pop	r24
    31a2:	2f 91       	pop	r18
    31a4:	0f 90       	pop	r0
    31a6:	0b be       	out	0x3b, r0	; 59
    31a8:	0f 90       	pop	r0
    31aa:	0f be       	out	0x3f, r0	; 63
    31ac:	0f 90       	pop	r0
    31ae:	1f 90       	pop	r1
    31b0:	18 95       	reti

000031b2 <__vector_54>:
    31b2:	1f 92       	push	r1
    31b4:	0f 92       	push	r0
    31b6:	0f b6       	in	r0, 0x3f	; 63
    31b8:	0f 92       	push	r0
    31ba:	11 24       	eor	r1, r1
    31bc:	0b b6       	in	r0, 0x3b	; 59
    31be:	0f 92       	push	r0
    31c0:	2f 93       	push	r18
    31c2:	3f 93       	push	r19
    31c4:	4f 93       	push	r20
    31c6:	5f 93       	push	r21
    31c8:	6f 93       	push	r22
    31ca:	7f 93       	push	r23
    31cc:	8f 93       	push	r24
    31ce:	9f 93       	push	r25
    31d0:	af 93       	push	r26
    31d2:	bf 93       	push	r27
    31d4:	cf 93       	push	r28
    31d6:	df 93       	push	r29
    31d8:	ef 93       	push	r30
    31da:	ff 93       	push	r31
    31dc:	a0 91 6e 08 	lds	r26, 0x086E	; 0x80086e <_ser_handle+0x6>
    31e0:	b0 91 6f 08 	lds	r27, 0x086F	; 0x80086f <_ser_handle+0x7>
    31e4:	10 97       	sbiw	r26, 0x00	; 0
    31e6:	11 f1       	breq	.+68     	; 0x322c <__vector_54+0x7a>
    31e8:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    31ec:	14 96       	adiw	r26, 0x04	; 4
    31ee:	ed 91       	ld	r30, X+
    31f0:	fc 91       	ld	r31, X
    31f2:	15 97       	sbiw	r26, 0x05	; 5
    31f4:	93 81       	ldd	r25, Z+3	; 0x03
    31f6:	82 81       	ldd	r24, Z+2	; 0x02
    31f8:	25 81       	ldd	r18, Z+5	; 0x05
    31fa:	98 1b       	sub	r25, r24
    31fc:	92 23       	and	r25, r18
    31fe:	84 81       	ldd	r24, Z+4	; 0x04
    3200:	98 17       	cp	r25, r24
    3202:	61 f0       	breq	.+24     	; 0x321c <__vector_54+0x6a>
    3204:	83 81       	ldd	r24, Z+3	; 0x03
    3206:	26 95       	lsr	r18
    3208:	28 23       	and	r18, r24
    320a:	c0 81       	ld	r28, Z
    320c:	d1 81       	ldd	r29, Z+1	; 0x01
    320e:	c2 0f       	add	r28, r18
    3210:	d1 1d       	adc	r29, r1
    3212:	68 83       	st	Y, r22
    3214:	8f 5f       	subi	r24, 0xFF	; 255
    3216:	95 81       	ldd	r25, Z+5	; 0x05
    3218:	89 23       	and	r24, r25
    321a:	83 83       	std	Z+3, r24	; 0x03
    321c:	16 96       	adiw	r26, 0x06	; 6
    321e:	ed 91       	ld	r30, X+
    3220:	fc 91       	ld	r31, X
    3222:	17 97       	sbiw	r26, 0x07	; 7
    3224:	30 97       	sbiw	r30, 0x00	; 0
    3226:	11 f0       	breq	.+4      	; 0x322c <__vector_54+0x7a>
    3228:	cd 01       	movw	r24, r26
    322a:	19 95       	eicall
    322c:	ff 91       	pop	r31
    322e:	ef 91       	pop	r30
    3230:	df 91       	pop	r29
    3232:	cf 91       	pop	r28
    3234:	bf 91       	pop	r27
    3236:	af 91       	pop	r26
    3238:	9f 91       	pop	r25
    323a:	8f 91       	pop	r24
    323c:	7f 91       	pop	r23
    323e:	6f 91       	pop	r22
    3240:	5f 91       	pop	r21
    3242:	4f 91       	pop	r20
    3244:	3f 91       	pop	r19
    3246:	2f 91       	pop	r18
    3248:	0f 90       	pop	r0
    324a:	0b be       	out	0x3b, r0	; 59
    324c:	0f 90       	pop	r0
    324e:	0f be       	out	0x3f, r0	; 63
    3250:	0f 90       	pop	r0
    3252:	1f 90       	pop	r1
    3254:	18 95       	reti

00003256 <__vector_55>:
    3256:	1f 92       	push	r1
    3258:	0f 92       	push	r0
    325a:	0f b6       	in	r0, 0x3f	; 63
    325c:	0f 92       	push	r0
    325e:	11 24       	eor	r1, r1
    3260:	0b b6       	in	r0, 0x3b	; 59
    3262:	0f 92       	push	r0
    3264:	2f 93       	push	r18
    3266:	8f 93       	push	r24
    3268:	9f 93       	push	r25
    326a:	af 93       	push	r26
    326c:	bf 93       	push	r27
    326e:	ef 93       	push	r30
    3270:	ff 93       	push	r31
    3272:	e0 91 6e 08 	lds	r30, 0x086E	; 0x80086e <_ser_handle+0x6>
    3276:	f0 91 6f 08 	lds	r31, 0x086F	; 0x80086f <_ser_handle+0x7>
    327a:	30 97       	sbiw	r30, 0x00	; 0
    327c:	b9 f0       	breq	.+46     	; 0x32ac <__vector_55+0x56>
    327e:	02 80       	ldd	r0, Z+2	; 0x02
    3280:	f3 81       	ldd	r31, Z+3	; 0x03
    3282:	e0 2d       	mov	r30, r0
    3284:	93 81       	ldd	r25, Z+3	; 0x03
    3286:	82 81       	ldd	r24, Z+2	; 0x02
    3288:	98 17       	cp	r25, r24
    328a:	b1 f0       	breq	.+44     	; 0x32b8 <__vector_55+0x62>
    328c:	92 81       	ldd	r25, Z+2	; 0x02
    328e:	85 81       	ldd	r24, Z+5	; 0x05
    3290:	28 2f       	mov	r18, r24
    3292:	26 95       	lsr	r18
    3294:	29 23       	and	r18, r25
    3296:	a0 81       	ld	r26, Z
    3298:	b1 81       	ldd	r27, Z+1	; 0x01
    329a:	a2 0f       	add	r26, r18
    329c:	b1 1d       	adc	r27, r1
    329e:	2c 91       	ld	r18, X
    32a0:	9f 5f       	subi	r25, 0xFF	; 255
    32a2:	89 23       	and	r24, r25
    32a4:	82 83       	std	Z+2, r24	; 0x02
    32a6:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    32aa:	0b c0       	rjmp	.+22     	; 0x32c2 <__vector_55+0x6c>
    32ac:	e1 e3       	ldi	r30, 0x31	; 49
    32ae:	f1 e0       	ldi	r31, 0x01	; 1
    32b0:	80 81       	ld	r24, Z
    32b2:	8f 7d       	andi	r24, 0xDF	; 223
    32b4:	80 83       	st	Z, r24
    32b6:	05 c0       	rjmp	.+10     	; 0x32c2 <__vector_55+0x6c>
    32b8:	e1 e3       	ldi	r30, 0x31	; 49
    32ba:	f1 e0       	ldi	r31, 0x01	; 1
    32bc:	80 81       	ld	r24, Z
    32be:	8f 7d       	andi	r24, 0xDF	; 223
    32c0:	80 83       	st	Z, r24
    32c2:	ff 91       	pop	r31
    32c4:	ef 91       	pop	r30
    32c6:	bf 91       	pop	r27
    32c8:	af 91       	pop	r26
    32ca:	9f 91       	pop	r25
    32cc:	8f 91       	pop	r24
    32ce:	2f 91       	pop	r18
    32d0:	0f 90       	pop	r0
    32d2:	0b be       	out	0x3b, r0	; 59
    32d4:	0f 90       	pop	r0
    32d6:	0f be       	out	0x3f, r0	; 63
    32d8:	0f 90       	pop	r0
    32da:	1f 90       	pop	r1
    32dc:	18 95       	reti

000032de <fifo_init>:
    32de:	fc 01       	movw	r30, r24
    32e0:	41 11       	cpse	r20, r1
    32e2:	02 c0       	rjmp	.+4      	; 0x32e8 <fifo_init+0xa>
    32e4:	0e 94 dd 26 	call	0x4dba	; 0x4dba <abort>
    32e8:	84 2f       	mov	r24, r20
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	9c 01       	movw	r18, r24
    32ee:	21 50       	subi	r18, 0x01	; 1
    32f0:	31 09       	sbc	r19, r1
    32f2:	82 23       	and	r24, r18
    32f4:	93 23       	and	r25, r19
    32f6:	89 2b       	or	r24, r25
    32f8:	11 f0       	breq	.+4      	; 0x32fe <fifo_init+0x20>
    32fa:	0e 94 dd 26 	call	0x4dba	; 0x4dba <abort>
    32fe:	41 38       	cpi	r20, 0x81	; 129
    3300:	10 f0       	brcs	.+4      	; 0x3306 <fifo_init+0x28>
    3302:	0e 94 dd 26 	call	0x4dba	; 0x4dba <abort>
    3306:	12 82       	std	Z+2, r1	; 0x02
    3308:	13 82       	std	Z+3, r1	; 0x03
    330a:	44 83       	std	Z+4, r20	; 0x04
    330c:	44 0f       	add	r20, r20
    330e:	41 50       	subi	r20, 0x01	; 1
    3310:	45 83       	std	Z+5, r20	; 0x05
    3312:	71 83       	std	Z+1, r23	; 0x01
    3314:	60 83       	st	Z, r22
    3316:	80 e0       	ldi	r24, 0x00	; 0
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	08 95       	ret

0000331c <hal_create>:
    331c:	ec e3       	ldi	r30, 0x3C	; 60
    331e:	fa e0       	ldi	r31, 0x0A	; 10
    3320:	20 e6       	ldi	r18, 0x60	; 96
    3322:	3f e1       	ldi	r19, 0x1F	; 31
    3324:	31 83       	std	Z+1, r19	; 0x01
    3326:	20 83       	st	Z, r18
    3328:	23 e6       	ldi	r18, 0x63	; 99
    332a:	3f e1       	ldi	r19, 0x1F	; 31
    332c:	33 83       	std	Z+3, r19	; 0x03
    332e:	22 83       	std	Z+2, r18	; 0x02
    3330:	2e e6       	ldi	r18, 0x6E	; 110
    3332:	3f e1       	ldi	r19, 0x1F	; 31
    3334:	35 83       	std	Z+5, r19	; 0x05
    3336:	24 83       	std	Z+4, r18	; 0x04
    3338:	22 e7       	ldi	r18, 0x72	; 114
    333a:	3f e1       	ldi	r19, 0x1F	; 31
    333c:	37 83       	std	Z+7, r19	; 0x07
    333e:	26 83       	std	Z+6, r18	; 0x06
    3340:	28 e7       	ldi	r18, 0x78	; 120
    3342:	3f e1       	ldi	r19, 0x1F	; 31
    3344:	31 87       	std	Z+9, r19	; 0x09
    3346:	20 87       	std	Z+8, r18	; 0x08
    3348:	24 e8       	ldi	r18, 0x84	; 132
    334a:	3f e1       	ldi	r19, 0x1F	; 31
    334c:	33 87       	std	Z+11, r19	; 0x0b
    334e:	22 87       	std	Z+10, r18	; 0x0a
    3350:	29 e8       	ldi	r18, 0x89	; 137
    3352:	3f e1       	ldi	r19, 0x1F	; 31
    3354:	35 87       	std	Z+13, r19	; 0x0d
    3356:	24 87       	std	Z+12, r18	; 0x0c
    3358:	25 e9       	ldi	r18, 0x95	; 149
    335a:	3f e1       	ldi	r19, 0x1F	; 31
    335c:	37 87       	std	Z+15, r19	; 0x0f
    335e:	26 87       	std	Z+14, r18	; 0x0e
    3360:	25 e7       	ldi	r18, 0x75	; 117
    3362:	3f e1       	ldi	r19, 0x1F	; 31
    3364:	31 8b       	std	Z+17, r19	; 0x11
    3366:	20 8b       	std	Z+16, r18	; 0x10
    3368:	2a e9       	ldi	r18, 0x9A	; 154
    336a:	3f e1       	ldi	r19, 0x1F	; 31
    336c:	33 8b       	std	Z+19, r19	; 0x13
    336e:	22 8b       	std	Z+18, r18	; 0x12
    3370:	27 ea       	ldi	r18, 0xA7	; 167
    3372:	3f e1       	ldi	r19, 0x1F	; 31
    3374:	35 8b       	std	Z+21, r19	; 0x15
    3376:	24 8b       	std	Z+20, r18	; 0x14
    3378:	68 2f       	mov	r22, r24
    337a:	cf 01       	movw	r24, r30
    337c:	3c c1       	rjmp	.+632    	; 0x35f6 <led_create>
    337e:	08 95       	ret

00003380 <_hihTwiCallback>:
    3380:	65 30       	cpi	r22, 0x05	; 5
    3382:	f1 f4       	brne	.+60     	; 0x33c0 <_hihTwiCallback+0x40>
    3384:	fa 01       	movw	r30, r20
    3386:	80 81       	ld	r24, Z
    3388:	8f 73       	andi	r24, 0x3F	; 63
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	98 2f       	mov	r25, r24
    338e:	88 27       	eor	r24, r24
    3390:	21 81       	ldd	r18, Z+1	; 0x01
    3392:	82 2b       	or	r24, r18
    3394:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <_hum+0x1>
    3398:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <_hum>
    339c:	82 81       	ldd	r24, Z+2	; 0x02
    339e:	f0 e4       	ldi	r31, 0x40	; 64
    33a0:	8f 9f       	mul	r24, r31
    33a2:	c0 01       	movw	r24, r0
    33a4:	11 24       	eor	r1, r1
    33a6:	fa 01       	movw	r30, r20
    33a8:	23 81       	ldd	r18, Z+3	; 0x03
    33aa:	26 95       	lsr	r18
    33ac:	26 95       	lsr	r18
    33ae:	82 2b       	or	r24, r18
    33b0:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <_temp+0x1>
    33b4:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_temp>
    33b8:	81 e0       	ldi	r24, 0x01	; 1
    33ba:	80 93 70 08 	sts	0x0870, r24	; 0x800870 <_measuringIsReady>
    33be:	08 95       	ret
    33c0:	64 30       	cpi	r22, 0x04	; 4
    33c2:	51 f0       	breq	.+20     	; 0x33d8 <_hihTwiCallback+0x58>
    33c4:	80 e0       	ldi	r24, 0x00	; 0
    33c6:	90 e4       	ldi	r25, 0x40	; 64
    33c8:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <_temp+0x1>
    33cc:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_temp>
    33d0:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <_hum+0x1>
    33d4:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <_hum>
    33d8:	08 95       	ret

000033da <hih8120Create>:
    33da:	0f 93       	push	r16
    33dc:	1f 93       	push	r17
    33de:	00 ec       	ldi	r16, 0xC0	; 192
    33e0:	19 e1       	ldi	r17, 0x19	; 25
    33e2:	20 e0       	ldi	r18, 0x00	; 0
    33e4:	34 e2       	ldi	r19, 0x24	; 36
    33e6:	44 ef       	ldi	r20, 0xF4	; 244
    33e8:	50 e0       	ldi	r21, 0x00	; 0
    33ea:	60 e0       	ldi	r22, 0x00	; 0
    33ec:	87 e2       	ldi	r24, 0x27	; 39
    33ee:	0e 94 26 22 	call	0x444c	; 0x444c <twiCreate>
    33f2:	90 93 72 08 	sts	0x0872, r25	; 0x800872 <_hih8120Handler+0x1>
    33f6:	80 93 71 08 	sts	0x0871, r24	; 0x800871 <_hih8120Handler>
    33fa:	21 e0       	ldi	r18, 0x01	; 1
    33fc:	89 2b       	or	r24, r25
    33fe:	09 f0       	breq	.+2      	; 0x3402 <hih8120Create+0x28>
    3400:	20 e0       	ldi	r18, 0x00	; 0
    3402:	82 2f       	mov	r24, r18
    3404:	1f 91       	pop	r17
    3406:	0f 91       	pop	r16
    3408:	08 95       	ret

0000340a <hih8120Wakeup>:
    340a:	80 91 71 08 	lds	r24, 0x0871	; 0x800871 <_hih8120Handler>
    340e:	90 91 72 08 	lds	r25, 0x0872	; 0x800872 <_hih8120Handler+0x1>
    3412:	00 97       	sbiw	r24, 0x00	; 0
    3414:	59 f0       	breq	.+22     	; 0x342c <hih8120Wakeup+0x22>
    3416:	40 e0       	ldi	r20, 0x00	; 0
    3418:	60 e0       	ldi	r22, 0x00	; 0
    341a:	70 e0       	ldi	r23, 0x00	; 0
    341c:	0e 94 77 22 	call	0x44ee	; 0x44ee <twiTransmit>
    3420:	84 30       	cpi	r24, 0x04	; 4
    3422:	31 f4       	brne	.+12     	; 0x3430 <hih8120Wakeup+0x26>
    3424:	10 92 70 08 	sts	0x0870, r1	; 0x800870 <_measuringIsReady>
    3428:	80 e0       	ldi	r24, 0x00	; 0
    342a:	08 95       	ret
    342c:	82 e0       	ldi	r24, 0x02	; 2
    342e:	08 95       	ret
    3430:	83 e0       	ldi	r24, 0x03	; 3
    3432:	08 95       	ret

00003434 <hih8120Meassure>:
    3434:	80 91 71 08 	lds	r24, 0x0871	; 0x800871 <_hih8120Handler>
    3438:	90 91 72 08 	lds	r25, 0x0872	; 0x800872 <_hih8120Handler+0x1>
    343c:	00 97       	sbiw	r24, 0x00	; 0
    343e:	39 f0       	breq	.+14     	; 0x344e <hih8120Meassure+0x1a>
    3440:	64 e0       	ldi	r22, 0x04	; 4
    3442:	0e 94 c3 22 	call	0x4586	; 0x4586 <twiReceive>
    3446:	85 30       	cpi	r24, 0x05	; 5
    3448:	21 f0       	breq	.+8      	; 0x3452 <hih8120Meassure+0x1e>
    344a:	83 e0       	ldi	r24, 0x03	; 3
    344c:	08 95       	ret
    344e:	82 e0       	ldi	r24, 0x02	; 2
    3450:	08 95       	ret
    3452:	80 e0       	ldi	r24, 0x00	; 0
    3454:	08 95       	ret

00003456 <hih8120GetHumidity>:
    3456:	60 91 1e 02 	lds	r22, 0x021E	; 0x80021e <_hum>
    345a:	70 91 1f 02 	lds	r23, 0x021F	; 0x80021f <_hum+0x1>
    345e:	80 e0       	ldi	r24, 0x00	; 0
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	0e 94 85 24 	call	0x490a	; 0x490a <__floatunsisf>
    3466:	20 e0       	ldi	r18, 0x00	; 0
    3468:	30 e0       	ldi	r19, 0x00	; 0
    346a:	48 ec       	ldi	r20, 0xC8	; 200
    346c:	52 e4       	ldi	r21, 0x42	; 66
    346e:	0e 94 ee 24 	call	0x49dc	; 0x49dc <__mulsf3>
    3472:	20 e0       	ldi	r18, 0x00	; 0
    3474:	38 ef       	ldi	r19, 0xF8	; 248
    3476:	4f e7       	ldi	r20, 0x7F	; 127
    3478:	56 e4       	ldi	r21, 0x46	; 70
    347a:	0c 94 1a 24 	jmp	0x4834	; 0x4834 <__divsf3>
    347e:	08 95       	ret

00003480 <hih8120GetTemperature>:
    3480:	60 91 1c 02 	lds	r22, 0x021C	; 0x80021c <_temp>
    3484:	70 91 1d 02 	lds	r23, 0x021D	; 0x80021d <_temp+0x1>
    3488:	80 e0       	ldi	r24, 0x00	; 0
    348a:	90 e0       	ldi	r25, 0x00	; 0
    348c:	0e 94 85 24 	call	0x490a	; 0x490a <__floatunsisf>
    3490:	20 e0       	ldi	r18, 0x00	; 0
    3492:	30 e0       	ldi	r19, 0x00	; 0
    3494:	45 e2       	ldi	r20, 0x25	; 37
    3496:	53 e4       	ldi	r21, 0x43	; 67
    3498:	0e 94 ee 24 	call	0x49dc	; 0x49dc <__mulsf3>
    349c:	20 e0       	ldi	r18, 0x00	; 0
    349e:	38 ef       	ldi	r19, 0xF8	; 248
    34a0:	4f e7       	ldi	r20, 0x7F	; 127
    34a2:	56 e4       	ldi	r21, 0x46	; 70
    34a4:	0e 94 1a 24 	call	0x4834	; 0x4834 <__divsf3>
    34a8:	20 e0       	ldi	r18, 0x00	; 0
    34aa:	30 e0       	ldi	r19, 0x00	; 0
    34ac:	40 e2       	ldi	r20, 0x20	; 32
    34ae:	52 e4       	ldi	r21, 0x42	; 66
    34b0:	0c 94 b3 23 	jmp	0x4766	; 0x4766 <__subsf3>
    34b4:	08 95       	ret

000034b6 <_turn_off>:
    34b6:	cf 93       	push	r28
    34b8:	df 93       	push	r29
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	fc 01       	movw	r30, r24
    34be:	ee 0f       	add	r30, r30
    34c0:	ff 1f       	adc	r31, r31
    34c2:	e8 0f       	add	r30, r24
    34c4:	f9 1f       	adc	r31, r25
    34c6:	ee 0f       	add	r30, r30
    34c8:	ff 1f       	adc	r31, r31
    34ca:	ed 58       	subi	r30, 0x8D	; 141
    34cc:	f7 4f       	sbci	r31, 0xF7	; 247
    34ce:	23 81       	ldd	r18, Z+3	; 0x03
    34d0:	21 11       	cpse	r18, r1
    34d2:	0a c0       	rjmp	.+20     	; 0x34e8 <_turn_off+0x32>
    34d4:	ef 01       	movw	r28, r30
    34d6:	e0 91 44 0a 	lds	r30, 0x0A44	; 0x800a44 <register_access+0x8>
    34da:	f0 91 45 0a 	lds	r31, 0x0A45	; 0x800a45 <register_access+0x9>
    34de:	6a 81       	ldd	r22, Y+2	; 0x02
    34e0:	88 81       	ld	r24, Y
    34e2:	99 81       	ldd	r25, Y+1	; 0x01
    34e4:	19 95       	eicall
    34e6:	12 c0       	rjmp	.+36     	; 0x350c <_turn_off+0x56>
    34e8:	dc 01       	movw	r26, r24
    34ea:	aa 0f       	add	r26, r26
    34ec:	bb 1f       	adc	r27, r27
    34ee:	ed 01       	movw	r28, r26
    34f0:	c8 0f       	add	r28, r24
    34f2:	d9 1f       	adc	r29, r25
    34f4:	cc 0f       	add	r28, r28
    34f6:	dd 1f       	adc	r29, r29
    34f8:	cd 58       	subi	r28, 0x8D	; 141
    34fa:	d7 4f       	sbci	r29, 0xF7	; 247
    34fc:	e0 91 4e 0a 	lds	r30, 0x0A4E	; 0x800a4e <register_access+0x12>
    3500:	f0 91 4f 0a 	lds	r31, 0x0A4F	; 0x800a4f <register_access+0x13>
    3504:	6a 81       	ldd	r22, Y+2	; 0x02
    3506:	88 81       	ld	r24, Y
    3508:	99 81       	ldd	r25, Y+1	; 0x01
    350a:	19 95       	eicall
    350c:	df 91       	pop	r29
    350e:	cf 91       	pop	r28
    3510:	08 95       	ret

00003512 <_turn_on>:
    3512:	cf 93       	push	r28
    3514:	df 93       	push	r29
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	fc 01       	movw	r30, r24
    351a:	ee 0f       	add	r30, r30
    351c:	ff 1f       	adc	r31, r31
    351e:	e8 0f       	add	r30, r24
    3520:	f9 1f       	adc	r31, r25
    3522:	ee 0f       	add	r30, r30
    3524:	ff 1f       	adc	r31, r31
    3526:	ed 58       	subi	r30, 0x8D	; 141
    3528:	f7 4f       	sbci	r31, 0xF7	; 247
    352a:	23 81       	ldd	r18, Z+3	; 0x03
    352c:	21 11       	cpse	r18, r1
    352e:	0a c0       	rjmp	.+20     	; 0x3544 <_turn_on+0x32>
    3530:	ef 01       	movw	r28, r30
    3532:	e0 91 4e 0a 	lds	r30, 0x0A4E	; 0x800a4e <register_access+0x12>
    3536:	f0 91 4f 0a 	lds	r31, 0x0A4F	; 0x800a4f <register_access+0x13>
    353a:	6a 81       	ldd	r22, Y+2	; 0x02
    353c:	88 81       	ld	r24, Y
    353e:	99 81       	ldd	r25, Y+1	; 0x01
    3540:	19 95       	eicall
    3542:	12 c0       	rjmp	.+36     	; 0x3568 <_turn_on+0x56>
    3544:	dc 01       	movw	r26, r24
    3546:	aa 0f       	add	r26, r26
    3548:	bb 1f       	adc	r27, r27
    354a:	ed 01       	movw	r28, r26
    354c:	c8 0f       	add	r28, r24
    354e:	d9 1f       	adc	r29, r25
    3550:	cc 0f       	add	r28, r28
    3552:	dd 1f       	adc	r29, r29
    3554:	cd 58       	subi	r28, 0x8D	; 141
    3556:	d7 4f       	sbci	r29, 0xF7	; 247
    3558:	e0 91 44 0a 	lds	r30, 0x0A44	; 0x800a44 <register_access+0x8>
    355c:	f0 91 45 0a 	lds	r31, 0x0A45	; 0x800a45 <register_access+0x9>
    3560:	6a 81       	ldd	r22, Y+2	; 0x02
    3562:	88 81       	ld	r24, Y
    3564:	99 81       	ldd	r25, Y+1	; 0x01
    3566:	19 95       	eicall
    3568:	df 91       	pop	r29
    356a:	cf 91       	pop	r28
    356c:	08 95       	ret

0000356e <_hal_led_task>:
    356e:	82 e0       	ldi	r24, 0x02	; 2
    3570:	95 e0       	ldi	r25, 0x05	; 5
    3572:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <puts>
    3576:	0f 2e       	mov	r0, r31
    3578:	fc e3       	ldi	r31, 0x3C	; 60
    357a:	cf 2e       	mov	r12, r31
    357c:	fa e0       	ldi	r31, 0x0A	; 10
    357e:	df 2e       	mov	r13, r31
    3580:	f0 2d       	mov	r31, r0
    3582:	04 e0       	ldi	r16, 0x04	; 4
    3584:	c3 e7       	ldi	r28, 0x73	; 115
    3586:	d8 e0       	ldi	r29, 0x08	; 8
    3588:	10 e0       	ldi	r17, 0x00	; 0
    358a:	8c 81       	ldd	r24, Y+4	; 0x04
    358c:	81 30       	cpi	r24, 0x01	; 1
    358e:	69 f0       	breq	.+26     	; 0x35aa <_hal_led_task+0x3c>
    3590:	e8 f0       	brcs	.+58     	; 0x35cc <_hal_led_task+0x5e>
    3592:	82 30       	cpi	r24, 0x02	; 2
    3594:	39 f5       	brne	.+78     	; 0x35e4 <_hal_led_task+0x76>
    3596:	d6 01       	movw	r26, r12
    3598:	1c 96       	adiw	r26, 0x0c	; 12
    359a:	ed 91       	ld	r30, X+
    359c:	fc 91       	ld	r31, X
    359e:	1d 97       	sbiw	r26, 0x0d	; 13
    35a0:	6a 81       	ldd	r22, Y+2	; 0x02
    35a2:	88 81       	ld	r24, Y
    35a4:	99 81       	ldd	r25, Y+1	; 0x01
    35a6:	19 95       	eicall
    35a8:	1d c0       	rjmp	.+58     	; 0x35e4 <_hal_led_task+0x76>
    35aa:	8d 81       	ldd	r24, Y+5	; 0x05
    35ac:	8f 5f       	subi	r24, 0xFF	; 255
    35ae:	8a 30       	cpi	r24, 0x0A	; 10
    35b0:	10 f4       	brcc	.+4      	; 0x35b6 <_hal_led_task+0x48>
    35b2:	8d 83       	std	Y+5, r24	; 0x05
    35b4:	17 c0       	rjmp	.+46     	; 0x35e4 <_hal_led_task+0x76>
    35b6:	1d 82       	std	Y+5, r1	; 0x05
    35b8:	d6 01       	movw	r26, r12
    35ba:	1c 96       	adiw	r26, 0x0c	; 12
    35bc:	ed 91       	ld	r30, X+
    35be:	fc 91       	ld	r31, X
    35c0:	1d 97       	sbiw	r26, 0x0d	; 13
    35c2:	6a 81       	ldd	r22, Y+2	; 0x02
    35c4:	88 81       	ld	r24, Y
    35c6:	99 81       	ldd	r25, Y+1	; 0x01
    35c8:	19 95       	eicall
    35ca:	0c c0       	rjmp	.+24     	; 0x35e4 <_hal_led_task+0x76>
    35cc:	8d 81       	ldd	r24, Y+5	; 0x05
    35ce:	88 23       	and	r24, r24
    35d0:	31 f0       	breq	.+12     	; 0x35de <_hal_led_task+0x70>
    35d2:	81 2f       	mov	r24, r17
    35d4:	9e df       	rcall	.-196    	; 0x3512 <_turn_on>
    35d6:	8d 81       	ldd	r24, Y+5	; 0x05
    35d8:	81 50       	subi	r24, 0x01	; 1
    35da:	8d 83       	std	Y+5, r24	; 0x05
    35dc:	03 c0       	rjmp	.+6      	; 0x35e4 <_hal_led_task+0x76>
    35de:	0c 83       	std	Y+4, r16	; 0x04
    35e0:	81 2f       	mov	r24, r17
    35e2:	69 df       	rcall	.-302    	; 0x34b6 <_turn_off>
    35e4:	1f 5f       	subi	r17, 0xFF	; 255
    35e6:	26 96       	adiw	r28, 0x06	; 6
    35e8:	14 30       	cpi	r17, 0x04	; 4
    35ea:	79 f6       	brne	.-98     	; 0x358a <_hal_led_task+0x1c>
    35ec:	85 e0       	ldi	r24, 0x05	; 5
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    35f0:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <vTaskDelay>
    35f4:	c7 cf       	rjmp	.-114    	; 0x3584 <_hal_led_task+0x16>

000035f6 <led_create>:
    35f6:	cf 92       	push	r12
    35f8:	df 92       	push	r13
    35fa:	ef 92       	push	r14
    35fc:	ff 92       	push	r15
    35fe:	0f 93       	push	r16
    3600:	1f 93       	push	r17
    3602:	cf 93       	push	r28
    3604:	df 93       	push	r29
    3606:	06 2f       	mov	r16, r22
    3608:	0f 2e       	mov	r0, r31
    360a:	fc e3       	ldi	r31, 0x3C	; 60
    360c:	ef 2e       	mov	r14, r31
    360e:	fa e0       	ldi	r31, 0x0A	; 10
    3610:	ff 2e       	mov	r15, r31
    3612:	f0 2d       	mov	r31, r0
    3614:	d7 01       	movw	r26, r14
    3616:	18 96       	adiw	r26, 0x08	; 8
    3618:	ed 91       	ld	r30, X+
    361a:	fc 91       	ld	r31, X
    361c:	19 97       	sbiw	r26, 0x09	; 9
    361e:	66 e0       	ldi	r22, 0x06	; 6
    3620:	87 e2       	ldi	r24, 0x27	; 39
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	19 95       	eicall
    3626:	c3 e7       	ldi	r28, 0x73	; 115
    3628:	d8 e0       	ldi	r29, 0x08	; 8
    362a:	0f 2e       	mov	r0, r31
    362c:	f8 e2       	ldi	r31, 0x28	; 40
    362e:	cf 2e       	mov	r12, r31
    3630:	d1 2c       	mov	r13, r1
    3632:	f0 2d       	mov	r31, r0
    3634:	d9 82       	std	Y+1, r13	; 0x01
    3636:	c8 82       	st	Y, r12
    3638:	86 e0       	ldi	r24, 0x06	; 6
    363a:	8a 83       	std	Y+2, r24	; 0x02
    363c:	1b 82       	std	Y+3, r1	; 0x03
    363e:	14 e0       	ldi	r17, 0x04	; 4
    3640:	1c 83       	std	Y+4, r17	; 0x04
    3642:	80 e0       	ldi	r24, 0x00	; 0
    3644:	38 df       	rcall	.-400    	; 0x34b6 <_turn_off>
    3646:	d7 01       	movw	r26, r14
    3648:	18 96       	adiw	r26, 0x08	; 8
    364a:	ed 91       	ld	r30, X+
    364c:	fc 91       	ld	r31, X
    364e:	19 97       	sbiw	r26, 0x09	; 9
    3650:	67 e0       	ldi	r22, 0x07	; 7
    3652:	87 e2       	ldi	r24, 0x27	; 39
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	19 95       	eicall
    3658:	df 82       	std	Y+7, r13	; 0x07
    365a:	ce 82       	std	Y+6, r12	; 0x06
    365c:	87 e0       	ldi	r24, 0x07	; 7
    365e:	88 87       	std	Y+8, r24	; 0x08
    3660:	19 86       	std	Y+9, r1	; 0x09
    3662:	1a 87       	std	Y+10, r17	; 0x0a
    3664:	81 e0       	ldi	r24, 0x01	; 1
    3666:	27 df       	rcall	.-434    	; 0x34b6 <_turn_off>
    3668:	d7 01       	movw	r26, r14
    366a:	18 96       	adiw	r26, 0x08	; 8
    366c:	ed 91       	ld	r30, X+
    366e:	fc 91       	ld	r31, X
    3670:	19 97       	sbiw	r26, 0x09	; 9
    3672:	65 e0       	ldi	r22, 0x05	; 5
    3674:	83 e3       	ldi	r24, 0x33	; 51
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	19 95       	eicall
    367a:	d7 01       	movw	r26, r14
    367c:	18 96       	adiw	r26, 0x08	; 8
    367e:	ed 91       	ld	r30, X+
    3680:	fc 91       	ld	r31, X
    3682:	19 97       	sbiw	r26, 0x09	; 9
    3684:	61 e0       	ldi	r22, 0x01	; 1
    3686:	84 e3       	ldi	r24, 0x34	; 52
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	19 95       	eicall
    368c:	84 e3       	ldi	r24, 0x34	; 52
    368e:	90 e0       	ldi	r25, 0x00	; 0
    3690:	9d 87       	std	Y+13, r25	; 0x0d
    3692:	8c 87       	std	Y+12, r24	; 0x0c
    3694:	85 e0       	ldi	r24, 0x05	; 5
    3696:	8e 87       	std	Y+14, r24	; 0x0e
    3698:	1f 86       	std	Y+15, r1	; 0x0f
    369a:	18 8b       	std	Y+16, r17	; 0x10
    369c:	82 e0       	ldi	r24, 0x02	; 2
    369e:	0b df       	rcall	.-490    	; 0x34b6 <_turn_off>
    36a0:	d7 01       	movw	r26, r14
    36a2:	18 96       	adiw	r26, 0x08	; 8
    36a4:	ed 91       	ld	r30, X+
    36a6:	fc 91       	ld	r31, X
    36a8:	19 97       	sbiw	r26, 0x09	; 9
    36aa:	64 e0       	ldi	r22, 0x04	; 4
    36ac:	81 e0       	ldi	r24, 0x01	; 1
    36ae:	91 e0       	ldi	r25, 0x01	; 1
    36b0:	19 95       	eicall
    36b2:	d7 01       	movw	r26, r14
    36b4:	18 96       	adiw	r26, 0x08	; 8
    36b6:	ed 91       	ld	r30, X+
    36b8:	fc 91       	ld	r31, X
    36ba:	19 97       	sbiw	r26, 0x09	; 9
    36bc:	61 e0       	ldi	r22, 0x01	; 1
    36be:	82 e0       	ldi	r24, 0x02	; 2
    36c0:	91 e0       	ldi	r25, 0x01	; 1
    36c2:	19 95       	eicall
    36c4:	82 e0       	ldi	r24, 0x02	; 2
    36c6:	91 e0       	ldi	r25, 0x01	; 1
    36c8:	9b 8b       	std	Y+19, r25	; 0x13
    36ca:	8a 8b       	std	Y+18, r24	; 0x12
    36cc:	1c 8b       	std	Y+20, r17	; 0x14
    36ce:	1d 8a       	std	Y+21, r1	; 0x15
    36d0:	1e 8b       	std	Y+22, r17	; 0x16
    36d2:	83 e0       	ldi	r24, 0x03	; 3
    36d4:	f0 de       	rcall	.-544    	; 0x34b6 <_turn_off>
    36d6:	e1 2c       	mov	r14, r1
    36d8:	f1 2c       	mov	r15, r1
    36da:	20 e0       	ldi	r18, 0x00	; 0
    36dc:	30 e0       	ldi	r19, 0x00	; 0
    36de:	40 ec       	ldi	r20, 0xC0	; 192
    36e0:	50 e0       	ldi	r21, 0x00	; 0
    36e2:	69 e1       	ldi	r22, 0x19	; 25
    36e4:	75 e0       	ldi	r23, 0x05	; 5
    36e6:	87 eb       	ldi	r24, 0xB7	; 183
    36e8:	9a e1       	ldi	r25, 0x1A	; 26
    36ea:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <xTaskCreate>
    36ee:	df 91       	pop	r29
    36f0:	cf 91       	pop	r28
    36f2:	1f 91       	pop	r17
    36f4:	0f 91       	pop	r16
    36f6:	ff 90       	pop	r15
    36f8:	ef 90       	pop	r14
    36fa:	df 90       	pop	r13
    36fc:	cf 90       	pop	r12
    36fe:	08 95       	ret

00003700 <_serial_call_back>:
    3700:	0f 93       	push	r16
    3702:	1f 93       	push	r17
    3704:	cf 93       	push	r28
    3706:	df 93       	push	r29
    3708:	1f 92       	push	r1
    370a:	1f 92       	push	r1
    370c:	cd b7       	in	r28, 0x3d	; 61
    370e:	de b7       	in	r29, 0x3e	; 62
    3710:	8c 01       	movw	r16, r24
    3712:	19 82       	std	Y+1, r1	; 0x01
    3714:	2d c0       	rjmp	.+90     	; 0x3770 <_serial_call_back+0x70>
    3716:	e0 91 ef 08 	lds	r30, 0x08EF	; 0x8008ef <rec_buf_inp.2926>
    371a:	ec 32       	cpi	r30, 0x2C	; 44
    371c:	50 f4       	brcc	.+20     	; 0x3732 <_serial_call_back+0x32>
    371e:	81 e0       	ldi	r24, 0x01	; 1
    3720:	8e 0f       	add	r24, r30
    3722:	80 93 ef 08 	sts	0x08EF, r24	; 0x8008ef <rec_buf_inp.2926>
    3726:	f0 e0       	ldi	r31, 0x00	; 0
    3728:	e1 5e       	subi	r30, 0xE1	; 225
    372a:	f6 4f       	sbci	r31, 0xF6	; 246
    372c:	8a 81       	ldd	r24, Y+2	; 0x02
    372e:	80 83       	st	Z, r24
    3730:	02 c0       	rjmp	.+4      	; 0x3736 <_serial_call_back+0x36>
    3732:	10 92 ef 08 	sts	0x08EF, r1	; 0x8008ef <rec_buf_inp.2926>
    3736:	8a 81       	ldd	r24, Y+2	; 0x02
    3738:	8a 30       	cpi	r24, 0x0A	; 10
    373a:	d1 f4       	brne	.+52     	; 0x3770 <_serial_call_back+0x70>
    373c:	40 91 ef 08 	lds	r20, 0x08EF	; 0x8008ef <rec_buf_inp.2926>
    3740:	50 e0       	ldi	r21, 0x00	; 0
    3742:	fa 01       	movw	r30, r20
    3744:	e3 5e       	subi	r30, 0xE3	; 227
    3746:	f6 4f       	sbci	r31, 0xF6	; 246
    3748:	10 82       	st	Z, r1
    374a:	41 50       	subi	r20, 0x01	; 1
    374c:	51 09       	sbc	r21, r1
    374e:	9e 01       	movw	r18, r28
    3750:	2f 5f       	subi	r18, 0xFF	; 255
    3752:	3f 4f       	sbci	r19, 0xFF	; 255
    3754:	6f e1       	ldi	r22, 0x1F	; 31
    3756:	79 e0       	ldi	r23, 0x09	; 9
    3758:	80 91 f0 08 	lds	r24, 0x08F0	; 0x8008f0 <_reply_buffer_handle>
    375c:	90 91 f1 08 	lds	r25, 0x08F1	; 0x8008f1 <_reply_buffer_handle+0x1>
    3760:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <xStreamBufferSendFromISR>
    3764:	89 81       	ldd	r24, Y+1	; 0x01
    3766:	81 11       	cpse	r24, r1
    3768:	0e 94 54 06 	call	0xca8	; 0xca8 <vPortYield>
    376c:	10 92 ef 08 	sts	0x08EF, r1	; 0x8008ef <rec_buf_inp.2926>
    3770:	be 01       	movw	r22, r28
    3772:	6e 5f       	subi	r22, 0xFE	; 254
    3774:	7f 4f       	sbci	r23, 0xFF	; 255
    3776:	c8 01       	movw	r24, r16
    3778:	3e db       	rcall	.-2436   	; 0x2df6 <serial_get_byte>
    377a:	88 23       	and	r24, r24
    377c:	61 f2       	breq	.-104    	; 0x3716 <_serial_call_back+0x16>
    377e:	0f 90       	pop	r0
    3780:	0f 90       	pop	r0
    3782:	df 91       	pop	r29
    3784:	cf 91       	pop	r28
    3786:	1f 91       	pop	r17
    3788:	0f 91       	pop	r16
    378a:	08 95       	ret

0000378c <_upload_message>:
    378c:	0f 93       	push	r16
    378e:	1f 93       	push	r17
    3790:	cf 93       	push	r28
    3792:	df 93       	push	r29
    3794:	8c 01       	movw	r16, r24
    3796:	eb 01       	movw	r28, r22
    3798:	80 91 f0 08 	lds	r24, 0x08F0	; 0x8008f0 <_reply_buffer_handle>
    379c:	90 91 f1 08 	lds	r25, 0x08F1	; 0x8008f1 <_reply_buffer_handle+0x1>
    37a0:	0e 94 b8 0b 	call	0x1770	; 0x1770 <xStreamBufferReset>
    37a4:	b8 01       	movw	r22, r16
    37a6:	8b e8       	ldi	r24, 0x8B	; 139
    37a8:	98 e0       	ldi	r25, 0x08	; 8
    37aa:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <strcpy>
    37ae:	20 97       	sbiw	r28, 0x00	; 0
    37b0:	79 f0       	breq	.+30     	; 0x37d0 <_upload_message+0x44>
    37b2:	eb e8       	ldi	r30, 0x8B	; 139
    37b4:	f8 e0       	ldi	r31, 0x08	; 8
    37b6:	01 90       	ld	r0, Z+
    37b8:	00 20       	and	r0, r0
    37ba:	e9 f7       	brne	.-6      	; 0x37b6 <_upload_message+0x2a>
    37bc:	31 97       	sbiw	r30, 0x01	; 1
    37be:	80 e2       	ldi	r24, 0x20	; 32
    37c0:	90 e0       	ldi	r25, 0x00	; 0
    37c2:	91 83       	std	Z+1, r25	; 0x01
    37c4:	80 83       	st	Z, r24
    37c6:	be 01       	movw	r22, r28
    37c8:	8b e8       	ldi	r24, 0x8B	; 139
    37ca:	98 e0       	ldi	r25, 0x08	; 8
    37cc:	0e 94 f1 26 	call	0x4de2	; 0x4de2 <strcat>
    37d0:	eb e8       	ldi	r30, 0x8B	; 139
    37d2:	f8 e0       	ldi	r31, 0x08	; 8
    37d4:	df 01       	movw	r26, r30
    37d6:	0d 90       	ld	r0, X+
    37d8:	00 20       	and	r0, r0
    37da:	e9 f7       	brne	.-6      	; 0x37d6 <_upload_message+0x4a>
    37dc:	11 97       	sbiw	r26, 0x01	; 1
    37de:	8d e0       	ldi	r24, 0x0D	; 13
    37e0:	9a e0       	ldi	r25, 0x0A	; 10
    37e2:	11 96       	adiw	r26, 0x01	; 1
    37e4:	9c 93       	st	X, r25
    37e6:	8e 93       	st	-X, r24
    37e8:	12 96       	adiw	r26, 0x02	; 2
    37ea:	1c 92       	st	X, r1
    37ec:	01 90       	ld	r0, Z+
    37ee:	00 20       	and	r0, r0
    37f0:	e9 f7       	brne	.-6      	; 0x37ec <_upload_message+0x60>
    37f2:	31 97       	sbiw	r30, 0x01	; 1
    37f4:	eb 58       	subi	r30, 0x8B	; 139
    37f6:	f8 40       	sbci	r31, 0x08	; 8
    37f8:	ae 2f       	mov	r26, r30
    37fa:	8b e8       	ldi	r24, 0x8B	; 139
    37fc:	98 e0       	ldi	r25, 0x08	; 8
    37fe:	ac 01       	movw	r20, r24
    3800:	6a 2f       	mov	r22, r26
    3802:	80 91 f2 08 	lds	r24, 0x08F2	; 0x8008f2 <_rn2483_serial>
    3806:	90 91 f3 08 	lds	r25, 0x08F3	; 0x8008f3 <_rn2483_serial+0x1>
    380a:	a5 da       	rcall	.-2742   	; 0x2d56 <serial_send_bytes>
    380c:	81 11       	cpse	r24, r1
    380e:	0f c0       	rjmp	.+30     	; 0x382e <_upload_message+0xa2>
    3810:	28 e2       	ldi	r18, 0x28	; 40
    3812:	35 e0       	ldi	r19, 0x05	; 5
    3814:	4d e2       	ldi	r20, 0x2D	; 45
    3816:	50 e0       	ldi	r21, 0x00	; 0
    3818:	69 e7       	ldi	r22, 0x79	; 121
    381a:	79 e0       	ldi	r23, 0x09	; 9
    381c:	80 91 f0 08 	lds	r24, 0x08F0	; 0x8008f0 <_reply_buffer_handle>
    3820:	90 91 f1 08 	lds	r25, 0x08F1	; 0x8008f1 <_reply_buffer_handle+0x1>
    3824:	0e 94 39 0c 	call	0x1872	; 0x1872 <xStreamBufferReceive>
    3828:	89 e7       	ldi	r24, 0x79	; 121
    382a:	99 e0       	ldi	r25, 0x09	; 9
    382c:	02 c0       	rjmp	.+4      	; 0x3832 <_upload_message+0xa6>
    382e:	80 e0       	ldi	r24, 0x00	; 0
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	df 91       	pop	r29
    3834:	cf 91       	pop	r28
    3836:	1f 91       	pop	r17
    3838:	0f 91       	pop	r16
    383a:	08 95       	ret

0000383c <_reply2return_code>:
    383c:	af 92       	push	r10
    383e:	bf 92       	push	r11
    3840:	cf 92       	push	r12
    3842:	df 92       	push	r13
    3844:	ef 92       	push	r14
    3846:	ff 92       	push	r15
    3848:	0f 93       	push	r16
    384a:	1f 93       	push	r17
    384c:	cf 93       	push	r28
    384e:	df 93       	push	r29
    3850:	6c 01       	movw	r12, r24
    3852:	fc 01       	movw	r30, r24
    3854:	01 90       	ld	r0, Z+
    3856:	00 20       	and	r0, r0
    3858:	e9 f7       	brne	.-6      	; 0x3854 <_reply2return_code+0x18>
    385a:	31 97       	sbiw	r30, 0x01	; 1
    385c:	7f 01       	movw	r14, r30
    385e:	e8 1a       	sub	r14, r24
    3860:	f9 0a       	sbc	r15, r25
    3862:	05 ea       	ldi	r16, 0xA5	; 165
    3864:	17 e0       	ldi	r17, 0x07	; 7
    3866:	c0 e0       	ldi	r28, 0x00	; 0
    3868:	d0 e0       	ldi	r29, 0x00	; 0
    386a:	f8 01       	movw	r30, r16
    386c:	60 81       	ld	r22, Z
    386e:	71 81       	ldd	r23, Z+1	; 0x01
    3870:	a7 01       	movw	r20, r14
    3872:	c6 01       	movw	r24, r12
    3874:	0e 94 03 27 	call	0x4e06	; 0x4e06 <strncasecmp>
    3878:	89 2b       	or	r24, r25
    387a:	49 f4       	brne	.+18     	; 0x388e <_reply2return_code+0x52>
    387c:	fe 01       	movw	r30, r28
    387e:	ee 0f       	add	r30, r30
    3880:	ff 1f       	adc	r31, r31
    3882:	ec 0f       	add	r30, r28
    3884:	fd 1f       	adc	r31, r29
    3886:	ec 55       	subi	r30, 0x5C	; 92
    3888:	f8 4f       	sbci	r31, 0xF8	; 248
    388a:	80 81       	ld	r24, Z
    388c:	07 c0       	rjmp	.+14     	; 0x389c <_reply2return_code+0x60>
    388e:	21 96       	adiw	r28, 0x01	; 1
    3890:	0d 5f       	subi	r16, 0xFD	; 253
    3892:	1f 4f       	sbci	r17, 0xFF	; 255
    3894:	c1 31       	cpi	r28, 0x11	; 17
    3896:	d1 05       	cpc	r29, r1
    3898:	41 f7       	brne	.-48     	; 0x386a <_reply2return_code+0x2e>
    389a:	80 e1       	ldi	r24, 0x10	; 16
    389c:	df 91       	pop	r29
    389e:	cf 91       	pop	r28
    38a0:	1f 91       	pop	r17
    38a2:	0f 91       	pop	r16
    38a4:	ff 90       	pop	r15
    38a6:	ef 90       	pop	r14
    38a8:	df 90       	pop	r13
    38aa:	cf 90       	pop	r12
    38ac:	bf 90       	pop	r11
    38ae:	af 90       	pop	r10
    38b0:	08 95       	ret

000038b2 <_upload_message_rc>:
    38b2:	6c df       	rcall	.-296    	; 0x378c <_upload_message>
    38b4:	c3 cf       	rjmp	.-122    	; 0x383c <_reply2return_code>
    38b6:	08 95       	ret

000038b8 <lora_driver_flush_buffers>:
    38b8:	80 91 f0 08 	lds	r24, 0x08F0	; 0x8008f0 <_reply_buffer_handle>
    38bc:	90 91 f1 08 	lds	r25, 0x08F1	; 0x8008f1 <_reply_buffer_handle+0x1>
    38c0:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <xStreamBufferReset>
    38c4:	08 95       	ret

000038c6 <lora_driver_create>:
    38c6:	8f 92       	push	r8
    38c8:	9f 92       	push	r9
    38ca:	af 92       	push	r10
    38cc:	cf 92       	push	r12
    38ce:	ef 92       	push	r14
    38d0:	0f 93       	push	r16
    38d2:	cf 93       	push	r28
    38d4:	c8 2f       	mov	r28, r24
    38d6:	41 e0       	ldi	r20, 0x01	; 1
    38d8:	60 e0       	ldi	r22, 0x00	; 0
    38da:	70 e0       	ldi	r23, 0x00	; 0
    38dc:	88 ec       	ldi	r24, 0xC8	; 200
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	0e 94 8c 0b 	call	0x1718	; 0x1718 <xStreamBufferGenericCreate>
    38e4:	90 93 f1 08 	sts	0x08F1, r25	; 0x8008f1 <_reply_buffer_handle+0x1>
    38e8:	80 93 f0 08 	sts	0x08F0, r24	; 0x8008f0 <_reply_buffer_handle>
    38ec:	0f 2e       	mov	r0, r31
    38ee:	f0 e8       	ldi	r31, 0x80	; 128
    38f0:	8f 2e       	mov	r8, r31
    38f2:	fb e1       	ldi	r31, 0x1B	; 27
    38f4:	9f 2e       	mov	r9, r31
    38f6:	f0 2d       	mov	r31, r0
    38f8:	68 94       	set
    38fa:	aa 24       	eor	r10, r10
    38fc:	a6 f8       	bld	r10, 6
    38fe:	68 94       	set
    3900:	cc 24       	eor	r12, r12
    3902:	c6 f8       	bld	r12, 6
    3904:	e1 2c       	mov	r14, r1
    3906:	00 e0       	ldi	r16, 0x00	; 0
    3908:	23 e0       	ldi	r18, 0x03	; 3
    390a:	40 e0       	ldi	r20, 0x00	; 0
    390c:	51 ee       	ldi	r21, 0xE1	; 225
    390e:	60 e0       	ldi	r22, 0x00	; 0
    3910:	70 e0       	ldi	r23, 0x00	; 0
    3912:	8c 2f       	mov	r24, r28
    3914:	5c d9       	rcall	.-3400   	; 0x2bce <serial_new_instance>
    3916:	90 93 f3 08 	sts	0x08F3, r25	; 0x8008f3 <_rn2483_serial+0x1>
    391a:	80 93 f2 08 	sts	0x08F2, r24	; 0x8008f2 <_rn2483_serial>
    391e:	e0 91 44 0a 	lds	r30, 0x0A44	; 0x800a44 <register_access+0x8>
    3922:	f0 91 45 0a 	lds	r31, 0x0A45	; 0x800a45 <register_access+0x9>
    3926:	64 e0       	ldi	r22, 0x04	; 4
    3928:	87 e0       	ldi	r24, 0x07	; 7
    392a:	91 e0       	ldi	r25, 0x01	; 1
    392c:	19 95       	eicall
    392e:	cf 91       	pop	r28
    3930:	0f 91       	pop	r16
    3932:	ef 90       	pop	r14
    3934:	cf 90       	pop	r12
    3936:	af 90       	pop	r10
    3938:	9f 90       	pop	r9
    393a:	8f 90       	pop	r8
    393c:	08 95       	ret

0000393e <lora_driver_reset_rn2483>:
    393e:	88 23       	and	r24, r24
    3940:	49 f0       	breq	.+18     	; 0x3954 <lora_driver_reset_rn2483+0x16>
    3942:	e0 91 4e 0a 	lds	r30, 0x0A4E	; 0x800a4e <register_access+0x12>
    3946:	f0 91 4f 0a 	lds	r31, 0x0A4F	; 0x800a4f <register_access+0x13>
    394a:	64 e0       	ldi	r22, 0x04	; 4
    394c:	88 e0       	ldi	r24, 0x08	; 8
    394e:	91 e0       	ldi	r25, 0x01	; 1
    3950:	19 95       	eicall
    3952:	08 95       	ret
    3954:	e0 91 44 0a 	lds	r30, 0x0A44	; 0x800a44 <register_access+0x8>
    3958:	f0 91 45 0a 	lds	r31, 0x0A45	; 0x800a45 <register_access+0x9>
    395c:	64 e0       	ldi	r22, 0x04	; 4
    395e:	88 e0       	ldi	r24, 0x08	; 8
    3960:	91 e0       	ldi	r25, 0x01	; 1
    3962:	19 95       	eicall
    3964:	08 95       	ret

00003966 <lora_driver_rn2483_factory_reset>:
    3966:	60 e0       	ldi	r22, 0x00	; 0
    3968:	70 e0       	ldi	r23, 0x00	; 0
    396a:	80 e4       	ldi	r24, 0x40	; 64
    396c:	95 e0       	ldi	r25, 0x05	; 5
    396e:	0e df       	rcall	.-484    	; 0x378c <_upload_message>
    3970:	e9 e7       	ldi	r30, 0x79	; 121
    3972:	f9 e0       	ldi	r31, 0x09	; 9
    3974:	01 90       	ld	r0, Z+
    3976:	00 20       	and	r0, r0
    3978:	e9 f7       	brne	.-6      	; 0x3974 <lora_driver_rn2483_factory_reset+0xe>
    397a:	31 97       	sbiw	r30, 0x01	; 1
    397c:	e9 57       	subi	r30, 0x79	; 121
    397e:	f9 40       	sbci	r31, 0x09	; 9
    3980:	81 e0       	ldi	r24, 0x01	; 1
    3982:	75 97       	sbiw	r30, 0x15	; 21
    3984:	08 f0       	brcs	.+2      	; 0x3988 <lora_driver_rn2483_factory_reset+0x22>
    3986:	80 e0       	ldi	r24, 0x00	; 0
    3988:	08 95       	ret

0000398a <lora_driver_get_rn2483_hweui>:
    398a:	cf 93       	push	r28
    398c:	df 93       	push	r29
    398e:	ec 01       	movw	r28, r24
    3990:	60 e0       	ldi	r22, 0x00	; 0
    3992:	70 e0       	ldi	r23, 0x00	; 0
    3994:	81 e5       	ldi	r24, 0x51	; 81
    3996:	95 e0       	ldi	r25, 0x05	; 5
    3998:	f9 de       	rcall	.-526    	; 0x378c <_upload_message>
    399a:	e9 e7       	ldi	r30, 0x79	; 121
    399c:	f9 e0       	ldi	r31, 0x09	; 9
    399e:	01 90       	ld	r0, Z+
    39a0:	00 20       	and	r0, r0
    39a2:	e9 f7       	brne	.-6      	; 0x399e <lora_driver_get_rn2483_hweui+0x14>
    39a4:	ea 58       	subi	r30, 0x8A	; 138
    39a6:	f9 40       	sbci	r31, 0x09	; 9
    39a8:	39 f4       	brne	.+14     	; 0x39b8 <lora_driver_get_rn2483_hweui+0x2e>
    39aa:	69 e7       	ldi	r22, 0x79	; 121
    39ac:	79 e0       	ldi	r23, 0x09	; 9
    39ae:	ce 01       	movw	r24, r28
    39b0:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <strcpy>
    39b4:	80 e0       	ldi	r24, 0x00	; 0
    39b6:	02 c0       	rjmp	.+4      	; 0x39bc <lora_driver_get_rn2483_hweui+0x32>
    39b8:	18 82       	st	Y, r1
    39ba:	81 e0       	ldi	r24, 0x01	; 1
    39bc:	df 91       	pop	r29
    39be:	cf 91       	pop	r28
    39c0:	08 95       	ret

000039c2 <lora_driver_set_device_identifier>:
    39c2:	fc 01       	movw	r30, r24
    39c4:	01 90       	ld	r0, Z+
    39c6:	00 20       	and	r0, r0
    39c8:	e9 f7       	brne	.-6      	; 0x39c4 <lora_driver_set_device_identifier+0x2>
    39ca:	9f 01       	movw	r18, r30
    39cc:	21 51       	subi	r18, 0x11	; 17
    39ce:	31 09       	sbc	r19, r1
    39d0:	28 17       	cp	r18, r24
    39d2:	39 07       	cpc	r19, r25
    39d4:	29 f4       	brne	.+10     	; 0x39e0 <lora_driver_set_device_identifier+0x1e>
    39d6:	bc 01       	movw	r22, r24
    39d8:	8f e7       	ldi	r24, 0x7F	; 127
    39da:	95 e0       	ldi	r25, 0x05	; 5
    39dc:	6a cf       	rjmp	.-300    	; 0x38b2 <_upload_message_rc>
    39de:	08 95       	ret
    39e0:	89 e0       	ldi	r24, 0x09	; 9
    39e2:	08 95       	ret

000039e4 <lora_driver_set_application_identifier>:
    39e4:	fc 01       	movw	r30, r24
    39e6:	01 90       	ld	r0, Z+
    39e8:	00 20       	and	r0, r0
    39ea:	e9 f7       	brne	.-6      	; 0x39e6 <lora_driver_set_application_identifier+0x2>
    39ec:	9f 01       	movw	r18, r30
    39ee:	21 51       	subi	r18, 0x11	; 17
    39f0:	31 09       	sbc	r19, r1
    39f2:	28 17       	cp	r18, r24
    39f4:	39 07       	cpc	r19, r25
    39f6:	29 f4       	brne	.+10     	; 0x3a02 <lora_driver_set_application_identifier+0x1e>
    39f8:	bc 01       	movw	r22, r24
    39fa:	8e e8       	ldi	r24, 0x8E	; 142
    39fc:	95 e0       	ldi	r25, 0x05	; 5
    39fe:	59 cf       	rjmp	.-334    	; 0x38b2 <_upload_message_rc>
    3a00:	08 95       	ret
    3a02:	89 e0       	ldi	r24, 0x09	; 9
    3a04:	08 95       	ret

00003a06 <lora_driver_set_application_key>:
    3a06:	fc 01       	movw	r30, r24
    3a08:	01 90       	ld	r0, Z+
    3a0a:	00 20       	and	r0, r0
    3a0c:	e9 f7       	brne	.-6      	; 0x3a08 <lora_driver_set_application_key+0x2>
    3a0e:	9f 01       	movw	r18, r30
    3a10:	21 52       	subi	r18, 0x21	; 33
    3a12:	31 09       	sbc	r19, r1
    3a14:	28 17       	cp	r18, r24
    3a16:	39 07       	cpc	r19, r25
    3a18:	29 f4       	brne	.+10     	; 0x3a24 <lora_driver_set_application_key+0x1e>
    3a1a:	bc 01       	movw	r22, r24
    3a1c:	8d e9       	ldi	r24, 0x9D	; 157
    3a1e:	95 e0       	ldi	r25, 0x05	; 5
    3a20:	48 cf       	rjmp	.-368    	; 0x38b2 <_upload_message_rc>
    3a22:	08 95       	ret
    3a24:	89 e0       	ldi	r24, 0x09	; 9
    3a26:	08 95       	ret

00003a28 <lora_driver_save_mac>:
    3a28:	60 e0       	ldi	r22, 0x00	; 0
    3a2a:	70 e0       	ldi	r23, 0x00	; 0
    3a2c:	8c ed       	ldi	r24, 0xDC	; 220
    3a2e:	95 e0       	ldi	r25, 0x05	; 5
    3a30:	40 cf       	rjmp	.-384    	; 0x38b2 <_upload_message_rc>
    3a32:	08 95       	ret

00003a34 <lora_driver_join>:
    3a34:	e8 2f       	mov	r30, r24
    3a36:	f0 e0       	ldi	r31, 0x00	; 0
    3a38:	ee 0f       	add	r30, r30
    3a3a:	ff 1f       	adc	r31, r31
    3a3c:	e0 56       	subi	r30, 0x60	; 96
    3a3e:	f8 4f       	sbci	r31, 0xF8	; 248
    3a40:	60 81       	ld	r22, Z
    3a42:	71 81       	ldd	r23, Z+1	; 0x01
    3a44:	85 ee       	ldi	r24, 0xE5	; 229
    3a46:	95 e0       	ldi	r25, 0x05	; 5
    3a48:	34 df       	rcall	.-408    	; 0x38b2 <_upload_message_rc>
    3a4a:	81 11       	cpse	r24, r1
    3a4c:	12 c0       	rjmp	.+36     	; 0x3a72 <lora_driver_join+0x3e>
    3a4e:	28 e2       	ldi	r18, 0x28	; 40
    3a50:	35 e0       	ldi	r19, 0x05	; 5
    3a52:	4d e2       	ldi	r20, 0x2D	; 45
    3a54:	50 e0       	ldi	r21, 0x00	; 0
    3a56:	69 e7       	ldi	r22, 0x79	; 121
    3a58:	79 e0       	ldi	r23, 0x09	; 9
    3a5a:	80 91 f0 08 	lds	r24, 0x08F0	; 0x8008f0 <_reply_buffer_handle>
    3a5e:	90 91 f1 08 	lds	r25, 0x08F1	; 0x8008f1 <_reply_buffer_handle+0x1>
    3a62:	0e 94 39 0c 	call	0x1872	; 0x1872 <xStreamBufferReceive>
    3a66:	88 23       	and	r24, r24
    3a68:	21 f0       	breq	.+8      	; 0x3a72 <lora_driver_join+0x3e>
    3a6a:	89 e7       	ldi	r24, 0x79	; 121
    3a6c:	99 e0       	ldi	r25, 0x09	; 9
    3a6e:	e6 ce       	rjmp	.-564    	; 0x383c <_reply2return_code>
    3a70:	08 95       	ret
    3a72:	89 e7       	ldi	r24, 0x79	; 121
    3a74:	99 e0       	ldi	r25, 0x09	; 9
    3a76:	e2 ce       	rjmp	.-572    	; 0x383c <_reply2return_code>
    3a78:	08 95       	ret

00003a7a <lora_driver_sent_upload_message>:
    3a7a:	cf 93       	push	r28
    3a7c:	df 93       	push	r29
    3a7e:	1f 92       	push	r1
    3a80:	cd b7       	in	r28, 0x3d	; 61
    3a82:	de b7       	in	r29, 0x3e	; 62
    3a84:	db 01       	movw	r26, r22
    3a86:	11 96       	adiw	r26, 0x01	; 1
    3a88:	9c 91       	ld	r25, X
    3a8a:	11 97       	sbiw	r26, 0x01	; 1
    3a8c:	95 31       	cpi	r25, 0x15	; 21
    3a8e:	08 f0       	brcs	.+2      	; 0x3a92 <lora_driver_sent_upload_message+0x18>
    3a90:	87 c0       	rjmp	.+270    	; 0x3ba0 <lora_driver_sent_upload_message+0x126>
    3a92:	99 23       	and	r25, r25
    3a94:	81 f1       	breq	.+96     	; 0x3af6 <lora_driver_sent_upload_message+0x7c>
    3a96:	60 e0       	ldi	r22, 0x00	; 0
    3a98:	70 e0       	ldi	r23, 0x00	; 0
    3a9a:	27 2f       	mov	r18, r23
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	46 2f       	mov	r20, r22
    3aa0:	50 e0       	ldi	r21, 0x00	; 0
    3aa2:	fd 01       	movw	r30, r26
    3aa4:	e4 0f       	add	r30, r20
    3aa6:	f5 1f       	adc	r31, r21
    3aa8:	92 81       	ldd	r25, Z+2	; 0x02
    3aaa:	92 95       	swap	r25
    3aac:	9f 70       	andi	r25, 0x0F	; 15
    3aae:	9a 30       	cpi	r25, 0x0A	; 10
    3ab0:	10 f0       	brcs	.+4      	; 0x3ab6 <lora_driver_sent_upload_message+0x3c>
    3ab2:	99 5c       	subi	r25, 0xC9	; 201
    3ab4:	01 c0       	rjmp	.+2      	; 0x3ab8 <lora_driver_sent_upload_message+0x3e>
    3ab6:	90 5d       	subi	r25, 0xD0	; 208
    3ab8:	f9 01       	movw	r30, r18
    3aba:	e6 5f       	subi	r30, 0xF6	; 246
    3abc:	f6 4f       	sbci	r31, 0xF6	; 246
    3abe:	90 83       	st	Z, r25
    3ac0:	2f 5f       	subi	r18, 0xFF	; 255
    3ac2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ac4:	fd 01       	movw	r30, r26
    3ac6:	e4 0f       	add	r30, r20
    3ac8:	f5 1f       	adc	r31, r21
    3aca:	92 81       	ldd	r25, Z+2	; 0x02
    3acc:	9f 70       	andi	r25, 0x0F	; 15
    3ace:	49 2f       	mov	r20, r25
    3ad0:	50 e0       	ldi	r21, 0x00	; 0
    3ad2:	4a 30       	cpi	r20, 0x0A	; 10
    3ad4:	51 05       	cpc	r21, r1
    3ad6:	14 f0       	brlt	.+4      	; 0x3adc <lora_driver_sent_upload_message+0x62>
    3ad8:	99 5c       	subi	r25, 0xC9	; 201
    3ada:	01 c0       	rjmp	.+2      	; 0x3ade <lora_driver_sent_upload_message+0x64>
    3adc:	90 5d       	subi	r25, 0xD0	; 208
    3ade:	f9 01       	movw	r30, r18
    3ae0:	e6 5f       	subi	r30, 0xF6	; 246
    3ae2:	f6 4f       	sbci	r31, 0xF6	; 246
    3ae4:	90 83       	st	Z, r25
    3ae6:	7e 5f       	subi	r23, 0xFE	; 254
    3ae8:	6f 5f       	subi	r22, 0xFF	; 255
    3aea:	11 96       	adiw	r26, 0x01	; 1
    3aec:	9c 91       	ld	r25, X
    3aee:	11 97       	sbiw	r26, 0x01	; 1
    3af0:	69 17       	cp	r22, r25
    3af2:	98 f2       	brcs	.-90     	; 0x3a9a <lora_driver_sent_upload_message+0x20>
    3af4:	01 c0       	rjmp	.+2      	; 0x3af8 <lora_driver_sent_upload_message+0x7e>
    3af6:	70 e0       	ldi	r23, 0x00	; 0
    3af8:	e7 2f       	mov	r30, r23
    3afa:	f0 e0       	ldi	r31, 0x00	; 0
    3afc:	e6 5f       	subi	r30, 0xF6	; 246
    3afe:	f6 4f       	sbci	r31, 0xF6	; 246
    3b00:	10 82       	st	Z, r1
    3b02:	4c 91       	ld	r20, X
    3b04:	81 11       	cpse	r24, r1
    3b06:	03 c0       	rjmp	.+6      	; 0x3b0e <lora_driver_sent_upload_message+0x94>
    3b08:	8e ee       	ldi	r24, 0xEE	; 238
    3b0a:	95 e0       	ldi	r25, 0x05	; 5
    3b0c:	02 c0       	rjmp	.+4      	; 0x3b12 <lora_driver_sent_upload_message+0x98>
    3b0e:	80 ef       	ldi	r24, 0xF0	; 240
    3b10:	95 e0       	ldi	r25, 0x05	; 5
    3b12:	2a e0       	ldi	r18, 0x0A	; 10
    3b14:	39 e0       	ldi	r19, 0x09	; 9
    3b16:	3f 93       	push	r19
    3b18:	2f 93       	push	r18
    3b1a:	1f 92       	push	r1
    3b1c:	4f 93       	push	r20
    3b1e:	9f 93       	push	r25
    3b20:	8f 93       	push	r24
    3b22:	84 ef       	ldi	r24, 0xF4	; 244
    3b24:	95 e0       	ldi	r25, 0x05	; 5
    3b26:	9f 93       	push	r25
    3b28:	8f 93       	push	r24
    3b2a:	8c e4       	ldi	r24, 0x4C	; 76
    3b2c:	99 e0       	ldi	r25, 0x09	; 9
    3b2e:	9f 93       	push	r25
    3b30:	8f 93       	push	r24
    3b32:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <sprintf>
    3b36:	60 e0       	ldi	r22, 0x00	; 0
    3b38:	70 e0       	ldi	r23, 0x00	; 0
    3b3a:	8c e4       	ldi	r24, 0x4C	; 76
    3b3c:	99 e0       	ldi	r25, 0x09	; 9
    3b3e:	b9 de       	rcall	.-654    	; 0x38b2 <_upload_message_rc>
    3b40:	0f b6       	in	r0, 0x3f	; 63
    3b42:	f8 94       	cli
    3b44:	de bf       	out	0x3e, r29	; 62
    3b46:	0f be       	out	0x3f, r0	; 63
    3b48:	cd bf       	out	0x3d, r28	; 61
    3b4a:	8e 30       	cpi	r24, 0x0E	; 14
    3b4c:	51 f5       	brne	.+84     	; 0x3ba2 <lora_driver_sent_upload_message+0x128>
    3b4e:	87 e0       	ldi	r24, 0x07	; 7
    3b50:	89 83       	std	Y+1, r24	; 0x01
    3b52:	be 01       	movw	r22, r28
    3b54:	6f 5f       	subi	r22, 0xFF	; 255
    3b56:	7f 4f       	sbci	r23, 0xFF	; 255
    3b58:	89 e7       	ldi	r24, 0x79	; 121
    3b5a:	99 e0       	ldi	r25, 0x09	; 9
    3b5c:	3c d1       	rcall	.+632    	; 0x3dd6 <decode_port_no>
    3b5e:	80 93 f4 08 	sts	0x08F4, r24	; 0x8008f4 <_downlink_payload>
    3b62:	e9 81       	ldd	r30, Y+1	; 0x01
    3b64:	f0 e0       	ldi	r31, 0x00	; 0
    3b66:	e7 58       	subi	r30, 0x87	; 135
    3b68:	f6 4f       	sbci	r31, 0xF6	; 246
    3b6a:	df 01       	movw	r26, r30
    3b6c:	0d 90       	ld	r0, X+
    3b6e:	00 20       	and	r0, r0
    3b70:	e9 f7       	brne	.-6      	; 0x3b6c <lora_driver_sent_upload_message+0xf2>
    3b72:	11 97       	sbiw	r26, 0x01	; 1
    3b74:	ae 1b       	sub	r26, r30
    3b76:	bf 0b       	sbc	r27, r31
    3b78:	aa 23       	and	r26, r26
    3b7a:	81 f0       	breq	.+32     	; 0x3b9c <lora_driver_sent_upload_message+0x122>
    3b7c:	bb 27       	eor	r27, r27
    3b7e:	11 97       	sbiw	r26, 0x01	; 1
    3b80:	cd 01       	movw	r24, r26
    3b82:	0a f4       	brpl	.+2      	; 0x3b86 <lora_driver_sent_upload_message+0x10c>
    3b84:	01 96       	adiw	r24, 0x01	; 1
    3b86:	95 95       	asr	r25
    3b88:	87 95       	ror	r24
    3b8a:	80 93 f5 08 	sts	0x08F5, r24	; 0x8008f5 <_downlink_payload+0x1>
    3b8e:	af 01       	movw	r20, r30
    3b90:	4f 5f       	subi	r20, 0xFF	; 255
    3b92:	5f 4f       	sbci	r21, 0xFF	; 255
    3b94:	64 e1       	ldi	r22, 0x14	; 20
    3b96:	86 ef       	ldi	r24, 0xF6	; 246
    3b98:	98 e0       	ldi	r25, 0x08	; 8
    3b9a:	49 d1       	rcall	.+658    	; 0x3e2e <decode_hexadecimal_string_bytes>
    3b9c:	8e e0       	ldi	r24, 0x0E	; 14
    3b9e:	01 c0       	rjmp	.+2      	; 0x3ba2 <lora_driver_sent_upload_message+0x128>
    3ba0:	84 e1       	ldi	r24, 0x14	; 20
    3ba2:	0f 90       	pop	r0
    3ba4:	df 91       	pop	r29
    3ba6:	cf 91       	pop	r28
    3ba8:	08 95       	ret

00003baa <lora_driver_set_adaptive_data_rate>:
    3baa:	81 30       	cpi	r24, 0x01	; 1
    3bac:	19 f0       	breq	.+6      	; 0x3bb4 <lora_driver_set_adaptive_data_rate+0xa>
    3bae:	64 e0       	ldi	r22, 0x04	; 4
    3bb0:	76 e0       	ldi	r23, 0x06	; 6
    3bb2:	02 c0       	rjmp	.+4      	; 0x3bb8 <lora_driver_set_adaptive_data_rate+0xe>
    3bb4:	64 ec       	ldi	r22, 0xC4	; 196
    3bb6:	76 e0       	ldi	r23, 0x06	; 6
    3bb8:	88 e0       	ldi	r24, 0x08	; 8
    3bba:	96 e0       	ldi	r25, 0x06	; 6
    3bbc:	7a ce       	rjmp	.-780    	; 0x38b2 <_upload_message_rc>
    3bbe:	08 95       	ret

00003bc0 <lora_driver_configure_to_eu868>:
    3bc0:	2f 92       	push	r2
    3bc2:	3f 92       	push	r3
    3bc4:	4f 92       	push	r4
    3bc6:	5f 92       	push	r5
    3bc8:	6f 92       	push	r6
    3bca:	7f 92       	push	r7
    3bcc:	8f 92       	push	r8
    3bce:	9f 92       	push	r9
    3bd0:	af 92       	push	r10
    3bd2:	bf 92       	push	r11
    3bd4:	cf 92       	push	r12
    3bd6:	df 92       	push	r13
    3bd8:	ef 92       	push	r14
    3bda:	ff 92       	push	r15
    3bdc:	0f 93       	push	r16
    3bde:	1f 93       	push	r17
    3be0:	cf 93       	push	r28
    3be2:	df 93       	push	r29
    3be4:	cd b7       	in	r28, 0x3d	; 61
    3be6:	de b7       	in	r29, 0x3e	; 62
    3be8:	a0 97       	sbiw	r28, 0x20	; 32
    3bea:	0f b6       	in	r0, 0x3f	; 63
    3bec:	f8 94       	cli
    3bee:	de bf       	out	0x3e, r29	; 62
    3bf0:	0f be       	out	0x3f, r0	; 63
    3bf2:	cd bf       	out	0x3d, r28	; 61
    3bf4:	6d e4       	ldi	r22, 0x4D	; 77
    3bf6:	76 e0       	ldi	r23, 0x06	; 6
    3bf8:	89 e5       	ldi	r24, 0x59	; 89
    3bfa:	96 e0       	ldi	r25, 0x06	; 6
    3bfc:	c7 dd       	rcall	.-1138   	; 0x378c <_upload_message>
    3bfe:	1e de       	rcall	.-964    	; 0x383c <_reply2return_code>
    3c00:	81 11       	cpse	r24, r1
    3c02:	a3 c0       	rjmp	.+326    	; 0x3d4a <lora_driver_configure_to_eu868+0x18a>
    3c04:	80 e2       	ldi	r24, 0x20	; 32
    3c06:	e1 e2       	ldi	r30, 0x21	; 33
    3c08:	f2 e0       	ldi	r31, 0x02	; 2
    3c0a:	de 01       	movw	r26, r28
    3c0c:	11 96       	adiw	r26, 0x01	; 1
    3c0e:	01 90       	ld	r0, Z+
    3c10:	0d 92       	st	X+, r0
    3c12:	8a 95       	dec	r24
    3c14:	e1 f7       	brne	.-8      	; 0x3c0e <lora_driver_configure_to_eu868+0x4e>
    3c16:	9e 01       	movw	r18, r28
    3c18:	2f 5f       	subi	r18, 0xFF	; 255
    3c1a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c1c:	69 01       	movw	r12, r18
    3c1e:	e1 2c       	mov	r14, r1
    3c20:	f1 2c       	mov	r15, r1
    3c22:	0f 2e       	mov	r0, r31
    3c24:	f5 e6       	ldi	r31, 0x65	; 101
    3c26:	af 2e       	mov	r10, r31
    3c28:	f6 e0       	ldi	r31, 0x06	; 6
    3c2a:	bf 2e       	mov	r11, r31
    3c2c:	f0 2d       	mov	r31, r0
    3c2e:	0c e4       	ldi	r16, 0x4C	; 76
    3c30:	19 e0       	ldi	r17, 0x09	; 9
    3c32:	0f 2e       	mov	r0, r31
    3c34:	fe e7       	ldi	r31, 0x7E	; 126
    3c36:	4f 2e       	mov	r4, r31
    3c38:	f6 e0       	ldi	r31, 0x06	; 6
    3c3a:	5f 2e       	mov	r5, r31
    3c3c:	f0 2d       	mov	r31, r0
    3c3e:	0f 2e       	mov	r0, r31
    3c40:	f5 e9       	ldi	r31, 0x95	; 149
    3c42:	8f 2e       	mov	r8, r31
    3c44:	f6 e0       	ldi	r31, 0x06	; 6
    3c46:	9f 2e       	mov	r9, r31
    3c48:	f0 2d       	mov	r31, r0
    3c4a:	0f 2e       	mov	r0, r31
    3c4c:	ff ea       	ldi	r31, 0xAF	; 175
    3c4e:	6f 2e       	mov	r6, r31
    3c50:	f6 e0       	ldi	r31, 0x06	; 6
    3c52:	7f 2e       	mov	r7, r31
    3c54:	f0 2d       	mov	r31, r0
    3c56:	3e 2c       	mov	r3, r14
    3c58:	2f 2c       	mov	r2, r15
    3c5a:	ff 92       	push	r15
    3c5c:	ef 92       	push	r14
    3c5e:	bf 92       	push	r11
    3c60:	af 92       	push	r10
    3c62:	1f 93       	push	r17
    3c64:	0f 93       	push	r16
    3c66:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <sprintf>
    3c6a:	60 e0       	ldi	r22, 0x00	; 0
    3c6c:	70 e0       	ldi	r23, 0x00	; 0
    3c6e:	c8 01       	movw	r24, r16
    3c70:	8d dd       	rcall	.-1254   	; 0x378c <_upload_message>
    3c72:	e4 dd       	rcall	.-1080   	; 0x383c <_reply2return_code>
    3c74:	0f 90       	pop	r0
    3c76:	0f 90       	pop	r0
    3c78:	0f 90       	pop	r0
    3c7a:	0f 90       	pop	r0
    3c7c:	0f 90       	pop	r0
    3c7e:	0f 90       	pop	r0
    3c80:	81 11       	cpse	r24, r1
    3c82:	63 c0       	rjmp	.+198    	; 0x3d4a <lora_driver_configure_to_eu868+0x18a>
    3c84:	32 e0       	ldi	r19, 0x02	; 2
    3c86:	3e 15       	cp	r19, r14
    3c88:	e8 f4       	brcc	.+58     	; 0x3cc4 <lora_driver_configure_to_eu868+0x104>
    3c8a:	f6 01       	movw	r30, r12
    3c8c:	83 81       	ldd	r24, Z+3	; 0x03
    3c8e:	8f 93       	push	r24
    3c90:	82 81       	ldd	r24, Z+2	; 0x02
    3c92:	8f 93       	push	r24
    3c94:	81 81       	ldd	r24, Z+1	; 0x01
    3c96:	8f 93       	push	r24
    3c98:	80 81       	ld	r24, Z
    3c9a:	8f 93       	push	r24
    3c9c:	ff 92       	push	r15
    3c9e:	ef 92       	push	r14
    3ca0:	5f 92       	push	r5
    3ca2:	4f 92       	push	r4
    3ca4:	1f 93       	push	r17
    3ca6:	0f 93       	push	r16
    3ca8:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <sprintf>
    3cac:	60 e0       	ldi	r22, 0x00	; 0
    3cae:	70 e0       	ldi	r23, 0x00	; 0
    3cb0:	c8 01       	movw	r24, r16
    3cb2:	6c dd       	rcall	.-1320   	; 0x378c <_upload_message>
    3cb4:	c3 dd       	rcall	.-1146   	; 0x383c <_reply2return_code>
    3cb6:	0f b6       	in	r0, 0x3f	; 63
    3cb8:	f8 94       	cli
    3cba:	de bf       	out	0x3e, r29	; 62
    3cbc:	0f be       	out	0x3f, r0	; 63
    3cbe:	cd bf       	out	0x3d, r28	; 61
    3cc0:	81 11       	cpse	r24, r1
    3cc2:	43 c0       	rjmp	.+134    	; 0x3d4a <lora_driver_configure_to_eu868+0x18a>
    3cc4:	2f 92       	push	r2
    3cc6:	3f 92       	push	r3
    3cc8:	9f 92       	push	r9
    3cca:	8f 92       	push	r8
    3ccc:	1f 93       	push	r17
    3cce:	0f 93       	push	r16
    3cd0:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <sprintf>
    3cd4:	60 e0       	ldi	r22, 0x00	; 0
    3cd6:	70 e0       	ldi	r23, 0x00	; 0
    3cd8:	c8 01       	movw	r24, r16
    3cda:	58 dd       	rcall	.-1360   	; 0x378c <_upload_message>
    3cdc:	af dd       	rcall	.-1186   	; 0x383c <_reply2return_code>
    3cde:	0f 90       	pop	r0
    3ce0:	0f 90       	pop	r0
    3ce2:	0f 90       	pop	r0
    3ce4:	0f 90       	pop	r0
    3ce6:	0f 90       	pop	r0
    3ce8:	0f 90       	pop	r0
    3cea:	81 11       	cpse	r24, r1
    3cec:	2e c0       	rjmp	.+92     	; 0x3d4a <lora_driver_configure_to_eu868+0x18a>
    3cee:	2f 92       	push	r2
    3cf0:	3f 92       	push	r3
    3cf2:	7f 92       	push	r7
    3cf4:	6f 92       	push	r6
    3cf6:	1f 93       	push	r17
    3cf8:	0f 93       	push	r16
    3cfa:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <sprintf>
    3cfe:	60 e0       	ldi	r22, 0x00	; 0
    3d00:	70 e0       	ldi	r23, 0x00	; 0
    3d02:	c8 01       	movw	r24, r16
    3d04:	43 dd       	rcall	.-1402   	; 0x378c <_upload_message>
    3d06:	9a dd       	rcall	.-1228   	; 0x383c <_reply2return_code>
    3d08:	0f 90       	pop	r0
    3d0a:	0f 90       	pop	r0
    3d0c:	0f 90       	pop	r0
    3d0e:	0f 90       	pop	r0
    3d10:	0f 90       	pop	r0
    3d12:	0f 90       	pop	r0
    3d14:	81 11       	cpse	r24, r1
    3d16:	19 c0       	rjmp	.+50     	; 0x3d4a <lora_driver_configure_to_eu868+0x18a>
    3d18:	3f ef       	ldi	r19, 0xFF	; 255
    3d1a:	e3 1a       	sub	r14, r19
    3d1c:	f3 0a       	sbc	r15, r19
    3d1e:	84 e0       	ldi	r24, 0x04	; 4
    3d20:	c8 0e       	add	r12, r24
    3d22:	d1 1c       	adc	r13, r1
    3d24:	98 e0       	ldi	r25, 0x08	; 8
    3d26:	e9 16       	cp	r14, r25
    3d28:	f1 04       	cpc	r15, r1
    3d2a:	09 f0       	breq	.+2      	; 0x3d2e <lora_driver_configure_to_eu868+0x16e>
    3d2c:	94 cf       	rjmp	.-216    	; 0x3c56 <lora_driver_configure_to_eu868+0x96>
    3d2e:	60 e0       	ldi	r22, 0x00	; 0
    3d30:	70 e0       	ldi	r23, 0x00	; 0
    3d32:	87 ec       	ldi	r24, 0xC7	; 199
    3d34:	96 e0       	ldi	r25, 0x06	; 6
    3d36:	2a dd       	rcall	.-1452   	; 0x378c <_upload_message>
    3d38:	81 dd       	rcall	.-1278   	; 0x383c <_reply2return_code>
    3d3a:	81 11       	cpse	r24, r1
    3d3c:	06 c0       	rjmp	.+12     	; 0x3d4a <lora_driver_configure_to_eu868+0x18a>
    3d3e:	60 e0       	ldi	r22, 0x00	; 0
    3d40:	70 e0       	ldi	r23, 0x00	; 0
    3d42:	88 ed       	ldi	r24, 0xD8	; 216
    3d44:	96 e0       	ldi	r25, 0x06	; 6
    3d46:	22 dd       	rcall	.-1468   	; 0x378c <_upload_message>
    3d48:	79 dd       	rcall	.-1294   	; 0x383c <_reply2return_code>
    3d4a:	a0 96       	adiw	r28, 0x20	; 32
    3d4c:	0f b6       	in	r0, 0x3f	; 63
    3d4e:	f8 94       	cli
    3d50:	de bf       	out	0x3e, r29	; 62
    3d52:	0f be       	out	0x3f, r0	; 63
    3d54:	cd bf       	out	0x3d, r28	; 61
    3d56:	df 91       	pop	r29
    3d58:	cf 91       	pop	r28
    3d5a:	1f 91       	pop	r17
    3d5c:	0f 91       	pop	r16
    3d5e:	ff 90       	pop	r15
    3d60:	ef 90       	pop	r14
    3d62:	df 90       	pop	r13
    3d64:	cf 90       	pop	r12
    3d66:	bf 90       	pop	r11
    3d68:	af 90       	pop	r10
    3d6a:	9f 90       	pop	r9
    3d6c:	8f 90       	pop	r8
    3d6e:	7f 90       	pop	r7
    3d70:	6f 90       	pop	r6
    3d72:	5f 90       	pop	r5
    3d74:	4f 90       	pop	r4
    3d76:	3f 90       	pop	r3
    3d78:	2f 90       	pop	r2
    3d7a:	08 95       	ret

00003d7c <lora_driver_set_otaa_identity>:
    3d7c:	ef 92       	push	r14
    3d7e:	ff 92       	push	r15
    3d80:	0f 93       	push	r16
    3d82:	1f 93       	push	r17
    3d84:	cf 93       	push	r28
    3d86:	df 93       	push	r29
    3d88:	ec 01       	movw	r28, r24
    3d8a:	8b 01       	movw	r16, r22
    3d8c:	7a 01       	movw	r14, r20
    3d8e:	81 e0       	ldi	r24, 0x01	; 1
    3d90:	0c df       	rcall	.-488    	; 0x3baa <lora_driver_set_adaptive_data_rate>
    3d92:	81 11       	cpse	r24, r1
    3d94:	0d c0       	rjmp	.+26     	; 0x3db0 <lora_driver_set_otaa_identity+0x34>
    3d96:	ce 01       	movw	r24, r28
    3d98:	25 de       	rcall	.-950    	; 0x39e4 <lora_driver_set_application_identifier>
    3d9a:	81 11       	cpse	r24, r1
    3d9c:	09 c0       	rjmp	.+18     	; 0x3db0 <lora_driver_set_otaa_identity+0x34>
    3d9e:	c8 01       	movw	r24, r16
    3da0:	32 de       	rcall	.-924    	; 0x3a06 <lora_driver_set_application_key>
    3da2:	81 11       	cpse	r24, r1
    3da4:	05 c0       	rjmp	.+10     	; 0x3db0 <lora_driver_set_otaa_identity+0x34>
    3da6:	c7 01       	movw	r24, r14
    3da8:	0c de       	rcall	.-1000   	; 0x39c2 <lora_driver_set_device_identifier>
    3daa:	81 11       	cpse	r24, r1
    3dac:	01 c0       	rjmp	.+2      	; 0x3db0 <lora_driver_set_otaa_identity+0x34>
    3dae:	3c de       	rcall	.-904    	; 0x3a28 <lora_driver_save_mac>
    3db0:	df 91       	pop	r29
    3db2:	cf 91       	pop	r28
    3db4:	1f 91       	pop	r17
    3db6:	0f 91       	pop	r16
    3db8:	ff 90       	pop	r15
    3dba:	ef 90       	pop	r14
    3dbc:	08 95       	ret

00003dbe <lora_driver_map_return_code_to_text>:
    3dbe:	90 e0       	ldi	r25, 0x00	; 0
    3dc0:	fc 01       	movw	r30, r24
    3dc2:	ee 0f       	add	r30, r30
    3dc4:	ff 1f       	adc	r31, r31
    3dc6:	8e 0f       	add	r24, r30
    3dc8:	9f 1f       	adc	r25, r31
    3dca:	fc 01       	movw	r30, r24
    3dcc:	ec 55       	subi	r30, 0x5C	; 92
    3dce:	f8 4f       	sbci	r31, 0xF8	; 248
    3dd0:	81 81       	ldd	r24, Z+1	; 0x01
    3dd2:	92 81       	ldd	r25, Z+2	; 0x02
    3dd4:	08 95       	ret

00003dd6 <decode_port_no>:
    3dd6:	dc 01       	movw	r26, r24
    3dd8:	00 97       	sbiw	r24, 0x00	; 0
    3dda:	29 f1       	breq	.+74     	; 0x3e26 <decode_port_no+0x50>
    3ddc:	fb 01       	movw	r30, r22
    3dde:	20 81       	ld	r18, Z
    3de0:	fc 01       	movw	r30, r24
    3de2:	01 90       	ld	r0, Z+
    3de4:	00 20       	and	r0, r0
    3de6:	e9 f7       	brne	.-6      	; 0x3de2 <decode_port_no+0xc>
    3de8:	31 97       	sbiw	r30, 0x01	; 1
    3dea:	e8 1b       	sub	r30, r24
    3dec:	f9 0b       	sbc	r31, r25
    3dee:	82 2f       	mov	r24, r18
    3df0:	90 e0       	ldi	r25, 0x00	; 0
    3df2:	e8 17       	cp	r30, r24
    3df4:	f9 07       	cpc	r31, r25
    3df6:	c8 f0       	brcs	.+50     	; 0x3e2a <decode_port_no+0x54>
    3df8:	80 e0       	ldi	r24, 0x00	; 0
    3dfa:	08 c0       	rjmp	.+16     	; 0x3e0c <decode_port_no+0x36>
    3dfc:	88 0f       	add	r24, r24
    3dfe:	38 2f       	mov	r19, r24
    3e00:	33 0f       	add	r19, r19
    3e02:	33 0f       	add	r19, r19
    3e04:	83 0f       	add	r24, r19
    3e06:	80 53       	subi	r24, 0x30	; 48
    3e08:	89 0f       	add	r24, r25
    3e0a:	2f 5f       	subi	r18, 0xFF	; 255
    3e0c:	fd 01       	movw	r30, r26
    3e0e:	e2 0f       	add	r30, r18
    3e10:	f1 1d       	adc	r31, r1
    3e12:	90 81       	ld	r25, Z
    3e14:	30 ed       	ldi	r19, 0xD0	; 208
    3e16:	39 0f       	add	r19, r25
    3e18:	3a 30       	cpi	r19, 0x0A	; 10
    3e1a:	10 f4       	brcc	.+4      	; 0x3e20 <decode_port_no+0x4a>
    3e1c:	91 11       	cpse	r25, r1
    3e1e:	ee cf       	rjmp	.-36     	; 0x3dfc <decode_port_no+0x26>
    3e20:	fb 01       	movw	r30, r22
    3e22:	20 83       	st	Z, r18
    3e24:	08 95       	ret
    3e26:	80 e0       	ldi	r24, 0x00	; 0
    3e28:	08 95       	ret
    3e2a:	80 e0       	ldi	r24, 0x00	; 0
    3e2c:	08 95       	ret

00003e2e <decode_hexadecimal_string_bytes>:
    3e2e:	0f 93       	push	r16
    3e30:	1f 93       	push	r17
    3e32:	cf 93       	push	r28
    3e34:	df 93       	push	r29
    3e36:	dc 01       	movw	r26, r24
    3e38:	ea 01       	movw	r28, r20
    3e3a:	20 97       	sbiw	r28, 0x00	; 0
    3e3c:	e1 f1       	breq	.+120    	; 0x3eb6 <decode_hexadecimal_string_bytes+0x88>
    3e3e:	fa 01       	movw	r30, r20
    3e40:	01 90       	ld	r0, Z+
    3e42:	00 20       	and	r0, r0
    3e44:	e9 f7       	brne	.-6      	; 0x3e40 <decode_hexadecimal_string_bytes+0x12>
    3e46:	31 97       	sbiw	r30, 0x01	; 1
    3e48:	e4 1b       	sub	r30, r20
    3e4a:	f5 0b       	sbc	r31, r21
    3e4c:	32 97       	sbiw	r30, 0x02	; 2
    3e4e:	10 f5       	brcc	.+68     	; 0x3e94 <decode_hexadecimal_string_bytes+0x66>
    3e50:	32 c0       	rjmp	.+100    	; 0x3eb6 <decode_hexadecimal_string_bytes+0x88>
    3e52:	8d 01       	movw	r16, r26
    3e54:	04 0f       	add	r16, r20
    3e56:	15 1f       	adc	r17, r21
    3e58:	30 e0       	ldi	r19, 0x00	; 0
    3e5a:	ae 01       	movw	r20, r28
    3e5c:	42 0f       	add	r20, r18
    3e5e:	53 1f       	adc	r21, r19
    3e60:	fa 01       	movw	r30, r20
    3e62:	90 81       	ld	r25, Z
    3e64:	91 34       	cpi	r25, 0x41	; 65
    3e66:	28 f0       	brcs	.+10     	; 0x3e72 <decode_hexadecimal_string_bytes+0x44>
    3e68:	97 53       	subi	r25, 0x37	; 55
    3e6a:	59 2f       	mov	r21, r25
    3e6c:	52 95       	swap	r21
    3e6e:	50 7f       	andi	r21, 0xF0	; 240
    3e70:	03 c0       	rjmp	.+6      	; 0x3e78 <decode_hexadecimal_string_bytes+0x4a>
    3e72:	59 2f       	mov	r21, r25
    3e74:	52 95       	swap	r21
    3e76:	50 7f       	andi	r21, 0xF0	; 240
    3e78:	2c 0f       	add	r18, r28
    3e7a:	3d 1f       	adc	r19, r29
    3e7c:	f9 01       	movw	r30, r18
    3e7e:	91 81       	ldd	r25, Z+1	; 0x01
    3e80:	91 34       	cpi	r25, 0x41	; 65
    3e82:	10 f0       	brcs	.+4      	; 0x3e88 <decode_hexadecimal_string_bytes+0x5a>
    3e84:	97 53       	subi	r25, 0x37	; 55
    3e86:	01 c0       	rjmp	.+2      	; 0x3e8a <decode_hexadecimal_string_bytes+0x5c>
    3e88:	90 53       	subi	r25, 0x30	; 48
    3e8a:	95 0f       	add	r25, r21
    3e8c:	f8 01       	movw	r30, r16
    3e8e:	90 83       	st	Z, r25
    3e90:	8f 5f       	subi	r24, 0xFF	; 255
    3e92:	01 c0       	rjmp	.+2      	; 0x3e96 <decode_hexadecimal_string_bytes+0x68>
    3e94:	80 e0       	ldi	r24, 0x00	; 0
    3e96:	28 2f       	mov	r18, r24
    3e98:	22 0f       	add	r18, r18
    3e9a:	48 2f       	mov	r20, r24
    3e9c:	50 e0       	ldi	r21, 0x00	; 0
    3e9e:	fe 01       	movw	r30, r28
    3ea0:	01 90       	ld	r0, Z+
    3ea2:	00 20       	and	r0, r0
    3ea4:	e9 f7       	brne	.-6      	; 0x3ea0 <decode_hexadecimal_string_bytes+0x72>
    3ea6:	31 97       	sbiw	r30, 0x01	; 1
    3ea8:	ec 1b       	sub	r30, r28
    3eaa:	fd 0b       	sbc	r31, r29
    3eac:	4e 17       	cp	r20, r30
    3eae:	5f 07       	cpc	r21, r31
    3eb0:	10 f4       	brcc	.+4      	; 0x3eb6 <decode_hexadecimal_string_bytes+0x88>
    3eb2:	86 13       	cpse	r24, r22
    3eb4:	ce cf       	rjmp	.-100    	; 0x3e52 <decode_hexadecimal_string_bytes+0x24>
    3eb6:	df 91       	pop	r29
    3eb8:	cf 91       	pop	r28
    3eba:	1f 91       	pop	r17
    3ebc:	0f 91       	pop	r16
    3ebe:	08 95       	ret

00003ec0 <reg_read_register>:
    3ec0:	fc 01       	movw	r30, r24
    3ec2:	80 81       	ld	r24, Z
    3ec4:	08 95       	ret

00003ec6 <reg_read_bit>:
    3ec6:	fc 01       	movw	r30, r24
    3ec8:	20 81       	ld	r18, Z
    3eca:	81 e0       	ldi	r24, 0x01	; 1
    3ecc:	90 e0       	ldi	r25, 0x00	; 0
    3ece:	02 c0       	rjmp	.+4      	; 0x3ed4 <reg_read_bit+0xe>
    3ed0:	88 0f       	add	r24, r24
    3ed2:	99 1f       	adc	r25, r25
    3ed4:	6a 95       	dec	r22
    3ed6:	e2 f7       	brpl	.-8      	; 0x3ed0 <reg_read_bit+0xa>
    3ed8:	82 23       	and	r24, r18
    3eda:	08 95       	ret

00003edc <reg_read_bits>:
    3edc:	fc 01       	movw	r30, r24
    3ede:	80 81       	ld	r24, Z
    3ee0:	86 23       	and	r24, r22
    3ee2:	08 95       	ret

00003ee4 <reg_set_register>:
    3ee4:	fc 01       	movw	r30, r24
    3ee6:	60 83       	st	Z, r22
    3ee8:	08 95       	ret

00003eea <reg_clear_register>:
    3eea:	fc 01       	movw	r30, r24
    3eec:	10 82       	st	Z, r1
    3eee:	08 95       	ret

00003ef0 <reg_set_bit>:
    3ef0:	fc 01       	movw	r30, r24
    3ef2:	40 81       	ld	r20, Z
    3ef4:	21 e0       	ldi	r18, 0x01	; 1
    3ef6:	30 e0       	ldi	r19, 0x00	; 0
    3ef8:	02 c0       	rjmp	.+4      	; 0x3efe <reg_set_bit+0xe>
    3efa:	22 0f       	add	r18, r18
    3efc:	33 1f       	adc	r19, r19
    3efe:	6a 95       	dec	r22
    3f00:	e2 f7       	brpl	.-8      	; 0x3efa <reg_set_bit+0xa>
    3f02:	24 2b       	or	r18, r20
    3f04:	20 83       	st	Z, r18
    3f06:	08 95       	ret

00003f08 <reg_set_bits>:
    3f08:	fc 01       	movw	r30, r24
    3f0a:	20 81       	ld	r18, Z
    3f0c:	62 2b       	or	r22, r18
    3f0e:	60 83       	st	Z, r22
    3f10:	08 95       	ret

00003f12 <reg_toggle_bit>:
    3f12:	fc 01       	movw	r30, r24
    3f14:	40 81       	ld	r20, Z
    3f16:	21 e0       	ldi	r18, 0x01	; 1
    3f18:	30 e0       	ldi	r19, 0x00	; 0
    3f1a:	02 c0       	rjmp	.+4      	; 0x3f20 <reg_toggle_bit+0xe>
    3f1c:	22 0f       	add	r18, r18
    3f1e:	33 1f       	adc	r19, r19
    3f20:	6a 95       	dec	r22
    3f22:	e2 f7       	brpl	.-8      	; 0x3f1c <reg_toggle_bit+0xa>
    3f24:	24 27       	eor	r18, r20
    3f26:	20 83       	st	Z, r18
    3f28:	08 95       	ret

00003f2a <reg_toggle_bits>:
    3f2a:	fc 01       	movw	r30, r24
    3f2c:	20 81       	ld	r18, Z
    3f2e:	62 27       	eor	r22, r18
    3f30:	60 83       	st	Z, r22
    3f32:	08 95       	ret

00003f34 <reg_clear_bit>:
    3f34:	fc 01       	movw	r30, r24
    3f36:	90 81       	ld	r25, Z
    3f38:	21 e0       	ldi	r18, 0x01	; 1
    3f3a:	30 e0       	ldi	r19, 0x00	; 0
    3f3c:	02 c0       	rjmp	.+4      	; 0x3f42 <reg_clear_bit+0xe>
    3f3e:	22 0f       	add	r18, r18
    3f40:	33 1f       	adc	r19, r19
    3f42:	6a 95       	dec	r22
    3f44:	e2 f7       	brpl	.-8      	; 0x3f3e <reg_clear_bit+0xa>
    3f46:	20 95       	com	r18
    3f48:	29 23       	and	r18, r25
    3f4a:	20 83       	st	Z, r18
    3f4c:	08 95       	ret

00003f4e <reg_clear_bits>:
    3f4e:	fc 01       	movw	r30, r24
    3f50:	90 81       	ld	r25, Z
    3f52:	60 95       	com	r22
    3f54:	69 23       	and	r22, r25
    3f56:	60 83       	st	Z, r22
    3f58:	08 95       	ret

00003f5a <_serial_call_back>:
    3f5a:	80 91 a9 09 	lds	r24, 0x09A9	; 0x8009a9 <crc_sum.1941>
    3f5e:	86 0f       	add	r24, r22
    3f60:	80 93 a9 09 	sts	0x09A9, r24	; 0x8009a9 <crc_sum.1941>
    3f64:	90 91 ac 09 	lds	r25, 0x09AC	; 0x8009ac <_mh_state>
    3f68:	91 30       	cpi	r25, 0x01	; 1
    3f6a:	79 f0       	breq	.+30     	; 0x3f8a <_serial_call_back+0x30>
    3f6c:	28 f0       	brcs	.+10     	; 0x3f78 <_serial_call_back+0x1e>
    3f6e:	92 30       	cpi	r25, 0x02	; 2
    3f70:	a9 f0       	breq	.+42     	; 0x3f9c <_serial_call_back+0x42>
    3f72:	93 30       	cpi	r25, 0x03	; 3
    3f74:	19 f1       	breq	.+70     	; 0x3fbc <_serial_call_back+0x62>
    3f76:	08 95       	ret
    3f78:	6f 3f       	cpi	r22, 0xFF	; 255
    3f7a:	09 f0       	breq	.+2      	; 0x3f7e <_serial_call_back+0x24>
    3f7c:	48 c0       	rjmp	.+144    	; 0x400e <_serial_call_back+0xb4>
    3f7e:	10 92 a9 09 	sts	0x09A9, r1	; 0x8009a9 <crc_sum.1941>
    3f82:	81 e0       	ldi	r24, 0x01	; 1
    3f84:	80 93 ac 09 	sts	0x09AC, r24	; 0x8009ac <_mh_state>
    3f88:	08 95       	ret
    3f8a:	66 38       	cpi	r22, 0x86	; 134
    3f8c:	09 f0       	breq	.+2      	; 0x3f90 <_serial_call_back+0x36>
    3f8e:	3f c0       	rjmp	.+126    	; 0x400e <_serial_call_back+0xb4>
    3f90:	10 92 a8 09 	sts	0x09A8, r1	; 0x8009a8 <inDex.1939>
    3f94:	82 e0       	ldi	r24, 0x02	; 2
    3f96:	80 93 ac 09 	sts	0x09AC, r24	; 0x8009ac <_mh_state>
    3f9a:	08 95       	ret
    3f9c:	e0 91 a8 09 	lds	r30, 0x09A8	; 0x8009a8 <inDex.1939>
    3fa0:	81 e0       	ldi	r24, 0x01	; 1
    3fa2:	8e 0f       	add	r24, r30
    3fa4:	80 93 a8 09 	sts	0x09A8, r24	; 0x8009a8 <inDex.1939>
    3fa8:	f0 e0       	ldi	r31, 0x00	; 0
    3faa:	ea 55       	subi	r30, 0x5A	; 90
    3fac:	f6 4f       	sbci	r31, 0xF6	; 246
    3fae:	60 83       	st	Z, r22
    3fb0:	82 30       	cpi	r24, 0x02	; 2
    3fb2:	69 f5       	brne	.+90     	; 0x400e <_serial_call_back+0xb4>
    3fb4:	83 e0       	ldi	r24, 0x03	; 3
    3fb6:	80 93 ac 09 	sts	0x09AC, r24	; 0x8009ac <_mh_state>
    3fba:	08 95       	ret
    3fbc:	90 91 a8 09 	lds	r25, 0x09A8	; 0x8009a8 <inDex.1939>
    3fc0:	21 e0       	ldi	r18, 0x01	; 1
    3fc2:	29 0f       	add	r18, r25
    3fc4:	20 93 a8 09 	sts	0x09A8, r18	; 0x8009a8 <inDex.1939>
    3fc8:	96 30       	cpi	r25, 0x06	; 6
    3fca:	09 f5       	brne	.+66     	; 0x400e <_serial_call_back+0xb4>
    3fcc:	81 11       	cpse	r24, r1
    3fce:	0e c0       	rjmp	.+28     	; 0x3fec <_serial_call_back+0x92>
    3fd0:	e6 ea       	ldi	r30, 0xA6	; 166
    3fd2:	f9 e0       	ldi	r31, 0x09	; 9
    3fd4:	80 81       	ld	r24, Z
    3fd6:	90 e0       	ldi	r25, 0x00	; 0
    3fd8:	98 2f       	mov	r25, r24
    3fda:	88 27       	eor	r24, r24
    3fdc:	21 81       	ldd	r18, Z+1	; 0x01
    3fde:	82 0f       	add	r24, r18
    3fe0:	91 1d       	adc	r25, r1
    3fe2:	90 93 ae 09 	sts	0x09AE, r25	; 0x8009ae <_ppm+0x1>
    3fe6:	80 93 ad 09 	sts	0x09AD, r24	; 0x8009ad <_ppm>
    3fea:	04 c0       	rjmp	.+8      	; 0x3ff4 <_serial_call_back+0x9a>
    3fec:	10 92 ae 09 	sts	0x09AE, r1	; 0x8009ae <_ppm+0x1>
    3ff0:	10 92 ad 09 	sts	0x09AD, r1	; 0x8009ad <_ppm>
    3ff4:	10 92 ac 09 	sts	0x09AC, r1	; 0x8009ac <_mh_state>
    3ff8:	e0 91 aa 09 	lds	r30, 0x09AA	; 0x8009aa <_app_call_back>
    3ffc:	f0 91 ab 09 	lds	r31, 0x09AB	; 0x8009ab <_app_call_back+0x1>
    4000:	30 97       	sbiw	r30, 0x00	; 0
    4002:	29 f0       	breq	.+10     	; 0x400e <_serial_call_back+0xb4>
    4004:	80 91 ad 09 	lds	r24, 0x09AD	; 0x8009ad <_ppm>
    4008:	90 91 ae 09 	lds	r25, 0x09AE	; 0x8009ae <_ppm+0x1>
    400c:	19 95       	eicall
    400e:	08 95       	ret

00004010 <mh_z19_create>:
    4010:	8f 92       	push	r8
    4012:	9f 92       	push	r9
    4014:	af 92       	push	r10
    4016:	cf 92       	push	r12
    4018:	ef 92       	push	r14
    401a:	0f 93       	push	r16
    401c:	cf 93       	push	r28
    401e:	df 93       	push	r29
    4020:	eb 01       	movw	r28, r22
    4022:	0f 2e       	mov	r0, r31
    4024:	fd ea       	ldi	r31, 0xAD	; 173
    4026:	8f 2e       	mov	r8, r31
    4028:	ff e1       	ldi	r31, 0x1F	; 31
    402a:	9f 2e       	mov	r9, r31
    402c:	f0 2d       	mov	r31, r0
    402e:	68 94       	set
    4030:	aa 24       	eor	r10, r10
    4032:	a4 f8       	bld	r10, 4
    4034:	68 94       	set
    4036:	cc 24       	eor	r12, r12
    4038:	c4 f8       	bld	r12, 4
    403a:	e1 2c       	mov	r14, r1
    403c:	00 e0       	ldi	r16, 0x00	; 0
    403e:	23 e0       	ldi	r18, 0x03	; 3
    4040:	40 e8       	ldi	r20, 0x80	; 128
    4042:	55 e2       	ldi	r21, 0x25	; 37
    4044:	60 e0       	ldi	r22, 0x00	; 0
    4046:	70 e0       	ldi	r23, 0x00	; 0
    4048:	0e 94 e7 15 	call	0x2bce	; 0x2bce <serial_new_instance>
    404c:	90 93 b0 09 	sts	0x09B0, r25	; 0x8009b0 <_serial+0x1>
    4050:	80 93 af 09 	sts	0x09AF, r24	; 0x8009af <_serial>
    4054:	d0 93 ab 09 	sts	0x09AB, r29	; 0x8009ab <_app_call_back+0x1>
    4058:	c0 93 aa 09 	sts	0x09AA, r28	; 0x8009aa <_app_call_back>
    405c:	df 91       	pop	r29
    405e:	cf 91       	pop	r28
    4060:	0f 91       	pop	r16
    4062:	ef 90       	pop	r14
    4064:	cf 90       	pop	r12
    4066:	af 90       	pop	r10
    4068:	9f 90       	pop	r9
    406a:	8f 90       	pop	r8
    406c:	08 95       	ret

0000406e <mh_z19_take_meassuring>:
    406e:	cf 93       	push	r28
    4070:	df 93       	push	r29
    4072:	cd b7       	in	r28, 0x3d	; 61
    4074:	de b7       	in	r29, 0x3e	; 62
    4076:	29 97       	sbiw	r28, 0x09	; 9
    4078:	0f b6       	in	r0, 0x3f	; 63
    407a:	f8 94       	cli
    407c:	de bf       	out	0x3e, r29	; 62
    407e:	0f be       	out	0x3f, r0	; 63
    4080:	cd bf       	out	0x3d, r28	; 61
    4082:	89 e0       	ldi	r24, 0x09	; 9
    4084:	e1 e4       	ldi	r30, 0x41	; 65
    4086:	f2 e0       	ldi	r31, 0x02	; 2
    4088:	9e 01       	movw	r18, r28
    408a:	2f 5f       	subi	r18, 0xFF	; 255
    408c:	3f 4f       	sbci	r19, 0xFF	; 255
    408e:	d9 01       	movw	r26, r18
    4090:	01 90       	ld	r0, Z+
    4092:	0d 92       	st	X+, r0
    4094:	8a 95       	dec	r24
    4096:	e1 f7       	brne	.-8      	; 0x4090 <mh_z19_take_meassuring+0x22>
    4098:	10 92 ae 09 	sts	0x09AE, r1	; 0x8009ae <_ppm+0x1>
    409c:	10 92 ad 09 	sts	0x09AD, r1	; 0x8009ad <_ppm>
    40a0:	80 91 af 09 	lds	r24, 0x09AF	; 0x8009af <_serial>
    40a4:	90 91 b0 09 	lds	r25, 0x09B0	; 0x8009b0 <_serial+0x1>
    40a8:	00 97       	sbiw	r24, 0x00	; 0
    40aa:	39 f0       	breq	.+14     	; 0x40ba <mh_z19_take_meassuring+0x4c>
    40ac:	42 2f       	mov	r20, r18
    40ae:	53 2f       	mov	r21, r19
    40b0:	69 e0       	ldi	r22, 0x09	; 9
    40b2:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <serial_send_bytes>
    40b6:	80 e0       	ldi	r24, 0x00	; 0
    40b8:	01 c0       	rjmp	.+2      	; 0x40bc <mh_z19_take_meassuring+0x4e>
    40ba:	82 e0       	ldi	r24, 0x02	; 2
    40bc:	29 96       	adiw	r28, 0x09	; 9
    40be:	0f b6       	in	r0, 0x3f	; 63
    40c0:	f8 94       	cli
    40c2:	de bf       	out	0x3e, r29	; 62
    40c4:	0f be       	out	0x3f, r0	; 63
    40c6:	cd bf       	out	0x3d, r28	; 61
    40c8:	df 91       	pop	r29
    40ca:	cf 91       	pop	r28
    40cc:	08 95       	ret

000040ce <rcServoSet>:
    40ce:	65 36       	cpi	r22, 0x65	; 101
    40d0:	0c f0       	brlt	.+2      	; 0x40d4 <rcServoSet+0x6>
    40d2:	64 e6       	ldi	r22, 0x64	; 100
    40d4:	6c 39       	cpi	r22, 0x9C	; 156
    40d6:	0c f4       	brge	.+2      	; 0x40da <rcServoSet+0xc>
    40d8:	6c e9       	ldi	r22, 0x9C	; 156
    40da:	96 ef       	ldi	r25, 0xF6	; 246
    40dc:	69 02       	muls	r22, r25
    40de:	b0 01       	movw	r22, r0
    40e0:	11 24       	eor	r1, r1
    40e2:	68 54       	subi	r22, 0x48	; 72
    40e4:	74 4f       	sbci	r23, 0xF4	; 244
    40e6:	81 11       	cpse	r24, r1
    40e8:	05 c0       	rjmp	.+10     	; 0x40f4 <rcServoSet+0x26>
    40ea:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    40ee:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    40f2:	08 95       	ret
    40f4:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    40f8:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    40fc:	08 95       	ret

000040fe <rcServoCreate>:
    40fe:	ea e0       	ldi	r30, 0x0A	; 10
    4100:	f1 e0       	ldi	r31, 0x01	; 1
    4102:	80 81       	ld	r24, Z
    4104:	88 61       	ori	r24, 0x18	; 24
    4106:	80 83       	st	Z, r24
    4108:	8f e3       	ldi	r24, 0x3F	; 63
    410a:	9c e9       	ldi	r25, 0x9C	; 156
    410c:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
    4110:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
    4114:	60 e0       	ldi	r22, 0x00	; 0
    4116:	80 e0       	ldi	r24, 0x00	; 0
    4118:	da df       	rcall	.-76     	; 0x40ce <rcServoSet>
    411a:	60 e0       	ldi	r22, 0x00	; 0
    411c:	81 e0       	ldi	r24, 0x01	; 1
    411e:	d7 df       	rcall	.-82     	; 0x40ce <rcServoSet>
    4120:	e0 e2       	ldi	r30, 0x20	; 32
    4122:	f1 e0       	ldi	r31, 0x01	; 1
    4124:	80 81       	ld	r24, Z
    4126:	82 6a       	ori	r24, 0xA2	; 162
    4128:	80 83       	st	Z, r24
    412a:	e1 e2       	ldi	r30, 0x21	; 33
    412c:	f1 e0       	ldi	r31, 0x01	; 1
    412e:	80 81       	ld	r24, Z
    4130:	8a 61       	ori	r24, 0x1A	; 26
    4132:	80 83       	st	Z, r24
    4134:	08 95       	ret

00004136 <_callBack>:
    4136:	e0 91 b9 09 	lds	r30, 0x09B9	; 0x8009b9 <_callBackFunction>
    413a:	f0 91 ba 09 	lds	r31, 0x09BA	; 0x8009ba <_callBackFunction+0x1>
    413e:	30 97       	sbiw	r30, 0x00	; 0
    4140:	09 f0       	breq	.+2      	; 0x4144 <_callBack+0xe>
    4142:	19 95       	eicall
    4144:	08 95       	ret

00004146 <_tsl2591TwiCallback>:
    4146:	64 50       	subi	r22, 0x04	; 4
    4148:	62 30       	cpi	r22, 0x02	; 2
    414a:	08 f0       	brcs	.+2      	; 0x414e <_tsl2591TwiCallback+0x8>
    414c:	3b c0       	rjmp	.+118    	; 0x41c4 <_tsl2591TwiCallback+0x7e>
    414e:	20 91 b8 09 	lds	r18, 0x09B8	; 0x8009b8 <_nextState>
    4152:	22 30       	cpi	r18, 0x02	; 2
    4154:	79 f0       	breq	.+30     	; 0x4174 <_tsl2591TwiCallback+0x2e>
    4156:	18 f4       	brcc	.+6      	; 0x415e <_tsl2591TwiCallback+0x18>
    4158:	21 30       	cpi	r18, 0x01	; 1
    415a:	31 f0       	breq	.+12     	; 0x4168 <_tsl2591TwiCallback+0x22>
    415c:	30 c0       	rjmp	.+96     	; 0x41be <_tsl2591TwiCallback+0x78>
    415e:	23 30       	cpi	r18, 0x03	; 3
    4160:	81 f0       	breq	.+32     	; 0x4182 <_tsl2591TwiCallback+0x3c>
    4162:	24 30       	cpi	r18, 0x04	; 4
    4164:	a1 f0       	breq	.+40     	; 0x418e <_tsl2591TwiCallback+0x48>
    4166:	2b c0       	rjmp	.+86     	; 0x41be <_tsl2591TwiCallback+0x78>
    4168:	22 e0       	ldi	r18, 0x02	; 2
    416a:	20 93 b8 09 	sts	0x09B8, r18	; 0x8009b8 <_nextState>
    416e:	61 e0       	ldi	r22, 0x01	; 1
    4170:	0a c2       	rjmp	.+1044   	; 0x4586 <twiReceive>
    4172:	08 95       	ret
    4174:	fa 01       	movw	r30, r20
    4176:	80 81       	ld	r24, Z
    4178:	80 93 b5 09 	sts	0x09B5, r24	; 0x8009b5 <_deviceId>
    417c:	82 e0       	ldi	r24, 0x02	; 2
    417e:	db cf       	rjmp	.-74     	; 0x4136 <_callBack>
    4180:	08 95       	ret
    4182:	24 e0       	ldi	r18, 0x04	; 4
    4184:	20 93 b8 09 	sts	0x09B8, r18	; 0x8009b8 <_nextState>
    4188:	64 e0       	ldi	r22, 0x04	; 4
    418a:	fd c1       	rjmp	.+1018   	; 0x4586 <twiReceive>
    418c:	08 95       	ret
    418e:	fa 01       	movw	r30, r20
    4190:	81 81       	ldd	r24, Z+1	; 0x01
    4192:	90 e0       	ldi	r25, 0x00	; 0
    4194:	98 2f       	mov	r25, r24
    4196:	88 27       	eor	r24, r24
    4198:	20 81       	ld	r18, Z
    419a:	82 2b       	or	r24, r18
    419c:	90 93 b4 09 	sts	0x09B4, r25	; 0x8009b4 <_fullSpectrumRaw+0x1>
    41a0:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <_fullSpectrumRaw>
    41a4:	83 81       	ldd	r24, Z+3	; 0x03
    41a6:	90 e0       	ldi	r25, 0x00	; 0
    41a8:	98 2f       	mov	r25, r24
    41aa:	88 27       	eor	r24, r24
    41ac:	22 81       	ldd	r18, Z+2	; 0x02
    41ae:	82 2b       	or	r24, r18
    41b0:	90 93 b2 09 	sts	0x09B2, r25	; 0x8009b2 <_infraredRaw+0x1>
    41b4:	80 93 b1 09 	sts	0x09B1, r24	; 0x8009b1 <_infraredRaw>
    41b8:	81 e0       	ldi	r24, 0x01	; 1
    41ba:	bd cf       	rjmp	.-134    	; 0x4136 <_callBack>
    41bc:	08 95       	ret
    41be:	80 e0       	ldi	r24, 0x00	; 0
    41c0:	ba cf       	rjmp	.-140    	; 0x4136 <_callBack>
    41c2:	08 95       	ret
    41c4:	10 92 b8 09 	sts	0x09B8, r1	; 0x8009b8 <_nextState>
    41c8:	86 e0       	ldi	r24, 0x06	; 6
    41ca:	b5 cf       	rjmp	.-150    	; 0x4136 <_callBack>
    41cc:	08 95       	ret

000041ce <_twiTransmit>:
    41ce:	20 91 bb 09 	lds	r18, 0x09BB	; 0x8009bb <_twiHandler>
    41d2:	30 91 bc 09 	lds	r19, 0x09BC	; 0x8009bc <_twiHandler+0x1>
    41d6:	21 15       	cp	r18, r1
    41d8:	31 05       	cpc	r19, r1
    41da:	41 f0       	breq	.+16     	; 0x41ec <_twiTransmit+0x1e>
    41dc:	46 2f       	mov	r20, r22
    41de:	bc 01       	movw	r22, r24
    41e0:	c9 01       	movw	r24, r18
    41e2:	85 d1       	rcall	.+778    	; 0x44ee <twiTransmit>
    41e4:	82 30       	cpi	r24, 0x02	; 2
    41e6:	21 f0       	breq	.+8      	; 0x41f0 <_twiTransmit+0x22>
    41e8:	80 e0       	ldi	r24, 0x00	; 0
    41ea:	08 95       	ret
    41ec:	87 e0       	ldi	r24, 0x07	; 7
    41ee:	08 95       	ret
    41f0:	85 e0       	ldi	r24, 0x05	; 5
    41f2:	08 95       	ret

000041f4 <tsl2591Create>:
    41f4:	0f 93       	push	r16
    41f6:	1f 93       	push	r17
    41f8:	90 93 ba 09 	sts	0x09BA, r25	; 0x8009ba <_callBackFunction+0x1>
    41fc:	80 93 b9 09 	sts	0x09B9, r24	; 0x8009b9 <_callBackFunction>
    4200:	03 ea       	ldi	r16, 0xA3	; 163
    4202:	10 e2       	ldi	r17, 0x20	; 32
    4204:	20 e0       	ldi	r18, 0x00	; 0
    4206:	34 e2       	ldi	r19, 0x24	; 36
    4208:	44 ef       	ldi	r20, 0xF4	; 244
    420a:	50 e0       	ldi	r21, 0x00	; 0
    420c:	60 e0       	ldi	r22, 0x00	; 0
    420e:	89 e2       	ldi	r24, 0x29	; 41
    4210:	1d d1       	rcall	.+570    	; 0x444c <twiCreate>
    4212:	90 93 bc 09 	sts	0x09BC, r25	; 0x8009bc <_twiHandler+0x1>
    4216:	80 93 bb 09 	sts	0x09BB, r24	; 0x8009bb <_twiHandler>
    421a:	89 2b       	or	r24, r25
    421c:	11 f0       	breq	.+4      	; 0x4222 <tsl2591Create+0x2e>
    421e:	80 e0       	ldi	r24, 0x00	; 0
    4220:	01 c0       	rjmp	.+2      	; 0x4224 <tsl2591Create+0x30>
    4222:	88 e0       	ldi	r24, 0x08	; 8
    4224:	1f 91       	pop	r17
    4226:	0f 91       	pop	r16
    4228:	08 95       	ret

0000422a <tsl2591Enable>:
    422a:	cf 93       	push	r28
    422c:	df 93       	push	r29
    422e:	1f 92       	push	r1
    4230:	1f 92       	push	r1
    4232:	cd b7       	in	r28, 0x3d	; 61
    4234:	de b7       	in	r29, 0x3e	; 62
    4236:	80 ea       	ldi	r24, 0xA0	; 160
    4238:	89 83       	std	Y+1, r24	; 0x01
    423a:	83 e0       	ldi	r24, 0x03	; 3
    423c:	8a 83       	std	Y+2, r24	; 0x02
    423e:	10 92 b8 09 	sts	0x09B8, r1	; 0x8009b8 <_nextState>
    4242:	62 e0       	ldi	r22, 0x02	; 2
    4244:	ce 01       	movw	r24, r28
    4246:	01 96       	adiw	r24, 0x01	; 1
    4248:	c2 df       	rcall	.-124    	; 0x41ce <_twiTransmit>
    424a:	0f 90       	pop	r0
    424c:	0f 90       	pop	r0
    424e:	df 91       	pop	r29
    4250:	cf 91       	pop	r28
    4252:	08 95       	ret

00004254 <tsl2591FetchData>:
    4254:	cf 93       	push	r28
    4256:	df 93       	push	r29
    4258:	1f 92       	push	r1
    425a:	cd b7       	in	r28, 0x3d	; 61
    425c:	de b7       	in	r29, 0x3e	; 62
    425e:	84 eb       	ldi	r24, 0xB4	; 180
    4260:	89 83       	std	Y+1, r24	; 0x01
    4262:	83 e0       	ldi	r24, 0x03	; 3
    4264:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <_nextState>
    4268:	61 e0       	ldi	r22, 0x01	; 1
    426a:	ce 01       	movw	r24, r28
    426c:	01 96       	adiw	r24, 0x01	; 1
    426e:	af df       	rcall	.-162    	; 0x41ce <_twiTransmit>
    4270:	0f 90       	pop	r0
    4272:	df 91       	pop	r29
    4274:	cf 91       	pop	r28
    4276:	08 95       	ret

00004278 <tsl2591GetLux>:
    4278:	2f 92       	push	r2
    427a:	3f 92       	push	r3
    427c:	4f 92       	push	r4
    427e:	5f 92       	push	r5
    4280:	6f 92       	push	r6
    4282:	7f 92       	push	r7
    4284:	8f 92       	push	r8
    4286:	9f 92       	push	r9
    4288:	af 92       	push	r10
    428a:	bf 92       	push	r11
    428c:	cf 92       	push	r12
    428e:	df 92       	push	r13
    4290:	ef 92       	push	r14
    4292:	ff 92       	push	r15
    4294:	0f 93       	push	r16
    4296:	1f 93       	push	r17
    4298:	cf 93       	push	r28
    429a:	df 93       	push	r29
    429c:	c0 91 b1 09 	lds	r28, 0x09B1	; 0x8009b1 <_infraredRaw>
    42a0:	d0 91 b2 09 	lds	r29, 0x09B2	; 0x8009b2 <_infraredRaw+0x1>
    42a4:	cf 3f       	cpi	r28, 0xFF	; 255
    42a6:	2f ef       	ldi	r18, 0xFF	; 255
    42a8:	d2 07       	cpc	r29, r18
    42aa:	41 f0       	breq	.+16     	; 0x42bc <tsl2591GetLux+0x44>
    42ac:	60 91 b3 09 	lds	r22, 0x09B3	; 0x8009b3 <_fullSpectrumRaw>
    42b0:	70 91 b4 09 	lds	r23, 0x09B4	; 0x8009b4 <_fullSpectrumRaw+0x1>
    42b4:	6f 3f       	cpi	r22, 0xFF	; 255
    42b6:	ef ef       	ldi	r30, 0xFF	; 255
    42b8:	7e 07       	cpc	r23, r30
    42ba:	59 f4       	brne	.+22     	; 0x42d2 <tsl2591GetLux+0x5a>
    42bc:	4f ef       	ldi	r20, 0xFF	; 255
    42be:	5f ef       	ldi	r21, 0xFF	; 255
    42c0:	6f e7       	ldi	r22, 0x7F	; 127
    42c2:	7f e7       	ldi	r23, 0x7F	; 127
    42c4:	fc 01       	movw	r30, r24
    42c6:	40 83       	st	Z, r20
    42c8:	51 83       	std	Z+1, r21	; 0x01
    42ca:	62 83       	std	Z+2, r22	; 0x02
    42cc:	73 83       	std	Z+3, r23	; 0x03
    42ce:	83 e0       	ldi	r24, 0x03	; 3
    42d0:	99 c0       	rjmp	.+306    	; 0x4404 <tsl2591GetLux+0x18c>
    42d2:	1c 01       	movw	r2, r24
    42d4:	80 e0       	ldi	r24, 0x00	; 0
    42d6:	90 e0       	ldi	r25, 0x00	; 0
    42d8:	18 d3       	rcall	.+1584   	; 0x490a <__floatunsisf>
    42da:	2b 01       	movw	r4, r22
    42dc:	3c 01       	movw	r6, r24
    42de:	be 01       	movw	r22, r28
    42e0:	80 e0       	ldi	r24, 0x00	; 0
    42e2:	90 e0       	ldi	r25, 0x00	; 0
    42e4:	12 d3       	rcall	.+1572   	; 0x490a <__floatunsisf>
    42e6:	4b 01       	movw	r8, r22
    42e8:	5c 01       	movw	r10, r24
    42ea:	80 91 b6 09 	lds	r24, 0x09B6	; 0x8009b6 <_currentIntegrationTime>
    42ee:	90 e0       	ldi	r25, 0x00	; 0
    42f0:	01 96       	adiw	r24, 0x01	; 1
    42f2:	24 e6       	ldi	r18, 0x64	; 100
    42f4:	28 9f       	mul	r18, r24
    42f6:	b0 01       	movw	r22, r0
    42f8:	29 9f       	mul	r18, r25
    42fa:	70 0d       	add	r23, r0
    42fc:	11 24       	eor	r1, r1
    42fe:	80 91 b7 09 	lds	r24, 0x09B7	; 0x8009b7 <_currentGain>
    4302:	80 32       	cpi	r24, 0x20	; 32
    4304:	69 f0       	breq	.+26     	; 0x4320 <tsl2591GetLux+0xa8>
    4306:	80 33       	cpi	r24, 0x30	; 48
    4308:	a1 f0       	breq	.+40     	; 0x4332 <tsl2591GetLux+0xba>
    430a:	80 31       	cpi	r24, 0x10	; 16
    430c:	e1 f4       	brne	.+56     	; 0x4346 <tsl2591GetLux+0xce>
    430e:	0f 2e       	mov	r0, r31
    4310:	c1 2c       	mov	r12, r1
    4312:	d1 2c       	mov	r13, r1
    4314:	f8 ec       	ldi	r31, 0xC8	; 200
    4316:	ef 2e       	mov	r14, r31
    4318:	f1 e4       	ldi	r31, 0x41	; 65
    431a:	ff 2e       	mov	r15, r31
    431c:	f0 2d       	mov	r31, r0
    431e:	1b c0       	rjmp	.+54     	; 0x4356 <tsl2591GetLux+0xde>
    4320:	0f 2e       	mov	r0, r31
    4322:	c1 2c       	mov	r12, r1
    4324:	d1 2c       	mov	r13, r1
    4326:	f6 ed       	ldi	r31, 0xD6	; 214
    4328:	ef 2e       	mov	r14, r31
    432a:	f3 e4       	ldi	r31, 0x43	; 67
    432c:	ff 2e       	mov	r15, r31
    432e:	f0 2d       	mov	r31, r0
    4330:	12 c0       	rjmp	.+36     	; 0x4356 <tsl2591GetLux+0xde>
    4332:	0f 2e       	mov	r0, r31
    4334:	c1 2c       	mov	r12, r1
    4336:	f0 e5       	ldi	r31, 0x50	; 80
    4338:	df 2e       	mov	r13, r31
    433a:	fa e1       	ldi	r31, 0x1A	; 26
    433c:	ef 2e       	mov	r14, r31
    433e:	f6 e4       	ldi	r31, 0x46	; 70
    4340:	ff 2e       	mov	r15, r31
    4342:	f0 2d       	mov	r31, r0
    4344:	08 c0       	rjmp	.+16     	; 0x4356 <tsl2591GetLux+0xde>
    4346:	0f 2e       	mov	r0, r31
    4348:	c1 2c       	mov	r12, r1
    434a:	d1 2c       	mov	r13, r1
    434c:	f0 e8       	ldi	r31, 0x80	; 128
    434e:	ef 2e       	mov	r14, r31
    4350:	ff e3       	ldi	r31, 0x3F	; 63
    4352:	ff 2e       	mov	r15, r31
    4354:	f0 2d       	mov	r31, r0
    4356:	07 2e       	mov	r0, r23
    4358:	00 0c       	add	r0, r0
    435a:	88 0b       	sbc	r24, r24
    435c:	99 0b       	sbc	r25, r25
    435e:	d7 d2       	rcall	.+1454   	; 0x490e <__floatsisf>
    4360:	a7 01       	movw	r20, r14
    4362:	96 01       	movw	r18, r12
    4364:	3b d3       	rcall	.+1654   	; 0x49dc <__mulsf3>
    4366:	20 e0       	ldi	r18, 0x00	; 0
    4368:	30 e0       	ldi	r19, 0x00	; 0
    436a:	4c ec       	ldi	r20, 0xCC	; 204
    436c:	53 e4       	ldi	r21, 0x43	; 67
    436e:	62 d2       	rcall	.+1220   	; 0x4834 <__divsf3>
    4370:	6b 01       	movw	r12, r22
    4372:	7c 01       	movw	r14, r24
    4374:	25 e8       	ldi	r18, 0x85	; 133
    4376:	3b ee       	ldi	r19, 0xEB	; 235
    4378:	41 ed       	ldi	r20, 0xD1	; 209
    437a:	5f e3       	ldi	r21, 0x3F	; 63
    437c:	c5 01       	movw	r24, r10
    437e:	b4 01       	movw	r22, r8
    4380:	2d d3       	rcall	.+1626   	; 0x49dc <__mulsf3>
    4382:	9b 01       	movw	r18, r22
    4384:	ac 01       	movw	r20, r24
    4386:	c3 01       	movw	r24, r6
    4388:	b2 01       	movw	r22, r4
    438a:	ed d1       	rcall	.+986    	; 0x4766 <__subsf3>
    438c:	a7 01       	movw	r20, r14
    438e:	96 01       	movw	r18, r12
    4390:	51 d2       	rcall	.+1186   	; 0x4834 <__divsf3>
    4392:	16 2f       	mov	r17, r22
    4394:	d7 2f       	mov	r29, r23
    4396:	c8 2f       	mov	r28, r24
    4398:	09 2f       	mov	r16, r25
    439a:	2d e3       	ldi	r18, 0x3D	; 61
    439c:	3a e0       	ldi	r19, 0x0A	; 10
    439e:	47 e1       	ldi	r20, 0x17	; 23
    43a0:	5f e3       	ldi	r21, 0x3F	; 63
    43a2:	c3 01       	movw	r24, r6
    43a4:	b2 01       	movw	r22, r4
    43a6:	1a d3       	rcall	.+1588   	; 0x49dc <__mulsf3>
    43a8:	2b 01       	movw	r4, r22
    43aa:	3c 01       	movw	r6, r24
    43ac:	26 ef       	ldi	r18, 0xF6	; 246
    43ae:	38 e2       	ldi	r19, 0x28	; 40
    43b0:	4c e5       	ldi	r20, 0x5C	; 92
    43b2:	5f e3       	ldi	r21, 0x3F	; 63
    43b4:	c5 01       	movw	r24, r10
    43b6:	b4 01       	movw	r22, r8
    43b8:	11 d3       	rcall	.+1570   	; 0x49dc <__mulsf3>
    43ba:	9b 01       	movw	r18, r22
    43bc:	ac 01       	movw	r20, r24
    43be:	c3 01       	movw	r24, r6
    43c0:	b2 01       	movw	r22, r4
    43c2:	d1 d1       	rcall	.+930    	; 0x4766 <__subsf3>
    43c4:	a7 01       	movw	r20, r14
    43c6:	96 01       	movw	r18, r12
    43c8:	35 d2       	rcall	.+1130   	; 0x4834 <__divsf3>
    43ca:	c6 2e       	mov	r12, r22
    43cc:	d7 2e       	mov	r13, r23
    43ce:	e8 2e       	mov	r14, r24
    43d0:	f9 2e       	mov	r15, r25
    43d2:	26 2f       	mov	r18, r22
    43d4:	37 2f       	mov	r19, r23
    43d6:	48 2f       	mov	r20, r24
    43d8:	59 2f       	mov	r21, r25
    43da:	61 2f       	mov	r22, r17
    43dc:	7d 2f       	mov	r23, r29
    43de:	8c 2f       	mov	r24, r28
    43e0:	90 2f       	mov	r25, r16
    43e2:	f8 d2       	rcall	.+1520   	; 0x49d4 <__gesf2>
    43e4:	18 16       	cp	r1, r24
    43e6:	24 f0       	brlt	.+8      	; 0x43f0 <tsl2591GetLux+0x178>
    43e8:	1c 2d       	mov	r17, r12
    43ea:	dd 2d       	mov	r29, r13
    43ec:	ce 2d       	mov	r28, r14
    43ee:	0f 2d       	mov	r16, r15
    43f0:	41 2f       	mov	r20, r17
    43f2:	5d 2f       	mov	r21, r29
    43f4:	6c 2f       	mov	r22, r28
    43f6:	70 2f       	mov	r23, r16
    43f8:	f1 01       	movw	r30, r2
    43fa:	40 83       	st	Z, r20
    43fc:	51 83       	std	Z+1, r21	; 0x01
    43fe:	62 83       	std	Z+2, r22	; 0x02
    4400:	73 83       	std	Z+3, r23	; 0x03
    4402:	80 e0       	ldi	r24, 0x00	; 0
    4404:	df 91       	pop	r29
    4406:	cf 91       	pop	r28
    4408:	1f 91       	pop	r17
    440a:	0f 91       	pop	r16
    440c:	ff 90       	pop	r15
    440e:	ef 90       	pop	r14
    4410:	df 90       	pop	r13
    4412:	cf 90       	pop	r12
    4414:	bf 90       	pop	r11
    4416:	af 90       	pop	r10
    4418:	9f 90       	pop	r9
    441a:	8f 90       	pop	r8
    441c:	7f 90       	pop	r7
    441e:	6f 90       	pop	r6
    4420:	5f 90       	pop	r5
    4422:	4f 90       	pop	r4
    4424:	3f 90       	pop	r3
    4426:	2f 90       	pop	r2
    4428:	08 95       	ret

0000442a <_initTwiInterface>:
    442a:	80 91 cb 09 	lds	r24, 0x09CB	; 0x8009cb <_twiIsInitiated>
    442e:	81 11       	cpse	r24, r1
    4430:	0c c0       	rjmp	.+24     	; 0x444a <_initTwiInterface+0x20>
    4432:	8c e0       	ldi	r24, 0x0C	; 12
    4434:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4438:	8f ef       	ldi	r24, 0xFF	; 255
    443a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    443e:	84 e0       	ldi	r24, 0x04	; 4
    4440:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4444:	81 e0       	ldi	r24, 0x01	; 1
    4446:	80 93 cb 09 	sts	0x09CB, r24	; 0x8009cb <_twiIsInitiated>
    444a:	08 95       	ret

0000444c <twiCreate>:
    444c:	af 92       	push	r10
    444e:	bf 92       	push	r11
    4450:	cf 92       	push	r12
    4452:	df 92       	push	r13
    4454:	ef 92       	push	r14
    4456:	ff 92       	push	r15
    4458:	0f 93       	push	r16
    445a:	1f 93       	push	r17
    445c:	cf 93       	push	r28
    445e:	df 93       	push	r29
    4460:	a8 2e       	mov	r10, r24
    4462:	b6 2e       	mov	r11, r22
    4464:	69 01       	movw	r12, r18
    4466:	7a 01       	movw	r14, r20
    4468:	84 e0       	ldi	r24, 0x04	; 4
    446a:	90 e0       	ldi	r25, 0x00	; 0
    446c:	85 d3       	rcall	.+1802   	; 0x4b78 <malloc>
    446e:	ec 01       	movw	r28, r24
    4470:	89 2b       	or	r24, r25
    4472:	61 f1       	breq	.+88     	; 0x44cc <twiCreate+0x80>
    4474:	a8 82       	st	Y, r10
    4476:	81 e0       	ldi	r24, 0x01	; 1
    4478:	b8 12       	cpse	r11, r24
    447a:	12 c0       	rjmp	.+36     	; 0x44a0 <twiCreate+0x54>
    447c:	c7 01       	movw	r24, r14
    447e:	b6 01       	movw	r22, r12
    4480:	20 ea       	ldi	r18, 0xA0	; 160
    4482:	36 e8       	ldi	r19, 0x86	; 134
    4484:	41 e0       	ldi	r20, 0x01	; 1
    4486:	50 e0       	ldi	r21, 0x00	; 0
    4488:	33 d3       	rcall	.+1638   	; 0x4af0 <__udivmodsi4>
    448a:	da 01       	movw	r26, r20
    448c:	c9 01       	movw	r24, r18
    448e:	40 97       	sbiw	r24, 0x10	; 16
    4490:	a1 09       	sbc	r26, r1
    4492:	b1 09       	sbc	r27, r1
    4494:	b6 95       	lsr	r27
    4496:	a7 95       	ror	r26
    4498:	97 95       	ror	r25
    449a:	87 95       	ror	r24
    449c:	89 83       	std	Y+1, r24	; 0x01
    449e:	11 c0       	rjmp	.+34     	; 0x44c2 <twiCreate+0x76>
    44a0:	c7 01       	movw	r24, r14
    44a2:	b6 01       	movw	r22, r12
    44a4:	20 e8       	ldi	r18, 0x80	; 128
    44a6:	3a e1       	ldi	r19, 0x1A	; 26
    44a8:	46 e0       	ldi	r20, 0x06	; 6
    44aa:	50 e0       	ldi	r21, 0x00	; 0
    44ac:	21 d3       	rcall	.+1602   	; 0x4af0 <__udivmodsi4>
    44ae:	da 01       	movw	r26, r20
    44b0:	c9 01       	movw	r24, r18
    44b2:	40 97       	sbiw	r24, 0x10	; 16
    44b4:	a1 09       	sbc	r26, r1
    44b6:	b1 09       	sbc	r27, r1
    44b8:	b6 95       	lsr	r27
    44ba:	a7 95       	ror	r26
    44bc:	97 95       	ror	r25
    44be:	87 95       	ror	r24
    44c0:	89 83       	std	Y+1, r24	; 0x01
    44c2:	1b 83       	std	Y+3, r17	; 0x03
    44c4:	0a 83       	std	Y+2, r16	; 0x02
    44c6:	8c 2f       	mov	r24, r28
    44c8:	9d 2f       	mov	r25, r29
    44ca:	02 c0       	rjmp	.+4      	; 0x44d0 <twiCreate+0x84>
    44cc:	80 e0       	ldi	r24, 0x00	; 0
    44ce:	90 e0       	ldi	r25, 0x00	; 0
    44d0:	df 91       	pop	r29
    44d2:	cf 91       	pop	r28
    44d4:	1f 91       	pop	r17
    44d6:	0f 91       	pop	r16
    44d8:	ff 90       	pop	r15
    44da:	ef 90       	pop	r14
    44dc:	df 90       	pop	r13
    44de:	cf 90       	pop	r12
    44e0:	bf 90       	pop	r11
    44e2:	af 90       	pop	r10
    44e4:	08 95       	ret

000044e6 <twiIsBusy>:
    44e6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    44ea:	81 70       	andi	r24, 0x01	; 1
    44ec:	08 95       	ret

000044ee <twiTransmit>:
    44ee:	ff 92       	push	r15
    44f0:	0f 93       	push	r16
    44f2:	1f 93       	push	r17
    44f4:	cf 93       	push	r28
    44f6:	df 93       	push	r29
    44f8:	00 97       	sbiw	r24, 0x00	; 0
    44fa:	d1 f1       	breq	.+116    	; 0x4570 <twiTransmit+0x82>
    44fc:	4a 30       	cpi	r20, 0x0A	; 10
    44fe:	d0 f5       	brcc	.+116    	; 0x4574 <twiTransmit+0x86>
    4500:	f4 2e       	mov	r15, r20
    4502:	8b 01       	movw	r16, r22
    4504:	ec 01       	movw	r28, r24
    4506:	ef df       	rcall	.-34     	; 0x44e6 <twiIsBusy>
    4508:	81 11       	cpse	r24, r1
    450a:	36 c0       	rjmp	.+108    	; 0x4578 <twiTransmit+0x8a>
    450c:	80 91 be 09 	lds	r24, 0x09BE	; 0x8009be <_twiCurrentHandler>
    4510:	90 91 bf 09 	lds	r25, 0x09BF	; 0x8009bf <_twiCurrentHandler+0x1>
    4514:	c8 17       	cp	r28, r24
    4516:	d9 07       	cpc	r29, r25
    4518:	41 f0       	breq	.+16     	; 0x452a <twiTransmit+0x3c>
    451a:	87 df       	rcall	.-242    	; 0x442a <_initTwiInterface>
    451c:	89 81       	ldd	r24, Y+1	; 0x01
    451e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4522:	d0 93 bf 09 	sts	0x09BF, r29	; 0x8009bf <_twiCurrentHandler+0x1>
    4526:	c0 93 be 09 	sts	0x09BE, r28	; 0x8009be <_twiCurrentHandler>
    452a:	81 e0       	ldi	r24, 0x01	; 1
    452c:	8f 0d       	add	r24, r15
    452e:	80 93 c0 09 	sts	0x09C0, r24	; 0x8009c0 <_twiMessageLen>
    4532:	88 81       	ld	r24, Y
    4534:	88 0f       	add	r24, r24
    4536:	80 93 c1 09 	sts	0x09C1, r24	; 0x8009c1 <_twiMessageBuffer>
    453a:	ff 20       	and	r15, r15
    453c:	89 f0       	breq	.+34     	; 0x4560 <twiTransmit+0x72>
    453e:	f8 01       	movw	r30, r16
    4540:	a2 ec       	ldi	r26, 0xC2	; 194
    4542:	b9 e0       	ldi	r27, 0x09	; 9
    4544:	4f ef       	ldi	r20, 0xFF	; 255
    4546:	4f 0d       	add	r20, r15
    4548:	64 2f       	mov	r22, r20
    454a:	70 e0       	ldi	r23, 0x00	; 0
    454c:	cb 01       	movw	r24, r22
    454e:	01 96       	adiw	r24, 0x01	; 1
    4550:	b8 01       	movw	r22, r16
    4552:	68 0f       	add	r22, r24
    4554:	79 1f       	adc	r23, r25
    4556:	81 91       	ld	r24, Z+
    4558:	8d 93       	st	X+, r24
    455a:	e6 17       	cp	r30, r22
    455c:	f7 07       	cpc	r31, r23
    455e:	d9 f7       	brne	.-10     	; 0x4556 <twiTransmit+0x68>
    4560:	88 ef       	ldi	r24, 0xF8	; 248
    4562:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    4566:	85 ea       	ldi	r24, 0xA5	; 165
    4568:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    456c:	84 e0       	ldi	r24, 0x04	; 4
    456e:	05 c0       	rjmp	.+10     	; 0x457a <twiTransmit+0x8c>
    4570:	86 e0       	ldi	r24, 0x06	; 6
    4572:	03 c0       	rjmp	.+6      	; 0x457a <twiTransmit+0x8c>
    4574:	87 e0       	ldi	r24, 0x07	; 7
    4576:	01 c0       	rjmp	.+2      	; 0x457a <twiTransmit+0x8c>
    4578:	82 e0       	ldi	r24, 0x02	; 2
    457a:	df 91       	pop	r29
    457c:	cf 91       	pop	r28
    457e:	1f 91       	pop	r17
    4580:	0f 91       	pop	r16
    4582:	ff 90       	pop	r15
    4584:	08 95       	ret

00004586 <twiReceive>:
    4586:	1f 93       	push	r17
    4588:	cf 93       	push	r28
    458a:	df 93       	push	r29
    458c:	00 97       	sbiw	r24, 0x00	; 0
    458e:	29 f1       	breq	.+74     	; 0x45da <twiReceive+0x54>
    4590:	6b 30       	cpi	r22, 0x0B	; 11
    4592:	28 f5       	brcc	.+74     	; 0x45de <twiReceive+0x58>
    4594:	16 2f       	mov	r17, r22
    4596:	ec 01       	movw	r28, r24
    4598:	a6 df       	rcall	.-180    	; 0x44e6 <twiIsBusy>
    459a:	81 11       	cpse	r24, r1
    459c:	22 c0       	rjmp	.+68     	; 0x45e2 <twiReceive+0x5c>
    459e:	80 91 be 09 	lds	r24, 0x09BE	; 0x8009be <_twiCurrentHandler>
    45a2:	90 91 bf 09 	lds	r25, 0x09BF	; 0x8009bf <_twiCurrentHandler+0x1>
    45a6:	c8 17       	cp	r28, r24
    45a8:	d9 07       	cpc	r29, r25
    45aa:	41 f0       	breq	.+16     	; 0x45bc <twiReceive+0x36>
    45ac:	3e df       	rcall	.-388    	; 0x442a <_initTwiInterface>
    45ae:	89 81       	ldd	r24, Y+1	; 0x01
    45b0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    45b4:	d0 93 bf 09 	sts	0x09BF, r29	; 0x8009bf <_twiCurrentHandler+0x1>
    45b8:	c0 93 be 09 	sts	0x09BE, r28	; 0x8009be <_twiCurrentHandler>
    45bc:	10 93 c0 09 	sts	0x09C0, r17	; 0x8009c0 <_twiMessageLen>
    45c0:	88 81       	ld	r24, Y
    45c2:	88 0f       	add	r24, r24
    45c4:	81 60       	ori	r24, 0x01	; 1
    45c6:	80 93 c1 09 	sts	0x09C1, r24	; 0x8009c1 <_twiMessageBuffer>
    45ca:	88 ef       	ldi	r24, 0xF8	; 248
    45cc:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    45d0:	85 ea       	ldi	r24, 0xA5	; 165
    45d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    45d6:	85 e0       	ldi	r24, 0x05	; 5
    45d8:	05 c0       	rjmp	.+10     	; 0x45e4 <twiReceive+0x5e>
    45da:	86 e0       	ldi	r24, 0x06	; 6
    45dc:	03 c0       	rjmp	.+6      	; 0x45e4 <twiReceive+0x5e>
    45de:	87 e0       	ldi	r24, 0x07	; 7
    45e0:	01 c0       	rjmp	.+2      	; 0x45e4 <twiReceive+0x5e>
    45e2:	82 e0       	ldi	r24, 0x02	; 2
    45e4:	df 91       	pop	r29
    45e6:	cf 91       	pop	r28
    45e8:	1f 91       	pop	r17
    45ea:	08 95       	ret

000045ec <__vector_39>:
    45ec:	1f 92       	push	r1
    45ee:	0f 92       	push	r0
    45f0:	0f b6       	in	r0, 0x3f	; 63
    45f2:	0f 92       	push	r0
    45f4:	11 24       	eor	r1, r1
    45f6:	0b b6       	in	r0, 0x3b	; 59
    45f8:	0f 92       	push	r0
    45fa:	2f 93       	push	r18
    45fc:	3f 93       	push	r19
    45fe:	4f 93       	push	r20
    4600:	5f 93       	push	r21
    4602:	6f 93       	push	r22
    4604:	7f 93       	push	r23
    4606:	8f 93       	push	r24
    4608:	9f 93       	push	r25
    460a:	af 93       	push	r26
    460c:	bf 93       	push	r27
    460e:	ef 93       	push	r30
    4610:	ff 93       	push	r31
    4612:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4616:	8e 2f       	mov	r24, r30
    4618:	90 e0       	ldi	r25, 0x00	; 0
    461a:	fc 01       	movw	r30, r24
    461c:	38 97       	sbiw	r30, 0x08	; 8
    461e:	e1 35       	cpi	r30, 0x51	; 81
    4620:	f1 05       	cpc	r31, r1
    4622:	08 f0       	brcs	.+2      	; 0x4626 <__vector_39+0x3a>
    4624:	75 c0       	rjmp	.+234    	; 0x4710 <__vector_39+0x124>
    4626:	88 27       	eor	r24, r24
    4628:	e4 58       	subi	r30, 0x84	; 132
    462a:	ff 4f       	sbci	r31, 0xFF	; 255
    462c:	8f 4f       	sbci	r24, 0xFF	; 255
    462e:	82 c2       	rjmp	.+1284   	; 0x4b34 <__tablejump2__>
    4630:	10 92 bd 09 	sts	0x09BD, r1	; 0x8009bd <_index.1885>
    4634:	e0 91 bd 09 	lds	r30, 0x09BD	; 0x8009bd <_index.1885>
    4638:	80 91 c0 09 	lds	r24, 0x09C0	; 0x8009c0 <_twiMessageLen>
    463c:	e8 17       	cp	r30, r24
    463e:	70 f4       	brcc	.+28     	; 0x465c <__vector_39+0x70>
    4640:	81 e0       	ldi	r24, 0x01	; 1
    4642:	8e 0f       	add	r24, r30
    4644:	80 93 bd 09 	sts	0x09BD, r24	; 0x8009bd <_index.1885>
    4648:	f0 e0       	ldi	r31, 0x00	; 0
    464a:	ef 53       	subi	r30, 0x3F	; 63
    464c:	f6 4f       	sbci	r31, 0xF6	; 246
    464e:	80 81       	ld	r24, Z
    4650:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4654:	85 e8       	ldi	r24, 0x85	; 133
    4656:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    465a:	72 c0       	rjmp	.+228    	; 0x4740 <__vector_39+0x154>
    465c:	84 e9       	ldi	r24, 0x94	; 148
    465e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4662:	80 91 be 09 	lds	r24, 0x09BE	; 0x8009be <_twiCurrentHandler>
    4666:	90 91 bf 09 	lds	r25, 0x09BF	; 0x8009bf <_twiCurrentHandler+0x1>
    466a:	dc 01       	movw	r26, r24
    466c:	12 96       	adiw	r26, 0x02	; 2
    466e:	ed 91       	ld	r30, X+
    4670:	fc 91       	ld	r31, X
    4672:	13 97       	sbiw	r26, 0x03	; 3
    4674:	30 97       	sbiw	r30, 0x00	; 0
    4676:	09 f4       	brne	.+2      	; 0x467a <__vector_39+0x8e>
    4678:	63 c0       	rjmp	.+198    	; 0x4740 <__vector_39+0x154>
    467a:	20 e0       	ldi	r18, 0x00	; 0
    467c:	40 e0       	ldi	r20, 0x00	; 0
    467e:	50 e0       	ldi	r21, 0x00	; 0
    4680:	64 e0       	ldi	r22, 0x04	; 4
    4682:	19 95       	eicall
    4684:	5d c0       	rjmp	.+186    	; 0x4740 <__vector_39+0x154>
    4686:	e0 91 bd 09 	lds	r30, 0x09BD	; 0x8009bd <_index.1885>
    468a:	81 e0       	ldi	r24, 0x01	; 1
    468c:	8e 0f       	add	r24, r30
    468e:	80 93 bd 09 	sts	0x09BD, r24	; 0x8009bd <_index.1885>
    4692:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4696:	f0 e0       	ldi	r31, 0x00	; 0
    4698:	ef 53       	subi	r30, 0x3F	; 63
    469a:	f6 4f       	sbci	r31, 0xF6	; 246
    469c:	80 83       	st	Z, r24
    469e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    46a2:	80 34       	cpi	r24, 0x40	; 64
    46a4:	11 f4       	brne	.+4      	; 0x46aa <__vector_39+0xbe>
    46a6:	10 92 bd 09 	sts	0x09BD, r1	; 0x8009bd <_index.1885>
    46aa:	20 91 bd 09 	lds	r18, 0x09BD	; 0x8009bd <_index.1885>
    46ae:	30 e0       	ldi	r19, 0x00	; 0
    46b0:	80 91 c0 09 	lds	r24, 0x09C0	; 0x8009c0 <_twiMessageLen>
    46b4:	90 e0       	ldi	r25, 0x00	; 0
    46b6:	01 97       	sbiw	r24, 0x01	; 1
    46b8:	28 17       	cp	r18, r24
    46ba:	39 07       	cpc	r19, r25
    46bc:	24 f4       	brge	.+8      	; 0x46c6 <__vector_39+0xda>
    46be:	85 ec       	ldi	r24, 0xC5	; 197
    46c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    46c4:	3d c0       	rjmp	.+122    	; 0x4740 <__vector_39+0x154>
    46c6:	85 e8       	ldi	r24, 0x85	; 133
    46c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    46cc:	39 c0       	rjmp	.+114    	; 0x4740 <__vector_39+0x154>
    46ce:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    46d2:	e0 91 bd 09 	lds	r30, 0x09BD	; 0x8009bd <_index.1885>
    46d6:	f0 e0       	ldi	r31, 0x00	; 0
    46d8:	ef 53       	subi	r30, 0x3F	; 63
    46da:	f6 4f       	sbci	r31, 0xF6	; 246
    46dc:	80 83       	st	Z, r24
    46de:	84 e9       	ldi	r24, 0x94	; 148
    46e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    46e4:	80 91 be 09 	lds	r24, 0x09BE	; 0x8009be <_twiCurrentHandler>
    46e8:	90 91 bf 09 	lds	r25, 0x09BF	; 0x8009bf <_twiCurrentHandler+0x1>
    46ec:	dc 01       	movw	r26, r24
    46ee:	12 96       	adiw	r26, 0x02	; 2
    46f0:	ed 91       	ld	r30, X+
    46f2:	fc 91       	ld	r31, X
    46f4:	13 97       	sbiw	r26, 0x03	; 3
    46f6:	30 97       	sbiw	r30, 0x00	; 0
    46f8:	19 f1       	breq	.+70     	; 0x4740 <__vector_39+0x154>
    46fa:	20 91 c0 09 	lds	r18, 0x09C0	; 0x8009c0 <_twiMessageLen>
    46fe:	41 ec       	ldi	r20, 0xC1	; 193
    4700:	59 e0       	ldi	r21, 0x09	; 9
    4702:	65 e0       	ldi	r22, 0x05	; 5
    4704:	19 95       	eicall
    4706:	1c c0       	rjmp	.+56     	; 0x4740 <__vector_39+0x154>
    4708:	85 ea       	ldi	r24, 0xA5	; 165
    470a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    470e:	18 c0       	rjmp	.+48     	; 0x4740 <__vector_39+0x154>
    4710:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4714:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    4718:	84 e0       	ldi	r24, 0x04	; 4
    471a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    471e:	80 91 be 09 	lds	r24, 0x09BE	; 0x8009be <_twiCurrentHandler>
    4722:	90 91 bf 09 	lds	r25, 0x09BF	; 0x8009bf <_twiCurrentHandler+0x1>
    4726:	dc 01       	movw	r26, r24
    4728:	12 96       	adiw	r26, 0x02	; 2
    472a:	ed 91       	ld	r30, X+
    472c:	fc 91       	ld	r31, X
    472e:	13 97       	sbiw	r26, 0x03	; 3
    4730:	30 97       	sbiw	r30, 0x00	; 0
    4732:	31 f0       	breq	.+12     	; 0x4740 <__vector_39+0x154>
    4734:	20 e0       	ldi	r18, 0x00	; 0
    4736:	40 e0       	ldi	r20, 0x00	; 0
    4738:	50 e0       	ldi	r21, 0x00	; 0
    473a:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    473e:	19 95       	eicall
    4740:	ff 91       	pop	r31
    4742:	ef 91       	pop	r30
    4744:	bf 91       	pop	r27
    4746:	af 91       	pop	r26
    4748:	9f 91       	pop	r25
    474a:	8f 91       	pop	r24
    474c:	7f 91       	pop	r23
    474e:	6f 91       	pop	r22
    4750:	5f 91       	pop	r21
    4752:	4f 91       	pop	r20
    4754:	3f 91       	pop	r19
    4756:	2f 91       	pop	r18
    4758:	0f 90       	pop	r0
    475a:	0b be       	out	0x3b, r0	; 59
    475c:	0f 90       	pop	r0
    475e:	0f be       	out	0x3f, r0	; 63
    4760:	0f 90       	pop	r0
    4762:	1f 90       	pop	r1
    4764:	18 95       	reti

00004766 <__subsf3>:
    4766:	50 58       	subi	r21, 0x80	; 128

00004768 <__addsf3>:
    4768:	bb 27       	eor	r27, r27
    476a:	aa 27       	eor	r26, r26
    476c:	0e d0       	rcall	.+28     	; 0x478a <__addsf3x>
    476e:	21 c1       	rjmp	.+578    	; 0x49b2 <__fp_round>
    4770:	12 d1       	rcall	.+548    	; 0x4996 <__fp_pscA>
    4772:	30 f0       	brcs	.+12     	; 0x4780 <__addsf3+0x18>
    4774:	17 d1       	rcall	.+558    	; 0x49a4 <__fp_pscB>
    4776:	20 f0       	brcs	.+8      	; 0x4780 <__addsf3+0x18>
    4778:	31 f4       	brne	.+12     	; 0x4786 <__addsf3+0x1e>
    477a:	9f 3f       	cpi	r25, 0xFF	; 255
    477c:	11 f4       	brne	.+4      	; 0x4782 <__addsf3+0x1a>
    477e:	1e f4       	brtc	.+6      	; 0x4786 <__addsf3+0x1e>
    4780:	07 c1       	rjmp	.+526    	; 0x4990 <__fp_nan>
    4782:	0e f4       	brtc	.+2      	; 0x4786 <__addsf3+0x1e>
    4784:	e0 95       	com	r30
    4786:	e7 fb       	bst	r30, 7
    4788:	fd c0       	rjmp	.+506    	; 0x4984 <__fp_inf>

0000478a <__addsf3x>:
    478a:	e9 2f       	mov	r30, r25
    478c:	0e 94 77 15 	call	0x2aee	; 0x2aee <__fp_split3>
    4790:	78 f3       	brcs	.-34     	; 0x4770 <__addsf3+0x8>
    4792:	ba 17       	cp	r27, r26
    4794:	62 07       	cpc	r22, r18
    4796:	73 07       	cpc	r23, r19
    4798:	84 07       	cpc	r24, r20
    479a:	95 07       	cpc	r25, r21
    479c:	20 f0       	brcs	.+8      	; 0x47a6 <__addsf3x+0x1c>
    479e:	79 f4       	brne	.+30     	; 0x47be <__addsf3x+0x34>
    47a0:	a6 f5       	brtc	.+104    	; 0x480a <__addsf3x+0x80>
    47a2:	0c 94 99 15 	jmp	0x2b32	; 0x2b32 <__fp_zero>
    47a6:	0e f4       	brtc	.+2      	; 0x47aa <__addsf3x+0x20>
    47a8:	e0 95       	com	r30
    47aa:	0b 2e       	mov	r0, r27
    47ac:	ba 2f       	mov	r27, r26
    47ae:	a0 2d       	mov	r26, r0
    47b0:	0b 01       	movw	r0, r22
    47b2:	b9 01       	movw	r22, r18
    47b4:	90 01       	movw	r18, r0
    47b6:	0c 01       	movw	r0, r24
    47b8:	ca 01       	movw	r24, r20
    47ba:	a0 01       	movw	r20, r0
    47bc:	11 24       	eor	r1, r1
    47be:	ff 27       	eor	r31, r31
    47c0:	59 1b       	sub	r21, r25
    47c2:	99 f0       	breq	.+38     	; 0x47ea <__addsf3x+0x60>
    47c4:	59 3f       	cpi	r21, 0xF9	; 249
    47c6:	50 f4       	brcc	.+20     	; 0x47dc <__addsf3x+0x52>
    47c8:	50 3e       	cpi	r21, 0xE0	; 224
    47ca:	68 f1       	brcs	.+90     	; 0x4826 <__addsf3x+0x9c>
    47cc:	1a 16       	cp	r1, r26
    47ce:	f0 40       	sbci	r31, 0x00	; 0
    47d0:	a2 2f       	mov	r26, r18
    47d2:	23 2f       	mov	r18, r19
    47d4:	34 2f       	mov	r19, r20
    47d6:	44 27       	eor	r20, r20
    47d8:	58 5f       	subi	r21, 0xF8	; 248
    47da:	f3 cf       	rjmp	.-26     	; 0x47c2 <__addsf3x+0x38>
    47dc:	46 95       	lsr	r20
    47de:	37 95       	ror	r19
    47e0:	27 95       	ror	r18
    47e2:	a7 95       	ror	r26
    47e4:	f0 40       	sbci	r31, 0x00	; 0
    47e6:	53 95       	inc	r21
    47e8:	c9 f7       	brne	.-14     	; 0x47dc <__addsf3x+0x52>
    47ea:	7e f4       	brtc	.+30     	; 0x480a <__addsf3x+0x80>
    47ec:	1f 16       	cp	r1, r31
    47ee:	ba 0b       	sbc	r27, r26
    47f0:	62 0b       	sbc	r22, r18
    47f2:	73 0b       	sbc	r23, r19
    47f4:	84 0b       	sbc	r24, r20
    47f6:	ba f0       	brmi	.+46     	; 0x4826 <__addsf3x+0x9c>
    47f8:	91 50       	subi	r25, 0x01	; 1
    47fa:	a1 f0       	breq	.+40     	; 0x4824 <__addsf3x+0x9a>
    47fc:	ff 0f       	add	r31, r31
    47fe:	bb 1f       	adc	r27, r27
    4800:	66 1f       	adc	r22, r22
    4802:	77 1f       	adc	r23, r23
    4804:	88 1f       	adc	r24, r24
    4806:	c2 f7       	brpl	.-16     	; 0x47f8 <__addsf3x+0x6e>
    4808:	0e c0       	rjmp	.+28     	; 0x4826 <__addsf3x+0x9c>
    480a:	ba 0f       	add	r27, r26
    480c:	62 1f       	adc	r22, r18
    480e:	73 1f       	adc	r23, r19
    4810:	84 1f       	adc	r24, r20
    4812:	48 f4       	brcc	.+18     	; 0x4826 <__addsf3x+0x9c>
    4814:	87 95       	ror	r24
    4816:	77 95       	ror	r23
    4818:	67 95       	ror	r22
    481a:	b7 95       	ror	r27
    481c:	f7 95       	ror	r31
    481e:	9e 3f       	cpi	r25, 0xFE	; 254
    4820:	08 f0       	brcs	.+2      	; 0x4824 <__addsf3x+0x9a>
    4822:	b1 cf       	rjmp	.-158    	; 0x4786 <__addsf3+0x1e>
    4824:	93 95       	inc	r25
    4826:	88 0f       	add	r24, r24
    4828:	08 f0       	brcs	.+2      	; 0x482c <__addsf3x+0xa2>
    482a:	99 27       	eor	r25, r25
    482c:	ee 0f       	add	r30, r30
    482e:	97 95       	ror	r25
    4830:	87 95       	ror	r24
    4832:	08 95       	ret

00004834 <__divsf3>:
    4834:	0d d0       	rcall	.+26     	; 0x4850 <__divsf3x>
    4836:	bd c0       	rjmp	.+378    	; 0x49b2 <__fp_round>
    4838:	b5 d0       	rcall	.+362    	; 0x49a4 <__fp_pscB>
    483a:	48 f0       	brcs	.+18     	; 0x484e <__divsf3+0x1a>
    483c:	ac d0       	rcall	.+344    	; 0x4996 <__fp_pscA>
    483e:	38 f0       	brcs	.+14     	; 0x484e <__divsf3+0x1a>
    4840:	21 f4       	brne	.+8      	; 0x484a <__divsf3+0x16>
    4842:	5f 3f       	cpi	r21, 0xFF	; 255
    4844:	21 f0       	breq	.+8      	; 0x484e <__divsf3+0x1a>
    4846:	9e c0       	rjmp	.+316    	; 0x4984 <__fp_inf>
    4848:	51 11       	cpse	r21, r1
    484a:	0c 94 9a 15 	jmp	0x2b34	; 0x2b34 <__fp_szero>
    484e:	a0 c0       	rjmp	.+320    	; 0x4990 <__fp_nan>

00004850 <__divsf3x>:
    4850:	0e 94 77 15 	call	0x2aee	; 0x2aee <__fp_split3>
    4854:	88 f3       	brcs	.-30     	; 0x4838 <__divsf3+0x4>

00004856 <__divsf3_pse>:
    4856:	99 23       	and	r25, r25
    4858:	b9 f3       	breq	.-18     	; 0x4848 <__divsf3+0x14>
    485a:	55 23       	and	r21, r21
    485c:	a1 f3       	breq	.-24     	; 0x4846 <__divsf3+0x12>
    485e:	95 1b       	sub	r25, r21
    4860:	55 0b       	sbc	r21, r21
    4862:	bb 27       	eor	r27, r27
    4864:	aa 27       	eor	r26, r26
    4866:	62 17       	cp	r22, r18
    4868:	73 07       	cpc	r23, r19
    486a:	84 07       	cpc	r24, r20
    486c:	38 f0       	brcs	.+14     	; 0x487c <__divsf3_pse+0x26>
    486e:	9f 5f       	subi	r25, 0xFF	; 255
    4870:	5f 4f       	sbci	r21, 0xFF	; 255
    4872:	22 0f       	add	r18, r18
    4874:	33 1f       	adc	r19, r19
    4876:	44 1f       	adc	r20, r20
    4878:	aa 1f       	adc	r26, r26
    487a:	a9 f3       	breq	.-22     	; 0x4866 <__divsf3_pse+0x10>
    487c:	34 d0       	rcall	.+104    	; 0x48e6 <__divsf3_pse+0x90>
    487e:	0e 2e       	mov	r0, r30
    4880:	3a f0       	brmi	.+14     	; 0x4890 <__divsf3_pse+0x3a>
    4882:	e0 e8       	ldi	r30, 0x80	; 128
    4884:	31 d0       	rcall	.+98     	; 0x48e8 <__divsf3_pse+0x92>
    4886:	91 50       	subi	r25, 0x01	; 1
    4888:	50 40       	sbci	r21, 0x00	; 0
    488a:	e6 95       	lsr	r30
    488c:	00 1c       	adc	r0, r0
    488e:	ca f7       	brpl	.-14     	; 0x4882 <__divsf3_pse+0x2c>
    4890:	2a d0       	rcall	.+84     	; 0x48e6 <__divsf3_pse+0x90>
    4892:	fe 2f       	mov	r31, r30
    4894:	28 d0       	rcall	.+80     	; 0x48e6 <__divsf3_pse+0x90>
    4896:	66 0f       	add	r22, r22
    4898:	77 1f       	adc	r23, r23
    489a:	88 1f       	adc	r24, r24
    489c:	bb 1f       	adc	r27, r27
    489e:	26 17       	cp	r18, r22
    48a0:	37 07       	cpc	r19, r23
    48a2:	48 07       	cpc	r20, r24
    48a4:	ab 07       	cpc	r26, r27
    48a6:	b0 e8       	ldi	r27, 0x80	; 128
    48a8:	09 f0       	breq	.+2      	; 0x48ac <__divsf3_pse+0x56>
    48aa:	bb 0b       	sbc	r27, r27
    48ac:	80 2d       	mov	r24, r0
    48ae:	bf 01       	movw	r22, r30
    48b0:	ff 27       	eor	r31, r31
    48b2:	93 58       	subi	r25, 0x83	; 131
    48b4:	5f 4f       	sbci	r21, 0xFF	; 255
    48b6:	32 f0       	brmi	.+12     	; 0x48c4 <__divsf3_pse+0x6e>
    48b8:	9e 3f       	cpi	r25, 0xFE	; 254
    48ba:	51 05       	cpc	r21, r1
    48bc:	70 f0       	brcs	.+28     	; 0x48da <__divsf3_pse+0x84>
    48be:	62 c0       	rjmp	.+196    	; 0x4984 <__fp_inf>
    48c0:	0c 94 9a 15 	jmp	0x2b34	; 0x2b34 <__fp_szero>
    48c4:	5f 3f       	cpi	r21, 0xFF	; 255
    48c6:	e4 f3       	brlt	.-8      	; 0x48c0 <__divsf3_pse+0x6a>
    48c8:	98 3e       	cpi	r25, 0xE8	; 232
    48ca:	d4 f3       	brlt	.-12     	; 0x48c0 <__divsf3_pse+0x6a>
    48cc:	86 95       	lsr	r24
    48ce:	77 95       	ror	r23
    48d0:	67 95       	ror	r22
    48d2:	b7 95       	ror	r27
    48d4:	f7 95       	ror	r31
    48d6:	9f 5f       	subi	r25, 0xFF	; 255
    48d8:	c9 f7       	brne	.-14     	; 0x48cc <__divsf3_pse+0x76>
    48da:	88 0f       	add	r24, r24
    48dc:	91 1d       	adc	r25, r1
    48de:	96 95       	lsr	r25
    48e0:	87 95       	ror	r24
    48e2:	97 f9       	bld	r25, 7
    48e4:	08 95       	ret
    48e6:	e1 e0       	ldi	r30, 0x01	; 1
    48e8:	66 0f       	add	r22, r22
    48ea:	77 1f       	adc	r23, r23
    48ec:	88 1f       	adc	r24, r24
    48ee:	bb 1f       	adc	r27, r27
    48f0:	62 17       	cp	r22, r18
    48f2:	73 07       	cpc	r23, r19
    48f4:	84 07       	cpc	r24, r20
    48f6:	ba 07       	cpc	r27, r26
    48f8:	20 f0       	brcs	.+8      	; 0x4902 <__divsf3_pse+0xac>
    48fa:	62 1b       	sub	r22, r18
    48fc:	73 0b       	sbc	r23, r19
    48fe:	84 0b       	sbc	r24, r20
    4900:	ba 0b       	sbc	r27, r26
    4902:	ee 1f       	adc	r30, r30
    4904:	88 f7       	brcc	.-30     	; 0x48e8 <__divsf3_pse+0x92>
    4906:	e0 95       	com	r30
    4908:	08 95       	ret

0000490a <__floatunsisf>:
    490a:	e8 94       	clt
    490c:	09 c0       	rjmp	.+18     	; 0x4920 <__floatsisf+0x12>

0000490e <__floatsisf>:
    490e:	97 fb       	bst	r25, 7
    4910:	3e f4       	brtc	.+14     	; 0x4920 <__floatsisf+0x12>
    4912:	90 95       	com	r25
    4914:	80 95       	com	r24
    4916:	70 95       	com	r23
    4918:	61 95       	neg	r22
    491a:	7f 4f       	sbci	r23, 0xFF	; 255
    491c:	8f 4f       	sbci	r24, 0xFF	; 255
    491e:	9f 4f       	sbci	r25, 0xFF	; 255
    4920:	99 23       	and	r25, r25
    4922:	a9 f0       	breq	.+42     	; 0x494e <__floatsisf+0x40>
    4924:	f9 2f       	mov	r31, r25
    4926:	96 e9       	ldi	r25, 0x96	; 150
    4928:	bb 27       	eor	r27, r27
    492a:	93 95       	inc	r25
    492c:	f6 95       	lsr	r31
    492e:	87 95       	ror	r24
    4930:	77 95       	ror	r23
    4932:	67 95       	ror	r22
    4934:	b7 95       	ror	r27
    4936:	f1 11       	cpse	r31, r1
    4938:	f8 cf       	rjmp	.-16     	; 0x492a <__floatsisf+0x1c>
    493a:	fa f4       	brpl	.+62     	; 0x497a <__floatsisf+0x6c>
    493c:	bb 0f       	add	r27, r27
    493e:	11 f4       	brne	.+4      	; 0x4944 <__floatsisf+0x36>
    4940:	60 ff       	sbrs	r22, 0
    4942:	1b c0       	rjmp	.+54     	; 0x497a <__floatsisf+0x6c>
    4944:	6f 5f       	subi	r22, 0xFF	; 255
    4946:	7f 4f       	sbci	r23, 0xFF	; 255
    4948:	8f 4f       	sbci	r24, 0xFF	; 255
    494a:	9f 4f       	sbci	r25, 0xFF	; 255
    494c:	16 c0       	rjmp	.+44     	; 0x497a <__floatsisf+0x6c>
    494e:	88 23       	and	r24, r24
    4950:	11 f0       	breq	.+4      	; 0x4956 <__floatsisf+0x48>
    4952:	96 e9       	ldi	r25, 0x96	; 150
    4954:	11 c0       	rjmp	.+34     	; 0x4978 <__floatsisf+0x6a>
    4956:	77 23       	and	r23, r23
    4958:	21 f0       	breq	.+8      	; 0x4962 <__floatsisf+0x54>
    495a:	9e e8       	ldi	r25, 0x8E	; 142
    495c:	87 2f       	mov	r24, r23
    495e:	76 2f       	mov	r23, r22
    4960:	05 c0       	rjmp	.+10     	; 0x496c <__floatsisf+0x5e>
    4962:	66 23       	and	r22, r22
    4964:	71 f0       	breq	.+28     	; 0x4982 <__floatsisf+0x74>
    4966:	96 e8       	ldi	r25, 0x86	; 134
    4968:	86 2f       	mov	r24, r22
    496a:	70 e0       	ldi	r23, 0x00	; 0
    496c:	60 e0       	ldi	r22, 0x00	; 0
    496e:	2a f0       	brmi	.+10     	; 0x497a <__floatsisf+0x6c>
    4970:	9a 95       	dec	r25
    4972:	66 0f       	add	r22, r22
    4974:	77 1f       	adc	r23, r23
    4976:	88 1f       	adc	r24, r24
    4978:	da f7       	brpl	.-10     	; 0x4970 <__floatsisf+0x62>
    497a:	88 0f       	add	r24, r24
    497c:	96 95       	lsr	r25
    497e:	87 95       	ror	r24
    4980:	97 f9       	bld	r25, 7
    4982:	08 95       	ret

00004984 <__fp_inf>:
    4984:	97 f9       	bld	r25, 7
    4986:	9f 67       	ori	r25, 0x7F	; 127
    4988:	80 e8       	ldi	r24, 0x80	; 128
    498a:	70 e0       	ldi	r23, 0x00	; 0
    498c:	60 e0       	ldi	r22, 0x00	; 0
    498e:	08 95       	ret

00004990 <__fp_nan>:
    4990:	9f ef       	ldi	r25, 0xFF	; 255
    4992:	80 ec       	ldi	r24, 0xC0	; 192
    4994:	08 95       	ret

00004996 <__fp_pscA>:
    4996:	00 24       	eor	r0, r0
    4998:	0a 94       	dec	r0
    499a:	16 16       	cp	r1, r22
    499c:	17 06       	cpc	r1, r23
    499e:	18 06       	cpc	r1, r24
    49a0:	09 06       	cpc	r0, r25
    49a2:	08 95       	ret

000049a4 <__fp_pscB>:
    49a4:	00 24       	eor	r0, r0
    49a6:	0a 94       	dec	r0
    49a8:	12 16       	cp	r1, r18
    49aa:	13 06       	cpc	r1, r19
    49ac:	14 06       	cpc	r1, r20
    49ae:	05 06       	cpc	r0, r21
    49b0:	08 95       	ret

000049b2 <__fp_round>:
    49b2:	09 2e       	mov	r0, r25
    49b4:	03 94       	inc	r0
    49b6:	00 0c       	add	r0, r0
    49b8:	11 f4       	brne	.+4      	; 0x49be <__fp_round+0xc>
    49ba:	88 23       	and	r24, r24
    49bc:	52 f0       	brmi	.+20     	; 0x49d2 <__fp_round+0x20>
    49be:	bb 0f       	add	r27, r27
    49c0:	40 f4       	brcc	.+16     	; 0x49d2 <__fp_round+0x20>
    49c2:	bf 2b       	or	r27, r31
    49c4:	11 f4       	brne	.+4      	; 0x49ca <__fp_round+0x18>
    49c6:	60 ff       	sbrs	r22, 0
    49c8:	04 c0       	rjmp	.+8      	; 0x49d2 <__fp_round+0x20>
    49ca:	6f 5f       	subi	r22, 0xFF	; 255
    49cc:	7f 4f       	sbci	r23, 0xFF	; 255
    49ce:	8f 4f       	sbci	r24, 0xFF	; 255
    49d0:	9f 4f       	sbci	r25, 0xFF	; 255
    49d2:	08 95       	ret

000049d4 <__gesf2>:
    49d4:	69 d0       	rcall	.+210    	; 0x4aa8 <__fp_cmp>
    49d6:	08 f4       	brcc	.+2      	; 0x49da <__gesf2+0x6>
    49d8:	8f ef       	ldi	r24, 0xFF	; 255
    49da:	08 95       	ret

000049dc <__mulsf3>:
    49dc:	0c d0       	rcall	.+24     	; 0x49f6 <__mulsf3x>
    49de:	e9 cf       	rjmp	.-46     	; 0x49b2 <__fp_round>
    49e0:	da df       	rcall	.-76     	; 0x4996 <__fp_pscA>
    49e2:	28 f0       	brcs	.+10     	; 0x49ee <__mulsf3+0x12>
    49e4:	df df       	rcall	.-66     	; 0x49a4 <__fp_pscB>
    49e6:	18 f0       	brcs	.+6      	; 0x49ee <__mulsf3+0x12>
    49e8:	95 23       	and	r25, r21
    49ea:	09 f0       	breq	.+2      	; 0x49ee <__mulsf3+0x12>
    49ec:	cb cf       	rjmp	.-106    	; 0x4984 <__fp_inf>
    49ee:	d0 cf       	rjmp	.-96     	; 0x4990 <__fp_nan>
    49f0:	11 24       	eor	r1, r1
    49f2:	0c 94 9a 15 	jmp	0x2b34	; 0x2b34 <__fp_szero>

000049f6 <__mulsf3x>:
    49f6:	0e 94 77 15 	call	0x2aee	; 0x2aee <__fp_split3>
    49fa:	90 f3       	brcs	.-28     	; 0x49e0 <__mulsf3+0x4>

000049fc <__mulsf3_pse>:
    49fc:	95 9f       	mul	r25, r21
    49fe:	c1 f3       	breq	.-16     	; 0x49f0 <__mulsf3+0x14>
    4a00:	95 0f       	add	r25, r21
    4a02:	50 e0       	ldi	r21, 0x00	; 0
    4a04:	55 1f       	adc	r21, r21
    4a06:	62 9f       	mul	r22, r18
    4a08:	f0 01       	movw	r30, r0
    4a0a:	72 9f       	mul	r23, r18
    4a0c:	bb 27       	eor	r27, r27
    4a0e:	f0 0d       	add	r31, r0
    4a10:	b1 1d       	adc	r27, r1
    4a12:	63 9f       	mul	r22, r19
    4a14:	aa 27       	eor	r26, r26
    4a16:	f0 0d       	add	r31, r0
    4a18:	b1 1d       	adc	r27, r1
    4a1a:	aa 1f       	adc	r26, r26
    4a1c:	64 9f       	mul	r22, r20
    4a1e:	66 27       	eor	r22, r22
    4a20:	b0 0d       	add	r27, r0
    4a22:	a1 1d       	adc	r26, r1
    4a24:	66 1f       	adc	r22, r22
    4a26:	82 9f       	mul	r24, r18
    4a28:	22 27       	eor	r18, r18
    4a2a:	b0 0d       	add	r27, r0
    4a2c:	a1 1d       	adc	r26, r1
    4a2e:	62 1f       	adc	r22, r18
    4a30:	73 9f       	mul	r23, r19
    4a32:	b0 0d       	add	r27, r0
    4a34:	a1 1d       	adc	r26, r1
    4a36:	62 1f       	adc	r22, r18
    4a38:	83 9f       	mul	r24, r19
    4a3a:	a0 0d       	add	r26, r0
    4a3c:	61 1d       	adc	r22, r1
    4a3e:	22 1f       	adc	r18, r18
    4a40:	74 9f       	mul	r23, r20
    4a42:	33 27       	eor	r19, r19
    4a44:	a0 0d       	add	r26, r0
    4a46:	61 1d       	adc	r22, r1
    4a48:	23 1f       	adc	r18, r19
    4a4a:	84 9f       	mul	r24, r20
    4a4c:	60 0d       	add	r22, r0
    4a4e:	21 1d       	adc	r18, r1
    4a50:	82 2f       	mov	r24, r18
    4a52:	76 2f       	mov	r23, r22
    4a54:	6a 2f       	mov	r22, r26
    4a56:	11 24       	eor	r1, r1
    4a58:	9f 57       	subi	r25, 0x7F	; 127
    4a5a:	50 40       	sbci	r21, 0x00	; 0
    4a5c:	92 f0       	brmi	.+36     	; 0x4a82 <__mulsf3_pse+0x86>
    4a5e:	e9 f0       	breq	.+58     	; 0x4a9a <__mulsf3_pse+0x9e>
    4a60:	88 23       	and	r24, r24
    4a62:	4a f0       	brmi	.+18     	; 0x4a76 <__mulsf3_pse+0x7a>
    4a64:	ee 0f       	add	r30, r30
    4a66:	ff 1f       	adc	r31, r31
    4a68:	bb 1f       	adc	r27, r27
    4a6a:	66 1f       	adc	r22, r22
    4a6c:	77 1f       	adc	r23, r23
    4a6e:	88 1f       	adc	r24, r24
    4a70:	91 50       	subi	r25, 0x01	; 1
    4a72:	50 40       	sbci	r21, 0x00	; 0
    4a74:	a9 f7       	brne	.-22     	; 0x4a60 <__mulsf3_pse+0x64>
    4a76:	9e 3f       	cpi	r25, 0xFE	; 254
    4a78:	51 05       	cpc	r21, r1
    4a7a:	78 f0       	brcs	.+30     	; 0x4a9a <__mulsf3_pse+0x9e>
    4a7c:	83 cf       	rjmp	.-250    	; 0x4984 <__fp_inf>
    4a7e:	0c 94 9a 15 	jmp	0x2b34	; 0x2b34 <__fp_szero>
    4a82:	5f 3f       	cpi	r21, 0xFF	; 255
    4a84:	e4 f3       	brlt	.-8      	; 0x4a7e <__mulsf3_pse+0x82>
    4a86:	98 3e       	cpi	r25, 0xE8	; 232
    4a88:	d4 f3       	brlt	.-12     	; 0x4a7e <__mulsf3_pse+0x82>
    4a8a:	86 95       	lsr	r24
    4a8c:	77 95       	ror	r23
    4a8e:	67 95       	ror	r22
    4a90:	b7 95       	ror	r27
    4a92:	f7 95       	ror	r31
    4a94:	e7 95       	ror	r30
    4a96:	9f 5f       	subi	r25, 0xFF	; 255
    4a98:	c1 f7       	brne	.-16     	; 0x4a8a <__mulsf3_pse+0x8e>
    4a9a:	fe 2b       	or	r31, r30
    4a9c:	88 0f       	add	r24, r24
    4a9e:	91 1d       	adc	r25, r1
    4aa0:	96 95       	lsr	r25
    4aa2:	87 95       	ror	r24
    4aa4:	97 f9       	bld	r25, 7
    4aa6:	08 95       	ret

00004aa8 <__fp_cmp>:
    4aa8:	99 0f       	add	r25, r25
    4aaa:	00 08       	sbc	r0, r0
    4aac:	55 0f       	add	r21, r21
    4aae:	aa 0b       	sbc	r26, r26
    4ab0:	e0 e8       	ldi	r30, 0x80	; 128
    4ab2:	fe ef       	ldi	r31, 0xFE	; 254
    4ab4:	16 16       	cp	r1, r22
    4ab6:	17 06       	cpc	r1, r23
    4ab8:	e8 07       	cpc	r30, r24
    4aba:	f9 07       	cpc	r31, r25
    4abc:	c0 f0       	brcs	.+48     	; 0x4aee <__fp_cmp+0x46>
    4abe:	12 16       	cp	r1, r18
    4ac0:	13 06       	cpc	r1, r19
    4ac2:	e4 07       	cpc	r30, r20
    4ac4:	f5 07       	cpc	r31, r21
    4ac6:	98 f0       	brcs	.+38     	; 0x4aee <__fp_cmp+0x46>
    4ac8:	62 1b       	sub	r22, r18
    4aca:	73 0b       	sbc	r23, r19
    4acc:	84 0b       	sbc	r24, r20
    4ace:	95 0b       	sbc	r25, r21
    4ad0:	39 f4       	brne	.+14     	; 0x4ae0 <__fp_cmp+0x38>
    4ad2:	0a 26       	eor	r0, r26
    4ad4:	61 f0       	breq	.+24     	; 0x4aee <__fp_cmp+0x46>
    4ad6:	23 2b       	or	r18, r19
    4ad8:	24 2b       	or	r18, r20
    4ada:	25 2b       	or	r18, r21
    4adc:	21 f4       	brne	.+8      	; 0x4ae6 <__fp_cmp+0x3e>
    4ade:	08 95       	ret
    4ae0:	0a 26       	eor	r0, r26
    4ae2:	09 f4       	brne	.+2      	; 0x4ae6 <__fp_cmp+0x3e>
    4ae4:	a1 40       	sbci	r26, 0x01	; 1
    4ae6:	a6 95       	lsr	r26
    4ae8:	8f ef       	ldi	r24, 0xFF	; 255
    4aea:	81 1d       	adc	r24, r1
    4aec:	81 1d       	adc	r24, r1
    4aee:	08 95       	ret

00004af0 <__udivmodsi4>:
    4af0:	a1 e2       	ldi	r26, 0x21	; 33
    4af2:	1a 2e       	mov	r1, r26
    4af4:	aa 1b       	sub	r26, r26
    4af6:	bb 1b       	sub	r27, r27
    4af8:	fd 01       	movw	r30, r26
    4afa:	0d c0       	rjmp	.+26     	; 0x4b16 <__udivmodsi4_ep>

00004afc <__udivmodsi4_loop>:
    4afc:	aa 1f       	adc	r26, r26
    4afe:	bb 1f       	adc	r27, r27
    4b00:	ee 1f       	adc	r30, r30
    4b02:	ff 1f       	adc	r31, r31
    4b04:	a2 17       	cp	r26, r18
    4b06:	b3 07       	cpc	r27, r19
    4b08:	e4 07       	cpc	r30, r20
    4b0a:	f5 07       	cpc	r31, r21
    4b0c:	20 f0       	brcs	.+8      	; 0x4b16 <__udivmodsi4_ep>
    4b0e:	a2 1b       	sub	r26, r18
    4b10:	b3 0b       	sbc	r27, r19
    4b12:	e4 0b       	sbc	r30, r20
    4b14:	f5 0b       	sbc	r31, r21

00004b16 <__udivmodsi4_ep>:
    4b16:	66 1f       	adc	r22, r22
    4b18:	77 1f       	adc	r23, r23
    4b1a:	88 1f       	adc	r24, r24
    4b1c:	99 1f       	adc	r25, r25
    4b1e:	1a 94       	dec	r1
    4b20:	69 f7       	brne	.-38     	; 0x4afc <__udivmodsi4_loop>
    4b22:	60 95       	com	r22
    4b24:	70 95       	com	r23
    4b26:	80 95       	com	r24
    4b28:	90 95       	com	r25
    4b2a:	9b 01       	movw	r18, r22
    4b2c:	ac 01       	movw	r20, r24
    4b2e:	bd 01       	movw	r22, r26
    4b30:	cf 01       	movw	r24, r30
    4b32:	08 95       	ret

00004b34 <__tablejump2__>:
    4b34:	ee 0f       	add	r30, r30
    4b36:	ff 1f       	adc	r31, r31
    4b38:	88 1f       	adc	r24, r24
    4b3a:	8b bf       	out	0x3b, r24	; 59
    4b3c:	07 90       	elpm	r0, Z+
    4b3e:	f6 91       	elpm	r31, Z
    4b40:	e0 2d       	mov	r30, r0
    4b42:	19 94       	eijmp

00004b44 <calloc>:
    4b44:	0f 93       	push	r16
    4b46:	1f 93       	push	r17
    4b48:	cf 93       	push	r28
    4b4a:	df 93       	push	r29
    4b4c:	86 9f       	mul	r24, r22
    4b4e:	80 01       	movw	r16, r0
    4b50:	87 9f       	mul	r24, r23
    4b52:	10 0d       	add	r17, r0
    4b54:	96 9f       	mul	r25, r22
    4b56:	10 0d       	add	r17, r0
    4b58:	11 24       	eor	r1, r1
    4b5a:	c8 01       	movw	r24, r16
    4b5c:	0d d0       	rcall	.+26     	; 0x4b78 <malloc>
    4b5e:	ec 01       	movw	r28, r24
    4b60:	00 97       	sbiw	r24, 0x00	; 0
    4b62:	21 f0       	breq	.+8      	; 0x4b6c <calloc+0x28>
    4b64:	a8 01       	movw	r20, r16
    4b66:	60 e0       	ldi	r22, 0x00	; 0
    4b68:	70 e0       	ldi	r23, 0x00	; 0
    4b6a:	34 d1       	rcall	.+616    	; 0x4dd4 <memset>
    4b6c:	ce 01       	movw	r24, r28
    4b6e:	df 91       	pop	r29
    4b70:	cf 91       	pop	r28
    4b72:	1f 91       	pop	r17
    4b74:	0f 91       	pop	r16
    4b76:	08 95       	ret

00004b78 <malloc>:
    4b78:	0f 93       	push	r16
    4b7a:	1f 93       	push	r17
    4b7c:	cf 93       	push	r28
    4b7e:	df 93       	push	r29
    4b80:	82 30       	cpi	r24, 0x02	; 2
    4b82:	91 05       	cpc	r25, r1
    4b84:	10 f4       	brcc	.+4      	; 0x4b8a <malloc+0x12>
    4b86:	82 e0       	ldi	r24, 0x02	; 2
    4b88:	90 e0       	ldi	r25, 0x00	; 0
    4b8a:	e0 91 54 0a 	lds	r30, 0x0A54	; 0x800a54 <__flp>
    4b8e:	f0 91 55 0a 	lds	r31, 0x0A55	; 0x800a55 <__flp+0x1>
    4b92:	20 e0       	ldi	r18, 0x00	; 0
    4b94:	30 e0       	ldi	r19, 0x00	; 0
    4b96:	a0 e0       	ldi	r26, 0x00	; 0
    4b98:	b0 e0       	ldi	r27, 0x00	; 0
    4b9a:	30 97       	sbiw	r30, 0x00	; 0
    4b9c:	19 f1       	breq	.+70     	; 0x4be4 <malloc+0x6c>
    4b9e:	40 81       	ld	r20, Z
    4ba0:	51 81       	ldd	r21, Z+1	; 0x01
    4ba2:	02 81       	ldd	r16, Z+2	; 0x02
    4ba4:	13 81       	ldd	r17, Z+3	; 0x03
    4ba6:	48 17       	cp	r20, r24
    4ba8:	59 07       	cpc	r21, r25
    4baa:	c8 f0       	brcs	.+50     	; 0x4bde <malloc+0x66>
    4bac:	84 17       	cp	r24, r20
    4bae:	95 07       	cpc	r25, r21
    4bb0:	69 f4       	brne	.+26     	; 0x4bcc <malloc+0x54>
    4bb2:	10 97       	sbiw	r26, 0x00	; 0
    4bb4:	31 f0       	breq	.+12     	; 0x4bc2 <malloc+0x4a>
    4bb6:	12 96       	adiw	r26, 0x02	; 2
    4bb8:	0c 93       	st	X, r16
    4bba:	12 97       	sbiw	r26, 0x02	; 2
    4bbc:	13 96       	adiw	r26, 0x03	; 3
    4bbe:	1c 93       	st	X, r17
    4bc0:	27 c0       	rjmp	.+78     	; 0x4c10 <malloc+0x98>
    4bc2:	00 93 54 0a 	sts	0x0A54, r16	; 0x800a54 <__flp>
    4bc6:	10 93 55 0a 	sts	0x0A55, r17	; 0x800a55 <__flp+0x1>
    4bca:	22 c0       	rjmp	.+68     	; 0x4c10 <malloc+0x98>
    4bcc:	21 15       	cp	r18, r1
    4bce:	31 05       	cpc	r19, r1
    4bd0:	19 f0       	breq	.+6      	; 0x4bd8 <malloc+0x60>
    4bd2:	42 17       	cp	r20, r18
    4bd4:	53 07       	cpc	r21, r19
    4bd6:	18 f4       	brcc	.+6      	; 0x4bde <malloc+0x66>
    4bd8:	9a 01       	movw	r18, r20
    4bda:	bd 01       	movw	r22, r26
    4bdc:	ef 01       	movw	r28, r30
    4bde:	df 01       	movw	r26, r30
    4be0:	f8 01       	movw	r30, r16
    4be2:	db cf       	rjmp	.-74     	; 0x4b9a <malloc+0x22>
    4be4:	21 15       	cp	r18, r1
    4be6:	31 05       	cpc	r19, r1
    4be8:	f9 f0       	breq	.+62     	; 0x4c28 <malloc+0xb0>
    4bea:	28 1b       	sub	r18, r24
    4bec:	39 0b       	sbc	r19, r25
    4bee:	24 30       	cpi	r18, 0x04	; 4
    4bf0:	31 05       	cpc	r19, r1
    4bf2:	80 f4       	brcc	.+32     	; 0x4c14 <malloc+0x9c>
    4bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    4bf6:	9b 81       	ldd	r25, Y+3	; 0x03
    4bf8:	61 15       	cp	r22, r1
    4bfa:	71 05       	cpc	r23, r1
    4bfc:	21 f0       	breq	.+8      	; 0x4c06 <malloc+0x8e>
    4bfe:	fb 01       	movw	r30, r22
    4c00:	93 83       	std	Z+3, r25	; 0x03
    4c02:	82 83       	std	Z+2, r24	; 0x02
    4c04:	04 c0       	rjmp	.+8      	; 0x4c0e <malloc+0x96>
    4c06:	90 93 55 0a 	sts	0x0A55, r25	; 0x800a55 <__flp+0x1>
    4c0a:	80 93 54 0a 	sts	0x0A54, r24	; 0x800a54 <__flp>
    4c0e:	fe 01       	movw	r30, r28
    4c10:	32 96       	adiw	r30, 0x02	; 2
    4c12:	44 c0       	rjmp	.+136    	; 0x4c9c <malloc+0x124>
    4c14:	fe 01       	movw	r30, r28
    4c16:	e2 0f       	add	r30, r18
    4c18:	f3 1f       	adc	r31, r19
    4c1a:	81 93       	st	Z+, r24
    4c1c:	91 93       	st	Z+, r25
    4c1e:	22 50       	subi	r18, 0x02	; 2
    4c20:	31 09       	sbc	r19, r1
    4c22:	39 83       	std	Y+1, r19	; 0x01
    4c24:	28 83       	st	Y, r18
    4c26:	3a c0       	rjmp	.+116    	; 0x4c9c <malloc+0x124>
    4c28:	20 91 52 0a 	lds	r18, 0x0A52	; 0x800a52 <__brkval>
    4c2c:	30 91 53 0a 	lds	r19, 0x0A53	; 0x800a53 <__brkval+0x1>
    4c30:	23 2b       	or	r18, r19
    4c32:	41 f4       	brne	.+16     	; 0x4c44 <malloc+0xcc>
    4c34:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    4c38:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    4c3c:	30 93 53 0a 	sts	0x0A53, r19	; 0x800a53 <__brkval+0x1>
    4c40:	20 93 52 0a 	sts	0x0A52, r18	; 0x800a52 <__brkval>
    4c44:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    4c48:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    4c4c:	21 15       	cp	r18, r1
    4c4e:	31 05       	cpc	r19, r1
    4c50:	41 f4       	brne	.+16     	; 0x4c62 <malloc+0xea>
    4c52:	2d b7       	in	r18, 0x3d	; 61
    4c54:	3e b7       	in	r19, 0x3e	; 62
    4c56:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4c5a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4c5e:	24 1b       	sub	r18, r20
    4c60:	35 0b       	sbc	r19, r21
    4c62:	e0 91 52 0a 	lds	r30, 0x0A52	; 0x800a52 <__brkval>
    4c66:	f0 91 53 0a 	lds	r31, 0x0A53	; 0x800a53 <__brkval+0x1>
    4c6a:	e2 17       	cp	r30, r18
    4c6c:	f3 07       	cpc	r31, r19
    4c6e:	a0 f4       	brcc	.+40     	; 0x4c98 <malloc+0x120>
    4c70:	2e 1b       	sub	r18, r30
    4c72:	3f 0b       	sbc	r19, r31
    4c74:	28 17       	cp	r18, r24
    4c76:	39 07       	cpc	r19, r25
    4c78:	78 f0       	brcs	.+30     	; 0x4c98 <malloc+0x120>
    4c7a:	ac 01       	movw	r20, r24
    4c7c:	4e 5f       	subi	r20, 0xFE	; 254
    4c7e:	5f 4f       	sbci	r21, 0xFF	; 255
    4c80:	24 17       	cp	r18, r20
    4c82:	35 07       	cpc	r19, r21
    4c84:	48 f0       	brcs	.+18     	; 0x4c98 <malloc+0x120>
    4c86:	4e 0f       	add	r20, r30
    4c88:	5f 1f       	adc	r21, r31
    4c8a:	50 93 53 0a 	sts	0x0A53, r21	; 0x800a53 <__brkval+0x1>
    4c8e:	40 93 52 0a 	sts	0x0A52, r20	; 0x800a52 <__brkval>
    4c92:	81 93       	st	Z+, r24
    4c94:	91 93       	st	Z+, r25
    4c96:	02 c0       	rjmp	.+4      	; 0x4c9c <malloc+0x124>
    4c98:	e0 e0       	ldi	r30, 0x00	; 0
    4c9a:	f0 e0       	ldi	r31, 0x00	; 0
    4c9c:	cf 01       	movw	r24, r30
    4c9e:	df 91       	pop	r29
    4ca0:	cf 91       	pop	r28
    4ca2:	1f 91       	pop	r17
    4ca4:	0f 91       	pop	r16
    4ca6:	08 95       	ret

00004ca8 <free>:
    4ca8:	cf 93       	push	r28
    4caa:	df 93       	push	r29
    4cac:	00 97       	sbiw	r24, 0x00	; 0
    4cae:	09 f4       	brne	.+2      	; 0x4cb2 <free+0xa>
    4cb0:	81 c0       	rjmp	.+258    	; 0x4db4 <free+0x10c>
    4cb2:	fc 01       	movw	r30, r24
    4cb4:	32 97       	sbiw	r30, 0x02	; 2
    4cb6:	13 82       	std	Z+3, r1	; 0x03
    4cb8:	12 82       	std	Z+2, r1	; 0x02
    4cba:	a0 91 54 0a 	lds	r26, 0x0A54	; 0x800a54 <__flp>
    4cbe:	b0 91 55 0a 	lds	r27, 0x0A55	; 0x800a55 <__flp+0x1>
    4cc2:	10 97       	sbiw	r26, 0x00	; 0
    4cc4:	81 f4       	brne	.+32     	; 0x4ce6 <free+0x3e>
    4cc6:	20 81       	ld	r18, Z
    4cc8:	31 81       	ldd	r19, Z+1	; 0x01
    4cca:	82 0f       	add	r24, r18
    4ccc:	93 1f       	adc	r25, r19
    4cce:	20 91 52 0a 	lds	r18, 0x0A52	; 0x800a52 <__brkval>
    4cd2:	30 91 53 0a 	lds	r19, 0x0A53	; 0x800a53 <__brkval+0x1>
    4cd6:	28 17       	cp	r18, r24
    4cd8:	39 07       	cpc	r19, r25
    4cda:	51 f5       	brne	.+84     	; 0x4d30 <free+0x88>
    4cdc:	f0 93 53 0a 	sts	0x0A53, r31	; 0x800a53 <__brkval+0x1>
    4ce0:	e0 93 52 0a 	sts	0x0A52, r30	; 0x800a52 <__brkval>
    4ce4:	67 c0       	rjmp	.+206    	; 0x4db4 <free+0x10c>
    4ce6:	ed 01       	movw	r28, r26
    4ce8:	20 e0       	ldi	r18, 0x00	; 0
    4cea:	30 e0       	ldi	r19, 0x00	; 0
    4cec:	ce 17       	cp	r28, r30
    4cee:	df 07       	cpc	r29, r31
    4cf0:	40 f4       	brcc	.+16     	; 0x4d02 <free+0x5a>
    4cf2:	4a 81       	ldd	r20, Y+2	; 0x02
    4cf4:	5b 81       	ldd	r21, Y+3	; 0x03
    4cf6:	9e 01       	movw	r18, r28
    4cf8:	41 15       	cp	r20, r1
    4cfa:	51 05       	cpc	r21, r1
    4cfc:	f1 f0       	breq	.+60     	; 0x4d3a <free+0x92>
    4cfe:	ea 01       	movw	r28, r20
    4d00:	f5 cf       	rjmp	.-22     	; 0x4cec <free+0x44>
    4d02:	d3 83       	std	Z+3, r29	; 0x03
    4d04:	c2 83       	std	Z+2, r28	; 0x02
    4d06:	40 81       	ld	r20, Z
    4d08:	51 81       	ldd	r21, Z+1	; 0x01
    4d0a:	84 0f       	add	r24, r20
    4d0c:	95 1f       	adc	r25, r21
    4d0e:	c8 17       	cp	r28, r24
    4d10:	d9 07       	cpc	r29, r25
    4d12:	59 f4       	brne	.+22     	; 0x4d2a <free+0x82>
    4d14:	88 81       	ld	r24, Y
    4d16:	99 81       	ldd	r25, Y+1	; 0x01
    4d18:	84 0f       	add	r24, r20
    4d1a:	95 1f       	adc	r25, r21
    4d1c:	02 96       	adiw	r24, 0x02	; 2
    4d1e:	91 83       	std	Z+1, r25	; 0x01
    4d20:	80 83       	st	Z, r24
    4d22:	8a 81       	ldd	r24, Y+2	; 0x02
    4d24:	9b 81       	ldd	r25, Y+3	; 0x03
    4d26:	93 83       	std	Z+3, r25	; 0x03
    4d28:	82 83       	std	Z+2, r24	; 0x02
    4d2a:	21 15       	cp	r18, r1
    4d2c:	31 05       	cpc	r19, r1
    4d2e:	29 f4       	brne	.+10     	; 0x4d3a <free+0x92>
    4d30:	f0 93 55 0a 	sts	0x0A55, r31	; 0x800a55 <__flp+0x1>
    4d34:	e0 93 54 0a 	sts	0x0A54, r30	; 0x800a54 <__flp>
    4d38:	3d c0       	rjmp	.+122    	; 0x4db4 <free+0x10c>
    4d3a:	e9 01       	movw	r28, r18
    4d3c:	fb 83       	std	Y+3, r31	; 0x03
    4d3e:	ea 83       	std	Y+2, r30	; 0x02
    4d40:	49 91       	ld	r20, Y+
    4d42:	59 91       	ld	r21, Y+
    4d44:	c4 0f       	add	r28, r20
    4d46:	d5 1f       	adc	r29, r21
    4d48:	ec 17       	cp	r30, r28
    4d4a:	fd 07       	cpc	r31, r29
    4d4c:	61 f4       	brne	.+24     	; 0x4d66 <free+0xbe>
    4d4e:	80 81       	ld	r24, Z
    4d50:	91 81       	ldd	r25, Z+1	; 0x01
    4d52:	84 0f       	add	r24, r20
    4d54:	95 1f       	adc	r25, r21
    4d56:	02 96       	adiw	r24, 0x02	; 2
    4d58:	e9 01       	movw	r28, r18
    4d5a:	99 83       	std	Y+1, r25	; 0x01
    4d5c:	88 83       	st	Y, r24
    4d5e:	82 81       	ldd	r24, Z+2	; 0x02
    4d60:	93 81       	ldd	r25, Z+3	; 0x03
    4d62:	9b 83       	std	Y+3, r25	; 0x03
    4d64:	8a 83       	std	Y+2, r24	; 0x02
    4d66:	e0 e0       	ldi	r30, 0x00	; 0
    4d68:	f0 e0       	ldi	r31, 0x00	; 0
    4d6a:	12 96       	adiw	r26, 0x02	; 2
    4d6c:	8d 91       	ld	r24, X+
    4d6e:	9c 91       	ld	r25, X
    4d70:	13 97       	sbiw	r26, 0x03	; 3
    4d72:	00 97       	sbiw	r24, 0x00	; 0
    4d74:	19 f0       	breq	.+6      	; 0x4d7c <free+0xd4>
    4d76:	fd 01       	movw	r30, r26
    4d78:	dc 01       	movw	r26, r24
    4d7a:	f7 cf       	rjmp	.-18     	; 0x4d6a <free+0xc2>
    4d7c:	8d 91       	ld	r24, X+
    4d7e:	9c 91       	ld	r25, X
    4d80:	11 97       	sbiw	r26, 0x01	; 1
    4d82:	9d 01       	movw	r18, r26
    4d84:	2e 5f       	subi	r18, 0xFE	; 254
    4d86:	3f 4f       	sbci	r19, 0xFF	; 255
    4d88:	82 0f       	add	r24, r18
    4d8a:	93 1f       	adc	r25, r19
    4d8c:	20 91 52 0a 	lds	r18, 0x0A52	; 0x800a52 <__brkval>
    4d90:	30 91 53 0a 	lds	r19, 0x0A53	; 0x800a53 <__brkval+0x1>
    4d94:	28 17       	cp	r18, r24
    4d96:	39 07       	cpc	r19, r25
    4d98:	69 f4       	brne	.+26     	; 0x4db4 <free+0x10c>
    4d9a:	30 97       	sbiw	r30, 0x00	; 0
    4d9c:	29 f4       	brne	.+10     	; 0x4da8 <free+0x100>
    4d9e:	10 92 55 0a 	sts	0x0A55, r1	; 0x800a55 <__flp+0x1>
    4da2:	10 92 54 0a 	sts	0x0A54, r1	; 0x800a54 <__flp>
    4da6:	02 c0       	rjmp	.+4      	; 0x4dac <free+0x104>
    4da8:	13 82       	std	Z+3, r1	; 0x03
    4daa:	12 82       	std	Z+2, r1	; 0x02
    4dac:	b0 93 53 0a 	sts	0x0A53, r27	; 0x800a53 <__brkval+0x1>
    4db0:	a0 93 52 0a 	sts	0x0A52, r26	; 0x800a52 <__brkval>
    4db4:	df 91       	pop	r29
    4db6:	cf 91       	pop	r28
    4db8:	08 95       	ret

00004dba <abort>:
    4dba:	81 e0       	ldi	r24, 0x01	; 1
    4dbc:	90 e0       	ldi	r25, 0x00	; 0
    4dbe:	f8 94       	cli
    4dc0:	58 c3       	rjmp	.+1712   	; 0x5472 <_exit>

00004dc2 <memcpy>:
    4dc2:	fb 01       	movw	r30, r22
    4dc4:	dc 01       	movw	r26, r24
    4dc6:	02 c0       	rjmp	.+4      	; 0x4dcc <memcpy+0xa>
    4dc8:	01 90       	ld	r0, Z+
    4dca:	0d 92       	st	X+, r0
    4dcc:	41 50       	subi	r20, 0x01	; 1
    4dce:	50 40       	sbci	r21, 0x00	; 0
    4dd0:	d8 f7       	brcc	.-10     	; 0x4dc8 <memcpy+0x6>
    4dd2:	08 95       	ret

00004dd4 <memset>:
    4dd4:	dc 01       	movw	r26, r24
    4dd6:	01 c0       	rjmp	.+2      	; 0x4dda <memset+0x6>
    4dd8:	6d 93       	st	X+, r22
    4dda:	41 50       	subi	r20, 0x01	; 1
    4ddc:	50 40       	sbci	r21, 0x00	; 0
    4dde:	e0 f7       	brcc	.-8      	; 0x4dd8 <memset+0x4>
    4de0:	08 95       	ret

00004de2 <strcat>:
    4de2:	fb 01       	movw	r30, r22
    4de4:	dc 01       	movw	r26, r24
    4de6:	0d 90       	ld	r0, X+
    4de8:	00 20       	and	r0, r0
    4dea:	e9 f7       	brne	.-6      	; 0x4de6 <strcat+0x4>
    4dec:	11 97       	sbiw	r26, 0x01	; 1
    4dee:	01 90       	ld	r0, Z+
    4df0:	0d 92       	st	X+, r0
    4df2:	00 20       	and	r0, r0
    4df4:	e1 f7       	brne	.-8      	; 0x4dee <strcat+0xc>
    4df6:	08 95       	ret

00004df8 <strcpy>:
    4df8:	fb 01       	movw	r30, r22
    4dfa:	dc 01       	movw	r26, r24
    4dfc:	01 90       	ld	r0, Z+
    4dfe:	0d 92       	st	X+, r0
    4e00:	00 20       	and	r0, r0
    4e02:	e1 f7       	brne	.-8      	; 0x4dfc <strcpy+0x4>
    4e04:	08 95       	ret

00004e06 <strncasecmp>:
    4e06:	fb 01       	movw	r30, r22
    4e08:	dc 01       	movw	r26, r24
    4e0a:	41 50       	subi	r20, 0x01	; 1
    4e0c:	50 40       	sbci	r21, 0x00	; 0
    4e0e:	88 f0       	brcs	.+34     	; 0x4e32 <strncasecmp+0x2c>
    4e10:	8d 91       	ld	r24, X+
    4e12:	81 34       	cpi	r24, 0x41	; 65
    4e14:	1c f0       	brlt	.+6      	; 0x4e1c <strncasecmp+0x16>
    4e16:	8b 35       	cpi	r24, 0x5B	; 91
    4e18:	0c f4       	brge	.+2      	; 0x4e1c <strncasecmp+0x16>
    4e1a:	80 5e       	subi	r24, 0xE0	; 224
    4e1c:	61 91       	ld	r22, Z+
    4e1e:	61 34       	cpi	r22, 0x41	; 65
    4e20:	1c f0       	brlt	.+6      	; 0x4e28 <strncasecmp+0x22>
    4e22:	6b 35       	cpi	r22, 0x5B	; 91
    4e24:	0c f4       	brge	.+2      	; 0x4e28 <strncasecmp+0x22>
    4e26:	60 5e       	subi	r22, 0xE0	; 224
    4e28:	86 1b       	sub	r24, r22
    4e2a:	61 11       	cpse	r22, r1
    4e2c:	71 f3       	breq	.-36     	; 0x4e0a <strncasecmp+0x4>
    4e2e:	99 0b       	sbc	r25, r25
    4e30:	08 95       	ret
    4e32:	88 1b       	sub	r24, r24
    4e34:	fc cf       	rjmp	.-8      	; 0x4e2e <strncasecmp+0x28>

00004e36 <printf>:
    4e36:	cf 93       	push	r28
    4e38:	df 93       	push	r29
    4e3a:	cd b7       	in	r28, 0x3d	; 61
    4e3c:	de b7       	in	r29, 0x3e	; 62
    4e3e:	ae 01       	movw	r20, r28
    4e40:	4a 5f       	subi	r20, 0xFA	; 250
    4e42:	5f 4f       	sbci	r21, 0xFF	; 255
    4e44:	fa 01       	movw	r30, r20
    4e46:	61 91       	ld	r22, Z+
    4e48:	71 91       	ld	r23, Z+
    4e4a:	af 01       	movw	r20, r30
    4e4c:	80 91 58 0a 	lds	r24, 0x0A58	; 0x800a58 <__iob+0x2>
    4e50:	90 91 59 0a 	lds	r25, 0x0A59	; 0x800a59 <__iob+0x3>
    4e54:	61 d0       	rcall	.+194    	; 0x4f18 <vfprintf>
    4e56:	df 91       	pop	r29
    4e58:	cf 91       	pop	r28
    4e5a:	08 95       	ret

00004e5c <puts>:
    4e5c:	0f 93       	push	r16
    4e5e:	1f 93       	push	r17
    4e60:	cf 93       	push	r28
    4e62:	df 93       	push	r29
    4e64:	e0 91 58 0a 	lds	r30, 0x0A58	; 0x800a58 <__iob+0x2>
    4e68:	f0 91 59 0a 	lds	r31, 0x0A59	; 0x800a59 <__iob+0x3>
    4e6c:	23 81       	ldd	r18, Z+3	; 0x03
    4e6e:	21 ff       	sbrs	r18, 1
    4e70:	1b c0       	rjmp	.+54     	; 0x4ea8 <puts+0x4c>
    4e72:	8c 01       	movw	r16, r24
    4e74:	d0 e0       	ldi	r29, 0x00	; 0
    4e76:	c0 e0       	ldi	r28, 0x00	; 0
    4e78:	f8 01       	movw	r30, r16
    4e7a:	81 91       	ld	r24, Z+
    4e7c:	8f 01       	movw	r16, r30
    4e7e:	60 91 58 0a 	lds	r22, 0x0A58	; 0x800a58 <__iob+0x2>
    4e82:	70 91 59 0a 	lds	r23, 0x0A59	; 0x800a59 <__iob+0x3>
    4e86:	db 01       	movw	r26, r22
    4e88:	18 96       	adiw	r26, 0x08	; 8
    4e8a:	ed 91       	ld	r30, X+
    4e8c:	fc 91       	ld	r31, X
    4e8e:	19 97       	sbiw	r26, 0x09	; 9
    4e90:	88 23       	and	r24, r24
    4e92:	31 f0       	breq	.+12     	; 0x4ea0 <puts+0x44>
    4e94:	19 95       	eicall
    4e96:	89 2b       	or	r24, r25
    4e98:	79 f3       	breq	.-34     	; 0x4e78 <puts+0x1c>
    4e9a:	df ef       	ldi	r29, 0xFF	; 255
    4e9c:	cf ef       	ldi	r28, 0xFF	; 255
    4e9e:	ec cf       	rjmp	.-40     	; 0x4e78 <puts+0x1c>
    4ea0:	8a e0       	ldi	r24, 0x0A	; 10
    4ea2:	19 95       	eicall
    4ea4:	89 2b       	or	r24, r25
    4ea6:	19 f0       	breq	.+6      	; 0x4eae <puts+0x52>
    4ea8:	8f ef       	ldi	r24, 0xFF	; 255
    4eaa:	9f ef       	ldi	r25, 0xFF	; 255
    4eac:	02 c0       	rjmp	.+4      	; 0x4eb2 <puts+0x56>
    4eae:	8d 2f       	mov	r24, r29
    4eb0:	9c 2f       	mov	r25, r28
    4eb2:	df 91       	pop	r29
    4eb4:	cf 91       	pop	r28
    4eb6:	1f 91       	pop	r17
    4eb8:	0f 91       	pop	r16
    4eba:	08 95       	ret

00004ebc <sprintf>:
    4ebc:	0f 93       	push	r16
    4ebe:	1f 93       	push	r17
    4ec0:	cf 93       	push	r28
    4ec2:	df 93       	push	r29
    4ec4:	cd b7       	in	r28, 0x3d	; 61
    4ec6:	de b7       	in	r29, 0x3e	; 62
    4ec8:	2e 97       	sbiw	r28, 0x0e	; 14
    4eca:	0f b6       	in	r0, 0x3f	; 63
    4ecc:	f8 94       	cli
    4ece:	de bf       	out	0x3e, r29	; 62
    4ed0:	0f be       	out	0x3f, r0	; 63
    4ed2:	cd bf       	out	0x3d, r28	; 61
    4ed4:	0e 89       	ldd	r16, Y+22	; 0x16
    4ed6:	1f 89       	ldd	r17, Y+23	; 0x17
    4ed8:	86 e0       	ldi	r24, 0x06	; 6
    4eda:	8c 83       	std	Y+4, r24	; 0x04
    4edc:	1a 83       	std	Y+2, r17	; 0x02
    4ede:	09 83       	std	Y+1, r16	; 0x01
    4ee0:	8f ef       	ldi	r24, 0xFF	; 255
    4ee2:	9f e7       	ldi	r25, 0x7F	; 127
    4ee4:	9e 83       	std	Y+6, r25	; 0x06
    4ee6:	8d 83       	std	Y+5, r24	; 0x05
    4ee8:	ae 01       	movw	r20, r28
    4eea:	46 5e       	subi	r20, 0xE6	; 230
    4eec:	5f 4f       	sbci	r21, 0xFF	; 255
    4eee:	68 8d       	ldd	r22, Y+24	; 0x18
    4ef0:	79 8d       	ldd	r23, Y+25	; 0x19
    4ef2:	ce 01       	movw	r24, r28
    4ef4:	01 96       	adiw	r24, 0x01	; 1
    4ef6:	10 d0       	rcall	.+32     	; 0x4f18 <vfprintf>
    4ef8:	ef 81       	ldd	r30, Y+7	; 0x07
    4efa:	f8 85       	ldd	r31, Y+8	; 0x08
    4efc:	e0 0f       	add	r30, r16
    4efe:	f1 1f       	adc	r31, r17
    4f00:	10 82       	st	Z, r1
    4f02:	2e 96       	adiw	r28, 0x0e	; 14
    4f04:	0f b6       	in	r0, 0x3f	; 63
    4f06:	f8 94       	cli
    4f08:	de bf       	out	0x3e, r29	; 62
    4f0a:	0f be       	out	0x3f, r0	; 63
    4f0c:	cd bf       	out	0x3d, r28	; 61
    4f0e:	df 91       	pop	r29
    4f10:	cf 91       	pop	r28
    4f12:	1f 91       	pop	r17
    4f14:	0f 91       	pop	r16
    4f16:	08 95       	ret

00004f18 <vfprintf>:
    4f18:	2f 92       	push	r2
    4f1a:	3f 92       	push	r3
    4f1c:	4f 92       	push	r4
    4f1e:	5f 92       	push	r5
    4f20:	6f 92       	push	r6
    4f22:	7f 92       	push	r7
    4f24:	8f 92       	push	r8
    4f26:	9f 92       	push	r9
    4f28:	af 92       	push	r10
    4f2a:	bf 92       	push	r11
    4f2c:	cf 92       	push	r12
    4f2e:	df 92       	push	r13
    4f30:	ef 92       	push	r14
    4f32:	ff 92       	push	r15
    4f34:	0f 93       	push	r16
    4f36:	1f 93       	push	r17
    4f38:	cf 93       	push	r28
    4f3a:	df 93       	push	r29
    4f3c:	cd b7       	in	r28, 0x3d	; 61
    4f3e:	de b7       	in	r29, 0x3e	; 62
    4f40:	2b 97       	sbiw	r28, 0x0b	; 11
    4f42:	0f b6       	in	r0, 0x3f	; 63
    4f44:	f8 94       	cli
    4f46:	de bf       	out	0x3e, r29	; 62
    4f48:	0f be       	out	0x3f, r0	; 63
    4f4a:	cd bf       	out	0x3d, r28	; 61
    4f4c:	6c 01       	movw	r12, r24
    4f4e:	7b 01       	movw	r14, r22
    4f50:	8a 01       	movw	r16, r20
    4f52:	fc 01       	movw	r30, r24
    4f54:	17 82       	std	Z+7, r1	; 0x07
    4f56:	16 82       	std	Z+6, r1	; 0x06
    4f58:	83 81       	ldd	r24, Z+3	; 0x03
    4f5a:	81 ff       	sbrs	r24, 1
    4f5c:	bf c1       	rjmp	.+894    	; 0x52dc <vfprintf+0x3c4>
    4f5e:	ce 01       	movw	r24, r28
    4f60:	01 96       	adiw	r24, 0x01	; 1
    4f62:	3c 01       	movw	r6, r24
    4f64:	f6 01       	movw	r30, r12
    4f66:	93 81       	ldd	r25, Z+3	; 0x03
    4f68:	f7 01       	movw	r30, r14
    4f6a:	93 fd       	sbrc	r25, 3
    4f6c:	85 91       	lpm	r24, Z+
    4f6e:	93 ff       	sbrs	r25, 3
    4f70:	81 91       	ld	r24, Z+
    4f72:	7f 01       	movw	r14, r30
    4f74:	88 23       	and	r24, r24
    4f76:	09 f4       	brne	.+2      	; 0x4f7a <vfprintf+0x62>
    4f78:	ad c1       	rjmp	.+858    	; 0x52d4 <vfprintf+0x3bc>
    4f7a:	85 32       	cpi	r24, 0x25	; 37
    4f7c:	39 f4       	brne	.+14     	; 0x4f8c <vfprintf+0x74>
    4f7e:	93 fd       	sbrc	r25, 3
    4f80:	85 91       	lpm	r24, Z+
    4f82:	93 ff       	sbrs	r25, 3
    4f84:	81 91       	ld	r24, Z+
    4f86:	7f 01       	movw	r14, r30
    4f88:	85 32       	cpi	r24, 0x25	; 37
    4f8a:	21 f4       	brne	.+8      	; 0x4f94 <vfprintf+0x7c>
    4f8c:	b6 01       	movw	r22, r12
    4f8e:	90 e0       	ldi	r25, 0x00	; 0
    4f90:	d6 d1       	rcall	.+940    	; 0x533e <fputc>
    4f92:	e8 cf       	rjmp	.-48     	; 0x4f64 <vfprintf+0x4c>
    4f94:	91 2c       	mov	r9, r1
    4f96:	21 2c       	mov	r2, r1
    4f98:	31 2c       	mov	r3, r1
    4f9a:	ff e1       	ldi	r31, 0x1F	; 31
    4f9c:	f3 15       	cp	r31, r3
    4f9e:	d8 f0       	brcs	.+54     	; 0x4fd6 <vfprintf+0xbe>
    4fa0:	8b 32       	cpi	r24, 0x2B	; 43
    4fa2:	79 f0       	breq	.+30     	; 0x4fc2 <vfprintf+0xaa>
    4fa4:	38 f4       	brcc	.+14     	; 0x4fb4 <vfprintf+0x9c>
    4fa6:	80 32       	cpi	r24, 0x20	; 32
    4fa8:	79 f0       	breq	.+30     	; 0x4fc8 <vfprintf+0xb0>
    4faa:	83 32       	cpi	r24, 0x23	; 35
    4fac:	a1 f4       	brne	.+40     	; 0x4fd6 <vfprintf+0xbe>
    4fae:	23 2d       	mov	r18, r3
    4fb0:	20 61       	ori	r18, 0x10	; 16
    4fb2:	1d c0       	rjmp	.+58     	; 0x4fee <vfprintf+0xd6>
    4fb4:	8d 32       	cpi	r24, 0x2D	; 45
    4fb6:	61 f0       	breq	.+24     	; 0x4fd0 <vfprintf+0xb8>
    4fb8:	80 33       	cpi	r24, 0x30	; 48
    4fba:	69 f4       	brne	.+26     	; 0x4fd6 <vfprintf+0xbe>
    4fbc:	23 2d       	mov	r18, r3
    4fbe:	21 60       	ori	r18, 0x01	; 1
    4fc0:	16 c0       	rjmp	.+44     	; 0x4fee <vfprintf+0xd6>
    4fc2:	83 2d       	mov	r24, r3
    4fc4:	82 60       	ori	r24, 0x02	; 2
    4fc6:	38 2e       	mov	r3, r24
    4fc8:	e3 2d       	mov	r30, r3
    4fca:	e4 60       	ori	r30, 0x04	; 4
    4fcc:	3e 2e       	mov	r3, r30
    4fce:	2a c0       	rjmp	.+84     	; 0x5024 <vfprintf+0x10c>
    4fd0:	f3 2d       	mov	r31, r3
    4fd2:	f8 60       	ori	r31, 0x08	; 8
    4fd4:	1d c0       	rjmp	.+58     	; 0x5010 <vfprintf+0xf8>
    4fd6:	37 fc       	sbrc	r3, 7
    4fd8:	2d c0       	rjmp	.+90     	; 0x5034 <vfprintf+0x11c>
    4fda:	20 ed       	ldi	r18, 0xD0	; 208
    4fdc:	28 0f       	add	r18, r24
    4fde:	2a 30       	cpi	r18, 0x0A	; 10
    4fe0:	40 f0       	brcs	.+16     	; 0x4ff2 <vfprintf+0xda>
    4fe2:	8e 32       	cpi	r24, 0x2E	; 46
    4fe4:	b9 f4       	brne	.+46     	; 0x5014 <vfprintf+0xfc>
    4fe6:	36 fc       	sbrc	r3, 6
    4fe8:	75 c1       	rjmp	.+746    	; 0x52d4 <vfprintf+0x3bc>
    4fea:	23 2d       	mov	r18, r3
    4fec:	20 64       	ori	r18, 0x40	; 64
    4fee:	32 2e       	mov	r3, r18
    4ff0:	19 c0       	rjmp	.+50     	; 0x5024 <vfprintf+0x10c>
    4ff2:	36 fe       	sbrs	r3, 6
    4ff4:	06 c0       	rjmp	.+12     	; 0x5002 <vfprintf+0xea>
    4ff6:	8a e0       	ldi	r24, 0x0A	; 10
    4ff8:	98 9e       	mul	r9, r24
    4ffa:	20 0d       	add	r18, r0
    4ffc:	11 24       	eor	r1, r1
    4ffe:	92 2e       	mov	r9, r18
    5000:	11 c0       	rjmp	.+34     	; 0x5024 <vfprintf+0x10c>
    5002:	ea e0       	ldi	r30, 0x0A	; 10
    5004:	2e 9e       	mul	r2, r30
    5006:	20 0d       	add	r18, r0
    5008:	11 24       	eor	r1, r1
    500a:	22 2e       	mov	r2, r18
    500c:	f3 2d       	mov	r31, r3
    500e:	f0 62       	ori	r31, 0x20	; 32
    5010:	3f 2e       	mov	r3, r31
    5012:	08 c0       	rjmp	.+16     	; 0x5024 <vfprintf+0x10c>
    5014:	8c 36       	cpi	r24, 0x6C	; 108
    5016:	21 f4       	brne	.+8      	; 0x5020 <vfprintf+0x108>
    5018:	83 2d       	mov	r24, r3
    501a:	80 68       	ori	r24, 0x80	; 128
    501c:	38 2e       	mov	r3, r24
    501e:	02 c0       	rjmp	.+4      	; 0x5024 <vfprintf+0x10c>
    5020:	88 36       	cpi	r24, 0x68	; 104
    5022:	41 f4       	brne	.+16     	; 0x5034 <vfprintf+0x11c>
    5024:	f7 01       	movw	r30, r14
    5026:	93 fd       	sbrc	r25, 3
    5028:	85 91       	lpm	r24, Z+
    502a:	93 ff       	sbrs	r25, 3
    502c:	81 91       	ld	r24, Z+
    502e:	7f 01       	movw	r14, r30
    5030:	81 11       	cpse	r24, r1
    5032:	b3 cf       	rjmp	.-154    	; 0x4f9a <vfprintf+0x82>
    5034:	98 2f       	mov	r25, r24
    5036:	9f 7d       	andi	r25, 0xDF	; 223
    5038:	95 54       	subi	r25, 0x45	; 69
    503a:	93 30       	cpi	r25, 0x03	; 3
    503c:	28 f4       	brcc	.+10     	; 0x5048 <vfprintf+0x130>
    503e:	0c 5f       	subi	r16, 0xFC	; 252
    5040:	1f 4f       	sbci	r17, 0xFF	; 255
    5042:	9f e3       	ldi	r25, 0x3F	; 63
    5044:	99 83       	std	Y+1, r25	; 0x01
    5046:	0d c0       	rjmp	.+26     	; 0x5062 <vfprintf+0x14a>
    5048:	83 36       	cpi	r24, 0x63	; 99
    504a:	31 f0       	breq	.+12     	; 0x5058 <vfprintf+0x140>
    504c:	83 37       	cpi	r24, 0x73	; 115
    504e:	71 f0       	breq	.+28     	; 0x506c <vfprintf+0x154>
    5050:	83 35       	cpi	r24, 0x53	; 83
    5052:	09 f0       	breq	.+2      	; 0x5056 <vfprintf+0x13e>
    5054:	55 c0       	rjmp	.+170    	; 0x5100 <vfprintf+0x1e8>
    5056:	20 c0       	rjmp	.+64     	; 0x5098 <vfprintf+0x180>
    5058:	f8 01       	movw	r30, r16
    505a:	80 81       	ld	r24, Z
    505c:	89 83       	std	Y+1, r24	; 0x01
    505e:	0e 5f       	subi	r16, 0xFE	; 254
    5060:	1f 4f       	sbci	r17, 0xFF	; 255
    5062:	88 24       	eor	r8, r8
    5064:	83 94       	inc	r8
    5066:	91 2c       	mov	r9, r1
    5068:	53 01       	movw	r10, r6
    506a:	12 c0       	rjmp	.+36     	; 0x5090 <vfprintf+0x178>
    506c:	28 01       	movw	r4, r16
    506e:	f2 e0       	ldi	r31, 0x02	; 2
    5070:	4f 0e       	add	r4, r31
    5072:	51 1c       	adc	r5, r1
    5074:	f8 01       	movw	r30, r16
    5076:	a0 80       	ld	r10, Z
    5078:	b1 80       	ldd	r11, Z+1	; 0x01
    507a:	36 fe       	sbrs	r3, 6
    507c:	03 c0       	rjmp	.+6      	; 0x5084 <vfprintf+0x16c>
    507e:	69 2d       	mov	r22, r9
    5080:	70 e0       	ldi	r23, 0x00	; 0
    5082:	02 c0       	rjmp	.+4      	; 0x5088 <vfprintf+0x170>
    5084:	6f ef       	ldi	r22, 0xFF	; 255
    5086:	7f ef       	ldi	r23, 0xFF	; 255
    5088:	c5 01       	movw	r24, r10
    508a:	4e d1       	rcall	.+668    	; 0x5328 <strnlen>
    508c:	4c 01       	movw	r8, r24
    508e:	82 01       	movw	r16, r4
    5090:	f3 2d       	mov	r31, r3
    5092:	ff 77       	andi	r31, 0x7F	; 127
    5094:	3f 2e       	mov	r3, r31
    5096:	15 c0       	rjmp	.+42     	; 0x50c2 <vfprintf+0x1aa>
    5098:	28 01       	movw	r4, r16
    509a:	22 e0       	ldi	r18, 0x02	; 2
    509c:	42 0e       	add	r4, r18
    509e:	51 1c       	adc	r5, r1
    50a0:	f8 01       	movw	r30, r16
    50a2:	a0 80       	ld	r10, Z
    50a4:	b1 80       	ldd	r11, Z+1	; 0x01
    50a6:	36 fe       	sbrs	r3, 6
    50a8:	03 c0       	rjmp	.+6      	; 0x50b0 <vfprintf+0x198>
    50aa:	69 2d       	mov	r22, r9
    50ac:	70 e0       	ldi	r23, 0x00	; 0
    50ae:	02 c0       	rjmp	.+4      	; 0x50b4 <vfprintf+0x19c>
    50b0:	6f ef       	ldi	r22, 0xFF	; 255
    50b2:	7f ef       	ldi	r23, 0xFF	; 255
    50b4:	c5 01       	movw	r24, r10
    50b6:	2d d1       	rcall	.+602    	; 0x5312 <strnlen_P>
    50b8:	4c 01       	movw	r8, r24
    50ba:	f3 2d       	mov	r31, r3
    50bc:	f0 68       	ori	r31, 0x80	; 128
    50be:	3f 2e       	mov	r3, r31
    50c0:	82 01       	movw	r16, r4
    50c2:	33 fc       	sbrc	r3, 3
    50c4:	19 c0       	rjmp	.+50     	; 0x50f8 <vfprintf+0x1e0>
    50c6:	82 2d       	mov	r24, r2
    50c8:	90 e0       	ldi	r25, 0x00	; 0
    50ca:	88 16       	cp	r8, r24
    50cc:	99 06       	cpc	r9, r25
    50ce:	a0 f4       	brcc	.+40     	; 0x50f8 <vfprintf+0x1e0>
    50d0:	b6 01       	movw	r22, r12
    50d2:	80 e2       	ldi	r24, 0x20	; 32
    50d4:	90 e0       	ldi	r25, 0x00	; 0
    50d6:	33 d1       	rcall	.+614    	; 0x533e <fputc>
    50d8:	2a 94       	dec	r2
    50da:	f5 cf       	rjmp	.-22     	; 0x50c6 <vfprintf+0x1ae>
    50dc:	f5 01       	movw	r30, r10
    50de:	37 fc       	sbrc	r3, 7
    50e0:	85 91       	lpm	r24, Z+
    50e2:	37 fe       	sbrs	r3, 7
    50e4:	81 91       	ld	r24, Z+
    50e6:	5f 01       	movw	r10, r30
    50e8:	b6 01       	movw	r22, r12
    50ea:	90 e0       	ldi	r25, 0x00	; 0
    50ec:	28 d1       	rcall	.+592    	; 0x533e <fputc>
    50ee:	21 10       	cpse	r2, r1
    50f0:	2a 94       	dec	r2
    50f2:	21 e0       	ldi	r18, 0x01	; 1
    50f4:	82 1a       	sub	r8, r18
    50f6:	91 08       	sbc	r9, r1
    50f8:	81 14       	cp	r8, r1
    50fa:	91 04       	cpc	r9, r1
    50fc:	79 f7       	brne	.-34     	; 0x50dc <vfprintf+0x1c4>
    50fe:	e1 c0       	rjmp	.+450    	; 0x52c2 <vfprintf+0x3aa>
    5100:	84 36       	cpi	r24, 0x64	; 100
    5102:	11 f0       	breq	.+4      	; 0x5108 <vfprintf+0x1f0>
    5104:	89 36       	cpi	r24, 0x69	; 105
    5106:	39 f5       	brne	.+78     	; 0x5156 <vfprintf+0x23e>
    5108:	f8 01       	movw	r30, r16
    510a:	37 fe       	sbrs	r3, 7
    510c:	07 c0       	rjmp	.+14     	; 0x511c <vfprintf+0x204>
    510e:	60 81       	ld	r22, Z
    5110:	71 81       	ldd	r23, Z+1	; 0x01
    5112:	82 81       	ldd	r24, Z+2	; 0x02
    5114:	93 81       	ldd	r25, Z+3	; 0x03
    5116:	0c 5f       	subi	r16, 0xFC	; 252
    5118:	1f 4f       	sbci	r17, 0xFF	; 255
    511a:	08 c0       	rjmp	.+16     	; 0x512c <vfprintf+0x214>
    511c:	60 81       	ld	r22, Z
    511e:	71 81       	ldd	r23, Z+1	; 0x01
    5120:	07 2e       	mov	r0, r23
    5122:	00 0c       	add	r0, r0
    5124:	88 0b       	sbc	r24, r24
    5126:	99 0b       	sbc	r25, r25
    5128:	0e 5f       	subi	r16, 0xFE	; 254
    512a:	1f 4f       	sbci	r17, 0xFF	; 255
    512c:	f3 2d       	mov	r31, r3
    512e:	ff 76       	andi	r31, 0x6F	; 111
    5130:	3f 2e       	mov	r3, r31
    5132:	97 ff       	sbrs	r25, 7
    5134:	09 c0       	rjmp	.+18     	; 0x5148 <vfprintf+0x230>
    5136:	90 95       	com	r25
    5138:	80 95       	com	r24
    513a:	70 95       	com	r23
    513c:	61 95       	neg	r22
    513e:	7f 4f       	sbci	r23, 0xFF	; 255
    5140:	8f 4f       	sbci	r24, 0xFF	; 255
    5142:	9f 4f       	sbci	r25, 0xFF	; 255
    5144:	f0 68       	ori	r31, 0x80	; 128
    5146:	3f 2e       	mov	r3, r31
    5148:	2a e0       	ldi	r18, 0x0A	; 10
    514a:	30 e0       	ldi	r19, 0x00	; 0
    514c:	a3 01       	movw	r20, r6
    514e:	33 d1       	rcall	.+614    	; 0x53b6 <__ultoa_invert>
    5150:	88 2e       	mov	r8, r24
    5152:	86 18       	sub	r8, r6
    5154:	44 c0       	rjmp	.+136    	; 0x51de <vfprintf+0x2c6>
    5156:	85 37       	cpi	r24, 0x75	; 117
    5158:	31 f4       	brne	.+12     	; 0x5166 <vfprintf+0x24e>
    515a:	23 2d       	mov	r18, r3
    515c:	2f 7e       	andi	r18, 0xEF	; 239
    515e:	b2 2e       	mov	r11, r18
    5160:	2a e0       	ldi	r18, 0x0A	; 10
    5162:	30 e0       	ldi	r19, 0x00	; 0
    5164:	25 c0       	rjmp	.+74     	; 0x51b0 <vfprintf+0x298>
    5166:	93 2d       	mov	r25, r3
    5168:	99 7f       	andi	r25, 0xF9	; 249
    516a:	b9 2e       	mov	r11, r25
    516c:	8f 36       	cpi	r24, 0x6F	; 111
    516e:	c1 f0       	breq	.+48     	; 0x51a0 <vfprintf+0x288>
    5170:	18 f4       	brcc	.+6      	; 0x5178 <vfprintf+0x260>
    5172:	88 35       	cpi	r24, 0x58	; 88
    5174:	79 f0       	breq	.+30     	; 0x5194 <vfprintf+0x27c>
    5176:	ae c0       	rjmp	.+348    	; 0x52d4 <vfprintf+0x3bc>
    5178:	80 37       	cpi	r24, 0x70	; 112
    517a:	19 f0       	breq	.+6      	; 0x5182 <vfprintf+0x26a>
    517c:	88 37       	cpi	r24, 0x78	; 120
    517e:	21 f0       	breq	.+8      	; 0x5188 <vfprintf+0x270>
    5180:	a9 c0       	rjmp	.+338    	; 0x52d4 <vfprintf+0x3bc>
    5182:	e9 2f       	mov	r30, r25
    5184:	e0 61       	ori	r30, 0x10	; 16
    5186:	be 2e       	mov	r11, r30
    5188:	b4 fe       	sbrs	r11, 4
    518a:	0d c0       	rjmp	.+26     	; 0x51a6 <vfprintf+0x28e>
    518c:	fb 2d       	mov	r31, r11
    518e:	f4 60       	ori	r31, 0x04	; 4
    5190:	bf 2e       	mov	r11, r31
    5192:	09 c0       	rjmp	.+18     	; 0x51a6 <vfprintf+0x28e>
    5194:	34 fe       	sbrs	r3, 4
    5196:	0a c0       	rjmp	.+20     	; 0x51ac <vfprintf+0x294>
    5198:	29 2f       	mov	r18, r25
    519a:	26 60       	ori	r18, 0x06	; 6
    519c:	b2 2e       	mov	r11, r18
    519e:	06 c0       	rjmp	.+12     	; 0x51ac <vfprintf+0x294>
    51a0:	28 e0       	ldi	r18, 0x08	; 8
    51a2:	30 e0       	ldi	r19, 0x00	; 0
    51a4:	05 c0       	rjmp	.+10     	; 0x51b0 <vfprintf+0x298>
    51a6:	20 e1       	ldi	r18, 0x10	; 16
    51a8:	30 e0       	ldi	r19, 0x00	; 0
    51aa:	02 c0       	rjmp	.+4      	; 0x51b0 <vfprintf+0x298>
    51ac:	20 e1       	ldi	r18, 0x10	; 16
    51ae:	32 e0       	ldi	r19, 0x02	; 2
    51b0:	f8 01       	movw	r30, r16
    51b2:	b7 fe       	sbrs	r11, 7
    51b4:	07 c0       	rjmp	.+14     	; 0x51c4 <vfprintf+0x2ac>
    51b6:	60 81       	ld	r22, Z
    51b8:	71 81       	ldd	r23, Z+1	; 0x01
    51ba:	82 81       	ldd	r24, Z+2	; 0x02
    51bc:	93 81       	ldd	r25, Z+3	; 0x03
    51be:	0c 5f       	subi	r16, 0xFC	; 252
    51c0:	1f 4f       	sbci	r17, 0xFF	; 255
    51c2:	06 c0       	rjmp	.+12     	; 0x51d0 <vfprintf+0x2b8>
    51c4:	60 81       	ld	r22, Z
    51c6:	71 81       	ldd	r23, Z+1	; 0x01
    51c8:	80 e0       	ldi	r24, 0x00	; 0
    51ca:	90 e0       	ldi	r25, 0x00	; 0
    51cc:	0e 5f       	subi	r16, 0xFE	; 254
    51ce:	1f 4f       	sbci	r17, 0xFF	; 255
    51d0:	a3 01       	movw	r20, r6
    51d2:	f1 d0       	rcall	.+482    	; 0x53b6 <__ultoa_invert>
    51d4:	88 2e       	mov	r8, r24
    51d6:	86 18       	sub	r8, r6
    51d8:	fb 2d       	mov	r31, r11
    51da:	ff 77       	andi	r31, 0x7F	; 127
    51dc:	3f 2e       	mov	r3, r31
    51de:	36 fe       	sbrs	r3, 6
    51e0:	0d c0       	rjmp	.+26     	; 0x51fc <vfprintf+0x2e4>
    51e2:	23 2d       	mov	r18, r3
    51e4:	2e 7f       	andi	r18, 0xFE	; 254
    51e6:	a2 2e       	mov	r10, r18
    51e8:	89 14       	cp	r8, r9
    51ea:	58 f4       	brcc	.+22     	; 0x5202 <vfprintf+0x2ea>
    51ec:	34 fe       	sbrs	r3, 4
    51ee:	0b c0       	rjmp	.+22     	; 0x5206 <vfprintf+0x2ee>
    51f0:	32 fc       	sbrc	r3, 2
    51f2:	09 c0       	rjmp	.+18     	; 0x5206 <vfprintf+0x2ee>
    51f4:	83 2d       	mov	r24, r3
    51f6:	8e 7e       	andi	r24, 0xEE	; 238
    51f8:	a8 2e       	mov	r10, r24
    51fa:	05 c0       	rjmp	.+10     	; 0x5206 <vfprintf+0x2ee>
    51fc:	b8 2c       	mov	r11, r8
    51fe:	a3 2c       	mov	r10, r3
    5200:	03 c0       	rjmp	.+6      	; 0x5208 <vfprintf+0x2f0>
    5202:	b8 2c       	mov	r11, r8
    5204:	01 c0       	rjmp	.+2      	; 0x5208 <vfprintf+0x2f0>
    5206:	b9 2c       	mov	r11, r9
    5208:	a4 fe       	sbrs	r10, 4
    520a:	0f c0       	rjmp	.+30     	; 0x522a <vfprintf+0x312>
    520c:	fe 01       	movw	r30, r28
    520e:	e8 0d       	add	r30, r8
    5210:	f1 1d       	adc	r31, r1
    5212:	80 81       	ld	r24, Z
    5214:	80 33       	cpi	r24, 0x30	; 48
    5216:	21 f4       	brne	.+8      	; 0x5220 <vfprintf+0x308>
    5218:	9a 2d       	mov	r25, r10
    521a:	99 7e       	andi	r25, 0xE9	; 233
    521c:	a9 2e       	mov	r10, r25
    521e:	09 c0       	rjmp	.+18     	; 0x5232 <vfprintf+0x31a>
    5220:	a2 fe       	sbrs	r10, 2
    5222:	06 c0       	rjmp	.+12     	; 0x5230 <vfprintf+0x318>
    5224:	b3 94       	inc	r11
    5226:	b3 94       	inc	r11
    5228:	04 c0       	rjmp	.+8      	; 0x5232 <vfprintf+0x31a>
    522a:	8a 2d       	mov	r24, r10
    522c:	86 78       	andi	r24, 0x86	; 134
    522e:	09 f0       	breq	.+2      	; 0x5232 <vfprintf+0x31a>
    5230:	b3 94       	inc	r11
    5232:	a3 fc       	sbrc	r10, 3
    5234:	10 c0       	rjmp	.+32     	; 0x5256 <vfprintf+0x33e>
    5236:	a0 fe       	sbrs	r10, 0
    5238:	06 c0       	rjmp	.+12     	; 0x5246 <vfprintf+0x32e>
    523a:	b2 14       	cp	r11, r2
    523c:	80 f4       	brcc	.+32     	; 0x525e <vfprintf+0x346>
    523e:	28 0c       	add	r2, r8
    5240:	92 2c       	mov	r9, r2
    5242:	9b 18       	sub	r9, r11
    5244:	0d c0       	rjmp	.+26     	; 0x5260 <vfprintf+0x348>
    5246:	b2 14       	cp	r11, r2
    5248:	58 f4       	brcc	.+22     	; 0x5260 <vfprintf+0x348>
    524a:	b6 01       	movw	r22, r12
    524c:	80 e2       	ldi	r24, 0x20	; 32
    524e:	90 e0       	ldi	r25, 0x00	; 0
    5250:	76 d0       	rcall	.+236    	; 0x533e <fputc>
    5252:	b3 94       	inc	r11
    5254:	f8 cf       	rjmp	.-16     	; 0x5246 <vfprintf+0x32e>
    5256:	b2 14       	cp	r11, r2
    5258:	18 f4       	brcc	.+6      	; 0x5260 <vfprintf+0x348>
    525a:	2b 18       	sub	r2, r11
    525c:	02 c0       	rjmp	.+4      	; 0x5262 <vfprintf+0x34a>
    525e:	98 2c       	mov	r9, r8
    5260:	21 2c       	mov	r2, r1
    5262:	a4 fe       	sbrs	r10, 4
    5264:	0f c0       	rjmp	.+30     	; 0x5284 <vfprintf+0x36c>
    5266:	b6 01       	movw	r22, r12
    5268:	80 e3       	ldi	r24, 0x30	; 48
    526a:	90 e0       	ldi	r25, 0x00	; 0
    526c:	68 d0       	rcall	.+208    	; 0x533e <fputc>
    526e:	a2 fe       	sbrs	r10, 2
    5270:	16 c0       	rjmp	.+44     	; 0x529e <vfprintf+0x386>
    5272:	a1 fc       	sbrc	r10, 1
    5274:	03 c0       	rjmp	.+6      	; 0x527c <vfprintf+0x364>
    5276:	88 e7       	ldi	r24, 0x78	; 120
    5278:	90 e0       	ldi	r25, 0x00	; 0
    527a:	02 c0       	rjmp	.+4      	; 0x5280 <vfprintf+0x368>
    527c:	88 e5       	ldi	r24, 0x58	; 88
    527e:	90 e0       	ldi	r25, 0x00	; 0
    5280:	b6 01       	movw	r22, r12
    5282:	0c c0       	rjmp	.+24     	; 0x529c <vfprintf+0x384>
    5284:	8a 2d       	mov	r24, r10
    5286:	86 78       	andi	r24, 0x86	; 134
    5288:	51 f0       	breq	.+20     	; 0x529e <vfprintf+0x386>
    528a:	a1 fe       	sbrs	r10, 1
    528c:	02 c0       	rjmp	.+4      	; 0x5292 <vfprintf+0x37a>
    528e:	8b e2       	ldi	r24, 0x2B	; 43
    5290:	01 c0       	rjmp	.+2      	; 0x5294 <vfprintf+0x37c>
    5292:	80 e2       	ldi	r24, 0x20	; 32
    5294:	a7 fc       	sbrc	r10, 7
    5296:	8d e2       	ldi	r24, 0x2D	; 45
    5298:	b6 01       	movw	r22, r12
    529a:	90 e0       	ldi	r25, 0x00	; 0
    529c:	50 d0       	rcall	.+160    	; 0x533e <fputc>
    529e:	89 14       	cp	r8, r9
    52a0:	30 f4       	brcc	.+12     	; 0x52ae <vfprintf+0x396>
    52a2:	b6 01       	movw	r22, r12
    52a4:	80 e3       	ldi	r24, 0x30	; 48
    52a6:	90 e0       	ldi	r25, 0x00	; 0
    52a8:	4a d0       	rcall	.+148    	; 0x533e <fputc>
    52aa:	9a 94       	dec	r9
    52ac:	f8 cf       	rjmp	.-16     	; 0x529e <vfprintf+0x386>
    52ae:	8a 94       	dec	r8
    52b0:	f3 01       	movw	r30, r6
    52b2:	e8 0d       	add	r30, r8
    52b4:	f1 1d       	adc	r31, r1
    52b6:	80 81       	ld	r24, Z
    52b8:	b6 01       	movw	r22, r12
    52ba:	90 e0       	ldi	r25, 0x00	; 0
    52bc:	40 d0       	rcall	.+128    	; 0x533e <fputc>
    52be:	81 10       	cpse	r8, r1
    52c0:	f6 cf       	rjmp	.-20     	; 0x52ae <vfprintf+0x396>
    52c2:	22 20       	and	r2, r2
    52c4:	09 f4       	brne	.+2      	; 0x52c8 <vfprintf+0x3b0>
    52c6:	4e ce       	rjmp	.-868    	; 0x4f64 <vfprintf+0x4c>
    52c8:	b6 01       	movw	r22, r12
    52ca:	80 e2       	ldi	r24, 0x20	; 32
    52cc:	90 e0       	ldi	r25, 0x00	; 0
    52ce:	37 d0       	rcall	.+110    	; 0x533e <fputc>
    52d0:	2a 94       	dec	r2
    52d2:	f7 cf       	rjmp	.-18     	; 0x52c2 <vfprintf+0x3aa>
    52d4:	f6 01       	movw	r30, r12
    52d6:	86 81       	ldd	r24, Z+6	; 0x06
    52d8:	97 81       	ldd	r25, Z+7	; 0x07
    52da:	02 c0       	rjmp	.+4      	; 0x52e0 <vfprintf+0x3c8>
    52dc:	8f ef       	ldi	r24, 0xFF	; 255
    52de:	9f ef       	ldi	r25, 0xFF	; 255
    52e0:	2b 96       	adiw	r28, 0x0b	; 11
    52e2:	0f b6       	in	r0, 0x3f	; 63
    52e4:	f8 94       	cli
    52e6:	de bf       	out	0x3e, r29	; 62
    52e8:	0f be       	out	0x3f, r0	; 63
    52ea:	cd bf       	out	0x3d, r28	; 61
    52ec:	df 91       	pop	r29
    52ee:	cf 91       	pop	r28
    52f0:	1f 91       	pop	r17
    52f2:	0f 91       	pop	r16
    52f4:	ff 90       	pop	r15
    52f6:	ef 90       	pop	r14
    52f8:	df 90       	pop	r13
    52fa:	cf 90       	pop	r12
    52fc:	bf 90       	pop	r11
    52fe:	af 90       	pop	r10
    5300:	9f 90       	pop	r9
    5302:	8f 90       	pop	r8
    5304:	7f 90       	pop	r7
    5306:	6f 90       	pop	r6
    5308:	5f 90       	pop	r5
    530a:	4f 90       	pop	r4
    530c:	3f 90       	pop	r3
    530e:	2f 90       	pop	r2
    5310:	08 95       	ret

00005312 <strnlen_P>:
    5312:	fc 01       	movw	r30, r24
    5314:	05 90       	lpm	r0, Z+
    5316:	61 50       	subi	r22, 0x01	; 1
    5318:	70 40       	sbci	r23, 0x00	; 0
    531a:	01 10       	cpse	r0, r1
    531c:	d8 f7       	brcc	.-10     	; 0x5314 <strnlen_P+0x2>
    531e:	80 95       	com	r24
    5320:	90 95       	com	r25
    5322:	8e 0f       	add	r24, r30
    5324:	9f 1f       	adc	r25, r31
    5326:	08 95       	ret

00005328 <strnlen>:
    5328:	fc 01       	movw	r30, r24
    532a:	61 50       	subi	r22, 0x01	; 1
    532c:	70 40       	sbci	r23, 0x00	; 0
    532e:	01 90       	ld	r0, Z+
    5330:	01 10       	cpse	r0, r1
    5332:	d8 f7       	brcc	.-10     	; 0x532a <strnlen+0x2>
    5334:	80 95       	com	r24
    5336:	90 95       	com	r25
    5338:	8e 0f       	add	r24, r30
    533a:	9f 1f       	adc	r25, r31
    533c:	08 95       	ret

0000533e <fputc>:
    533e:	0f 93       	push	r16
    5340:	1f 93       	push	r17
    5342:	cf 93       	push	r28
    5344:	df 93       	push	r29
    5346:	fb 01       	movw	r30, r22
    5348:	23 81       	ldd	r18, Z+3	; 0x03
    534a:	21 fd       	sbrc	r18, 1
    534c:	03 c0       	rjmp	.+6      	; 0x5354 <fputc+0x16>
    534e:	8f ef       	ldi	r24, 0xFF	; 255
    5350:	9f ef       	ldi	r25, 0xFF	; 255
    5352:	2c c0       	rjmp	.+88     	; 0x53ac <fputc+0x6e>
    5354:	22 ff       	sbrs	r18, 2
    5356:	16 c0       	rjmp	.+44     	; 0x5384 <fputc+0x46>
    5358:	46 81       	ldd	r20, Z+6	; 0x06
    535a:	57 81       	ldd	r21, Z+7	; 0x07
    535c:	24 81       	ldd	r18, Z+4	; 0x04
    535e:	35 81       	ldd	r19, Z+5	; 0x05
    5360:	42 17       	cp	r20, r18
    5362:	53 07       	cpc	r21, r19
    5364:	44 f4       	brge	.+16     	; 0x5376 <fputc+0x38>
    5366:	a0 81       	ld	r26, Z
    5368:	b1 81       	ldd	r27, Z+1	; 0x01
    536a:	9d 01       	movw	r18, r26
    536c:	2f 5f       	subi	r18, 0xFF	; 255
    536e:	3f 4f       	sbci	r19, 0xFF	; 255
    5370:	31 83       	std	Z+1, r19	; 0x01
    5372:	20 83       	st	Z, r18
    5374:	8c 93       	st	X, r24
    5376:	26 81       	ldd	r18, Z+6	; 0x06
    5378:	37 81       	ldd	r19, Z+7	; 0x07
    537a:	2f 5f       	subi	r18, 0xFF	; 255
    537c:	3f 4f       	sbci	r19, 0xFF	; 255
    537e:	37 83       	std	Z+7, r19	; 0x07
    5380:	26 83       	std	Z+6, r18	; 0x06
    5382:	14 c0       	rjmp	.+40     	; 0x53ac <fputc+0x6e>
    5384:	8b 01       	movw	r16, r22
    5386:	ec 01       	movw	r28, r24
    5388:	fb 01       	movw	r30, r22
    538a:	00 84       	ldd	r0, Z+8	; 0x08
    538c:	f1 85       	ldd	r31, Z+9	; 0x09
    538e:	e0 2d       	mov	r30, r0
    5390:	19 95       	eicall
    5392:	89 2b       	or	r24, r25
    5394:	e1 f6       	brne	.-72     	; 0x534e <fputc+0x10>
    5396:	d8 01       	movw	r26, r16
    5398:	16 96       	adiw	r26, 0x06	; 6
    539a:	8d 91       	ld	r24, X+
    539c:	9c 91       	ld	r25, X
    539e:	17 97       	sbiw	r26, 0x07	; 7
    53a0:	01 96       	adiw	r24, 0x01	; 1
    53a2:	17 96       	adiw	r26, 0x07	; 7
    53a4:	9c 93       	st	X, r25
    53a6:	8e 93       	st	-X, r24
    53a8:	16 97       	sbiw	r26, 0x06	; 6
    53aa:	ce 01       	movw	r24, r28
    53ac:	df 91       	pop	r29
    53ae:	cf 91       	pop	r28
    53b0:	1f 91       	pop	r17
    53b2:	0f 91       	pop	r16
    53b4:	08 95       	ret

000053b6 <__ultoa_invert>:
    53b6:	fa 01       	movw	r30, r20
    53b8:	aa 27       	eor	r26, r26
    53ba:	28 30       	cpi	r18, 0x08	; 8
    53bc:	51 f1       	breq	.+84     	; 0x5412 <__ultoa_invert+0x5c>
    53be:	20 31       	cpi	r18, 0x10	; 16
    53c0:	81 f1       	breq	.+96     	; 0x5422 <__ultoa_invert+0x6c>
    53c2:	e8 94       	clt
    53c4:	6f 93       	push	r22
    53c6:	6e 7f       	andi	r22, 0xFE	; 254
    53c8:	6e 5f       	subi	r22, 0xFE	; 254
    53ca:	7f 4f       	sbci	r23, 0xFF	; 255
    53cc:	8f 4f       	sbci	r24, 0xFF	; 255
    53ce:	9f 4f       	sbci	r25, 0xFF	; 255
    53d0:	af 4f       	sbci	r26, 0xFF	; 255
    53d2:	b1 e0       	ldi	r27, 0x01	; 1
    53d4:	3e d0       	rcall	.+124    	; 0x5452 <__ultoa_invert+0x9c>
    53d6:	b4 e0       	ldi	r27, 0x04	; 4
    53d8:	3c d0       	rcall	.+120    	; 0x5452 <__ultoa_invert+0x9c>
    53da:	67 0f       	add	r22, r23
    53dc:	78 1f       	adc	r23, r24
    53de:	89 1f       	adc	r24, r25
    53e0:	9a 1f       	adc	r25, r26
    53e2:	a1 1d       	adc	r26, r1
    53e4:	68 0f       	add	r22, r24
    53e6:	79 1f       	adc	r23, r25
    53e8:	8a 1f       	adc	r24, r26
    53ea:	91 1d       	adc	r25, r1
    53ec:	a1 1d       	adc	r26, r1
    53ee:	6a 0f       	add	r22, r26
    53f0:	71 1d       	adc	r23, r1
    53f2:	81 1d       	adc	r24, r1
    53f4:	91 1d       	adc	r25, r1
    53f6:	a1 1d       	adc	r26, r1
    53f8:	20 d0       	rcall	.+64     	; 0x543a <__ultoa_invert+0x84>
    53fa:	09 f4       	brne	.+2      	; 0x53fe <__ultoa_invert+0x48>
    53fc:	68 94       	set
    53fe:	3f 91       	pop	r19
    5400:	2a e0       	ldi	r18, 0x0A	; 10
    5402:	26 9f       	mul	r18, r22
    5404:	11 24       	eor	r1, r1
    5406:	30 19       	sub	r19, r0
    5408:	30 5d       	subi	r19, 0xD0	; 208
    540a:	31 93       	st	Z+, r19
    540c:	de f6       	brtc	.-74     	; 0x53c4 <__ultoa_invert+0xe>
    540e:	cf 01       	movw	r24, r30
    5410:	08 95       	ret
    5412:	46 2f       	mov	r20, r22
    5414:	47 70       	andi	r20, 0x07	; 7
    5416:	40 5d       	subi	r20, 0xD0	; 208
    5418:	41 93       	st	Z+, r20
    541a:	b3 e0       	ldi	r27, 0x03	; 3
    541c:	0f d0       	rcall	.+30     	; 0x543c <__ultoa_invert+0x86>
    541e:	c9 f7       	brne	.-14     	; 0x5412 <__ultoa_invert+0x5c>
    5420:	f6 cf       	rjmp	.-20     	; 0x540e <__ultoa_invert+0x58>
    5422:	46 2f       	mov	r20, r22
    5424:	4f 70       	andi	r20, 0x0F	; 15
    5426:	40 5d       	subi	r20, 0xD0	; 208
    5428:	4a 33       	cpi	r20, 0x3A	; 58
    542a:	18 f0       	brcs	.+6      	; 0x5432 <__ultoa_invert+0x7c>
    542c:	49 5d       	subi	r20, 0xD9	; 217
    542e:	31 fd       	sbrc	r19, 1
    5430:	40 52       	subi	r20, 0x20	; 32
    5432:	41 93       	st	Z+, r20
    5434:	02 d0       	rcall	.+4      	; 0x543a <__ultoa_invert+0x84>
    5436:	a9 f7       	brne	.-22     	; 0x5422 <__ultoa_invert+0x6c>
    5438:	ea cf       	rjmp	.-44     	; 0x540e <__ultoa_invert+0x58>
    543a:	b4 e0       	ldi	r27, 0x04	; 4
    543c:	a6 95       	lsr	r26
    543e:	97 95       	ror	r25
    5440:	87 95       	ror	r24
    5442:	77 95       	ror	r23
    5444:	67 95       	ror	r22
    5446:	ba 95       	dec	r27
    5448:	c9 f7       	brne	.-14     	; 0x543c <__ultoa_invert+0x86>
    544a:	00 97       	sbiw	r24, 0x00	; 0
    544c:	61 05       	cpc	r22, r1
    544e:	71 05       	cpc	r23, r1
    5450:	08 95       	ret
    5452:	9b 01       	movw	r18, r22
    5454:	ac 01       	movw	r20, r24
    5456:	0a 2e       	mov	r0, r26
    5458:	06 94       	lsr	r0
    545a:	57 95       	ror	r21
    545c:	47 95       	ror	r20
    545e:	37 95       	ror	r19
    5460:	27 95       	ror	r18
    5462:	ba 95       	dec	r27
    5464:	c9 f7       	brne	.-14     	; 0x5458 <__ultoa_invert+0xa2>
    5466:	62 0f       	add	r22, r18
    5468:	73 1f       	adc	r23, r19
    546a:	84 1f       	adc	r24, r20
    546c:	95 1f       	adc	r25, r21
    546e:	a0 1d       	adc	r26, r0
    5470:	08 95       	ret

00005472 <_exit>:
    5472:	f8 94       	cli

00005474 <__stop_program>:
    5474:	ff cf       	rjmp	.-2      	; 0x5474 <__stop_program>
