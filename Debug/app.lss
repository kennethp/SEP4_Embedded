
app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000610  00800200  000054a6  0000553a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000054a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000284  00800810  00800810  00005b4a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005b4a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005ba8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b28  00000000  00000000  00005be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e113  00000000  00000000  00006710  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b4a  00000000  00000000  00014823  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006bf0  00000000  00000000  0001836d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000023a0  00000000  00000000  0001ef60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004693  00000000  00000000  00021300  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c08d  00000000  00000000  00025993  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b00  00000000  00000000  00031a20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	06 c2       	rjmp	.+1036   	; 0x40e <__ctors_end>
       2:	00 00       	nop
       4:	24 c2       	rjmp	.+1096   	; 0x44e <__bad_interrupt>
       6:	00 00       	nop
       8:	22 c2       	rjmp	.+1092   	; 0x44e <__bad_interrupt>
       a:	00 00       	nop
       c:	20 c2       	rjmp	.+1088   	; 0x44e <__bad_interrupt>
       e:	00 00       	nop
      10:	1e c2       	rjmp	.+1084   	; 0x44e <__bad_interrupt>
      12:	00 00       	nop
      14:	1c c2       	rjmp	.+1080   	; 0x44e <__bad_interrupt>
      16:	00 00       	nop
      18:	1a c2       	rjmp	.+1076   	; 0x44e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	18 c2       	rjmp	.+1072   	; 0x44e <__bad_interrupt>
      1e:	00 00       	nop
      20:	16 c2       	rjmp	.+1068   	; 0x44e <__bad_interrupt>
      22:	00 00       	nop
      24:	14 c2       	rjmp	.+1064   	; 0x44e <__bad_interrupt>
      26:	00 00       	nop
      28:	12 c2       	rjmp	.+1060   	; 0x44e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	10 c2       	rjmp	.+1056   	; 0x44e <__bad_interrupt>
      2e:	00 00       	nop
      30:	18 c7       	rjmp	.+3632   	; 0xe62 <__vector_12>
      32:	00 00       	nop
      34:	0c c2       	rjmp	.+1048   	; 0x44e <__bad_interrupt>
      36:	00 00       	nop
      38:	0a c2       	rjmp	.+1044   	; 0x44e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	08 c2       	rjmp	.+1040   	; 0x44e <__bad_interrupt>
      3e:	00 00       	nop
      40:	06 c2       	rjmp	.+1036   	; 0x44e <__bad_interrupt>
      42:	00 00       	nop
      44:	04 c2       	rjmp	.+1032   	; 0x44e <__bad_interrupt>
      46:	00 00       	nop
      48:	02 c2       	rjmp	.+1028   	; 0x44e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	00 c2       	rjmp	.+1024   	; 0x44e <__bad_interrupt>
      4e:	00 00       	nop
      50:	fe c1       	rjmp	.+1020   	; 0x44e <__bad_interrupt>
      52:	00 00       	nop
      54:	fc c1       	rjmp	.+1016   	; 0x44e <__bad_interrupt>
      56:	00 00       	nop
      58:	fa c1       	rjmp	.+1012   	; 0x44e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f8 c1       	rjmp	.+1008   	; 0x44e <__bad_interrupt>
      5e:	00 00       	nop
      60:	f6 c1       	rjmp	.+1004   	; 0x44e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 2f 17 	jmp	0x2e5e	; 0x2e5e <__vector_25>
      68:	0c 94 81 17 	jmp	0x2f02	; 0x2f02 <__vector_26>
      6c:	f0 c1       	rjmp	.+992    	; 0x44e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ee c1       	rjmp	.+988    	; 0x44e <__bad_interrupt>
      72:	00 00       	nop
      74:	ec c1       	rjmp	.+984    	; 0x44e <__bad_interrupt>
      76:	00 00       	nop
      78:	ea c1       	rjmp	.+980    	; 0x44e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e8 c1       	rjmp	.+976    	; 0x44e <__bad_interrupt>
      7e:	00 00       	nop
      80:	e6 c1       	rjmp	.+972    	; 0x44e <__bad_interrupt>
      82:	00 00       	nop
      84:	e4 c1       	rjmp	.+968    	; 0x44e <__bad_interrupt>
      86:	00 00       	nop
      88:	e2 c1       	rjmp	.+964    	; 0x44e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e0 c1       	rjmp	.+960    	; 0x44e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 c5 17 	jmp	0x2f8a	; 0x2f8a <__vector_36>
      94:	0c 94 17 18 	jmp	0x302e	; 0x302e <__vector_37>
      98:	da c1       	rjmp	.+948    	; 0x44e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 0e 23 	jmp	0x461c	; 0x461c <__vector_39>
      a0:	d6 c1       	rjmp	.+940    	; 0x44e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d4 c1       	rjmp	.+936    	; 0x44e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d2 c1       	rjmp	.+932    	; 0x44e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d0 c1       	rjmp	.+928    	; 0x44e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ce c1       	rjmp	.+924    	; 0x44e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cc c1       	rjmp	.+920    	; 0x44e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ca c1       	rjmp	.+916    	; 0x44e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c8 c1       	rjmp	.+912    	; 0x44e <__bad_interrupt>
      be:	00 00       	nop
      c0:	c6 c1       	rjmp	.+908    	; 0x44e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c4 c1       	rjmp	.+904    	; 0x44e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c2 c1       	rjmp	.+900    	; 0x44e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 5b 18 	jmp	0x30b6	; 0x30b6 <__vector_51>
      d0:	0c 94 ad 18 	jmp	0x315a	; 0x315a <__vector_52>
      d4:	bc c1       	rjmp	.+888    	; 0x44e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 f1 18 	jmp	0x31e2	; 0x31e2 <__vector_54>
      dc:	0c 94 43 19 	jmp	0x3286	; 0x3286 <__vector_55>
      e0:	b6 c1       	rjmp	.+876    	; 0x44e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	96 01       	movw	r18, r12
      e6:	96 01       	movw	r18, r12
      e8:	96 01       	movw	r18, r12
      ea:	c5 01       	movw	r24, r10
      ec:	cd 01       	movw	r24, r26
      ee:	dc 01       	movw	r26, r24
      f0:	96 01       	movw	r18, r12
      f2:	96 01       	movw	r18, r12
      f4:	c5 01       	movw	r24, r10
      f6:	cd 01       	movw	r24, r26
      f8:	30 23       	and	r19, r16
      fa:	a0 23       	and	r26, r16
      fc:	a0 23       	and	r26, r16
      fe:	a0 23       	and	r26, r16
     100:	a0 23       	and	r26, r16
     102:	a0 23       	and	r26, r16
     104:	a0 23       	and	r26, r16
     106:	a0 23       	and	r26, r16
     108:	30 23       	and	r19, r16
     10a:	a0 23       	and	r26, r16
     10c:	a0 23       	and	r26, r16
     10e:	a0 23       	and	r26, r16
     110:	a0 23       	and	r26, r16
     112:	a0 23       	and	r26, r16
     114:	a0 23       	and	r26, r16
     116:	a0 23       	and	r26, r16
     118:	32 23       	and	r19, r18
     11a:	a0 23       	and	r26, r16
     11c:	a0 23       	and	r26, r16
     11e:	a0 23       	and	r26, r16
     120:	a0 23       	and	r26, r16
     122:	a0 23       	and	r26, r16
     124:	a0 23       	and	r26, r16
     126:	a0 23       	and	r26, r16
     128:	a0 23       	and	r26, r16
     12a:	a0 23       	and	r26, r16
     12c:	a0 23       	and	r26, r16
     12e:	a0 23       	and	r26, r16
     130:	a0 23       	and	r26, r16
     132:	a0 23       	and	r26, r16
     134:	a0 23       	and	r26, r16
     136:	a0 23       	and	r26, r16
     138:	32 23       	and	r19, r18
     13a:	a0 23       	and	r26, r16
     13c:	a0 23       	and	r26, r16
     13e:	a0 23       	and	r26, r16
     140:	a0 23       	and	r26, r16
     142:	a0 23       	and	r26, r16
     144:	a0 23       	and	r26, r16
     146:	a0 23       	and	r26, r16
     148:	a0 23       	and	r26, r16
     14a:	a0 23       	and	r26, r16
     14c:	a0 23       	and	r26, r16
     14e:	a0 23       	and	r26, r16
     150:	a0 23       	and	r26, r16
     152:	a0 23       	and	r26, r16
     154:	a0 23       	and	r26, r16
     156:	a0 23       	and	r26, r16
     158:	9c 23       	and	r25, r28
     15a:	a0 23       	and	r26, r16
     15c:	a0 23       	and	r26, r16
     15e:	a0 23       	and	r26, r16
     160:	a0 23       	and	r26, r16
     162:	a0 23       	and	r26, r16
     164:	a0 23       	and	r26, r16
     166:	a0 23       	and	r26, r16
     168:	67 23       	and	r22, r23
     16a:	a0 23       	and	r26, r16
     16c:	a0 23       	and	r26, r16
     16e:	a0 23       	and	r26, r16
     170:	a0 23       	and	r26, r16
     172:	a0 23       	and	r26, r16
     174:	a0 23       	and	r26, r16
     176:	a0 23       	and	r26, r16
     178:	a0 23       	and	r26, r16
     17a:	a0 23       	and	r26, r16
     17c:	a0 23       	and	r26, r16
     17e:	a0 23       	and	r26, r16
     180:	a0 23       	and	r26, r16
     182:	a0 23       	and	r26, r16
     184:	a0 23       	and	r26, r16
     186:	a0 23       	and	r26, r16
     188:	5b 23       	and	r21, r27
     18a:	a0 23       	and	r26, r16
     18c:	a0 23       	and	r26, r16
     18e:	a0 23       	and	r26, r16
     190:	a0 23       	and	r26, r16
     192:	a0 23       	and	r26, r16
     194:	a0 23       	and	r26, r16
     196:	a0 23       	and	r26, r16
     198:	7f 23       	and	r23, r31

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	02 e3       	ldi	r16, 0x32	; 50
     19c:	18 e0       	ldi	r17, 0x08	; 8
     19e:	0f 2e       	mov	r0, r31
     1a0:	fa e5       	ldi	r31, 0x5A	; 90
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f8 e0       	ldi	r31, 0x08	; 8
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 31 08 	lds	r24, 0x0831	; 0x800831 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	15 96       	adiw	r26, 0x05	; 5
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	16 97       	sbiw	r26, 0x06	; 6
     1c2:	c6 81       	ldd	r28, Z+6	; 0x06
     1c4:	d7 81       	ldd	r29, Z+7	; 0x07
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	b1 d4       	rcall	.+2402   	; 0xb2e <uxListRemove>
     1cc:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 27 08 	sts	0x0827, r24	; 0x800827 <uxCurrentNumberOfTasks>
     1d6:	80 91 31 08 	lds	r24, 0x0831	; 0x800831 <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 31 08 	sts	0x0831, r24	; 0x800831 <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8f 89       	ldd	r24, Y+23	; 0x17
     1e6:	98 8d       	ldd	r25, Y+24	; 0x18
     1e8:	2f d4       	rcall	.+2142   	; 0xa48 <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	2d d4       	rcall	.+2138   	; 0xa48 <vPortFree>
     1ee:	80 91 31 08 	lds	r24, 0x0831	; 0x800831 <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	08 f0       	brcs	.+2      	; 0x200 <prvIdleTask+0x66>
     1fe:	6c d5       	rcall	.+2776   	; 0xcd8 <vPortYield>
     200:	0e 94 43 15 	call	0x2a86	; 0x2a86 <vApplicationIdleHook>
     204:	d2 cf       	rjmp	.-92     	; 0x1aa <prvIdleTask+0x10>

00000206 <prvTimerTask>:
     206:	cf 93       	push	r28
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     208:	df 93       	push	r29
     20a:	00 d0       	rcall	.+0      	; 0x20c <prvTimerTask+0x6>
     20c:	00 d0       	rcall	.+0      	; 0x20e <prvTimerTask+0x8>
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
     212:	ce 01       	movw	r24, r28
     214:	01 96       	adiw	r24, 0x01	; 1
     216:	4c 01       	movw	r8, r24
     218:	44 24       	eor	r4, r4
     21a:	43 94       	inc	r4
     21c:	e1 2c       	mov	r14, r1
     21e:	f1 2c       	mov	r15, r1
     220:	51 2c       	mov	r5, r1
     222:	c8 2e       	mov	r12, r24
     224:	d9 2c       	mov	r13, r9
     226:	e0 91 88 08 	lds	r30, 0x0888	; 0x800888 <pxCurrentTimerList>
     22a:	f0 91 89 08 	lds	r31, 0x0889	; 0x800889 <pxCurrentTimerList+0x1>
     22e:	80 81       	ld	r24, Z
     230:	88 23       	and	r24, r24
     232:	09 f4       	brne	.+2      	; 0x236 <prvTimerTask+0x30>
     234:	d8 c0       	rjmp	.+432    	; 0x3e6 <prvTimerTask+0x1e0>
     236:	05 80       	ldd	r0, Z+5	; 0x05
     238:	f6 81       	ldd	r31, Z+6	; 0x06
     23a:	e0 2d       	mov	r30, r0
     23c:	a0 80       	ld	r10, Z
     23e:	b1 80       	ldd	r11, Z+1	; 0x01
     240:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <vTaskSuspendAll>
     244:	c4 01       	movw	r24, r8
     246:	0e 94 d5 14 	call	0x29aa	; 0x29aa <prvSampleTimeNow>
     24a:	8c 01       	movw	r16, r24
     24c:	89 81       	ldd	r24, Y+1	; 0x01
     24e:	81 11       	cpse	r24, r1
     250:	49 c0       	rjmp	.+146    	; 0x2e4 <prvTimerTask+0xde>
     252:	0a 15       	cp	r16, r10
     254:	1b 05       	cpc	r17, r11
     256:	b0 f1       	brcs	.+108    	; 0x2c4 <prvTimerTask+0xbe>
     258:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <xTaskResumeAll>
     25c:	e0 91 88 08 	lds	r30, 0x0888	; 0x800888 <pxCurrentTimerList>
     260:	f0 91 89 08 	lds	r31, 0x0889	; 0x800889 <pxCurrentTimerList+0x1>
     264:	05 80       	ldd	r0, Z+5	; 0x05
     266:	f6 81       	ldd	r31, Z+6	; 0x06
     268:	e0 2d       	mov	r30, r0
     26a:	66 80       	ldd	r6, Z+6	; 0x06
     26c:	77 80       	ldd	r7, Z+7	; 0x07
     26e:	c3 01       	movw	r24, r6
     270:	02 96       	adiw	r24, 0x02	; 2
     272:	5d d4       	rcall	.+2234   	; 0xb2e <uxListRemove>
     274:	d3 01       	movw	r26, r6
     276:	53 96       	adiw	r26, 0x13	; 19
     278:	8c 91       	ld	r24, X
     27a:	53 97       	sbiw	r26, 0x13	; 19
     27c:	82 ff       	sbrs	r24, 2
     27e:	17 c0       	rjmp	.+46     	; 0x2ae <prvTimerTask+0xa8>
     280:	1c 96       	adiw	r26, 0x0c	; 12
     282:	6d 91       	ld	r22, X+
     284:	7c 91       	ld	r23, X
     286:	1d 97       	sbiw	r26, 0x0d	; 13
     288:	6a 0d       	add	r22, r10
     28a:	7b 1d       	adc	r23, r11
     28c:	95 01       	movw	r18, r10
     28e:	a8 01       	movw	r20, r16
     290:	c3 01       	movw	r24, r6
     292:	0e 94 16 14 	call	0x282c	; 0x282c <prvInsertTimerInActiveList>
     296:	88 23       	and	r24, r24
     298:	69 f0       	breq	.+26     	; 0x2b4 <prvTimerTask+0xae>
     29a:	0e 2d       	mov	r16, r14
     29c:	1f 2d       	mov	r17, r15
     29e:	2e 2d       	mov	r18, r14
     2a0:	3f 2d       	mov	r19, r15
     2a2:	a5 01       	movw	r20, r10
     2a4:	65 2d       	mov	r22, r5
     2a6:	c3 01       	movw	r24, r6
     2a8:	0e 94 8e 14 	call	0x291c	; 0x291c <xTimerGenericCommand>
     2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <prvTimerTask+0xae>
     2ae:	8e 7f       	andi	r24, 0xFE	; 254
     2b0:	f3 01       	movw	r30, r6
     2b2:	83 8b       	std	Z+19, r24	; 0x13
     2b4:	d3 01       	movw	r26, r6
     2b6:	50 96       	adiw	r26, 0x10	; 16
     2b8:	ed 91       	ld	r30, X+
     2ba:	fc 91       	ld	r31, X
     2bc:	51 97       	sbiw	r26, 0x11	; 17
     2be:	c3 01       	movw	r24, r6
     2c0:	19 95       	eicall
     2c2:	85 c0       	rjmp	.+266    	; 0x3ce <prvTimerTask+0x1c8>
     2c4:	45 2d       	mov	r20, r5
     2c6:	b5 01       	movw	r22, r10
     2c8:	60 1b       	sub	r22, r16
     2ca:	71 0b       	sbc	r23, r17
     2cc:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <xTimerQueue>
     2d0:	90 91 85 08 	lds	r25, 0x0885	; 0x800885 <xTimerQueue+0x1>
     2d4:	0e 94 9f 0a 	call	0x153e	; 0x153e <vQueueWaitForMessageRestricted>
     2d8:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <xTaskResumeAll>
     2dc:	81 11       	cpse	r24, r1
     2de:	77 c0       	rjmp	.+238    	; 0x3ce <prvTimerTask+0x1c8>
     2e0:	fb d4       	rcall	.+2550   	; 0xcd8 <vPortYield>
     2e2:	75 c0       	rjmp	.+234    	; 0x3ce <prvTimerTask+0x1c8>
     2e4:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <xTaskResumeAll>
     2e8:	72 c0       	rjmp	.+228    	; 0x3ce <prvTimerTask+0x1c8>
     2ea:	89 81       	ldd	r24, Y+1	; 0x01
     2ec:	88 23       	and	r24, r24
     2ee:	0c f4       	brge	.+2      	; 0x2f2 <prvTimerTask+0xec>
     2f0:	6e c0       	rjmp	.+220    	; 0x3ce <prvTimerTask+0x1c8>
     2f2:	ac 80       	ldd	r10, Y+4	; 0x04
     2f4:	bd 80       	ldd	r11, Y+5	; 0x05
     2f6:	f5 01       	movw	r30, r10
     2f8:	82 85       	ldd	r24, Z+10	; 0x0a
     2fa:	93 85       	ldd	r25, Z+11	; 0x0b
     2fc:	89 2b       	or	r24, r25
     2fe:	19 f0       	breq	.+6      	; 0x306 <prvTimerTask+0x100>
     300:	c5 01       	movw	r24, r10
     302:	02 96       	adiw	r24, 0x02	; 2
     304:	14 d4       	rcall	.+2088   	; 0xb2e <uxListRemove>
     306:	ce 01       	movw	r24, r28
     308:	06 96       	adiw	r24, 0x06	; 6
     30a:	0e 94 d5 14 	call	0x29aa	; 0x29aa <prvSampleTimeNow>
     30e:	ac 01       	movw	r20, r24
     310:	e9 81       	ldd	r30, Y+1	; 0x01
     312:	0e 2e       	mov	r0, r30
     314:	00 0c       	add	r0, r0
     316:	ff 0b       	sbc	r31, r31
     318:	ea 30       	cpi	r30, 0x0A	; 10
     31a:	f1 05       	cpc	r31, r1
     31c:	08 f0       	brcs	.+2      	; 0x320 <prvTimerTask+0x11a>
     31e:	57 c0       	rjmp	.+174    	; 0x3ce <prvTimerTask+0x1c8>
     320:	88 27       	eor	r24, r24
     322:	ee 58       	subi	r30, 0x8E	; 142
     324:	ff 4f       	sbci	r31, 0xFF	; 255
     326:	8f 4f       	sbci	r24, 0xFF	; 255
     328:	0c 94 b2 25 	jmp	0x4b64	; 0x4b64 <__tablejump2__>
     32c:	d5 01       	movw	r26, r10
     32e:	53 96       	adiw	r26, 0x13	; 19
     330:	8c 91       	ld	r24, X
     332:	53 97       	sbiw	r26, 0x13	; 19
     334:	81 60       	ori	r24, 0x01	; 1
     336:	53 96       	adiw	r26, 0x13	; 19
     338:	8c 93       	st	X, r24
     33a:	53 97       	sbiw	r26, 0x13	; 19
     33c:	2a 81       	ldd	r18, Y+2	; 0x02
     33e:	3b 81       	ldd	r19, Y+3	; 0x03
     340:	1c 96       	adiw	r26, 0x0c	; 12
     342:	6d 91       	ld	r22, X+
     344:	7c 91       	ld	r23, X
     346:	1d 97       	sbiw	r26, 0x0d	; 13
     348:	62 0f       	add	r22, r18
     34a:	73 1f       	adc	r23, r19
     34c:	c5 01       	movw	r24, r10
     34e:	0e 94 16 14 	call	0x282c	; 0x282c <prvInsertTimerInActiveList>
     352:	88 23       	and	r24, r24
     354:	e1 f1       	breq	.+120    	; 0x3ce <prvTimerTask+0x1c8>
     356:	d5 01       	movw	r26, r10
     358:	50 96       	adiw	r26, 0x10	; 16
     35a:	ed 91       	ld	r30, X+
     35c:	fc 91       	ld	r31, X
     35e:	51 97       	sbiw	r26, 0x11	; 17
     360:	c5 01       	movw	r24, r10
     362:	19 95       	eicall
     364:	f5 01       	movw	r30, r10
     366:	83 89       	ldd	r24, Z+19	; 0x13
     368:	82 ff       	sbrs	r24, 2
     36a:	31 c0       	rjmp	.+98     	; 0x3ce <prvTimerTask+0x1c8>
     36c:	4a 81       	ldd	r20, Y+2	; 0x02
     36e:	5b 81       	ldd	r21, Y+3	; 0x03
     370:	84 85       	ldd	r24, Z+12	; 0x0c
     372:	95 85       	ldd	r25, Z+13	; 0x0d
     374:	48 0f       	add	r20, r24
     376:	59 1f       	adc	r21, r25
     378:	0e 2d       	mov	r16, r14
     37a:	1f 2d       	mov	r17, r15
     37c:	2e 2d       	mov	r18, r14
     37e:	3f 2d       	mov	r19, r15
     380:	65 2d       	mov	r22, r5
     382:	c5 01       	movw	r24, r10
     384:	0e 94 8e 14 	call	0x291c	; 0x291c <xTimerGenericCommand>
     388:	22 c0       	rjmp	.+68     	; 0x3ce <prvTimerTask+0x1c8>
     38a:	d5 01       	movw	r26, r10
     38c:	53 96       	adiw	r26, 0x13	; 19
     38e:	8c 91       	ld	r24, X
     390:	53 97       	sbiw	r26, 0x13	; 19
     392:	8e 7f       	andi	r24, 0xFE	; 254
     394:	53 96       	adiw	r26, 0x13	; 19
     396:	8c 93       	st	X, r24
     398:	1a c0       	rjmp	.+52     	; 0x3ce <prvTimerTask+0x1c8>
     39a:	f5 01       	movw	r30, r10
     39c:	83 89       	ldd	r24, Z+19	; 0x13
     39e:	81 60       	ori	r24, 0x01	; 1
     3a0:	83 8b       	std	Z+19, r24	; 0x13
     3a2:	6a 81       	ldd	r22, Y+2	; 0x02
     3a4:	7b 81       	ldd	r23, Y+3	; 0x03
     3a6:	75 87       	std	Z+13, r23	; 0x0d
     3a8:	64 87       	std	Z+12, r22	; 0x0c
     3aa:	64 0f       	add	r22, r20
     3ac:	75 1f       	adc	r23, r21
     3ae:	9a 01       	movw	r18, r20
     3b0:	c5 01       	movw	r24, r10
     3b2:	0e 94 16 14 	call	0x282c	; 0x282c <prvInsertTimerInActiveList>
     3b6:	0b c0       	rjmp	.+22     	; 0x3ce <prvTimerTask+0x1c8>
     3b8:	d5 01       	movw	r26, r10
     3ba:	53 96       	adiw	r26, 0x13	; 19
     3bc:	8c 91       	ld	r24, X
     3be:	81 fd       	sbrc	r24, 1
     3c0:	03 c0       	rjmp	.+6      	; 0x3c8 <prvTimerTask+0x1c2>
     3c2:	c5 01       	movw	r24, r10
     3c4:	41 d3       	rcall	.+1666   	; 0xa48 <vPortFree>
     3c6:	03 c0       	rjmp	.+6      	; 0x3ce <prvTimerTask+0x1c8>
     3c8:	8e 7f       	andi	r24, 0xFE	; 254
     3ca:	f5 01       	movw	r30, r10
     3cc:	83 8b       	std	Z+19, r24	; 0x13
     3ce:	4e 2d       	mov	r20, r14
     3d0:	5f 2d       	mov	r21, r15
     3d2:	6c 2d       	mov	r22, r12
     3d4:	7d 2d       	mov	r23, r13
     3d6:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <xTimerQueue>
     3da:	90 91 85 08 	lds	r25, 0x0885	; 0x800885 <xTimerQueue+0x1>
     3de:	6a d7       	rcall	.+3796   	; 0x12b4 <xQueueReceive>
     3e0:	81 11       	cpse	r24, r1
     3e2:	83 cf       	rjmp	.-250    	; 0x2ea <prvTimerTask+0xe4>
     3e4:	20 cf       	rjmp	.-448    	; 0x226 <prvTimerTask+0x20>
     3e6:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <vTaskSuspendAll>
     3ea:	c4 01       	movw	r24, r8
     3ec:	0e 94 d5 14 	call	0x29aa	; 0x29aa <prvSampleTimeNow>
     3f0:	8c 01       	movw	r16, r24
     3f2:	89 81       	ldd	r24, Y+1	; 0x01
     3f4:	81 11       	cpse	r24, r1
     3f6:	76 cf       	rjmp	.-276    	; 0x2e4 <prvTimerTask+0xde>
     3f8:	e0 91 86 08 	lds	r30, 0x0886	; 0x800886 <pxOverflowTimerList>
     3fc:	f0 91 87 08 	lds	r31, 0x0887	; 0x800887 <pxOverflowTimerList+0x1>
     400:	80 81       	ld	r24, Z
     402:	44 2d       	mov	r20, r4
     404:	81 11       	cpse	r24, r1
     406:	45 2d       	mov	r20, r5
     408:	ae 2c       	mov	r10, r14
     40a:	bf 2c       	mov	r11, r15
     40c:	5c cf       	rjmp	.-328    	; 0x2c6 <prvTimerTask+0xc0>

0000040e <__ctors_end>:
     40e:	11 24       	eor	r1, r1
     410:	1f be       	out	0x3f, r1	; 63
     412:	cf ef       	ldi	r28, 0xFF	; 255
     414:	d1 e2       	ldi	r29, 0x21	; 33
     416:	de bf       	out	0x3e, r29	; 62
     418:	cd bf       	out	0x3d, r28	; 61
     41a:	00 e0       	ldi	r16, 0x00	; 0
     41c:	0c bf       	out	0x3c, r16	; 60

0000041e <__do_copy_data>:
     41e:	18 e0       	ldi	r17, 0x08	; 8
     420:	a0 e0       	ldi	r26, 0x00	; 0
     422:	b2 e0       	ldi	r27, 0x02	; 2
     424:	e6 ea       	ldi	r30, 0xA6	; 166
     426:	f4 e5       	ldi	r31, 0x54	; 84
     428:	00 e0       	ldi	r16, 0x00	; 0
     42a:	0b bf       	out	0x3b, r16	; 59
     42c:	02 c0       	rjmp	.+4      	; 0x432 <__do_copy_data+0x14>
     42e:	07 90       	elpm	r0, Z+
     430:	0d 92       	st	X+, r0
     432:	a0 31       	cpi	r26, 0x10	; 16
     434:	b1 07       	cpc	r27, r17
     436:	d9 f7       	brne	.-10     	; 0x42e <__do_copy_data+0x10>

00000438 <__do_clear_bss>:
     438:	2a e0       	ldi	r18, 0x0A	; 10
     43a:	a0 e1       	ldi	r26, 0x10	; 16
     43c:	b8 e0       	ldi	r27, 0x08	; 8
     43e:	01 c0       	rjmp	.+2      	; 0x442 <.do_clear_bss_start>

00000440 <.do_clear_bss_loop>:
     440:	1d 92       	st	X+, r1

00000442 <.do_clear_bss_start>:
     442:	a4 39       	cpi	r26, 0x94	; 148
     444:	b2 07       	cpc	r27, r18
     446:	e1 f7       	brne	.-8      	; 0x440 <.do_clear_bss_loop>
     448:	03 d0       	rcall	.+6      	; 0x450 <main>
     44a:	0c 94 51 2a 	jmp	0x54a2	; 0x54a2 <_exit>

0000044e <__bad_interrupt>:
     44e:	d8 cd       	rjmp	.-1104   	; 0x0 <__vectors>

00000450 <main>:



//

int main() {
     450:	ef 92       	push	r14
     452:	ff 92       	push	r15
     454:	0f 93       	push	r16
	
	semaphore = NULL;
     456:	10 92 03 0a 	sts	0x0A03, r1	; 0x800a03 <semaphore+0x1>
     45a:	10 92 02 0a 	sts	0x0A02, r1	; 0x800a02 <semaphore>
	
	hal_create(LED_TASK_PRIORITY);
     45e:	83 e0       	ldi	r24, 0x03	; 3
     460:	0e 94 a6 19 	call	0x334c	; 0x334c <hal_create>
	lora_driver_create(ser_USART1);
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <lora_driver_create>
	stdioCreate(0);
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	0e 94 d6 15 	call	0x2bac	; 0x2bac <stdioCreate>

	
	xTaskCreate(tempSensorTask, "Temperature measurement", configMINIMAL_STACK_SIZE, NULL, TEMP_TASK_PRIORITY, &tempSensorHandle);
     470:	0f 2e       	mov	r0, r31
     472:	f8 e1       	ldi	r31, 0x18	; 24
     474:	ef 2e       	mov	r14, r31
     476:	f8 e0       	ldi	r31, 0x08	; 8
     478:	ff 2e       	mov	r15, r31
     47a:	f0 2d       	mov	r31, r0
     47c:	01 e0       	ldi	r16, 0x01	; 1
     47e:	20 e0       	ldi	r18, 0x00	; 0
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	40 ec       	ldi	r20, 0xC0	; 192
     484:	50 e0       	ldi	r21, 0x00	; 0
     486:	6e e6       	ldi	r22, 0x6E	; 110
     488:	72 e0       	ldi	r23, 0x02	; 2
     48a:	8e e7       	ldi	r24, 0x7E	; 126
     48c:	94 e0       	ldi	r25, 0x04	; 4
     48e:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <xTaskCreate>
	xTaskCreate(co2SensorTask, "CO2 measurement", configMINIMAL_STACK_SIZE, NULL, CO2_TASK_PRIORITY, &co2SensorHandle);
     492:	0f 2e       	mov	r0, r31
     494:	f6 e1       	ldi	r31, 0x16	; 22
     496:	ef 2e       	mov	r14, r31
     498:	f8 e0       	ldi	r31, 0x08	; 8
     49a:	ff 2e       	mov	r15, r31
     49c:	f0 2d       	mov	r31, r0
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	40 ec       	ldi	r20, 0xC0	; 192
     4a4:	50 e0       	ldi	r21, 0x00	; 0
     4a6:	66 e8       	ldi	r22, 0x86	; 134
     4a8:	72 e0       	ldi	r23, 0x02	; 2
     4aa:	8b ec       	ldi	r24, 0xCB	; 203
     4ac:	92 e0       	ldi	r25, 0x02	; 2
     4ae:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <xTaskCreate>
	xTaskCreate(lightSensorTask, "Light measurement", configMINIMAL_STACK_SIZE, NULL, LIGHT_TASK_PRIORITY, &lightSensorHandle);
     4b2:	0f 2e       	mov	r0, r31
     4b4:	f4 e1       	ldi	r31, 0x14	; 20
     4b6:	ef 2e       	mov	r14, r31
     4b8:	f8 e0       	ldi	r31, 0x08	; 8
     4ba:	ff 2e       	mov	r15, r31
     4bc:	f0 2d       	mov	r31, r0
     4be:	20 e0       	ldi	r18, 0x00	; 0
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	40 ec       	ldi	r20, 0xC0	; 192
     4c4:	50 e0       	ldi	r21, 0x00	; 0
     4c6:	66 e9       	ldi	r22, 0x96	; 150
     4c8:	72 e0       	ldi	r23, 0x02	; 2
     4ca:	8d e0       	ldi	r24, 0x0D	; 13
     4cc:	93 e0       	ldi	r25, 0x03	; 3
     4ce:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <xTaskCreate>
	semaphore = xSemaphoreCreateMutex();
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	9f d6       	rcall	.+3390   	; 0x1214 <xQueueCreateMutex>
     4d6:	90 93 03 0a 	sts	0x0A03, r25	; 0x800a03 <semaphore+0x1>
     4da:	80 93 02 0a 	sts	0x0A02, r24	; 0x800a02 <semaphore>
	//added:
	xTaskCreate(loRaWanTask, "Led", configMINIMAL_STACK_SIZE, NULL,LED_TASK_PRIORITY, &loRaWanHandle);
     4de:	0f 2e       	mov	r0, r31
     4e0:	f0 e1       	ldi	r31, 0x10	; 16
     4e2:	ef 2e       	mov	r14, r31
     4e4:	f8 e0       	ldi	r31, 0x08	; 8
     4e6:	ff 2e       	mov	r15, r31
     4e8:	f0 2d       	mov	r31, r0
     4ea:	03 e0       	ldi	r16, 0x03	; 3
     4ec:	20 e0       	ldi	r18, 0x00	; 0
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	40 ec       	ldi	r20, 0xC0	; 192
     4f2:	50 e0       	ldi	r21, 0x00	; 0
     4f4:	68 ea       	ldi	r22, 0xA8	; 168
     4f6:	72 e0       	ldi	r23, 0x02	; 2
     4f8:	8d e0       	ldi	r24, 0x0D	; 13
     4fa:	94 e0       	ldi	r25, 0x04	; 4
     4fc:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <xTaskCreate>
	xTaskCreate(servoMotorTask, "Servo Motor", configMINIMAL_STACK_SIZE, NULL, SERVO_TASK_PRIORITY,&ServoMotorHandle);
     500:	0f 2e       	mov	r0, r31
     502:	f2 e1       	ldi	r31, 0x12	; 18
     504:	ef 2e       	mov	r14, r31
     506:	f8 e0       	ldi	r31, 0x08	; 8
     508:	ff 2e       	mov	r15, r31
     50a:	f0 2d       	mov	r31, r0
     50c:	01 e0       	ldi	r16, 0x01	; 1
     50e:	20 e0       	ldi	r18, 0x00	; 0
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	40 ec       	ldi	r20, 0xC0	; 192
     514:	50 e0       	ldi	r21, 0x00	; 0
     516:	6c ea       	ldi	r22, 0xAC	; 172
     518:	72 e0       	ldi	r23, 0x02	; 2
     51a:	85 e6       	ldi	r24, 0x65	; 101
     51c:	94 e0       	ldi	r25, 0x04	; 4
     51e:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <xTaskCreate>
	//
	
	//setup temperature/humidity sensor
	if(HIH8120_OK != hih8120Create()) {
     522:	0e 94 05 1a 	call	0x340a	; 0x340a <hih8120Create>
     526:	81 11       	cpse	r24, r1
     528:	2c c0       	rjmp	.+88     	; 0x582 <main+0x132>
		printf("Failed to initialize temperature sensor\n");
		return 1;
	}
	//setup servoMotor
	rcServoCreate();
     52a:	0e 94 97 20 	call	0x412e	; 0x412e <rcServoCreate>

	//setup co2 sensor
	mh_z19_create(ser_USART3, co2Callback);
     52e:	65 ee       	ldi	r22, 0xE5	; 229
     530:	72 e0       	ldi	r23, 0x02	; 2
     532:	83 e0       	ldi	r24, 0x03	; 3
     534:	0e 94 20 20 	call	0x4040	; 0x4040 <mh_z19_create>

	//setup light sensor
	int r = tsl2591Create(lightCallback);
     538:	83 e2       	ldi	r24, 0x23	; 35
     53a:	93 e0       	ldi	r25, 0x03	; 3
     53c:	0e 94 12 21 	call	0x4224	; 0x4224 <tsl2591Create>
	if(r != TSL2591_OK) {
     540:	88 23       	and	r24, r24
     542:	61 f0       	breq	.+24     	; 0x55c <main+0x10c>
		printf("Failed to initialize light sensor: %d\n", r);
     544:	1f 92       	push	r1
     546:	8f 93       	push	r24
     548:	80 ee       	ldi	r24, 0xE0	; 224
     54a:	92 e0       	ldi	r25, 0x02	; 2
     54c:	9f 93       	push	r25
     54e:	8f 93       	push	r24
     550:	0e 94 33 27 	call	0x4e66	; 0x4e66 <printf>
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
	}

	r = tsl2591Enable();
     55c:	0e 94 2d 21 	call	0x425a	; 0x425a <tsl2591Enable>
	if(r != TSL2591_OK) {
     560:	88 23       	and	r24, r24
     562:	61 f0       	breq	.+24     	; 0x57c <main+0x12c>
		printf("Failed to enable light sensor %d\n", r);
     564:	1f 92       	push	r1
     566:	8f 93       	push	r24
     568:	87 e0       	ldi	r24, 0x07	; 7
     56a:	93 e0       	ldi	r25, 0x03	; 3
     56c:	9f 93       	push	r25
     56e:	8f 93       	push	r24
     570:	0e 94 33 27 	call	0x4e66	; 0x4e66 <printf>
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	0f 90       	pop	r0
     57a:	0f 90       	pop	r0
	}
	
	vTaskStartScheduler();
     57c:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <vTaskStartScheduler>
     580:	ff cf       	rjmp	.-2      	; 0x580 <main+0x130>
	xTaskCreate(servoMotorTask, "Servo Motor", configMINIMAL_STACK_SIZE, NULL, SERVO_TASK_PRIORITY,&ServoMotorHandle);
	//
	
	//setup temperature/humidity sensor
	if(HIH8120_OK != hih8120Create()) {
		printf("Failed to initialize temperature sensor\n");
     582:	88 eb       	ldi	r24, 0xB8	; 184
     584:	92 e0       	ldi	r25, 0x02	; 2
     586:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <puts>
	vTaskStartScheduler();
	
	while(1) {
		;
	}
}
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	0f 91       	pop	r16
     590:	ff 90       	pop	r15
     592:	ef 90       	pop	r14
     594:	08 95       	ret

00000596 <co2SensorTask>:
#include "plantdata.h"
#include "mh_z19.h"

void co2SensorTask(void *pvParamters) {
	(void)pvParamters;
	printf("Temp sensor start!!!\n");
     596:	89 e2       	ldi	r24, 0x29	; 41
     598:	93 e0       	ldi	r25, 0x03	; 3
     59a:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <puts>

	while(1) {
		vTaskDelay(1000);
		int r = mh_z19_take_meassuring();
		if(r != MHZ19_OK) {
			printf("CO2 sensor: %d", r);
     59e:	ce e3       	ldi	r28, 0x3E	; 62
     5a0:	d3 e0       	ldi	r29, 0x03	; 3
void co2SensorTask(void *pvParamters) {
	(void)pvParamters;
	printf("Temp sensor start!!!\n");

	while(1) {
		vTaskDelay(1000);
     5a2:	88 ee       	ldi	r24, 0xE8	; 232
     5a4:	93 e0       	ldi	r25, 0x03	; 3
     5a6:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <vTaskDelay>
		int r = mh_z19_take_meassuring();
     5aa:	0e 94 4f 20 	call	0x409e	; 0x409e <mh_z19_take_meassuring>
     5ae:	90 e0       	ldi	r25, 0x00	; 0
		if(r != MHZ19_OK) {
     5b0:	00 97       	sbiw	r24, 0x00	; 0
     5b2:	b9 f3       	breq	.-18     	; 0x5a2 <co2SensorTask+0xc>
			printf("CO2 sensor: %d", r);
     5b4:	9f 93       	push	r25
     5b6:	8f 93       	push	r24
     5b8:	df 93       	push	r29
     5ba:	cf 93       	push	r28
     5bc:	0e 94 33 27 	call	0x4e66	; 0x4e66 <printf>
     5c0:	0f 90       	pop	r0
     5c2:	0f 90       	pop	r0
     5c4:	0f 90       	pop	r0
     5c6:	0f 90       	pop	r0
     5c8:	ec cf       	rjmp	.-40     	; 0x5a2 <co2SensorTask+0xc>

000005ca <co2Callback>:
	}

	vTaskDelete(NULL);
}

void co2Callback(uint16_t ppm) {
     5ca:	cf 93       	push	r28
     5cc:	df 93       	push	r29
     5ce:	c8 2f       	mov	r28, r24
     5d0:	d9 2f       	mov	r29, r25
	///////////////////semaphore:
	xSemaphoreTake(semaphore, portMAX_DELAY);
     5d2:	6f ef       	ldi	r22, 0xFF	; 255
     5d4:	7f ef       	ldi	r23, 0xFF	; 255
     5d6:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <semaphore>
     5da:	90 91 03 0a 	lds	r25, 0x0A03	; 0x800a03 <semaphore+0x1>
     5de:	f3 d6       	rcall	.+3558   	; 0x13c6 <xQueueSemaphoreTake>
	plantdata.co2 = ppm;
     5e0:	e8 e6       	ldi	r30, 0x68	; 104
     5e2:	fa e0       	ldi	r31, 0x0A	; 10
     5e4:	c4 83       	std	Z+4, r28	; 0x04
     5e6:	d5 83       	std	Z+5, r29	; 0x05
	printf("CO2 level: %u\n", ppm);
     5e8:	df 93       	push	r29
     5ea:	cf 93       	push	r28
     5ec:	8d e4       	ldi	r24, 0x4D	; 77
     5ee:	93 e0       	ldi	r25, 0x03	; 3
     5f0:	9f 93       	push	r25
     5f2:	8f 93       	push	r24
     5f4:	0e 94 33 27 	call	0x4e66	; 0x4e66 <printf>
	
	xSemaphoreGive(semaphore);
     5f8:	20 e0       	ldi	r18, 0x00	; 0
     5fa:	40 e0       	ldi	r20, 0x00	; 0
     5fc:	50 e0       	ldi	r21, 0x00	; 0
     5fe:	60 e0       	ldi	r22, 0x00	; 0
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <semaphore>
     606:	90 91 03 0a 	lds	r25, 0x0A03	; 0x800a03 <semaphore+0x1>
     60a:	6f d5       	rcall	.+2782   	; 0x10ea <xQueueGenericSend>
}
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
     612:	0f 90       	pop	r0
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	08 95       	ret

0000061a <lightSensorTask>:

	while(1) {
		vTaskDelay(1000);	
		int r = tsl2591FetchData();
		if(r != TSL2591_OK) {
			printf("Failed to fetch light data: %d\n", r);	
     61a:	cc e5       	ldi	r28, 0x5C	; 92
     61c:	d3 e0       	ldi	r29, 0x03	; 3

void lightSensorTask(void* pvParameters) {
	(void)pvParameters;

	while(1) {
		vTaskDelay(1000);	
     61e:	88 ee       	ldi	r24, 0xE8	; 232
     620:	93 e0       	ldi	r25, 0x03	; 3
     622:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <vTaskDelay>
		int r = tsl2591FetchData();
     626:	0e 94 42 21 	call	0x4284	; 0x4284 <tsl2591FetchData>
     62a:	90 e0       	ldi	r25, 0x00	; 0
		if(r != TSL2591_OK) {
     62c:	00 97       	sbiw	r24, 0x00	; 0
     62e:	b9 f3       	breq	.-18     	; 0x61e <lightSensorTask+0x4>
			printf("Failed to fetch light data: %d\n", r);	
     630:	9f 93       	push	r25
     632:	8f 93       	push	r24
     634:	df 93       	push	r29
     636:	cf 93       	push	r28
     638:	0e 94 33 27 	call	0x4e66	; 0x4e66 <printf>
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0
     642:	0f 90       	pop	r0
     644:	ec cf       	rjmp	.-40     	; 0x61e <lightSensorTask+0x4>

00000646 <lightCallback>:
	}

	vTaskDelete(NULL);
}

void lightCallback(tsl2591ReturnCode_t rc) {
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	00 d0       	rcall	.+0      	; 0x64c <lightCallback+0x6>
     64c:	1f 92       	push	r1
     64e:	cd b7       	in	r28, 0x3d	; 61
     650:	de b7       	in	r29, 0x3e	; 62
	float measure;
	if(rc != TSL2591_DATA_READY) {
     652:	81 30       	cpi	r24, 0x01	; 1
     654:	29 f0       	breq	.+10     	; 0x660 <lightCallback+0x1a>
		printf("Light sensor not ready\n");
     656:	8c e7       	ldi	r24, 0x7C	; 124
     658:	93 e0       	ldi	r25, 0x03	; 3
     65a:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <puts>
     65e:	32 c0       	rjmp	.+100    	; 0x6c4 <lightCallback+0x7e>
		return;
	}
	if(TSL2591_OK == tsl2591GetLux(&measure)) {
     660:	ce 01       	movw	r24, r28
     662:	01 96       	adiw	r24, 0x01	; 1
     664:	0e 94 54 21 	call	0x42a8	; 0x42a8 <tsl2591GetLux>
     668:	81 11       	cpse	r24, r1
     66a:	28 c0       	rjmp	.+80     	; 0x6bc <lightCallback+0x76>
		
		///////////////////semaphore:
		xSemaphoreTake(semaphore, portMAX_DELAY);
     66c:	6f ef       	ldi	r22, 0xFF	; 255
     66e:	7f ef       	ldi	r23, 0xFF	; 255
     670:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <semaphore>
     674:	90 91 03 0a 	lds	r25, 0x0A03	; 0x800a03 <semaphore+0x1>
     678:	a6 d6       	rcall	.+3404   	; 0x13c6 <xQueueSemaphoreTake>
		plantdata.light = (uint16_t) measure;
     67a:	69 81       	ldd	r22, Y+1	; 0x01
     67c:	7a 81       	ldd	r23, Y+2	; 0x02
     67e:	8b 81       	ldd	r24, Y+3	; 0x03
     680:	9c 81       	ldd	r25, Y+4	; 0x04
     682:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <__fixunssfsi>
     686:	e8 e6       	ldi	r30, 0x68	; 104
     688:	fa e0       	ldi	r31, 0x0A	; 10
     68a:	66 83       	std	Z+6, r22	; 0x06
     68c:	77 83       	std	Z+7, r23	; 0x07
		printf("Light: %d\n", (uint16_t) measure);
     68e:	7f 93       	push	r23
     690:	6f 93       	push	r22
     692:	83 e9       	ldi	r24, 0x93	; 147
     694:	93 e0       	ldi	r25, 0x03	; 3
     696:	9f 93       	push	r25
     698:	8f 93       	push	r24
     69a:	0e 94 33 27 	call	0x4e66	; 0x4e66 <printf>
		xSemaphoreGive(semaphore);
     69e:	20 e0       	ldi	r18, 0x00	; 0
     6a0:	40 e0       	ldi	r20, 0x00	; 0
     6a2:	50 e0       	ldi	r21, 0x00	; 0
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <semaphore>
     6ac:	90 91 03 0a 	lds	r25, 0x0A03	; 0x800a03 <semaphore+0x1>
     6b0:	1c d5       	rcall	.+2616   	; 0x10ea <xQueueGenericSend>
     6b2:	0f 90       	pop	r0
     6b4:	0f 90       	pop	r0
     6b6:	0f 90       	pop	r0
     6b8:	0f 90       	pop	r0
     6ba:	04 c0       	rjmp	.+8      	; 0x6c4 <lightCallback+0x7e>
	}
	else {
		printf("Lux overflow\n");
     6bc:	8e e9       	ldi	r24, 0x9E	; 158
     6be:	93 e0       	ldi	r25, 0x03	; 3
     6c0:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <puts>
	}
	
}
     6c4:	0f 90       	pop	r0
     6c6:	0f 90       	pop	r0
     6c8:	0f 90       	pop	r0
     6ca:	0f 90       	pop	r0
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	08 95       	ret

000006d2 <_loRa_setup>:
#define LORA_appEUI "c53e8f9f10801fc4"
#define LORA_appKEY "018cc25f724a8517cbfd763dc1126614"

char _out_buff[100];

void _loRa_setup(void){
     6d2:	ef 92       	push	r14
     6d4:	ff 92       	push	r15
     6d6:	1f 93       	push	r17
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
	
	e_LoRa_return_code_t rc;
	
	
	//For factory reset.
	printf("FactoryRest >%s<\n",
     6dc:	0e 94 cb 1c 	call	0x3996	; 0x3996 <lora_driver_rn2483_factory_reset>
     6e0:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <lora_driver_map_return_code_to_text>
     6e4:	9f 93       	push	r25
     6e6:	8f 93       	push	r24
     6e8:	8b ea       	ldi	r24, 0xAB	; 171
     6ea:	93 e0       	ldi	r25, 0x03	; 3
     6ec:	9f 93       	push	r25
     6ee:	8f 93       	push	r24
     6f0:	0e 94 33 27 	call	0x4e66	; 0x4e66 <printf>
	lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
	
	//Configure to EU868 LoRaWAN standards.
	printf("Configure to EU868 >%s<\n",
     6f4:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <lora_driver_configure_to_eu868>
     6f8:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <lora_driver_map_return_code_to_text>
     6fc:	9f 93       	push	r25
     6fe:	8f 93       	push	r24
     700:	8d eb       	ldi	r24, 0xBD	; 189
     702:	93 e0       	ldi	r25, 0x03	; 3
     704:	9f 93       	push	r25
     706:	8f 93       	push	r24
     708:	0e 94 33 27 	call	0x4e66	; 0x4e66 <printf>
	lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
	
	//Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buff);
     70c:	84 e0       	ldi	r24, 0x04	; 4
     70e:	9a e0       	ldi	r25, 0x0A	; 10
     710:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI: %s >%s< \n", lora_driver_map_return_code_to_text(rc), _out_buff );
     714:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <lora_driver_map_return_code_to_text>
     718:	c4 e0       	ldi	r28, 0x04	; 4
     71a:	da e0       	ldi	r29, 0x0A	; 10
     71c:	df 93       	push	r29
     71e:	cf 93       	push	r28
     720:	9f 93       	push	r25
     722:	8f 93       	push	r24
     724:	86 ed       	ldi	r24, 0xD6	; 214
     726:	93 e0       	ldi	r25, 0x03	; 3
     728:	9f 93       	push	r25
     72a:	8f 93       	push	r24
     72c:	0e 94 33 27 	call	0x4e66	; 0x4e66 <printf>
	
	
	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buff, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buff)));
     730:	ce 01       	movw	r24, r28
     732:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <lora_driver_set_device_identifier>
     736:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <lora_driver_map_return_code_to_text>
     73a:	9f 93       	push	r25
     73c:	8f 93       	push	r24
     73e:	df 93       	push	r29
     740:	cf 93       	push	r28
     742:	8b ee       	ldi	r24, 0xEB	; 235
     744:	93 e0       	ldi	r25, 0x03	; 3
     746:	9f 93       	push	r25
     748:	8f 93       	push	r24
     74a:	0e 94 33 27 	call	0x4e66	; 0x4e66 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buff, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buff)));
     74e:	ae 01       	movw	r20, r28
     750:	60 e0       	ldi	r22, 0x00	; 0
     752:	74 e0       	ldi	r23, 0x04	; 4
     754:	81 e2       	ldi	r24, 0x21	; 33
     756:	94 e0       	ldi	r25, 0x04	; 4
     758:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <lora_driver_set_otaa_identity>
     75c:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <lora_driver_map_return_code_to_text>
     760:	9f 93       	push	r25
     762:	8f 93       	push	r24
     764:	df 93       	push	r29
     766:	cf 93       	push	r28
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	94 e0       	ldi	r25, 0x04	; 4
     76c:	9f 93       	push	r25
     76e:	8f 93       	push	r24
     770:	81 e2       	ldi	r24, 0x21	; 33
     772:	94 e0       	ldi	r25, 0x04	; 4
     774:	9f 93       	push	r25
     776:	8f 93       	push	r24
     778:	82 e3       	ldi	r24, 0x32	; 50
     77a:	94 e0       	ldi	r25, 0x04	; 4
     77c:	9f 93       	push	r25
     77e:	8f 93       	push	r24
     780:	0e 94 33 27 	call	0x4e66	; 0x4e66 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
     784:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <lora_driver_save_mac>
     788:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <lora_driver_map_return_code_to_text>
     78c:	9f 93       	push	r25
     78e:	8f 93       	push	r24
     790:	88 e6       	ldi	r24, 0x68	; 104
     792:	94 e0       	ldi	r25, 0x04	; 4
     794:	9f 93       	push	r25
     796:	8f 93       	push	r24
     798:	0e 94 33 27 	call	0x4e66	; 0x4e66 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
     79c:	8d b7       	in	r24, 0x3d	; 61
     79e:	9e b7       	in	r25, 0x3e	; 62
     7a0:	82 96       	adiw	r24, 0x22	; 34
     7a2:	0f b6       	in	r0, 0x3f	; 63
     7a4:	f8 94       	cli
     7a6:	9e bf       	out	0x3e, r25	; 62
     7a8:	0f be       	out	0x3f, r0	; 63
     7aa:	8d bf       	out	0x3d, r24	; 61
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <lora_driver_set_adaptive_data_rate>
     7b2:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <lora_driver_map_return_code_to_text>
     7b6:	9f 93       	push	r25
     7b8:	8f 93       	push	r24
     7ba:	87 e7       	ldi	r24, 0x77	; 119
     7bc:	94 e0       	ldi	r25, 0x04	; 4
     7be:	9f 93       	push	r25
     7c0:	8f 93       	push	r24
     7c2:	0e 94 33 27 	call	0x4e66	; 0x4e66 <printf>
     7c6:	0f 90       	pop	r0
     7c8:	0f 90       	pop	r0
     7ca:	0f 90       	pop	r0
     7cc:	0f 90       	pop	r0
     7ce:	c5 e0       	ldi	r28, 0x05	; 5
     7d0:	d0 e0       	ldi	r29, 0x00	; 0

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 5;
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     7d2:	0f 2e       	mov	r0, r31
     7d4:	f8 e9       	ldi	r31, 0x98	; 152
     7d6:	ef 2e       	mov	r14, r31
     7d8:	f4 e0       	ldi	r31, 0x04	; 4
     7da:	ff 2e       	mov	r15, r31
     7dc:	f0 2d       	mov	r31, r0
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 5;
	do {
		rc = lora_driver_join(LoRa_OTAA);
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <lora_driver_join>
     7e4:	18 2f       	mov	r17, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     7e6:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <lora_driver_map_return_code_to_text>
     7ea:	9f 93       	push	r25
     7ec:	8f 93       	push	r24
     7ee:	df 93       	push	r29
     7f0:	cf 93       	push	r28
     7f2:	ff 92       	push	r15
     7f4:	ef 92       	push	r14
     7f6:	0e 94 33 27 	call	0x4e66	; 0x4e66 <printf>
		if ( rc == LoRa_ACCEPTED){
     7fa:	0f 90       	pop	r0
     7fc:	0f 90       	pop	r0
     7fe:	0f 90       	pop	r0
     800:	0f 90       	pop	r0
     802:	0f 90       	pop	r0
     804:	0f 90       	pop	r0
     806:	18 30       	cpi	r17, 0x08	; 8
     808:	11 f0       	breq	.+4      	; 0x80e <_loRa_setup+0x13c>
     80a:	21 97       	sbiw	r28, 0x01	; 1
			break;
		}

	} while (--maxJoinTriesLeft);
     80c:	41 f7       	brne	.-48     	; 0x7de <_loRa_setup+0x10c>

}
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	1f 91       	pop	r17
     814:	ff 90       	pop	r15
     816:	ef 90       	pop	r14
     818:	08 95       	ret

0000081a <loRaWanTask>:

void loRaWanTask(void* pvParamters){
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
     81e:	cd b7       	in	r28, 0x3d	; 61
     820:	de b7       	in	r29, 0x3e	; 62
     822:	66 97       	sbiw	r28, 0x16	; 22
     824:	0f b6       	in	r0, 0x3f	; 63
     826:	f8 94       	cli
     828:	de bf       	out	0x3e, r29	; 62
     82a:	0f be       	out	0x3f, r0	; 63
     82c:	cd bf       	out	0x3d, r28	; 61
	(void)pvParamters;

	//for resetting the LoRaWAN hardware.
	lora_driver_reset_rn2483(1);
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	0e 94 b7 1c 	call	0x396e	; 0x396e <lora_driver_reset_rn2483>
	vTaskDelay(150);
     834:	86 e9       	ldi	r24, 0x96	; 150
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <vTaskDelay>
	lora_driver_reset_rn2483(0);
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	0e 94 b7 1c 	call	0x396e	; 0x396e <lora_driver_reset_rn2483>
	vTaskDelay(150);
     842:	86 e9       	ldi	r24, 0x96	; 150
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <vTaskDelay>
	lora_driver_flush_buffers();
     84a:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <lora_driver_flush_buffers>
	
	_loRa_setup();
     84e:	41 df       	rcall	.-382    	; 0x6d2 <_loRa_setup>
	vTaskDelay(200);
     850:	88 ec       	ldi	r24, 0xC8	; 200
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <vTaskDelay>
	
	lora_payload_t _uplink_payload;
	
	_uplink_payload.len = 7;
     858:	87 e0       	ldi	r24, 0x07	; 7
     85a:	8a 83       	std	Y+2, r24	; 0x02
	_uplink_payload.port_no = 2;
     85c:	82 e0       	ldi	r24, 0x02	; 2
     85e:	89 83       	std	Y+1, r24	; 0x01
	
	while(1){
		
		///////////////////semaphore:
		xSemaphoreTake(semaphore, portMAX_DELAY);
		_uplink_payload.bytes[0] = plantdata.humidity;
     860:	08 e6       	ldi	r16, 0x68	; 104
     862:	1a e0       	ldi	r17, 0x0A	; 10
		_uplink_payload.bytes[3] = plantdata.co2 & 0xFF;
		_uplink_payload.bytes[4] = plantdata.light >> 8;
		_uplink_payload.bytes[5] = plantdata.light& 0xFF;
		_uplink_payload.bytes[6] = plantdata.water;
		
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
     864:	0f 2e       	mov	r0, r31
     866:	f8 eb       	ldi	r31, 0xB8	; 184
     868:	ef 2e       	mov	r14, r31
     86a:	f4 e0       	ldi	r31, 0x04	; 4
     86c:	ff 2e       	mov	r15, r31
     86e:	f0 2d       	mov	r31, r0
	
	
	while(1){
		
		///////////////////semaphore:
		xSemaphoreTake(semaphore, portMAX_DELAY);
     870:	6f ef       	ldi	r22, 0xFF	; 255
     872:	7f ef       	ldi	r23, 0xFF	; 255
     874:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <semaphore>
     878:	90 91 03 0a 	lds	r25, 0x0A03	; 0x800a03 <semaphore+0x1>
     87c:	a4 d5       	rcall	.+2888   	; 0x13c6 <xQueueSemaphoreTake>
		_uplink_payload.bytes[0] = plantdata.humidity;
     87e:	f8 01       	movw	r30, r16
     880:	82 81       	ldd	r24, Z+2	; 0x02
     882:	8b 83       	std	Y+3, r24	; 0x03
		_uplink_payload.bytes[1] = plantdata.temperature;
     884:	80 81       	ld	r24, Z
     886:	8c 83       	std	Y+4, r24	; 0x04
		_uplink_payload.bytes[2] = plantdata.co2 >> 8;
     888:	84 81       	ldd	r24, Z+4	; 0x04
     88a:	95 81       	ldd	r25, Z+5	; 0x05
     88c:	9d 83       	std	Y+5, r25	; 0x05
		_uplink_payload.bytes[3] = plantdata.co2 & 0xFF;
     88e:	8e 83       	std	Y+6, r24	; 0x06
		_uplink_payload.bytes[4] = plantdata.light >> 8;
     890:	86 81       	ldd	r24, Z+6	; 0x06
     892:	97 81       	ldd	r25, Z+7	; 0x07
     894:	9f 83       	std	Y+7, r25	; 0x07
		_uplink_payload.bytes[5] = plantdata.light& 0xFF;
     896:	88 87       	std	Y+8, r24	; 0x08
		_uplink_payload.bytes[6] = plantdata.water;
     898:	80 85       	ldd	r24, Z+8	; 0x08
     89a:	89 87       	std	Y+9, r24	; 0x09
		
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
     89c:	be 01       	movw	r22, r28
     89e:	6f 5f       	subi	r22, 0xFF	; 255
     8a0:	7f 4f       	sbci	r23, 0xFF	; 255
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <lora_driver_sent_upload_message>
     8a8:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <lora_driver_map_return_code_to_text>
     8ac:	9f 93       	push	r25
     8ae:	8f 93       	push	r24
     8b0:	ff 92       	push	r15
     8b2:	ef 92       	push	r14
     8b4:	0e 94 33 27 	call	0x4e66	; 0x4e66 <printf>
		vTaskDelay(1000);
     8b8:	88 ee       	ldi	r24, 0xE8	; 232
     8ba:	93 e0       	ldi	r25, 0x03	; 3
     8bc:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <vTaskDelay>
     8c0:	0f 90       	pop	r0
     8c2:	0f 90       	pop	r0
     8c4:	0f 90       	pop	r0
     8c6:	0f 90       	pop	r0
     8c8:	d3 cf       	rjmp	.-90     	; 0x870 <loRaWanTask+0x56>

000008ca <servoMotorTask>:
	
	while(1){
		vTaskDelay(10000);
			rcServoSet(0,100);
			lastWateringTime = xTaskGetTickCount();
			plantdata.water = xTaskGetTickCount();
     8ca:	c8 e6       	ldi	r28, 0x68	; 104
     8cc:	da e0       	ldi	r29, 0x0A	; 10
void servoMotorTask(void* pvParamters){
	(void)pvParamters;
	TickType_t waterInterval = (lastWateringTime + 1000);
	
	while(1){
		vTaskDelay(10000);
     8ce:	80 e1       	ldi	r24, 0x10	; 16
     8d0:	97 e2       	ldi	r25, 0x27	; 39
     8d2:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <vTaskDelay>
			rcServoSet(0,100);
     8d6:	64 e6       	ldi	r22, 0x64	; 100
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	0e 94 7f 20 	call	0x40fe	; 0x40fe <rcServoSet>
			lastWateringTime = xTaskGetTickCount();
     8de:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <xTaskGetTickCount>
     8e2:	90 93 73 0a 	sts	0x0A73, r25	; 0x800a73 <lastWateringTime+0x1>
     8e6:	80 93 72 0a 	sts	0x0A72, r24	; 0x800a72 <lastWateringTime>
			plantdata.water = xTaskGetTickCount();
     8ea:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <xTaskGetTickCount>
     8ee:	99 87       	std	Y+9, r25	; 0x09
     8f0:	88 87       	std	Y+8, r24	; 0x08
			printf("Plant has been watered!!!!\n");
     8f2:	8d ec       	ldi	r24, 0xCD	; 205
     8f4:	94 e0       	ldi	r25, 0x04	; 4
     8f6:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <puts>
     8fa:	e9 cf       	rjmp	.-46     	; 0x8ce <servoMotorTask+0x4>

000008fc <tempSensorTask>:
#include "hih8120.h"
#include "plantdata.h"

void tempSensorTask(void* pvParameters) {
	(void)pvParameters;
	printf("Temp sensor start!!!\n");
     8fc:	89 e2       	ldi	r24, 0x29	; 41
     8fe:	93 e0       	ldi	r25, 0x03	; 3
     900:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <puts>
	printf("tick %d", configTICK_RATE_HZ);
     904:	1f 92       	push	r1
     906:	8e e3       	ldi	r24, 0x3E	; 62
     908:	8f 93       	push	r24
     90a:	88 ee       	ldi	r24, 0xE8	; 232
     90c:	94 e0       	ldi	r25, 0x04	; 4
     90e:	9f 93       	push	r25
     910:	8f 93       	push	r24
     912:	0e 94 33 27 	call	0x4e66	; 0x4e66 <printf>
     916:	0f 90       	pop	r0
     918:	0f 90       	pop	r0
     91a:	0f 90       	pop	r0
     91c:	0f 90       	pop	r0
	while(1) {
		vTaskDelay(1000);
		
		int r = hih8120Wakeup();
		if(r != HIH8120_OK && r != HIH8120_TWI_BUSY) {
			printf("temp-wake error: %d\n", r);
     91e:	0f 2e       	mov	r0, r31
     920:	f0 ef       	ldi	r31, 0xF0	; 240
     922:	cf 2e       	mov	r12, r31
     924:	f4 e0       	ldi	r31, 0x04	; 4
     926:	df 2e       	mov	r13, r31
     928:	f0 2d       	mov	r31, r0
		}
		
		vTaskDelay(100);
		r = hih8120Meassure();
		if(r != HIH8120_OK && r != HIH8120_TWI_BUSY) {
			printf("Temp-read error: %d\n", r);
     92a:	0f 2e       	mov	r0, r31
     92c:	f5 e0       	ldi	r31, 0x05	; 5
     92e:	ef 2e       	mov	r14, r31
     930:	f5 e0       	ldi	r31, 0x05	; 5
     932:	ff 2e       	mov	r15, r31
     934:	f0 2d       	mov	r31, r0
		}
		vTaskDelay(100);
		///////////////////semaphore:
		xSemaphoreTake(semaphore, portMAX_DELAY);
		plantdata.humidity = hih8120GetHumidity();
     936:	c8 e6       	ldi	r28, 0x68	; 104
     938:	da e0       	ldi	r29, 0x0A	; 10
		plantdata.temperature = hih8120GetTemperature();
		printf("Hum: %d  Temp: %d\n", plantdata.humidity, plantdata.temperature);
     93a:	0a e1       	ldi	r16, 0x1A	; 26
     93c:	15 e0       	ldi	r17, 0x05	; 5
	printf("Temp sensor start!!!\n");
	printf("tick %d", configTICK_RATE_HZ);
	
	//Do temperature measurement
	while(1) {
		vTaskDelay(1000);
     93e:	88 ee       	ldi	r24, 0xE8	; 232
     940:	93 e0       	ldi	r25, 0x03	; 3
     942:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <vTaskDelay>
		
		int r = hih8120Wakeup();
     946:	0e 94 1d 1a 	call	0x343a	; 0x343a <hih8120Wakeup>
     94a:	28 2f       	mov	r18, r24
     94c:	30 e0       	ldi	r19, 0x00	; 0
		if(r != HIH8120_OK && r != HIH8120_TWI_BUSY) {
     94e:	21 15       	cp	r18, r1
     950:	31 05       	cpc	r19, r1
     952:	69 f0       	breq	.+26     	; 0x96e <tempSensorTask+0x72>
     954:	23 30       	cpi	r18, 0x03	; 3
     956:	31 05       	cpc	r19, r1
     958:	51 f0       	breq	.+20     	; 0x96e <tempSensorTask+0x72>
			printf("temp-wake error: %d\n", r);
     95a:	1f 92       	push	r1
     95c:	8f 93       	push	r24
     95e:	df 92       	push	r13
     960:	cf 92       	push	r12
     962:	0e 94 33 27 	call	0x4e66	; 0x4e66 <printf>
     966:	0f 90       	pop	r0
     968:	0f 90       	pop	r0
     96a:	0f 90       	pop	r0
     96c:	0f 90       	pop	r0
		}
		
		vTaskDelay(100);
     96e:	84 e6       	ldi	r24, 0x64	; 100
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <vTaskDelay>
		r = hih8120Meassure();
     976:	0e 94 32 1a 	call	0x3464	; 0x3464 <hih8120Meassure>
     97a:	28 2f       	mov	r18, r24
     97c:	30 e0       	ldi	r19, 0x00	; 0
		if(r != HIH8120_OK && r != HIH8120_TWI_BUSY) {
     97e:	21 15       	cp	r18, r1
     980:	31 05       	cpc	r19, r1
     982:	69 f0       	breq	.+26     	; 0x99e <tempSensorTask+0xa2>
     984:	23 30       	cpi	r18, 0x03	; 3
     986:	31 05       	cpc	r19, r1
     988:	51 f0       	breq	.+20     	; 0x99e <tempSensorTask+0xa2>
			printf("Temp-read error: %d\n", r);
     98a:	1f 92       	push	r1
     98c:	8f 93       	push	r24
     98e:	ff 92       	push	r15
     990:	ef 92       	push	r14
     992:	0e 94 33 27 	call	0x4e66	; 0x4e66 <printf>
     996:	0f 90       	pop	r0
     998:	0f 90       	pop	r0
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
		}
		vTaskDelay(100);
     99e:	84 e6       	ldi	r24, 0x64	; 100
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <vTaskDelay>
		///////////////////semaphore:
		xSemaphoreTake(semaphore, portMAX_DELAY);
     9a6:	6f ef       	ldi	r22, 0xFF	; 255
     9a8:	7f ef       	ldi	r23, 0xFF	; 255
     9aa:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <semaphore>
     9ae:	90 91 03 0a 	lds	r25, 0x0A03	; 0x800a03 <semaphore+0x1>
     9b2:	09 d5       	rcall	.+2578   	; 0x13c6 <xQueueSemaphoreTake>
		plantdata.humidity = hih8120GetHumidity();
     9b4:	0e 94 43 1a 	call	0x3486	; 0x3486 <hih8120GetHumidity>
     9b8:	0e 94 5e 15 	call	0x2abc	; 0x2abc <__fixsfsi>
     9bc:	7b 83       	std	Y+3, r23	; 0x03
     9be:	6a 83       	std	Y+2, r22	; 0x02
		plantdata.temperature = hih8120GetTemperature();
     9c0:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <hih8120GetTemperature>
     9c4:	0e 94 5e 15 	call	0x2abc	; 0x2abc <__fixsfsi>
     9c8:	68 83       	st	Y, r22
     9ca:	79 83       	std	Y+1, r23	; 0x01
		printf("Hum: %d  Temp: %d\n", plantdata.humidity, plantdata.temperature);
     9cc:	7f 93       	push	r23
     9ce:	6f 93       	push	r22
     9d0:	8b 81       	ldd	r24, Y+3	; 0x03
     9d2:	8f 93       	push	r24
     9d4:	8a 81       	ldd	r24, Y+2	; 0x02
     9d6:	8f 93       	push	r24
     9d8:	1f 93       	push	r17
     9da:	0f 93       	push	r16
     9dc:	0e 94 33 27 	call	0x4e66	; 0x4e66 <printf>
		
		xSemaphoreGive(semaphore);
     9e0:	20 e0       	ldi	r18, 0x00	; 0
     9e2:	40 e0       	ldi	r20, 0x00	; 0
     9e4:	50 e0       	ldi	r21, 0x00	; 0
     9e6:	60 e0       	ldi	r22, 0x00	; 0
     9e8:	70 e0       	ldi	r23, 0x00	; 0
     9ea:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <semaphore>
     9ee:	90 91 03 0a 	lds	r25, 0x0A03	; 0x800a03 <semaphore+0x1>
     9f2:	7b d3       	rcall	.+1782   	; 0x10ea <xQueueGenericSend>

	}
     9f4:	0f 90       	pop	r0
     9f6:	0f 90       	pop	r0
     9f8:	0f 90       	pop	r0
     9fa:	0f 90       	pop	r0
     9fc:	0f 90       	pop	r0
     9fe:	0f 90       	pop	r0
     a00:	9e cf       	rjmp	.-196    	; 0x93e <tempSensorTask+0x42>

00000a02 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     a02:	e8 e0       	ldi	r30, 0x08	; 8
     a04:	f1 e0       	ldi	r31, 0x01	; 1
     a06:	90 81       	ld	r25, Z
     a08:	90 7f       	andi	r25, 0xF0	; 240
     a0a:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     a0c:	90 81       	ld	r25, Z
     a0e:	8f 70       	andi	r24, 0x0F	; 15
     a10:	98 2b       	or	r25, r24
     a12:	90 83       	st	Z, r25
     a14:	08 95       	ret

00000a16 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     a16:	e8 e0       	ldi	r30, 0x08	; 8
     a18:	f1 e0       	ldi	r31, 0x01	; 1
     a1a:	80 81       	ld	r24, Z
     a1c:	80 7f       	andi	r24, 0xF0	; 240
     a1e:	80 83       	st	Z, r24
     a20:	08 95       	ret

00000a22 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     a22:	cf 93       	push	r28
     a24:	df 93       	push	r29
     a26:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
     a28:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     a2c:	ce 01       	movw	r24, r28
     a2e:	0e 94 d4 25 	call	0x4ba8	; 0x4ba8 <malloc>
     a32:	ec 01       	movw	r28, r24
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     a34:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
     a38:	20 97       	sbiw	r28, 0x00	; 0
     a3a:	11 f4       	brne	.+4      	; 0xa40 <pvPortMalloc+0x1e>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
     a3c:	0e 94 44 15 	call	0x2a88	; 0x2a88 <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
     a40:	ce 01       	movw	r24, r28
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	08 95       	ret

00000a48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
    if( pv )
     a4c:	00 97       	sbiw	r24, 0x00	; 0
     a4e:	41 f0       	breq	.+16     	; 0xa60 <vPortFree+0x18>
     a50:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
     a52:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <vTaskSuspendAll>
        {
            free( pv );
     a56:	ce 01       	movw	r24, r28
     a58:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
     a5c:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <xTaskResumeAll>
    }
}
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	08 95       	ret

00000a66 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     a66:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a68:	03 96       	adiw	r24, 0x03	; 3
     a6a:	92 83       	std	Z+2, r25	; 0x02
     a6c:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     a6e:	2f ef       	ldi	r18, 0xFF	; 255
     a70:	3f ef       	ldi	r19, 0xFF	; 255
     a72:	34 83       	std	Z+4, r19	; 0x04
     a74:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a76:	96 83       	std	Z+6, r25	; 0x06
     a78:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a7a:	90 87       	std	Z+8, r25	; 0x08
     a7c:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     a7e:	10 82       	st	Z, r1
     a80:	08 95       	ret

00000a82 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     a82:	fc 01       	movw	r30, r24
     a84:	11 86       	std	Z+9, r1	; 0x09
     a86:	10 86       	std	Z+8, r1	; 0x08
     a88:	08 95       	ret

00000a8a <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     a8a:	cf 93       	push	r28
     a8c:	df 93       	push	r29
     a8e:	9c 01       	movw	r18, r24
     a90:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     a92:	dc 01       	movw	r26, r24
     a94:	11 96       	adiw	r26, 0x01	; 1
     a96:	cd 91       	ld	r28, X+
     a98:	dc 91       	ld	r29, X
     a9a:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     a9c:	d3 83       	std	Z+3, r29	; 0x03
     a9e:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     aa0:	8c 81       	ldd	r24, Y+4	; 0x04
     aa2:	9d 81       	ldd	r25, Y+5	; 0x05
     aa4:	95 83       	std	Z+5, r25	; 0x05
     aa6:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     aa8:	8c 81       	ldd	r24, Y+4	; 0x04
     aaa:	9d 81       	ldd	r25, Y+5	; 0x05
     aac:	dc 01       	movw	r26, r24
     aae:	13 96       	adiw	r26, 0x03	; 3
     ab0:	7c 93       	st	X, r23
     ab2:	6e 93       	st	-X, r22
     ab4:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     ab6:	7d 83       	std	Y+5, r23	; 0x05
     ab8:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     aba:	31 87       	std	Z+9, r19	; 0x09
     abc:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     abe:	f9 01       	movw	r30, r18
     ac0:	80 81       	ld	r24, Z
     ac2:	8f 5f       	subi	r24, 0xFF	; 255
     ac4:	80 83       	st	Z, r24
}
     ac6:	df 91       	pop	r29
     ac8:	cf 91       	pop	r28
     aca:	08 95       	ret

00000acc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     ad2:	48 81       	ld	r20, Y
     ad4:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     ad6:	4f 3f       	cpi	r20, 0xFF	; 255
     ad8:	2f ef       	ldi	r18, 0xFF	; 255
     ada:	52 07       	cpc	r21, r18
     adc:	21 f4       	brne	.+8      	; 0xae6 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     ade:	fc 01       	movw	r30, r24
     ae0:	a7 81       	ldd	r26, Z+7	; 0x07
     ae2:	b0 85       	ldd	r27, Z+8	; 0x08
     ae4:	0d c0       	rjmp	.+26     	; 0xb00 <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     ae6:	dc 01       	movw	r26, r24
     ae8:	13 96       	adiw	r26, 0x03	; 3
     aea:	01 c0       	rjmp	.+2      	; 0xaee <vListInsert+0x22>
     aec:	df 01       	movw	r26, r30
     aee:	12 96       	adiw	r26, 0x02	; 2
     af0:	ed 91       	ld	r30, X+
     af2:	fc 91       	ld	r31, X
     af4:	13 97       	sbiw	r26, 0x03	; 3
     af6:	20 81       	ld	r18, Z
     af8:	31 81       	ldd	r19, Z+1	; 0x01
     afa:	42 17       	cp	r20, r18
     afc:	53 07       	cpc	r21, r19
     afe:	b0 f7       	brcc	.-20     	; 0xaec <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     b00:	12 96       	adiw	r26, 0x02	; 2
     b02:	ed 91       	ld	r30, X+
     b04:	fc 91       	ld	r31, X
     b06:	13 97       	sbiw	r26, 0x03	; 3
     b08:	fb 83       	std	Y+3, r31	; 0x03
     b0a:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     b0c:	d5 83       	std	Z+5, r29	; 0x05
     b0e:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     b10:	bd 83       	std	Y+5, r27	; 0x05
     b12:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     b14:	13 96       	adiw	r26, 0x03	; 3
     b16:	dc 93       	st	X, r29
     b18:	ce 93       	st	-X, r28
     b1a:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     b1c:	99 87       	std	Y+9, r25	; 0x09
     b1e:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     b20:	fc 01       	movw	r30, r24
     b22:	20 81       	ld	r18, Z
     b24:	2f 5f       	subi	r18, 0xFF	; 255
     b26:	20 83       	st	Z, r18
}
     b28:	df 91       	pop	r29
     b2a:	cf 91       	pop	r28
     b2c:	08 95       	ret

00000b2e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     b2e:	cf 93       	push	r28
     b30:	df 93       	push	r29
     b32:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     b34:	a0 85       	ldd	r26, Z+8	; 0x08
     b36:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     b38:	c2 81       	ldd	r28, Z+2	; 0x02
     b3a:	d3 81       	ldd	r29, Z+3	; 0x03
     b3c:	84 81       	ldd	r24, Z+4	; 0x04
     b3e:	95 81       	ldd	r25, Z+5	; 0x05
     b40:	9d 83       	std	Y+5, r25	; 0x05
     b42:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     b44:	c4 81       	ldd	r28, Z+4	; 0x04
     b46:	d5 81       	ldd	r29, Z+5	; 0x05
     b48:	82 81       	ldd	r24, Z+2	; 0x02
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	9b 83       	std	Y+3, r25	; 0x03
     b4e:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     b50:	11 96       	adiw	r26, 0x01	; 1
     b52:	8d 91       	ld	r24, X+
     b54:	9c 91       	ld	r25, X
     b56:	12 97       	sbiw	r26, 0x02	; 2
     b58:	e8 17       	cp	r30, r24
     b5a:	f9 07       	cpc	r31, r25
     b5c:	31 f4       	brne	.+12     	; 0xb6a <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     b5e:	84 81       	ldd	r24, Z+4	; 0x04
     b60:	95 81       	ldd	r25, Z+5	; 0x05
     b62:	12 96       	adiw	r26, 0x02	; 2
     b64:	9c 93       	st	X, r25
     b66:	8e 93       	st	-X, r24
     b68:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     b6a:	11 86       	std	Z+9, r1	; 0x09
     b6c:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     b6e:	8c 91       	ld	r24, X
     b70:	81 50       	subi	r24, 0x01	; 1
     b72:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     b74:	8c 91       	ld	r24, X
}
     b76:	df 91       	pop	r29
     b78:	cf 91       	pop	r28
     b7a:	08 95       	ret

00000b7c <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     b7c:	31 e1       	ldi	r19, 0x11	; 17
     b7e:	fc 01       	movw	r30, r24
     b80:	30 83       	st	Z, r19
     b82:	31 97       	sbiw	r30, 0x01	; 1
     b84:	22 e2       	ldi	r18, 0x22	; 34
     b86:	20 83       	st	Z, r18
     b88:	31 97       	sbiw	r30, 0x01	; 1
     b8a:	a3 e3       	ldi	r26, 0x33	; 51
     b8c:	a0 83       	st	Z, r26
     b8e:	31 97       	sbiw	r30, 0x01	; 1
     b90:	60 83       	st	Z, r22
     b92:	31 97       	sbiw	r30, 0x01	; 1
     b94:	70 83       	st	Z, r23
     b96:	31 97       	sbiw	r30, 0x01	; 1
     b98:	10 82       	st	Z, r1
     b9a:	31 97       	sbiw	r30, 0x01	; 1
     b9c:	10 82       	st	Z, r1
     b9e:	31 97       	sbiw	r30, 0x01	; 1
     ba0:	60 e8       	ldi	r22, 0x80	; 128
     ba2:	60 83       	st	Z, r22
     ba4:	31 97       	sbiw	r30, 0x01	; 1
     ba6:	10 82       	st	Z, r1
     ba8:	31 97       	sbiw	r30, 0x01	; 1
     baa:	10 82       	st	Z, r1
     bac:	31 97       	sbiw	r30, 0x01	; 1
     bae:	10 82       	st	Z, r1
     bb0:	31 97       	sbiw	r30, 0x01	; 1
     bb2:	62 e0       	ldi	r22, 0x02	; 2
     bb4:	60 83       	st	Z, r22
     bb6:	31 97       	sbiw	r30, 0x01	; 1
     bb8:	63 e0       	ldi	r22, 0x03	; 3
     bba:	60 83       	st	Z, r22
     bbc:	31 97       	sbiw	r30, 0x01	; 1
     bbe:	64 e0       	ldi	r22, 0x04	; 4
     bc0:	60 83       	st	Z, r22
     bc2:	31 97       	sbiw	r30, 0x01	; 1
     bc4:	65 e0       	ldi	r22, 0x05	; 5
     bc6:	60 83       	st	Z, r22
     bc8:	31 97       	sbiw	r30, 0x01	; 1
     bca:	66 e0       	ldi	r22, 0x06	; 6
     bcc:	60 83       	st	Z, r22
     bce:	31 97       	sbiw	r30, 0x01	; 1
     bd0:	67 e0       	ldi	r22, 0x07	; 7
     bd2:	60 83       	st	Z, r22
     bd4:	31 97       	sbiw	r30, 0x01	; 1
     bd6:	68 e0       	ldi	r22, 0x08	; 8
     bd8:	60 83       	st	Z, r22
     bda:	31 97       	sbiw	r30, 0x01	; 1
     bdc:	69 e0       	ldi	r22, 0x09	; 9
     bde:	60 83       	st	Z, r22
     be0:	31 97       	sbiw	r30, 0x01	; 1
     be2:	60 e1       	ldi	r22, 0x10	; 16
     be4:	60 83       	st	Z, r22
     be6:	31 97       	sbiw	r30, 0x01	; 1
     be8:	30 83       	st	Z, r19
     bea:	31 97       	sbiw	r30, 0x01	; 1
     bec:	32 e1       	ldi	r19, 0x12	; 18
     bee:	30 83       	st	Z, r19
     bf0:	31 97       	sbiw	r30, 0x01	; 1
     bf2:	33 e1       	ldi	r19, 0x13	; 19
     bf4:	30 83       	st	Z, r19
     bf6:	31 97       	sbiw	r30, 0x01	; 1
     bf8:	34 e1       	ldi	r19, 0x14	; 20
     bfa:	30 83       	st	Z, r19
     bfc:	31 97       	sbiw	r30, 0x01	; 1
     bfe:	35 e1       	ldi	r19, 0x15	; 21
     c00:	30 83       	st	Z, r19
     c02:	31 97       	sbiw	r30, 0x01	; 1
     c04:	36 e1       	ldi	r19, 0x16	; 22
     c06:	30 83       	st	Z, r19
     c08:	31 97       	sbiw	r30, 0x01	; 1
     c0a:	37 e1       	ldi	r19, 0x17	; 23
     c0c:	30 83       	st	Z, r19
     c0e:	31 97       	sbiw	r30, 0x01	; 1
     c10:	38 e1       	ldi	r19, 0x18	; 24
     c12:	30 83       	st	Z, r19
     c14:	31 97       	sbiw	r30, 0x01	; 1
     c16:	39 e1       	ldi	r19, 0x19	; 25
     c18:	30 83       	st	Z, r19
     c1a:	31 97       	sbiw	r30, 0x01	; 1
     c1c:	30 e2       	ldi	r19, 0x20	; 32
     c1e:	30 83       	st	Z, r19
     c20:	31 97       	sbiw	r30, 0x01	; 1
     c22:	31 e2       	ldi	r19, 0x21	; 33
     c24:	30 83       	st	Z, r19
     c26:	31 97       	sbiw	r30, 0x01	; 1
     c28:	20 83       	st	Z, r18
     c2a:	31 97       	sbiw	r30, 0x01	; 1
     c2c:	23 e2       	ldi	r18, 0x23	; 35
     c2e:	20 83       	st	Z, r18
     c30:	31 97       	sbiw	r30, 0x01	; 1
     c32:	40 83       	st	Z, r20
     c34:	31 97       	sbiw	r30, 0x01	; 1
     c36:	50 83       	st	Z, r21
     c38:	31 97       	sbiw	r30, 0x01	; 1
     c3a:	26 e2       	ldi	r18, 0x26	; 38
     c3c:	20 83       	st	Z, r18
     c3e:	31 97       	sbiw	r30, 0x01	; 1
     c40:	27 e2       	ldi	r18, 0x27	; 39
     c42:	20 83       	st	Z, r18
     c44:	31 97       	sbiw	r30, 0x01	; 1
     c46:	28 e2       	ldi	r18, 0x28	; 40
     c48:	20 83       	st	Z, r18
     c4a:	31 97       	sbiw	r30, 0x01	; 1
     c4c:	29 e2       	ldi	r18, 0x29	; 41
     c4e:	20 83       	st	Z, r18
     c50:	31 97       	sbiw	r30, 0x01	; 1
     c52:	20 e3       	ldi	r18, 0x30	; 48
     c54:	20 83       	st	Z, r18
     c56:	31 97       	sbiw	r30, 0x01	; 1
     c58:	21 e3       	ldi	r18, 0x31	; 49
     c5a:	20 83       	st	Z, r18
     c5c:	89 97       	sbiw	r24, 0x29	; 41
     c5e:	08 95       	ret

00000c60 <xPortStartScheduler>:
     c60:	a8 95       	wdr
     c62:	90 ec       	ldi	r25, 0xC0	; 192
     c64:	88 e1       	ldi	r24, 0x18	; 24
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	f8 94       	cli
     c6a:	a8 95       	wdr
     c6c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     c76:	a0 91 7e 08 	lds	r26, 0x087E	; 0x80087e <pxCurrentTCB>
     c7a:	b0 91 7f 08 	lds	r27, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
     c7e:	cd 91       	ld	r28, X+
     c80:	cd bf       	out	0x3d, r28	; 61
     c82:	dd 91       	ld	r29, X+
     c84:	de bf       	out	0x3e, r29	; 62
     c86:	ff 91       	pop	r31
     c88:	ef 91       	pop	r30
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	bf 91       	pop	r27
     c90:	af 91       	pop	r26
     c92:	9f 91       	pop	r25
     c94:	8f 91       	pop	r24
     c96:	7f 91       	pop	r23
     c98:	6f 91       	pop	r22
     c9a:	5f 91       	pop	r21
     c9c:	4f 91       	pop	r20
     c9e:	3f 91       	pop	r19
     ca0:	2f 91       	pop	r18
     ca2:	1f 91       	pop	r17
     ca4:	0f 91       	pop	r16
     ca6:	ff 90       	pop	r15
     ca8:	ef 90       	pop	r14
     caa:	df 90       	pop	r13
     cac:	cf 90       	pop	r12
     cae:	bf 90       	pop	r11
     cb0:	af 90       	pop	r10
     cb2:	9f 90       	pop	r9
     cb4:	8f 90       	pop	r8
     cb6:	7f 90       	pop	r7
     cb8:	6f 90       	pop	r6
     cba:	5f 90       	pop	r5
     cbc:	4f 90       	pop	r4
     cbe:	3f 90       	pop	r3
     cc0:	2f 90       	pop	r2
     cc2:	1f 90       	pop	r1
     cc4:	0f 90       	pop	r0
     cc6:	0c be       	out	0x3c, r0	; 60
     cc8:	0f 90       	pop	r0
     cca:	0b be       	out	0x3b, r0	; 59
     ccc:	0f 90       	pop	r0
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	0f 90       	pop	r0
     cd2:	08 95       	ret
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	08 95       	ret

00000cd8 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     cd8:	0f 92       	push	r0
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	f8 94       	cli
     cde:	0f 92       	push	r0
     ce0:	0b b6       	in	r0, 0x3b	; 59
     ce2:	0f 92       	push	r0
     ce4:	0c b6       	in	r0, 0x3c	; 60
     ce6:	0f 92       	push	r0
     ce8:	1f 92       	push	r1
     cea:	11 24       	eor	r1, r1
     cec:	2f 92       	push	r2
     cee:	3f 92       	push	r3
     cf0:	4f 92       	push	r4
     cf2:	5f 92       	push	r5
     cf4:	6f 92       	push	r6
     cf6:	7f 92       	push	r7
     cf8:	8f 92       	push	r8
     cfa:	9f 92       	push	r9
     cfc:	af 92       	push	r10
     cfe:	bf 92       	push	r11
     d00:	cf 92       	push	r12
     d02:	df 92       	push	r13
     d04:	ef 92       	push	r14
     d06:	ff 92       	push	r15
     d08:	0f 93       	push	r16
     d0a:	1f 93       	push	r17
     d0c:	2f 93       	push	r18
     d0e:	3f 93       	push	r19
     d10:	4f 93       	push	r20
     d12:	5f 93       	push	r21
     d14:	6f 93       	push	r22
     d16:	7f 93       	push	r23
     d18:	8f 93       	push	r24
     d1a:	9f 93       	push	r25
     d1c:	af 93       	push	r26
     d1e:	bf 93       	push	r27
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	ef 93       	push	r30
     d26:	ff 93       	push	r31
     d28:	a0 91 7e 08 	lds	r26, 0x087E	; 0x80087e <pxCurrentTCB>
     d2c:	b0 91 7f 08 	lds	r27, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
     d30:	0d b6       	in	r0, 0x3d	; 61
     d32:	0d 92       	st	X+, r0
     d34:	0e b6       	in	r0, 0x3e	; 62
     d36:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     d38:	0e 94 07 10 	call	0x200e	; 0x200e <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     d3c:	a0 91 7e 08 	lds	r26, 0x087E	; 0x80087e <pxCurrentTCB>
     d40:	b0 91 7f 08 	lds	r27, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
     d44:	cd 91       	ld	r28, X+
     d46:	cd bf       	out	0x3d, r28	; 61
     d48:	dd 91       	ld	r29, X+
     d4a:	de bf       	out	0x3e, r29	; 62
     d4c:	ff 91       	pop	r31
     d4e:	ef 91       	pop	r30
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	bf 91       	pop	r27
     d56:	af 91       	pop	r26
     d58:	9f 91       	pop	r25
     d5a:	8f 91       	pop	r24
     d5c:	7f 91       	pop	r23
     d5e:	6f 91       	pop	r22
     d60:	5f 91       	pop	r21
     d62:	4f 91       	pop	r20
     d64:	3f 91       	pop	r19
     d66:	2f 91       	pop	r18
     d68:	1f 91       	pop	r17
     d6a:	0f 91       	pop	r16
     d6c:	ff 90       	pop	r15
     d6e:	ef 90       	pop	r14
     d70:	df 90       	pop	r13
     d72:	cf 90       	pop	r12
     d74:	bf 90       	pop	r11
     d76:	af 90       	pop	r10
     d78:	9f 90       	pop	r9
     d7a:	8f 90       	pop	r8
     d7c:	7f 90       	pop	r7
     d7e:	6f 90       	pop	r6
     d80:	5f 90       	pop	r5
     d82:	4f 90       	pop	r4
     d84:	3f 90       	pop	r3
     d86:	2f 90       	pop	r2
     d88:	1f 90       	pop	r1
     d8a:	0f 90       	pop	r0
     d8c:	0c be       	out	0x3c, r0	; 60
     d8e:	0f 90       	pop	r0
     d90:	0b be       	out	0x3b, r0	; 59
     d92:	0f 90       	pop	r0
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     d98:	08 95       	ret

00000d9a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     d9a:	0f 92       	push	r0
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	f8 94       	cli
     da0:	0f 92       	push	r0
     da2:	0b b6       	in	r0, 0x3b	; 59
     da4:	0f 92       	push	r0
     da6:	0c b6       	in	r0, 0x3c	; 60
     da8:	0f 92       	push	r0
     daa:	1f 92       	push	r1
     dac:	11 24       	eor	r1, r1
     dae:	2f 92       	push	r2
     db0:	3f 92       	push	r3
     db2:	4f 92       	push	r4
     db4:	5f 92       	push	r5
     db6:	6f 92       	push	r6
     db8:	7f 92       	push	r7
     dba:	8f 92       	push	r8
     dbc:	9f 92       	push	r9
     dbe:	af 92       	push	r10
     dc0:	bf 92       	push	r11
     dc2:	cf 92       	push	r12
     dc4:	df 92       	push	r13
     dc6:	ef 92       	push	r14
     dc8:	ff 92       	push	r15
     dca:	0f 93       	push	r16
     dcc:	1f 93       	push	r17
     dce:	2f 93       	push	r18
     dd0:	3f 93       	push	r19
     dd2:	4f 93       	push	r20
     dd4:	5f 93       	push	r21
     dd6:	6f 93       	push	r22
     dd8:	7f 93       	push	r23
     dda:	8f 93       	push	r24
     ddc:	9f 93       	push	r25
     dde:	af 93       	push	r26
     de0:	bf 93       	push	r27
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	ef 93       	push	r30
     de8:	ff 93       	push	r31
     dea:	a0 91 7e 08 	lds	r26, 0x087E	; 0x80087e <pxCurrentTCB>
     dee:	b0 91 7f 08 	lds	r27, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
     df2:	0d b6       	in	r0, 0x3d	; 61
     df4:	0d 92       	st	X+, r0
     df6:	0e b6       	in	r0, 0x3e	; 62
     df8:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     dfa:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     dfc:	c0 d7       	rcall	.+3968   	; 0x1d7e <xTaskIncrementTick>
     dfe:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     e00:	0e 94 07 10 	call	0x200e	; 0x200e <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
     e04:	a0 91 7e 08 	lds	r26, 0x087E	; 0x80087e <pxCurrentTCB>
     e08:	b0 91 7f 08 	lds	r27, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
     e0c:	cd 91       	ld	r28, X+
     e0e:	cd bf       	out	0x3d, r28	; 61
     e10:	dd 91       	ld	r29, X+
     e12:	de bf       	out	0x3e, r29	; 62
     e14:	ff 91       	pop	r31
     e16:	ef 91       	pop	r30
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	bf 91       	pop	r27
     e1e:	af 91       	pop	r26
     e20:	9f 91       	pop	r25
     e22:	8f 91       	pop	r24
     e24:	7f 91       	pop	r23
     e26:	6f 91       	pop	r22
     e28:	5f 91       	pop	r21
     e2a:	4f 91       	pop	r20
     e2c:	3f 91       	pop	r19
     e2e:	2f 91       	pop	r18
     e30:	1f 91       	pop	r17
     e32:	0f 91       	pop	r16
     e34:	ff 90       	pop	r15
     e36:	ef 90       	pop	r14
     e38:	df 90       	pop	r13
     e3a:	cf 90       	pop	r12
     e3c:	bf 90       	pop	r11
     e3e:	af 90       	pop	r10
     e40:	9f 90       	pop	r9
     e42:	8f 90       	pop	r8
     e44:	7f 90       	pop	r7
     e46:	6f 90       	pop	r6
     e48:	5f 90       	pop	r5
     e4a:	4f 90       	pop	r4
     e4c:	3f 90       	pop	r3
     e4e:	2f 90       	pop	r2
     e50:	1f 90       	pop	r1
     e52:	0f 90       	pop	r0
     e54:	0c be       	out	0x3c, r0	; 60
     e56:	0f 90       	pop	r0
     e58:	0b be       	out	0x3b, r0	; 59
     e5a:	0f 90       	pop	r0
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     e60:	08 95       	ret

00000e62 <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     e62:	9b df       	rcall	.-202    	; 0xd9a <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     e64:	18 95       	reti

00000e66 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	0f 92       	push	r0
     e6c:	fc 01       	movw	r30, r24
     e6e:	92 8d       	ldd	r25, Z+26	; 0x1a
     e70:	0f 90       	pop	r0
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	91 11       	cpse	r25, r1
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	08 95       	ret

00000e7c <prvCopyDataToQueue>:
     e7c:	0f 93       	push	r16
     e7e:	1f 93       	push	r17
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
     e84:	ec 01       	movw	r28, r24
     e86:	04 2f       	mov	r16, r20
     e88:	1a 8d       	ldd	r17, Y+26	; 0x1a
     e8a:	4c 8d       	ldd	r20, Y+28	; 0x1c
     e8c:	41 11       	cpse	r20, r1
     e8e:	0c c0       	rjmp	.+24     	; 0xea8 <prvCopyDataToQueue+0x2c>
     e90:	88 81       	ld	r24, Y
     e92:	99 81       	ldd	r25, Y+1	; 0x01
     e94:	89 2b       	or	r24, r25
     e96:	09 f0       	breq	.+2      	; 0xe9a <prvCopyDataToQueue+0x1e>
     e98:	42 c0       	rjmp	.+132    	; 0xf1e <prvCopyDataToQueue+0xa2>
     e9a:	8c 81       	ldd	r24, Y+4	; 0x04
     e9c:	9d 81       	ldd	r25, Y+5	; 0x05
     e9e:	0e 94 cf 11 	call	0x239e	; 0x239e <xTaskPriorityDisinherit>
     ea2:	1d 82       	std	Y+5, r1	; 0x05
     ea4:	1c 82       	std	Y+4, r1	; 0x04
     ea6:	42 c0       	rjmp	.+132    	; 0xf2c <prvCopyDataToQueue+0xb0>
     ea8:	01 11       	cpse	r16, r1
     eaa:	17 c0       	rjmp	.+46     	; 0xeda <prvCopyDataToQueue+0x5e>
     eac:	50 e0       	ldi	r21, 0x00	; 0
     eae:	8a 81       	ldd	r24, Y+2	; 0x02
     eb0:	9b 81       	ldd	r25, Y+3	; 0x03
     eb2:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <memcpy>
     eb6:	2c 8d       	ldd	r18, Y+28	; 0x1c
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	9b 81       	ldd	r25, Y+3	; 0x03
     ebc:	82 0f       	add	r24, r18
     ebe:	91 1d       	adc	r25, r1
     ec0:	9b 83       	std	Y+3, r25	; 0x03
     ec2:	8a 83       	std	Y+2, r24	; 0x02
     ec4:	2c 81       	ldd	r18, Y+4	; 0x04
     ec6:	3d 81       	ldd	r19, Y+5	; 0x05
     ec8:	82 17       	cp	r24, r18
     eca:	93 07       	cpc	r25, r19
     ecc:	50 f1       	brcs	.+84     	; 0xf22 <prvCopyDataToQueue+0xa6>
     ece:	88 81       	ld	r24, Y
     ed0:	99 81       	ldd	r25, Y+1	; 0x01
     ed2:	9b 83       	std	Y+3, r25	; 0x03
     ed4:	8a 83       	std	Y+2, r24	; 0x02
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	29 c0       	rjmp	.+82     	; 0xf2c <prvCopyDataToQueue+0xb0>
     eda:	50 e0       	ldi	r21, 0x00	; 0
     edc:	8e 81       	ldd	r24, Y+6	; 0x06
     ede:	9f 81       	ldd	r25, Y+7	; 0x07
     ee0:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <memcpy>
     ee4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	91 95       	neg	r25
     eea:	81 95       	neg	r24
     eec:	91 09       	sbc	r25, r1
     eee:	2e 81       	ldd	r18, Y+6	; 0x06
     ef0:	3f 81       	ldd	r19, Y+7	; 0x07
     ef2:	28 0f       	add	r18, r24
     ef4:	39 1f       	adc	r19, r25
     ef6:	3f 83       	std	Y+7, r19	; 0x07
     ef8:	2e 83       	std	Y+6, r18	; 0x06
     efa:	48 81       	ld	r20, Y
     efc:	59 81       	ldd	r21, Y+1	; 0x01
     efe:	24 17       	cp	r18, r20
     f00:	35 07       	cpc	r19, r21
     f02:	30 f4       	brcc	.+12     	; 0xf10 <prvCopyDataToQueue+0x94>
     f04:	2c 81       	ldd	r18, Y+4	; 0x04
     f06:	3d 81       	ldd	r19, Y+5	; 0x05
     f08:	82 0f       	add	r24, r18
     f0a:	93 1f       	adc	r25, r19
     f0c:	9f 83       	std	Y+7, r25	; 0x07
     f0e:	8e 83       	std	Y+6, r24	; 0x06
     f10:	02 30       	cpi	r16, 0x02	; 2
     f12:	49 f4       	brne	.+18     	; 0xf26 <prvCopyDataToQueue+0xaa>
     f14:	11 23       	and	r17, r17
     f16:	49 f0       	breq	.+18     	; 0xf2a <prvCopyDataToQueue+0xae>
     f18:	11 50       	subi	r17, 0x01	; 1
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	07 c0       	rjmp	.+14     	; 0xf2c <prvCopyDataToQueue+0xb0>
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	05 c0       	rjmp	.+10     	; 0xf2c <prvCopyDataToQueue+0xb0>
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	03 c0       	rjmp	.+6      	; 0xf2c <prvCopyDataToQueue+0xb0>
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	01 c0       	rjmp	.+2      	; 0xf2c <prvCopyDataToQueue+0xb0>
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	1f 5f       	subi	r17, 0xFF	; 255
     f2e:	1a 8f       	std	Y+26, r17	; 0x1a
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	1f 91       	pop	r17
     f36:	0f 91       	pop	r16
     f38:	08 95       	ret

00000f3a <prvCopyDataFromQueue>:
     f3a:	fc 01       	movw	r30, r24
     f3c:	44 8d       	ldd	r20, Z+28	; 0x1c
     f3e:	44 23       	and	r20, r20
     f40:	a9 f0       	breq	.+42     	; 0xf6c <prvCopyDataFromQueue+0x32>
     f42:	50 e0       	ldi	r21, 0x00	; 0
     f44:	26 81       	ldd	r18, Z+6	; 0x06
     f46:	37 81       	ldd	r19, Z+7	; 0x07
     f48:	24 0f       	add	r18, r20
     f4a:	35 1f       	adc	r19, r21
     f4c:	37 83       	std	Z+7, r19	; 0x07
     f4e:	26 83       	std	Z+6, r18	; 0x06
     f50:	84 81       	ldd	r24, Z+4	; 0x04
     f52:	95 81       	ldd	r25, Z+5	; 0x05
     f54:	28 17       	cp	r18, r24
     f56:	39 07       	cpc	r19, r25
     f58:	20 f0       	brcs	.+8      	; 0xf62 <prvCopyDataFromQueue+0x28>
     f5a:	80 81       	ld	r24, Z
     f5c:	91 81       	ldd	r25, Z+1	; 0x01
     f5e:	97 83       	std	Z+7, r25	; 0x07
     f60:	86 83       	std	Z+6, r24	; 0x06
     f62:	cb 01       	movw	r24, r22
     f64:	66 81       	ldd	r22, Z+6	; 0x06
     f66:	77 81       	ldd	r23, Z+7	; 0x07
     f68:	0c 94 f9 26 	jmp	0x4df2	; 0x4df2 <memcpy>
     f6c:	08 95       	ret

00000f6e <prvUnlockQueue>:
     f6e:	ef 92       	push	r14
     f70:	ff 92       	push	r15
     f72:	0f 93       	push	r16
     f74:	1f 93       	push	r17
     f76:	cf 93       	push	r28
     f78:	8c 01       	movw	r16, r24
     f7a:	0f b6       	in	r0, 0x3f	; 63
     f7c:	f8 94       	cli
     f7e:	0f 92       	push	r0
     f80:	fc 01       	movw	r30, r24
     f82:	c6 8d       	ldd	r28, Z+30	; 0x1e
     f84:	1c 16       	cp	r1, r28
     f86:	ac f4       	brge	.+42     	; 0xfb2 <prvUnlockQueue+0x44>
     f88:	81 89       	ldd	r24, Z+17	; 0x11
     f8a:	81 11       	cpse	r24, r1
     f8c:	06 c0       	rjmp	.+12     	; 0xf9a <prvUnlockQueue+0x2c>
     f8e:	11 c0       	rjmp	.+34     	; 0xfb2 <prvUnlockQueue+0x44>
     f90:	f8 01       	movw	r30, r16
     f92:	81 89       	ldd	r24, Z+17	; 0x11
     f94:	81 11       	cpse	r24, r1
     f96:	05 c0       	rjmp	.+10     	; 0xfa2 <prvUnlockQueue+0x34>
     f98:	0c c0       	rjmp	.+24     	; 0xfb2 <prvUnlockQueue+0x44>
     f9a:	78 01       	movw	r14, r16
     f9c:	f1 e1       	ldi	r31, 0x11	; 17
     f9e:	ef 0e       	add	r14, r31
     fa0:	f1 1c       	adc	r15, r1
     fa2:	c7 01       	movw	r24, r14
     fa4:	0e 94 be 10 	call	0x217c	; 0x217c <xTaskRemoveFromEventList>
     fa8:	81 11       	cpse	r24, r1
     faa:	0e 94 46 11 	call	0x228c	; 0x228c <vTaskMissedYield>
     fae:	c1 50       	subi	r28, 0x01	; 1
     fb0:	79 f7       	brne	.-34     	; 0xf90 <prvUnlockQueue+0x22>
     fb2:	8f ef       	ldi	r24, 0xFF	; 255
     fb4:	f8 01       	movw	r30, r16
     fb6:	86 8f       	std	Z+30, r24	; 0x1e
     fb8:	0f 90       	pop	r0
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	f8 94       	cli
     fc0:	0f 92       	push	r0
     fc2:	c5 8d       	ldd	r28, Z+29	; 0x1d
     fc4:	1c 16       	cp	r1, r28
     fc6:	ac f4       	brge	.+42     	; 0xff2 <prvUnlockQueue+0x84>
     fc8:	80 85       	ldd	r24, Z+8	; 0x08
     fca:	81 11       	cpse	r24, r1
     fcc:	06 c0       	rjmp	.+12     	; 0xfda <prvUnlockQueue+0x6c>
     fce:	11 c0       	rjmp	.+34     	; 0xff2 <prvUnlockQueue+0x84>
     fd0:	f8 01       	movw	r30, r16
     fd2:	80 85       	ldd	r24, Z+8	; 0x08
     fd4:	81 11       	cpse	r24, r1
     fd6:	05 c0       	rjmp	.+10     	; 0xfe2 <prvUnlockQueue+0x74>
     fd8:	0c c0       	rjmp	.+24     	; 0xff2 <prvUnlockQueue+0x84>
     fda:	78 01       	movw	r14, r16
     fdc:	f8 e0       	ldi	r31, 0x08	; 8
     fde:	ef 0e       	add	r14, r31
     fe0:	f1 1c       	adc	r15, r1
     fe2:	c7 01       	movw	r24, r14
     fe4:	0e 94 be 10 	call	0x217c	; 0x217c <xTaskRemoveFromEventList>
     fe8:	81 11       	cpse	r24, r1
     fea:	0e 94 46 11 	call	0x228c	; 0x228c <vTaskMissedYield>
     fee:	c1 50       	subi	r28, 0x01	; 1
     ff0:	79 f7       	brne	.-34     	; 0xfd0 <prvUnlockQueue+0x62>
     ff2:	8f ef       	ldi	r24, 0xFF	; 255
     ff4:	f8 01       	movw	r30, r16
     ff6:	85 8f       	std	Z+29, r24	; 0x1d
     ff8:	0f 90       	pop	r0
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	cf 91       	pop	r28
     ffe:	1f 91       	pop	r17
    1000:	0f 91       	pop	r16
    1002:	ff 90       	pop	r15
    1004:	ef 90       	pop	r14
    1006:	08 95       	ret

00001008 <xQueueGenericReset>:
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	ec 01       	movw	r28, r24
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	0f 92       	push	r0
    1014:	e8 81       	ld	r30, Y
    1016:	f9 81       	ldd	r31, Y+1	; 0x01
    1018:	8b 8d       	ldd	r24, Y+27	; 0x1b
    101a:	2c 8d       	ldd	r18, Y+28	; 0x1c
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	82 9f       	mul	r24, r18
    1022:	a0 01       	movw	r20, r0
    1024:	83 9f       	mul	r24, r19
    1026:	50 0d       	add	r21, r0
    1028:	92 9f       	mul	r25, r18
    102a:	50 0d       	add	r21, r0
    102c:	11 24       	eor	r1, r1
    102e:	4e 0f       	add	r20, r30
    1030:	5f 1f       	adc	r21, r31
    1032:	5d 83       	std	Y+5, r21	; 0x05
    1034:	4c 83       	std	Y+4, r20	; 0x04
    1036:	1a 8e       	std	Y+26, r1	; 0x1a
    1038:	fb 83       	std	Y+3, r31	; 0x03
    103a:	ea 83       	std	Y+2, r30	; 0x02
    103c:	01 97       	sbiw	r24, 0x01	; 1
    103e:	82 9f       	mul	r24, r18
    1040:	a0 01       	movw	r20, r0
    1042:	83 9f       	mul	r24, r19
    1044:	50 0d       	add	r21, r0
    1046:	92 9f       	mul	r25, r18
    1048:	50 0d       	add	r21, r0
    104a:	11 24       	eor	r1, r1
    104c:	cf 01       	movw	r24, r30
    104e:	84 0f       	add	r24, r20
    1050:	95 1f       	adc	r25, r21
    1052:	9f 83       	std	Y+7, r25	; 0x07
    1054:	8e 83       	std	Y+6, r24	; 0x06
    1056:	8f ef       	ldi	r24, 0xFF	; 255
    1058:	8d 8f       	std	Y+29, r24	; 0x1d
    105a:	8e 8f       	std	Y+30, r24	; 0x1e
    105c:	61 11       	cpse	r22, r1
    105e:	0b c0       	rjmp	.+22     	; 0x1076 <xQueueGenericReset+0x6e>
    1060:	88 85       	ldd	r24, Y+8	; 0x08
    1062:	88 23       	and	r24, r24
    1064:	71 f0       	breq	.+28     	; 0x1082 <xQueueGenericReset+0x7a>
    1066:	ce 01       	movw	r24, r28
    1068:	08 96       	adiw	r24, 0x08	; 8
    106a:	0e 94 be 10 	call	0x217c	; 0x217c <xTaskRemoveFromEventList>
    106e:	88 23       	and	r24, r24
    1070:	41 f0       	breq	.+16     	; 0x1082 <xQueueGenericReset+0x7a>
    1072:	32 de       	rcall	.-924    	; 0xcd8 <vPortYield>
    1074:	06 c0       	rjmp	.+12     	; 0x1082 <xQueueGenericReset+0x7a>
    1076:	ce 01       	movw	r24, r28
    1078:	08 96       	adiw	r24, 0x08	; 8
    107a:	f5 dc       	rcall	.-1558   	; 0xa66 <vListInitialise>
    107c:	ce 01       	movw	r24, r28
    107e:	41 96       	adiw	r24, 0x11	; 17
    1080:	f2 dc       	rcall	.-1564   	; 0xa66 <vListInitialise>
    1082:	0f 90       	pop	r0
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	df 91       	pop	r29
    108a:	cf 91       	pop	r28
    108c:	08 95       	ret

0000108e <xQueueGenericCreate>:
    108e:	ff 92       	push	r15
    1090:	0f 93       	push	r16
    1092:	1f 93       	push	r17
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	08 2f       	mov	r16, r24
    109a:	16 2f       	mov	r17, r22
    109c:	f4 2e       	mov	r15, r20
    109e:	66 23       	and	r22, r22
    10a0:	b9 f0       	breq	.+46     	; 0x10d0 <xQueueGenericCreate+0x42>
    10a2:	86 9f       	mul	r24, r22
    10a4:	c0 01       	movw	r24, r0
    10a6:	11 24       	eor	r1, r1
    10a8:	81 96       	adiw	r24, 0x21	; 33
    10aa:	bb dc       	rcall	.-1674   	; 0xa22 <pvPortMalloc>
    10ac:	ec 01       	movw	r28, r24
    10ae:	00 97       	sbiw	r24, 0x00	; 0
    10b0:	41 f4       	brne	.+16     	; 0x10c2 <xQueueGenericCreate+0x34>
    10b2:	14 c0       	rjmp	.+40     	; 0x10dc <xQueueGenericCreate+0x4e>
    10b4:	0b 8f       	std	Y+27, r16	; 0x1b
    10b6:	1c 8f       	std	Y+28, r17	; 0x1c
    10b8:	61 e0       	ldi	r22, 0x01	; 1
    10ba:	ce 01       	movw	r24, r28
    10bc:	a5 df       	rcall	.-182    	; 0x1008 <xQueueGenericReset>
    10be:	f8 a2       	std	Y+32, r15	; 0x20
    10c0:	0d c0       	rjmp	.+26     	; 0x10dc <xQueueGenericCreate+0x4e>
    10c2:	81 96       	adiw	r24, 0x21	; 33
    10c4:	99 83       	std	Y+1, r25	; 0x01
    10c6:	88 83       	st	Y, r24
    10c8:	f5 cf       	rjmp	.-22     	; 0x10b4 <xQueueGenericCreate+0x26>
    10ca:	d9 83       	std	Y+1, r29	; 0x01
    10cc:	c8 83       	st	Y, r28
    10ce:	f2 cf       	rjmp	.-28     	; 0x10b4 <xQueueGenericCreate+0x26>
    10d0:	81 e2       	ldi	r24, 0x21	; 33
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	a6 dc       	rcall	.-1716   	; 0xa22 <pvPortMalloc>
    10d6:	ec 01       	movw	r28, r24
    10d8:	89 2b       	or	r24, r25
    10da:	b9 f7       	brne	.-18     	; 0x10ca <xQueueGenericCreate+0x3c>
    10dc:	ce 01       	movw	r24, r28
    10de:	df 91       	pop	r29
    10e0:	cf 91       	pop	r28
    10e2:	1f 91       	pop	r17
    10e4:	0f 91       	pop	r16
    10e6:	ff 90       	pop	r15
    10e8:	08 95       	ret

000010ea <xQueueGenericSend>:
    10ea:	9f 92       	push	r9
    10ec:	af 92       	push	r10
    10ee:	bf 92       	push	r11
    10f0:	cf 92       	push	r12
    10f2:	df 92       	push	r13
    10f4:	ef 92       	push	r14
    10f6:	ff 92       	push	r15
    10f8:	0f 93       	push	r16
    10fa:	1f 93       	push	r17
    10fc:	cf 93       	push	r28
    10fe:	df 93       	push	r29
    1100:	00 d0       	rcall	.+0      	; 0x1102 <xQueueGenericSend+0x18>
    1102:	1f 92       	push	r1
    1104:	1f 92       	push	r1
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
    110a:	8c 01       	movw	r16, r24
    110c:	6b 01       	movw	r12, r22
    110e:	5d 83       	std	Y+5, r21	; 0x05
    1110:	4c 83       	std	Y+4, r20	; 0x04
    1112:	a2 2e       	mov	r10, r18
    1114:	b1 2c       	mov	r11, r1
    1116:	99 24       	eor	r9, r9
    1118:	93 94       	inc	r9
    111a:	7c 01       	movw	r14, r24
    111c:	88 e0       	ldi	r24, 0x08	; 8
    111e:	e8 0e       	add	r14, r24
    1120:	f1 1c       	adc	r15, r1
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	f8 94       	cli
    1126:	0f 92       	push	r0
    1128:	f8 01       	movw	r30, r16
    112a:	92 8d       	ldd	r25, Z+26	; 0x1a
    112c:	83 8d       	ldd	r24, Z+27	; 0x1b
    112e:	98 17       	cp	r25, r24
    1130:	18 f0       	brcs	.+6      	; 0x1138 <xQueueGenericSend+0x4e>
    1132:	f2 e0       	ldi	r31, 0x02	; 2
    1134:	af 12       	cpse	r10, r31
    1136:	16 c0       	rjmp	.+44     	; 0x1164 <xQueueGenericSend+0x7a>
    1138:	4a 2d       	mov	r20, r10
    113a:	b6 01       	movw	r22, r12
    113c:	c8 01       	movw	r24, r16
    113e:	9e de       	rcall	.-708    	; 0xe7c <prvCopyDataToQueue>
    1140:	f8 01       	movw	r30, r16
    1142:	91 89       	ldd	r25, Z+17	; 0x11
    1144:	99 23       	and	r25, r25
    1146:	41 f0       	breq	.+16     	; 0x1158 <xQueueGenericSend+0x6e>
    1148:	c8 01       	movw	r24, r16
    114a:	41 96       	adiw	r24, 0x11	; 17
    114c:	0e 94 be 10 	call	0x217c	; 0x217c <xTaskRemoveFromEventList>
    1150:	88 23       	and	r24, r24
    1152:	21 f0       	breq	.+8      	; 0x115c <xQueueGenericSend+0x72>
    1154:	c1 dd       	rcall	.-1150   	; 0xcd8 <vPortYield>
    1156:	02 c0       	rjmp	.+4      	; 0x115c <xQueueGenericSend+0x72>
    1158:	81 11       	cpse	r24, r1
    115a:	be dd       	rcall	.-1156   	; 0xcd8 <vPortYield>
    115c:	0f 90       	pop	r0
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	47 c0       	rjmp	.+142    	; 0x11f2 <xQueueGenericSend+0x108>
    1164:	8c 81       	ldd	r24, Y+4	; 0x04
    1166:	9d 81       	ldd	r25, Y+5	; 0x05
    1168:	89 2b       	or	r24, r25
    116a:	21 f4       	brne	.+8      	; 0x1174 <xQueueGenericSend+0x8a>
    116c:	0f 90       	pop	r0
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	3f c0       	rjmp	.+126    	; 0x11f2 <xQueueGenericSend+0x108>
    1174:	b1 10       	cpse	r11, r1
    1176:	05 c0       	rjmp	.+10     	; 0x1182 <xQueueGenericSend+0x98>
    1178:	ce 01       	movw	r24, r28
    117a:	01 96       	adiw	r24, 0x01	; 1
    117c:	0e 94 06 11 	call	0x220c	; 0x220c <vTaskInternalSetTimeOutState>
    1180:	b9 2c       	mov	r11, r9
    1182:	0f 90       	pop	r0
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	eb d5       	rcall	.+3030   	; 0x1d5e <vTaskSuspendAll>
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	0f 92       	push	r0
    118e:	f8 01       	movw	r30, r16
    1190:	85 8d       	ldd	r24, Z+29	; 0x1d
    1192:	8f 3f       	cpi	r24, 0xFF	; 255
    1194:	09 f4       	brne	.+2      	; 0x1198 <xQueueGenericSend+0xae>
    1196:	15 8e       	std	Z+29, r1	; 0x1d
    1198:	f8 01       	movw	r30, r16
    119a:	86 8d       	ldd	r24, Z+30	; 0x1e
    119c:	8f 3f       	cpi	r24, 0xFF	; 255
    119e:	09 f4       	brne	.+2      	; 0x11a2 <xQueueGenericSend+0xb8>
    11a0:	16 8e       	std	Z+30, r1	; 0x1e
    11a2:	0f 90       	pop	r0
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	be 01       	movw	r22, r28
    11a8:	6c 5f       	subi	r22, 0xFC	; 252
    11aa:	7f 4f       	sbci	r23, 0xFF	; 255
    11ac:	ce 01       	movw	r24, r28
    11ae:	01 96       	adiw	r24, 0x01	; 1
    11b0:	0e 94 11 11 	call	0x2222	; 0x2222 <xTaskCheckForTimeOut>
    11b4:	81 11       	cpse	r24, r1
    11b6:	19 c0       	rjmp	.+50     	; 0x11ea <xQueueGenericSend+0x100>
    11b8:	0f b6       	in	r0, 0x3f	; 63
    11ba:	f8 94       	cli
    11bc:	0f 92       	push	r0
    11be:	f8 01       	movw	r30, r16
    11c0:	92 8d       	ldd	r25, Z+26	; 0x1a
    11c2:	83 8d       	ldd	r24, Z+27	; 0x1b
    11c4:	0f 90       	pop	r0
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	98 13       	cpse	r25, r24
    11ca:	0b c0       	rjmp	.+22     	; 0x11e2 <xQueueGenericSend+0xf8>
    11cc:	6c 81       	ldd	r22, Y+4	; 0x04
    11ce:	7d 81       	ldd	r23, Y+5	; 0x05
    11d0:	c7 01       	movw	r24, r14
    11d2:	ab d7       	rcall	.+3926   	; 0x212a <vTaskPlaceOnEventList>
    11d4:	c8 01       	movw	r24, r16
    11d6:	cb de       	rcall	.-618    	; 0xf6e <prvUnlockQueue>
    11d8:	8c d6       	rcall	.+3352   	; 0x1ef2 <xTaskResumeAll>
    11da:	81 11       	cpse	r24, r1
    11dc:	a2 cf       	rjmp	.-188    	; 0x1122 <xQueueGenericSend+0x38>
    11de:	7c dd       	rcall	.-1288   	; 0xcd8 <vPortYield>
    11e0:	a0 cf       	rjmp	.-192    	; 0x1122 <xQueueGenericSend+0x38>
    11e2:	c8 01       	movw	r24, r16
    11e4:	c4 de       	rcall	.-632    	; 0xf6e <prvUnlockQueue>
    11e6:	85 d6       	rcall	.+3338   	; 0x1ef2 <xTaskResumeAll>
    11e8:	9c cf       	rjmp	.-200    	; 0x1122 <xQueueGenericSend+0x38>
    11ea:	c8 01       	movw	r24, r16
    11ec:	c0 de       	rcall	.-640    	; 0xf6e <prvUnlockQueue>
    11ee:	81 d6       	rcall	.+3330   	; 0x1ef2 <xTaskResumeAll>
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	0f 90       	pop	r0
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	1f 91       	pop	r17
    1202:	0f 91       	pop	r16
    1204:	ff 90       	pop	r15
    1206:	ef 90       	pop	r14
    1208:	df 90       	pop	r13
    120a:	cf 90       	pop	r12
    120c:	bf 90       	pop	r11
    120e:	af 90       	pop	r10
    1210:	9f 90       	pop	r9
    1212:	08 95       	ret

00001214 <xQueueCreateMutex>:
    1214:	cf 93       	push	r28
    1216:	df 93       	push	r29
    1218:	48 2f       	mov	r20, r24
    121a:	60 e0       	ldi	r22, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	37 df       	rcall	.-402    	; 0x108e <xQueueGenericCreate>
    1220:	ec 01       	movw	r28, r24
    1222:	00 97       	sbiw	r24, 0x00	; 0
    1224:	59 f0       	breq	.+22     	; 0x123c <xQueueCreateMutex+0x28>
    1226:	1d 82       	std	Y+5, r1	; 0x05
    1228:	1c 82       	std	Y+4, r1	; 0x04
    122a:	19 82       	std	Y+1, r1	; 0x01
    122c:	18 82       	st	Y, r1
    122e:	1e 82       	std	Y+6, r1	; 0x06
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	40 e0       	ldi	r20, 0x00	; 0
    1234:	50 e0       	ldi	r21, 0x00	; 0
    1236:	60 e0       	ldi	r22, 0x00	; 0
    1238:	70 e0       	ldi	r23, 0x00	; 0
    123a:	57 df       	rcall	.-338    	; 0x10ea <xQueueGenericSend>
    123c:	ce 01       	movw	r24, r28
    123e:	df 91       	pop	r29
    1240:	cf 91       	pop	r28
    1242:	08 95       	ret

00001244 <xQueueGenericSendFromISR>:
    1244:	ef 92       	push	r14
    1246:	ff 92       	push	r15
    1248:	0f 93       	push	r16
    124a:	1f 93       	push	r17
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
    1250:	8a 01       	movw	r16, r20
    1252:	fc 01       	movw	r30, r24
    1254:	52 8d       	ldd	r21, Z+26	; 0x1a
    1256:	33 8d       	ldd	r19, Z+27	; 0x1b
    1258:	53 17       	cp	r21, r19
    125a:	10 f0       	brcs	.+4      	; 0x1260 <xQueueGenericSendFromISR+0x1c>
    125c:	22 30       	cpi	r18, 0x02	; 2
    125e:	e1 f4       	brne	.+56     	; 0x1298 <xQueueGenericSendFromISR+0x54>
    1260:	42 2f       	mov	r20, r18
    1262:	78 01       	movw	r14, r16
    1264:	ec 01       	movw	r28, r24
    1266:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1268:	09 de       	rcall	.-1006   	; 0xe7c <prvCopyDataToQueue>
    126a:	1f 3f       	cpi	r17, 0xFF	; 255
    126c:	79 f4       	brne	.+30     	; 0x128c <xQueueGenericSendFromISR+0x48>
    126e:	89 89       	ldd	r24, Y+17	; 0x11
    1270:	88 23       	and	r24, r24
    1272:	a1 f0       	breq	.+40     	; 0x129c <xQueueGenericSendFromISR+0x58>
    1274:	ce 01       	movw	r24, r28
    1276:	41 96       	adiw	r24, 0x11	; 17
    1278:	81 d7       	rcall	.+3842   	; 0x217c <xTaskRemoveFromEventList>
    127a:	88 23       	and	r24, r24
    127c:	89 f0       	breq	.+34     	; 0x12a0 <xQueueGenericSendFromISR+0x5c>
    127e:	e1 14       	cp	r14, r1
    1280:	f1 04       	cpc	r15, r1
    1282:	81 f0       	breq	.+32     	; 0x12a4 <xQueueGenericSendFromISR+0x60>
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	f7 01       	movw	r30, r14
    1288:	80 83       	st	Z, r24
    128a:	0d c0       	rjmp	.+26     	; 0x12a6 <xQueueGenericSendFromISR+0x62>
    128c:	ff 24       	eor	r15, r15
    128e:	f3 94       	inc	r15
    1290:	f1 0e       	add	r15, r17
    1292:	fe 8e       	std	Y+30, r15	; 0x1e
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	07 c0       	rjmp	.+14     	; 0x12a6 <xQueueGenericSendFromISR+0x62>
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	05 c0       	rjmp	.+10     	; 0x12a6 <xQueueGenericSendFromISR+0x62>
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	03 c0       	rjmp	.+6      	; 0x12a6 <xQueueGenericSendFromISR+0x62>
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	01 c0       	rjmp	.+2      	; 0x12a6 <xQueueGenericSendFromISR+0x62>
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	1f 91       	pop	r17
    12ac:	0f 91       	pop	r16
    12ae:	ff 90       	pop	r15
    12b0:	ef 90       	pop	r14
    12b2:	08 95       	ret

000012b4 <xQueueReceive>:
    12b4:	9f 92       	push	r9
    12b6:	af 92       	push	r10
    12b8:	bf 92       	push	r11
    12ba:	cf 92       	push	r12
    12bc:	df 92       	push	r13
    12be:	ef 92       	push	r14
    12c0:	ff 92       	push	r15
    12c2:	0f 93       	push	r16
    12c4:	1f 93       	push	r17
    12c6:	cf 93       	push	r28
    12c8:	df 93       	push	r29
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <xQueueReceive+0x18>
    12cc:	1f 92       	push	r1
    12ce:	1f 92       	push	r1
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
    12d4:	8c 01       	movw	r16, r24
    12d6:	5b 01       	movw	r10, r22
    12d8:	5d 83       	std	Y+5, r21	; 0x05
    12da:	4c 83       	std	Y+4, r20	; 0x04
    12dc:	e1 2c       	mov	r14, r1
    12de:	99 24       	eor	r9, r9
    12e0:	93 94       	inc	r9
    12e2:	6c 01       	movw	r12, r24
    12e4:	81 e1       	ldi	r24, 0x11	; 17
    12e6:	c8 0e       	add	r12, r24
    12e8:	d1 1c       	adc	r13, r1
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	0f 92       	push	r0
    12f0:	f8 01       	movw	r30, r16
    12f2:	f2 8c       	ldd	r15, Z+26	; 0x1a
    12f4:	ff 20       	and	r15, r15
    12f6:	91 f0       	breq	.+36     	; 0x131c <xQueueReceive+0x68>
    12f8:	b5 01       	movw	r22, r10
    12fa:	c8 01       	movw	r24, r16
    12fc:	1e de       	rcall	.-964    	; 0xf3a <prvCopyDataFromQueue>
    12fe:	fa 94       	dec	r15
    1300:	f8 01       	movw	r30, r16
    1302:	f2 8e       	std	Z+26, r15	; 0x1a
    1304:	80 85       	ldd	r24, Z+8	; 0x08
    1306:	88 23       	and	r24, r24
    1308:	29 f0       	breq	.+10     	; 0x1314 <xQueueReceive+0x60>
    130a:	c8 01       	movw	r24, r16
    130c:	08 96       	adiw	r24, 0x08	; 8
    130e:	36 d7       	rcall	.+3692   	; 0x217c <xTaskRemoveFromEventList>
    1310:	81 11       	cpse	r24, r1
    1312:	e2 dc       	rcall	.-1596   	; 0xcd8 <vPortYield>
    1314:	0f 90       	pop	r0
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	44 c0       	rjmp	.+136    	; 0x13a4 <xQueueReceive+0xf0>
    131c:	8c 81       	ldd	r24, Y+4	; 0x04
    131e:	9d 81       	ldd	r25, Y+5	; 0x05
    1320:	89 2b       	or	r24, r25
    1322:	21 f4       	brne	.+8      	; 0x132c <xQueueReceive+0x78>
    1324:	0f 90       	pop	r0
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	3c c0       	rjmp	.+120    	; 0x13a4 <xQueueReceive+0xf0>
    132c:	e1 10       	cpse	r14, r1
    132e:	04 c0       	rjmp	.+8      	; 0x1338 <xQueueReceive+0x84>
    1330:	ce 01       	movw	r24, r28
    1332:	01 96       	adiw	r24, 0x01	; 1
    1334:	6b d7       	rcall	.+3798   	; 0x220c <vTaskInternalSetTimeOutState>
    1336:	e9 2c       	mov	r14, r9
    1338:	0f 90       	pop	r0
    133a:	0f be       	out	0x3f, r0	; 63
    133c:	10 d5       	rcall	.+2592   	; 0x1d5e <vTaskSuspendAll>
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	f8 94       	cli
    1342:	0f 92       	push	r0
    1344:	f8 01       	movw	r30, r16
    1346:	85 8d       	ldd	r24, Z+29	; 0x1d
    1348:	8f 3f       	cpi	r24, 0xFF	; 255
    134a:	09 f4       	brne	.+2      	; 0x134e <xQueueReceive+0x9a>
    134c:	15 8e       	std	Z+29, r1	; 0x1d
    134e:	f8 01       	movw	r30, r16
    1350:	86 8d       	ldd	r24, Z+30	; 0x1e
    1352:	8f 3f       	cpi	r24, 0xFF	; 255
    1354:	09 f4       	brne	.+2      	; 0x1358 <xQueueReceive+0xa4>
    1356:	16 8e       	std	Z+30, r1	; 0x1e
    1358:	0f 90       	pop	r0
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	be 01       	movw	r22, r28
    135e:	6c 5f       	subi	r22, 0xFC	; 252
    1360:	7f 4f       	sbci	r23, 0xFF	; 255
    1362:	ce 01       	movw	r24, r28
    1364:	01 96       	adiw	r24, 0x01	; 1
    1366:	5d d7       	rcall	.+3770   	; 0x2222 <xTaskCheckForTimeOut>
    1368:	81 11       	cpse	r24, r1
    136a:	13 c0       	rjmp	.+38     	; 0x1392 <xQueueReceive+0xde>
    136c:	c8 01       	movw	r24, r16
    136e:	7b dd       	rcall	.-1290   	; 0xe66 <prvIsQueueEmpty>
    1370:	88 23       	and	r24, r24
    1372:	59 f0       	breq	.+22     	; 0x138a <xQueueReceive+0xd6>
    1374:	6c 81       	ldd	r22, Y+4	; 0x04
    1376:	7d 81       	ldd	r23, Y+5	; 0x05
    1378:	c6 01       	movw	r24, r12
    137a:	d7 d6       	rcall	.+3502   	; 0x212a <vTaskPlaceOnEventList>
    137c:	c8 01       	movw	r24, r16
    137e:	f7 dd       	rcall	.-1042   	; 0xf6e <prvUnlockQueue>
    1380:	b8 d5       	rcall	.+2928   	; 0x1ef2 <xTaskResumeAll>
    1382:	81 11       	cpse	r24, r1
    1384:	b2 cf       	rjmp	.-156    	; 0x12ea <xQueueReceive+0x36>
    1386:	a8 dc       	rcall	.-1712   	; 0xcd8 <vPortYield>
    1388:	b0 cf       	rjmp	.-160    	; 0x12ea <xQueueReceive+0x36>
    138a:	c8 01       	movw	r24, r16
    138c:	f0 dd       	rcall	.-1056   	; 0xf6e <prvUnlockQueue>
    138e:	b1 d5       	rcall	.+2914   	; 0x1ef2 <xTaskResumeAll>
    1390:	ac cf       	rjmp	.-168    	; 0x12ea <xQueueReceive+0x36>
    1392:	c8 01       	movw	r24, r16
    1394:	ec dd       	rcall	.-1064   	; 0xf6e <prvUnlockQueue>
    1396:	ad d5       	rcall	.+2906   	; 0x1ef2 <xTaskResumeAll>
    1398:	c8 01       	movw	r24, r16
    139a:	65 dd       	rcall	.-1334   	; 0xe66 <prvIsQueueEmpty>
    139c:	88 23       	and	r24, r24
    139e:	09 f4       	brne	.+2      	; 0x13a2 <xQueueReceive+0xee>
    13a0:	a4 cf       	rjmp	.-184    	; 0x12ea <xQueueReceive+0x36>
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	1f 91       	pop	r17
    13b4:	0f 91       	pop	r16
    13b6:	ff 90       	pop	r15
    13b8:	ef 90       	pop	r14
    13ba:	df 90       	pop	r13
    13bc:	cf 90       	pop	r12
    13be:	bf 90       	pop	r11
    13c0:	af 90       	pop	r10
    13c2:	9f 90       	pop	r9
    13c4:	08 95       	ret

000013c6 <xQueueSemaphoreTake>:
    13c6:	bf 92       	push	r11
    13c8:	cf 92       	push	r12
    13ca:	df 92       	push	r13
    13cc:	ef 92       	push	r14
    13ce:	ff 92       	push	r15
    13d0:	0f 93       	push	r16
    13d2:	1f 93       	push	r17
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	00 d0       	rcall	.+0      	; 0x13da <xQueueSemaphoreTake+0x14>
    13da:	1f 92       	push	r1
    13dc:	1f 92       	push	r1
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	8c 01       	movw	r16, r24
    13e4:	7d 83       	std	Y+5, r23	; 0x05
    13e6:	6c 83       	std	Y+4, r22	; 0x04
    13e8:	b1 2c       	mov	r11, r1
    13ea:	d1 2c       	mov	r13, r1
    13ec:	cc 24       	eor	r12, r12
    13ee:	c3 94       	inc	r12
    13f0:	7c 01       	movw	r14, r24
    13f2:	81 e1       	ldi	r24, 0x11	; 17
    13f4:	e8 0e       	add	r14, r24
    13f6:	f1 1c       	adc	r15, r1
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	f8 94       	cli
    13fc:	0f 92       	push	r0
    13fe:	d8 01       	movw	r26, r16
    1400:	5a 96       	adiw	r26, 0x1a	; 26
    1402:	8c 91       	ld	r24, X
    1404:	5a 97       	sbiw	r26, 0x1a	; 26
    1406:	88 23       	and	r24, r24
    1408:	d9 f0       	breq	.+54     	; 0x1440 <xQueueSemaphoreTake+0x7a>
    140a:	81 50       	subi	r24, 0x01	; 1
    140c:	5a 96       	adiw	r26, 0x1a	; 26
    140e:	8c 93       	st	X, r24
    1410:	5a 97       	sbiw	r26, 0x1a	; 26
    1412:	8d 91       	ld	r24, X+
    1414:	9c 91       	ld	r25, X
    1416:	89 2b       	or	r24, r25
    1418:	29 f4       	brne	.+10     	; 0x1424 <xQueueSemaphoreTake+0x5e>
    141a:	0e 94 5f 12 	call	0x24be	; 0x24be <pvTaskIncrementMutexHeldCount>
    141e:	f8 01       	movw	r30, r16
    1420:	95 83       	std	Z+5, r25	; 0x05
    1422:	84 83       	std	Z+4, r24	; 0x04
    1424:	d8 01       	movw	r26, r16
    1426:	18 96       	adiw	r26, 0x08	; 8
    1428:	8c 91       	ld	r24, X
    142a:	88 23       	and	r24, r24
    142c:	29 f0       	breq	.+10     	; 0x1438 <xQueueSemaphoreTake+0x72>
    142e:	c8 01       	movw	r24, r16
    1430:	08 96       	adiw	r24, 0x08	; 8
    1432:	a4 d6       	rcall	.+3400   	; 0x217c <xTaskRemoveFromEventList>
    1434:	81 11       	cpse	r24, r1
    1436:	50 dc       	rcall	.-1888   	; 0xcd8 <vPortYield>
    1438:	0f 90       	pop	r0
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	70 c0       	rjmp	.+224    	; 0x1520 <xQueueSemaphoreTake+0x15a>
    1440:	8c 81       	ldd	r24, Y+4	; 0x04
    1442:	9d 81       	ldd	r25, Y+5	; 0x05
    1444:	89 2b       	or	r24, r25
    1446:	21 f4       	brne	.+8      	; 0x1450 <xQueueSemaphoreTake+0x8a>
    1448:	0f 90       	pop	r0
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	68 c0       	rjmp	.+208    	; 0x1520 <xQueueSemaphoreTake+0x15a>
    1450:	d1 10       	cpse	r13, r1
    1452:	04 c0       	rjmp	.+8      	; 0x145c <xQueueSemaphoreTake+0x96>
    1454:	ce 01       	movw	r24, r28
    1456:	01 96       	adiw	r24, 0x01	; 1
    1458:	d9 d6       	rcall	.+3506   	; 0x220c <vTaskInternalSetTimeOutState>
    145a:	dc 2c       	mov	r13, r12
    145c:	0f 90       	pop	r0
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	7e d4       	rcall	.+2300   	; 0x1d5e <vTaskSuspendAll>
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	f8 94       	cli
    1466:	0f 92       	push	r0
    1468:	f8 01       	movw	r30, r16
    146a:	85 8d       	ldd	r24, Z+29	; 0x1d
    146c:	8f 3f       	cpi	r24, 0xFF	; 255
    146e:	09 f4       	brne	.+2      	; 0x1472 <xQueueSemaphoreTake+0xac>
    1470:	15 8e       	std	Z+29, r1	; 0x1d
    1472:	d8 01       	movw	r26, r16
    1474:	5e 96       	adiw	r26, 0x1e	; 30
    1476:	8c 91       	ld	r24, X
    1478:	5e 97       	sbiw	r26, 0x1e	; 30
    147a:	8f 3f       	cpi	r24, 0xFF	; 255
    147c:	11 f4       	brne	.+4      	; 0x1482 <xQueueSemaphoreTake+0xbc>
    147e:	5e 96       	adiw	r26, 0x1e	; 30
    1480:	1c 92       	st	X, r1
    1482:	0f 90       	pop	r0
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	be 01       	movw	r22, r28
    1488:	6c 5f       	subi	r22, 0xFC	; 252
    148a:	7f 4f       	sbci	r23, 0xFF	; 255
    148c:	ce 01       	movw	r24, r28
    148e:	01 96       	adiw	r24, 0x01	; 1
    1490:	c8 d6       	rcall	.+3472   	; 0x2222 <xTaskCheckForTimeOut>
    1492:	81 11       	cpse	r24, r1
    1494:	21 c0       	rjmp	.+66     	; 0x14d8 <xQueueSemaphoreTake+0x112>
    1496:	c8 01       	movw	r24, r16
    1498:	e6 dc       	rcall	.-1588   	; 0xe66 <prvIsQueueEmpty>
    149a:	88 23       	and	r24, r24
    149c:	c9 f0       	breq	.+50     	; 0x14d0 <xQueueSemaphoreTake+0x10a>
    149e:	f8 01       	movw	r30, r16
    14a0:	80 81       	ld	r24, Z
    14a2:	91 81       	ldd	r25, Z+1	; 0x01
    14a4:	89 2b       	or	r24, r25
    14a6:	49 f4       	brne	.+18     	; 0x14ba <xQueueSemaphoreTake+0xf4>
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	0f 92       	push	r0
    14ae:	84 81       	ldd	r24, Z+4	; 0x04
    14b0:	95 81       	ldd	r25, Z+5	; 0x05
    14b2:	03 d7       	rcall	.+3590   	; 0x22ba <xTaskPriorityInherit>
    14b4:	b8 2e       	mov	r11, r24
    14b6:	0f 90       	pop	r0
    14b8:	0f be       	out	0x3f, r0	; 63
    14ba:	6c 81       	ldd	r22, Y+4	; 0x04
    14bc:	7d 81       	ldd	r23, Y+5	; 0x05
    14be:	c7 01       	movw	r24, r14
    14c0:	34 d6       	rcall	.+3176   	; 0x212a <vTaskPlaceOnEventList>
    14c2:	c8 01       	movw	r24, r16
    14c4:	54 dd       	rcall	.-1368   	; 0xf6e <prvUnlockQueue>
    14c6:	15 d5       	rcall	.+2602   	; 0x1ef2 <xTaskResumeAll>
    14c8:	81 11       	cpse	r24, r1
    14ca:	96 cf       	rjmp	.-212    	; 0x13f8 <xQueueSemaphoreTake+0x32>
    14cc:	05 dc       	rcall	.-2038   	; 0xcd8 <vPortYield>
    14ce:	94 cf       	rjmp	.-216    	; 0x13f8 <xQueueSemaphoreTake+0x32>
    14d0:	c8 01       	movw	r24, r16
    14d2:	4d dd       	rcall	.-1382   	; 0xf6e <prvUnlockQueue>
    14d4:	0e d5       	rcall	.+2588   	; 0x1ef2 <xTaskResumeAll>
    14d6:	90 cf       	rjmp	.-224    	; 0x13f8 <xQueueSemaphoreTake+0x32>
    14d8:	c8 01       	movw	r24, r16
    14da:	49 dd       	rcall	.-1390   	; 0xf6e <prvUnlockQueue>
    14dc:	0a d5       	rcall	.+2580   	; 0x1ef2 <xTaskResumeAll>
    14de:	c8 01       	movw	r24, r16
    14e0:	c2 dc       	rcall	.-1660   	; 0xe66 <prvIsQueueEmpty>
    14e2:	88 23       	and	r24, r24
    14e4:	09 f4       	brne	.+2      	; 0x14e8 <xQueueSemaphoreTake+0x122>
    14e6:	88 cf       	rjmp	.-240    	; 0x13f8 <xQueueSemaphoreTake+0x32>
    14e8:	bb 20       	and	r11, r11
    14ea:	c9 f0       	breq	.+50     	; 0x151e <xQueueSemaphoreTake+0x158>
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	f8 94       	cli
    14f0:	0f 92       	push	r0
    14f2:	f8 01       	movw	r30, r16
    14f4:	81 89       	ldd	r24, Z+17	; 0x11
    14f6:	88 23       	and	r24, r24
    14f8:	39 f0       	breq	.+14     	; 0x1508 <xQueueSemaphoreTake+0x142>
    14fa:	06 88       	ldd	r0, Z+22	; 0x16
    14fc:	f7 89       	ldd	r31, Z+23	; 0x17
    14fe:	e0 2d       	mov	r30, r0
    1500:	80 81       	ld	r24, Z
    1502:	64 e0       	ldi	r22, 0x04	; 4
    1504:	68 1b       	sub	r22, r24
    1506:	01 c0       	rjmp	.+2      	; 0x150a <xQueueSemaphoreTake+0x144>
    1508:	60 e0       	ldi	r22, 0x00	; 0
    150a:	d8 01       	movw	r26, r16
    150c:	14 96       	adiw	r26, 0x04	; 4
    150e:	8d 91       	ld	r24, X+
    1510:	9c 91       	ld	r25, X
    1512:	15 97       	sbiw	r26, 0x05	; 5
    1514:	84 d7       	rcall	.+3848   	; 0x241e <vTaskPriorityDisinheritAfterTimeout>
    1516:	0f 90       	pop	r0
    1518:	0f be       	out	0x3f, r0	; 63
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	01 c0       	rjmp	.+2      	; 0x1520 <xQueueSemaphoreTake+0x15a>
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	df 91       	pop	r29
    152c:	cf 91       	pop	r28
    152e:	1f 91       	pop	r17
    1530:	0f 91       	pop	r16
    1532:	ff 90       	pop	r15
    1534:	ef 90       	pop	r14
    1536:	df 90       	pop	r13
    1538:	cf 90       	pop	r12
    153a:	bf 90       	pop	r11
    153c:	08 95       	ret

0000153e <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    153e:	cf 93       	push	r28
    1540:	df 93       	push	r29
    1542:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	f8 94       	cli
    1548:	0f 92       	push	r0
    154a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    154c:	8f 3f       	cpi	r24, 0xFF	; 255
    154e:	09 f4       	brne	.+2      	; 0x1552 <vQueueWaitForMessageRestricted+0x14>
    1550:	1d 8e       	std	Y+29, r1	; 0x1d
    1552:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1554:	8f 3f       	cpi	r24, 0xFF	; 255
    1556:	09 f4       	brne	.+2      	; 0x155a <vQueueWaitForMessageRestricted+0x1c>
    1558:	1e 8e       	std	Y+30, r1	; 0x1e
    155a:	0f 90       	pop	r0
    155c:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    155e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1560:	81 11       	cpse	r24, r1
    1562:	03 c0       	rjmp	.+6      	; 0x156a <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1564:	ce 01       	movw	r24, r28
    1566:	41 96       	adiw	r24, 0x11	; 17
    1568:	f1 d5       	rcall	.+3042   	; 0x214c <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    156a:	ce 01       	movw	r24, r28
    156c:	00 dd       	rcall	.-1536   	; 0xf6e <prvUnlockQueue>
    }
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	08 95       	ret

00001574 <prvBytesInBuffer>:
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1574:	fc 01       	movw	r30, r24
    1576:	44 81       	ldd	r20, Z+4	; 0x04
    1578:	55 81       	ldd	r21, Z+5	; 0x05
    157a:	22 81       	ldd	r18, Z+2	; 0x02
    157c:	33 81       	ldd	r19, Z+3	; 0x03
    157e:	24 0f       	add	r18, r20
    1580:	35 1f       	adc	r19, r21
    1582:	80 81       	ld	r24, Z
    1584:	91 81       	ldd	r25, Z+1	; 0x01
    1586:	b9 01       	movw	r22, r18
    1588:	68 1b       	sub	r22, r24
    158a:	79 0b       	sbc	r23, r25
    158c:	cb 01       	movw	r24, r22
    158e:	64 17       	cp	r22, r20
    1590:	75 07       	cpc	r23, r21
    1592:	10 f0       	brcs	.+4      	; 0x1598 <prvBytesInBuffer+0x24>
    1594:	84 1b       	sub	r24, r20
    1596:	95 0b       	sbc	r25, r21
    1598:	08 95       	ret

0000159a <prvWriteBytesToBuffer>:
    159a:	af 92       	push	r10
    159c:	bf 92       	push	r11
    159e:	cf 92       	push	r12
    15a0:	df 92       	push	r13
    15a2:	ef 92       	push	r14
    15a4:	ff 92       	push	r15
    15a6:	0f 93       	push	r16
    15a8:	1f 93       	push	r17
    15aa:	cf 93       	push	r28
    15ac:	df 93       	push	r29
    15ae:	6c 01       	movw	r12, r24
    15b0:	5b 01       	movw	r10, r22
    15b2:	7a 01       	movw	r14, r20
    15b4:	fc 01       	movw	r30, r24
    15b6:	c2 81       	ldd	r28, Z+2	; 0x02
    15b8:	d3 81       	ldd	r29, Z+3	; 0x03
    15ba:	04 81       	ldd	r16, Z+4	; 0x04
    15bc:	15 81       	ldd	r17, Z+5	; 0x05
    15be:	0c 1b       	sub	r16, r28
    15c0:	1d 0b       	sbc	r17, r29
    15c2:	40 17       	cp	r20, r16
    15c4:	51 07       	cpc	r21, r17
    15c6:	08 f4       	brcc	.+2      	; 0x15ca <prvWriteBytesToBuffer+0x30>
    15c8:	8a 01       	movw	r16, r20
    15ca:	f6 01       	movw	r30, r12
    15cc:	84 85       	ldd	r24, Z+12	; 0x0c
    15ce:	95 85       	ldd	r25, Z+13	; 0x0d
    15d0:	a8 01       	movw	r20, r16
    15d2:	b5 01       	movw	r22, r10
    15d4:	8c 0f       	add	r24, r28
    15d6:	9d 1f       	adc	r25, r29
    15d8:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <memcpy>
    15dc:	0e 15       	cp	r16, r14
    15de:	1f 05       	cpc	r17, r15
    15e0:	58 f4       	brcc	.+22     	; 0x15f8 <prvWriteBytesToBuffer+0x5e>
    15e2:	a7 01       	movw	r20, r14
    15e4:	40 1b       	sub	r20, r16
    15e6:	51 0b       	sbc	r21, r17
    15e8:	b5 01       	movw	r22, r10
    15ea:	60 0f       	add	r22, r16
    15ec:	71 1f       	adc	r23, r17
    15ee:	f6 01       	movw	r30, r12
    15f0:	84 85       	ldd	r24, Z+12	; 0x0c
    15f2:	95 85       	ldd	r25, Z+13	; 0x0d
    15f4:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <memcpy>
    15f8:	ce 01       	movw	r24, r28
    15fa:	8e 0d       	add	r24, r14
    15fc:	9f 1d       	adc	r25, r15
    15fe:	f6 01       	movw	r30, r12
    1600:	24 81       	ldd	r18, Z+4	; 0x04
    1602:	35 81       	ldd	r19, Z+5	; 0x05
    1604:	82 17       	cp	r24, r18
    1606:	93 07       	cpc	r25, r19
    1608:	10 f0       	brcs	.+4      	; 0x160e <prvWriteBytesToBuffer+0x74>
    160a:	82 1b       	sub	r24, r18
    160c:	93 0b       	sbc	r25, r19
    160e:	f6 01       	movw	r30, r12
    1610:	93 83       	std	Z+3, r25	; 0x03
    1612:	82 83       	std	Z+2, r24	; 0x02
    1614:	c7 01       	movw	r24, r14
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
    161a:	1f 91       	pop	r17
    161c:	0f 91       	pop	r16
    161e:	ff 90       	pop	r15
    1620:	ef 90       	pop	r14
    1622:	df 90       	pop	r13
    1624:	cf 90       	pop	r12
    1626:	bf 90       	pop	r11
    1628:	af 90       	pop	r10
    162a:	08 95       	ret

0000162c <prvWriteMessageToBuffer>:
    162c:	cf 92       	push	r12
    162e:	df 92       	push	r13
    1630:	ef 92       	push	r14
    1632:	ff 92       	push	r15
    1634:	0f 93       	push	r16
    1636:	1f 93       	push	r17
    1638:	cf 93       	push	r28
    163a:	df 93       	push	r29
    163c:	1f 92       	push	r1
    163e:	1f 92       	push	r1
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
    1644:	5a 83       	std	Y+2, r21	; 0x02
    1646:	49 83       	std	Y+1, r20	; 0x01
    1648:	21 15       	cp	r18, r1
    164a:	31 05       	cpc	r19, r1
    164c:	c9 f0       	breq	.+50     	; 0x1680 <prvWriteMessageToBuffer+0x54>
    164e:	6b 01       	movw	r12, r22
    1650:	7c 01       	movw	r14, r24
    1652:	fc 01       	movw	r30, r24
    1654:	86 85       	ldd	r24, Z+14	; 0x0e
    1656:	80 fd       	sbrc	r24, 0
    1658:	08 c0       	rjmp	.+16     	; 0x166a <prvWriteMessageToBuffer+0x3e>
    165a:	ca 01       	movw	r24, r20
    165c:	24 17       	cp	r18, r20
    165e:	35 07       	cpc	r19, r21
    1660:	08 f4       	brcc	.+2      	; 0x1664 <prvWriteMessageToBuffer+0x38>
    1662:	c9 01       	movw	r24, r18
    1664:	9a 83       	std	Y+2, r25	; 0x02
    1666:	89 83       	std	Y+1, r24	; 0x01
    1668:	11 c0       	rjmp	.+34     	; 0x168c <prvWriteMessageToBuffer+0x60>
    166a:	20 17       	cp	r18, r16
    166c:	31 07       	cpc	r19, r17
    166e:	58 f0       	brcs	.+22     	; 0x1686 <prvWriteMessageToBuffer+0x5a>
    1670:	42 e0       	ldi	r20, 0x02	; 2
    1672:	50 e0       	ldi	r21, 0x00	; 0
    1674:	be 01       	movw	r22, r28
    1676:	6f 5f       	subi	r22, 0xFF	; 255
    1678:	7f 4f       	sbci	r23, 0xFF	; 255
    167a:	c7 01       	movw	r24, r14
    167c:	8e df       	rcall	.-228    	; 0x159a <prvWriteBytesToBuffer>
    167e:	06 c0       	rjmp	.+12     	; 0x168c <prvWriteMessageToBuffer+0x60>
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	08 c0       	rjmp	.+16     	; 0x1696 <prvWriteMessageToBuffer+0x6a>
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	05 c0       	rjmp	.+10     	; 0x1696 <prvWriteMessageToBuffer+0x6a>
    168c:	49 81       	ldd	r20, Y+1	; 0x01
    168e:	5a 81       	ldd	r21, Y+2	; 0x02
    1690:	b6 01       	movw	r22, r12
    1692:	c7 01       	movw	r24, r14
    1694:	82 df       	rcall	.-252    	; 0x159a <prvWriteBytesToBuffer>
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	df 91       	pop	r29
    169c:	cf 91       	pop	r28
    169e:	1f 91       	pop	r17
    16a0:	0f 91       	pop	r16
    16a2:	ff 90       	pop	r15
    16a4:	ef 90       	pop	r14
    16a6:	df 90       	pop	r13
    16a8:	cf 90       	pop	r12
    16aa:	08 95       	ret

000016ac <prvReadBytesFromBuffer>:
    16ac:	af 92       	push	r10
    16ae:	bf 92       	push	r11
    16b0:	cf 92       	push	r12
    16b2:	df 92       	push	r13
    16b4:	ef 92       	push	r14
    16b6:	ff 92       	push	r15
    16b8:	0f 93       	push	r16
    16ba:	1f 93       	push	r17
    16bc:	cf 93       	push	r28
    16be:	df 93       	push	r29
    16c0:	7c 01       	movw	r14, r24
    16c2:	5b 01       	movw	r10, r22
    16c4:	e9 01       	movw	r28, r18
    16c6:	42 17       	cp	r20, r18
    16c8:	53 07       	cpc	r21, r19
    16ca:	08 f4       	brcc	.+2      	; 0x16ce <prvReadBytesFromBuffer+0x22>
    16cc:	ea 01       	movw	r28, r20
    16ce:	20 97       	sbiw	r28, 0x00	; 0
    16d0:	79 f1       	breq	.+94     	; 0x1730 <prvReadBytesFromBuffer+0x84>
    16d2:	f7 01       	movw	r30, r14
    16d4:	00 81       	ld	r16, Z
    16d6:	11 81       	ldd	r17, Z+1	; 0x01
    16d8:	c4 80       	ldd	r12, Z+4	; 0x04
    16da:	d5 80       	ldd	r13, Z+5	; 0x05
    16dc:	c0 1a       	sub	r12, r16
    16de:	d1 0a       	sbc	r13, r17
    16e0:	cc 15       	cp	r28, r12
    16e2:	dd 05       	cpc	r29, r13
    16e4:	08 f4       	brcc	.+2      	; 0x16e8 <prvReadBytesFromBuffer+0x3c>
    16e6:	6e 01       	movw	r12, r28
    16e8:	f7 01       	movw	r30, r14
    16ea:	64 85       	ldd	r22, Z+12	; 0x0c
    16ec:	75 85       	ldd	r23, Z+13	; 0x0d
    16ee:	60 0f       	add	r22, r16
    16f0:	71 1f       	adc	r23, r17
    16f2:	a6 01       	movw	r20, r12
    16f4:	c5 01       	movw	r24, r10
    16f6:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <memcpy>
    16fa:	cc 16       	cp	r12, r28
    16fc:	dd 06       	cpc	r13, r29
    16fe:	58 f4       	brcc	.+22     	; 0x1716 <prvReadBytesFromBuffer+0x6a>
    1700:	ae 01       	movw	r20, r28
    1702:	4c 19       	sub	r20, r12
    1704:	5d 09       	sbc	r21, r13
    1706:	f7 01       	movw	r30, r14
    1708:	64 85       	ldd	r22, Z+12	; 0x0c
    170a:	75 85       	ldd	r23, Z+13	; 0x0d
    170c:	c5 01       	movw	r24, r10
    170e:	8c 0d       	add	r24, r12
    1710:	9d 1d       	adc	r25, r13
    1712:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <memcpy>
    1716:	0c 0f       	add	r16, r28
    1718:	1d 1f       	adc	r17, r29
    171a:	f7 01       	movw	r30, r14
    171c:	84 81       	ldd	r24, Z+4	; 0x04
    171e:	95 81       	ldd	r25, Z+5	; 0x05
    1720:	08 17       	cp	r16, r24
    1722:	19 07       	cpc	r17, r25
    1724:	10 f0       	brcs	.+4      	; 0x172a <prvReadBytesFromBuffer+0x7e>
    1726:	08 1b       	sub	r16, r24
    1728:	19 0b       	sbc	r17, r25
    172a:	f7 01       	movw	r30, r14
    172c:	11 83       	std	Z+1, r17	; 0x01
    172e:	00 83       	st	Z, r16
    1730:	ce 01       	movw	r24, r28
    1732:	df 91       	pop	r29
    1734:	cf 91       	pop	r28
    1736:	1f 91       	pop	r17
    1738:	0f 91       	pop	r16
    173a:	ff 90       	pop	r15
    173c:	ef 90       	pop	r14
    173e:	df 90       	pop	r13
    1740:	cf 90       	pop	r12
    1742:	bf 90       	pop	r11
    1744:	af 90       	pop	r10
    1746:	08 95       	ret

00001748 <xStreamBufferGenericCreate>:
    1748:	ef 92       	push	r14
    174a:	ff 92       	push	r15
    174c:	1f 93       	push	r17
    174e:	cf 93       	push	r28
    1750:	df 93       	push	r29
    1752:	eb 01       	movw	r28, r22
    1754:	11 e0       	ldi	r17, 0x01	; 1
    1756:	41 30       	cpi	r20, 0x01	; 1
    1758:	09 f0       	breq	.+2      	; 0x175c <xStreamBufferGenericCreate+0x14>
    175a:	10 e0       	ldi	r17, 0x00	; 0
    175c:	20 97       	sbiw	r28, 0x00	; 0
    175e:	11 f4       	brne	.+4      	; 0x1764 <xStreamBufferGenericCreate+0x1c>
    1760:	c1 e0       	ldi	r28, 0x01	; 1
    1762:	d0 e0       	ldi	r29, 0x00	; 0
    1764:	7c 01       	movw	r14, r24
    1766:	2f ef       	ldi	r18, 0xFF	; 255
    1768:	e2 1a       	sub	r14, r18
    176a:	f2 0a       	sbc	r15, r18
    176c:	41 96       	adiw	r24, 0x11	; 17
    176e:	59 d9       	rcall	.-3406   	; 0xa22 <pvPortMalloc>
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	81 f0       	breq	.+32     	; 0x1794 <xStreamBufferGenericCreate+0x4c>
    1774:	20 e1       	ldi	r18, 0x10	; 16
    1776:	fc 01       	movw	r30, r24
    1778:	11 92       	st	Z+, r1
    177a:	2a 95       	dec	r18
    177c:	e9 f7       	brne	.-6      	; 0x1778 <xStreamBufferGenericCreate+0x30>
    177e:	9c 01       	movw	r18, r24
    1780:	20 5f       	subi	r18, 0xF0	; 240
    1782:	3f 4f       	sbci	r19, 0xFF	; 255
    1784:	fc 01       	movw	r30, r24
    1786:	35 87       	std	Z+13, r19	; 0x0d
    1788:	24 87       	std	Z+12, r18	; 0x0c
    178a:	f5 82       	std	Z+5, r15	; 0x05
    178c:	e4 82       	std	Z+4, r14	; 0x04
    178e:	d7 83       	std	Z+7, r29	; 0x07
    1790:	c6 83       	std	Z+6, r28	; 0x06
    1792:	16 87       	std	Z+14, r17	; 0x0e
    1794:	df 91       	pop	r29
    1796:	cf 91       	pop	r28
    1798:	1f 91       	pop	r17
    179a:	ff 90       	pop	r15
    179c:	ef 90       	pop	r14
    179e:	08 95       	ret

000017a0 <xStreamBufferReset>:
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	fc 01       	movw	r30, r24
    17a6:	27 85       	ldd	r18, Z+15	; 0x0f
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	f8 94       	cli
    17ac:	0f 92       	push	r0
    17ae:	80 85       	ldd	r24, Z+8	; 0x08
    17b0:	91 85       	ldd	r25, Z+9	; 0x09
    17b2:	89 2b       	or	r24, r25
    17b4:	d1 f4       	brne	.+52     	; 0x17ea <xStreamBufferReset+0x4a>
    17b6:	82 85       	ldd	r24, Z+10	; 0x0a
    17b8:	93 85       	ldd	r25, Z+11	; 0x0b
    17ba:	89 2b       	or	r24, r25
    17bc:	c1 f4       	brne	.+48     	; 0x17ee <xStreamBufferReset+0x4e>
    17be:	86 85       	ldd	r24, Z+14	; 0x0e
    17c0:	46 81       	ldd	r20, Z+6	; 0x06
    17c2:	57 81       	ldd	r21, Z+7	; 0x07
    17c4:	64 81       	ldd	r22, Z+4	; 0x04
    17c6:	75 81       	ldd	r23, Z+5	; 0x05
    17c8:	a4 85       	ldd	r26, Z+12	; 0x0c
    17ca:	b5 85       	ldd	r27, Z+13	; 0x0d
    17cc:	90 e1       	ldi	r25, 0x10	; 16
    17ce:	ef 01       	movw	r28, r30
    17d0:	19 92       	st	Y+, r1
    17d2:	9a 95       	dec	r25
    17d4:	e9 f7       	brne	.-6      	; 0x17d0 <xStreamBufferReset+0x30>
    17d6:	b5 87       	std	Z+13, r27	; 0x0d
    17d8:	a4 87       	std	Z+12, r26	; 0x0c
    17da:	75 83       	std	Z+5, r23	; 0x05
    17dc:	64 83       	std	Z+4, r22	; 0x04
    17de:	57 83       	std	Z+7, r21	; 0x07
    17e0:	46 83       	std	Z+6, r20	; 0x06
    17e2:	86 87       	std	Z+14, r24	; 0x0e
    17e4:	27 87       	std	Z+15, r18	; 0x0f
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	03 c0       	rjmp	.+6      	; 0x17f0 <xStreamBufferReset+0x50>
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	01 c0       	rjmp	.+2      	; 0x17f0 <xStreamBufferReset+0x50>
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	0f 90       	pop	r0
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	df 91       	pop	r29
    17f6:	cf 91       	pop	r28
    17f8:	08 95       	ret

000017fa <xStreamBufferSpacesAvailable>:
    17fa:	fc 01       	movw	r30, r24
    17fc:	24 81       	ldd	r18, Z+4	; 0x04
    17fe:	35 81       	ldd	r19, Z+5	; 0x05
    1800:	80 81       	ld	r24, Z
    1802:	91 81       	ldd	r25, Z+1	; 0x01
    1804:	42 81       	ldd	r20, Z+2	; 0x02
    1806:	53 81       	ldd	r21, Z+3	; 0x03
    1808:	82 0f       	add	r24, r18
    180a:	93 1f       	adc	r25, r19
    180c:	01 97       	sbiw	r24, 0x01	; 1
    180e:	84 1b       	sub	r24, r20
    1810:	95 0b       	sbc	r25, r21
    1812:	82 17       	cp	r24, r18
    1814:	93 07       	cpc	r25, r19
    1816:	10 f0       	brcs	.+4      	; 0x181c <xStreamBufferSpacesAvailable+0x22>
    1818:	82 1b       	sub	r24, r18
    181a:	93 0b       	sbc	r25, r19
    181c:	08 95       	ret

0000181e <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    181e:	af 92       	push	r10
    1820:	bf 92       	push	r11
    1822:	cf 92       	push	r12
    1824:	df 92       	push	r13
    1826:	ef 92       	push	r14
    1828:	ff 92       	push	r15
    182a:	0f 93       	push	r16
    182c:	1f 93       	push	r17
    182e:	cf 93       	push	r28
    1830:	df 93       	push	r29
    1832:	ec 01       	movw	r28, r24
    1834:	5b 01       	movw	r10, r22
    1836:	6a 01       	movw	r12, r20
    1838:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    183a:	8e 85       	ldd	r24, Y+14	; 0x0e
    183c:	80 ff       	sbrs	r24, 0
    183e:	04 c0       	rjmp	.+8      	; 0x1848 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1840:	8a 01       	movw	r16, r20
    1842:	0e 5f       	subi	r16, 0xFE	; 254
    1844:	1f 4f       	sbci	r17, 0xFF	; 255
    1846:	01 c0       	rjmp	.+2      	; 0x184a <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    1848:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    184a:	ce 01       	movw	r24, r28
    184c:	d6 df       	rcall	.-84     	; 0x17fa <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    184e:	9c 01       	movw	r18, r24
    1850:	a6 01       	movw	r20, r12
    1852:	b5 01       	movw	r22, r10
    1854:	ce 01       	movw	r24, r28
    1856:	ea de       	rcall	.-556    	; 0x162c <prvWriteMessageToBuffer>
    1858:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    185a:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    185c:	b1 f0       	breq	.+44     	; 0x188a <xStreamBufferSendFromISR+0x6c>
    185e:	ce 01       	movw	r24, r28
    1860:	89 de       	rcall	.-750    	; 0x1574 <prvBytesInBuffer>
    1862:	2e 81       	ldd	r18, Y+6	; 0x06
    1864:	3f 81       	ldd	r19, Y+7	; 0x07
    1866:	82 17       	cp	r24, r18
    1868:	93 07       	cpc	r25, r19
    186a:	78 f0       	brcs	.+30     	; 0x188a <xStreamBufferSendFromISR+0x6c>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    186c:	88 85       	ldd	r24, Y+8	; 0x08
    186e:	99 85       	ldd	r25, Y+9	; 0x09
    1870:	89 2b       	or	r24, r25
    1872:	59 f0       	breq	.+22     	; 0x188a <xStreamBufferSendFromISR+0x6c>
    1874:	88 85       	ldd	r24, Y+8	; 0x08
    1876:	99 85       	ldd	r25, Y+9	; 0x09
    1878:	00 e0       	ldi	r16, 0x00	; 0
    187a:	10 e0       	ldi	r17, 0x00	; 0
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	40 e0       	ldi	r20, 0x00	; 0
    1880:	50 e0       	ldi	r21, 0x00	; 0
    1882:	ba 01       	movw	r22, r20
    1884:	2f d7       	rcall	.+3678   	; 0x26e4 <xTaskGenericNotifyFromISR>
    1886:	19 86       	std	Y+9, r1	; 0x09
    1888:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    188a:	c6 01       	movw	r24, r12
    188c:	df 91       	pop	r29
    188e:	cf 91       	pop	r28
    1890:	1f 91       	pop	r17
    1892:	0f 91       	pop	r16
    1894:	ff 90       	pop	r15
    1896:	ef 90       	pop	r14
    1898:	df 90       	pop	r13
    189a:	cf 90       	pop	r12
    189c:	bf 90       	pop	r11
    189e:	af 90       	pop	r10
    18a0:	08 95       	ret

000018a2 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    18a2:	6f 92       	push	r6
    18a4:	7f 92       	push	r7
    18a6:	8f 92       	push	r8
    18a8:	9f 92       	push	r9
    18aa:	af 92       	push	r10
    18ac:	bf 92       	push	r11
    18ae:	cf 92       	push	r12
    18b0:	df 92       	push	r13
    18b2:	ef 92       	push	r14
    18b4:	ff 92       	push	r15
    18b6:	0f 93       	push	r16
    18b8:	1f 93       	push	r17
    18ba:	cf 93       	push	r28
    18bc:	df 93       	push	r29
    18be:	1f 92       	push	r1
    18c0:	1f 92       	push	r1
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
    18c6:	6c 01       	movw	r12, r24
    18c8:	3b 01       	movw	r6, r22
    18ca:	4a 01       	movw	r8, r20
    18cc:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    18ce:	fc 01       	movw	r30, r24
    18d0:	86 85       	ldd	r24, Z+14	; 0x0e
    18d2:	80 fd       	sbrc	r24, 0
    18d4:	03 c0       	rjmp	.+6      	; 0x18dc <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    18d6:	a1 2c       	mov	r10, r1
    18d8:	b1 2c       	mov	r11, r1
    18da:	04 c0       	rjmp	.+8      	; 0x18e4 <xStreamBufferReceive+0x42>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    18dc:	68 94       	set
    18de:	aa 24       	eor	r10, r10
    18e0:	a1 f8       	bld	r10, 1
    18e2:	b1 2c       	mov	r11, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    18e4:	e1 14       	cp	r14, r1
    18e6:	f1 04       	cpc	r15, r1
    18e8:	29 f1       	breq	.+74     	; 0x1934 <xStreamBufferReceive+0x92>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    18ea:	0f b6       	in	r0, 0x3f	; 63
    18ec:	f8 94       	cli
    18ee:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    18f0:	c6 01       	movw	r24, r12
    18f2:	40 de       	rcall	.-896    	; 0x1574 <prvBytesInBuffer>
    18f4:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    18f6:	a8 16       	cp	r10, r24
    18f8:	b9 06       	cpc	r11, r25
    18fa:	38 f0       	brcs	.+14     	; 0x190a <xStreamBufferReceive+0x68>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	90 e0       	ldi	r25, 0x00	; 0

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1900:	81 d7       	rcall	.+3842   	; 0x2804 <xTaskNotifyStateClear>
    1902:	c8 d4       	rcall	.+2448   	; 0x2294 <xTaskGetCurrentTaskHandle>
    1904:	f6 01       	movw	r30, r12
    1906:	91 87       	std	Z+9, r25	; 0x09
    1908:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    190a:	0f 90       	pop	r0
    190c:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    190e:	a0 16       	cp	r10, r16
    1910:	b1 06       	cpc	r11, r17
    1912:	b0 f0       	brcs	.+44     	; 0x1940 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1914:	00 e0       	ldi	r16, 0x00	; 0
    1916:	10 e0       	ldi	r17, 0x00	; 0
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	a9 01       	movw	r20, r18
    191e:	60 e0       	ldi	r22, 0x00	; 0
    1920:	70 e0       	ldi	r23, 0x00	; 0
    1922:	cb 01       	movw	r24, r22
    1924:	de d5       	rcall	.+3004   	; 0x24e2 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1926:	f6 01       	movw	r30, r12
    1928:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    192a:	10 86       	std	Z+8, r1	; 0x08
    192c:	c6 01       	movw	r24, r12
    192e:	22 de       	rcall	.-956    	; 0x1574 <prvBytesInBuffer>
    1930:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1932:	03 c0       	rjmp	.+6      	; 0x193a <xStreamBufferReceive+0x98>
    1934:	c6 01       	movw	r24, r12
    1936:	1e de       	rcall	.-964    	; 0x1574 <prvBytesInBuffer>
    1938:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    193a:	a0 16       	cp	r10, r16
    193c:	b1 06       	cpc	r11, r17
    193e:	b8 f5       	brcc	.+110    	; 0x19ae <xStreamBufferReceive+0x10c>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    1940:	a1 14       	cp	r10, r1
    1942:	b1 04       	cpc	r11, r1
    1944:	c1 f0       	breq	.+48     	; 0x1976 <xStreamBufferReceive+0xd4>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    1946:	f6 01       	movw	r30, r12
    1948:	e0 80       	ld	r14, Z
    194a:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    194c:	98 01       	movw	r18, r16
    194e:	a5 01       	movw	r20, r10
    1950:	be 01       	movw	r22, r28
    1952:	6f 5f       	subi	r22, 0xFF	; 255
    1954:	7f 4f       	sbci	r23, 0xFF	; 255
    1956:	c6 01       	movw	r24, r12
    1958:	a9 de       	rcall	.-686    	; 0x16ac <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    195e:	0a 19       	sub	r16, r10
    1960:	1b 09       	sbc	r17, r11

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    1962:	88 16       	cp	r8, r24
    1964:	99 06       	cpc	r9, r25
    1966:	30 f4       	brcc	.+12     	; 0x1974 <xStreamBufferReceive+0xd2>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    1968:	f6 01       	movw	r30, r12
    196a:	f1 82       	std	Z+1, r15	; 0x01
    196c:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    196e:	81 2c       	mov	r8, r1
    1970:	91 2c       	mov	r9, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    1972:	01 c0       	rjmp	.+2      	; 0x1976 <xStreamBufferReceive+0xd4>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    1974:	4c 01       	movw	r8, r24
    1976:	98 01       	movw	r18, r16
    1978:	a4 01       	movw	r20, r8
    197a:	b3 01       	movw	r22, r6
    197c:	c6 01       	movw	r24, r12
    197e:	96 de       	rcall	.-724    	; 0x16ac <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1980:	7c 01       	movw	r14, r24
    1982:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1984:	b1 f0       	breq	.+44     	; 0x19b2 <xStreamBufferReceive+0x110>
    1986:	eb d1       	rcall	.+982    	; 0x1d5e <vTaskSuspendAll>
    1988:	f6 01       	movw	r30, r12
    198a:	82 85       	ldd	r24, Z+10	; 0x0a
    198c:	93 85       	ldd	r25, Z+11	; 0x0b
    198e:	89 2b       	or	r24, r25
    1990:	61 f0       	breq	.+24     	; 0x19aa <xStreamBufferReceive+0x108>
    1992:	82 85       	ldd	r24, Z+10	; 0x0a
    1994:	93 85       	ldd	r25, Z+11	; 0x0b
    1996:	00 e0       	ldi	r16, 0x00	; 0
    1998:	10 e0       	ldi	r17, 0x00	; 0
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	40 e0       	ldi	r20, 0x00	; 0
    199e:	50 e0       	ldi	r21, 0x00	; 0
    19a0:	ba 01       	movw	r22, r20
    19a2:	22 d6       	rcall	.+3140   	; 0x25e8 <xTaskGenericNotify>
    19a4:	f6 01       	movw	r30, r12
    19a6:	13 86       	std	Z+11, r1	; 0x0b
    19a8:	12 86       	std	Z+10, r1	; 0x0a
    19aa:	a3 d2       	rcall	.+1350   	; 0x1ef2 <xTaskResumeAll>
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <xStreamBufferReceive+0x110>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    19ae:	e1 2c       	mov	r14, r1
    19b0:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    19b2:	c7 01       	movw	r24, r14
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	df 91       	pop	r29
    19ba:	cf 91       	pop	r28
    19bc:	1f 91       	pop	r17
    19be:	0f 91       	pop	r16
    19c0:	ff 90       	pop	r15
    19c2:	ef 90       	pop	r14
    19c4:	df 90       	pop	r13
    19c6:	cf 90       	pop	r12
    19c8:	bf 90       	pop	r11
    19ca:	af 90       	pop	r10
    19cc:	9f 90       	pop	r9
    19ce:	8f 90       	pop	r8
    19d0:	7f 90       	pop	r7
    19d2:	6f 90       	pop	r6
    19d4:	08 95       	ret

000019d6 <prvResetNextTaskUnblockTime>:
    19d6:	e0 91 46 08 	lds	r30, 0x0846	; 0x800846 <pxDelayedTaskList>
    19da:	f0 91 47 08 	lds	r31, 0x0847	; 0x800847 <pxDelayedTaskList+0x1>
    19de:	80 81       	ld	r24, Z
    19e0:	81 11       	cpse	r24, r1
    19e2:	07 c0       	rjmp	.+14     	; 0x19f2 <prvResetNextTaskUnblockTime+0x1c>
    19e4:	8f ef       	ldi	r24, 0xFF	; 255
    19e6:	9f ef       	ldi	r25, 0xFF	; 255
    19e8:	90 93 1e 08 	sts	0x081E, r25	; 0x80081e <xNextTaskUnblockTime+0x1>
    19ec:	80 93 1d 08 	sts	0x081D, r24	; 0x80081d <xNextTaskUnblockTime>
    19f0:	08 95       	ret
    19f2:	e0 91 46 08 	lds	r30, 0x0846	; 0x800846 <pxDelayedTaskList>
    19f6:	f0 91 47 08 	lds	r31, 0x0847	; 0x800847 <pxDelayedTaskList+0x1>
    19fa:	05 80       	ldd	r0, Z+5	; 0x05
    19fc:	f6 81       	ldd	r31, Z+6	; 0x06
    19fe:	e0 2d       	mov	r30, r0
    1a00:	06 80       	ldd	r0, Z+6	; 0x06
    1a02:	f7 81       	ldd	r31, Z+7	; 0x07
    1a04:	e0 2d       	mov	r30, r0
    1a06:	82 81       	ldd	r24, Z+2	; 0x02
    1a08:	93 81       	ldd	r25, Z+3	; 0x03
    1a0a:	90 93 1e 08 	sts	0x081E, r25	; 0x80081e <xNextTaskUnblockTime+0x1>
    1a0e:	80 93 1d 08 	sts	0x081D, r24	; 0x80081d <xNextTaskUnblockTime>
    1a12:	08 95       	ret

00001a14 <prvAddCurrentTaskToDelayedList>:
    1a14:	ff 92       	push	r15
    1a16:	0f 93       	push	r16
    1a18:	1f 93       	push	r17
    1a1a:	cf 93       	push	r28
    1a1c:	df 93       	push	r29
    1a1e:	ec 01       	movw	r28, r24
    1a20:	f6 2e       	mov	r15, r22
    1a22:	00 91 25 08 	lds	r16, 0x0825	; 0x800825 <xTickCount>
    1a26:	10 91 26 08 	lds	r17, 0x0826	; 0x800826 <xTickCount+0x1>
    1a2a:	80 91 7e 08 	lds	r24, 0x087E	; 0x80087e <pxCurrentTCB>
    1a2e:	90 91 7f 08 	lds	r25, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    1a32:	02 96       	adiw	r24, 0x02	; 2
    1a34:	7c d8       	rcall	.-3848   	; 0xb2e <uxListRemove>
    1a36:	cf 3f       	cpi	r28, 0xFF	; 255
    1a38:	8f ef       	ldi	r24, 0xFF	; 255
    1a3a:	d8 07       	cpc	r29, r24
    1a3c:	61 f4       	brne	.+24     	; 0x1a56 <prvAddCurrentTaskToDelayedList+0x42>
    1a3e:	ff 20       	and	r15, r15
    1a40:	51 f0       	breq	.+20     	; 0x1a56 <prvAddCurrentTaskToDelayedList+0x42>
    1a42:	60 91 7e 08 	lds	r22, 0x087E	; 0x80087e <pxCurrentTCB>
    1a46:	70 91 7f 08 	lds	r23, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    1a4a:	6e 5f       	subi	r22, 0xFE	; 254
    1a4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a4e:	88 e2       	ldi	r24, 0x28	; 40
    1a50:	98 e0       	ldi	r25, 0x08	; 8
    1a52:	1b d8       	rcall	.-4042   	; 0xa8a <vListInsertEnd>
    1a54:	2d c0       	rjmp	.+90     	; 0x1ab0 <prvAddCurrentTaskToDelayedList+0x9c>
    1a56:	c0 0f       	add	r28, r16
    1a58:	d1 1f       	adc	r29, r17
    1a5a:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    1a5e:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    1a62:	d3 83       	std	Z+3, r29	; 0x03
    1a64:	c2 83       	std	Z+2, r28	; 0x02
    1a66:	c0 17       	cp	r28, r16
    1a68:	d1 07       	cpc	r29, r17
    1a6a:	60 f4       	brcc	.+24     	; 0x1a84 <prvAddCurrentTaskToDelayedList+0x70>
    1a6c:	60 91 7e 08 	lds	r22, 0x087E	; 0x80087e <pxCurrentTCB>
    1a70:	70 91 7f 08 	lds	r23, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    1a74:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <pxOverflowDelayedTaskList>
    1a78:	90 91 45 08 	lds	r25, 0x0845	; 0x800845 <pxOverflowDelayedTaskList+0x1>
    1a7c:	6e 5f       	subi	r22, 0xFE	; 254
    1a7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a80:	25 d8       	rcall	.-4022   	; 0xacc <vListInsert>
    1a82:	16 c0       	rjmp	.+44     	; 0x1ab0 <prvAddCurrentTaskToDelayedList+0x9c>
    1a84:	60 91 7e 08 	lds	r22, 0x087E	; 0x80087e <pxCurrentTCB>
    1a88:	70 91 7f 08 	lds	r23, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    1a8c:	80 91 46 08 	lds	r24, 0x0846	; 0x800846 <pxDelayedTaskList>
    1a90:	90 91 47 08 	lds	r25, 0x0847	; 0x800847 <pxDelayedTaskList+0x1>
    1a94:	6e 5f       	subi	r22, 0xFE	; 254
    1a96:	7f 4f       	sbci	r23, 0xFF	; 255
    1a98:	19 d8       	rcall	.-4046   	; 0xacc <vListInsert>
    1a9a:	80 91 1d 08 	lds	r24, 0x081D	; 0x80081d <xNextTaskUnblockTime>
    1a9e:	90 91 1e 08 	lds	r25, 0x081E	; 0x80081e <xNextTaskUnblockTime+0x1>
    1aa2:	c8 17       	cp	r28, r24
    1aa4:	d9 07       	cpc	r29, r25
    1aa6:	20 f4       	brcc	.+8      	; 0x1ab0 <prvAddCurrentTaskToDelayedList+0x9c>
    1aa8:	d0 93 1e 08 	sts	0x081E, r29	; 0x80081e <xNextTaskUnblockTime+0x1>
    1aac:	c0 93 1d 08 	sts	0x081D, r28	; 0x80081d <xNextTaskUnblockTime>
    1ab0:	df 91       	pop	r29
    1ab2:	cf 91       	pop	r28
    1ab4:	1f 91       	pop	r17
    1ab6:	0f 91       	pop	r16
    1ab8:	ff 90       	pop	r15
    1aba:	08 95       	ret

00001abc <xTaskCreate>:
    1abc:	4f 92       	push	r4
    1abe:	5f 92       	push	r5
    1ac0:	6f 92       	push	r6
    1ac2:	7f 92       	push	r7
    1ac4:	8f 92       	push	r8
    1ac6:	9f 92       	push	r9
    1ac8:	af 92       	push	r10
    1aca:	bf 92       	push	r11
    1acc:	cf 92       	push	r12
    1ace:	df 92       	push	r13
    1ad0:	ef 92       	push	r14
    1ad2:	ff 92       	push	r15
    1ad4:	0f 93       	push	r16
    1ad6:	cf 93       	push	r28
    1ad8:	df 93       	push	r29
    1ada:	4c 01       	movw	r8, r24
    1adc:	6b 01       	movw	r12, r22
    1ade:	5a 01       	movw	r10, r20
    1ae0:	29 01       	movw	r4, r18
    1ae2:	ca 01       	movw	r24, r20
    1ae4:	0e 94 11 05 	call	0xa22	; 0xa22 <pvPortMalloc>
    1ae8:	3c 01       	movw	r6, r24
    1aea:	89 2b       	or	r24, r25
    1aec:	09 f4       	brne	.+2      	; 0x1af0 <xTaskCreate+0x34>
    1aee:	f3 c0       	rjmp	.+486    	; 0x1cd6 <xTaskCreate+0x21a>
    1af0:	8c e2       	ldi	r24, 0x2C	; 44
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	0e 94 11 05 	call	0xa22	; 0xa22 <pvPortMalloc>
    1af8:	ec 01       	movw	r28, r24
    1afa:	89 2b       	or	r24, r25
    1afc:	99 f0       	breq	.+38     	; 0x1b24 <xTaskCreate+0x68>
    1afe:	78 8e       	std	Y+24, r7	; 0x18
    1b00:	6f 8a       	std	Y+23, r6	; 0x17
    1b02:	a5 01       	movw	r20, r10
    1b04:	65 ea       	ldi	r22, 0xA5	; 165
    1b06:	70 e0       	ldi	r23, 0x00	; 0
    1b08:	c3 01       	movw	r24, r6
    1b0a:	0e 94 02 27 	call	0x4e04	; 0x4e04 <memset>
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	a8 1a       	sub	r10, r24
    1b12:	b1 08       	sbc	r11, r1
    1b14:	8f 89       	ldd	r24, Y+23	; 0x17
    1b16:	98 8d       	ldd	r25, Y+24	; 0x18
    1b18:	a8 0e       	add	r10, r24
    1b1a:	b9 1e       	adc	r11, r25
    1b1c:	c1 14       	cp	r12, r1
    1b1e:	d1 04       	cpc	r13, r1
    1b20:	29 f4       	brne	.+10     	; 0x1b2c <xTaskCreate+0x70>
    1b22:	20 c0       	rjmp	.+64     	; 0x1b64 <xTaskCreate+0xa8>
    1b24:	c3 01       	movw	r24, r6
    1b26:	0e 94 24 05 	call	0xa48	; 0xa48 <vPortFree>
    1b2a:	d5 c0       	rjmp	.+426    	; 0x1cd6 <xTaskCreate+0x21a>
    1b2c:	d6 01       	movw	r26, r12
    1b2e:	8c 91       	ld	r24, X
    1b30:	89 8f       	std	Y+25, r24	; 0x19
    1b32:	8c 91       	ld	r24, X
    1b34:	88 23       	and	r24, r24
    1b36:	a1 f0       	breq	.+40     	; 0x1b60 <xTaskCreate+0xa4>
    1b38:	ae 01       	movw	r20, r28
    1b3a:	46 5e       	subi	r20, 0xE6	; 230
    1b3c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b3e:	f6 01       	movw	r30, r12
    1b40:	31 96       	adiw	r30, 0x01	; 1
    1b42:	b8 e0       	ldi	r27, 0x08	; 8
    1b44:	cb 0e       	add	r12, r27
    1b46:	d1 1c       	adc	r13, r1
    1b48:	cf 01       	movw	r24, r30
    1b4a:	21 91       	ld	r18, Z+
    1b4c:	da 01       	movw	r26, r20
    1b4e:	2d 93       	st	X+, r18
    1b50:	ad 01       	movw	r20, r26
    1b52:	dc 01       	movw	r26, r24
    1b54:	8c 91       	ld	r24, X
    1b56:	88 23       	and	r24, r24
    1b58:	19 f0       	breq	.+6      	; 0x1b60 <xTaskCreate+0xa4>
    1b5a:	ec 15       	cp	r30, r12
    1b5c:	fd 05       	cpc	r31, r13
    1b5e:	a1 f7       	brne	.-24     	; 0x1b48 <xTaskCreate+0x8c>
    1b60:	18 a2       	std	Y+32, r1	; 0x20
    1b62:	01 c0       	rjmp	.+2      	; 0x1b66 <xTaskCreate+0xaa>
    1b64:	19 8e       	std	Y+25, r1	; 0x19
    1b66:	04 30       	cpi	r16, 0x04	; 4
    1b68:	08 f0       	brcs	.+2      	; 0x1b6c <xTaskCreate+0xb0>
    1b6a:	03 e0       	ldi	r16, 0x03	; 3
    1b6c:	0e 8b       	std	Y+22, r16	; 0x16
    1b6e:	0b a3       	std	Y+35, r16	; 0x23
    1b70:	1c a2       	std	Y+36, r1	; 0x24
    1b72:	6e 01       	movw	r12, r28
    1b74:	b2 e0       	ldi	r27, 0x02	; 2
    1b76:	cb 0e       	add	r12, r27
    1b78:	d1 1c       	adc	r13, r1
    1b7a:	c6 01       	movw	r24, r12
    1b7c:	0e 94 41 05 	call	0xa82	; 0xa82 <vListInitialiseItem>
    1b80:	ce 01       	movw	r24, r28
    1b82:	0c 96       	adiw	r24, 0x0c	; 12
    1b84:	0e 94 41 05 	call	0xa82	; 0xa82 <vListInitialiseItem>
    1b88:	d9 87       	std	Y+9, r29	; 0x09
    1b8a:	c8 87       	std	Y+8, r28	; 0x08
    1b8c:	84 e0       	ldi	r24, 0x04	; 4
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	80 1b       	sub	r24, r16
    1b92:	91 09       	sbc	r25, r1
    1b94:	9d 87       	std	Y+13, r25	; 0x0d
    1b96:	8c 87       	std	Y+12, r24	; 0x0c
    1b98:	db 8b       	std	Y+19, r29	; 0x13
    1b9a:	ca 8b       	std	Y+18, r28	; 0x12
    1b9c:	1e a2       	std	Y+38, r1	; 0x26
    1b9e:	1d a2       	std	Y+37, r1	; 0x25
    1ba0:	1f a2       	std	Y+39, r1	; 0x27
    1ba2:	18 a6       	std	Y+40, r1	; 0x28
    1ba4:	19 a6       	std	Y+41, r1	; 0x29
    1ba6:	1a a6       	std	Y+42, r1	; 0x2a
    1ba8:	1b a6       	std	Y+43, r1	; 0x2b
    1baa:	a2 01       	movw	r20, r4
    1bac:	b4 01       	movw	r22, r8
    1bae:	c5 01       	movw	r24, r10
    1bb0:	0e 94 be 05 	call	0xb7c	; 0xb7c <pxPortInitialiseStack>
    1bb4:	99 83       	std	Y+1, r25	; 0x01
    1bb6:	88 83       	st	Y, r24
    1bb8:	e1 14       	cp	r14, r1
    1bba:	f1 04       	cpc	r15, r1
    1bbc:	19 f0       	breq	.+6      	; 0x1bc4 <xTaskCreate+0x108>
    1bbe:	f7 01       	movw	r30, r14
    1bc0:	d1 83       	std	Z+1, r29	; 0x01
    1bc2:	c0 83       	st	Z, r28
    1bc4:	0f b6       	in	r0, 0x3f	; 63
    1bc6:	f8 94       	cli
    1bc8:	0f 92       	push	r0
    1bca:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <uxCurrentNumberOfTasks>
    1bce:	8f 5f       	subi	r24, 0xFF	; 255
    1bd0:	80 93 27 08 	sts	0x0827, r24	; 0x800827 <uxCurrentNumberOfTasks>
    1bd4:	80 91 7e 08 	lds	r24, 0x087E	; 0x80087e <pxCurrentTCB>
    1bd8:	90 91 7f 08 	lds	r25, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    1bdc:	89 2b       	or	r24, r25
    1bde:	d1 f5       	brne	.+116    	; 0x1c54 <xTaskCreate+0x198>
    1be0:	d0 93 7f 08 	sts	0x087F, r29	; 0x80087f <pxCurrentTCB+0x1>
    1be4:	c0 93 7e 08 	sts	0x087E, r28	; 0x80087e <pxCurrentTCB>
    1be8:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <uxCurrentNumberOfTasks>
    1bec:	81 30       	cpi	r24, 0x01	; 1
    1bee:	09 f0       	breq	.+2      	; 0x1bf2 <xTaskCreate+0x136>
    1bf0:	41 c0       	rjmp	.+130    	; 0x1c74 <xTaskCreate+0x1b8>
    1bf2:	8a e5       	ldi	r24, 0x5A	; 90
    1bf4:	98 e0       	ldi	r25, 0x08	; 8
    1bf6:	0e 94 33 05 	call	0xa66	; 0xa66 <vListInitialise>
    1bfa:	83 e6       	ldi	r24, 0x63	; 99
    1bfc:	98 e0       	ldi	r25, 0x08	; 8
    1bfe:	0e 94 33 05 	call	0xa66	; 0xa66 <vListInitialise>
    1c02:	8c e6       	ldi	r24, 0x6C	; 108
    1c04:	98 e0       	ldi	r25, 0x08	; 8
    1c06:	0e 94 33 05 	call	0xa66	; 0xa66 <vListInitialise>
    1c0a:	85 e7       	ldi	r24, 0x75	; 117
    1c0c:	98 e0       	ldi	r25, 0x08	; 8
    1c0e:	0e 94 33 05 	call	0xa66	; 0xa66 <vListInitialise>
    1c12:	81 e5       	ldi	r24, 0x51	; 81
    1c14:	98 e0       	ldi	r25, 0x08	; 8
    1c16:	0e 94 33 05 	call	0xa66	; 0xa66 <vListInitialise>
    1c1a:	88 e4       	ldi	r24, 0x48	; 72
    1c1c:	98 e0       	ldi	r25, 0x08	; 8
    1c1e:	0e 94 33 05 	call	0xa66	; 0xa66 <vListInitialise>
    1c22:	8b e3       	ldi	r24, 0x3B	; 59
    1c24:	98 e0       	ldi	r25, 0x08	; 8
    1c26:	0e 94 33 05 	call	0xa66	; 0xa66 <vListInitialise>
    1c2a:	82 e3       	ldi	r24, 0x32	; 50
    1c2c:	98 e0       	ldi	r25, 0x08	; 8
    1c2e:	0e 94 33 05 	call	0xa66	; 0xa66 <vListInitialise>
    1c32:	88 e2       	ldi	r24, 0x28	; 40
    1c34:	98 e0       	ldi	r25, 0x08	; 8
    1c36:	0e 94 33 05 	call	0xa66	; 0xa66 <vListInitialise>
    1c3a:	81 e5       	ldi	r24, 0x51	; 81
    1c3c:	98 e0       	ldi	r25, 0x08	; 8
    1c3e:	90 93 47 08 	sts	0x0847, r25	; 0x800847 <pxDelayedTaskList+0x1>
    1c42:	80 93 46 08 	sts	0x0846, r24	; 0x800846 <pxDelayedTaskList>
    1c46:	88 e4       	ldi	r24, 0x48	; 72
    1c48:	98 e0       	ldi	r25, 0x08	; 8
    1c4a:	90 93 45 08 	sts	0x0845, r25	; 0x800845 <pxOverflowDelayedTaskList+0x1>
    1c4e:	80 93 44 08 	sts	0x0844, r24	; 0x800844 <pxOverflowDelayedTaskList>
    1c52:	10 c0       	rjmp	.+32     	; 0x1c74 <xTaskCreate+0x1b8>
    1c54:	80 91 23 08 	lds	r24, 0x0823	; 0x800823 <xSchedulerRunning>
    1c58:	81 11       	cpse	r24, r1
    1c5a:	0c c0       	rjmp	.+24     	; 0x1c74 <xTaskCreate+0x1b8>
    1c5c:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    1c60:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    1c64:	96 89       	ldd	r25, Z+22	; 0x16
    1c66:	8e 89       	ldd	r24, Y+22	; 0x16
    1c68:	89 17       	cp	r24, r25
    1c6a:	20 f0       	brcs	.+8      	; 0x1c74 <xTaskCreate+0x1b8>
    1c6c:	d0 93 7f 08 	sts	0x087F, r29	; 0x80087f <pxCurrentTCB+0x1>
    1c70:	c0 93 7e 08 	sts	0x087E, r28	; 0x80087e <pxCurrentTCB>
    1c74:	80 91 1f 08 	lds	r24, 0x081F	; 0x80081f <uxTaskNumber>
    1c78:	8f 5f       	subi	r24, 0xFF	; 255
    1c7a:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <uxTaskNumber>
    1c7e:	89 a3       	std	Y+33, r24	; 0x21
    1c80:	8e 89       	ldd	r24, Y+22	; 0x16
    1c82:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <uxTopReadyPriority>
    1c86:	98 17       	cp	r25, r24
    1c88:	10 f4       	brcc	.+4      	; 0x1c8e <xTaskCreate+0x1d2>
    1c8a:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <uxTopReadyPriority>
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	9c 01       	movw	r18, r24
    1c92:	22 0f       	add	r18, r18
    1c94:	33 1f       	adc	r19, r19
    1c96:	22 0f       	add	r18, r18
    1c98:	33 1f       	adc	r19, r19
    1c9a:	22 0f       	add	r18, r18
    1c9c:	33 1f       	adc	r19, r19
    1c9e:	82 0f       	add	r24, r18
    1ca0:	93 1f       	adc	r25, r19
    1ca2:	b6 01       	movw	r22, r12
    1ca4:	86 5a       	subi	r24, 0xA6	; 166
    1ca6:	97 4f       	sbci	r25, 0xF7	; 247
    1ca8:	0e 94 45 05 	call	0xa8a	; 0xa8a <vListInsertEnd>
    1cac:	0f 90       	pop	r0
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	80 91 23 08 	lds	r24, 0x0823	; 0x800823 <xSchedulerRunning>
    1cb4:	88 23       	and	r24, r24
    1cb6:	59 f0       	breq	.+22     	; 0x1cce <xTaskCreate+0x212>
    1cb8:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    1cbc:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    1cc0:	96 89       	ldd	r25, Z+22	; 0x16
    1cc2:	8e 89       	ldd	r24, Y+22	; 0x16
    1cc4:	98 17       	cp	r25, r24
    1cc6:	28 f4       	brcc	.+10     	; 0x1cd2 <xTaskCreate+0x216>
    1cc8:	07 d8       	rcall	.-4082   	; 0xcd8 <vPortYield>
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	05 c0       	rjmp	.+10     	; 0x1cd8 <xTaskCreate+0x21c>
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	03 c0       	rjmp	.+6      	; 0x1cd8 <xTaskCreate+0x21c>
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	01 c0       	rjmp	.+2      	; 0x1cd8 <xTaskCreate+0x21c>
    1cd6:	8f ef       	ldi	r24, 0xFF	; 255
    1cd8:	df 91       	pop	r29
    1cda:	cf 91       	pop	r28
    1cdc:	0f 91       	pop	r16
    1cde:	ff 90       	pop	r15
    1ce0:	ef 90       	pop	r14
    1ce2:	df 90       	pop	r13
    1ce4:	cf 90       	pop	r12
    1ce6:	bf 90       	pop	r11
    1ce8:	af 90       	pop	r10
    1cea:	9f 90       	pop	r9
    1cec:	8f 90       	pop	r8
    1cee:	7f 90       	pop	r7
    1cf0:	6f 90       	pop	r6
    1cf2:	5f 90       	pop	r5
    1cf4:	4f 90       	pop	r4
    1cf6:	08 95       	ret

00001cf8 <vTaskStartScheduler>:
    1cf8:	ef 92       	push	r14
    1cfa:	ff 92       	push	r15
    1cfc:	0f 93       	push	r16
    1cfe:	0f 2e       	mov	r0, r31
    1d00:	fb e1       	ldi	r31, 0x1B	; 27
    1d02:	ef 2e       	mov	r14, r31
    1d04:	f8 e0       	ldi	r31, 0x08	; 8
    1d06:	ff 2e       	mov	r15, r31
    1d08:	f0 2d       	mov	r31, r0
    1d0a:	00 e0       	ldi	r16, 0x00	; 0
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	40 ec       	ldi	r20, 0xC0	; 192
    1d12:	50 e0       	ldi	r21, 0x00	; 0
    1d14:	6d e2       	ldi	r22, 0x2D	; 45
    1d16:	75 e0       	ldi	r23, 0x05	; 5
    1d18:	8d ec       	ldi	r24, 0xCD	; 205
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	cf de       	rcall	.-610    	; 0x1abc <xTaskCreate>
    1d1e:	81 30       	cpi	r24, 0x01	; 1
    1d20:	d1 f4       	brne	.+52     	; 0x1d56 <vTaskStartScheduler+0x5e>
    1d22:	dc d5       	rcall	.+3000   	; 0x28dc <xTimerCreateTimerTask>
    1d24:	81 30       	cpi	r24, 0x01	; 1
    1d26:	b9 f4       	brne	.+46     	; 0x1d56 <vTaskStartScheduler+0x5e>
    1d28:	f8 94       	cli
    1d2a:	8f ef       	ldi	r24, 0xFF	; 255
    1d2c:	9f ef       	ldi	r25, 0xFF	; 255
    1d2e:	90 93 1e 08 	sts	0x081E, r25	; 0x80081e <xNextTaskUnblockTime+0x1>
    1d32:	80 93 1d 08 	sts	0x081D, r24	; 0x80081d <xNextTaskUnblockTime>
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	80 93 23 08 	sts	0x0823, r24	; 0x800823 <xSchedulerRunning>
    1d3c:	10 92 26 08 	sts	0x0826, r1	; 0x800826 <xTickCount+0x1>
    1d40:	10 92 25 08 	sts	0x0825, r1	; 0x800825 <xTickCount>
    1d44:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    1d48:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    1d4c:	85 a1       	ldd	r24, Z+37	; 0x25
    1d4e:	0e 94 01 05 	call	0xa02	; 0xa02 <task_switch_in>
    1d52:	0e 94 30 06 	call	0xc60	; 0xc60 <xPortStartScheduler>
    1d56:	0f 91       	pop	r16
    1d58:	ff 90       	pop	r15
    1d5a:	ef 90       	pop	r14
    1d5c:	08 95       	ret

00001d5e <vTaskSuspendAll>:
    1d5e:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <uxSchedulerSuspended>
    1d62:	8f 5f       	subi	r24, 0xFF	; 255
    1d64:	80 93 1a 08 	sts	0x081A, r24	; 0x80081a <uxSchedulerSuspended>
    1d68:	08 95       	ret

00001d6a <xTaskGetTickCount>:
    1d6a:	0f b6       	in	r0, 0x3f	; 63
    1d6c:	f8 94       	cli
    1d6e:	0f 92       	push	r0
    1d70:	80 91 25 08 	lds	r24, 0x0825	; 0x800825 <xTickCount>
    1d74:	90 91 26 08 	lds	r25, 0x0826	; 0x800826 <xTickCount+0x1>
    1d78:	0f 90       	pop	r0
    1d7a:	0f be       	out	0x3f, r0	; 63
    1d7c:	08 95       	ret

00001d7e <xTaskIncrementTick>:
    1d7e:	cf 92       	push	r12
    1d80:	df 92       	push	r13
    1d82:	ef 92       	push	r14
    1d84:	ff 92       	push	r15
    1d86:	0f 93       	push	r16
    1d88:	1f 93       	push	r17
    1d8a:	cf 93       	push	r28
    1d8c:	df 93       	push	r29
    1d8e:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <uxSchedulerSuspended>
    1d92:	81 11       	cpse	r24, r1
    1d94:	98 c0       	rjmp	.+304    	; 0x1ec6 <xTaskIncrementTick+0x148>
    1d96:	e0 90 25 08 	lds	r14, 0x0825	; 0x800825 <xTickCount>
    1d9a:	f0 90 26 08 	lds	r15, 0x0826	; 0x800826 <xTickCount+0x1>
    1d9e:	8f ef       	ldi	r24, 0xFF	; 255
    1da0:	e8 1a       	sub	r14, r24
    1da2:	f8 0a       	sbc	r15, r24
    1da4:	f0 92 26 08 	sts	0x0826, r15	; 0x800826 <xTickCount+0x1>
    1da8:	e0 92 25 08 	sts	0x0825, r14	; 0x800825 <xTickCount>
    1dac:	e1 14       	cp	r14, r1
    1dae:	f1 04       	cpc	r15, r1
    1db0:	b1 f4       	brne	.+44     	; 0x1dde <xTaskIncrementTick+0x60>
    1db2:	80 91 46 08 	lds	r24, 0x0846	; 0x800846 <pxDelayedTaskList>
    1db6:	90 91 47 08 	lds	r25, 0x0847	; 0x800847 <pxDelayedTaskList+0x1>
    1dba:	20 91 44 08 	lds	r18, 0x0844	; 0x800844 <pxOverflowDelayedTaskList>
    1dbe:	30 91 45 08 	lds	r19, 0x0845	; 0x800845 <pxOverflowDelayedTaskList+0x1>
    1dc2:	30 93 47 08 	sts	0x0847, r19	; 0x800847 <pxDelayedTaskList+0x1>
    1dc6:	20 93 46 08 	sts	0x0846, r18	; 0x800846 <pxDelayedTaskList>
    1dca:	90 93 45 08 	sts	0x0845, r25	; 0x800845 <pxOverflowDelayedTaskList+0x1>
    1dce:	80 93 44 08 	sts	0x0844, r24	; 0x800844 <pxOverflowDelayedTaskList>
    1dd2:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <xNumOfOverflows>
    1dd6:	8f 5f       	subi	r24, 0xFF	; 255
    1dd8:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <xNumOfOverflows>
    1ddc:	fc dd       	rcall	.-1032   	; 0x19d6 <prvResetNextTaskUnblockTime>
    1dde:	80 91 1d 08 	lds	r24, 0x081D	; 0x80081d <xNextTaskUnblockTime>
    1de2:	90 91 1e 08 	lds	r25, 0x081E	; 0x80081e <xNextTaskUnblockTime+0x1>
    1de6:	e8 16       	cp	r14, r24
    1de8:	f9 06       	cpc	r15, r25
    1dea:	10 f4       	brcc	.+4      	; 0x1df0 <xTaskIncrementTick+0x72>
    1dec:	d1 2c       	mov	r13, r1
    1dee:	53 c0       	rjmp	.+166    	; 0x1e96 <xTaskIncrementTick+0x118>
    1df0:	d1 2c       	mov	r13, r1
    1df2:	cc 24       	eor	r12, r12
    1df4:	c3 94       	inc	r12
    1df6:	e0 91 46 08 	lds	r30, 0x0846	; 0x800846 <pxDelayedTaskList>
    1dfa:	f0 91 47 08 	lds	r31, 0x0847	; 0x800847 <pxDelayedTaskList+0x1>
    1dfe:	80 81       	ld	r24, Z
    1e00:	81 11       	cpse	r24, r1
    1e02:	07 c0       	rjmp	.+14     	; 0x1e12 <xTaskIncrementTick+0x94>
    1e04:	8f ef       	ldi	r24, 0xFF	; 255
    1e06:	9f ef       	ldi	r25, 0xFF	; 255
    1e08:	90 93 1e 08 	sts	0x081E, r25	; 0x80081e <xNextTaskUnblockTime+0x1>
    1e0c:	80 93 1d 08 	sts	0x081D, r24	; 0x80081d <xNextTaskUnblockTime>
    1e10:	42 c0       	rjmp	.+132    	; 0x1e96 <xTaskIncrementTick+0x118>
    1e12:	e0 91 46 08 	lds	r30, 0x0846	; 0x800846 <pxDelayedTaskList>
    1e16:	f0 91 47 08 	lds	r31, 0x0847	; 0x800847 <pxDelayedTaskList+0x1>
    1e1a:	05 80       	ldd	r0, Z+5	; 0x05
    1e1c:	f6 81       	ldd	r31, Z+6	; 0x06
    1e1e:	e0 2d       	mov	r30, r0
    1e20:	c6 81       	ldd	r28, Z+6	; 0x06
    1e22:	d7 81       	ldd	r29, Z+7	; 0x07
    1e24:	8a 81       	ldd	r24, Y+2	; 0x02
    1e26:	9b 81       	ldd	r25, Y+3	; 0x03
    1e28:	e8 16       	cp	r14, r24
    1e2a:	f9 06       	cpc	r15, r25
    1e2c:	28 f4       	brcc	.+10     	; 0x1e38 <xTaskIncrementTick+0xba>
    1e2e:	90 93 1e 08 	sts	0x081E, r25	; 0x80081e <xNextTaskUnblockTime+0x1>
    1e32:	80 93 1d 08 	sts	0x081D, r24	; 0x80081d <xNextTaskUnblockTime>
    1e36:	2f c0       	rjmp	.+94     	; 0x1e96 <xTaskIncrementTick+0x118>
    1e38:	8e 01       	movw	r16, r28
    1e3a:	0e 5f       	subi	r16, 0xFE	; 254
    1e3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e3e:	c8 01       	movw	r24, r16
    1e40:	0e 94 97 05 	call	0xb2e	; 0xb2e <uxListRemove>
    1e44:	8c 89       	ldd	r24, Y+20	; 0x14
    1e46:	9d 89       	ldd	r25, Y+21	; 0x15
    1e48:	89 2b       	or	r24, r25
    1e4a:	21 f0       	breq	.+8      	; 0x1e54 <xTaskIncrementTick+0xd6>
    1e4c:	ce 01       	movw	r24, r28
    1e4e:	0c 96       	adiw	r24, 0x0c	; 12
    1e50:	0e 94 97 05 	call	0xb2e	; 0xb2e <uxListRemove>
    1e54:	8e 89       	ldd	r24, Y+22	; 0x16
    1e56:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <uxTopReadyPriority>
    1e5a:	98 17       	cp	r25, r24
    1e5c:	10 f4       	brcc	.+4      	; 0x1e62 <xTaskIncrementTick+0xe4>
    1e5e:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <uxTopReadyPriority>
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	9c 01       	movw	r18, r24
    1e66:	22 0f       	add	r18, r18
    1e68:	33 1f       	adc	r19, r19
    1e6a:	22 0f       	add	r18, r18
    1e6c:	33 1f       	adc	r19, r19
    1e6e:	22 0f       	add	r18, r18
    1e70:	33 1f       	adc	r19, r19
    1e72:	82 0f       	add	r24, r18
    1e74:	93 1f       	adc	r25, r19
    1e76:	b8 01       	movw	r22, r16
    1e78:	86 5a       	subi	r24, 0xA6	; 166
    1e7a:	97 4f       	sbci	r25, 0xF7	; 247
    1e7c:	0e 94 45 05 	call	0xa8a	; 0xa8a <vListInsertEnd>
    1e80:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    1e84:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    1e88:	9e 89       	ldd	r25, Y+22	; 0x16
    1e8a:	86 89       	ldd	r24, Z+22	; 0x16
    1e8c:	98 17       	cp	r25, r24
    1e8e:	08 f4       	brcc	.+2      	; 0x1e92 <xTaskIncrementTick+0x114>
    1e90:	b2 cf       	rjmp	.-156    	; 0x1df6 <xTaskIncrementTick+0x78>
    1e92:	dc 2c       	mov	r13, r12
    1e94:	b0 cf       	rjmp	.-160    	; 0x1df6 <xTaskIncrementTick+0x78>
    1e96:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    1e9a:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    1e9e:	86 89       	ldd	r24, Z+22	; 0x16
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	ee 0f       	add	r30, r30
    1ea6:	ff 1f       	adc	r31, r31
    1ea8:	ee 0f       	add	r30, r30
    1eaa:	ff 1f       	adc	r31, r31
    1eac:	ee 0f       	add	r30, r30
    1eae:	ff 1f       	adc	r31, r31
    1eb0:	8e 0f       	add	r24, r30
    1eb2:	9f 1f       	adc	r25, r31
    1eb4:	fc 01       	movw	r30, r24
    1eb6:	e6 5a       	subi	r30, 0xA6	; 166
    1eb8:	f7 4f       	sbci	r31, 0xF7	; 247
    1eba:	80 81       	ld	r24, Z
    1ebc:	82 30       	cpi	r24, 0x02	; 2
    1ebe:	48 f0       	brcs	.+18     	; 0x1ed2 <xTaskIncrementTick+0x154>
    1ec0:	dd 24       	eor	r13, r13
    1ec2:	d3 94       	inc	r13
    1ec4:	06 c0       	rjmp	.+12     	; 0x1ed2 <xTaskIncrementTick+0x154>
    1ec6:	80 91 22 08 	lds	r24, 0x0822	; 0x800822 <uxPendedTicks>
    1eca:	8f 5f       	subi	r24, 0xFF	; 255
    1ecc:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <uxPendedTicks>
    1ed0:	d1 2c       	mov	r13, r1
    1ed2:	80 91 21 08 	lds	r24, 0x0821	; 0x800821 <xYieldPending>
    1ed6:	88 23       	and	r24, r24
    1ed8:	11 f0       	breq	.+4      	; 0x1ede <xTaskIncrementTick+0x160>
    1eda:	dd 24       	eor	r13, r13
    1edc:	d3 94       	inc	r13
    1ede:	8d 2d       	mov	r24, r13
    1ee0:	df 91       	pop	r29
    1ee2:	cf 91       	pop	r28
    1ee4:	1f 91       	pop	r17
    1ee6:	0f 91       	pop	r16
    1ee8:	ff 90       	pop	r15
    1eea:	ef 90       	pop	r14
    1eec:	df 90       	pop	r13
    1eee:	cf 90       	pop	r12
    1ef0:	08 95       	ret

00001ef2 <xTaskResumeAll>:
    1ef2:	df 92       	push	r13
    1ef4:	ef 92       	push	r14
    1ef6:	ff 92       	push	r15
    1ef8:	0f 93       	push	r16
    1efa:	1f 93       	push	r17
    1efc:	cf 93       	push	r28
    1efe:	df 93       	push	r29
    1f00:	0f b6       	in	r0, 0x3f	; 63
    1f02:	f8 94       	cli
    1f04:	0f 92       	push	r0
    1f06:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <uxSchedulerSuspended>
    1f0a:	81 50       	subi	r24, 0x01	; 1
    1f0c:	80 93 1a 08 	sts	0x081A, r24	; 0x80081a <uxSchedulerSuspended>
    1f10:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <uxSchedulerSuspended>
    1f14:	81 11       	cpse	r24, r1
    1f16:	5d c0       	rjmp	.+186    	; 0x1fd2 <xTaskResumeAll+0xe0>
    1f18:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <uxCurrentNumberOfTasks>
    1f1c:	81 11       	cpse	r24, r1
    1f1e:	33 c0       	rjmp	.+102    	; 0x1f86 <xTaskResumeAll+0x94>
    1f20:	5b c0       	rjmp	.+182    	; 0x1fd8 <xTaskResumeAll+0xe6>
    1f22:	d7 01       	movw	r26, r14
    1f24:	15 96       	adiw	r26, 0x05	; 5
    1f26:	ed 91       	ld	r30, X+
    1f28:	fc 91       	ld	r31, X
    1f2a:	16 97       	sbiw	r26, 0x06	; 6
    1f2c:	c6 81       	ldd	r28, Z+6	; 0x06
    1f2e:	d7 81       	ldd	r29, Z+7	; 0x07
    1f30:	ce 01       	movw	r24, r28
    1f32:	0c 96       	adiw	r24, 0x0c	; 12
    1f34:	0e 94 97 05 	call	0xb2e	; 0xb2e <uxListRemove>
    1f38:	8e 01       	movw	r16, r28
    1f3a:	0e 5f       	subi	r16, 0xFE	; 254
    1f3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f3e:	c8 01       	movw	r24, r16
    1f40:	0e 94 97 05 	call	0xb2e	; 0xb2e <uxListRemove>
    1f44:	8e 89       	ldd	r24, Y+22	; 0x16
    1f46:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <uxTopReadyPriority>
    1f4a:	98 17       	cp	r25, r24
    1f4c:	10 f4       	brcc	.+4      	; 0x1f52 <xTaskResumeAll+0x60>
    1f4e:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <uxTopReadyPriority>
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	9c 01       	movw	r18, r24
    1f56:	22 0f       	add	r18, r18
    1f58:	33 1f       	adc	r19, r19
    1f5a:	22 0f       	add	r18, r18
    1f5c:	33 1f       	adc	r19, r19
    1f5e:	22 0f       	add	r18, r18
    1f60:	33 1f       	adc	r19, r19
    1f62:	82 0f       	add	r24, r18
    1f64:	93 1f       	adc	r25, r19
    1f66:	b8 01       	movw	r22, r16
    1f68:	86 5a       	subi	r24, 0xA6	; 166
    1f6a:	97 4f       	sbci	r25, 0xF7	; 247
    1f6c:	0e 94 45 05 	call	0xa8a	; 0xa8a <vListInsertEnd>
    1f70:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    1f74:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    1f78:	9e 89       	ldd	r25, Y+22	; 0x16
    1f7a:	86 89       	ldd	r24, Z+22	; 0x16
    1f7c:	98 17       	cp	r25, r24
    1f7e:	68 f0       	brcs	.+26     	; 0x1f9a <xTaskResumeAll+0xa8>
    1f80:	d0 92 21 08 	sts	0x0821, r13	; 0x800821 <xYieldPending>
    1f84:	0a c0       	rjmp	.+20     	; 0x1f9a <xTaskResumeAll+0xa8>
    1f86:	c0 e0       	ldi	r28, 0x00	; 0
    1f88:	d0 e0       	ldi	r29, 0x00	; 0
    1f8a:	0f 2e       	mov	r0, r31
    1f8c:	fb e3       	ldi	r31, 0x3B	; 59
    1f8e:	ef 2e       	mov	r14, r31
    1f90:	f8 e0       	ldi	r31, 0x08	; 8
    1f92:	ff 2e       	mov	r15, r31
    1f94:	f0 2d       	mov	r31, r0
    1f96:	dd 24       	eor	r13, r13
    1f98:	d3 94       	inc	r13
    1f9a:	f7 01       	movw	r30, r14
    1f9c:	80 81       	ld	r24, Z
    1f9e:	81 11       	cpse	r24, r1
    1fa0:	c0 cf       	rjmp	.-128    	; 0x1f22 <xTaskResumeAll+0x30>
    1fa2:	cd 2b       	or	r28, r29
    1fa4:	09 f0       	breq	.+2      	; 0x1fa8 <xTaskResumeAll+0xb6>
    1fa6:	17 dd       	rcall	.-1490   	; 0x19d6 <prvResetNextTaskUnblockTime>
    1fa8:	c0 91 22 08 	lds	r28, 0x0822	; 0x800822 <uxPendedTicks>
    1fac:	cc 23       	and	r28, r28
    1fae:	49 f0       	breq	.+18     	; 0x1fc2 <xTaskResumeAll+0xd0>
    1fb0:	d1 e0       	ldi	r29, 0x01	; 1
    1fb2:	e5 de       	rcall	.-566    	; 0x1d7e <xTaskIncrementTick>
    1fb4:	81 11       	cpse	r24, r1
    1fb6:	d0 93 21 08 	sts	0x0821, r29	; 0x800821 <xYieldPending>
    1fba:	c1 50       	subi	r28, 0x01	; 1
    1fbc:	d1 f7       	brne	.-12     	; 0x1fb2 <xTaskResumeAll+0xc0>
    1fbe:	10 92 22 08 	sts	0x0822, r1	; 0x800822 <uxPendedTicks>
    1fc2:	80 91 21 08 	lds	r24, 0x0821	; 0x800821 <xYieldPending>
    1fc6:	88 23       	and	r24, r24
    1fc8:	31 f0       	breq	.+12     	; 0x1fd6 <xTaskResumeAll+0xe4>
    1fca:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <vPortYield>
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	03 c0       	rjmp	.+6      	; 0x1fd8 <xTaskResumeAll+0xe6>
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	01 c0       	rjmp	.+2      	; 0x1fd8 <xTaskResumeAll+0xe6>
    1fd6:	80 e0       	ldi	r24, 0x00	; 0
    1fd8:	0f 90       	pop	r0
    1fda:	0f be       	out	0x3f, r0	; 63
    1fdc:	df 91       	pop	r29
    1fde:	cf 91       	pop	r28
    1fe0:	1f 91       	pop	r17
    1fe2:	0f 91       	pop	r16
    1fe4:	ff 90       	pop	r15
    1fe6:	ef 90       	pop	r14
    1fe8:	df 90       	pop	r13
    1fea:	08 95       	ret

00001fec <vTaskDelay>:
    1fec:	cf 93       	push	r28
    1fee:	df 93       	push	r29
    1ff0:	ec 01       	movw	r28, r24
    1ff2:	89 2b       	or	r24, r25
    1ff4:	39 f0       	breq	.+14     	; 0x2004 <vTaskDelay+0x18>
    1ff6:	b3 de       	rcall	.-666    	; 0x1d5e <vTaskSuspendAll>
    1ff8:	60 e0       	ldi	r22, 0x00	; 0
    1ffa:	ce 01       	movw	r24, r28
    1ffc:	0b dd       	rcall	.-1514   	; 0x1a14 <prvAddCurrentTaskToDelayedList>
    1ffe:	79 df       	rcall	.-270    	; 0x1ef2 <xTaskResumeAll>
    2000:	81 11       	cpse	r24, r1
    2002:	02 c0       	rjmp	.+4      	; 0x2008 <vTaskDelay+0x1c>
    2004:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <vPortYield>
    2008:	df 91       	pop	r29
    200a:	cf 91       	pop	r28
    200c:	08 95       	ret

0000200e <vTaskSwitchContext>:
    200e:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <uxSchedulerSuspended>
    2012:	88 23       	and	r24, r24
    2014:	21 f0       	breq	.+8      	; 0x201e <vTaskSwitchContext+0x10>
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	80 93 21 08 	sts	0x0821, r24	; 0x800821 <xYieldPending>
    201c:	08 95       	ret
    201e:	10 92 21 08 	sts	0x0821, r1	; 0x800821 <xYieldPending>
    2022:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    2026:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    202a:	85 a1       	ldd	r24, Z+37	; 0x25
    202c:	0e 94 0b 05 	call	0xa16	; 0xa16 <task_switch_out>
    2030:	a0 91 7e 08 	lds	r26, 0x087E	; 0x80087e <pxCurrentTCB>
    2034:	b0 91 7f 08 	lds	r27, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    2038:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    203c:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    2040:	2d 91       	ld	r18, X+
    2042:	3c 91       	ld	r19, X
    2044:	87 89       	ldd	r24, Z+23	; 0x17
    2046:	90 8d       	ldd	r25, Z+24	; 0x18
    2048:	82 17       	cp	r24, r18
    204a:	93 07       	cpc	r25, r19
    204c:	58 f0       	brcs	.+22     	; 0x2064 <vTaskSwitchContext+0x56>
    204e:	60 91 7e 08 	lds	r22, 0x087E	; 0x80087e <pxCurrentTCB>
    2052:	70 91 7f 08 	lds	r23, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    2056:	80 91 7e 08 	lds	r24, 0x087E	; 0x80087e <pxCurrentTCB>
    205a:	90 91 7f 08 	lds	r25, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    205e:	67 5e       	subi	r22, 0xE7	; 231
    2060:	7f 4f       	sbci	r23, 0xFF	; 255
    2062:	1f d5       	rcall	.+2622   	; 0x2aa2 <vApplicationStackOverflowHook>
    2064:	20 91 24 08 	lds	r18, 0x0824	; 0x800824 <uxTopReadyPriority>
    2068:	82 2f       	mov	r24, r18
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	fc 01       	movw	r30, r24
    206e:	ee 0f       	add	r30, r30
    2070:	ff 1f       	adc	r31, r31
    2072:	ee 0f       	add	r30, r30
    2074:	ff 1f       	adc	r31, r31
    2076:	ee 0f       	add	r30, r30
    2078:	ff 1f       	adc	r31, r31
    207a:	e8 0f       	add	r30, r24
    207c:	f9 1f       	adc	r31, r25
    207e:	e6 5a       	subi	r30, 0xA6	; 166
    2080:	f7 4f       	sbci	r31, 0xF7	; 247
    2082:	30 81       	ld	r19, Z
    2084:	31 11       	cpse	r19, r1
    2086:	11 c0       	rjmp	.+34     	; 0x20aa <vTaskSwitchContext+0x9c>
    2088:	21 50       	subi	r18, 0x01	; 1
    208a:	82 2f       	mov	r24, r18
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	fc 01       	movw	r30, r24
    2090:	ee 0f       	add	r30, r30
    2092:	ff 1f       	adc	r31, r31
    2094:	ee 0f       	add	r30, r30
    2096:	ff 1f       	adc	r31, r31
    2098:	ee 0f       	add	r30, r30
    209a:	ff 1f       	adc	r31, r31
    209c:	e8 0f       	add	r30, r24
    209e:	f9 1f       	adc	r31, r25
    20a0:	e6 5a       	subi	r30, 0xA6	; 166
    20a2:	f7 4f       	sbci	r31, 0xF7	; 247
    20a4:	30 81       	ld	r19, Z
    20a6:	33 23       	and	r19, r19
    20a8:	79 f3       	breq	.-34     	; 0x2088 <vTaskSwitchContext+0x7a>
    20aa:	ac 01       	movw	r20, r24
    20ac:	44 0f       	add	r20, r20
    20ae:	55 1f       	adc	r21, r21
    20b0:	44 0f       	add	r20, r20
    20b2:	55 1f       	adc	r21, r21
    20b4:	44 0f       	add	r20, r20
    20b6:	55 1f       	adc	r21, r21
    20b8:	48 0f       	add	r20, r24
    20ba:	59 1f       	adc	r21, r25
    20bc:	da 01       	movw	r26, r20
    20be:	a6 5a       	subi	r26, 0xA6	; 166
    20c0:	b7 4f       	sbci	r27, 0xF7	; 247
    20c2:	11 96       	adiw	r26, 0x01	; 1
    20c4:	ed 91       	ld	r30, X+
    20c6:	fc 91       	ld	r31, X
    20c8:	12 97       	sbiw	r26, 0x02	; 2
    20ca:	02 80       	ldd	r0, Z+2	; 0x02
    20cc:	f3 81       	ldd	r31, Z+3	; 0x03
    20ce:	e0 2d       	mov	r30, r0
    20d0:	12 96       	adiw	r26, 0x02	; 2
    20d2:	fc 93       	st	X, r31
    20d4:	ee 93       	st	-X, r30
    20d6:	11 97       	sbiw	r26, 0x01	; 1
    20d8:	43 5a       	subi	r20, 0xA3	; 163
    20da:	57 4f       	sbci	r21, 0xF7	; 247
    20dc:	e4 17       	cp	r30, r20
    20de:	f5 07       	cpc	r31, r21
    20e0:	29 f4       	brne	.+10     	; 0x20ec <vTaskSwitchContext+0xde>
    20e2:	42 81       	ldd	r20, Z+2	; 0x02
    20e4:	53 81       	ldd	r21, Z+3	; 0x03
    20e6:	fd 01       	movw	r30, r26
    20e8:	52 83       	std	Z+2, r21	; 0x02
    20ea:	41 83       	std	Z+1, r20	; 0x01
    20ec:	fc 01       	movw	r30, r24
    20ee:	ee 0f       	add	r30, r30
    20f0:	ff 1f       	adc	r31, r31
    20f2:	ee 0f       	add	r30, r30
    20f4:	ff 1f       	adc	r31, r31
    20f6:	ee 0f       	add	r30, r30
    20f8:	ff 1f       	adc	r31, r31
    20fa:	8e 0f       	add	r24, r30
    20fc:	9f 1f       	adc	r25, r31
    20fe:	fc 01       	movw	r30, r24
    2100:	e6 5a       	subi	r30, 0xA6	; 166
    2102:	f7 4f       	sbci	r31, 0xF7	; 247
    2104:	01 80       	ldd	r0, Z+1	; 0x01
    2106:	f2 81       	ldd	r31, Z+2	; 0x02
    2108:	e0 2d       	mov	r30, r0
    210a:	86 81       	ldd	r24, Z+6	; 0x06
    210c:	97 81       	ldd	r25, Z+7	; 0x07
    210e:	90 93 7f 08 	sts	0x087F, r25	; 0x80087f <pxCurrentTCB+0x1>
    2112:	80 93 7e 08 	sts	0x087E, r24	; 0x80087e <pxCurrentTCB>
    2116:	20 93 24 08 	sts	0x0824, r18	; 0x800824 <uxTopReadyPriority>
    211a:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    211e:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    2122:	85 a1       	ldd	r24, Z+37	; 0x25
    2124:	0c 94 01 05 	jmp	0xa02	; 0xa02 <task_switch_in>
    2128:	08 95       	ret

0000212a <vTaskPlaceOnEventList>:
    212a:	cf 93       	push	r28
    212c:	df 93       	push	r29
    212e:	eb 01       	movw	r28, r22
    2130:	60 91 7e 08 	lds	r22, 0x087E	; 0x80087e <pxCurrentTCB>
    2134:	70 91 7f 08 	lds	r23, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    2138:	64 5f       	subi	r22, 0xF4	; 244
    213a:	7f 4f       	sbci	r23, 0xFF	; 255
    213c:	0e 94 66 05 	call	0xacc	; 0xacc <vListInsert>
    2140:	61 e0       	ldi	r22, 0x01	; 1
    2142:	ce 01       	movw	r24, r28
    2144:	67 dc       	rcall	.-1842   	; 0x1a14 <prvAddCurrentTaskToDelayedList>
    2146:	df 91       	pop	r29
    2148:	cf 91       	pop	r28
    214a:	08 95       	ret

0000214c <vTaskPlaceOnEventListRestricted>:
    214c:	0f 93       	push	r16
    214e:	1f 93       	push	r17
    2150:	cf 93       	push	r28
    2152:	8b 01       	movw	r16, r22
    2154:	c4 2f       	mov	r28, r20
    2156:	60 91 7e 08 	lds	r22, 0x087E	; 0x80087e <pxCurrentTCB>
    215a:	70 91 7f 08 	lds	r23, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    215e:	64 5f       	subi	r22, 0xF4	; 244
    2160:	7f 4f       	sbci	r23, 0xFF	; 255
    2162:	0e 94 45 05 	call	0xa8a	; 0xa8a <vListInsertEnd>
    2166:	cc 23       	and	r28, r28
    2168:	11 f0       	breq	.+4      	; 0x216e <vTaskPlaceOnEventListRestricted+0x22>
    216a:	0f ef       	ldi	r16, 0xFF	; 255
    216c:	1f ef       	ldi	r17, 0xFF	; 255
    216e:	6c 2f       	mov	r22, r28
    2170:	c8 01       	movw	r24, r16
    2172:	50 dc       	rcall	.-1888   	; 0x1a14 <prvAddCurrentTaskToDelayedList>
    2174:	cf 91       	pop	r28
    2176:	1f 91       	pop	r17
    2178:	0f 91       	pop	r16
    217a:	08 95       	ret

0000217c <xTaskRemoveFromEventList>:
    217c:	0f 93       	push	r16
    217e:	1f 93       	push	r17
    2180:	cf 93       	push	r28
    2182:	df 93       	push	r29
    2184:	dc 01       	movw	r26, r24
    2186:	15 96       	adiw	r26, 0x05	; 5
    2188:	ed 91       	ld	r30, X+
    218a:	fc 91       	ld	r31, X
    218c:	16 97       	sbiw	r26, 0x06	; 6
    218e:	c6 81       	ldd	r28, Z+6	; 0x06
    2190:	d7 81       	ldd	r29, Z+7	; 0x07
    2192:	8e 01       	movw	r16, r28
    2194:	04 5f       	subi	r16, 0xF4	; 244
    2196:	1f 4f       	sbci	r17, 0xFF	; 255
    2198:	c8 01       	movw	r24, r16
    219a:	0e 94 97 05 	call	0xb2e	; 0xb2e <uxListRemove>
    219e:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <uxSchedulerSuspended>
    21a2:	81 11       	cpse	r24, r1
    21a4:	1c c0       	rjmp	.+56     	; 0x21de <xTaskRemoveFromEventList+0x62>
    21a6:	0a 50       	subi	r16, 0x0A	; 10
    21a8:	11 09       	sbc	r17, r1
    21aa:	c8 01       	movw	r24, r16
    21ac:	0e 94 97 05 	call	0xb2e	; 0xb2e <uxListRemove>
    21b0:	8e 89       	ldd	r24, Y+22	; 0x16
    21b2:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <uxTopReadyPriority>
    21b6:	98 17       	cp	r25, r24
    21b8:	10 f4       	brcc	.+4      	; 0x21be <xTaskRemoveFromEventList+0x42>
    21ba:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <uxTopReadyPriority>
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	9c 01       	movw	r18, r24
    21c2:	22 0f       	add	r18, r18
    21c4:	33 1f       	adc	r19, r19
    21c6:	22 0f       	add	r18, r18
    21c8:	33 1f       	adc	r19, r19
    21ca:	22 0f       	add	r18, r18
    21cc:	33 1f       	adc	r19, r19
    21ce:	82 0f       	add	r24, r18
    21d0:	93 1f       	adc	r25, r19
    21d2:	b8 01       	movw	r22, r16
    21d4:	86 5a       	subi	r24, 0xA6	; 166
    21d6:	97 4f       	sbci	r25, 0xF7	; 247
    21d8:	0e 94 45 05 	call	0xa8a	; 0xa8a <vListInsertEnd>
    21dc:	05 c0       	rjmp	.+10     	; 0x21e8 <xTaskRemoveFromEventList+0x6c>
    21de:	b8 01       	movw	r22, r16
    21e0:	8b e3       	ldi	r24, 0x3B	; 59
    21e2:	98 e0       	ldi	r25, 0x08	; 8
    21e4:	0e 94 45 05 	call	0xa8a	; 0xa8a <vListInsertEnd>
    21e8:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    21ec:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    21f0:	9e 89       	ldd	r25, Y+22	; 0x16
    21f2:	86 89       	ldd	r24, Z+22	; 0x16
    21f4:	89 17       	cp	r24, r25
    21f6:	20 f4       	brcc	.+8      	; 0x2200 <__stack+0x1>
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	80 93 21 08 	sts	0x0821, r24	; 0x800821 <xYieldPending>
    21fe:	01 c0       	rjmp	.+2      	; 0x2202 <__stack+0x3>
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	df 91       	pop	r29
    2204:	cf 91       	pop	r28
    2206:	1f 91       	pop	r17
    2208:	0f 91       	pop	r16
    220a:	08 95       	ret

0000220c <vTaskInternalSetTimeOutState>:
    220c:	20 91 20 08 	lds	r18, 0x0820	; 0x800820 <xNumOfOverflows>
    2210:	fc 01       	movw	r30, r24
    2212:	20 83       	st	Z, r18
    2214:	20 91 25 08 	lds	r18, 0x0825	; 0x800825 <xTickCount>
    2218:	30 91 26 08 	lds	r19, 0x0826	; 0x800826 <xTickCount+0x1>
    221c:	32 83       	std	Z+2, r19	; 0x02
    221e:	21 83       	std	Z+1, r18	; 0x01
    2220:	08 95       	ret

00002222 <xTaskCheckForTimeOut>:
    2222:	cf 93       	push	r28
    2224:	df 93       	push	r29
    2226:	0f b6       	in	r0, 0x3f	; 63
    2228:	f8 94       	cli
    222a:	0f 92       	push	r0
    222c:	20 91 25 08 	lds	r18, 0x0825	; 0x800825 <xTickCount>
    2230:	30 91 26 08 	lds	r19, 0x0826	; 0x800826 <xTickCount+0x1>
    2234:	db 01       	movw	r26, r22
    2236:	4d 91       	ld	r20, X+
    2238:	5c 91       	ld	r21, X
    223a:	4f 3f       	cpi	r20, 0xFF	; 255
    223c:	bf ef       	ldi	r27, 0xFF	; 255
    223e:	5b 07       	cpc	r21, r27
    2240:	e9 f0       	breq	.+58     	; 0x227c <xTaskCheckForTimeOut+0x5a>
    2242:	ec 01       	movw	r28, r24
    2244:	e9 81       	ldd	r30, Y+1	; 0x01
    2246:	fa 81       	ldd	r31, Y+2	; 0x02
    2248:	a0 91 20 08 	lds	r26, 0x0820	; 0x800820 <xNumOfOverflows>
    224c:	b8 81       	ld	r27, Y
    224e:	ba 17       	cp	r27, r26
    2250:	19 f0       	breq	.+6      	; 0x2258 <xTaskCheckForTimeOut+0x36>
    2252:	2e 17       	cp	r18, r30
    2254:	3f 07       	cpc	r19, r31
    2256:	a0 f4       	brcc	.+40     	; 0x2280 <xTaskCheckForTimeOut+0x5e>
    2258:	2e 1b       	sub	r18, r30
    225a:	3f 0b       	sbc	r19, r31
    225c:	24 17       	cp	r18, r20
    225e:	35 07       	cpc	r19, r21
    2260:	40 f4       	brcc	.+16     	; 0x2272 <xTaskCheckForTimeOut+0x50>
    2262:	fb 01       	movw	r30, r22
    2264:	42 1b       	sub	r20, r18
    2266:	53 0b       	sbc	r21, r19
    2268:	51 83       	std	Z+1, r21	; 0x01
    226a:	40 83       	st	Z, r20
    226c:	cf df       	rcall	.-98     	; 0x220c <vTaskInternalSetTimeOutState>
    226e:	80 e0       	ldi	r24, 0x00	; 0
    2270:	08 c0       	rjmp	.+16     	; 0x2282 <xTaskCheckForTimeOut+0x60>
    2272:	fb 01       	movw	r30, r22
    2274:	11 82       	std	Z+1, r1	; 0x01
    2276:	10 82       	st	Z, r1
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	03 c0       	rjmp	.+6      	; 0x2282 <xTaskCheckForTimeOut+0x60>
    227c:	80 e0       	ldi	r24, 0x00	; 0
    227e:	01 c0       	rjmp	.+2      	; 0x2282 <xTaskCheckForTimeOut+0x60>
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	0f 90       	pop	r0
    2284:	0f be       	out	0x3f, r0	; 63
    2286:	df 91       	pop	r29
    2288:	cf 91       	pop	r28
    228a:	08 95       	ret

0000228c <vTaskMissedYield>:
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	80 93 21 08 	sts	0x0821, r24	; 0x800821 <xYieldPending>
    2292:	08 95       	ret

00002294 <xTaskGetCurrentTaskHandle>:
    2294:	80 91 7e 08 	lds	r24, 0x087E	; 0x80087e <pxCurrentTCB>
    2298:	90 91 7f 08 	lds	r25, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    229c:	08 95       	ret

0000229e <xTaskGetSchedulerState>:
    229e:	80 91 23 08 	lds	r24, 0x0823	; 0x800823 <xSchedulerRunning>
    22a2:	88 23       	and	r24, r24
    22a4:	31 f0       	breq	.+12     	; 0x22b2 <xTaskGetSchedulerState+0x14>
    22a6:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <uxSchedulerSuspended>
    22aa:	88 23       	and	r24, r24
    22ac:	21 f0       	breq	.+8      	; 0x22b6 <xTaskGetSchedulerState+0x18>
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	08 95       	ret
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	08 95       	ret
    22b6:	82 e0       	ldi	r24, 0x02	; 2
    22b8:	08 95       	ret

000022ba <xTaskPriorityInherit>:
    22ba:	0f 93       	push	r16
    22bc:	1f 93       	push	r17
    22be:	cf 93       	push	r28
    22c0:	df 93       	push	r29
    22c2:	fc 01       	movw	r30, r24
    22c4:	89 2b       	or	r24, r25
    22c6:	09 f4       	brne	.+2      	; 0x22ca <xTaskPriorityInherit+0x10>
    22c8:	64 c0       	rjmp	.+200    	; 0x2392 <xTaskPriorityInherit+0xd8>
    22ca:	26 89       	ldd	r18, Z+22	; 0x16
    22cc:	a0 91 7e 08 	lds	r26, 0x087E	; 0x80087e <pxCurrentTCB>
    22d0:	b0 91 7f 08 	lds	r27, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    22d4:	56 96       	adiw	r26, 0x16	; 22
    22d6:	8c 91       	ld	r24, X
    22d8:	28 17       	cp	r18, r24
    22da:	08 f0       	brcs	.+2      	; 0x22de <xTaskPriorityInherit+0x24>
    22dc:	4e c0       	rjmp	.+156    	; 0x237a <xTaskPriorityInherit+0xc0>
    22de:	84 85       	ldd	r24, Z+12	; 0x0c
    22e0:	95 85       	ldd	r25, Z+13	; 0x0d
    22e2:	99 23       	and	r25, r25
    22e4:	64 f0       	brlt	.+24     	; 0x22fe <xTaskPriorityInherit+0x44>
    22e6:	a0 91 7e 08 	lds	r26, 0x087E	; 0x80087e <pxCurrentTCB>
    22ea:	b0 91 7f 08 	lds	r27, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    22ee:	56 96       	adiw	r26, 0x16	; 22
    22f0:	3c 91       	ld	r19, X
    22f2:	84 e0       	ldi	r24, 0x04	; 4
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	83 1b       	sub	r24, r19
    22f8:	91 09       	sbc	r25, r1
    22fa:	95 87       	std	Z+13, r25	; 0x0d
    22fc:	84 87       	std	Z+12, r24	; 0x0c
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	c9 01       	movw	r24, r18
    2302:	88 0f       	add	r24, r24
    2304:	99 1f       	adc	r25, r25
    2306:	88 0f       	add	r24, r24
    2308:	99 1f       	adc	r25, r25
    230a:	88 0f       	add	r24, r24
    230c:	99 1f       	adc	r25, r25
    230e:	28 0f       	add	r18, r24
    2310:	39 1f       	adc	r19, r25
    2312:	26 5a       	subi	r18, 0xA6	; 166
    2314:	37 4f       	sbci	r19, 0xF7	; 247
    2316:	82 85       	ldd	r24, Z+10	; 0x0a
    2318:	93 85       	ldd	r25, Z+11	; 0x0b
    231a:	82 17       	cp	r24, r18
    231c:	93 07       	cpc	r25, r19
    231e:	21 f5       	brne	.+72     	; 0x2368 <xTaskPriorityInherit+0xae>
    2320:	8f 01       	movw	r16, r30
    2322:	ef 01       	movw	r28, r30
    2324:	22 96       	adiw	r28, 0x02	; 2
    2326:	ce 01       	movw	r24, r28
    2328:	0e 94 97 05 	call	0xb2e	; 0xb2e <uxListRemove>
    232c:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    2330:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    2334:	86 89       	ldd	r24, Z+22	; 0x16
    2336:	f8 01       	movw	r30, r16
    2338:	86 8b       	std	Z+22, r24	; 0x16
    233a:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <uxTopReadyPriority>
    233e:	98 17       	cp	r25, r24
    2340:	10 f4       	brcc	.+4      	; 0x2346 <xTaskPriorityInherit+0x8c>
    2342:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <uxTopReadyPriority>
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	9c 01       	movw	r18, r24
    234a:	22 0f       	add	r18, r18
    234c:	33 1f       	adc	r19, r19
    234e:	22 0f       	add	r18, r18
    2350:	33 1f       	adc	r19, r19
    2352:	22 0f       	add	r18, r18
    2354:	33 1f       	adc	r19, r19
    2356:	82 0f       	add	r24, r18
    2358:	93 1f       	adc	r25, r19
    235a:	be 01       	movw	r22, r28
    235c:	86 5a       	subi	r24, 0xA6	; 166
    235e:	97 4f       	sbci	r25, 0xF7	; 247
    2360:	0e 94 45 05 	call	0xa8a	; 0xa8a <vListInsertEnd>
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	16 c0       	rjmp	.+44     	; 0x2394 <xTaskPriorityInherit+0xda>
    2368:	a0 91 7e 08 	lds	r26, 0x087E	; 0x80087e <pxCurrentTCB>
    236c:	b0 91 7f 08 	lds	r27, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    2370:	56 96       	adiw	r26, 0x16	; 22
    2372:	8c 91       	ld	r24, X
    2374:	86 8b       	std	Z+22, r24	; 0x16
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	0d c0       	rjmp	.+26     	; 0x2394 <xTaskPriorityInherit+0xda>
    237a:	a0 91 7e 08 	lds	r26, 0x087E	; 0x80087e <pxCurrentTCB>
    237e:	b0 91 7f 08 	lds	r27, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	23 a1       	ldd	r18, Z+35	; 0x23
    2386:	56 96       	adiw	r26, 0x16	; 22
    2388:	9c 91       	ld	r25, X
    238a:	29 17       	cp	r18, r25
    238c:	18 f0       	brcs	.+6      	; 0x2394 <xTaskPriorityInherit+0xda>
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	01 c0       	rjmp	.+2      	; 0x2394 <xTaskPriorityInherit+0xda>
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	df 91       	pop	r29
    2396:	cf 91       	pop	r28
    2398:	1f 91       	pop	r17
    239a:	0f 91       	pop	r16
    239c:	08 95       	ret

0000239e <xTaskPriorityDisinherit>:
    239e:	0f 93       	push	r16
    23a0:	1f 93       	push	r17
    23a2:	cf 93       	push	r28
    23a4:	df 93       	push	r29
    23a6:	fc 01       	movw	r30, r24
    23a8:	89 2b       	or	r24, r25
    23aa:	79 f1       	breq	.+94     	; 0x240a <xTaskPriorityDisinherit+0x6c>
    23ac:	84 a1       	ldd	r24, Z+36	; 0x24
    23ae:	81 50       	subi	r24, 0x01	; 1
    23b0:	84 a3       	std	Z+36, r24	; 0x24
    23b2:	26 89       	ldd	r18, Z+22	; 0x16
    23b4:	93 a1       	ldd	r25, Z+35	; 0x23
    23b6:	29 17       	cp	r18, r25
    23b8:	51 f1       	breq	.+84     	; 0x240e <xTaskPriorityDisinherit+0x70>
    23ba:	81 11       	cpse	r24, r1
    23bc:	2a c0       	rjmp	.+84     	; 0x2412 <xTaskPriorityDisinherit+0x74>
    23be:	ef 01       	movw	r28, r30
    23c0:	8f 01       	movw	r16, r30
    23c2:	0e 5f       	subi	r16, 0xFE	; 254
    23c4:	1f 4f       	sbci	r17, 0xFF	; 255
    23c6:	c8 01       	movw	r24, r16
    23c8:	0e 94 97 05 	call	0xb2e	; 0xb2e <uxListRemove>
    23cc:	8b a1       	ldd	r24, Y+35	; 0x23
    23ce:	8e 8b       	std	Y+22, r24	; 0x16
    23d0:	24 e0       	ldi	r18, 0x04	; 4
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	28 1b       	sub	r18, r24
    23d6:	31 09       	sbc	r19, r1
    23d8:	3d 87       	std	Y+13, r19	; 0x0d
    23da:	2c 87       	std	Y+12, r18	; 0x0c
    23dc:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <uxTopReadyPriority>
    23e0:	98 17       	cp	r25, r24
    23e2:	10 f4       	brcc	.+4      	; 0x23e8 <xTaskPriorityDisinherit+0x4a>
    23e4:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <uxTopReadyPriority>
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	9c 01       	movw	r18, r24
    23ec:	22 0f       	add	r18, r18
    23ee:	33 1f       	adc	r19, r19
    23f0:	22 0f       	add	r18, r18
    23f2:	33 1f       	adc	r19, r19
    23f4:	22 0f       	add	r18, r18
    23f6:	33 1f       	adc	r19, r19
    23f8:	82 0f       	add	r24, r18
    23fa:	93 1f       	adc	r25, r19
    23fc:	b8 01       	movw	r22, r16
    23fe:	86 5a       	subi	r24, 0xA6	; 166
    2400:	97 4f       	sbci	r25, 0xF7	; 247
    2402:	0e 94 45 05 	call	0xa8a	; 0xa8a <vListInsertEnd>
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	05 c0       	rjmp	.+10     	; 0x2414 <xTaskPriorityDisinherit+0x76>
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	03 c0       	rjmp	.+6      	; 0x2414 <xTaskPriorityDisinherit+0x76>
    240e:	80 e0       	ldi	r24, 0x00	; 0
    2410:	01 c0       	rjmp	.+2      	; 0x2414 <xTaskPriorityDisinherit+0x76>
    2412:	80 e0       	ldi	r24, 0x00	; 0
    2414:	df 91       	pop	r29
    2416:	cf 91       	pop	r28
    2418:	1f 91       	pop	r17
    241a:	0f 91       	pop	r16
    241c:	08 95       	ret

0000241e <vTaskPriorityDisinheritAfterTimeout>:
    241e:	0f 93       	push	r16
    2420:	1f 93       	push	r17
    2422:	cf 93       	push	r28
    2424:	df 93       	push	r29
    2426:	fc 01       	movw	r30, r24
    2428:	89 2b       	or	r24, r25
    242a:	09 f4       	brne	.+2      	; 0x242e <vTaskPriorityDisinheritAfterTimeout+0x10>
    242c:	43 c0       	rjmp	.+134    	; 0x24b4 <vTaskPriorityDisinheritAfterTimeout+0x96>
    242e:	93 a1       	ldd	r25, Z+35	; 0x23
    2430:	96 17       	cp	r25, r22
    2432:	08 f4       	brcc	.+2      	; 0x2436 <vTaskPriorityDisinheritAfterTimeout+0x18>
    2434:	96 2f       	mov	r25, r22
    2436:	86 89       	ldd	r24, Z+22	; 0x16
    2438:	89 17       	cp	r24, r25
    243a:	e1 f1       	breq	.+120    	; 0x24b4 <vTaskPriorityDisinheritAfterTimeout+0x96>
    243c:	24 a1       	ldd	r18, Z+36	; 0x24
    243e:	21 30       	cpi	r18, 0x01	; 1
    2440:	c9 f5       	brne	.+114    	; 0x24b4 <vTaskPriorityDisinheritAfterTimeout+0x96>
    2442:	96 8b       	std	Z+22, r25	; 0x16
    2444:	24 85       	ldd	r18, Z+12	; 0x0c
    2446:	35 85       	ldd	r19, Z+13	; 0x0d
    2448:	33 23       	and	r19, r19
    244a:	34 f0       	brlt	.+12     	; 0x2458 <vTaskPriorityDisinheritAfterTimeout+0x3a>
    244c:	24 e0       	ldi	r18, 0x04	; 4
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	29 1b       	sub	r18, r25
    2452:	31 09       	sbc	r19, r1
    2454:	35 87       	std	Z+13, r19	; 0x0d
    2456:	24 87       	std	Z+12, r18	; 0x0c
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	9c 01       	movw	r18, r24
    245c:	22 0f       	add	r18, r18
    245e:	33 1f       	adc	r19, r19
    2460:	22 0f       	add	r18, r18
    2462:	33 1f       	adc	r19, r19
    2464:	22 0f       	add	r18, r18
    2466:	33 1f       	adc	r19, r19
    2468:	82 0f       	add	r24, r18
    246a:	93 1f       	adc	r25, r19
    246c:	86 5a       	subi	r24, 0xA6	; 166
    246e:	97 4f       	sbci	r25, 0xF7	; 247
    2470:	22 85       	ldd	r18, Z+10	; 0x0a
    2472:	33 85       	ldd	r19, Z+11	; 0x0b
    2474:	28 17       	cp	r18, r24
    2476:	39 07       	cpc	r19, r25
    2478:	e9 f4       	brne	.+58     	; 0x24b4 <vTaskPriorityDisinheritAfterTimeout+0x96>
    247a:	ef 01       	movw	r28, r30
    247c:	8f 01       	movw	r16, r30
    247e:	0e 5f       	subi	r16, 0xFE	; 254
    2480:	1f 4f       	sbci	r17, 0xFF	; 255
    2482:	c8 01       	movw	r24, r16
    2484:	0e 94 97 05 	call	0xb2e	; 0xb2e <uxListRemove>
    2488:	8e 89       	ldd	r24, Y+22	; 0x16
    248a:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <uxTopReadyPriority>
    248e:	98 17       	cp	r25, r24
    2490:	10 f4       	brcc	.+4      	; 0x2496 <vTaskPriorityDisinheritAfterTimeout+0x78>
    2492:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <uxTopReadyPriority>
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	9c 01       	movw	r18, r24
    249a:	22 0f       	add	r18, r18
    249c:	33 1f       	adc	r19, r19
    249e:	22 0f       	add	r18, r18
    24a0:	33 1f       	adc	r19, r19
    24a2:	22 0f       	add	r18, r18
    24a4:	33 1f       	adc	r19, r19
    24a6:	82 0f       	add	r24, r18
    24a8:	93 1f       	adc	r25, r19
    24aa:	b8 01       	movw	r22, r16
    24ac:	86 5a       	subi	r24, 0xA6	; 166
    24ae:	97 4f       	sbci	r25, 0xF7	; 247
    24b0:	0e 94 45 05 	call	0xa8a	; 0xa8a <vListInsertEnd>
    24b4:	df 91       	pop	r29
    24b6:	cf 91       	pop	r28
    24b8:	1f 91       	pop	r17
    24ba:	0f 91       	pop	r16
    24bc:	08 95       	ret

000024be <pvTaskIncrementMutexHeldCount>:
    24be:	80 91 7e 08 	lds	r24, 0x087E	; 0x80087e <pxCurrentTCB>
    24c2:	90 91 7f 08 	lds	r25, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    24c6:	89 2b       	or	r24, r25
    24c8:	39 f0       	breq	.+14     	; 0x24d8 <pvTaskIncrementMutexHeldCount+0x1a>
    24ca:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    24ce:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    24d2:	84 a1       	ldd	r24, Z+36	; 0x24
    24d4:	8f 5f       	subi	r24, 0xFF	; 255
    24d6:	84 a3       	std	Z+36, r24	; 0x24
    24d8:	80 91 7e 08 	lds	r24, 0x087E	; 0x80087e <pxCurrentTCB>
    24dc:	90 91 7f 08 	lds	r25, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    24e0:	08 95       	ret

000024e2 <xTaskNotifyWait>:
    24e2:	4f 92       	push	r4
    24e4:	5f 92       	push	r5
    24e6:	6f 92       	push	r6
    24e8:	7f 92       	push	r7
    24ea:	8f 92       	push	r8
    24ec:	9f 92       	push	r9
    24ee:	af 92       	push	r10
    24f0:	bf 92       	push	r11
    24f2:	ef 92       	push	r14
    24f4:	ff 92       	push	r15
    24f6:	0f 93       	push	r16
    24f8:	1f 93       	push	r17
    24fa:	49 01       	movw	r8, r18
    24fc:	5a 01       	movw	r10, r20
    24fe:	0f b6       	in	r0, 0x3f	; 63
    2500:	f8 94       	cli
    2502:	0f 92       	push	r0
    2504:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    2508:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    250c:	23 a5       	ldd	r18, Z+43	; 0x2b
    250e:	22 30       	cpi	r18, 0x02	; 2
    2510:	21 f1       	breq	.+72     	; 0x255a <xTaskNotifyWait+0x78>
    2512:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    2516:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    251a:	47 a0       	ldd	r4, Z+39	; 0x27
    251c:	50 a4       	ldd	r5, Z+40	; 0x28
    251e:	61 a4       	ldd	r6, Z+41	; 0x29
    2520:	72 a4       	ldd	r7, Z+42	; 0x2a
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	80 95       	com	r24
    2528:	90 95       	com	r25
    252a:	a0 95       	com	r26
    252c:	b0 95       	com	r27
    252e:	84 21       	and	r24, r4
    2530:	95 21       	and	r25, r5
    2532:	a6 21       	and	r26, r6
    2534:	b7 21       	and	r27, r7
    2536:	87 a3       	std	Z+39, r24	; 0x27
    2538:	90 a7       	std	Z+40, r25	; 0x28
    253a:	a1 a7       	std	Z+41, r26	; 0x29
    253c:	b2 a7       	std	Z+42, r27	; 0x2a
    253e:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    2542:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	83 a7       	std	Z+43, r24	; 0x2b
    254a:	e1 14       	cp	r14, r1
    254c:	f1 04       	cpc	r15, r1
    254e:	29 f0       	breq	.+10     	; 0x255a <xTaskNotifyWait+0x78>
    2550:	61 e0       	ldi	r22, 0x01	; 1
    2552:	c7 01       	movw	r24, r14
    2554:	5f da       	rcall	.-2882   	; 0x1a14 <prvAddCurrentTaskToDelayedList>
    2556:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <vPortYield>
    255a:	0f 90       	pop	r0
    255c:	0f be       	out	0x3f, r0	; 63
    255e:	0f b6       	in	r0, 0x3f	; 63
    2560:	f8 94       	cli
    2562:	0f 92       	push	r0
    2564:	01 15       	cp	r16, r1
    2566:	11 05       	cpc	r17, r1
    2568:	69 f0       	breq	.+26     	; 0x2584 <xTaskNotifyWait+0xa2>
    256a:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    256e:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    2572:	87 a1       	ldd	r24, Z+39	; 0x27
    2574:	90 a5       	ldd	r25, Z+40	; 0x28
    2576:	a1 a5       	ldd	r26, Z+41	; 0x29
    2578:	b2 a5       	ldd	r27, Z+42	; 0x2a
    257a:	f8 01       	movw	r30, r16
    257c:	80 83       	st	Z, r24
    257e:	91 83       	std	Z+1, r25	; 0x01
    2580:	a2 83       	std	Z+2, r26	; 0x02
    2582:	b3 83       	std	Z+3, r27	; 0x03
    2584:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    2588:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    258c:	83 a5       	ldd	r24, Z+43	; 0x2b
    258e:	82 30       	cpi	r24, 0x02	; 2
    2590:	b1 f4       	brne	.+44     	; 0x25be <xTaskNotifyWait+0xdc>
    2592:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    2596:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    259a:	87 a1       	ldd	r24, Z+39	; 0x27
    259c:	90 a5       	ldd	r25, Z+40	; 0x28
    259e:	a1 a5       	ldd	r26, Z+41	; 0x29
    25a0:	b2 a5       	ldd	r27, Z+42	; 0x2a
    25a2:	80 94       	com	r8
    25a4:	90 94       	com	r9
    25a6:	a0 94       	com	r10
    25a8:	b0 94       	com	r11
    25aa:	88 22       	and	r8, r24
    25ac:	99 22       	and	r9, r25
    25ae:	aa 22       	and	r10, r26
    25b0:	bb 22       	and	r11, r27
    25b2:	87 a2       	std	Z+39, r8	; 0x27
    25b4:	90 a6       	std	Z+40, r9	; 0x28
    25b6:	a1 a6       	std	Z+41, r10	; 0x29
    25b8:	b2 a6       	std	Z+42, r11	; 0x2a
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	01 c0       	rjmp	.+2      	; 0x25c0 <xTaskNotifyWait+0xde>
    25be:	80 e0       	ldi	r24, 0x00	; 0
    25c0:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    25c4:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    25c8:	13 a6       	std	Z+43, r1	; 0x2b
    25ca:	0f 90       	pop	r0
    25cc:	0f be       	out	0x3f, r0	; 63
    25ce:	1f 91       	pop	r17
    25d0:	0f 91       	pop	r16
    25d2:	ff 90       	pop	r15
    25d4:	ef 90       	pop	r14
    25d6:	bf 90       	pop	r11
    25d8:	af 90       	pop	r10
    25da:	9f 90       	pop	r9
    25dc:	8f 90       	pop	r8
    25de:	7f 90       	pop	r7
    25e0:	6f 90       	pop	r6
    25e2:	5f 90       	pop	r5
    25e4:	4f 90       	pop	r4
    25e6:	08 95       	ret

000025e8 <xTaskGenericNotify>:
    25e8:	0f 93       	push	r16
    25ea:	1f 93       	push	r17
    25ec:	cf 93       	push	r28
    25ee:	df 93       	push	r29
    25f0:	fc 01       	movw	r30, r24
    25f2:	0f b6       	in	r0, 0x3f	; 63
    25f4:	f8 94       	cli
    25f6:	0f 92       	push	r0
    25f8:	01 15       	cp	r16, r1
    25fa:	11 05       	cpc	r17, r1
    25fc:	49 f0       	breq	.+18     	; 0x2610 <xTaskGenericNotify+0x28>
    25fe:	87 a1       	ldd	r24, Z+39	; 0x27
    2600:	90 a5       	ldd	r25, Z+40	; 0x28
    2602:	a1 a5       	ldd	r26, Z+41	; 0x29
    2604:	b2 a5       	ldd	r27, Z+42	; 0x2a
    2606:	e8 01       	movw	r28, r16
    2608:	88 83       	st	Y, r24
    260a:	99 83       	std	Y+1, r25	; 0x01
    260c:	aa 83       	std	Y+2, r26	; 0x02
    260e:	bb 83       	std	Y+3, r27	; 0x03
    2610:	83 a5       	ldd	r24, Z+43	; 0x2b
    2612:	92 e0       	ldi	r25, 0x02	; 2
    2614:	93 a7       	std	Z+43, r25	; 0x2b
    2616:	22 30       	cpi	r18, 0x02	; 2
    2618:	b1 f0       	breq	.+44     	; 0x2646 <xTaskGenericNotify+0x5e>
    261a:	18 f4       	brcc	.+6      	; 0x2622 <xTaskGenericNotify+0x3a>
    261c:	21 30       	cpi	r18, 0x01	; 1
    261e:	31 f0       	breq	.+12     	; 0x262c <xTaskGenericNotify+0x44>
    2620:	2a c0       	rjmp	.+84     	; 0x2676 <xTaskGenericNotify+0x8e>
    2622:	23 30       	cpi	r18, 0x03	; 3
    2624:	e9 f0       	breq	.+58     	; 0x2660 <xTaskGenericNotify+0x78>
    2626:	24 30       	cpi	r18, 0x04	; 4
    2628:	01 f1       	breq	.+64     	; 0x266a <xTaskGenericNotify+0x82>
    262a:	25 c0       	rjmp	.+74     	; 0x2676 <xTaskGenericNotify+0x8e>
    262c:	07 a1       	ldd	r16, Z+39	; 0x27
    262e:	10 a5       	ldd	r17, Z+40	; 0x28
    2630:	21 a5       	ldd	r18, Z+41	; 0x29
    2632:	32 a5       	ldd	r19, Z+42	; 0x2a
    2634:	40 2b       	or	r20, r16
    2636:	51 2b       	or	r21, r17
    2638:	62 2b       	or	r22, r18
    263a:	73 2b       	or	r23, r19
    263c:	47 a3       	std	Z+39, r20	; 0x27
    263e:	50 a7       	std	Z+40, r21	; 0x28
    2640:	61 a7       	std	Z+41, r22	; 0x29
    2642:	72 a7       	std	Z+42, r23	; 0x2a
    2644:	18 c0       	rjmp	.+48     	; 0x2676 <xTaskGenericNotify+0x8e>
    2646:	47 a1       	ldd	r20, Z+39	; 0x27
    2648:	50 a5       	ldd	r21, Z+40	; 0x28
    264a:	61 a5       	ldd	r22, Z+41	; 0x29
    264c:	72 a5       	ldd	r23, Z+42	; 0x2a
    264e:	4f 5f       	subi	r20, 0xFF	; 255
    2650:	5f 4f       	sbci	r21, 0xFF	; 255
    2652:	6f 4f       	sbci	r22, 0xFF	; 255
    2654:	7f 4f       	sbci	r23, 0xFF	; 255
    2656:	47 a3       	std	Z+39, r20	; 0x27
    2658:	50 a7       	std	Z+40, r21	; 0x28
    265a:	61 a7       	std	Z+41, r22	; 0x29
    265c:	72 a7       	std	Z+42, r23	; 0x2a
    265e:	0b c0       	rjmp	.+22     	; 0x2676 <xTaskGenericNotify+0x8e>
    2660:	47 a3       	std	Z+39, r20	; 0x27
    2662:	50 a7       	std	Z+40, r21	; 0x28
    2664:	61 a7       	std	Z+41, r22	; 0x29
    2666:	72 a7       	std	Z+42, r23	; 0x2a
    2668:	06 c0       	rjmp	.+12     	; 0x2676 <xTaskGenericNotify+0x8e>
    266a:	82 30       	cpi	r24, 0x02	; 2
    266c:	79 f1       	breq	.+94     	; 0x26cc <xTaskGenericNotify+0xe4>
    266e:	47 a3       	std	Z+39, r20	; 0x27
    2670:	50 a7       	std	Z+40, r21	; 0x28
    2672:	61 a7       	std	Z+41, r22	; 0x29
    2674:	72 a7       	std	Z+42, r23	; 0x2a
    2676:	81 30       	cpi	r24, 0x01	; 1
    2678:	59 f5       	brne	.+86     	; 0x26d0 <xTaskGenericNotify+0xe8>
    267a:	ef 01       	movw	r28, r30
    267c:	8f 01       	movw	r16, r30
    267e:	0e 5f       	subi	r16, 0xFE	; 254
    2680:	1f 4f       	sbci	r17, 0xFF	; 255
    2682:	c8 01       	movw	r24, r16
    2684:	0e 94 97 05 	call	0xb2e	; 0xb2e <uxListRemove>
    2688:	8e 89       	ldd	r24, Y+22	; 0x16
    268a:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <uxTopReadyPriority>
    268e:	98 17       	cp	r25, r24
    2690:	10 f4       	brcc	.+4      	; 0x2696 <xTaskGenericNotify+0xae>
    2692:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <uxTopReadyPriority>
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	9c 01       	movw	r18, r24
    269a:	22 0f       	add	r18, r18
    269c:	33 1f       	adc	r19, r19
    269e:	22 0f       	add	r18, r18
    26a0:	33 1f       	adc	r19, r19
    26a2:	22 0f       	add	r18, r18
    26a4:	33 1f       	adc	r19, r19
    26a6:	82 0f       	add	r24, r18
    26a8:	93 1f       	adc	r25, r19
    26aa:	b8 01       	movw	r22, r16
    26ac:	86 5a       	subi	r24, 0xA6	; 166
    26ae:	97 4f       	sbci	r25, 0xF7	; 247
    26b0:	0e 94 45 05 	call	0xa8a	; 0xa8a <vListInsertEnd>
    26b4:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    26b8:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    26bc:	9e 89       	ldd	r25, Y+22	; 0x16
    26be:	86 89       	ldd	r24, Z+22	; 0x16
    26c0:	89 17       	cp	r24, r25
    26c2:	40 f4       	brcc	.+16     	; 0x26d4 <xTaskGenericNotify+0xec>
    26c4:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <vPortYield>
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	05 c0       	rjmp	.+10     	; 0x26d6 <xTaskGenericNotify+0xee>
    26cc:	80 e0       	ldi	r24, 0x00	; 0
    26ce:	03 c0       	rjmp	.+6      	; 0x26d6 <xTaskGenericNotify+0xee>
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	01 c0       	rjmp	.+2      	; 0x26d6 <xTaskGenericNotify+0xee>
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	0f 90       	pop	r0
    26d8:	0f be       	out	0x3f, r0	; 63
    26da:	df 91       	pop	r29
    26dc:	cf 91       	pop	r28
    26de:	1f 91       	pop	r17
    26e0:	0f 91       	pop	r16
    26e2:	08 95       	ret

000026e4 <xTaskGenericNotifyFromISR>:
    26e4:	ef 92       	push	r14
    26e6:	ff 92       	push	r15
    26e8:	0f 93       	push	r16
    26ea:	1f 93       	push	r17
    26ec:	cf 93       	push	r28
    26ee:	df 93       	push	r29
    26f0:	fc 01       	movw	r30, r24
    26f2:	01 15       	cp	r16, r1
    26f4:	11 05       	cpc	r17, r1
    26f6:	49 f0       	breq	.+18     	; 0x270a <xTaskGenericNotifyFromISR+0x26>
    26f8:	87 a1       	ldd	r24, Z+39	; 0x27
    26fa:	90 a5       	ldd	r25, Z+40	; 0x28
    26fc:	a1 a5       	ldd	r26, Z+41	; 0x29
    26fe:	b2 a5       	ldd	r27, Z+42	; 0x2a
    2700:	e8 01       	movw	r28, r16
    2702:	88 83       	st	Y, r24
    2704:	99 83       	std	Y+1, r25	; 0x01
    2706:	aa 83       	std	Y+2, r26	; 0x02
    2708:	bb 83       	std	Y+3, r27	; 0x03
    270a:	83 a5       	ldd	r24, Z+43	; 0x2b
    270c:	92 e0       	ldi	r25, 0x02	; 2
    270e:	93 a7       	std	Z+43, r25	; 0x2b
    2710:	22 30       	cpi	r18, 0x02	; 2
    2712:	b1 f0       	breq	.+44     	; 0x2740 <xTaskGenericNotifyFromISR+0x5c>
    2714:	18 f4       	brcc	.+6      	; 0x271c <xTaskGenericNotifyFromISR+0x38>
    2716:	21 30       	cpi	r18, 0x01	; 1
    2718:	31 f0       	breq	.+12     	; 0x2726 <xTaskGenericNotifyFromISR+0x42>
    271a:	2b c0       	rjmp	.+86     	; 0x2772 <xTaskGenericNotifyFromISR+0x8e>
    271c:	23 30       	cpi	r18, 0x03	; 3
    271e:	e9 f0       	breq	.+58     	; 0x275a <xTaskGenericNotifyFromISR+0x76>
    2720:	24 30       	cpi	r18, 0x04	; 4
    2722:	01 f1       	breq	.+64     	; 0x2764 <xTaskGenericNotifyFromISR+0x80>
    2724:	26 c0       	rjmp	.+76     	; 0x2772 <xTaskGenericNotifyFromISR+0x8e>
    2726:	07 a1       	ldd	r16, Z+39	; 0x27
    2728:	10 a5       	ldd	r17, Z+40	; 0x28
    272a:	21 a5       	ldd	r18, Z+41	; 0x29
    272c:	32 a5       	ldd	r19, Z+42	; 0x2a
    272e:	40 2b       	or	r20, r16
    2730:	51 2b       	or	r21, r17
    2732:	62 2b       	or	r22, r18
    2734:	73 2b       	or	r23, r19
    2736:	47 a3       	std	Z+39, r20	; 0x27
    2738:	50 a7       	std	Z+40, r21	; 0x28
    273a:	61 a7       	std	Z+41, r22	; 0x29
    273c:	72 a7       	std	Z+42, r23	; 0x2a
    273e:	19 c0       	rjmp	.+50     	; 0x2772 <xTaskGenericNotifyFromISR+0x8e>
    2740:	47 a1       	ldd	r20, Z+39	; 0x27
    2742:	50 a5       	ldd	r21, Z+40	; 0x28
    2744:	61 a5       	ldd	r22, Z+41	; 0x29
    2746:	72 a5       	ldd	r23, Z+42	; 0x2a
    2748:	4f 5f       	subi	r20, 0xFF	; 255
    274a:	5f 4f       	sbci	r21, 0xFF	; 255
    274c:	6f 4f       	sbci	r22, 0xFF	; 255
    274e:	7f 4f       	sbci	r23, 0xFF	; 255
    2750:	47 a3       	std	Z+39, r20	; 0x27
    2752:	50 a7       	std	Z+40, r21	; 0x28
    2754:	61 a7       	std	Z+41, r22	; 0x29
    2756:	72 a7       	std	Z+42, r23	; 0x2a
    2758:	0c c0       	rjmp	.+24     	; 0x2772 <xTaskGenericNotifyFromISR+0x8e>
    275a:	47 a3       	std	Z+39, r20	; 0x27
    275c:	50 a7       	std	Z+40, r21	; 0x28
    275e:	61 a7       	std	Z+41, r22	; 0x29
    2760:	72 a7       	std	Z+42, r23	; 0x2a
    2762:	07 c0       	rjmp	.+14     	; 0x2772 <xTaskGenericNotifyFromISR+0x8e>
    2764:	82 30       	cpi	r24, 0x02	; 2
    2766:	09 f4       	brne	.+2      	; 0x276a <xTaskGenericNotifyFromISR+0x86>
    2768:	41 c0       	rjmp	.+130    	; 0x27ec <xTaskGenericNotifyFromISR+0x108>
    276a:	47 a3       	std	Z+39, r20	; 0x27
    276c:	50 a7       	std	Z+40, r21	; 0x28
    276e:	61 a7       	std	Z+41, r22	; 0x29
    2770:	72 a7       	std	Z+42, r23	; 0x2a
    2772:	81 30       	cpi	r24, 0x01	; 1
    2774:	e9 f5       	brne	.+122    	; 0x27f0 <xTaskGenericNotifyFromISR+0x10c>
    2776:	ef 01       	movw	r28, r30
    2778:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <uxSchedulerSuspended>
    277c:	81 11       	cpse	r24, r1
    277e:	1d c0       	rjmp	.+58     	; 0x27ba <xTaskGenericNotifyFromISR+0xd6>
    2780:	8f 01       	movw	r16, r30
    2782:	0e 5f       	subi	r16, 0xFE	; 254
    2784:	1f 4f       	sbci	r17, 0xFF	; 255
    2786:	c8 01       	movw	r24, r16
    2788:	0e 94 97 05 	call	0xb2e	; 0xb2e <uxListRemove>
    278c:	8e 89       	ldd	r24, Y+22	; 0x16
    278e:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <uxTopReadyPriority>
    2792:	98 17       	cp	r25, r24
    2794:	10 f4       	brcc	.+4      	; 0x279a <xTaskGenericNotifyFromISR+0xb6>
    2796:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <uxTopReadyPriority>
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	9c 01       	movw	r18, r24
    279e:	22 0f       	add	r18, r18
    27a0:	33 1f       	adc	r19, r19
    27a2:	22 0f       	add	r18, r18
    27a4:	33 1f       	adc	r19, r19
    27a6:	22 0f       	add	r18, r18
    27a8:	33 1f       	adc	r19, r19
    27aa:	82 0f       	add	r24, r18
    27ac:	93 1f       	adc	r25, r19
    27ae:	b8 01       	movw	r22, r16
    27b0:	86 5a       	subi	r24, 0xA6	; 166
    27b2:	97 4f       	sbci	r25, 0xF7	; 247
    27b4:	0e 94 45 05 	call	0xa8a	; 0xa8a <vListInsertEnd>
    27b8:	07 c0       	rjmp	.+14     	; 0x27c8 <xTaskGenericNotifyFromISR+0xe4>
    27ba:	bf 01       	movw	r22, r30
    27bc:	64 5f       	subi	r22, 0xF4	; 244
    27be:	7f 4f       	sbci	r23, 0xFF	; 255
    27c0:	8b e3       	ldi	r24, 0x3B	; 59
    27c2:	98 e0       	ldi	r25, 0x08	; 8
    27c4:	0e 94 45 05 	call	0xa8a	; 0xa8a <vListInsertEnd>
    27c8:	e0 91 7e 08 	lds	r30, 0x087E	; 0x80087e <pxCurrentTCB>
    27cc:	f0 91 7f 08 	lds	r31, 0x087F	; 0x80087f <pxCurrentTCB+0x1>
    27d0:	9e 89       	ldd	r25, Y+22	; 0x16
    27d2:	86 89       	ldd	r24, Z+22	; 0x16
    27d4:	89 17       	cp	r24, r25
    27d6:	70 f4       	brcc	.+28     	; 0x27f4 <xTaskGenericNotifyFromISR+0x110>
    27d8:	e1 14       	cp	r14, r1
    27da:	f1 04       	cpc	r15, r1
    27dc:	19 f0       	breq	.+6      	; 0x27e4 <xTaskGenericNotifyFromISR+0x100>
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	f7 01       	movw	r30, r14
    27e2:	80 83       	st	Z, r24
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	80 93 21 08 	sts	0x0821, r24	; 0x800821 <xYieldPending>
    27ea:	05 c0       	rjmp	.+10     	; 0x27f6 <xTaskGenericNotifyFromISR+0x112>
    27ec:	80 e0       	ldi	r24, 0x00	; 0
    27ee:	03 c0       	rjmp	.+6      	; 0x27f6 <xTaskGenericNotifyFromISR+0x112>
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	01 c0       	rjmp	.+2      	; 0x27f6 <xTaskGenericNotifyFromISR+0x112>
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	df 91       	pop	r29
    27f8:	cf 91       	pop	r28
    27fa:	1f 91       	pop	r17
    27fc:	0f 91       	pop	r16
    27fe:	ff 90       	pop	r15
    2800:	ef 90       	pop	r14
    2802:	08 95       	ret

00002804 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2804:	00 97       	sbiw	r24, 0x00	; 0
    2806:	21 f4       	brne	.+8      	; 0x2810 <xTaskNotifyStateClear+0xc>
    2808:	80 91 7e 08 	lds	r24, 0x087E	; 0x80087e <pxCurrentTCB>
    280c:	90 91 7f 08 	lds	r25, 0x087F	; 0x80087f <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2810:	0f b6       	in	r0, 0x3f	; 63
    2812:	f8 94       	cli
    2814:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    2816:	fc 01       	movw	r30, r24
    2818:	23 a5       	ldd	r18, Z+43	; 0x2b
    281a:	22 30       	cpi	r18, 0x02	; 2
    281c:	19 f4       	brne	.+6      	; 0x2824 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    281e:	13 a6       	std	Z+43, r1	; 0x2b
                xReturn = pdPASS;
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	01 c0       	rjmp	.+2      	; 0x2826 <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    2824:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2826:	0f 90       	pop	r0
    2828:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    282a:	08 95       	ret

0000282c <prvInsertTimerInActiveList>:
    282c:	fc 01       	movw	r30, r24
    282e:	73 83       	std	Z+3, r23	; 0x03
    2830:	62 83       	std	Z+2, r22	; 0x02
    2832:	91 87       	std	Z+9, r25	; 0x09
    2834:	80 87       	std	Z+8, r24	; 0x08
    2836:	46 17       	cp	r20, r22
    2838:	57 07       	cpc	r21, r23
    283a:	90 f0       	brcs	.+36     	; 0x2860 <prvInsertTimerInActiveList+0x34>
    283c:	42 1b       	sub	r20, r18
    283e:	53 0b       	sbc	r21, r19
    2840:	84 85       	ldd	r24, Z+12	; 0x0c
    2842:	95 85       	ldd	r25, Z+13	; 0x0d
    2844:	48 17       	cp	r20, r24
    2846:	59 07       	cpc	r21, r25
    2848:	e0 f4       	brcc	.+56     	; 0x2882 <prvInsertTimerInActiveList+0x56>
    284a:	bf 01       	movw	r22, r30
    284c:	6e 5f       	subi	r22, 0xFE	; 254
    284e:	7f 4f       	sbci	r23, 0xFF	; 255
    2850:	80 91 86 08 	lds	r24, 0x0886	; 0x800886 <pxOverflowTimerList>
    2854:	90 91 87 08 	lds	r25, 0x0887	; 0x800887 <pxOverflowTimerList+0x1>
    2858:	0e 94 66 05 	call	0xacc	; 0xacc <vListInsert>
    285c:	80 e0       	ldi	r24, 0x00	; 0
    285e:	08 95       	ret
    2860:	42 17       	cp	r20, r18
    2862:	53 07       	cpc	r21, r19
    2864:	18 f4       	brcc	.+6      	; 0x286c <prvInsertTimerInActiveList+0x40>
    2866:	62 17       	cp	r22, r18
    2868:	73 07       	cpc	r23, r19
    286a:	68 f4       	brcc	.+26     	; 0x2886 <prvInsertTimerInActiveList+0x5a>
    286c:	bf 01       	movw	r22, r30
    286e:	6e 5f       	subi	r22, 0xFE	; 254
    2870:	7f 4f       	sbci	r23, 0xFF	; 255
    2872:	80 91 88 08 	lds	r24, 0x0888	; 0x800888 <pxCurrentTimerList>
    2876:	90 91 89 08 	lds	r25, 0x0889	; 0x800889 <pxCurrentTimerList+0x1>
    287a:	0e 94 66 05 	call	0xacc	; 0xacc <vListInsert>
    287e:	80 e0       	ldi	r24, 0x00	; 0
    2880:	08 95       	ret
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	08 95       	ret
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	08 95       	ret

0000288a <prvCheckForValidListAndQueue>:
    288a:	0f b6       	in	r0, 0x3f	; 63
    288c:	f8 94       	cli
    288e:	0f 92       	push	r0
    2890:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <xTimerQueue>
    2894:	90 91 85 08 	lds	r25, 0x0885	; 0x800885 <xTimerQueue+0x1>
    2898:	89 2b       	or	r24, r25
    289a:	e9 f4       	brne	.+58     	; 0x28d6 <prvCheckForValidListAndQueue+0x4c>
    289c:	83 e9       	ldi	r24, 0x93	; 147
    289e:	98 e0       	ldi	r25, 0x08	; 8
    28a0:	0e 94 33 05 	call	0xa66	; 0xa66 <vListInitialise>
    28a4:	8a e8       	ldi	r24, 0x8A	; 138
    28a6:	98 e0       	ldi	r25, 0x08	; 8
    28a8:	0e 94 33 05 	call	0xa66	; 0xa66 <vListInitialise>
    28ac:	83 e9       	ldi	r24, 0x93	; 147
    28ae:	98 e0       	ldi	r25, 0x08	; 8
    28b0:	90 93 89 08 	sts	0x0889, r25	; 0x800889 <pxCurrentTimerList+0x1>
    28b4:	80 93 88 08 	sts	0x0888, r24	; 0x800888 <pxCurrentTimerList>
    28b8:	8a e8       	ldi	r24, 0x8A	; 138
    28ba:	98 e0       	ldi	r25, 0x08	; 8
    28bc:	90 93 87 08 	sts	0x0887, r25	; 0x800887 <pxOverflowTimerList+0x1>
    28c0:	80 93 86 08 	sts	0x0886, r24	; 0x800886 <pxOverflowTimerList>
    28c4:	40 e0       	ldi	r20, 0x00	; 0
    28c6:	65 e0       	ldi	r22, 0x05	; 5
    28c8:	8a e0       	ldi	r24, 0x0A	; 10
    28ca:	0e 94 47 08 	call	0x108e	; 0x108e <xQueueGenericCreate>
    28ce:	90 93 85 08 	sts	0x0885, r25	; 0x800885 <xTimerQueue+0x1>
    28d2:	80 93 84 08 	sts	0x0884, r24	; 0x800884 <xTimerQueue>
    28d6:	0f 90       	pop	r0
    28d8:	0f be       	out	0x3f, r0	; 63
    28da:	08 95       	ret

000028dc <xTimerCreateTimerTask>:
    28dc:	ef 92       	push	r14
    28de:	ff 92       	push	r15
    28e0:	0f 93       	push	r16
    28e2:	d3 df       	rcall	.-90     	; 0x288a <prvCheckForValidListAndQueue>
    28e4:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <xTimerQueue>
    28e8:	90 91 85 08 	lds	r25, 0x0885	; 0x800885 <xTimerQueue+0x1>
    28ec:	89 2b       	or	r24, r25
    28ee:	89 f0       	breq	.+34     	; 0x2912 <xTimerCreateTimerTask+0x36>
    28f0:	0f 2e       	mov	r0, r31
    28f2:	f2 e8       	ldi	r31, 0x82	; 130
    28f4:	ef 2e       	mov	r14, r31
    28f6:	f8 e0       	ldi	r31, 0x08	; 8
    28f8:	ff 2e       	mov	r15, r31
    28fa:	f0 2d       	mov	r31, r0
    28fc:	06 e0       	ldi	r16, 0x06	; 6
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	45 e5       	ldi	r20, 0x55	; 85
    2904:	50 e0       	ldi	r21, 0x00	; 0
    2906:	62 e3       	ldi	r22, 0x32	; 50
    2908:	75 e0       	ldi	r23, 0x05	; 5
    290a:	83 e0       	ldi	r24, 0x03	; 3
    290c:	91 e0       	ldi	r25, 0x01	; 1
    290e:	d6 d8       	rcall	.-3668   	; 0x1abc <xTaskCreate>
    2910:	01 c0       	rjmp	.+2      	; 0x2914 <xTimerCreateTimerTask+0x38>
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	0f 91       	pop	r16
    2916:	ff 90       	pop	r15
    2918:	ef 90       	pop	r14
    291a:	08 95       	ret

0000291c <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    291c:	0f 93       	push	r16
    291e:	1f 93       	push	r17
    2920:	cf 93       	push	r28
    2922:	df 93       	push	r29
    2924:	00 d0       	rcall	.+0      	; 0x2926 <xTimerGenericCommand+0xa>
    2926:	1f 92       	push	r1
    2928:	1f 92       	push	r1
    292a:	cd b7       	in	r28, 0x3d	; 61
    292c:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    292e:	e0 91 84 08 	lds	r30, 0x0884	; 0x800884 <xTimerQueue>
    2932:	f0 91 85 08 	lds	r31, 0x0885	; 0x800885 <xTimerQueue+0x1>
    2936:	30 97       	sbiw	r30, 0x00	; 0
    2938:	69 f1       	breq	.+90     	; 0x2994 <xTimerGenericCommand+0x78>
    293a:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    293c:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    293e:	5b 83       	std	Y+3, r21	; 0x03
    2940:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    2942:	9d 83       	std	Y+5, r25	; 0x05
    2944:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2946:	66 30       	cpi	r22, 0x06	; 6
    2948:	e4 f4       	brge	.+56     	; 0x2982 <xTimerGenericCommand+0x66>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    294a:	a9 dc       	rcall	.-1710   	; 0x229e <xTaskGetSchedulerState>
    294c:	82 30       	cpi	r24, 0x02	; 2
    294e:	61 f4       	brne	.+24     	; 0x2968 <xTimerGenericCommand+0x4c>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	a8 01       	movw	r20, r16
    2954:	be 01       	movw	r22, r28
    2956:	6f 5f       	subi	r22, 0xFF	; 255
    2958:	7f 4f       	sbci	r23, 0xFF	; 255
    295a:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <xTimerQueue>
    295e:	90 91 85 08 	lds	r25, 0x0885	; 0x800885 <xTimerQueue+0x1>
    2962:	0e 94 75 08 	call	0x10ea	; 0x10ea <xQueueGenericSend>
    2966:	17 c0       	rjmp	.+46     	; 0x2996 <xTimerGenericCommand+0x7a>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	40 e0       	ldi	r20, 0x00	; 0
    296c:	50 e0       	ldi	r21, 0x00	; 0
    296e:	be 01       	movw	r22, r28
    2970:	6f 5f       	subi	r22, 0xFF	; 255
    2972:	7f 4f       	sbci	r23, 0xFF	; 255
    2974:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <xTimerQueue>
    2978:	90 91 85 08 	lds	r25, 0x0885	; 0x800885 <xTimerQueue+0x1>
    297c:	0e 94 75 08 	call	0x10ea	; 0x10ea <xQueueGenericSend>
    2980:	0a c0       	rjmp	.+20     	; 0x2996 <xTimerGenericCommand+0x7a>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2982:	20 e0       	ldi	r18, 0x00	; 0
    2984:	ad 01       	movw	r20, r26
    2986:	be 01       	movw	r22, r28
    2988:	6f 5f       	subi	r22, 0xFF	; 255
    298a:	7f 4f       	sbci	r23, 0xFF	; 255
    298c:	cf 01       	movw	r24, r30
    298e:	0e 94 22 09 	call	0x1244	; 0x1244 <xQueueGenericSendFromISR>
    2992:	01 c0       	rjmp	.+2      	; 0x2996 <xTimerGenericCommand+0x7a>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    2994:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    2996:	0f 90       	pop	r0
    2998:	0f 90       	pop	r0
    299a:	0f 90       	pop	r0
    299c:	0f 90       	pop	r0
    299e:	0f 90       	pop	r0
    29a0:	df 91       	pop	r29
    29a2:	cf 91       	pop	r28
    29a4:	1f 91       	pop	r17
    29a6:	0f 91       	pop	r16
    29a8:	08 95       	ret

000029aa <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    29aa:	af 92       	push	r10
    29ac:	bf 92       	push	r11
    29ae:	cf 92       	push	r12
    29b0:	df 92       	push	r13
    29b2:	ef 92       	push	r14
    29b4:	ff 92       	push	r15
    29b6:	0f 93       	push	r16
    29b8:	1f 93       	push	r17
    29ba:	cf 93       	push	r28
    29bc:	df 93       	push	r29
    29be:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    29c0:	d4 d9       	rcall	.-3160   	; 0x1d6a <xTaskGetTickCount>
    29c2:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    29c4:	80 91 80 08 	lds	r24, 0x0880	; 0x800880 <xLastTime.2432>
    29c8:	90 91 81 08 	lds	r25, 0x0881	; 0x800881 <xLastTime.2432+0x1>
    29cc:	e8 16       	cp	r14, r24
    29ce:	f9 06       	cpc	r15, r25
    29d0:	08 f0       	brcs	.+2      	; 0x29d4 <prvSampleTimeNow+0x2a>
    29d2:	47 c0       	rjmp	.+142    	; 0x2a62 <prvSampleTimeNow+0xb8>
    29d4:	2f c0       	rjmp	.+94     	; 0x2a34 <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    29d6:	05 80       	ldd	r0, Z+5	; 0x05
    29d8:	f6 81       	ldd	r31, Z+6	; 0x06
    29da:	e0 2d       	mov	r30, r0
    29dc:	a0 80       	ld	r10, Z
    29de:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    29e0:	c6 81       	ldd	r28, Z+6	; 0x06
    29e2:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    29e4:	8e 01       	movw	r16, r28
    29e6:	0e 5f       	subi	r16, 0xFE	; 254
    29e8:	1f 4f       	sbci	r17, 0xFF	; 255
    29ea:	c8 01       	movw	r24, r16
    29ec:	0e 94 97 05 	call	0xb2e	; 0xb2e <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    29f0:	e8 89       	ldd	r30, Y+16	; 0x10
    29f2:	f9 89       	ldd	r31, Y+17	; 0x11
    29f4:	ce 01       	movw	r24, r28
    29f6:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    29f8:	8b 89       	ldd	r24, Y+19	; 0x13
    29fa:	82 ff       	sbrs	r24, 2
    29fc:	1b c0       	rjmp	.+54     	; 0x2a34 <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    29fe:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a00:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a02:	8a 0d       	add	r24, r10
    2a04:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    2a06:	a8 16       	cp	r10, r24
    2a08:	b9 06       	cpc	r11, r25
    2a0a:	60 f4       	brcc	.+24     	; 0x2a24 <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2a0c:	9b 83       	std	Y+3, r25	; 0x03
    2a0e:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2a10:	d9 87       	std	Y+9, r29	; 0x09
    2a12:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2a14:	b8 01       	movw	r22, r16
    2a16:	80 91 88 08 	lds	r24, 0x0888	; 0x800888 <pxCurrentTimerList>
    2a1a:	90 91 89 08 	lds	r25, 0x0889	; 0x800889 <pxCurrentTimerList+0x1>
    2a1e:	0e 94 66 05 	call	0xacc	; 0xacc <vListInsert>
    2a22:	08 c0       	rjmp	.+16     	; 0x2a34 <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2a24:	00 e0       	ldi	r16, 0x00	; 0
    2a26:	10 e0       	ldi	r17, 0x00	; 0
    2a28:	20 e0       	ldi	r18, 0x00	; 0
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	a5 01       	movw	r20, r10
    2a2e:	60 e0       	ldi	r22, 0x00	; 0
    2a30:	ce 01       	movw	r24, r28
    2a32:	74 df       	rcall	.-280    	; 0x291c <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2a34:	e0 91 88 08 	lds	r30, 0x0888	; 0x800888 <pxCurrentTimerList>
    2a38:	f0 91 89 08 	lds	r31, 0x0889	; 0x800889 <pxCurrentTimerList+0x1>
    2a3c:	80 81       	ld	r24, Z
    2a3e:	81 11       	cpse	r24, r1
    2a40:	ca cf       	rjmp	.-108    	; 0x29d6 <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    2a42:	80 91 86 08 	lds	r24, 0x0886	; 0x800886 <pxOverflowTimerList>
    2a46:	90 91 87 08 	lds	r25, 0x0887	; 0x800887 <pxOverflowTimerList+0x1>
    2a4a:	90 93 89 08 	sts	0x0889, r25	; 0x800889 <pxCurrentTimerList+0x1>
    2a4e:	80 93 88 08 	sts	0x0888, r24	; 0x800888 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    2a52:	f0 93 87 08 	sts	0x0887, r31	; 0x800887 <pxOverflowTimerList+0x1>
    2a56:	e0 93 86 08 	sts	0x0886, r30	; 0x800886 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    2a5a:	81 e0       	ldi	r24, 0x01	; 1
    2a5c:	f6 01       	movw	r30, r12
    2a5e:	80 83       	st	Z, r24
    2a60:	02 c0       	rjmp	.+4      	; 0x2a66 <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    2a62:	f6 01       	movw	r30, r12
    2a64:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    2a66:	f0 92 81 08 	sts	0x0881, r15	; 0x800881 <xLastTime.2432+0x1>
    2a6a:	e0 92 80 08 	sts	0x0880, r14	; 0x800880 <xLastTime.2432>

    return xTimeNow;
}
    2a6e:	c7 01       	movw	r24, r14
    2a70:	df 91       	pop	r29
    2a72:	cf 91       	pop	r28
    2a74:	1f 91       	pop	r17
    2a76:	0f 91       	pop	r16
    2a78:	ff 90       	pop	r15
    2a7a:	ef 90       	pop	r14
    2a7c:	df 90       	pop	r13
    2a7e:	cf 90       	pop	r12
    2a80:	bf 90       	pop	r11
    2a82:	af 90       	pop	r10
    2a84:	08 95       	ret

00002a86 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2a86:	08 95       	ret

00002a88 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2a88:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2a8a:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2a8c:	2f ef       	ldi	r18, 0xFF	; 255
    2a8e:	80 e7       	ldi	r24, 0x70	; 112
    2a90:	92 e0       	ldi	r25, 0x02	; 2
    2a92:	21 50       	subi	r18, 0x01	; 1
    2a94:	80 40       	sbci	r24, 0x00	; 0
    2a96:	90 40       	sbci	r25, 0x00	; 0
    2a98:	e1 f7       	brne	.-8      	; 0x2a92 <vApplicationMallocFailedHook+0xa>
    2a9a:	00 c0       	rjmp	.+0      	; 0x2a9c <vApplicationMallocFailedHook+0x14>
    2a9c:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    2a9e:	1f 9a       	sbi	0x03, 7	; 3
    2aa0:	f5 cf       	rjmp	.-22     	; 0x2a8c <vApplicationMallocFailedHook+0x4>

00002aa2 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2aa2:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2aa4:	2f 9a       	sbi	0x05, 7	; 5
    2aa6:	2f ef       	ldi	r18, 0xFF	; 255
    2aa8:	87 ea       	ldi	r24, 0xA7	; 167
    2aaa:	91 e6       	ldi	r25, 0x61	; 97
    2aac:	21 50       	subi	r18, 0x01	; 1
    2aae:	80 40       	sbci	r24, 0x00	; 0
    2ab0:	90 40       	sbci	r25, 0x00	; 0
    2ab2:	e1 f7       	brne	.-8      	; 0x2aac <vApplicationStackOverflowHook+0xa>
    2ab4:	00 c0       	rjmp	.+0      	; 0x2ab6 <vApplicationStackOverflowHook+0x14>
    2ab6:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    2ab8:	1f 9a       	sbi	0x03, 7	; 3
    2aba:	f5 cf       	rjmp	.-22     	; 0x2aa6 <vApplicationStackOverflowHook+0x4>

00002abc <__fixsfsi>:
    2abc:	04 d0       	rcall	.+8      	; 0x2ac6 <__fixunssfsi>
    2abe:	68 94       	set
    2ac0:	b1 11       	cpse	r27, r1
    2ac2:	50 c0       	rjmp	.+160    	; 0x2b64 <__fp_szero>
    2ac4:	08 95       	ret

00002ac6 <__fixunssfsi>:
    2ac6:	33 d0       	rcall	.+102    	; 0x2b2e <__fp_splitA>
    2ac8:	88 f0       	brcs	.+34     	; 0x2aec <__fixunssfsi+0x26>
    2aca:	9f 57       	subi	r25, 0x7F	; 127
    2acc:	90 f0       	brcs	.+36     	; 0x2af2 <__fixunssfsi+0x2c>
    2ace:	b9 2f       	mov	r27, r25
    2ad0:	99 27       	eor	r25, r25
    2ad2:	b7 51       	subi	r27, 0x17	; 23
    2ad4:	a0 f0       	brcs	.+40     	; 0x2afe <__fixunssfsi+0x38>
    2ad6:	d1 f0       	breq	.+52     	; 0x2b0c <__fixunssfsi+0x46>
    2ad8:	66 0f       	add	r22, r22
    2ada:	77 1f       	adc	r23, r23
    2adc:	88 1f       	adc	r24, r24
    2ade:	99 1f       	adc	r25, r25
    2ae0:	1a f0       	brmi	.+6      	; 0x2ae8 <__fixunssfsi+0x22>
    2ae2:	ba 95       	dec	r27
    2ae4:	c9 f7       	brne	.-14     	; 0x2ad8 <__fixunssfsi+0x12>
    2ae6:	12 c0       	rjmp	.+36     	; 0x2b0c <__fixunssfsi+0x46>
    2ae8:	b1 30       	cpi	r27, 0x01	; 1
    2aea:	81 f0       	breq	.+32     	; 0x2b0c <__fixunssfsi+0x46>
    2aec:	3a d0       	rcall	.+116    	; 0x2b62 <__fp_zero>
    2aee:	b1 e0       	ldi	r27, 0x01	; 1
    2af0:	08 95       	ret
    2af2:	37 c0       	rjmp	.+110    	; 0x2b62 <__fp_zero>
    2af4:	67 2f       	mov	r22, r23
    2af6:	78 2f       	mov	r23, r24
    2af8:	88 27       	eor	r24, r24
    2afa:	b8 5f       	subi	r27, 0xF8	; 248
    2afc:	39 f0       	breq	.+14     	; 0x2b0c <__fixunssfsi+0x46>
    2afe:	b9 3f       	cpi	r27, 0xF9	; 249
    2b00:	cc f3       	brlt	.-14     	; 0x2af4 <__fixunssfsi+0x2e>
    2b02:	86 95       	lsr	r24
    2b04:	77 95       	ror	r23
    2b06:	67 95       	ror	r22
    2b08:	b3 95       	inc	r27
    2b0a:	d9 f7       	brne	.-10     	; 0x2b02 <__fixunssfsi+0x3c>
    2b0c:	3e f4       	brtc	.+14     	; 0x2b1c <__fixunssfsi+0x56>
    2b0e:	90 95       	com	r25
    2b10:	80 95       	com	r24
    2b12:	70 95       	com	r23
    2b14:	61 95       	neg	r22
    2b16:	7f 4f       	sbci	r23, 0xFF	; 255
    2b18:	8f 4f       	sbci	r24, 0xFF	; 255
    2b1a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b1c:	08 95       	ret

00002b1e <__fp_split3>:
    2b1e:	57 fd       	sbrc	r21, 7
    2b20:	90 58       	subi	r25, 0x80	; 128
    2b22:	44 0f       	add	r20, r20
    2b24:	55 1f       	adc	r21, r21
    2b26:	59 f0       	breq	.+22     	; 0x2b3e <__fp_splitA+0x10>
    2b28:	5f 3f       	cpi	r21, 0xFF	; 255
    2b2a:	71 f0       	breq	.+28     	; 0x2b48 <__fp_splitA+0x1a>
    2b2c:	47 95       	ror	r20

00002b2e <__fp_splitA>:
    2b2e:	88 0f       	add	r24, r24
    2b30:	97 fb       	bst	r25, 7
    2b32:	99 1f       	adc	r25, r25
    2b34:	61 f0       	breq	.+24     	; 0x2b4e <__fp_splitA+0x20>
    2b36:	9f 3f       	cpi	r25, 0xFF	; 255
    2b38:	79 f0       	breq	.+30     	; 0x2b58 <__fp_splitA+0x2a>
    2b3a:	87 95       	ror	r24
    2b3c:	08 95       	ret
    2b3e:	12 16       	cp	r1, r18
    2b40:	13 06       	cpc	r1, r19
    2b42:	14 06       	cpc	r1, r20
    2b44:	55 1f       	adc	r21, r21
    2b46:	f2 cf       	rjmp	.-28     	; 0x2b2c <__fp_split3+0xe>
    2b48:	46 95       	lsr	r20
    2b4a:	f1 df       	rcall	.-30     	; 0x2b2e <__fp_splitA>
    2b4c:	08 c0       	rjmp	.+16     	; 0x2b5e <__fp_splitA+0x30>
    2b4e:	16 16       	cp	r1, r22
    2b50:	17 06       	cpc	r1, r23
    2b52:	18 06       	cpc	r1, r24
    2b54:	99 1f       	adc	r25, r25
    2b56:	f1 cf       	rjmp	.-30     	; 0x2b3a <__fp_splitA+0xc>
    2b58:	86 95       	lsr	r24
    2b5a:	71 05       	cpc	r23, r1
    2b5c:	61 05       	cpc	r22, r1
    2b5e:	08 94       	sec
    2b60:	08 95       	ret

00002b62 <__fp_zero>:
    2b62:	e8 94       	clt

00002b64 <__fp_szero>:
    2b64:	bb 27       	eor	r27, r27
    2b66:	66 27       	eor	r22, r22
    2b68:	77 27       	eor	r23, r23
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	97 f9       	bld	r25, 7
    2b6e:	08 95       	ret

00002b70 <usart_getchar>:
    2b70:	cf 93       	push	r28
    2b72:	df 93       	push	r29
    2b74:	1f 92       	push	r1
    2b76:	cd b7       	in	r28, 0x3d	; 61
    2b78:	de b7       	in	r29, 0x3e	; 62
    2b7a:	be 01       	movw	r22, r28
    2b7c:	6f 5f       	subi	r22, 0xFF	; 255
    2b7e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b80:	80 91 9c 08 	lds	r24, 0x089C	; 0x80089c <_com_serial_instance>
    2b84:	90 91 9d 08 	lds	r25, 0x089D	; 0x80089d <_com_serial_instance+0x1>
    2b88:	4e d1       	rcall	.+668    	; 0x2e26 <serial_get_byte>
    2b8a:	81 11       	cpse	r24, r1
    2b8c:	f6 cf       	rjmp	.-20     	; 0x2b7a <usart_getchar+0xa>
    2b8e:	89 81       	ldd	r24, Y+1	; 0x01
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	0f 90       	pop	r0
    2b94:	df 91       	pop	r29
    2b96:	cf 91       	pop	r28
    2b98:	08 95       	ret

00002b9a <usart_putchar>:
    2b9a:	68 2f       	mov	r22, r24
    2b9c:	80 91 9c 08 	lds	r24, 0x089C	; 0x80089c <_com_serial_instance>
    2ba0:	90 91 9d 08 	lds	r25, 0x089D	; 0x80089d <_com_serial_instance+0x1>
    2ba4:	cb d0       	rcall	.+406    	; 0x2d3c <serial_send_byte>
    2ba6:	80 e0       	ldi	r24, 0x00	; 0
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	08 95       	ret

00002bac <stdioCreate>:
    2bac:	8f 92       	push	r8
    2bae:	9f 92       	push	r9
    2bb0:	af 92       	push	r10
    2bb2:	cf 92       	push	r12
    2bb4:	ef 92       	push	r14
    2bb6:	0f 93       	push	r16
    2bb8:	81 2c       	mov	r8, r1
    2bba:	91 2c       	mov	r9, r1
    2bbc:	68 94       	set
    2bbe:	aa 24       	eor	r10, r10
    2bc0:	a7 f8       	bld	r10, 7
    2bc2:	68 94       	set
    2bc4:	cc 24       	eor	r12, r12
    2bc6:	c7 f8       	bld	r12, 7
    2bc8:	e1 2c       	mov	r14, r1
    2bca:	00 e0       	ldi	r16, 0x00	; 0
    2bcc:	23 e0       	ldi	r18, 0x03	; 3
    2bce:	40 e0       	ldi	r20, 0x00	; 0
    2bd0:	51 ee       	ldi	r21, 0xE1	; 225
    2bd2:	60 e0       	ldi	r22, 0x00	; 0
    2bd4:	70 e0       	ldi	r23, 0x00	; 0
    2bd6:	13 d0       	rcall	.+38     	; 0x2bfe <serial_new_instance>
    2bd8:	90 93 9d 08 	sts	0x089D, r25	; 0x80089d <_com_serial_instance+0x1>
    2bdc:	80 93 9c 08 	sts	0x089C, r24	; 0x80089c <_com_serial_instance>
    2be0:	ee e8       	ldi	r30, 0x8E	; 142
    2be2:	fa e0       	ldi	r31, 0x0A	; 10
    2be4:	86 e0       	ldi	r24, 0x06	; 6
    2be6:	92 e0       	ldi	r25, 0x02	; 2
    2be8:	91 83       	std	Z+1, r25	; 0x01
    2bea:	80 83       	st	Z, r24
    2bec:	93 83       	std	Z+3, r25	; 0x03
    2bee:	82 83       	std	Z+2, r24	; 0x02
    2bf0:	0f 91       	pop	r16
    2bf2:	ef 90       	pop	r14
    2bf4:	cf 90       	pop	r12
    2bf6:	af 90       	pop	r10
    2bf8:	9f 90       	pop	r9
    2bfa:	8f 90       	pop	r8
    2bfc:	08 95       	ret

00002bfe <serial_new_instance>:
    2bfe:	2f 92       	push	r2
    2c00:	3f 92       	push	r3
    2c02:	4f 92       	push	r4
    2c04:	5f 92       	push	r5
    2c06:	6f 92       	push	r6
    2c08:	7f 92       	push	r7
    2c0a:	8f 92       	push	r8
    2c0c:	9f 92       	push	r9
    2c0e:	af 92       	push	r10
    2c10:	cf 92       	push	r12
    2c12:	ef 92       	push	r14
    2c14:	ff 92       	push	r15
    2c16:	0f 93       	push	r16
    2c18:	1f 93       	push	r17
    2c1a:	cf 93       	push	r28
    2c1c:	df 93       	push	r29
    2c1e:	cd b7       	in	r28, 0x3d	; 61
    2c20:	de b7       	in	r29, 0x3e	; 62
    2c22:	f8 2e       	mov	r15, r24
    2c24:	2a 01       	movw	r4, r20
    2c26:	3b 01       	movw	r6, r22
    2c28:	88 e0       	ldi	r24, 0x08	; 8
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	0e 94 d4 25 	call	0x4ba8	; 0x4ba8 <malloc>
    2c30:	8c 01       	movw	r16, r24
    2c32:	8f 2d       	mov	r24, r15
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	88 0f       	add	r24, r24
    2c38:	99 1f       	adc	r25, r25
    2c3a:	fc 01       	movw	r30, r24
    2c3c:	e2 56       	subi	r30, 0x62	; 98
    2c3e:	f7 4f       	sbci	r31, 0xF7	; 247
    2c40:	11 83       	std	Z+1, r17	; 0x01
    2c42:	00 83       	st	Z, r16
    2c44:	fc 01       	movw	r30, r24
    2c46:	ec 5e       	subi	r30, 0xEC	; 236
    2c48:	fd 4f       	sbci	r31, 0xFD	; 253
    2c4a:	80 81       	ld	r24, Z
    2c4c:	91 81       	ldd	r25, Z+1	; 0x01
    2c4e:	d8 01       	movw	r26, r16
    2c50:	8d 93       	st	X+, r24
    2c52:	9c 93       	st	X, r25
    2c54:	6c 2d       	mov	r22, r12
    2c56:	70 e0       	ldi	r23, 0x00	; 0
    2c58:	84 e0       	ldi	r24, 0x04	; 4
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <calloc>
    2c60:	1c 01       	movw	r2, r24
    2c62:	61 e0       	ldi	r22, 0x01	; 1
    2c64:	70 e0       	ldi	r23, 0x00	; 0
    2c66:	86 e0       	ldi	r24, 0x06	; 6
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <calloc>
    2c6e:	7c 01       	movw	r14, r24
    2c70:	4c 2d       	mov	r20, r12
    2c72:	b1 01       	movw	r22, r2
    2c74:	4c d3       	rcall	.+1688   	; 0x330e <fifo_init>
    2c76:	f8 01       	movw	r30, r16
    2c78:	f5 82       	std	Z+5, r15	; 0x05
    2c7a:	e4 82       	std	Z+4, r14	; 0x04
    2c7c:	6a 2d       	mov	r22, r10
    2c7e:	70 e0       	ldi	r23, 0x00	; 0
    2c80:	84 e0       	ldi	r24, 0x04	; 4
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <calloc>
    2c88:	1c 01       	movw	r2, r24
    2c8a:	61 e0       	ldi	r22, 0x01	; 1
    2c8c:	70 e0       	ldi	r23, 0x00	; 0
    2c8e:	86 e0       	ldi	r24, 0x06	; 6
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <calloc>
    2c96:	7c 01       	movw	r14, r24
    2c98:	4a 2d       	mov	r20, r10
    2c9a:	b1 01       	movw	r22, r2
    2c9c:	38 d3       	rcall	.+1648   	; 0x330e <fifo_init>
    2c9e:	d8 01       	movw	r26, r16
    2ca0:	13 96       	adiw	r26, 0x03	; 3
    2ca2:	fc 92       	st	X, r15
    2ca4:	ee 92       	st	-X, r14
    2ca6:	12 97       	sbiw	r26, 0x02	; 2
    2ca8:	17 96       	adiw	r26, 0x07	; 7
    2caa:	9c 92       	st	X, r9
    2cac:	8e 92       	st	-X, r8
    2cae:	16 97       	sbiw	r26, 0x06	; 6
    2cb0:	ff b6       	in	r15, 0x3f	; 63
    2cb2:	f8 94       	cli
    2cb4:	ed 91       	ld	r30, X+
    2cb6:	fc 91       	ld	r31, X
    2cb8:	11 97       	sbiw	r26, 0x01	; 1
    2cba:	36 97       	sbiw	r30, 0x06	; 6
    2cbc:	80 81       	ld	r24, Z
    2cbe:	82 60       	ori	r24, 0x02	; 2
    2cc0:	80 83       	st	Z, r24
    2cc2:	8d 90       	ld	r8, X+
    2cc4:	9c 90       	ld	r9, X
    2cc6:	c3 01       	movw	r24, r6
    2cc8:	b2 01       	movw	r22, r4
    2cca:	0e 94 9d 24 	call	0x493a	; 0x493a <__floatunsisf>
    2cce:	20 e0       	ldi	r18, 0x00	; 0
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	40 e0       	ldi	r20, 0x00	; 0
    2cd4:	51 e4       	ldi	r21, 0x41	; 65
    2cd6:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <__mulsf3>
    2cda:	9b 01       	movw	r18, r22
    2cdc:	ac 01       	movw	r20, r24
    2cde:	60 e0       	ldi	r22, 0x00	; 0
    2ce0:	74 e2       	ldi	r23, 0x24	; 36
    2ce2:	84 e7       	ldi	r24, 0x74	; 116
    2ce4:	9b e4       	ldi	r25, 0x4B	; 75
    2ce6:	0e 94 32 24 	call	0x4864	; 0x4864 <__divsf3>
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	40 e8       	ldi	r20, 0x80	; 128
    2cf0:	5f e3       	ldi	r21, 0x3F	; 63
    2cf2:	0e 94 cb 23 	call	0x4796	; 0x4796 <__subsf3>
    2cf6:	e7 de       	rcall	.-562    	; 0x2ac6 <__fixunssfsi>
    2cf8:	f4 01       	movw	r30, r8
    2cfa:	32 97       	sbiw	r30, 0x02	; 2
    2cfc:	60 83       	st	Z, r22
    2cfe:	d8 01       	movw	r26, r16
    2d00:	ed 91       	ld	r30, X+
    2d02:	fc 91       	ld	r31, X
    2d04:	11 97       	sbiw	r26, 0x01	; 1
    2d06:	35 97       	sbiw	r30, 0x05	; 5
    2d08:	88 e9       	ldi	r24, 0x98	; 152
    2d0a:	80 83       	st	Z, r24
    2d0c:	ed 91       	ld	r30, X+
    2d0e:	fc 91       	ld	r31, X
    2d10:	34 97       	sbiw	r30, 0x04	; 4
    2d12:	86 e0       	ldi	r24, 0x06	; 6
    2d14:	80 83       	st	Z, r24
    2d16:	ff be       	out	0x3f, r15	; 63
    2d18:	c8 01       	movw	r24, r16
    2d1a:	df 91       	pop	r29
    2d1c:	cf 91       	pop	r28
    2d1e:	1f 91       	pop	r17
    2d20:	0f 91       	pop	r16
    2d22:	ff 90       	pop	r15
    2d24:	ef 90       	pop	r14
    2d26:	cf 90       	pop	r12
    2d28:	af 90       	pop	r10
    2d2a:	9f 90       	pop	r9
    2d2c:	8f 90       	pop	r8
    2d2e:	7f 90       	pop	r7
    2d30:	6f 90       	pop	r6
    2d32:	5f 90       	pop	r5
    2d34:	4f 90       	pop	r4
    2d36:	3f 90       	pop	r3
    2d38:	2f 90       	pop	r2
    2d3a:	08 95       	ret

00002d3c <serial_send_byte>:
    2d3c:	cf 93       	push	r28
    2d3e:	df 93       	push	r29
    2d40:	ec 01       	movw	r28, r24
    2d42:	ea 81       	ldd	r30, Y+2	; 0x02
    2d44:	fb 81       	ldd	r31, Y+3	; 0x03
    2d46:	93 81       	ldd	r25, Z+3	; 0x03
    2d48:	82 81       	ldd	r24, Z+2	; 0x02
    2d4a:	25 81       	ldd	r18, Z+5	; 0x05
    2d4c:	98 1b       	sub	r25, r24
    2d4e:	92 23       	and	r25, r18
    2d50:	84 81       	ldd	r24, Z+4	; 0x04
    2d52:	98 17       	cp	r25, r24
    2d54:	a1 f0       	breq	.+40     	; 0x2d7e <serial_send_byte+0x42>
    2d56:	93 81       	ldd	r25, Z+3	; 0x03
    2d58:	26 95       	lsr	r18
    2d5a:	29 23       	and	r18, r25
    2d5c:	a0 81       	ld	r26, Z
    2d5e:	b1 81       	ldd	r27, Z+1	; 0x01
    2d60:	a2 0f       	add	r26, r18
    2d62:	b1 1d       	adc	r27, r1
    2d64:	6c 93       	st	X, r22
    2d66:	9f 5f       	subi	r25, 0xFF	; 255
    2d68:	25 81       	ldd	r18, Z+5	; 0x05
    2d6a:	92 23       	and	r25, r18
    2d6c:	93 83       	std	Z+3, r25	; 0x03
    2d6e:	e8 81       	ld	r30, Y
    2d70:	f9 81       	ldd	r31, Y+1	; 0x01
    2d72:	35 97       	sbiw	r30, 0x05	; 5
    2d74:	80 81       	ld	r24, Z
    2d76:	80 62       	ori	r24, 0x20	; 32
    2d78:	80 83       	st	Z, r24
    2d7a:	80 e0       	ldi	r24, 0x00	; 0
    2d7c:	01 c0       	rjmp	.+2      	; 0x2d80 <serial_send_byte+0x44>
    2d7e:	82 e0       	ldi	r24, 0x02	; 2
    2d80:	df 91       	pop	r29
    2d82:	cf 91       	pop	r28
    2d84:	08 95       	ret

00002d86 <serial_send_bytes>:
    2d86:	ef 92       	push	r14
    2d88:	ff 92       	push	r15
    2d8a:	0f 93       	push	r16
    2d8c:	1f 93       	push	r17
    2d8e:	cf 93       	push	r28
    2d90:	df 93       	push	r29
    2d92:	7c 01       	movw	r14, r24
    2d94:	dc 01       	movw	r26, r24
    2d96:	12 96       	adiw	r26, 0x02	; 2
    2d98:	ed 91       	ld	r30, X+
    2d9a:	fc 91       	ld	r31, X
    2d9c:	13 97       	sbiw	r26, 0x03	; 3
    2d9e:	93 81       	ldd	r25, Z+3	; 0x03
    2da0:	82 81       	ldd	r24, Z+2	; 0x02
    2da2:	98 1b       	sub	r25, r24
    2da4:	85 81       	ldd	r24, Z+5	; 0x05
    2da6:	98 23       	and	r25, r24
    2da8:	84 81       	ldd	r24, Z+4	; 0x04
    2daa:	89 1b       	sub	r24, r25
    2dac:	86 17       	cp	r24, r22
    2dae:	98 f1       	brcs	.+102    	; 0x2e16 <serial_send_bytes+0x90>
    2db0:	66 23       	and	r22, r22
    2db2:	41 f1       	breq	.+80     	; 0x2e04 <serial_send_bytes+0x7e>
    2db4:	84 2f       	mov	r24, r20
    2db6:	95 2f       	mov	r25, r21
    2db8:	dc 01       	movw	r26, r24
    2dba:	61 50       	subi	r22, 0x01	; 1
    2dbc:	46 2f       	mov	r20, r22
    2dbe:	50 e0       	ldi	r21, 0x00	; 0
    2dc0:	4f 5f       	subi	r20, 0xFF	; 255
    2dc2:	5f 4f       	sbci	r21, 0xFF	; 255
    2dc4:	48 0f       	add	r20, r24
    2dc6:	59 1f       	adc	r21, r25
    2dc8:	e7 01       	movw	r28, r14
    2dca:	ea 81       	ldd	r30, Y+2	; 0x02
    2dcc:	fb 81       	ldd	r31, Y+3	; 0x03
    2dce:	93 81       	ldd	r25, Z+3	; 0x03
    2dd0:	82 81       	ldd	r24, Z+2	; 0x02
    2dd2:	25 81       	ldd	r18, Z+5	; 0x05
    2dd4:	98 1b       	sub	r25, r24
    2dd6:	92 23       	and	r25, r18
    2dd8:	84 81       	ldd	r24, Z+4	; 0x04
    2dda:	98 17       	cp	r25, r24
    2ddc:	79 f0       	breq	.+30     	; 0x2dfc <serial_send_bytes+0x76>
    2dde:	8c 91       	ld	r24, X
    2de0:	93 81       	ldd	r25, Z+3	; 0x03
    2de2:	26 95       	lsr	r18
    2de4:	29 23       	and	r18, r25
    2de6:	60 81       	ld	r22, Z
    2de8:	71 81       	ldd	r23, Z+1	; 0x01
    2dea:	8b 01       	movw	r16, r22
    2dec:	02 0f       	add	r16, r18
    2dee:	11 1d       	adc	r17, r1
    2df0:	e8 01       	movw	r28, r16
    2df2:	88 83       	st	Y, r24
    2df4:	9f 5f       	subi	r25, 0xFF	; 255
    2df6:	85 81       	ldd	r24, Z+5	; 0x05
    2df8:	98 23       	and	r25, r24
    2dfa:	93 83       	std	Z+3, r25	; 0x03
    2dfc:	11 96       	adiw	r26, 0x01	; 1
    2dfe:	a4 17       	cp	r26, r20
    2e00:	b5 07       	cpc	r27, r21
    2e02:	11 f7       	brne	.-60     	; 0x2dc8 <serial_send_bytes+0x42>
    2e04:	d7 01       	movw	r26, r14
    2e06:	ed 91       	ld	r30, X+
    2e08:	fc 91       	ld	r31, X
    2e0a:	35 97       	sbiw	r30, 0x05	; 5
    2e0c:	80 81       	ld	r24, Z
    2e0e:	80 62       	ori	r24, 0x20	; 32
    2e10:	80 83       	st	Z, r24
    2e12:	80 e0       	ldi	r24, 0x00	; 0
    2e14:	01 c0       	rjmp	.+2      	; 0x2e18 <serial_send_bytes+0x92>
    2e16:	82 e0       	ldi	r24, 0x02	; 2
    2e18:	df 91       	pop	r29
    2e1a:	cf 91       	pop	r28
    2e1c:	1f 91       	pop	r17
    2e1e:	0f 91       	pop	r16
    2e20:	ff 90       	pop	r15
    2e22:	ef 90       	pop	r14
    2e24:	08 95       	ret

00002e26 <serial_get_byte>:
    2e26:	dc 01       	movw	r26, r24
    2e28:	14 96       	adiw	r26, 0x04	; 4
    2e2a:	ed 91       	ld	r30, X+
    2e2c:	fc 91       	ld	r31, X
    2e2e:	15 97       	sbiw	r26, 0x05	; 5
    2e30:	93 81       	ldd	r25, Z+3	; 0x03
    2e32:	82 81       	ldd	r24, Z+2	; 0x02
    2e34:	98 17       	cp	r25, r24
    2e36:	89 f0       	breq	.+34     	; 0x2e5a <serial_get_byte+0x34>
    2e38:	92 81       	ldd	r25, Z+2	; 0x02
    2e3a:	85 81       	ldd	r24, Z+5	; 0x05
    2e3c:	86 95       	lsr	r24
    2e3e:	89 23       	and	r24, r25
    2e40:	a0 81       	ld	r26, Z
    2e42:	b1 81       	ldd	r27, Z+1	; 0x01
    2e44:	a8 0f       	add	r26, r24
    2e46:	b1 1d       	adc	r27, r1
    2e48:	8c 91       	ld	r24, X
    2e4a:	db 01       	movw	r26, r22
    2e4c:	8c 93       	st	X, r24
    2e4e:	9f 5f       	subi	r25, 0xFF	; 255
    2e50:	85 81       	ldd	r24, Z+5	; 0x05
    2e52:	98 23       	and	r25, r24
    2e54:	92 83       	std	Z+2, r25	; 0x02
    2e56:	80 e0       	ldi	r24, 0x00	; 0
    2e58:	08 95       	ret
    2e5a:	83 e0       	ldi	r24, 0x03	; 3
    2e5c:	08 95       	ret

00002e5e <__vector_25>:
    2e5e:	1f 92       	push	r1
    2e60:	0f 92       	push	r0
    2e62:	0f b6       	in	r0, 0x3f	; 63
    2e64:	0f 92       	push	r0
    2e66:	11 24       	eor	r1, r1
    2e68:	0b b6       	in	r0, 0x3b	; 59
    2e6a:	0f 92       	push	r0
    2e6c:	2f 93       	push	r18
    2e6e:	3f 93       	push	r19
    2e70:	4f 93       	push	r20
    2e72:	5f 93       	push	r21
    2e74:	6f 93       	push	r22
    2e76:	7f 93       	push	r23
    2e78:	8f 93       	push	r24
    2e7a:	9f 93       	push	r25
    2e7c:	af 93       	push	r26
    2e7e:	bf 93       	push	r27
    2e80:	cf 93       	push	r28
    2e82:	df 93       	push	r29
    2e84:	ef 93       	push	r30
    2e86:	ff 93       	push	r31
    2e88:	a0 91 9e 08 	lds	r26, 0x089E	; 0x80089e <_ser_handle>
    2e8c:	b0 91 9f 08 	lds	r27, 0x089F	; 0x80089f <_ser_handle+0x1>
    2e90:	10 97       	sbiw	r26, 0x00	; 0
    2e92:	11 f1       	breq	.+68     	; 0x2ed8 <__vector_25+0x7a>
    2e94:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    2e98:	14 96       	adiw	r26, 0x04	; 4
    2e9a:	ed 91       	ld	r30, X+
    2e9c:	fc 91       	ld	r31, X
    2e9e:	15 97       	sbiw	r26, 0x05	; 5
    2ea0:	93 81       	ldd	r25, Z+3	; 0x03
    2ea2:	82 81       	ldd	r24, Z+2	; 0x02
    2ea4:	25 81       	ldd	r18, Z+5	; 0x05
    2ea6:	98 1b       	sub	r25, r24
    2ea8:	92 23       	and	r25, r18
    2eaa:	84 81       	ldd	r24, Z+4	; 0x04
    2eac:	98 17       	cp	r25, r24
    2eae:	61 f0       	breq	.+24     	; 0x2ec8 <__vector_25+0x6a>
    2eb0:	83 81       	ldd	r24, Z+3	; 0x03
    2eb2:	26 95       	lsr	r18
    2eb4:	28 23       	and	r18, r24
    2eb6:	c0 81       	ld	r28, Z
    2eb8:	d1 81       	ldd	r29, Z+1	; 0x01
    2eba:	c2 0f       	add	r28, r18
    2ebc:	d1 1d       	adc	r29, r1
    2ebe:	68 83       	st	Y, r22
    2ec0:	8f 5f       	subi	r24, 0xFF	; 255
    2ec2:	95 81       	ldd	r25, Z+5	; 0x05
    2ec4:	89 23       	and	r24, r25
    2ec6:	83 83       	std	Z+3, r24	; 0x03
    2ec8:	16 96       	adiw	r26, 0x06	; 6
    2eca:	ed 91       	ld	r30, X+
    2ecc:	fc 91       	ld	r31, X
    2ece:	17 97       	sbiw	r26, 0x07	; 7
    2ed0:	30 97       	sbiw	r30, 0x00	; 0
    2ed2:	11 f0       	breq	.+4      	; 0x2ed8 <__vector_25+0x7a>
    2ed4:	cd 01       	movw	r24, r26
    2ed6:	19 95       	eicall
    2ed8:	ff 91       	pop	r31
    2eda:	ef 91       	pop	r30
    2edc:	df 91       	pop	r29
    2ede:	cf 91       	pop	r28
    2ee0:	bf 91       	pop	r27
    2ee2:	af 91       	pop	r26
    2ee4:	9f 91       	pop	r25
    2ee6:	8f 91       	pop	r24
    2ee8:	7f 91       	pop	r23
    2eea:	6f 91       	pop	r22
    2eec:	5f 91       	pop	r21
    2eee:	4f 91       	pop	r20
    2ef0:	3f 91       	pop	r19
    2ef2:	2f 91       	pop	r18
    2ef4:	0f 90       	pop	r0
    2ef6:	0b be       	out	0x3b, r0	; 59
    2ef8:	0f 90       	pop	r0
    2efa:	0f be       	out	0x3f, r0	; 63
    2efc:	0f 90       	pop	r0
    2efe:	1f 90       	pop	r1
    2f00:	18 95       	reti

00002f02 <__vector_26>:
    2f02:	1f 92       	push	r1
    2f04:	0f 92       	push	r0
    2f06:	0f b6       	in	r0, 0x3f	; 63
    2f08:	0f 92       	push	r0
    2f0a:	11 24       	eor	r1, r1
    2f0c:	0b b6       	in	r0, 0x3b	; 59
    2f0e:	0f 92       	push	r0
    2f10:	2f 93       	push	r18
    2f12:	8f 93       	push	r24
    2f14:	9f 93       	push	r25
    2f16:	af 93       	push	r26
    2f18:	bf 93       	push	r27
    2f1a:	ef 93       	push	r30
    2f1c:	ff 93       	push	r31
    2f1e:	e0 91 9e 08 	lds	r30, 0x089E	; 0x80089e <_ser_handle>
    2f22:	f0 91 9f 08 	lds	r31, 0x089F	; 0x80089f <_ser_handle+0x1>
    2f26:	30 97       	sbiw	r30, 0x00	; 0
    2f28:	b9 f0       	breq	.+46     	; 0x2f58 <__vector_26+0x56>
    2f2a:	02 80       	ldd	r0, Z+2	; 0x02
    2f2c:	f3 81       	ldd	r31, Z+3	; 0x03
    2f2e:	e0 2d       	mov	r30, r0
    2f30:	93 81       	ldd	r25, Z+3	; 0x03
    2f32:	82 81       	ldd	r24, Z+2	; 0x02
    2f34:	98 17       	cp	r25, r24
    2f36:	b1 f0       	breq	.+44     	; 0x2f64 <__vector_26+0x62>
    2f38:	92 81       	ldd	r25, Z+2	; 0x02
    2f3a:	85 81       	ldd	r24, Z+5	; 0x05
    2f3c:	28 2f       	mov	r18, r24
    2f3e:	26 95       	lsr	r18
    2f40:	29 23       	and	r18, r25
    2f42:	a0 81       	ld	r26, Z
    2f44:	b1 81       	ldd	r27, Z+1	; 0x01
    2f46:	a2 0f       	add	r26, r18
    2f48:	b1 1d       	adc	r27, r1
    2f4a:	2c 91       	ld	r18, X
    2f4c:	9f 5f       	subi	r25, 0xFF	; 255
    2f4e:	89 23       	and	r24, r25
    2f50:	82 83       	std	Z+2, r24	; 0x02
    2f52:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    2f56:	0b c0       	rjmp	.+22     	; 0x2f6e <__vector_26+0x6c>
    2f58:	e1 ec       	ldi	r30, 0xC1	; 193
    2f5a:	f0 e0       	ldi	r31, 0x00	; 0
    2f5c:	80 81       	ld	r24, Z
    2f5e:	8f 7d       	andi	r24, 0xDF	; 223
    2f60:	80 83       	st	Z, r24
    2f62:	05 c0       	rjmp	.+10     	; 0x2f6e <__vector_26+0x6c>
    2f64:	e1 ec       	ldi	r30, 0xC1	; 193
    2f66:	f0 e0       	ldi	r31, 0x00	; 0
    2f68:	80 81       	ld	r24, Z
    2f6a:	8f 7d       	andi	r24, 0xDF	; 223
    2f6c:	80 83       	st	Z, r24
    2f6e:	ff 91       	pop	r31
    2f70:	ef 91       	pop	r30
    2f72:	bf 91       	pop	r27
    2f74:	af 91       	pop	r26
    2f76:	9f 91       	pop	r25
    2f78:	8f 91       	pop	r24
    2f7a:	2f 91       	pop	r18
    2f7c:	0f 90       	pop	r0
    2f7e:	0b be       	out	0x3b, r0	; 59
    2f80:	0f 90       	pop	r0
    2f82:	0f be       	out	0x3f, r0	; 63
    2f84:	0f 90       	pop	r0
    2f86:	1f 90       	pop	r1
    2f88:	18 95       	reti

00002f8a <__vector_36>:
    2f8a:	1f 92       	push	r1
    2f8c:	0f 92       	push	r0
    2f8e:	0f b6       	in	r0, 0x3f	; 63
    2f90:	0f 92       	push	r0
    2f92:	11 24       	eor	r1, r1
    2f94:	0b b6       	in	r0, 0x3b	; 59
    2f96:	0f 92       	push	r0
    2f98:	2f 93       	push	r18
    2f9a:	3f 93       	push	r19
    2f9c:	4f 93       	push	r20
    2f9e:	5f 93       	push	r21
    2fa0:	6f 93       	push	r22
    2fa2:	7f 93       	push	r23
    2fa4:	8f 93       	push	r24
    2fa6:	9f 93       	push	r25
    2fa8:	af 93       	push	r26
    2faa:	bf 93       	push	r27
    2fac:	cf 93       	push	r28
    2fae:	df 93       	push	r29
    2fb0:	ef 93       	push	r30
    2fb2:	ff 93       	push	r31
    2fb4:	a0 91 a0 08 	lds	r26, 0x08A0	; 0x8008a0 <_ser_handle+0x2>
    2fb8:	b0 91 a1 08 	lds	r27, 0x08A1	; 0x8008a1 <_ser_handle+0x3>
    2fbc:	10 97       	sbiw	r26, 0x00	; 0
    2fbe:	11 f1       	breq	.+68     	; 0x3004 <__vector_36+0x7a>
    2fc0:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    2fc4:	14 96       	adiw	r26, 0x04	; 4
    2fc6:	ed 91       	ld	r30, X+
    2fc8:	fc 91       	ld	r31, X
    2fca:	15 97       	sbiw	r26, 0x05	; 5
    2fcc:	93 81       	ldd	r25, Z+3	; 0x03
    2fce:	82 81       	ldd	r24, Z+2	; 0x02
    2fd0:	25 81       	ldd	r18, Z+5	; 0x05
    2fd2:	98 1b       	sub	r25, r24
    2fd4:	92 23       	and	r25, r18
    2fd6:	84 81       	ldd	r24, Z+4	; 0x04
    2fd8:	98 17       	cp	r25, r24
    2fda:	61 f0       	breq	.+24     	; 0x2ff4 <__vector_36+0x6a>
    2fdc:	83 81       	ldd	r24, Z+3	; 0x03
    2fde:	26 95       	lsr	r18
    2fe0:	28 23       	and	r18, r24
    2fe2:	c0 81       	ld	r28, Z
    2fe4:	d1 81       	ldd	r29, Z+1	; 0x01
    2fe6:	c2 0f       	add	r28, r18
    2fe8:	d1 1d       	adc	r29, r1
    2fea:	68 83       	st	Y, r22
    2fec:	8f 5f       	subi	r24, 0xFF	; 255
    2fee:	95 81       	ldd	r25, Z+5	; 0x05
    2ff0:	89 23       	and	r24, r25
    2ff2:	83 83       	std	Z+3, r24	; 0x03
    2ff4:	16 96       	adiw	r26, 0x06	; 6
    2ff6:	ed 91       	ld	r30, X+
    2ff8:	fc 91       	ld	r31, X
    2ffa:	17 97       	sbiw	r26, 0x07	; 7
    2ffc:	30 97       	sbiw	r30, 0x00	; 0
    2ffe:	11 f0       	breq	.+4      	; 0x3004 <__vector_36+0x7a>
    3000:	cd 01       	movw	r24, r26
    3002:	19 95       	eicall
    3004:	ff 91       	pop	r31
    3006:	ef 91       	pop	r30
    3008:	df 91       	pop	r29
    300a:	cf 91       	pop	r28
    300c:	bf 91       	pop	r27
    300e:	af 91       	pop	r26
    3010:	9f 91       	pop	r25
    3012:	8f 91       	pop	r24
    3014:	7f 91       	pop	r23
    3016:	6f 91       	pop	r22
    3018:	5f 91       	pop	r21
    301a:	4f 91       	pop	r20
    301c:	3f 91       	pop	r19
    301e:	2f 91       	pop	r18
    3020:	0f 90       	pop	r0
    3022:	0b be       	out	0x3b, r0	; 59
    3024:	0f 90       	pop	r0
    3026:	0f be       	out	0x3f, r0	; 63
    3028:	0f 90       	pop	r0
    302a:	1f 90       	pop	r1
    302c:	18 95       	reti

0000302e <__vector_37>:
    302e:	1f 92       	push	r1
    3030:	0f 92       	push	r0
    3032:	0f b6       	in	r0, 0x3f	; 63
    3034:	0f 92       	push	r0
    3036:	11 24       	eor	r1, r1
    3038:	0b b6       	in	r0, 0x3b	; 59
    303a:	0f 92       	push	r0
    303c:	2f 93       	push	r18
    303e:	8f 93       	push	r24
    3040:	9f 93       	push	r25
    3042:	af 93       	push	r26
    3044:	bf 93       	push	r27
    3046:	ef 93       	push	r30
    3048:	ff 93       	push	r31
    304a:	e0 91 a0 08 	lds	r30, 0x08A0	; 0x8008a0 <_ser_handle+0x2>
    304e:	f0 91 a1 08 	lds	r31, 0x08A1	; 0x8008a1 <_ser_handle+0x3>
    3052:	30 97       	sbiw	r30, 0x00	; 0
    3054:	b9 f0       	breq	.+46     	; 0x3084 <__vector_37+0x56>
    3056:	02 80       	ldd	r0, Z+2	; 0x02
    3058:	f3 81       	ldd	r31, Z+3	; 0x03
    305a:	e0 2d       	mov	r30, r0
    305c:	93 81       	ldd	r25, Z+3	; 0x03
    305e:	82 81       	ldd	r24, Z+2	; 0x02
    3060:	98 17       	cp	r25, r24
    3062:	b1 f0       	breq	.+44     	; 0x3090 <__vector_37+0x62>
    3064:	92 81       	ldd	r25, Z+2	; 0x02
    3066:	85 81       	ldd	r24, Z+5	; 0x05
    3068:	28 2f       	mov	r18, r24
    306a:	26 95       	lsr	r18
    306c:	29 23       	and	r18, r25
    306e:	a0 81       	ld	r26, Z
    3070:	b1 81       	ldd	r27, Z+1	; 0x01
    3072:	a2 0f       	add	r26, r18
    3074:	b1 1d       	adc	r27, r1
    3076:	2c 91       	ld	r18, X
    3078:	9f 5f       	subi	r25, 0xFF	; 255
    307a:	89 23       	and	r24, r25
    307c:	82 83       	std	Z+2, r24	; 0x02
    307e:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3082:	0b c0       	rjmp	.+22     	; 0x309a <__vector_37+0x6c>
    3084:	e9 ec       	ldi	r30, 0xC9	; 201
    3086:	f0 e0       	ldi	r31, 0x00	; 0
    3088:	80 81       	ld	r24, Z
    308a:	8f 7d       	andi	r24, 0xDF	; 223
    308c:	80 83       	st	Z, r24
    308e:	05 c0       	rjmp	.+10     	; 0x309a <__vector_37+0x6c>
    3090:	e9 ec       	ldi	r30, 0xC9	; 201
    3092:	f0 e0       	ldi	r31, 0x00	; 0
    3094:	80 81       	ld	r24, Z
    3096:	8f 7d       	andi	r24, 0xDF	; 223
    3098:	80 83       	st	Z, r24
    309a:	ff 91       	pop	r31
    309c:	ef 91       	pop	r30
    309e:	bf 91       	pop	r27
    30a0:	af 91       	pop	r26
    30a2:	9f 91       	pop	r25
    30a4:	8f 91       	pop	r24
    30a6:	2f 91       	pop	r18
    30a8:	0f 90       	pop	r0
    30aa:	0b be       	out	0x3b, r0	; 59
    30ac:	0f 90       	pop	r0
    30ae:	0f be       	out	0x3f, r0	; 63
    30b0:	0f 90       	pop	r0
    30b2:	1f 90       	pop	r1
    30b4:	18 95       	reti

000030b6 <__vector_51>:
    30b6:	1f 92       	push	r1
    30b8:	0f 92       	push	r0
    30ba:	0f b6       	in	r0, 0x3f	; 63
    30bc:	0f 92       	push	r0
    30be:	11 24       	eor	r1, r1
    30c0:	0b b6       	in	r0, 0x3b	; 59
    30c2:	0f 92       	push	r0
    30c4:	2f 93       	push	r18
    30c6:	3f 93       	push	r19
    30c8:	4f 93       	push	r20
    30ca:	5f 93       	push	r21
    30cc:	6f 93       	push	r22
    30ce:	7f 93       	push	r23
    30d0:	8f 93       	push	r24
    30d2:	9f 93       	push	r25
    30d4:	af 93       	push	r26
    30d6:	bf 93       	push	r27
    30d8:	cf 93       	push	r28
    30da:	df 93       	push	r29
    30dc:	ef 93       	push	r30
    30de:	ff 93       	push	r31
    30e0:	a0 91 a2 08 	lds	r26, 0x08A2	; 0x8008a2 <_ser_handle+0x4>
    30e4:	b0 91 a3 08 	lds	r27, 0x08A3	; 0x8008a3 <_ser_handle+0x5>
    30e8:	10 97       	sbiw	r26, 0x00	; 0
    30ea:	11 f1       	breq	.+68     	; 0x3130 <__vector_51+0x7a>
    30ec:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    30f0:	14 96       	adiw	r26, 0x04	; 4
    30f2:	ed 91       	ld	r30, X+
    30f4:	fc 91       	ld	r31, X
    30f6:	15 97       	sbiw	r26, 0x05	; 5
    30f8:	93 81       	ldd	r25, Z+3	; 0x03
    30fa:	82 81       	ldd	r24, Z+2	; 0x02
    30fc:	25 81       	ldd	r18, Z+5	; 0x05
    30fe:	98 1b       	sub	r25, r24
    3100:	92 23       	and	r25, r18
    3102:	84 81       	ldd	r24, Z+4	; 0x04
    3104:	98 17       	cp	r25, r24
    3106:	61 f0       	breq	.+24     	; 0x3120 <__vector_51+0x6a>
    3108:	83 81       	ldd	r24, Z+3	; 0x03
    310a:	26 95       	lsr	r18
    310c:	28 23       	and	r18, r24
    310e:	c0 81       	ld	r28, Z
    3110:	d1 81       	ldd	r29, Z+1	; 0x01
    3112:	c2 0f       	add	r28, r18
    3114:	d1 1d       	adc	r29, r1
    3116:	68 83       	st	Y, r22
    3118:	8f 5f       	subi	r24, 0xFF	; 255
    311a:	95 81       	ldd	r25, Z+5	; 0x05
    311c:	89 23       	and	r24, r25
    311e:	83 83       	std	Z+3, r24	; 0x03
    3120:	16 96       	adiw	r26, 0x06	; 6
    3122:	ed 91       	ld	r30, X+
    3124:	fc 91       	ld	r31, X
    3126:	17 97       	sbiw	r26, 0x07	; 7
    3128:	30 97       	sbiw	r30, 0x00	; 0
    312a:	11 f0       	breq	.+4      	; 0x3130 <__vector_51+0x7a>
    312c:	cd 01       	movw	r24, r26
    312e:	19 95       	eicall
    3130:	ff 91       	pop	r31
    3132:	ef 91       	pop	r30
    3134:	df 91       	pop	r29
    3136:	cf 91       	pop	r28
    3138:	bf 91       	pop	r27
    313a:	af 91       	pop	r26
    313c:	9f 91       	pop	r25
    313e:	8f 91       	pop	r24
    3140:	7f 91       	pop	r23
    3142:	6f 91       	pop	r22
    3144:	5f 91       	pop	r21
    3146:	4f 91       	pop	r20
    3148:	3f 91       	pop	r19
    314a:	2f 91       	pop	r18
    314c:	0f 90       	pop	r0
    314e:	0b be       	out	0x3b, r0	; 59
    3150:	0f 90       	pop	r0
    3152:	0f be       	out	0x3f, r0	; 63
    3154:	0f 90       	pop	r0
    3156:	1f 90       	pop	r1
    3158:	18 95       	reti

0000315a <__vector_52>:
    315a:	1f 92       	push	r1
    315c:	0f 92       	push	r0
    315e:	0f b6       	in	r0, 0x3f	; 63
    3160:	0f 92       	push	r0
    3162:	11 24       	eor	r1, r1
    3164:	0b b6       	in	r0, 0x3b	; 59
    3166:	0f 92       	push	r0
    3168:	2f 93       	push	r18
    316a:	8f 93       	push	r24
    316c:	9f 93       	push	r25
    316e:	af 93       	push	r26
    3170:	bf 93       	push	r27
    3172:	ef 93       	push	r30
    3174:	ff 93       	push	r31
    3176:	e0 91 a2 08 	lds	r30, 0x08A2	; 0x8008a2 <_ser_handle+0x4>
    317a:	f0 91 a3 08 	lds	r31, 0x08A3	; 0x8008a3 <_ser_handle+0x5>
    317e:	30 97       	sbiw	r30, 0x00	; 0
    3180:	b9 f0       	breq	.+46     	; 0x31b0 <__vector_52+0x56>
    3182:	02 80       	ldd	r0, Z+2	; 0x02
    3184:	f3 81       	ldd	r31, Z+3	; 0x03
    3186:	e0 2d       	mov	r30, r0
    3188:	93 81       	ldd	r25, Z+3	; 0x03
    318a:	82 81       	ldd	r24, Z+2	; 0x02
    318c:	98 17       	cp	r25, r24
    318e:	b1 f0       	breq	.+44     	; 0x31bc <__vector_52+0x62>
    3190:	92 81       	ldd	r25, Z+2	; 0x02
    3192:	85 81       	ldd	r24, Z+5	; 0x05
    3194:	28 2f       	mov	r18, r24
    3196:	26 95       	lsr	r18
    3198:	29 23       	and	r18, r25
    319a:	a0 81       	ld	r26, Z
    319c:	b1 81       	ldd	r27, Z+1	; 0x01
    319e:	a2 0f       	add	r26, r18
    31a0:	b1 1d       	adc	r27, r1
    31a2:	2c 91       	ld	r18, X
    31a4:	9f 5f       	subi	r25, 0xFF	; 255
    31a6:	89 23       	and	r24, r25
    31a8:	82 83       	std	Z+2, r24	; 0x02
    31aa:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    31ae:	0b c0       	rjmp	.+22     	; 0x31c6 <__vector_52+0x6c>
    31b0:	e1 ed       	ldi	r30, 0xD1	; 209
    31b2:	f0 e0       	ldi	r31, 0x00	; 0
    31b4:	80 81       	ld	r24, Z
    31b6:	8f 7d       	andi	r24, 0xDF	; 223
    31b8:	80 83       	st	Z, r24
    31ba:	05 c0       	rjmp	.+10     	; 0x31c6 <__vector_52+0x6c>
    31bc:	e1 ed       	ldi	r30, 0xD1	; 209
    31be:	f0 e0       	ldi	r31, 0x00	; 0
    31c0:	80 81       	ld	r24, Z
    31c2:	8f 7d       	andi	r24, 0xDF	; 223
    31c4:	80 83       	st	Z, r24
    31c6:	ff 91       	pop	r31
    31c8:	ef 91       	pop	r30
    31ca:	bf 91       	pop	r27
    31cc:	af 91       	pop	r26
    31ce:	9f 91       	pop	r25
    31d0:	8f 91       	pop	r24
    31d2:	2f 91       	pop	r18
    31d4:	0f 90       	pop	r0
    31d6:	0b be       	out	0x3b, r0	; 59
    31d8:	0f 90       	pop	r0
    31da:	0f be       	out	0x3f, r0	; 63
    31dc:	0f 90       	pop	r0
    31de:	1f 90       	pop	r1
    31e0:	18 95       	reti

000031e2 <__vector_54>:
    31e2:	1f 92       	push	r1
    31e4:	0f 92       	push	r0
    31e6:	0f b6       	in	r0, 0x3f	; 63
    31e8:	0f 92       	push	r0
    31ea:	11 24       	eor	r1, r1
    31ec:	0b b6       	in	r0, 0x3b	; 59
    31ee:	0f 92       	push	r0
    31f0:	2f 93       	push	r18
    31f2:	3f 93       	push	r19
    31f4:	4f 93       	push	r20
    31f6:	5f 93       	push	r21
    31f8:	6f 93       	push	r22
    31fa:	7f 93       	push	r23
    31fc:	8f 93       	push	r24
    31fe:	9f 93       	push	r25
    3200:	af 93       	push	r26
    3202:	bf 93       	push	r27
    3204:	cf 93       	push	r28
    3206:	df 93       	push	r29
    3208:	ef 93       	push	r30
    320a:	ff 93       	push	r31
    320c:	a0 91 a4 08 	lds	r26, 0x08A4	; 0x8008a4 <_ser_handle+0x6>
    3210:	b0 91 a5 08 	lds	r27, 0x08A5	; 0x8008a5 <_ser_handle+0x7>
    3214:	10 97       	sbiw	r26, 0x00	; 0
    3216:	11 f1       	breq	.+68     	; 0x325c <__vector_54+0x7a>
    3218:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    321c:	14 96       	adiw	r26, 0x04	; 4
    321e:	ed 91       	ld	r30, X+
    3220:	fc 91       	ld	r31, X
    3222:	15 97       	sbiw	r26, 0x05	; 5
    3224:	93 81       	ldd	r25, Z+3	; 0x03
    3226:	82 81       	ldd	r24, Z+2	; 0x02
    3228:	25 81       	ldd	r18, Z+5	; 0x05
    322a:	98 1b       	sub	r25, r24
    322c:	92 23       	and	r25, r18
    322e:	84 81       	ldd	r24, Z+4	; 0x04
    3230:	98 17       	cp	r25, r24
    3232:	61 f0       	breq	.+24     	; 0x324c <__vector_54+0x6a>
    3234:	83 81       	ldd	r24, Z+3	; 0x03
    3236:	26 95       	lsr	r18
    3238:	28 23       	and	r18, r24
    323a:	c0 81       	ld	r28, Z
    323c:	d1 81       	ldd	r29, Z+1	; 0x01
    323e:	c2 0f       	add	r28, r18
    3240:	d1 1d       	adc	r29, r1
    3242:	68 83       	st	Y, r22
    3244:	8f 5f       	subi	r24, 0xFF	; 255
    3246:	95 81       	ldd	r25, Z+5	; 0x05
    3248:	89 23       	and	r24, r25
    324a:	83 83       	std	Z+3, r24	; 0x03
    324c:	16 96       	adiw	r26, 0x06	; 6
    324e:	ed 91       	ld	r30, X+
    3250:	fc 91       	ld	r31, X
    3252:	17 97       	sbiw	r26, 0x07	; 7
    3254:	30 97       	sbiw	r30, 0x00	; 0
    3256:	11 f0       	breq	.+4      	; 0x325c <__vector_54+0x7a>
    3258:	cd 01       	movw	r24, r26
    325a:	19 95       	eicall
    325c:	ff 91       	pop	r31
    325e:	ef 91       	pop	r30
    3260:	df 91       	pop	r29
    3262:	cf 91       	pop	r28
    3264:	bf 91       	pop	r27
    3266:	af 91       	pop	r26
    3268:	9f 91       	pop	r25
    326a:	8f 91       	pop	r24
    326c:	7f 91       	pop	r23
    326e:	6f 91       	pop	r22
    3270:	5f 91       	pop	r21
    3272:	4f 91       	pop	r20
    3274:	3f 91       	pop	r19
    3276:	2f 91       	pop	r18
    3278:	0f 90       	pop	r0
    327a:	0b be       	out	0x3b, r0	; 59
    327c:	0f 90       	pop	r0
    327e:	0f be       	out	0x3f, r0	; 63
    3280:	0f 90       	pop	r0
    3282:	1f 90       	pop	r1
    3284:	18 95       	reti

00003286 <__vector_55>:
    3286:	1f 92       	push	r1
    3288:	0f 92       	push	r0
    328a:	0f b6       	in	r0, 0x3f	; 63
    328c:	0f 92       	push	r0
    328e:	11 24       	eor	r1, r1
    3290:	0b b6       	in	r0, 0x3b	; 59
    3292:	0f 92       	push	r0
    3294:	2f 93       	push	r18
    3296:	8f 93       	push	r24
    3298:	9f 93       	push	r25
    329a:	af 93       	push	r26
    329c:	bf 93       	push	r27
    329e:	ef 93       	push	r30
    32a0:	ff 93       	push	r31
    32a2:	e0 91 a4 08 	lds	r30, 0x08A4	; 0x8008a4 <_ser_handle+0x6>
    32a6:	f0 91 a5 08 	lds	r31, 0x08A5	; 0x8008a5 <_ser_handle+0x7>
    32aa:	30 97       	sbiw	r30, 0x00	; 0
    32ac:	b9 f0       	breq	.+46     	; 0x32dc <__vector_55+0x56>
    32ae:	02 80       	ldd	r0, Z+2	; 0x02
    32b0:	f3 81       	ldd	r31, Z+3	; 0x03
    32b2:	e0 2d       	mov	r30, r0
    32b4:	93 81       	ldd	r25, Z+3	; 0x03
    32b6:	82 81       	ldd	r24, Z+2	; 0x02
    32b8:	98 17       	cp	r25, r24
    32ba:	b1 f0       	breq	.+44     	; 0x32e8 <__vector_55+0x62>
    32bc:	92 81       	ldd	r25, Z+2	; 0x02
    32be:	85 81       	ldd	r24, Z+5	; 0x05
    32c0:	28 2f       	mov	r18, r24
    32c2:	26 95       	lsr	r18
    32c4:	29 23       	and	r18, r25
    32c6:	a0 81       	ld	r26, Z
    32c8:	b1 81       	ldd	r27, Z+1	; 0x01
    32ca:	a2 0f       	add	r26, r18
    32cc:	b1 1d       	adc	r27, r1
    32ce:	2c 91       	ld	r18, X
    32d0:	9f 5f       	subi	r25, 0xFF	; 255
    32d2:	89 23       	and	r24, r25
    32d4:	82 83       	std	Z+2, r24	; 0x02
    32d6:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    32da:	0b c0       	rjmp	.+22     	; 0x32f2 <__vector_55+0x6c>
    32dc:	e1 e3       	ldi	r30, 0x31	; 49
    32de:	f1 e0       	ldi	r31, 0x01	; 1
    32e0:	80 81       	ld	r24, Z
    32e2:	8f 7d       	andi	r24, 0xDF	; 223
    32e4:	80 83       	st	Z, r24
    32e6:	05 c0       	rjmp	.+10     	; 0x32f2 <__vector_55+0x6c>
    32e8:	e1 e3       	ldi	r30, 0x31	; 49
    32ea:	f1 e0       	ldi	r31, 0x01	; 1
    32ec:	80 81       	ld	r24, Z
    32ee:	8f 7d       	andi	r24, 0xDF	; 223
    32f0:	80 83       	st	Z, r24
    32f2:	ff 91       	pop	r31
    32f4:	ef 91       	pop	r30
    32f6:	bf 91       	pop	r27
    32f8:	af 91       	pop	r26
    32fa:	9f 91       	pop	r25
    32fc:	8f 91       	pop	r24
    32fe:	2f 91       	pop	r18
    3300:	0f 90       	pop	r0
    3302:	0b be       	out	0x3b, r0	; 59
    3304:	0f 90       	pop	r0
    3306:	0f be       	out	0x3f, r0	; 63
    3308:	0f 90       	pop	r0
    330a:	1f 90       	pop	r1
    330c:	18 95       	reti

0000330e <fifo_init>:
    330e:	fc 01       	movw	r30, r24
    3310:	41 11       	cpse	r20, r1
    3312:	02 c0       	rjmp	.+4      	; 0x3318 <fifo_init+0xa>
    3314:	0e 94 f5 26 	call	0x4dea	; 0x4dea <abort>
    3318:	84 2f       	mov	r24, r20
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	9c 01       	movw	r18, r24
    331e:	21 50       	subi	r18, 0x01	; 1
    3320:	31 09       	sbc	r19, r1
    3322:	82 23       	and	r24, r18
    3324:	93 23       	and	r25, r19
    3326:	89 2b       	or	r24, r25
    3328:	11 f0       	breq	.+4      	; 0x332e <fifo_init+0x20>
    332a:	0e 94 f5 26 	call	0x4dea	; 0x4dea <abort>
    332e:	41 38       	cpi	r20, 0x81	; 129
    3330:	10 f0       	brcs	.+4      	; 0x3336 <fifo_init+0x28>
    3332:	0e 94 f5 26 	call	0x4dea	; 0x4dea <abort>
    3336:	12 82       	std	Z+2, r1	; 0x02
    3338:	13 82       	std	Z+3, r1	; 0x03
    333a:	44 83       	std	Z+4, r20	; 0x04
    333c:	44 0f       	add	r20, r20
    333e:	41 50       	subi	r20, 0x01	; 1
    3340:	45 83       	std	Z+5, r20	; 0x05
    3342:	71 83       	std	Z+1, r23	; 0x01
    3344:	60 83       	st	Z, r22
    3346:	80 e0       	ldi	r24, 0x00	; 0
    3348:	90 e0       	ldi	r25, 0x00	; 0
    334a:	08 95       	ret

0000334c <hal_create>:
    334c:	e4 e7       	ldi	r30, 0x74	; 116
    334e:	fa e0       	ldi	r31, 0x0A	; 10
    3350:	28 e7       	ldi	r18, 0x78	; 120
    3352:	3f e1       	ldi	r19, 0x1F	; 31
    3354:	31 83       	std	Z+1, r19	; 0x01
    3356:	20 83       	st	Z, r18
    3358:	2b e7       	ldi	r18, 0x7B	; 123
    335a:	3f e1       	ldi	r19, 0x1F	; 31
    335c:	33 83       	std	Z+3, r19	; 0x03
    335e:	22 83       	std	Z+2, r18	; 0x02
    3360:	26 e8       	ldi	r18, 0x86	; 134
    3362:	3f e1       	ldi	r19, 0x1F	; 31
    3364:	35 83       	std	Z+5, r19	; 0x05
    3366:	24 83       	std	Z+4, r18	; 0x04
    3368:	2a e8       	ldi	r18, 0x8A	; 138
    336a:	3f e1       	ldi	r19, 0x1F	; 31
    336c:	37 83       	std	Z+7, r19	; 0x07
    336e:	26 83       	std	Z+6, r18	; 0x06
    3370:	20 e9       	ldi	r18, 0x90	; 144
    3372:	3f e1       	ldi	r19, 0x1F	; 31
    3374:	31 87       	std	Z+9, r19	; 0x09
    3376:	20 87       	std	Z+8, r18	; 0x08
    3378:	2c e9       	ldi	r18, 0x9C	; 156
    337a:	3f e1       	ldi	r19, 0x1F	; 31
    337c:	33 87       	std	Z+11, r19	; 0x0b
    337e:	22 87       	std	Z+10, r18	; 0x0a
    3380:	21 ea       	ldi	r18, 0xA1	; 161
    3382:	3f e1       	ldi	r19, 0x1F	; 31
    3384:	35 87       	std	Z+13, r19	; 0x0d
    3386:	24 87       	std	Z+12, r18	; 0x0c
    3388:	2d ea       	ldi	r18, 0xAD	; 173
    338a:	3f e1       	ldi	r19, 0x1F	; 31
    338c:	37 87       	std	Z+15, r19	; 0x0f
    338e:	26 87       	std	Z+14, r18	; 0x0e
    3390:	2d e8       	ldi	r18, 0x8D	; 141
    3392:	3f e1       	ldi	r19, 0x1F	; 31
    3394:	31 8b       	std	Z+17, r19	; 0x11
    3396:	20 8b       	std	Z+16, r18	; 0x10
    3398:	22 eb       	ldi	r18, 0xB2	; 178
    339a:	3f e1       	ldi	r19, 0x1F	; 31
    339c:	33 8b       	std	Z+19, r19	; 0x13
    339e:	22 8b       	std	Z+18, r18	; 0x12
    33a0:	2f eb       	ldi	r18, 0xBF	; 191
    33a2:	3f e1       	ldi	r19, 0x1F	; 31
    33a4:	35 8b       	std	Z+21, r19	; 0x15
    33a6:	24 8b       	std	Z+20, r18	; 0x14
    33a8:	68 2f       	mov	r22, r24
    33aa:	cf 01       	movw	r24, r30
    33ac:	3c c1       	rjmp	.+632    	; 0x3626 <led_create>
    33ae:	08 95       	ret

000033b0 <_hihTwiCallback>:
    33b0:	65 30       	cpi	r22, 0x05	; 5
    33b2:	f1 f4       	brne	.+60     	; 0x33f0 <_hihTwiCallback+0x40>
    33b4:	fa 01       	movw	r30, r20
    33b6:	80 81       	ld	r24, Z
    33b8:	8f 73       	andi	r24, 0x3F	; 63
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	98 2f       	mov	r25, r24
    33be:	88 27       	eor	r24, r24
    33c0:	21 81       	ldd	r18, Z+1	; 0x01
    33c2:	82 2b       	or	r24, r18
    33c4:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <_hum+0x1>
    33c8:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <_hum>
    33cc:	82 81       	ldd	r24, Z+2	; 0x02
    33ce:	f0 e4       	ldi	r31, 0x40	; 64
    33d0:	8f 9f       	mul	r24, r31
    33d2:	c0 01       	movw	r24, r0
    33d4:	11 24       	eor	r1, r1
    33d6:	fa 01       	movw	r30, r20
    33d8:	23 81       	ldd	r18, Z+3	; 0x03
    33da:	26 95       	lsr	r18
    33dc:	26 95       	lsr	r18
    33de:	82 2b       	or	r24, r18
    33e0:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <_temp+0x1>
    33e4:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_temp>
    33e8:	81 e0       	ldi	r24, 0x01	; 1
    33ea:	80 93 a6 08 	sts	0x08A6, r24	; 0x8008a6 <_measuringIsReady>
    33ee:	08 95       	ret
    33f0:	64 30       	cpi	r22, 0x04	; 4
    33f2:	51 f0       	breq	.+20     	; 0x3408 <_hihTwiCallback+0x58>
    33f4:	80 e0       	ldi	r24, 0x00	; 0
    33f6:	90 e4       	ldi	r25, 0x40	; 64
    33f8:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <_temp+0x1>
    33fc:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_temp>
    3400:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <_hum+0x1>
    3404:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <_hum>
    3408:	08 95       	ret

0000340a <hih8120Create>:
    340a:	0f 93       	push	r16
    340c:	1f 93       	push	r17
    340e:	08 ed       	ldi	r16, 0xD8	; 216
    3410:	19 e1       	ldi	r17, 0x19	; 25
    3412:	20 e0       	ldi	r18, 0x00	; 0
    3414:	34 e2       	ldi	r19, 0x24	; 36
    3416:	44 ef       	ldi	r20, 0xF4	; 244
    3418:	50 e0       	ldi	r21, 0x00	; 0
    341a:	60 e0       	ldi	r22, 0x00	; 0
    341c:	87 e2       	ldi	r24, 0x27	; 39
    341e:	0e 94 3e 22 	call	0x447c	; 0x447c <twiCreate>
    3422:	90 93 a8 08 	sts	0x08A8, r25	; 0x8008a8 <_hih8120Handler+0x1>
    3426:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <_hih8120Handler>
    342a:	21 e0       	ldi	r18, 0x01	; 1
    342c:	89 2b       	or	r24, r25
    342e:	09 f0       	breq	.+2      	; 0x3432 <hih8120Create+0x28>
    3430:	20 e0       	ldi	r18, 0x00	; 0
    3432:	82 2f       	mov	r24, r18
    3434:	1f 91       	pop	r17
    3436:	0f 91       	pop	r16
    3438:	08 95       	ret

0000343a <hih8120Wakeup>:
    343a:	80 91 a7 08 	lds	r24, 0x08A7	; 0x8008a7 <_hih8120Handler>
    343e:	90 91 a8 08 	lds	r25, 0x08A8	; 0x8008a8 <_hih8120Handler+0x1>
    3442:	00 97       	sbiw	r24, 0x00	; 0
    3444:	59 f0       	breq	.+22     	; 0x345c <hih8120Wakeup+0x22>
    3446:	40 e0       	ldi	r20, 0x00	; 0
    3448:	60 e0       	ldi	r22, 0x00	; 0
    344a:	70 e0       	ldi	r23, 0x00	; 0
    344c:	0e 94 8f 22 	call	0x451e	; 0x451e <twiTransmit>
    3450:	84 30       	cpi	r24, 0x04	; 4
    3452:	31 f4       	brne	.+12     	; 0x3460 <hih8120Wakeup+0x26>
    3454:	10 92 a6 08 	sts	0x08A6, r1	; 0x8008a6 <_measuringIsReady>
    3458:	80 e0       	ldi	r24, 0x00	; 0
    345a:	08 95       	ret
    345c:	82 e0       	ldi	r24, 0x02	; 2
    345e:	08 95       	ret
    3460:	83 e0       	ldi	r24, 0x03	; 3
    3462:	08 95       	ret

00003464 <hih8120Meassure>:
    3464:	80 91 a7 08 	lds	r24, 0x08A7	; 0x8008a7 <_hih8120Handler>
    3468:	90 91 a8 08 	lds	r25, 0x08A8	; 0x8008a8 <_hih8120Handler+0x1>
    346c:	00 97       	sbiw	r24, 0x00	; 0
    346e:	39 f0       	breq	.+14     	; 0x347e <hih8120Meassure+0x1a>
    3470:	64 e0       	ldi	r22, 0x04	; 4
    3472:	0e 94 db 22 	call	0x45b6	; 0x45b6 <twiReceive>
    3476:	85 30       	cpi	r24, 0x05	; 5
    3478:	21 f0       	breq	.+8      	; 0x3482 <hih8120Meassure+0x1e>
    347a:	83 e0       	ldi	r24, 0x03	; 3
    347c:	08 95       	ret
    347e:	82 e0       	ldi	r24, 0x02	; 2
    3480:	08 95       	ret
    3482:	80 e0       	ldi	r24, 0x00	; 0
    3484:	08 95       	ret

00003486 <hih8120GetHumidity>:
    3486:	60 91 1e 02 	lds	r22, 0x021E	; 0x80021e <_hum>
    348a:	70 91 1f 02 	lds	r23, 0x021F	; 0x80021f <_hum+0x1>
    348e:	80 e0       	ldi	r24, 0x00	; 0
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	0e 94 9d 24 	call	0x493a	; 0x493a <__floatunsisf>
    3496:	20 e0       	ldi	r18, 0x00	; 0
    3498:	30 e0       	ldi	r19, 0x00	; 0
    349a:	48 ec       	ldi	r20, 0xC8	; 200
    349c:	52 e4       	ldi	r21, 0x42	; 66
    349e:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <__mulsf3>
    34a2:	20 e0       	ldi	r18, 0x00	; 0
    34a4:	38 ef       	ldi	r19, 0xF8	; 248
    34a6:	4f e7       	ldi	r20, 0x7F	; 127
    34a8:	56 e4       	ldi	r21, 0x46	; 70
    34aa:	0c 94 32 24 	jmp	0x4864	; 0x4864 <__divsf3>
    34ae:	08 95       	ret

000034b0 <hih8120GetTemperature>:
    34b0:	60 91 1c 02 	lds	r22, 0x021C	; 0x80021c <_temp>
    34b4:	70 91 1d 02 	lds	r23, 0x021D	; 0x80021d <_temp+0x1>
    34b8:	80 e0       	ldi	r24, 0x00	; 0
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	0e 94 9d 24 	call	0x493a	; 0x493a <__floatunsisf>
    34c0:	20 e0       	ldi	r18, 0x00	; 0
    34c2:	30 e0       	ldi	r19, 0x00	; 0
    34c4:	45 e2       	ldi	r20, 0x25	; 37
    34c6:	53 e4       	ldi	r21, 0x43	; 67
    34c8:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <__mulsf3>
    34cc:	20 e0       	ldi	r18, 0x00	; 0
    34ce:	38 ef       	ldi	r19, 0xF8	; 248
    34d0:	4f e7       	ldi	r20, 0x7F	; 127
    34d2:	56 e4       	ldi	r21, 0x46	; 70
    34d4:	0e 94 32 24 	call	0x4864	; 0x4864 <__divsf3>
    34d8:	20 e0       	ldi	r18, 0x00	; 0
    34da:	30 e0       	ldi	r19, 0x00	; 0
    34dc:	40 e2       	ldi	r20, 0x20	; 32
    34de:	52 e4       	ldi	r21, 0x42	; 66
    34e0:	0c 94 cb 23 	jmp	0x4796	; 0x4796 <__subsf3>
    34e4:	08 95       	ret

000034e6 <_turn_off>:
    34e6:	cf 93       	push	r28
    34e8:	df 93       	push	r29
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	fc 01       	movw	r30, r24
    34ee:	ee 0f       	add	r30, r30
    34f0:	ff 1f       	adc	r31, r31
    34f2:	e8 0f       	add	r30, r24
    34f4:	f9 1f       	adc	r31, r25
    34f6:	ee 0f       	add	r30, r30
    34f8:	ff 1f       	adc	r31, r31
    34fa:	e7 55       	subi	r30, 0x57	; 87
    34fc:	f7 4f       	sbci	r31, 0xF7	; 247
    34fe:	23 81       	ldd	r18, Z+3	; 0x03
    3500:	21 11       	cpse	r18, r1
    3502:	0a c0       	rjmp	.+20     	; 0x3518 <_turn_off+0x32>
    3504:	ef 01       	movw	r28, r30
    3506:	e0 91 7c 0a 	lds	r30, 0x0A7C	; 0x800a7c <register_access+0x8>
    350a:	f0 91 7d 0a 	lds	r31, 0x0A7D	; 0x800a7d <register_access+0x9>
    350e:	6a 81       	ldd	r22, Y+2	; 0x02
    3510:	88 81       	ld	r24, Y
    3512:	99 81       	ldd	r25, Y+1	; 0x01
    3514:	19 95       	eicall
    3516:	12 c0       	rjmp	.+36     	; 0x353c <_turn_off+0x56>
    3518:	dc 01       	movw	r26, r24
    351a:	aa 0f       	add	r26, r26
    351c:	bb 1f       	adc	r27, r27
    351e:	ed 01       	movw	r28, r26
    3520:	c8 0f       	add	r28, r24
    3522:	d9 1f       	adc	r29, r25
    3524:	cc 0f       	add	r28, r28
    3526:	dd 1f       	adc	r29, r29
    3528:	c7 55       	subi	r28, 0x57	; 87
    352a:	d7 4f       	sbci	r29, 0xF7	; 247
    352c:	e0 91 86 0a 	lds	r30, 0x0A86	; 0x800a86 <register_access+0x12>
    3530:	f0 91 87 0a 	lds	r31, 0x0A87	; 0x800a87 <register_access+0x13>
    3534:	6a 81       	ldd	r22, Y+2	; 0x02
    3536:	88 81       	ld	r24, Y
    3538:	99 81       	ldd	r25, Y+1	; 0x01
    353a:	19 95       	eicall
    353c:	df 91       	pop	r29
    353e:	cf 91       	pop	r28
    3540:	08 95       	ret

00003542 <_turn_on>:
    3542:	cf 93       	push	r28
    3544:	df 93       	push	r29
    3546:	90 e0       	ldi	r25, 0x00	; 0
    3548:	fc 01       	movw	r30, r24
    354a:	ee 0f       	add	r30, r30
    354c:	ff 1f       	adc	r31, r31
    354e:	e8 0f       	add	r30, r24
    3550:	f9 1f       	adc	r31, r25
    3552:	ee 0f       	add	r30, r30
    3554:	ff 1f       	adc	r31, r31
    3556:	e7 55       	subi	r30, 0x57	; 87
    3558:	f7 4f       	sbci	r31, 0xF7	; 247
    355a:	23 81       	ldd	r18, Z+3	; 0x03
    355c:	21 11       	cpse	r18, r1
    355e:	0a c0       	rjmp	.+20     	; 0x3574 <_turn_on+0x32>
    3560:	ef 01       	movw	r28, r30
    3562:	e0 91 86 0a 	lds	r30, 0x0A86	; 0x800a86 <register_access+0x12>
    3566:	f0 91 87 0a 	lds	r31, 0x0A87	; 0x800a87 <register_access+0x13>
    356a:	6a 81       	ldd	r22, Y+2	; 0x02
    356c:	88 81       	ld	r24, Y
    356e:	99 81       	ldd	r25, Y+1	; 0x01
    3570:	19 95       	eicall
    3572:	12 c0       	rjmp	.+36     	; 0x3598 <_turn_on+0x56>
    3574:	dc 01       	movw	r26, r24
    3576:	aa 0f       	add	r26, r26
    3578:	bb 1f       	adc	r27, r27
    357a:	ed 01       	movw	r28, r26
    357c:	c8 0f       	add	r28, r24
    357e:	d9 1f       	adc	r29, r25
    3580:	cc 0f       	add	r28, r28
    3582:	dd 1f       	adc	r29, r29
    3584:	c7 55       	subi	r28, 0x57	; 87
    3586:	d7 4f       	sbci	r29, 0xF7	; 247
    3588:	e0 91 7c 0a 	lds	r30, 0x0A7C	; 0x800a7c <register_access+0x8>
    358c:	f0 91 7d 0a 	lds	r31, 0x0A7D	; 0x800a7d <register_access+0x9>
    3590:	6a 81       	ldd	r22, Y+2	; 0x02
    3592:	88 81       	ld	r24, Y
    3594:	99 81       	ldd	r25, Y+1	; 0x01
    3596:	19 95       	eicall
    3598:	df 91       	pop	r29
    359a:	cf 91       	pop	r28
    359c:	08 95       	ret

0000359e <_hal_led_task>:
    359e:	8a e3       	ldi	r24, 0x3A	; 58
    35a0:	95 e0       	ldi	r25, 0x05	; 5
    35a2:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <puts>
    35a6:	0f 2e       	mov	r0, r31
    35a8:	f4 e7       	ldi	r31, 0x74	; 116
    35aa:	cf 2e       	mov	r12, r31
    35ac:	fa e0       	ldi	r31, 0x0A	; 10
    35ae:	df 2e       	mov	r13, r31
    35b0:	f0 2d       	mov	r31, r0
    35b2:	04 e0       	ldi	r16, 0x04	; 4
    35b4:	c9 ea       	ldi	r28, 0xA9	; 169
    35b6:	d8 e0       	ldi	r29, 0x08	; 8
    35b8:	10 e0       	ldi	r17, 0x00	; 0
    35ba:	8c 81       	ldd	r24, Y+4	; 0x04
    35bc:	81 30       	cpi	r24, 0x01	; 1
    35be:	69 f0       	breq	.+26     	; 0x35da <_hal_led_task+0x3c>
    35c0:	e8 f0       	brcs	.+58     	; 0x35fc <_hal_led_task+0x5e>
    35c2:	82 30       	cpi	r24, 0x02	; 2
    35c4:	39 f5       	brne	.+78     	; 0x3614 <_hal_led_task+0x76>
    35c6:	d6 01       	movw	r26, r12
    35c8:	1c 96       	adiw	r26, 0x0c	; 12
    35ca:	ed 91       	ld	r30, X+
    35cc:	fc 91       	ld	r31, X
    35ce:	1d 97       	sbiw	r26, 0x0d	; 13
    35d0:	6a 81       	ldd	r22, Y+2	; 0x02
    35d2:	88 81       	ld	r24, Y
    35d4:	99 81       	ldd	r25, Y+1	; 0x01
    35d6:	19 95       	eicall
    35d8:	1d c0       	rjmp	.+58     	; 0x3614 <_hal_led_task+0x76>
    35da:	8d 81       	ldd	r24, Y+5	; 0x05
    35dc:	8f 5f       	subi	r24, 0xFF	; 255
    35de:	8a 30       	cpi	r24, 0x0A	; 10
    35e0:	10 f4       	brcc	.+4      	; 0x35e6 <_hal_led_task+0x48>
    35e2:	8d 83       	std	Y+5, r24	; 0x05
    35e4:	17 c0       	rjmp	.+46     	; 0x3614 <_hal_led_task+0x76>
    35e6:	1d 82       	std	Y+5, r1	; 0x05
    35e8:	d6 01       	movw	r26, r12
    35ea:	1c 96       	adiw	r26, 0x0c	; 12
    35ec:	ed 91       	ld	r30, X+
    35ee:	fc 91       	ld	r31, X
    35f0:	1d 97       	sbiw	r26, 0x0d	; 13
    35f2:	6a 81       	ldd	r22, Y+2	; 0x02
    35f4:	88 81       	ld	r24, Y
    35f6:	99 81       	ldd	r25, Y+1	; 0x01
    35f8:	19 95       	eicall
    35fa:	0c c0       	rjmp	.+24     	; 0x3614 <_hal_led_task+0x76>
    35fc:	8d 81       	ldd	r24, Y+5	; 0x05
    35fe:	88 23       	and	r24, r24
    3600:	31 f0       	breq	.+12     	; 0x360e <_hal_led_task+0x70>
    3602:	81 2f       	mov	r24, r17
    3604:	9e df       	rcall	.-196    	; 0x3542 <_turn_on>
    3606:	8d 81       	ldd	r24, Y+5	; 0x05
    3608:	81 50       	subi	r24, 0x01	; 1
    360a:	8d 83       	std	Y+5, r24	; 0x05
    360c:	03 c0       	rjmp	.+6      	; 0x3614 <_hal_led_task+0x76>
    360e:	0c 83       	std	Y+4, r16	; 0x04
    3610:	81 2f       	mov	r24, r17
    3612:	69 df       	rcall	.-302    	; 0x34e6 <_turn_off>
    3614:	1f 5f       	subi	r17, 0xFF	; 255
    3616:	26 96       	adiw	r28, 0x06	; 6
    3618:	14 30       	cpi	r17, 0x04	; 4
    361a:	79 f6       	brne	.-98     	; 0x35ba <_hal_led_task+0x1c>
    361c:	85 e0       	ldi	r24, 0x05	; 5
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <vTaskDelay>
    3624:	c7 cf       	rjmp	.-114    	; 0x35b4 <_hal_led_task+0x16>

00003626 <led_create>:
    3626:	cf 92       	push	r12
    3628:	df 92       	push	r13
    362a:	ef 92       	push	r14
    362c:	ff 92       	push	r15
    362e:	0f 93       	push	r16
    3630:	1f 93       	push	r17
    3632:	cf 93       	push	r28
    3634:	df 93       	push	r29
    3636:	06 2f       	mov	r16, r22
    3638:	0f 2e       	mov	r0, r31
    363a:	f4 e7       	ldi	r31, 0x74	; 116
    363c:	ef 2e       	mov	r14, r31
    363e:	fa e0       	ldi	r31, 0x0A	; 10
    3640:	ff 2e       	mov	r15, r31
    3642:	f0 2d       	mov	r31, r0
    3644:	d7 01       	movw	r26, r14
    3646:	18 96       	adiw	r26, 0x08	; 8
    3648:	ed 91       	ld	r30, X+
    364a:	fc 91       	ld	r31, X
    364c:	19 97       	sbiw	r26, 0x09	; 9
    364e:	66 e0       	ldi	r22, 0x06	; 6
    3650:	87 e2       	ldi	r24, 0x27	; 39
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	19 95       	eicall
    3656:	c9 ea       	ldi	r28, 0xA9	; 169
    3658:	d8 e0       	ldi	r29, 0x08	; 8
    365a:	0f 2e       	mov	r0, r31
    365c:	f8 e2       	ldi	r31, 0x28	; 40
    365e:	cf 2e       	mov	r12, r31
    3660:	d1 2c       	mov	r13, r1
    3662:	f0 2d       	mov	r31, r0
    3664:	d9 82       	std	Y+1, r13	; 0x01
    3666:	c8 82       	st	Y, r12
    3668:	86 e0       	ldi	r24, 0x06	; 6
    366a:	8a 83       	std	Y+2, r24	; 0x02
    366c:	1b 82       	std	Y+3, r1	; 0x03
    366e:	14 e0       	ldi	r17, 0x04	; 4
    3670:	1c 83       	std	Y+4, r17	; 0x04
    3672:	80 e0       	ldi	r24, 0x00	; 0
    3674:	38 df       	rcall	.-400    	; 0x34e6 <_turn_off>
    3676:	d7 01       	movw	r26, r14
    3678:	18 96       	adiw	r26, 0x08	; 8
    367a:	ed 91       	ld	r30, X+
    367c:	fc 91       	ld	r31, X
    367e:	19 97       	sbiw	r26, 0x09	; 9
    3680:	67 e0       	ldi	r22, 0x07	; 7
    3682:	87 e2       	ldi	r24, 0x27	; 39
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	19 95       	eicall
    3688:	df 82       	std	Y+7, r13	; 0x07
    368a:	ce 82       	std	Y+6, r12	; 0x06
    368c:	87 e0       	ldi	r24, 0x07	; 7
    368e:	88 87       	std	Y+8, r24	; 0x08
    3690:	19 86       	std	Y+9, r1	; 0x09
    3692:	1a 87       	std	Y+10, r17	; 0x0a
    3694:	81 e0       	ldi	r24, 0x01	; 1
    3696:	27 df       	rcall	.-434    	; 0x34e6 <_turn_off>
    3698:	d7 01       	movw	r26, r14
    369a:	18 96       	adiw	r26, 0x08	; 8
    369c:	ed 91       	ld	r30, X+
    369e:	fc 91       	ld	r31, X
    36a0:	19 97       	sbiw	r26, 0x09	; 9
    36a2:	65 e0       	ldi	r22, 0x05	; 5
    36a4:	83 e3       	ldi	r24, 0x33	; 51
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	19 95       	eicall
    36aa:	d7 01       	movw	r26, r14
    36ac:	18 96       	adiw	r26, 0x08	; 8
    36ae:	ed 91       	ld	r30, X+
    36b0:	fc 91       	ld	r31, X
    36b2:	19 97       	sbiw	r26, 0x09	; 9
    36b4:	61 e0       	ldi	r22, 0x01	; 1
    36b6:	84 e3       	ldi	r24, 0x34	; 52
    36b8:	90 e0       	ldi	r25, 0x00	; 0
    36ba:	19 95       	eicall
    36bc:	84 e3       	ldi	r24, 0x34	; 52
    36be:	90 e0       	ldi	r25, 0x00	; 0
    36c0:	9d 87       	std	Y+13, r25	; 0x0d
    36c2:	8c 87       	std	Y+12, r24	; 0x0c
    36c4:	85 e0       	ldi	r24, 0x05	; 5
    36c6:	8e 87       	std	Y+14, r24	; 0x0e
    36c8:	1f 86       	std	Y+15, r1	; 0x0f
    36ca:	18 8b       	std	Y+16, r17	; 0x10
    36cc:	82 e0       	ldi	r24, 0x02	; 2
    36ce:	0b df       	rcall	.-490    	; 0x34e6 <_turn_off>
    36d0:	d7 01       	movw	r26, r14
    36d2:	18 96       	adiw	r26, 0x08	; 8
    36d4:	ed 91       	ld	r30, X+
    36d6:	fc 91       	ld	r31, X
    36d8:	19 97       	sbiw	r26, 0x09	; 9
    36da:	64 e0       	ldi	r22, 0x04	; 4
    36dc:	81 e0       	ldi	r24, 0x01	; 1
    36de:	91 e0       	ldi	r25, 0x01	; 1
    36e0:	19 95       	eicall
    36e2:	d7 01       	movw	r26, r14
    36e4:	18 96       	adiw	r26, 0x08	; 8
    36e6:	ed 91       	ld	r30, X+
    36e8:	fc 91       	ld	r31, X
    36ea:	19 97       	sbiw	r26, 0x09	; 9
    36ec:	61 e0       	ldi	r22, 0x01	; 1
    36ee:	82 e0       	ldi	r24, 0x02	; 2
    36f0:	91 e0       	ldi	r25, 0x01	; 1
    36f2:	19 95       	eicall
    36f4:	82 e0       	ldi	r24, 0x02	; 2
    36f6:	91 e0       	ldi	r25, 0x01	; 1
    36f8:	9b 8b       	std	Y+19, r25	; 0x13
    36fa:	8a 8b       	std	Y+18, r24	; 0x12
    36fc:	1c 8b       	std	Y+20, r17	; 0x14
    36fe:	1d 8a       	std	Y+21, r1	; 0x15
    3700:	1e 8b       	std	Y+22, r17	; 0x16
    3702:	83 e0       	ldi	r24, 0x03	; 3
    3704:	f0 de       	rcall	.-544    	; 0x34e6 <_turn_off>
    3706:	e1 2c       	mov	r14, r1
    3708:	f1 2c       	mov	r15, r1
    370a:	20 e0       	ldi	r18, 0x00	; 0
    370c:	30 e0       	ldi	r19, 0x00	; 0
    370e:	40 ec       	ldi	r20, 0xC0	; 192
    3710:	50 e0       	ldi	r21, 0x00	; 0
    3712:	61 e5       	ldi	r22, 0x51	; 81
    3714:	75 e0       	ldi	r23, 0x05	; 5
    3716:	8f ec       	ldi	r24, 0xCF	; 207
    3718:	9a e1       	ldi	r25, 0x1A	; 26
    371a:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <xTaskCreate>
    371e:	df 91       	pop	r29
    3720:	cf 91       	pop	r28
    3722:	1f 91       	pop	r17
    3724:	0f 91       	pop	r16
    3726:	ff 90       	pop	r15
    3728:	ef 90       	pop	r14
    372a:	df 90       	pop	r13
    372c:	cf 90       	pop	r12
    372e:	08 95       	ret

00003730 <_serial_call_back>:
    3730:	0f 93       	push	r16
    3732:	1f 93       	push	r17
    3734:	cf 93       	push	r28
    3736:	df 93       	push	r29
    3738:	1f 92       	push	r1
    373a:	1f 92       	push	r1
    373c:	cd b7       	in	r28, 0x3d	; 61
    373e:	de b7       	in	r29, 0x3e	; 62
    3740:	8c 01       	movw	r16, r24
    3742:	19 82       	std	Y+1, r1	; 0x01
    3744:	2d c0       	rjmp	.+90     	; 0x37a0 <_serial_call_back+0x70>
    3746:	e0 91 25 09 	lds	r30, 0x0925	; 0x800925 <rec_buf_inp.2926>
    374a:	ec 32       	cpi	r30, 0x2C	; 44
    374c:	50 f4       	brcc	.+20     	; 0x3762 <_serial_call_back+0x32>
    374e:	81 e0       	ldi	r24, 0x01	; 1
    3750:	8e 0f       	add	r24, r30
    3752:	80 93 25 09 	sts	0x0925, r24	; 0x800925 <rec_buf_inp.2926>
    3756:	f0 e0       	ldi	r31, 0x00	; 0
    3758:	eb 5a       	subi	r30, 0xAB	; 171
    375a:	f6 4f       	sbci	r31, 0xF6	; 246
    375c:	8a 81       	ldd	r24, Y+2	; 0x02
    375e:	80 83       	st	Z, r24
    3760:	02 c0       	rjmp	.+4      	; 0x3766 <_serial_call_back+0x36>
    3762:	10 92 25 09 	sts	0x0925, r1	; 0x800925 <rec_buf_inp.2926>
    3766:	8a 81       	ldd	r24, Y+2	; 0x02
    3768:	8a 30       	cpi	r24, 0x0A	; 10
    376a:	d1 f4       	brne	.+52     	; 0x37a0 <_serial_call_back+0x70>
    376c:	40 91 25 09 	lds	r20, 0x0925	; 0x800925 <rec_buf_inp.2926>
    3770:	50 e0       	ldi	r21, 0x00	; 0
    3772:	fa 01       	movw	r30, r20
    3774:	ed 5a       	subi	r30, 0xAD	; 173
    3776:	f6 4f       	sbci	r31, 0xF6	; 246
    3778:	10 82       	st	Z, r1
    377a:	41 50       	subi	r20, 0x01	; 1
    377c:	51 09       	sbc	r21, r1
    377e:	9e 01       	movw	r18, r28
    3780:	2f 5f       	subi	r18, 0xFF	; 255
    3782:	3f 4f       	sbci	r19, 0xFF	; 255
    3784:	65 e5       	ldi	r22, 0x55	; 85
    3786:	79 e0       	ldi	r23, 0x09	; 9
    3788:	80 91 26 09 	lds	r24, 0x0926	; 0x800926 <_reply_buffer_handle>
    378c:	90 91 27 09 	lds	r25, 0x0927	; 0x800927 <_reply_buffer_handle+0x1>
    3790:	0e 94 0f 0c 	call	0x181e	; 0x181e <xStreamBufferSendFromISR>
    3794:	89 81       	ldd	r24, Y+1	; 0x01
    3796:	81 11       	cpse	r24, r1
    3798:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <vPortYield>
    379c:	10 92 25 09 	sts	0x0925, r1	; 0x800925 <rec_buf_inp.2926>
    37a0:	be 01       	movw	r22, r28
    37a2:	6e 5f       	subi	r22, 0xFE	; 254
    37a4:	7f 4f       	sbci	r23, 0xFF	; 255
    37a6:	c8 01       	movw	r24, r16
    37a8:	3e db       	rcall	.-2436   	; 0x2e26 <serial_get_byte>
    37aa:	88 23       	and	r24, r24
    37ac:	61 f2       	breq	.-104    	; 0x3746 <_serial_call_back+0x16>
    37ae:	0f 90       	pop	r0
    37b0:	0f 90       	pop	r0
    37b2:	df 91       	pop	r29
    37b4:	cf 91       	pop	r28
    37b6:	1f 91       	pop	r17
    37b8:	0f 91       	pop	r16
    37ba:	08 95       	ret

000037bc <_upload_message>:
    37bc:	0f 93       	push	r16
    37be:	1f 93       	push	r17
    37c0:	cf 93       	push	r28
    37c2:	df 93       	push	r29
    37c4:	8c 01       	movw	r16, r24
    37c6:	eb 01       	movw	r28, r22
    37c8:	80 91 26 09 	lds	r24, 0x0926	; 0x800926 <_reply_buffer_handle>
    37cc:	90 91 27 09 	lds	r25, 0x0927	; 0x800927 <_reply_buffer_handle+0x1>
    37d0:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <xStreamBufferReset>
    37d4:	b8 01       	movw	r22, r16
    37d6:	81 ec       	ldi	r24, 0xC1	; 193
    37d8:	98 e0       	ldi	r25, 0x08	; 8
    37da:	0e 94 14 27 	call	0x4e28	; 0x4e28 <strcpy>
    37de:	20 97       	sbiw	r28, 0x00	; 0
    37e0:	79 f0       	breq	.+30     	; 0x3800 <_upload_message+0x44>
    37e2:	e1 ec       	ldi	r30, 0xC1	; 193
    37e4:	f8 e0       	ldi	r31, 0x08	; 8
    37e6:	01 90       	ld	r0, Z+
    37e8:	00 20       	and	r0, r0
    37ea:	e9 f7       	brne	.-6      	; 0x37e6 <_upload_message+0x2a>
    37ec:	31 97       	sbiw	r30, 0x01	; 1
    37ee:	80 e2       	ldi	r24, 0x20	; 32
    37f0:	90 e0       	ldi	r25, 0x00	; 0
    37f2:	91 83       	std	Z+1, r25	; 0x01
    37f4:	80 83       	st	Z, r24
    37f6:	be 01       	movw	r22, r28
    37f8:	81 ec       	ldi	r24, 0xC1	; 193
    37fa:	98 e0       	ldi	r25, 0x08	; 8
    37fc:	0e 94 09 27 	call	0x4e12	; 0x4e12 <strcat>
    3800:	e1 ec       	ldi	r30, 0xC1	; 193
    3802:	f8 e0       	ldi	r31, 0x08	; 8
    3804:	df 01       	movw	r26, r30
    3806:	0d 90       	ld	r0, X+
    3808:	00 20       	and	r0, r0
    380a:	e9 f7       	brne	.-6      	; 0x3806 <_upload_message+0x4a>
    380c:	11 97       	sbiw	r26, 0x01	; 1
    380e:	8d e0       	ldi	r24, 0x0D	; 13
    3810:	9a e0       	ldi	r25, 0x0A	; 10
    3812:	11 96       	adiw	r26, 0x01	; 1
    3814:	9c 93       	st	X, r25
    3816:	8e 93       	st	-X, r24
    3818:	12 96       	adiw	r26, 0x02	; 2
    381a:	1c 92       	st	X, r1
    381c:	01 90       	ld	r0, Z+
    381e:	00 20       	and	r0, r0
    3820:	e9 f7       	brne	.-6      	; 0x381c <_upload_message+0x60>
    3822:	31 97       	sbiw	r30, 0x01	; 1
    3824:	e1 5c       	subi	r30, 0xC1	; 193
    3826:	f8 40       	sbci	r31, 0x08	; 8
    3828:	ae 2f       	mov	r26, r30
    382a:	81 ec       	ldi	r24, 0xC1	; 193
    382c:	98 e0       	ldi	r25, 0x08	; 8
    382e:	ac 01       	movw	r20, r24
    3830:	6a 2f       	mov	r22, r26
    3832:	80 91 28 09 	lds	r24, 0x0928	; 0x800928 <_rn2483_serial>
    3836:	90 91 29 09 	lds	r25, 0x0929	; 0x800929 <_rn2483_serial+0x1>
    383a:	a5 da       	rcall	.-2742   	; 0x2d86 <serial_send_bytes>
    383c:	81 11       	cpse	r24, r1
    383e:	0f c0       	rjmp	.+30     	; 0x385e <_upload_message+0xa2>
    3840:	28 e2       	ldi	r18, 0x28	; 40
    3842:	35 e0       	ldi	r19, 0x05	; 5
    3844:	4d e2       	ldi	r20, 0x2D	; 45
    3846:	50 e0       	ldi	r21, 0x00	; 0
    3848:	6f ea       	ldi	r22, 0xAF	; 175
    384a:	79 e0       	ldi	r23, 0x09	; 9
    384c:	80 91 26 09 	lds	r24, 0x0926	; 0x800926 <_reply_buffer_handle>
    3850:	90 91 27 09 	lds	r25, 0x0927	; 0x800927 <_reply_buffer_handle+0x1>
    3854:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <xStreamBufferReceive>
    3858:	8f ea       	ldi	r24, 0xAF	; 175
    385a:	99 e0       	ldi	r25, 0x09	; 9
    385c:	02 c0       	rjmp	.+4      	; 0x3862 <_upload_message+0xa6>
    385e:	80 e0       	ldi	r24, 0x00	; 0
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	df 91       	pop	r29
    3864:	cf 91       	pop	r28
    3866:	1f 91       	pop	r17
    3868:	0f 91       	pop	r16
    386a:	08 95       	ret

0000386c <_reply2return_code>:
    386c:	af 92       	push	r10
    386e:	bf 92       	push	r11
    3870:	cf 92       	push	r12
    3872:	df 92       	push	r13
    3874:	ef 92       	push	r14
    3876:	ff 92       	push	r15
    3878:	0f 93       	push	r16
    387a:	1f 93       	push	r17
    387c:	cf 93       	push	r28
    387e:	df 93       	push	r29
    3880:	6c 01       	movw	r12, r24
    3882:	fc 01       	movw	r30, r24
    3884:	01 90       	ld	r0, Z+
    3886:	00 20       	and	r0, r0
    3888:	e9 f7       	brne	.-6      	; 0x3884 <_reply2return_code+0x18>
    388a:	31 97       	sbiw	r30, 0x01	; 1
    388c:	7f 01       	movw	r14, r30
    388e:	e8 1a       	sub	r14, r24
    3890:	f9 0a       	sbc	r15, r25
    3892:	0d ed       	ldi	r16, 0xDD	; 221
    3894:	17 e0       	ldi	r17, 0x07	; 7
    3896:	c0 e0       	ldi	r28, 0x00	; 0
    3898:	d0 e0       	ldi	r29, 0x00	; 0
    389a:	f8 01       	movw	r30, r16
    389c:	60 81       	ld	r22, Z
    389e:	71 81       	ldd	r23, Z+1	; 0x01
    38a0:	a7 01       	movw	r20, r14
    38a2:	c6 01       	movw	r24, r12
    38a4:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <strncasecmp>
    38a8:	89 2b       	or	r24, r25
    38aa:	49 f4       	brne	.+18     	; 0x38be <_reply2return_code+0x52>
    38ac:	fe 01       	movw	r30, r28
    38ae:	ee 0f       	add	r30, r30
    38b0:	ff 1f       	adc	r31, r31
    38b2:	ec 0f       	add	r30, r28
    38b4:	fd 1f       	adc	r31, r29
    38b6:	e4 52       	subi	r30, 0x24	; 36
    38b8:	f8 4f       	sbci	r31, 0xF8	; 248
    38ba:	80 81       	ld	r24, Z
    38bc:	07 c0       	rjmp	.+14     	; 0x38cc <_reply2return_code+0x60>
    38be:	21 96       	adiw	r28, 0x01	; 1
    38c0:	0d 5f       	subi	r16, 0xFD	; 253
    38c2:	1f 4f       	sbci	r17, 0xFF	; 255
    38c4:	c1 31       	cpi	r28, 0x11	; 17
    38c6:	d1 05       	cpc	r29, r1
    38c8:	41 f7       	brne	.-48     	; 0x389a <_reply2return_code+0x2e>
    38ca:	80 e1       	ldi	r24, 0x10	; 16
    38cc:	df 91       	pop	r29
    38ce:	cf 91       	pop	r28
    38d0:	1f 91       	pop	r17
    38d2:	0f 91       	pop	r16
    38d4:	ff 90       	pop	r15
    38d6:	ef 90       	pop	r14
    38d8:	df 90       	pop	r13
    38da:	cf 90       	pop	r12
    38dc:	bf 90       	pop	r11
    38de:	af 90       	pop	r10
    38e0:	08 95       	ret

000038e2 <_upload_message_rc>:
    38e2:	6c df       	rcall	.-296    	; 0x37bc <_upload_message>
    38e4:	c3 cf       	rjmp	.-122    	; 0x386c <_reply2return_code>
    38e6:	08 95       	ret

000038e8 <lora_driver_flush_buffers>:
    38e8:	80 91 26 09 	lds	r24, 0x0926	; 0x800926 <_reply_buffer_handle>
    38ec:	90 91 27 09 	lds	r25, 0x0927	; 0x800927 <_reply_buffer_handle+0x1>
    38f0:	0c 94 d0 0b 	jmp	0x17a0	; 0x17a0 <xStreamBufferReset>
    38f4:	08 95       	ret

000038f6 <lora_driver_create>:
    38f6:	8f 92       	push	r8
    38f8:	9f 92       	push	r9
    38fa:	af 92       	push	r10
    38fc:	cf 92       	push	r12
    38fe:	ef 92       	push	r14
    3900:	0f 93       	push	r16
    3902:	cf 93       	push	r28
    3904:	c8 2f       	mov	r28, r24
    3906:	41 e0       	ldi	r20, 0x01	; 1
    3908:	60 e0       	ldi	r22, 0x00	; 0
    390a:	70 e0       	ldi	r23, 0x00	; 0
    390c:	88 ec       	ldi	r24, 0xC8	; 200
    390e:	90 e0       	ldi	r25, 0x00	; 0
    3910:	0e 94 a4 0b 	call	0x1748	; 0x1748 <xStreamBufferGenericCreate>
    3914:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <_reply_buffer_handle+0x1>
    3918:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <_reply_buffer_handle>
    391c:	0f 2e       	mov	r0, r31
    391e:	f8 e9       	ldi	r31, 0x98	; 152
    3920:	8f 2e       	mov	r8, r31
    3922:	fb e1       	ldi	r31, 0x1B	; 27
    3924:	9f 2e       	mov	r9, r31
    3926:	f0 2d       	mov	r31, r0
    3928:	68 94       	set
    392a:	aa 24       	eor	r10, r10
    392c:	a6 f8       	bld	r10, 6
    392e:	68 94       	set
    3930:	cc 24       	eor	r12, r12
    3932:	c6 f8       	bld	r12, 6
    3934:	e1 2c       	mov	r14, r1
    3936:	00 e0       	ldi	r16, 0x00	; 0
    3938:	23 e0       	ldi	r18, 0x03	; 3
    393a:	40 e0       	ldi	r20, 0x00	; 0
    393c:	51 ee       	ldi	r21, 0xE1	; 225
    393e:	60 e0       	ldi	r22, 0x00	; 0
    3940:	70 e0       	ldi	r23, 0x00	; 0
    3942:	8c 2f       	mov	r24, r28
    3944:	5c d9       	rcall	.-3400   	; 0x2bfe <serial_new_instance>
    3946:	90 93 29 09 	sts	0x0929, r25	; 0x800929 <_rn2483_serial+0x1>
    394a:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <_rn2483_serial>
    394e:	e0 91 7c 0a 	lds	r30, 0x0A7C	; 0x800a7c <register_access+0x8>
    3952:	f0 91 7d 0a 	lds	r31, 0x0A7D	; 0x800a7d <register_access+0x9>
    3956:	64 e0       	ldi	r22, 0x04	; 4
    3958:	87 e0       	ldi	r24, 0x07	; 7
    395a:	91 e0       	ldi	r25, 0x01	; 1
    395c:	19 95       	eicall
    395e:	cf 91       	pop	r28
    3960:	0f 91       	pop	r16
    3962:	ef 90       	pop	r14
    3964:	cf 90       	pop	r12
    3966:	af 90       	pop	r10
    3968:	9f 90       	pop	r9
    396a:	8f 90       	pop	r8
    396c:	08 95       	ret

0000396e <lora_driver_reset_rn2483>:
    396e:	88 23       	and	r24, r24
    3970:	49 f0       	breq	.+18     	; 0x3984 <lora_driver_reset_rn2483+0x16>
    3972:	e0 91 86 0a 	lds	r30, 0x0A86	; 0x800a86 <register_access+0x12>
    3976:	f0 91 87 0a 	lds	r31, 0x0A87	; 0x800a87 <register_access+0x13>
    397a:	64 e0       	ldi	r22, 0x04	; 4
    397c:	88 e0       	ldi	r24, 0x08	; 8
    397e:	91 e0       	ldi	r25, 0x01	; 1
    3980:	19 95       	eicall
    3982:	08 95       	ret
    3984:	e0 91 7c 0a 	lds	r30, 0x0A7C	; 0x800a7c <register_access+0x8>
    3988:	f0 91 7d 0a 	lds	r31, 0x0A7D	; 0x800a7d <register_access+0x9>
    398c:	64 e0       	ldi	r22, 0x04	; 4
    398e:	88 e0       	ldi	r24, 0x08	; 8
    3990:	91 e0       	ldi	r25, 0x01	; 1
    3992:	19 95       	eicall
    3994:	08 95       	ret

00003996 <lora_driver_rn2483_factory_reset>:
    3996:	60 e0       	ldi	r22, 0x00	; 0
    3998:	70 e0       	ldi	r23, 0x00	; 0
    399a:	88 e7       	ldi	r24, 0x78	; 120
    399c:	95 e0       	ldi	r25, 0x05	; 5
    399e:	0e df       	rcall	.-484    	; 0x37bc <_upload_message>
    39a0:	ef ea       	ldi	r30, 0xAF	; 175
    39a2:	f9 e0       	ldi	r31, 0x09	; 9
    39a4:	01 90       	ld	r0, Z+
    39a6:	00 20       	and	r0, r0
    39a8:	e9 f7       	brne	.-6      	; 0x39a4 <lora_driver_rn2483_factory_reset+0xe>
    39aa:	31 97       	sbiw	r30, 0x01	; 1
    39ac:	ef 5a       	subi	r30, 0xAF	; 175
    39ae:	f9 40       	sbci	r31, 0x09	; 9
    39b0:	81 e0       	ldi	r24, 0x01	; 1
    39b2:	75 97       	sbiw	r30, 0x15	; 21
    39b4:	08 f0       	brcs	.+2      	; 0x39b8 <lora_driver_rn2483_factory_reset+0x22>
    39b6:	80 e0       	ldi	r24, 0x00	; 0
    39b8:	08 95       	ret

000039ba <lora_driver_get_rn2483_hweui>:
    39ba:	cf 93       	push	r28
    39bc:	df 93       	push	r29
    39be:	ec 01       	movw	r28, r24
    39c0:	60 e0       	ldi	r22, 0x00	; 0
    39c2:	70 e0       	ldi	r23, 0x00	; 0
    39c4:	89 e8       	ldi	r24, 0x89	; 137
    39c6:	95 e0       	ldi	r25, 0x05	; 5
    39c8:	f9 de       	rcall	.-526    	; 0x37bc <_upload_message>
    39ca:	ef ea       	ldi	r30, 0xAF	; 175
    39cc:	f9 e0       	ldi	r31, 0x09	; 9
    39ce:	01 90       	ld	r0, Z+
    39d0:	00 20       	and	r0, r0
    39d2:	e9 f7       	brne	.-6      	; 0x39ce <lora_driver_get_rn2483_hweui+0x14>
    39d4:	e0 5c       	subi	r30, 0xC0	; 192
    39d6:	f9 40       	sbci	r31, 0x09	; 9
    39d8:	39 f4       	brne	.+14     	; 0x39e8 <lora_driver_get_rn2483_hweui+0x2e>
    39da:	6f ea       	ldi	r22, 0xAF	; 175
    39dc:	79 e0       	ldi	r23, 0x09	; 9
    39de:	ce 01       	movw	r24, r28
    39e0:	0e 94 14 27 	call	0x4e28	; 0x4e28 <strcpy>
    39e4:	80 e0       	ldi	r24, 0x00	; 0
    39e6:	02 c0       	rjmp	.+4      	; 0x39ec <lora_driver_get_rn2483_hweui+0x32>
    39e8:	18 82       	st	Y, r1
    39ea:	81 e0       	ldi	r24, 0x01	; 1
    39ec:	df 91       	pop	r29
    39ee:	cf 91       	pop	r28
    39f0:	08 95       	ret

000039f2 <lora_driver_set_device_identifier>:
    39f2:	fc 01       	movw	r30, r24
    39f4:	01 90       	ld	r0, Z+
    39f6:	00 20       	and	r0, r0
    39f8:	e9 f7       	brne	.-6      	; 0x39f4 <lora_driver_set_device_identifier+0x2>
    39fa:	9f 01       	movw	r18, r30
    39fc:	21 51       	subi	r18, 0x11	; 17
    39fe:	31 09       	sbc	r19, r1
    3a00:	28 17       	cp	r18, r24
    3a02:	39 07       	cpc	r19, r25
    3a04:	29 f4       	brne	.+10     	; 0x3a10 <lora_driver_set_device_identifier+0x1e>
    3a06:	bc 01       	movw	r22, r24
    3a08:	87 eb       	ldi	r24, 0xB7	; 183
    3a0a:	95 e0       	ldi	r25, 0x05	; 5
    3a0c:	6a cf       	rjmp	.-300    	; 0x38e2 <_upload_message_rc>
    3a0e:	08 95       	ret
    3a10:	89 e0       	ldi	r24, 0x09	; 9
    3a12:	08 95       	ret

00003a14 <lora_driver_set_application_identifier>:
    3a14:	fc 01       	movw	r30, r24
    3a16:	01 90       	ld	r0, Z+
    3a18:	00 20       	and	r0, r0
    3a1a:	e9 f7       	brne	.-6      	; 0x3a16 <lora_driver_set_application_identifier+0x2>
    3a1c:	9f 01       	movw	r18, r30
    3a1e:	21 51       	subi	r18, 0x11	; 17
    3a20:	31 09       	sbc	r19, r1
    3a22:	28 17       	cp	r18, r24
    3a24:	39 07       	cpc	r19, r25
    3a26:	29 f4       	brne	.+10     	; 0x3a32 <lora_driver_set_application_identifier+0x1e>
    3a28:	bc 01       	movw	r22, r24
    3a2a:	86 ec       	ldi	r24, 0xC6	; 198
    3a2c:	95 e0       	ldi	r25, 0x05	; 5
    3a2e:	59 cf       	rjmp	.-334    	; 0x38e2 <_upload_message_rc>
    3a30:	08 95       	ret
    3a32:	89 e0       	ldi	r24, 0x09	; 9
    3a34:	08 95       	ret

00003a36 <lora_driver_set_application_key>:
    3a36:	fc 01       	movw	r30, r24
    3a38:	01 90       	ld	r0, Z+
    3a3a:	00 20       	and	r0, r0
    3a3c:	e9 f7       	brne	.-6      	; 0x3a38 <lora_driver_set_application_key+0x2>
    3a3e:	9f 01       	movw	r18, r30
    3a40:	21 52       	subi	r18, 0x21	; 33
    3a42:	31 09       	sbc	r19, r1
    3a44:	28 17       	cp	r18, r24
    3a46:	39 07       	cpc	r19, r25
    3a48:	29 f4       	brne	.+10     	; 0x3a54 <lora_driver_set_application_key+0x1e>
    3a4a:	bc 01       	movw	r22, r24
    3a4c:	85 ed       	ldi	r24, 0xD5	; 213
    3a4e:	95 e0       	ldi	r25, 0x05	; 5
    3a50:	48 cf       	rjmp	.-368    	; 0x38e2 <_upload_message_rc>
    3a52:	08 95       	ret
    3a54:	89 e0       	ldi	r24, 0x09	; 9
    3a56:	08 95       	ret

00003a58 <lora_driver_save_mac>:
    3a58:	60 e0       	ldi	r22, 0x00	; 0
    3a5a:	70 e0       	ldi	r23, 0x00	; 0
    3a5c:	84 e1       	ldi	r24, 0x14	; 20
    3a5e:	96 e0       	ldi	r25, 0x06	; 6
    3a60:	40 cf       	rjmp	.-384    	; 0x38e2 <_upload_message_rc>
    3a62:	08 95       	ret

00003a64 <lora_driver_join>:
    3a64:	e8 2f       	mov	r30, r24
    3a66:	f0 e0       	ldi	r31, 0x00	; 0
    3a68:	ee 0f       	add	r30, r30
    3a6a:	ff 1f       	adc	r31, r31
    3a6c:	e8 52       	subi	r30, 0x28	; 40
    3a6e:	f8 4f       	sbci	r31, 0xF8	; 248
    3a70:	60 81       	ld	r22, Z
    3a72:	71 81       	ldd	r23, Z+1	; 0x01
    3a74:	8d e1       	ldi	r24, 0x1D	; 29
    3a76:	96 e0       	ldi	r25, 0x06	; 6
    3a78:	34 df       	rcall	.-408    	; 0x38e2 <_upload_message_rc>
    3a7a:	81 11       	cpse	r24, r1
    3a7c:	12 c0       	rjmp	.+36     	; 0x3aa2 <lora_driver_join+0x3e>
    3a7e:	28 e2       	ldi	r18, 0x28	; 40
    3a80:	35 e0       	ldi	r19, 0x05	; 5
    3a82:	4d e2       	ldi	r20, 0x2D	; 45
    3a84:	50 e0       	ldi	r21, 0x00	; 0
    3a86:	6f ea       	ldi	r22, 0xAF	; 175
    3a88:	79 e0       	ldi	r23, 0x09	; 9
    3a8a:	80 91 26 09 	lds	r24, 0x0926	; 0x800926 <_reply_buffer_handle>
    3a8e:	90 91 27 09 	lds	r25, 0x0927	; 0x800927 <_reply_buffer_handle+0x1>
    3a92:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <xStreamBufferReceive>
    3a96:	88 23       	and	r24, r24
    3a98:	21 f0       	breq	.+8      	; 0x3aa2 <lora_driver_join+0x3e>
    3a9a:	8f ea       	ldi	r24, 0xAF	; 175
    3a9c:	99 e0       	ldi	r25, 0x09	; 9
    3a9e:	e6 ce       	rjmp	.-564    	; 0x386c <_reply2return_code>
    3aa0:	08 95       	ret
    3aa2:	8f ea       	ldi	r24, 0xAF	; 175
    3aa4:	99 e0       	ldi	r25, 0x09	; 9
    3aa6:	e2 ce       	rjmp	.-572    	; 0x386c <_reply2return_code>
    3aa8:	08 95       	ret

00003aaa <lora_driver_sent_upload_message>:
    3aaa:	cf 93       	push	r28
    3aac:	df 93       	push	r29
    3aae:	1f 92       	push	r1
    3ab0:	cd b7       	in	r28, 0x3d	; 61
    3ab2:	de b7       	in	r29, 0x3e	; 62
    3ab4:	db 01       	movw	r26, r22
    3ab6:	11 96       	adiw	r26, 0x01	; 1
    3ab8:	9c 91       	ld	r25, X
    3aba:	11 97       	sbiw	r26, 0x01	; 1
    3abc:	95 31       	cpi	r25, 0x15	; 21
    3abe:	08 f0       	brcs	.+2      	; 0x3ac2 <lora_driver_sent_upload_message+0x18>
    3ac0:	87 c0       	rjmp	.+270    	; 0x3bd0 <lora_driver_sent_upload_message+0x126>
    3ac2:	99 23       	and	r25, r25
    3ac4:	81 f1       	breq	.+96     	; 0x3b26 <lora_driver_sent_upload_message+0x7c>
    3ac6:	60 e0       	ldi	r22, 0x00	; 0
    3ac8:	70 e0       	ldi	r23, 0x00	; 0
    3aca:	27 2f       	mov	r18, r23
    3acc:	30 e0       	ldi	r19, 0x00	; 0
    3ace:	46 2f       	mov	r20, r22
    3ad0:	50 e0       	ldi	r21, 0x00	; 0
    3ad2:	fd 01       	movw	r30, r26
    3ad4:	e4 0f       	add	r30, r20
    3ad6:	f5 1f       	adc	r31, r21
    3ad8:	92 81       	ldd	r25, Z+2	; 0x02
    3ada:	92 95       	swap	r25
    3adc:	9f 70       	andi	r25, 0x0F	; 15
    3ade:	9a 30       	cpi	r25, 0x0A	; 10
    3ae0:	10 f0       	brcs	.+4      	; 0x3ae6 <lora_driver_sent_upload_message+0x3c>
    3ae2:	99 5c       	subi	r25, 0xC9	; 201
    3ae4:	01 c0       	rjmp	.+2      	; 0x3ae8 <lora_driver_sent_upload_message+0x3e>
    3ae6:	90 5d       	subi	r25, 0xD0	; 208
    3ae8:	f9 01       	movw	r30, r18
    3aea:	e0 5c       	subi	r30, 0xC0	; 192
    3aec:	f6 4f       	sbci	r31, 0xF6	; 246
    3aee:	90 83       	st	Z, r25
    3af0:	2f 5f       	subi	r18, 0xFF	; 255
    3af2:	3f 4f       	sbci	r19, 0xFF	; 255
    3af4:	fd 01       	movw	r30, r26
    3af6:	e4 0f       	add	r30, r20
    3af8:	f5 1f       	adc	r31, r21
    3afa:	92 81       	ldd	r25, Z+2	; 0x02
    3afc:	9f 70       	andi	r25, 0x0F	; 15
    3afe:	49 2f       	mov	r20, r25
    3b00:	50 e0       	ldi	r21, 0x00	; 0
    3b02:	4a 30       	cpi	r20, 0x0A	; 10
    3b04:	51 05       	cpc	r21, r1
    3b06:	14 f0       	brlt	.+4      	; 0x3b0c <lora_driver_sent_upload_message+0x62>
    3b08:	99 5c       	subi	r25, 0xC9	; 201
    3b0a:	01 c0       	rjmp	.+2      	; 0x3b0e <lora_driver_sent_upload_message+0x64>
    3b0c:	90 5d       	subi	r25, 0xD0	; 208
    3b0e:	f9 01       	movw	r30, r18
    3b10:	e0 5c       	subi	r30, 0xC0	; 192
    3b12:	f6 4f       	sbci	r31, 0xF6	; 246
    3b14:	90 83       	st	Z, r25
    3b16:	7e 5f       	subi	r23, 0xFE	; 254
    3b18:	6f 5f       	subi	r22, 0xFF	; 255
    3b1a:	11 96       	adiw	r26, 0x01	; 1
    3b1c:	9c 91       	ld	r25, X
    3b1e:	11 97       	sbiw	r26, 0x01	; 1
    3b20:	69 17       	cp	r22, r25
    3b22:	98 f2       	brcs	.-90     	; 0x3aca <lora_driver_sent_upload_message+0x20>
    3b24:	01 c0       	rjmp	.+2      	; 0x3b28 <lora_driver_sent_upload_message+0x7e>
    3b26:	70 e0       	ldi	r23, 0x00	; 0
    3b28:	e7 2f       	mov	r30, r23
    3b2a:	f0 e0       	ldi	r31, 0x00	; 0
    3b2c:	e0 5c       	subi	r30, 0xC0	; 192
    3b2e:	f6 4f       	sbci	r31, 0xF6	; 246
    3b30:	10 82       	st	Z, r1
    3b32:	4c 91       	ld	r20, X
    3b34:	81 11       	cpse	r24, r1
    3b36:	03 c0       	rjmp	.+6      	; 0x3b3e <lora_driver_sent_upload_message+0x94>
    3b38:	86 e2       	ldi	r24, 0x26	; 38
    3b3a:	96 e0       	ldi	r25, 0x06	; 6
    3b3c:	02 c0       	rjmp	.+4      	; 0x3b42 <lora_driver_sent_upload_message+0x98>
    3b3e:	88 e2       	ldi	r24, 0x28	; 40
    3b40:	96 e0       	ldi	r25, 0x06	; 6
    3b42:	20 e4       	ldi	r18, 0x40	; 64
    3b44:	39 e0       	ldi	r19, 0x09	; 9
    3b46:	3f 93       	push	r19
    3b48:	2f 93       	push	r18
    3b4a:	1f 92       	push	r1
    3b4c:	4f 93       	push	r20
    3b4e:	9f 93       	push	r25
    3b50:	8f 93       	push	r24
    3b52:	8c e2       	ldi	r24, 0x2C	; 44
    3b54:	96 e0       	ldi	r25, 0x06	; 6
    3b56:	9f 93       	push	r25
    3b58:	8f 93       	push	r24
    3b5a:	82 e8       	ldi	r24, 0x82	; 130
    3b5c:	99 e0       	ldi	r25, 0x09	; 9
    3b5e:	9f 93       	push	r25
    3b60:	8f 93       	push	r24
    3b62:	0e 94 76 27 	call	0x4eec	; 0x4eec <sprintf>
    3b66:	60 e0       	ldi	r22, 0x00	; 0
    3b68:	70 e0       	ldi	r23, 0x00	; 0
    3b6a:	82 e8       	ldi	r24, 0x82	; 130
    3b6c:	99 e0       	ldi	r25, 0x09	; 9
    3b6e:	b9 de       	rcall	.-654    	; 0x38e2 <_upload_message_rc>
    3b70:	0f b6       	in	r0, 0x3f	; 63
    3b72:	f8 94       	cli
    3b74:	de bf       	out	0x3e, r29	; 62
    3b76:	0f be       	out	0x3f, r0	; 63
    3b78:	cd bf       	out	0x3d, r28	; 61
    3b7a:	8e 30       	cpi	r24, 0x0E	; 14
    3b7c:	51 f5       	brne	.+84     	; 0x3bd2 <lora_driver_sent_upload_message+0x128>
    3b7e:	87 e0       	ldi	r24, 0x07	; 7
    3b80:	89 83       	std	Y+1, r24	; 0x01
    3b82:	be 01       	movw	r22, r28
    3b84:	6f 5f       	subi	r22, 0xFF	; 255
    3b86:	7f 4f       	sbci	r23, 0xFF	; 255
    3b88:	8f ea       	ldi	r24, 0xAF	; 175
    3b8a:	99 e0       	ldi	r25, 0x09	; 9
    3b8c:	3c d1       	rcall	.+632    	; 0x3e06 <decode_port_no>
    3b8e:	80 93 2a 09 	sts	0x092A, r24	; 0x80092a <_downlink_payload>
    3b92:	e9 81       	ldd	r30, Y+1	; 0x01
    3b94:	f0 e0       	ldi	r31, 0x00	; 0
    3b96:	e1 55       	subi	r30, 0x51	; 81
    3b98:	f6 4f       	sbci	r31, 0xF6	; 246
    3b9a:	df 01       	movw	r26, r30
    3b9c:	0d 90       	ld	r0, X+
    3b9e:	00 20       	and	r0, r0
    3ba0:	e9 f7       	brne	.-6      	; 0x3b9c <lora_driver_sent_upload_message+0xf2>
    3ba2:	11 97       	sbiw	r26, 0x01	; 1
    3ba4:	ae 1b       	sub	r26, r30
    3ba6:	bf 0b       	sbc	r27, r31
    3ba8:	aa 23       	and	r26, r26
    3baa:	81 f0       	breq	.+32     	; 0x3bcc <lora_driver_sent_upload_message+0x122>
    3bac:	bb 27       	eor	r27, r27
    3bae:	11 97       	sbiw	r26, 0x01	; 1
    3bb0:	cd 01       	movw	r24, r26
    3bb2:	0a f4       	brpl	.+2      	; 0x3bb6 <lora_driver_sent_upload_message+0x10c>
    3bb4:	01 96       	adiw	r24, 0x01	; 1
    3bb6:	95 95       	asr	r25
    3bb8:	87 95       	ror	r24
    3bba:	80 93 2b 09 	sts	0x092B, r24	; 0x80092b <_downlink_payload+0x1>
    3bbe:	af 01       	movw	r20, r30
    3bc0:	4f 5f       	subi	r20, 0xFF	; 255
    3bc2:	5f 4f       	sbci	r21, 0xFF	; 255
    3bc4:	64 e1       	ldi	r22, 0x14	; 20
    3bc6:	8c e2       	ldi	r24, 0x2C	; 44
    3bc8:	99 e0       	ldi	r25, 0x09	; 9
    3bca:	49 d1       	rcall	.+658    	; 0x3e5e <decode_hexadecimal_string_bytes>
    3bcc:	8e e0       	ldi	r24, 0x0E	; 14
    3bce:	01 c0       	rjmp	.+2      	; 0x3bd2 <lora_driver_sent_upload_message+0x128>
    3bd0:	84 e1       	ldi	r24, 0x14	; 20
    3bd2:	0f 90       	pop	r0
    3bd4:	df 91       	pop	r29
    3bd6:	cf 91       	pop	r28
    3bd8:	08 95       	ret

00003bda <lora_driver_set_adaptive_data_rate>:
    3bda:	81 30       	cpi	r24, 0x01	; 1
    3bdc:	19 f0       	breq	.+6      	; 0x3be4 <lora_driver_set_adaptive_data_rate+0xa>
    3bde:	6c e3       	ldi	r22, 0x3C	; 60
    3be0:	76 e0       	ldi	r23, 0x06	; 6
    3be2:	02 c0       	rjmp	.+4      	; 0x3be8 <lora_driver_set_adaptive_data_rate+0xe>
    3be4:	6c ef       	ldi	r22, 0xFC	; 252
    3be6:	76 e0       	ldi	r23, 0x06	; 6
    3be8:	80 e4       	ldi	r24, 0x40	; 64
    3bea:	96 e0       	ldi	r25, 0x06	; 6
    3bec:	7a ce       	rjmp	.-780    	; 0x38e2 <_upload_message_rc>
    3bee:	08 95       	ret

00003bf0 <lora_driver_configure_to_eu868>:
    3bf0:	2f 92       	push	r2
    3bf2:	3f 92       	push	r3
    3bf4:	4f 92       	push	r4
    3bf6:	5f 92       	push	r5
    3bf8:	6f 92       	push	r6
    3bfa:	7f 92       	push	r7
    3bfc:	8f 92       	push	r8
    3bfe:	9f 92       	push	r9
    3c00:	af 92       	push	r10
    3c02:	bf 92       	push	r11
    3c04:	cf 92       	push	r12
    3c06:	df 92       	push	r13
    3c08:	ef 92       	push	r14
    3c0a:	ff 92       	push	r15
    3c0c:	0f 93       	push	r16
    3c0e:	1f 93       	push	r17
    3c10:	cf 93       	push	r28
    3c12:	df 93       	push	r29
    3c14:	cd b7       	in	r28, 0x3d	; 61
    3c16:	de b7       	in	r29, 0x3e	; 62
    3c18:	a0 97       	sbiw	r28, 0x20	; 32
    3c1a:	0f b6       	in	r0, 0x3f	; 63
    3c1c:	f8 94       	cli
    3c1e:	de bf       	out	0x3e, r29	; 62
    3c20:	0f be       	out	0x3f, r0	; 63
    3c22:	cd bf       	out	0x3d, r28	; 61
    3c24:	65 e8       	ldi	r22, 0x85	; 133
    3c26:	76 e0       	ldi	r23, 0x06	; 6
    3c28:	81 e9       	ldi	r24, 0x91	; 145
    3c2a:	96 e0       	ldi	r25, 0x06	; 6
    3c2c:	c7 dd       	rcall	.-1138   	; 0x37bc <_upload_message>
    3c2e:	1e de       	rcall	.-964    	; 0x386c <_reply2return_code>
    3c30:	81 11       	cpse	r24, r1
    3c32:	a3 c0       	rjmp	.+326    	; 0x3d7a <lora_driver_configure_to_eu868+0x18a>
    3c34:	80 e2       	ldi	r24, 0x20	; 32
    3c36:	e1 e2       	ldi	r30, 0x21	; 33
    3c38:	f2 e0       	ldi	r31, 0x02	; 2
    3c3a:	de 01       	movw	r26, r28
    3c3c:	11 96       	adiw	r26, 0x01	; 1
    3c3e:	01 90       	ld	r0, Z+
    3c40:	0d 92       	st	X+, r0
    3c42:	8a 95       	dec	r24
    3c44:	e1 f7       	brne	.-8      	; 0x3c3e <lora_driver_configure_to_eu868+0x4e>
    3c46:	9e 01       	movw	r18, r28
    3c48:	2f 5f       	subi	r18, 0xFF	; 255
    3c4a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c4c:	69 01       	movw	r12, r18
    3c4e:	e1 2c       	mov	r14, r1
    3c50:	f1 2c       	mov	r15, r1
    3c52:	0f 2e       	mov	r0, r31
    3c54:	fd e9       	ldi	r31, 0x9D	; 157
    3c56:	af 2e       	mov	r10, r31
    3c58:	f6 e0       	ldi	r31, 0x06	; 6
    3c5a:	bf 2e       	mov	r11, r31
    3c5c:	f0 2d       	mov	r31, r0
    3c5e:	02 e8       	ldi	r16, 0x82	; 130
    3c60:	19 e0       	ldi	r17, 0x09	; 9
    3c62:	0f 2e       	mov	r0, r31
    3c64:	f6 eb       	ldi	r31, 0xB6	; 182
    3c66:	4f 2e       	mov	r4, r31
    3c68:	f6 e0       	ldi	r31, 0x06	; 6
    3c6a:	5f 2e       	mov	r5, r31
    3c6c:	f0 2d       	mov	r31, r0
    3c6e:	0f 2e       	mov	r0, r31
    3c70:	fd ec       	ldi	r31, 0xCD	; 205
    3c72:	8f 2e       	mov	r8, r31
    3c74:	f6 e0       	ldi	r31, 0x06	; 6
    3c76:	9f 2e       	mov	r9, r31
    3c78:	f0 2d       	mov	r31, r0
    3c7a:	0f 2e       	mov	r0, r31
    3c7c:	f7 ee       	ldi	r31, 0xE7	; 231
    3c7e:	6f 2e       	mov	r6, r31
    3c80:	f6 e0       	ldi	r31, 0x06	; 6
    3c82:	7f 2e       	mov	r7, r31
    3c84:	f0 2d       	mov	r31, r0
    3c86:	3e 2c       	mov	r3, r14
    3c88:	2f 2c       	mov	r2, r15
    3c8a:	ff 92       	push	r15
    3c8c:	ef 92       	push	r14
    3c8e:	bf 92       	push	r11
    3c90:	af 92       	push	r10
    3c92:	1f 93       	push	r17
    3c94:	0f 93       	push	r16
    3c96:	0e 94 76 27 	call	0x4eec	; 0x4eec <sprintf>
    3c9a:	60 e0       	ldi	r22, 0x00	; 0
    3c9c:	70 e0       	ldi	r23, 0x00	; 0
    3c9e:	c8 01       	movw	r24, r16
    3ca0:	8d dd       	rcall	.-1254   	; 0x37bc <_upload_message>
    3ca2:	e4 dd       	rcall	.-1080   	; 0x386c <_reply2return_code>
    3ca4:	0f 90       	pop	r0
    3ca6:	0f 90       	pop	r0
    3ca8:	0f 90       	pop	r0
    3caa:	0f 90       	pop	r0
    3cac:	0f 90       	pop	r0
    3cae:	0f 90       	pop	r0
    3cb0:	81 11       	cpse	r24, r1
    3cb2:	63 c0       	rjmp	.+198    	; 0x3d7a <lora_driver_configure_to_eu868+0x18a>
    3cb4:	32 e0       	ldi	r19, 0x02	; 2
    3cb6:	3e 15       	cp	r19, r14
    3cb8:	e8 f4       	brcc	.+58     	; 0x3cf4 <lora_driver_configure_to_eu868+0x104>
    3cba:	f6 01       	movw	r30, r12
    3cbc:	83 81       	ldd	r24, Z+3	; 0x03
    3cbe:	8f 93       	push	r24
    3cc0:	82 81       	ldd	r24, Z+2	; 0x02
    3cc2:	8f 93       	push	r24
    3cc4:	81 81       	ldd	r24, Z+1	; 0x01
    3cc6:	8f 93       	push	r24
    3cc8:	80 81       	ld	r24, Z
    3cca:	8f 93       	push	r24
    3ccc:	ff 92       	push	r15
    3cce:	ef 92       	push	r14
    3cd0:	5f 92       	push	r5
    3cd2:	4f 92       	push	r4
    3cd4:	1f 93       	push	r17
    3cd6:	0f 93       	push	r16
    3cd8:	0e 94 76 27 	call	0x4eec	; 0x4eec <sprintf>
    3cdc:	60 e0       	ldi	r22, 0x00	; 0
    3cde:	70 e0       	ldi	r23, 0x00	; 0
    3ce0:	c8 01       	movw	r24, r16
    3ce2:	6c dd       	rcall	.-1320   	; 0x37bc <_upload_message>
    3ce4:	c3 dd       	rcall	.-1146   	; 0x386c <_reply2return_code>
    3ce6:	0f b6       	in	r0, 0x3f	; 63
    3ce8:	f8 94       	cli
    3cea:	de bf       	out	0x3e, r29	; 62
    3cec:	0f be       	out	0x3f, r0	; 63
    3cee:	cd bf       	out	0x3d, r28	; 61
    3cf0:	81 11       	cpse	r24, r1
    3cf2:	43 c0       	rjmp	.+134    	; 0x3d7a <lora_driver_configure_to_eu868+0x18a>
    3cf4:	2f 92       	push	r2
    3cf6:	3f 92       	push	r3
    3cf8:	9f 92       	push	r9
    3cfa:	8f 92       	push	r8
    3cfc:	1f 93       	push	r17
    3cfe:	0f 93       	push	r16
    3d00:	0e 94 76 27 	call	0x4eec	; 0x4eec <sprintf>
    3d04:	60 e0       	ldi	r22, 0x00	; 0
    3d06:	70 e0       	ldi	r23, 0x00	; 0
    3d08:	c8 01       	movw	r24, r16
    3d0a:	58 dd       	rcall	.-1360   	; 0x37bc <_upload_message>
    3d0c:	af dd       	rcall	.-1186   	; 0x386c <_reply2return_code>
    3d0e:	0f 90       	pop	r0
    3d10:	0f 90       	pop	r0
    3d12:	0f 90       	pop	r0
    3d14:	0f 90       	pop	r0
    3d16:	0f 90       	pop	r0
    3d18:	0f 90       	pop	r0
    3d1a:	81 11       	cpse	r24, r1
    3d1c:	2e c0       	rjmp	.+92     	; 0x3d7a <lora_driver_configure_to_eu868+0x18a>
    3d1e:	2f 92       	push	r2
    3d20:	3f 92       	push	r3
    3d22:	7f 92       	push	r7
    3d24:	6f 92       	push	r6
    3d26:	1f 93       	push	r17
    3d28:	0f 93       	push	r16
    3d2a:	0e 94 76 27 	call	0x4eec	; 0x4eec <sprintf>
    3d2e:	60 e0       	ldi	r22, 0x00	; 0
    3d30:	70 e0       	ldi	r23, 0x00	; 0
    3d32:	c8 01       	movw	r24, r16
    3d34:	43 dd       	rcall	.-1402   	; 0x37bc <_upload_message>
    3d36:	9a dd       	rcall	.-1228   	; 0x386c <_reply2return_code>
    3d38:	0f 90       	pop	r0
    3d3a:	0f 90       	pop	r0
    3d3c:	0f 90       	pop	r0
    3d3e:	0f 90       	pop	r0
    3d40:	0f 90       	pop	r0
    3d42:	0f 90       	pop	r0
    3d44:	81 11       	cpse	r24, r1
    3d46:	19 c0       	rjmp	.+50     	; 0x3d7a <lora_driver_configure_to_eu868+0x18a>
    3d48:	3f ef       	ldi	r19, 0xFF	; 255
    3d4a:	e3 1a       	sub	r14, r19
    3d4c:	f3 0a       	sbc	r15, r19
    3d4e:	84 e0       	ldi	r24, 0x04	; 4
    3d50:	c8 0e       	add	r12, r24
    3d52:	d1 1c       	adc	r13, r1
    3d54:	98 e0       	ldi	r25, 0x08	; 8
    3d56:	e9 16       	cp	r14, r25
    3d58:	f1 04       	cpc	r15, r1
    3d5a:	09 f0       	breq	.+2      	; 0x3d5e <lora_driver_configure_to_eu868+0x16e>
    3d5c:	94 cf       	rjmp	.-216    	; 0x3c86 <lora_driver_configure_to_eu868+0x96>
    3d5e:	60 e0       	ldi	r22, 0x00	; 0
    3d60:	70 e0       	ldi	r23, 0x00	; 0
    3d62:	8f ef       	ldi	r24, 0xFF	; 255
    3d64:	96 e0       	ldi	r25, 0x06	; 6
    3d66:	2a dd       	rcall	.-1452   	; 0x37bc <_upload_message>
    3d68:	81 dd       	rcall	.-1278   	; 0x386c <_reply2return_code>
    3d6a:	81 11       	cpse	r24, r1
    3d6c:	06 c0       	rjmp	.+12     	; 0x3d7a <lora_driver_configure_to_eu868+0x18a>
    3d6e:	60 e0       	ldi	r22, 0x00	; 0
    3d70:	70 e0       	ldi	r23, 0x00	; 0
    3d72:	80 e1       	ldi	r24, 0x10	; 16
    3d74:	97 e0       	ldi	r25, 0x07	; 7
    3d76:	22 dd       	rcall	.-1468   	; 0x37bc <_upload_message>
    3d78:	79 dd       	rcall	.-1294   	; 0x386c <_reply2return_code>
    3d7a:	a0 96       	adiw	r28, 0x20	; 32
    3d7c:	0f b6       	in	r0, 0x3f	; 63
    3d7e:	f8 94       	cli
    3d80:	de bf       	out	0x3e, r29	; 62
    3d82:	0f be       	out	0x3f, r0	; 63
    3d84:	cd bf       	out	0x3d, r28	; 61
    3d86:	df 91       	pop	r29
    3d88:	cf 91       	pop	r28
    3d8a:	1f 91       	pop	r17
    3d8c:	0f 91       	pop	r16
    3d8e:	ff 90       	pop	r15
    3d90:	ef 90       	pop	r14
    3d92:	df 90       	pop	r13
    3d94:	cf 90       	pop	r12
    3d96:	bf 90       	pop	r11
    3d98:	af 90       	pop	r10
    3d9a:	9f 90       	pop	r9
    3d9c:	8f 90       	pop	r8
    3d9e:	7f 90       	pop	r7
    3da0:	6f 90       	pop	r6
    3da2:	5f 90       	pop	r5
    3da4:	4f 90       	pop	r4
    3da6:	3f 90       	pop	r3
    3da8:	2f 90       	pop	r2
    3daa:	08 95       	ret

00003dac <lora_driver_set_otaa_identity>:
    3dac:	ef 92       	push	r14
    3dae:	ff 92       	push	r15
    3db0:	0f 93       	push	r16
    3db2:	1f 93       	push	r17
    3db4:	cf 93       	push	r28
    3db6:	df 93       	push	r29
    3db8:	ec 01       	movw	r28, r24
    3dba:	8b 01       	movw	r16, r22
    3dbc:	7a 01       	movw	r14, r20
    3dbe:	81 e0       	ldi	r24, 0x01	; 1
    3dc0:	0c df       	rcall	.-488    	; 0x3bda <lora_driver_set_adaptive_data_rate>
    3dc2:	81 11       	cpse	r24, r1
    3dc4:	0d c0       	rjmp	.+26     	; 0x3de0 <lora_driver_set_otaa_identity+0x34>
    3dc6:	ce 01       	movw	r24, r28
    3dc8:	25 de       	rcall	.-950    	; 0x3a14 <lora_driver_set_application_identifier>
    3dca:	81 11       	cpse	r24, r1
    3dcc:	09 c0       	rjmp	.+18     	; 0x3de0 <lora_driver_set_otaa_identity+0x34>
    3dce:	c8 01       	movw	r24, r16
    3dd0:	32 de       	rcall	.-924    	; 0x3a36 <lora_driver_set_application_key>
    3dd2:	81 11       	cpse	r24, r1
    3dd4:	05 c0       	rjmp	.+10     	; 0x3de0 <lora_driver_set_otaa_identity+0x34>
    3dd6:	c7 01       	movw	r24, r14
    3dd8:	0c de       	rcall	.-1000   	; 0x39f2 <lora_driver_set_device_identifier>
    3dda:	81 11       	cpse	r24, r1
    3ddc:	01 c0       	rjmp	.+2      	; 0x3de0 <lora_driver_set_otaa_identity+0x34>
    3dde:	3c de       	rcall	.-904    	; 0x3a58 <lora_driver_save_mac>
    3de0:	df 91       	pop	r29
    3de2:	cf 91       	pop	r28
    3de4:	1f 91       	pop	r17
    3de6:	0f 91       	pop	r16
    3de8:	ff 90       	pop	r15
    3dea:	ef 90       	pop	r14
    3dec:	08 95       	ret

00003dee <lora_driver_map_return_code_to_text>:
    3dee:	90 e0       	ldi	r25, 0x00	; 0
    3df0:	fc 01       	movw	r30, r24
    3df2:	ee 0f       	add	r30, r30
    3df4:	ff 1f       	adc	r31, r31
    3df6:	8e 0f       	add	r24, r30
    3df8:	9f 1f       	adc	r25, r31
    3dfa:	fc 01       	movw	r30, r24
    3dfc:	e4 52       	subi	r30, 0x24	; 36
    3dfe:	f8 4f       	sbci	r31, 0xF8	; 248
    3e00:	81 81       	ldd	r24, Z+1	; 0x01
    3e02:	92 81       	ldd	r25, Z+2	; 0x02
    3e04:	08 95       	ret

00003e06 <decode_port_no>:
    3e06:	dc 01       	movw	r26, r24
    3e08:	00 97       	sbiw	r24, 0x00	; 0
    3e0a:	29 f1       	breq	.+74     	; 0x3e56 <decode_port_no+0x50>
    3e0c:	fb 01       	movw	r30, r22
    3e0e:	20 81       	ld	r18, Z
    3e10:	fc 01       	movw	r30, r24
    3e12:	01 90       	ld	r0, Z+
    3e14:	00 20       	and	r0, r0
    3e16:	e9 f7       	brne	.-6      	; 0x3e12 <decode_port_no+0xc>
    3e18:	31 97       	sbiw	r30, 0x01	; 1
    3e1a:	e8 1b       	sub	r30, r24
    3e1c:	f9 0b       	sbc	r31, r25
    3e1e:	82 2f       	mov	r24, r18
    3e20:	90 e0       	ldi	r25, 0x00	; 0
    3e22:	e8 17       	cp	r30, r24
    3e24:	f9 07       	cpc	r31, r25
    3e26:	c8 f0       	brcs	.+50     	; 0x3e5a <decode_port_no+0x54>
    3e28:	80 e0       	ldi	r24, 0x00	; 0
    3e2a:	08 c0       	rjmp	.+16     	; 0x3e3c <decode_port_no+0x36>
    3e2c:	88 0f       	add	r24, r24
    3e2e:	38 2f       	mov	r19, r24
    3e30:	33 0f       	add	r19, r19
    3e32:	33 0f       	add	r19, r19
    3e34:	83 0f       	add	r24, r19
    3e36:	80 53       	subi	r24, 0x30	; 48
    3e38:	89 0f       	add	r24, r25
    3e3a:	2f 5f       	subi	r18, 0xFF	; 255
    3e3c:	fd 01       	movw	r30, r26
    3e3e:	e2 0f       	add	r30, r18
    3e40:	f1 1d       	adc	r31, r1
    3e42:	90 81       	ld	r25, Z
    3e44:	30 ed       	ldi	r19, 0xD0	; 208
    3e46:	39 0f       	add	r19, r25
    3e48:	3a 30       	cpi	r19, 0x0A	; 10
    3e4a:	10 f4       	brcc	.+4      	; 0x3e50 <decode_port_no+0x4a>
    3e4c:	91 11       	cpse	r25, r1
    3e4e:	ee cf       	rjmp	.-36     	; 0x3e2c <decode_port_no+0x26>
    3e50:	fb 01       	movw	r30, r22
    3e52:	20 83       	st	Z, r18
    3e54:	08 95       	ret
    3e56:	80 e0       	ldi	r24, 0x00	; 0
    3e58:	08 95       	ret
    3e5a:	80 e0       	ldi	r24, 0x00	; 0
    3e5c:	08 95       	ret

00003e5e <decode_hexadecimal_string_bytes>:
    3e5e:	0f 93       	push	r16
    3e60:	1f 93       	push	r17
    3e62:	cf 93       	push	r28
    3e64:	df 93       	push	r29
    3e66:	dc 01       	movw	r26, r24
    3e68:	ea 01       	movw	r28, r20
    3e6a:	20 97       	sbiw	r28, 0x00	; 0
    3e6c:	e1 f1       	breq	.+120    	; 0x3ee6 <decode_hexadecimal_string_bytes+0x88>
    3e6e:	fa 01       	movw	r30, r20
    3e70:	01 90       	ld	r0, Z+
    3e72:	00 20       	and	r0, r0
    3e74:	e9 f7       	brne	.-6      	; 0x3e70 <decode_hexadecimal_string_bytes+0x12>
    3e76:	31 97       	sbiw	r30, 0x01	; 1
    3e78:	e4 1b       	sub	r30, r20
    3e7a:	f5 0b       	sbc	r31, r21
    3e7c:	32 97       	sbiw	r30, 0x02	; 2
    3e7e:	10 f5       	brcc	.+68     	; 0x3ec4 <decode_hexadecimal_string_bytes+0x66>
    3e80:	32 c0       	rjmp	.+100    	; 0x3ee6 <decode_hexadecimal_string_bytes+0x88>
    3e82:	8d 01       	movw	r16, r26
    3e84:	04 0f       	add	r16, r20
    3e86:	15 1f       	adc	r17, r21
    3e88:	30 e0       	ldi	r19, 0x00	; 0
    3e8a:	ae 01       	movw	r20, r28
    3e8c:	42 0f       	add	r20, r18
    3e8e:	53 1f       	adc	r21, r19
    3e90:	fa 01       	movw	r30, r20
    3e92:	90 81       	ld	r25, Z
    3e94:	91 34       	cpi	r25, 0x41	; 65
    3e96:	28 f0       	brcs	.+10     	; 0x3ea2 <decode_hexadecimal_string_bytes+0x44>
    3e98:	97 53       	subi	r25, 0x37	; 55
    3e9a:	59 2f       	mov	r21, r25
    3e9c:	52 95       	swap	r21
    3e9e:	50 7f       	andi	r21, 0xF0	; 240
    3ea0:	03 c0       	rjmp	.+6      	; 0x3ea8 <decode_hexadecimal_string_bytes+0x4a>
    3ea2:	59 2f       	mov	r21, r25
    3ea4:	52 95       	swap	r21
    3ea6:	50 7f       	andi	r21, 0xF0	; 240
    3ea8:	2c 0f       	add	r18, r28
    3eaa:	3d 1f       	adc	r19, r29
    3eac:	f9 01       	movw	r30, r18
    3eae:	91 81       	ldd	r25, Z+1	; 0x01
    3eb0:	91 34       	cpi	r25, 0x41	; 65
    3eb2:	10 f0       	brcs	.+4      	; 0x3eb8 <decode_hexadecimal_string_bytes+0x5a>
    3eb4:	97 53       	subi	r25, 0x37	; 55
    3eb6:	01 c0       	rjmp	.+2      	; 0x3eba <decode_hexadecimal_string_bytes+0x5c>
    3eb8:	90 53       	subi	r25, 0x30	; 48
    3eba:	95 0f       	add	r25, r21
    3ebc:	f8 01       	movw	r30, r16
    3ebe:	90 83       	st	Z, r25
    3ec0:	8f 5f       	subi	r24, 0xFF	; 255
    3ec2:	01 c0       	rjmp	.+2      	; 0x3ec6 <decode_hexadecimal_string_bytes+0x68>
    3ec4:	80 e0       	ldi	r24, 0x00	; 0
    3ec6:	28 2f       	mov	r18, r24
    3ec8:	22 0f       	add	r18, r18
    3eca:	48 2f       	mov	r20, r24
    3ecc:	50 e0       	ldi	r21, 0x00	; 0
    3ece:	fe 01       	movw	r30, r28
    3ed0:	01 90       	ld	r0, Z+
    3ed2:	00 20       	and	r0, r0
    3ed4:	e9 f7       	brne	.-6      	; 0x3ed0 <decode_hexadecimal_string_bytes+0x72>
    3ed6:	31 97       	sbiw	r30, 0x01	; 1
    3ed8:	ec 1b       	sub	r30, r28
    3eda:	fd 0b       	sbc	r31, r29
    3edc:	4e 17       	cp	r20, r30
    3ede:	5f 07       	cpc	r21, r31
    3ee0:	10 f4       	brcc	.+4      	; 0x3ee6 <decode_hexadecimal_string_bytes+0x88>
    3ee2:	86 13       	cpse	r24, r22
    3ee4:	ce cf       	rjmp	.-100    	; 0x3e82 <decode_hexadecimal_string_bytes+0x24>
    3ee6:	df 91       	pop	r29
    3ee8:	cf 91       	pop	r28
    3eea:	1f 91       	pop	r17
    3eec:	0f 91       	pop	r16
    3eee:	08 95       	ret

00003ef0 <reg_read_register>:
    3ef0:	fc 01       	movw	r30, r24
    3ef2:	80 81       	ld	r24, Z
    3ef4:	08 95       	ret

00003ef6 <reg_read_bit>:
    3ef6:	fc 01       	movw	r30, r24
    3ef8:	20 81       	ld	r18, Z
    3efa:	81 e0       	ldi	r24, 0x01	; 1
    3efc:	90 e0       	ldi	r25, 0x00	; 0
    3efe:	02 c0       	rjmp	.+4      	; 0x3f04 <reg_read_bit+0xe>
    3f00:	88 0f       	add	r24, r24
    3f02:	99 1f       	adc	r25, r25
    3f04:	6a 95       	dec	r22
    3f06:	e2 f7       	brpl	.-8      	; 0x3f00 <reg_read_bit+0xa>
    3f08:	82 23       	and	r24, r18
    3f0a:	08 95       	ret

00003f0c <reg_read_bits>:
    3f0c:	fc 01       	movw	r30, r24
    3f0e:	80 81       	ld	r24, Z
    3f10:	86 23       	and	r24, r22
    3f12:	08 95       	ret

00003f14 <reg_set_register>:
    3f14:	fc 01       	movw	r30, r24
    3f16:	60 83       	st	Z, r22
    3f18:	08 95       	ret

00003f1a <reg_clear_register>:
    3f1a:	fc 01       	movw	r30, r24
    3f1c:	10 82       	st	Z, r1
    3f1e:	08 95       	ret

00003f20 <reg_set_bit>:
    3f20:	fc 01       	movw	r30, r24
    3f22:	40 81       	ld	r20, Z
    3f24:	21 e0       	ldi	r18, 0x01	; 1
    3f26:	30 e0       	ldi	r19, 0x00	; 0
    3f28:	02 c0       	rjmp	.+4      	; 0x3f2e <reg_set_bit+0xe>
    3f2a:	22 0f       	add	r18, r18
    3f2c:	33 1f       	adc	r19, r19
    3f2e:	6a 95       	dec	r22
    3f30:	e2 f7       	brpl	.-8      	; 0x3f2a <reg_set_bit+0xa>
    3f32:	24 2b       	or	r18, r20
    3f34:	20 83       	st	Z, r18
    3f36:	08 95       	ret

00003f38 <reg_set_bits>:
    3f38:	fc 01       	movw	r30, r24
    3f3a:	20 81       	ld	r18, Z
    3f3c:	62 2b       	or	r22, r18
    3f3e:	60 83       	st	Z, r22
    3f40:	08 95       	ret

00003f42 <reg_toggle_bit>:
    3f42:	fc 01       	movw	r30, r24
    3f44:	40 81       	ld	r20, Z
    3f46:	21 e0       	ldi	r18, 0x01	; 1
    3f48:	30 e0       	ldi	r19, 0x00	; 0
    3f4a:	02 c0       	rjmp	.+4      	; 0x3f50 <reg_toggle_bit+0xe>
    3f4c:	22 0f       	add	r18, r18
    3f4e:	33 1f       	adc	r19, r19
    3f50:	6a 95       	dec	r22
    3f52:	e2 f7       	brpl	.-8      	; 0x3f4c <reg_toggle_bit+0xa>
    3f54:	24 27       	eor	r18, r20
    3f56:	20 83       	st	Z, r18
    3f58:	08 95       	ret

00003f5a <reg_toggle_bits>:
    3f5a:	fc 01       	movw	r30, r24
    3f5c:	20 81       	ld	r18, Z
    3f5e:	62 27       	eor	r22, r18
    3f60:	60 83       	st	Z, r22
    3f62:	08 95       	ret

00003f64 <reg_clear_bit>:
    3f64:	fc 01       	movw	r30, r24
    3f66:	90 81       	ld	r25, Z
    3f68:	21 e0       	ldi	r18, 0x01	; 1
    3f6a:	30 e0       	ldi	r19, 0x00	; 0
    3f6c:	02 c0       	rjmp	.+4      	; 0x3f72 <reg_clear_bit+0xe>
    3f6e:	22 0f       	add	r18, r18
    3f70:	33 1f       	adc	r19, r19
    3f72:	6a 95       	dec	r22
    3f74:	e2 f7       	brpl	.-8      	; 0x3f6e <reg_clear_bit+0xa>
    3f76:	20 95       	com	r18
    3f78:	29 23       	and	r18, r25
    3f7a:	20 83       	st	Z, r18
    3f7c:	08 95       	ret

00003f7e <reg_clear_bits>:
    3f7e:	fc 01       	movw	r30, r24
    3f80:	90 81       	ld	r25, Z
    3f82:	60 95       	com	r22
    3f84:	69 23       	and	r22, r25
    3f86:	60 83       	st	Z, r22
    3f88:	08 95       	ret

00003f8a <_serial_call_back>:
    3f8a:	80 91 df 09 	lds	r24, 0x09DF	; 0x8009df <crc_sum.1941>
    3f8e:	86 0f       	add	r24, r22
    3f90:	80 93 df 09 	sts	0x09DF, r24	; 0x8009df <crc_sum.1941>
    3f94:	90 91 e2 09 	lds	r25, 0x09E2	; 0x8009e2 <_mh_state>
    3f98:	91 30       	cpi	r25, 0x01	; 1
    3f9a:	79 f0       	breq	.+30     	; 0x3fba <_serial_call_back+0x30>
    3f9c:	28 f0       	brcs	.+10     	; 0x3fa8 <_serial_call_back+0x1e>
    3f9e:	92 30       	cpi	r25, 0x02	; 2
    3fa0:	a9 f0       	breq	.+42     	; 0x3fcc <_serial_call_back+0x42>
    3fa2:	93 30       	cpi	r25, 0x03	; 3
    3fa4:	19 f1       	breq	.+70     	; 0x3fec <_serial_call_back+0x62>
    3fa6:	08 95       	ret
    3fa8:	6f 3f       	cpi	r22, 0xFF	; 255
    3faa:	09 f0       	breq	.+2      	; 0x3fae <_serial_call_back+0x24>
    3fac:	48 c0       	rjmp	.+144    	; 0x403e <_serial_call_back+0xb4>
    3fae:	10 92 df 09 	sts	0x09DF, r1	; 0x8009df <crc_sum.1941>
    3fb2:	81 e0       	ldi	r24, 0x01	; 1
    3fb4:	80 93 e2 09 	sts	0x09E2, r24	; 0x8009e2 <_mh_state>
    3fb8:	08 95       	ret
    3fba:	66 38       	cpi	r22, 0x86	; 134
    3fbc:	09 f0       	breq	.+2      	; 0x3fc0 <_serial_call_back+0x36>
    3fbe:	3f c0       	rjmp	.+126    	; 0x403e <_serial_call_back+0xb4>
    3fc0:	10 92 de 09 	sts	0x09DE, r1	; 0x8009de <inDex.1939>
    3fc4:	82 e0       	ldi	r24, 0x02	; 2
    3fc6:	80 93 e2 09 	sts	0x09E2, r24	; 0x8009e2 <_mh_state>
    3fca:	08 95       	ret
    3fcc:	e0 91 de 09 	lds	r30, 0x09DE	; 0x8009de <inDex.1939>
    3fd0:	81 e0       	ldi	r24, 0x01	; 1
    3fd2:	8e 0f       	add	r24, r30
    3fd4:	80 93 de 09 	sts	0x09DE, r24	; 0x8009de <inDex.1939>
    3fd8:	f0 e0       	ldi	r31, 0x00	; 0
    3fda:	e4 52       	subi	r30, 0x24	; 36
    3fdc:	f6 4f       	sbci	r31, 0xF6	; 246
    3fde:	60 83       	st	Z, r22
    3fe0:	82 30       	cpi	r24, 0x02	; 2
    3fe2:	69 f5       	brne	.+90     	; 0x403e <_serial_call_back+0xb4>
    3fe4:	83 e0       	ldi	r24, 0x03	; 3
    3fe6:	80 93 e2 09 	sts	0x09E2, r24	; 0x8009e2 <_mh_state>
    3fea:	08 95       	ret
    3fec:	90 91 de 09 	lds	r25, 0x09DE	; 0x8009de <inDex.1939>
    3ff0:	21 e0       	ldi	r18, 0x01	; 1
    3ff2:	29 0f       	add	r18, r25
    3ff4:	20 93 de 09 	sts	0x09DE, r18	; 0x8009de <inDex.1939>
    3ff8:	96 30       	cpi	r25, 0x06	; 6
    3ffa:	09 f5       	brne	.+66     	; 0x403e <_serial_call_back+0xb4>
    3ffc:	81 11       	cpse	r24, r1
    3ffe:	0e c0       	rjmp	.+28     	; 0x401c <_serial_call_back+0x92>
    4000:	ec ed       	ldi	r30, 0xDC	; 220
    4002:	f9 e0       	ldi	r31, 0x09	; 9
    4004:	80 81       	ld	r24, Z
    4006:	90 e0       	ldi	r25, 0x00	; 0
    4008:	98 2f       	mov	r25, r24
    400a:	88 27       	eor	r24, r24
    400c:	21 81       	ldd	r18, Z+1	; 0x01
    400e:	82 0f       	add	r24, r18
    4010:	91 1d       	adc	r25, r1
    4012:	90 93 e4 09 	sts	0x09E4, r25	; 0x8009e4 <_ppm+0x1>
    4016:	80 93 e3 09 	sts	0x09E3, r24	; 0x8009e3 <_ppm>
    401a:	04 c0       	rjmp	.+8      	; 0x4024 <_serial_call_back+0x9a>
    401c:	10 92 e4 09 	sts	0x09E4, r1	; 0x8009e4 <_ppm+0x1>
    4020:	10 92 e3 09 	sts	0x09E3, r1	; 0x8009e3 <_ppm>
    4024:	10 92 e2 09 	sts	0x09E2, r1	; 0x8009e2 <_mh_state>
    4028:	e0 91 e0 09 	lds	r30, 0x09E0	; 0x8009e0 <_app_call_back>
    402c:	f0 91 e1 09 	lds	r31, 0x09E1	; 0x8009e1 <_app_call_back+0x1>
    4030:	30 97       	sbiw	r30, 0x00	; 0
    4032:	29 f0       	breq	.+10     	; 0x403e <_serial_call_back+0xb4>
    4034:	80 91 e3 09 	lds	r24, 0x09E3	; 0x8009e3 <_ppm>
    4038:	90 91 e4 09 	lds	r25, 0x09E4	; 0x8009e4 <_ppm+0x1>
    403c:	19 95       	eicall
    403e:	08 95       	ret

00004040 <mh_z19_create>:
    4040:	8f 92       	push	r8
    4042:	9f 92       	push	r9
    4044:	af 92       	push	r10
    4046:	cf 92       	push	r12
    4048:	ef 92       	push	r14
    404a:	0f 93       	push	r16
    404c:	cf 93       	push	r28
    404e:	df 93       	push	r29
    4050:	eb 01       	movw	r28, r22
    4052:	0f 2e       	mov	r0, r31
    4054:	f5 ec       	ldi	r31, 0xC5	; 197
    4056:	8f 2e       	mov	r8, r31
    4058:	ff e1       	ldi	r31, 0x1F	; 31
    405a:	9f 2e       	mov	r9, r31
    405c:	f0 2d       	mov	r31, r0
    405e:	68 94       	set
    4060:	aa 24       	eor	r10, r10
    4062:	a4 f8       	bld	r10, 4
    4064:	68 94       	set
    4066:	cc 24       	eor	r12, r12
    4068:	c4 f8       	bld	r12, 4
    406a:	e1 2c       	mov	r14, r1
    406c:	00 e0       	ldi	r16, 0x00	; 0
    406e:	23 e0       	ldi	r18, 0x03	; 3
    4070:	40 e8       	ldi	r20, 0x80	; 128
    4072:	55 e2       	ldi	r21, 0x25	; 37
    4074:	60 e0       	ldi	r22, 0x00	; 0
    4076:	70 e0       	ldi	r23, 0x00	; 0
    4078:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <serial_new_instance>
    407c:	90 93 e6 09 	sts	0x09E6, r25	; 0x8009e6 <_serial+0x1>
    4080:	80 93 e5 09 	sts	0x09E5, r24	; 0x8009e5 <_serial>
    4084:	d0 93 e1 09 	sts	0x09E1, r29	; 0x8009e1 <_app_call_back+0x1>
    4088:	c0 93 e0 09 	sts	0x09E0, r28	; 0x8009e0 <_app_call_back>
    408c:	df 91       	pop	r29
    408e:	cf 91       	pop	r28
    4090:	0f 91       	pop	r16
    4092:	ef 90       	pop	r14
    4094:	cf 90       	pop	r12
    4096:	af 90       	pop	r10
    4098:	9f 90       	pop	r9
    409a:	8f 90       	pop	r8
    409c:	08 95       	ret

0000409e <mh_z19_take_meassuring>:
    409e:	cf 93       	push	r28
    40a0:	df 93       	push	r29
    40a2:	cd b7       	in	r28, 0x3d	; 61
    40a4:	de b7       	in	r29, 0x3e	; 62
    40a6:	29 97       	sbiw	r28, 0x09	; 9
    40a8:	0f b6       	in	r0, 0x3f	; 63
    40aa:	f8 94       	cli
    40ac:	de bf       	out	0x3e, r29	; 62
    40ae:	0f be       	out	0x3f, r0	; 63
    40b0:	cd bf       	out	0x3d, r28	; 61
    40b2:	89 e0       	ldi	r24, 0x09	; 9
    40b4:	e1 e4       	ldi	r30, 0x41	; 65
    40b6:	f2 e0       	ldi	r31, 0x02	; 2
    40b8:	9e 01       	movw	r18, r28
    40ba:	2f 5f       	subi	r18, 0xFF	; 255
    40bc:	3f 4f       	sbci	r19, 0xFF	; 255
    40be:	d9 01       	movw	r26, r18
    40c0:	01 90       	ld	r0, Z+
    40c2:	0d 92       	st	X+, r0
    40c4:	8a 95       	dec	r24
    40c6:	e1 f7       	brne	.-8      	; 0x40c0 <mh_z19_take_meassuring+0x22>
    40c8:	10 92 e4 09 	sts	0x09E4, r1	; 0x8009e4 <_ppm+0x1>
    40cc:	10 92 e3 09 	sts	0x09E3, r1	; 0x8009e3 <_ppm>
    40d0:	80 91 e5 09 	lds	r24, 0x09E5	; 0x8009e5 <_serial>
    40d4:	90 91 e6 09 	lds	r25, 0x09E6	; 0x8009e6 <_serial+0x1>
    40d8:	00 97       	sbiw	r24, 0x00	; 0
    40da:	39 f0       	breq	.+14     	; 0x40ea <mh_z19_take_meassuring+0x4c>
    40dc:	42 2f       	mov	r20, r18
    40de:	53 2f       	mov	r21, r19
    40e0:	69 e0       	ldi	r22, 0x09	; 9
    40e2:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <serial_send_bytes>
    40e6:	80 e0       	ldi	r24, 0x00	; 0
    40e8:	01 c0       	rjmp	.+2      	; 0x40ec <mh_z19_take_meassuring+0x4e>
    40ea:	82 e0       	ldi	r24, 0x02	; 2
    40ec:	29 96       	adiw	r28, 0x09	; 9
    40ee:	0f b6       	in	r0, 0x3f	; 63
    40f0:	f8 94       	cli
    40f2:	de bf       	out	0x3e, r29	; 62
    40f4:	0f be       	out	0x3f, r0	; 63
    40f6:	cd bf       	out	0x3d, r28	; 61
    40f8:	df 91       	pop	r29
    40fa:	cf 91       	pop	r28
    40fc:	08 95       	ret

000040fe <rcServoSet>:
    40fe:	65 36       	cpi	r22, 0x65	; 101
    4100:	0c f0       	brlt	.+2      	; 0x4104 <rcServoSet+0x6>
    4102:	64 e6       	ldi	r22, 0x64	; 100
    4104:	6c 39       	cpi	r22, 0x9C	; 156
    4106:	0c f4       	brge	.+2      	; 0x410a <rcServoSet+0xc>
    4108:	6c e9       	ldi	r22, 0x9C	; 156
    410a:	96 ef       	ldi	r25, 0xF6	; 246
    410c:	69 02       	muls	r22, r25
    410e:	b0 01       	movw	r22, r0
    4110:	11 24       	eor	r1, r1
    4112:	68 54       	subi	r22, 0x48	; 72
    4114:	74 4f       	sbci	r23, 0xF4	; 244
    4116:	81 11       	cpse	r24, r1
    4118:	05 c0       	rjmp	.+10     	; 0x4124 <rcServoSet+0x26>
    411a:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    411e:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    4122:	08 95       	ret
    4124:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    4128:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    412c:	08 95       	ret

0000412e <rcServoCreate>:
    412e:	ea e0       	ldi	r30, 0x0A	; 10
    4130:	f1 e0       	ldi	r31, 0x01	; 1
    4132:	80 81       	ld	r24, Z
    4134:	88 61       	ori	r24, 0x18	; 24
    4136:	80 83       	st	Z, r24
    4138:	8f e3       	ldi	r24, 0x3F	; 63
    413a:	9c e9       	ldi	r25, 0x9C	; 156
    413c:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
    4140:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
    4144:	60 e0       	ldi	r22, 0x00	; 0
    4146:	80 e0       	ldi	r24, 0x00	; 0
    4148:	da df       	rcall	.-76     	; 0x40fe <rcServoSet>
    414a:	60 e0       	ldi	r22, 0x00	; 0
    414c:	81 e0       	ldi	r24, 0x01	; 1
    414e:	d7 df       	rcall	.-82     	; 0x40fe <rcServoSet>
    4150:	e0 e2       	ldi	r30, 0x20	; 32
    4152:	f1 e0       	ldi	r31, 0x01	; 1
    4154:	80 81       	ld	r24, Z
    4156:	82 6a       	ori	r24, 0xA2	; 162
    4158:	80 83       	st	Z, r24
    415a:	e1 e2       	ldi	r30, 0x21	; 33
    415c:	f1 e0       	ldi	r31, 0x01	; 1
    415e:	80 81       	ld	r24, Z
    4160:	8a 61       	ori	r24, 0x1A	; 26
    4162:	80 83       	st	Z, r24
    4164:	08 95       	ret

00004166 <_callBack>:
    4166:	e0 91 ef 09 	lds	r30, 0x09EF	; 0x8009ef <_callBackFunction>
    416a:	f0 91 f0 09 	lds	r31, 0x09F0	; 0x8009f0 <_callBackFunction+0x1>
    416e:	30 97       	sbiw	r30, 0x00	; 0
    4170:	09 f0       	breq	.+2      	; 0x4174 <_callBack+0xe>
    4172:	19 95       	eicall
    4174:	08 95       	ret

00004176 <_tsl2591TwiCallback>:
    4176:	64 50       	subi	r22, 0x04	; 4
    4178:	62 30       	cpi	r22, 0x02	; 2
    417a:	08 f0       	brcs	.+2      	; 0x417e <_tsl2591TwiCallback+0x8>
    417c:	3b c0       	rjmp	.+118    	; 0x41f4 <_tsl2591TwiCallback+0x7e>
    417e:	20 91 ee 09 	lds	r18, 0x09EE	; 0x8009ee <_nextState>
    4182:	22 30       	cpi	r18, 0x02	; 2
    4184:	79 f0       	breq	.+30     	; 0x41a4 <_tsl2591TwiCallback+0x2e>
    4186:	18 f4       	brcc	.+6      	; 0x418e <_tsl2591TwiCallback+0x18>
    4188:	21 30       	cpi	r18, 0x01	; 1
    418a:	31 f0       	breq	.+12     	; 0x4198 <_tsl2591TwiCallback+0x22>
    418c:	30 c0       	rjmp	.+96     	; 0x41ee <_tsl2591TwiCallback+0x78>
    418e:	23 30       	cpi	r18, 0x03	; 3
    4190:	81 f0       	breq	.+32     	; 0x41b2 <_tsl2591TwiCallback+0x3c>
    4192:	24 30       	cpi	r18, 0x04	; 4
    4194:	a1 f0       	breq	.+40     	; 0x41be <_tsl2591TwiCallback+0x48>
    4196:	2b c0       	rjmp	.+86     	; 0x41ee <_tsl2591TwiCallback+0x78>
    4198:	22 e0       	ldi	r18, 0x02	; 2
    419a:	20 93 ee 09 	sts	0x09EE, r18	; 0x8009ee <_nextState>
    419e:	61 e0       	ldi	r22, 0x01	; 1
    41a0:	0a c2       	rjmp	.+1044   	; 0x45b6 <twiReceive>
    41a2:	08 95       	ret
    41a4:	fa 01       	movw	r30, r20
    41a6:	80 81       	ld	r24, Z
    41a8:	80 93 eb 09 	sts	0x09EB, r24	; 0x8009eb <_deviceId>
    41ac:	82 e0       	ldi	r24, 0x02	; 2
    41ae:	db cf       	rjmp	.-74     	; 0x4166 <_callBack>
    41b0:	08 95       	ret
    41b2:	24 e0       	ldi	r18, 0x04	; 4
    41b4:	20 93 ee 09 	sts	0x09EE, r18	; 0x8009ee <_nextState>
    41b8:	64 e0       	ldi	r22, 0x04	; 4
    41ba:	fd c1       	rjmp	.+1018   	; 0x45b6 <twiReceive>
    41bc:	08 95       	ret
    41be:	fa 01       	movw	r30, r20
    41c0:	81 81       	ldd	r24, Z+1	; 0x01
    41c2:	90 e0       	ldi	r25, 0x00	; 0
    41c4:	98 2f       	mov	r25, r24
    41c6:	88 27       	eor	r24, r24
    41c8:	20 81       	ld	r18, Z
    41ca:	82 2b       	or	r24, r18
    41cc:	90 93 ea 09 	sts	0x09EA, r25	; 0x8009ea <_fullSpectrumRaw+0x1>
    41d0:	80 93 e9 09 	sts	0x09E9, r24	; 0x8009e9 <_fullSpectrumRaw>
    41d4:	83 81       	ldd	r24, Z+3	; 0x03
    41d6:	90 e0       	ldi	r25, 0x00	; 0
    41d8:	98 2f       	mov	r25, r24
    41da:	88 27       	eor	r24, r24
    41dc:	22 81       	ldd	r18, Z+2	; 0x02
    41de:	82 2b       	or	r24, r18
    41e0:	90 93 e8 09 	sts	0x09E8, r25	; 0x8009e8 <_infraredRaw+0x1>
    41e4:	80 93 e7 09 	sts	0x09E7, r24	; 0x8009e7 <_infraredRaw>
    41e8:	81 e0       	ldi	r24, 0x01	; 1
    41ea:	bd cf       	rjmp	.-134    	; 0x4166 <_callBack>
    41ec:	08 95       	ret
    41ee:	80 e0       	ldi	r24, 0x00	; 0
    41f0:	ba cf       	rjmp	.-140    	; 0x4166 <_callBack>
    41f2:	08 95       	ret
    41f4:	10 92 ee 09 	sts	0x09EE, r1	; 0x8009ee <_nextState>
    41f8:	86 e0       	ldi	r24, 0x06	; 6
    41fa:	b5 cf       	rjmp	.-150    	; 0x4166 <_callBack>
    41fc:	08 95       	ret

000041fe <_twiTransmit>:
    41fe:	20 91 f1 09 	lds	r18, 0x09F1	; 0x8009f1 <_twiHandler>
    4202:	30 91 f2 09 	lds	r19, 0x09F2	; 0x8009f2 <_twiHandler+0x1>
    4206:	21 15       	cp	r18, r1
    4208:	31 05       	cpc	r19, r1
    420a:	41 f0       	breq	.+16     	; 0x421c <_twiTransmit+0x1e>
    420c:	46 2f       	mov	r20, r22
    420e:	bc 01       	movw	r22, r24
    4210:	c9 01       	movw	r24, r18
    4212:	85 d1       	rcall	.+778    	; 0x451e <twiTransmit>
    4214:	82 30       	cpi	r24, 0x02	; 2
    4216:	21 f0       	breq	.+8      	; 0x4220 <_twiTransmit+0x22>
    4218:	80 e0       	ldi	r24, 0x00	; 0
    421a:	08 95       	ret
    421c:	87 e0       	ldi	r24, 0x07	; 7
    421e:	08 95       	ret
    4220:	85 e0       	ldi	r24, 0x05	; 5
    4222:	08 95       	ret

00004224 <tsl2591Create>:
    4224:	0f 93       	push	r16
    4226:	1f 93       	push	r17
    4228:	90 93 f0 09 	sts	0x09F0, r25	; 0x8009f0 <_callBackFunction+0x1>
    422c:	80 93 ef 09 	sts	0x09EF, r24	; 0x8009ef <_callBackFunction>
    4230:	0b eb       	ldi	r16, 0xBB	; 187
    4232:	10 e2       	ldi	r17, 0x20	; 32
    4234:	20 e0       	ldi	r18, 0x00	; 0
    4236:	34 e2       	ldi	r19, 0x24	; 36
    4238:	44 ef       	ldi	r20, 0xF4	; 244
    423a:	50 e0       	ldi	r21, 0x00	; 0
    423c:	60 e0       	ldi	r22, 0x00	; 0
    423e:	89 e2       	ldi	r24, 0x29	; 41
    4240:	1d d1       	rcall	.+570    	; 0x447c <twiCreate>
    4242:	90 93 f2 09 	sts	0x09F2, r25	; 0x8009f2 <_twiHandler+0x1>
    4246:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <_twiHandler>
    424a:	89 2b       	or	r24, r25
    424c:	11 f0       	breq	.+4      	; 0x4252 <tsl2591Create+0x2e>
    424e:	80 e0       	ldi	r24, 0x00	; 0
    4250:	01 c0       	rjmp	.+2      	; 0x4254 <tsl2591Create+0x30>
    4252:	88 e0       	ldi	r24, 0x08	; 8
    4254:	1f 91       	pop	r17
    4256:	0f 91       	pop	r16
    4258:	08 95       	ret

0000425a <tsl2591Enable>:
    425a:	cf 93       	push	r28
    425c:	df 93       	push	r29
    425e:	1f 92       	push	r1
    4260:	1f 92       	push	r1
    4262:	cd b7       	in	r28, 0x3d	; 61
    4264:	de b7       	in	r29, 0x3e	; 62
    4266:	80 ea       	ldi	r24, 0xA0	; 160
    4268:	89 83       	std	Y+1, r24	; 0x01
    426a:	83 e0       	ldi	r24, 0x03	; 3
    426c:	8a 83       	std	Y+2, r24	; 0x02
    426e:	10 92 ee 09 	sts	0x09EE, r1	; 0x8009ee <_nextState>
    4272:	62 e0       	ldi	r22, 0x02	; 2
    4274:	ce 01       	movw	r24, r28
    4276:	01 96       	adiw	r24, 0x01	; 1
    4278:	c2 df       	rcall	.-124    	; 0x41fe <_twiTransmit>
    427a:	0f 90       	pop	r0
    427c:	0f 90       	pop	r0
    427e:	df 91       	pop	r29
    4280:	cf 91       	pop	r28
    4282:	08 95       	ret

00004284 <tsl2591FetchData>:
    4284:	cf 93       	push	r28
    4286:	df 93       	push	r29
    4288:	1f 92       	push	r1
    428a:	cd b7       	in	r28, 0x3d	; 61
    428c:	de b7       	in	r29, 0x3e	; 62
    428e:	84 eb       	ldi	r24, 0xB4	; 180
    4290:	89 83       	std	Y+1, r24	; 0x01
    4292:	83 e0       	ldi	r24, 0x03	; 3
    4294:	80 93 ee 09 	sts	0x09EE, r24	; 0x8009ee <_nextState>
    4298:	61 e0       	ldi	r22, 0x01	; 1
    429a:	ce 01       	movw	r24, r28
    429c:	01 96       	adiw	r24, 0x01	; 1
    429e:	af df       	rcall	.-162    	; 0x41fe <_twiTransmit>
    42a0:	0f 90       	pop	r0
    42a2:	df 91       	pop	r29
    42a4:	cf 91       	pop	r28
    42a6:	08 95       	ret

000042a8 <tsl2591GetLux>:
    42a8:	2f 92       	push	r2
    42aa:	3f 92       	push	r3
    42ac:	4f 92       	push	r4
    42ae:	5f 92       	push	r5
    42b0:	6f 92       	push	r6
    42b2:	7f 92       	push	r7
    42b4:	8f 92       	push	r8
    42b6:	9f 92       	push	r9
    42b8:	af 92       	push	r10
    42ba:	bf 92       	push	r11
    42bc:	cf 92       	push	r12
    42be:	df 92       	push	r13
    42c0:	ef 92       	push	r14
    42c2:	ff 92       	push	r15
    42c4:	0f 93       	push	r16
    42c6:	1f 93       	push	r17
    42c8:	cf 93       	push	r28
    42ca:	df 93       	push	r29
    42cc:	c0 91 e7 09 	lds	r28, 0x09E7	; 0x8009e7 <_infraredRaw>
    42d0:	d0 91 e8 09 	lds	r29, 0x09E8	; 0x8009e8 <_infraredRaw+0x1>
    42d4:	cf 3f       	cpi	r28, 0xFF	; 255
    42d6:	2f ef       	ldi	r18, 0xFF	; 255
    42d8:	d2 07       	cpc	r29, r18
    42da:	41 f0       	breq	.+16     	; 0x42ec <tsl2591GetLux+0x44>
    42dc:	60 91 e9 09 	lds	r22, 0x09E9	; 0x8009e9 <_fullSpectrumRaw>
    42e0:	70 91 ea 09 	lds	r23, 0x09EA	; 0x8009ea <_fullSpectrumRaw+0x1>
    42e4:	6f 3f       	cpi	r22, 0xFF	; 255
    42e6:	ef ef       	ldi	r30, 0xFF	; 255
    42e8:	7e 07       	cpc	r23, r30
    42ea:	59 f4       	brne	.+22     	; 0x4302 <tsl2591GetLux+0x5a>
    42ec:	4f ef       	ldi	r20, 0xFF	; 255
    42ee:	5f ef       	ldi	r21, 0xFF	; 255
    42f0:	6f e7       	ldi	r22, 0x7F	; 127
    42f2:	7f e7       	ldi	r23, 0x7F	; 127
    42f4:	fc 01       	movw	r30, r24
    42f6:	40 83       	st	Z, r20
    42f8:	51 83       	std	Z+1, r21	; 0x01
    42fa:	62 83       	std	Z+2, r22	; 0x02
    42fc:	73 83       	std	Z+3, r23	; 0x03
    42fe:	83 e0       	ldi	r24, 0x03	; 3
    4300:	99 c0       	rjmp	.+306    	; 0x4434 <tsl2591GetLux+0x18c>
    4302:	1c 01       	movw	r2, r24
    4304:	80 e0       	ldi	r24, 0x00	; 0
    4306:	90 e0       	ldi	r25, 0x00	; 0
    4308:	18 d3       	rcall	.+1584   	; 0x493a <__floatunsisf>
    430a:	2b 01       	movw	r4, r22
    430c:	3c 01       	movw	r6, r24
    430e:	be 01       	movw	r22, r28
    4310:	80 e0       	ldi	r24, 0x00	; 0
    4312:	90 e0       	ldi	r25, 0x00	; 0
    4314:	12 d3       	rcall	.+1572   	; 0x493a <__floatunsisf>
    4316:	4b 01       	movw	r8, r22
    4318:	5c 01       	movw	r10, r24
    431a:	80 91 ec 09 	lds	r24, 0x09EC	; 0x8009ec <_currentIntegrationTime>
    431e:	90 e0       	ldi	r25, 0x00	; 0
    4320:	01 96       	adiw	r24, 0x01	; 1
    4322:	24 e6       	ldi	r18, 0x64	; 100
    4324:	28 9f       	mul	r18, r24
    4326:	b0 01       	movw	r22, r0
    4328:	29 9f       	mul	r18, r25
    432a:	70 0d       	add	r23, r0
    432c:	11 24       	eor	r1, r1
    432e:	80 91 ed 09 	lds	r24, 0x09ED	; 0x8009ed <_currentGain>
    4332:	80 32       	cpi	r24, 0x20	; 32
    4334:	69 f0       	breq	.+26     	; 0x4350 <tsl2591GetLux+0xa8>
    4336:	80 33       	cpi	r24, 0x30	; 48
    4338:	a1 f0       	breq	.+40     	; 0x4362 <tsl2591GetLux+0xba>
    433a:	80 31       	cpi	r24, 0x10	; 16
    433c:	e1 f4       	brne	.+56     	; 0x4376 <tsl2591GetLux+0xce>
    433e:	0f 2e       	mov	r0, r31
    4340:	c1 2c       	mov	r12, r1
    4342:	d1 2c       	mov	r13, r1
    4344:	f8 ec       	ldi	r31, 0xC8	; 200
    4346:	ef 2e       	mov	r14, r31
    4348:	f1 e4       	ldi	r31, 0x41	; 65
    434a:	ff 2e       	mov	r15, r31
    434c:	f0 2d       	mov	r31, r0
    434e:	1b c0       	rjmp	.+54     	; 0x4386 <tsl2591GetLux+0xde>
    4350:	0f 2e       	mov	r0, r31
    4352:	c1 2c       	mov	r12, r1
    4354:	d1 2c       	mov	r13, r1
    4356:	f6 ed       	ldi	r31, 0xD6	; 214
    4358:	ef 2e       	mov	r14, r31
    435a:	f3 e4       	ldi	r31, 0x43	; 67
    435c:	ff 2e       	mov	r15, r31
    435e:	f0 2d       	mov	r31, r0
    4360:	12 c0       	rjmp	.+36     	; 0x4386 <tsl2591GetLux+0xde>
    4362:	0f 2e       	mov	r0, r31
    4364:	c1 2c       	mov	r12, r1
    4366:	f0 e5       	ldi	r31, 0x50	; 80
    4368:	df 2e       	mov	r13, r31
    436a:	fa e1       	ldi	r31, 0x1A	; 26
    436c:	ef 2e       	mov	r14, r31
    436e:	f6 e4       	ldi	r31, 0x46	; 70
    4370:	ff 2e       	mov	r15, r31
    4372:	f0 2d       	mov	r31, r0
    4374:	08 c0       	rjmp	.+16     	; 0x4386 <tsl2591GetLux+0xde>
    4376:	0f 2e       	mov	r0, r31
    4378:	c1 2c       	mov	r12, r1
    437a:	d1 2c       	mov	r13, r1
    437c:	f0 e8       	ldi	r31, 0x80	; 128
    437e:	ef 2e       	mov	r14, r31
    4380:	ff e3       	ldi	r31, 0x3F	; 63
    4382:	ff 2e       	mov	r15, r31
    4384:	f0 2d       	mov	r31, r0
    4386:	07 2e       	mov	r0, r23
    4388:	00 0c       	add	r0, r0
    438a:	88 0b       	sbc	r24, r24
    438c:	99 0b       	sbc	r25, r25
    438e:	d7 d2       	rcall	.+1454   	; 0x493e <__floatsisf>
    4390:	a7 01       	movw	r20, r14
    4392:	96 01       	movw	r18, r12
    4394:	3b d3       	rcall	.+1654   	; 0x4a0c <__mulsf3>
    4396:	20 e0       	ldi	r18, 0x00	; 0
    4398:	30 e0       	ldi	r19, 0x00	; 0
    439a:	4c ec       	ldi	r20, 0xCC	; 204
    439c:	53 e4       	ldi	r21, 0x43	; 67
    439e:	62 d2       	rcall	.+1220   	; 0x4864 <__divsf3>
    43a0:	6b 01       	movw	r12, r22
    43a2:	7c 01       	movw	r14, r24
    43a4:	25 e8       	ldi	r18, 0x85	; 133
    43a6:	3b ee       	ldi	r19, 0xEB	; 235
    43a8:	41 ed       	ldi	r20, 0xD1	; 209
    43aa:	5f e3       	ldi	r21, 0x3F	; 63
    43ac:	c5 01       	movw	r24, r10
    43ae:	b4 01       	movw	r22, r8
    43b0:	2d d3       	rcall	.+1626   	; 0x4a0c <__mulsf3>
    43b2:	9b 01       	movw	r18, r22
    43b4:	ac 01       	movw	r20, r24
    43b6:	c3 01       	movw	r24, r6
    43b8:	b2 01       	movw	r22, r4
    43ba:	ed d1       	rcall	.+986    	; 0x4796 <__subsf3>
    43bc:	a7 01       	movw	r20, r14
    43be:	96 01       	movw	r18, r12
    43c0:	51 d2       	rcall	.+1186   	; 0x4864 <__divsf3>
    43c2:	16 2f       	mov	r17, r22
    43c4:	d7 2f       	mov	r29, r23
    43c6:	c8 2f       	mov	r28, r24
    43c8:	09 2f       	mov	r16, r25
    43ca:	2d e3       	ldi	r18, 0x3D	; 61
    43cc:	3a e0       	ldi	r19, 0x0A	; 10
    43ce:	47 e1       	ldi	r20, 0x17	; 23
    43d0:	5f e3       	ldi	r21, 0x3F	; 63
    43d2:	c3 01       	movw	r24, r6
    43d4:	b2 01       	movw	r22, r4
    43d6:	1a d3       	rcall	.+1588   	; 0x4a0c <__mulsf3>
    43d8:	2b 01       	movw	r4, r22
    43da:	3c 01       	movw	r6, r24
    43dc:	26 ef       	ldi	r18, 0xF6	; 246
    43de:	38 e2       	ldi	r19, 0x28	; 40
    43e0:	4c e5       	ldi	r20, 0x5C	; 92
    43e2:	5f e3       	ldi	r21, 0x3F	; 63
    43e4:	c5 01       	movw	r24, r10
    43e6:	b4 01       	movw	r22, r8
    43e8:	11 d3       	rcall	.+1570   	; 0x4a0c <__mulsf3>
    43ea:	9b 01       	movw	r18, r22
    43ec:	ac 01       	movw	r20, r24
    43ee:	c3 01       	movw	r24, r6
    43f0:	b2 01       	movw	r22, r4
    43f2:	d1 d1       	rcall	.+930    	; 0x4796 <__subsf3>
    43f4:	a7 01       	movw	r20, r14
    43f6:	96 01       	movw	r18, r12
    43f8:	35 d2       	rcall	.+1130   	; 0x4864 <__divsf3>
    43fa:	c6 2e       	mov	r12, r22
    43fc:	d7 2e       	mov	r13, r23
    43fe:	e8 2e       	mov	r14, r24
    4400:	f9 2e       	mov	r15, r25
    4402:	26 2f       	mov	r18, r22
    4404:	37 2f       	mov	r19, r23
    4406:	48 2f       	mov	r20, r24
    4408:	59 2f       	mov	r21, r25
    440a:	61 2f       	mov	r22, r17
    440c:	7d 2f       	mov	r23, r29
    440e:	8c 2f       	mov	r24, r28
    4410:	90 2f       	mov	r25, r16
    4412:	f8 d2       	rcall	.+1520   	; 0x4a04 <__gesf2>
    4414:	18 16       	cp	r1, r24
    4416:	24 f0       	brlt	.+8      	; 0x4420 <tsl2591GetLux+0x178>
    4418:	1c 2d       	mov	r17, r12
    441a:	dd 2d       	mov	r29, r13
    441c:	ce 2d       	mov	r28, r14
    441e:	0f 2d       	mov	r16, r15
    4420:	41 2f       	mov	r20, r17
    4422:	5d 2f       	mov	r21, r29
    4424:	6c 2f       	mov	r22, r28
    4426:	70 2f       	mov	r23, r16
    4428:	f1 01       	movw	r30, r2
    442a:	40 83       	st	Z, r20
    442c:	51 83       	std	Z+1, r21	; 0x01
    442e:	62 83       	std	Z+2, r22	; 0x02
    4430:	73 83       	std	Z+3, r23	; 0x03
    4432:	80 e0       	ldi	r24, 0x00	; 0
    4434:	df 91       	pop	r29
    4436:	cf 91       	pop	r28
    4438:	1f 91       	pop	r17
    443a:	0f 91       	pop	r16
    443c:	ff 90       	pop	r15
    443e:	ef 90       	pop	r14
    4440:	df 90       	pop	r13
    4442:	cf 90       	pop	r12
    4444:	bf 90       	pop	r11
    4446:	af 90       	pop	r10
    4448:	9f 90       	pop	r9
    444a:	8f 90       	pop	r8
    444c:	7f 90       	pop	r7
    444e:	6f 90       	pop	r6
    4450:	5f 90       	pop	r5
    4452:	4f 90       	pop	r4
    4454:	3f 90       	pop	r3
    4456:	2f 90       	pop	r2
    4458:	08 95       	ret

0000445a <_initTwiInterface>:
    445a:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <_twiIsInitiated>
    445e:	81 11       	cpse	r24, r1
    4460:	0c c0       	rjmp	.+24     	; 0x447a <_initTwiInterface+0x20>
    4462:	8c e0       	ldi	r24, 0x0C	; 12
    4464:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4468:	8f ef       	ldi	r24, 0xFF	; 255
    446a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    446e:	84 e0       	ldi	r24, 0x04	; 4
    4470:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4474:	81 e0       	ldi	r24, 0x01	; 1
    4476:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <_twiIsInitiated>
    447a:	08 95       	ret

0000447c <twiCreate>:
    447c:	af 92       	push	r10
    447e:	bf 92       	push	r11
    4480:	cf 92       	push	r12
    4482:	df 92       	push	r13
    4484:	ef 92       	push	r14
    4486:	ff 92       	push	r15
    4488:	0f 93       	push	r16
    448a:	1f 93       	push	r17
    448c:	cf 93       	push	r28
    448e:	df 93       	push	r29
    4490:	a8 2e       	mov	r10, r24
    4492:	b6 2e       	mov	r11, r22
    4494:	69 01       	movw	r12, r18
    4496:	7a 01       	movw	r14, r20
    4498:	84 e0       	ldi	r24, 0x04	; 4
    449a:	90 e0       	ldi	r25, 0x00	; 0
    449c:	85 d3       	rcall	.+1802   	; 0x4ba8 <malloc>
    449e:	ec 01       	movw	r28, r24
    44a0:	89 2b       	or	r24, r25
    44a2:	61 f1       	breq	.+88     	; 0x44fc <twiCreate+0x80>
    44a4:	a8 82       	st	Y, r10
    44a6:	81 e0       	ldi	r24, 0x01	; 1
    44a8:	b8 12       	cpse	r11, r24
    44aa:	12 c0       	rjmp	.+36     	; 0x44d0 <twiCreate+0x54>
    44ac:	c7 01       	movw	r24, r14
    44ae:	b6 01       	movw	r22, r12
    44b0:	20 ea       	ldi	r18, 0xA0	; 160
    44b2:	36 e8       	ldi	r19, 0x86	; 134
    44b4:	41 e0       	ldi	r20, 0x01	; 1
    44b6:	50 e0       	ldi	r21, 0x00	; 0
    44b8:	33 d3       	rcall	.+1638   	; 0x4b20 <__udivmodsi4>
    44ba:	da 01       	movw	r26, r20
    44bc:	c9 01       	movw	r24, r18
    44be:	40 97       	sbiw	r24, 0x10	; 16
    44c0:	a1 09       	sbc	r26, r1
    44c2:	b1 09       	sbc	r27, r1
    44c4:	b6 95       	lsr	r27
    44c6:	a7 95       	ror	r26
    44c8:	97 95       	ror	r25
    44ca:	87 95       	ror	r24
    44cc:	89 83       	std	Y+1, r24	; 0x01
    44ce:	11 c0       	rjmp	.+34     	; 0x44f2 <twiCreate+0x76>
    44d0:	c7 01       	movw	r24, r14
    44d2:	b6 01       	movw	r22, r12
    44d4:	20 e8       	ldi	r18, 0x80	; 128
    44d6:	3a e1       	ldi	r19, 0x1A	; 26
    44d8:	46 e0       	ldi	r20, 0x06	; 6
    44da:	50 e0       	ldi	r21, 0x00	; 0
    44dc:	21 d3       	rcall	.+1602   	; 0x4b20 <__udivmodsi4>
    44de:	da 01       	movw	r26, r20
    44e0:	c9 01       	movw	r24, r18
    44e2:	40 97       	sbiw	r24, 0x10	; 16
    44e4:	a1 09       	sbc	r26, r1
    44e6:	b1 09       	sbc	r27, r1
    44e8:	b6 95       	lsr	r27
    44ea:	a7 95       	ror	r26
    44ec:	97 95       	ror	r25
    44ee:	87 95       	ror	r24
    44f0:	89 83       	std	Y+1, r24	; 0x01
    44f2:	1b 83       	std	Y+3, r17	; 0x03
    44f4:	0a 83       	std	Y+2, r16	; 0x02
    44f6:	8c 2f       	mov	r24, r28
    44f8:	9d 2f       	mov	r25, r29
    44fa:	02 c0       	rjmp	.+4      	; 0x4500 <twiCreate+0x84>
    44fc:	80 e0       	ldi	r24, 0x00	; 0
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	df 91       	pop	r29
    4502:	cf 91       	pop	r28
    4504:	1f 91       	pop	r17
    4506:	0f 91       	pop	r16
    4508:	ff 90       	pop	r15
    450a:	ef 90       	pop	r14
    450c:	df 90       	pop	r13
    450e:	cf 90       	pop	r12
    4510:	bf 90       	pop	r11
    4512:	af 90       	pop	r10
    4514:	08 95       	ret

00004516 <twiIsBusy>:
    4516:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    451a:	81 70       	andi	r24, 0x01	; 1
    451c:	08 95       	ret

0000451e <twiTransmit>:
    451e:	ff 92       	push	r15
    4520:	0f 93       	push	r16
    4522:	1f 93       	push	r17
    4524:	cf 93       	push	r28
    4526:	df 93       	push	r29
    4528:	00 97       	sbiw	r24, 0x00	; 0
    452a:	d1 f1       	breq	.+116    	; 0x45a0 <twiTransmit+0x82>
    452c:	4a 30       	cpi	r20, 0x0A	; 10
    452e:	d0 f5       	brcc	.+116    	; 0x45a4 <twiTransmit+0x86>
    4530:	f4 2e       	mov	r15, r20
    4532:	8b 01       	movw	r16, r22
    4534:	ec 01       	movw	r28, r24
    4536:	ef df       	rcall	.-34     	; 0x4516 <twiIsBusy>
    4538:	81 11       	cpse	r24, r1
    453a:	36 c0       	rjmp	.+108    	; 0x45a8 <twiTransmit+0x8a>
    453c:	80 91 f4 09 	lds	r24, 0x09F4	; 0x8009f4 <_twiCurrentHandler>
    4540:	90 91 f5 09 	lds	r25, 0x09F5	; 0x8009f5 <_twiCurrentHandler+0x1>
    4544:	c8 17       	cp	r28, r24
    4546:	d9 07       	cpc	r29, r25
    4548:	41 f0       	breq	.+16     	; 0x455a <twiTransmit+0x3c>
    454a:	87 df       	rcall	.-242    	; 0x445a <_initTwiInterface>
    454c:	89 81       	ldd	r24, Y+1	; 0x01
    454e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4552:	d0 93 f5 09 	sts	0x09F5, r29	; 0x8009f5 <_twiCurrentHandler+0x1>
    4556:	c0 93 f4 09 	sts	0x09F4, r28	; 0x8009f4 <_twiCurrentHandler>
    455a:	81 e0       	ldi	r24, 0x01	; 1
    455c:	8f 0d       	add	r24, r15
    455e:	80 93 f6 09 	sts	0x09F6, r24	; 0x8009f6 <_twiMessageLen>
    4562:	88 81       	ld	r24, Y
    4564:	88 0f       	add	r24, r24
    4566:	80 93 f7 09 	sts	0x09F7, r24	; 0x8009f7 <_twiMessageBuffer>
    456a:	ff 20       	and	r15, r15
    456c:	89 f0       	breq	.+34     	; 0x4590 <twiTransmit+0x72>
    456e:	f8 01       	movw	r30, r16
    4570:	a8 ef       	ldi	r26, 0xF8	; 248
    4572:	b9 e0       	ldi	r27, 0x09	; 9
    4574:	4f ef       	ldi	r20, 0xFF	; 255
    4576:	4f 0d       	add	r20, r15
    4578:	64 2f       	mov	r22, r20
    457a:	70 e0       	ldi	r23, 0x00	; 0
    457c:	cb 01       	movw	r24, r22
    457e:	01 96       	adiw	r24, 0x01	; 1
    4580:	b8 01       	movw	r22, r16
    4582:	68 0f       	add	r22, r24
    4584:	79 1f       	adc	r23, r25
    4586:	81 91       	ld	r24, Z+
    4588:	8d 93       	st	X+, r24
    458a:	e6 17       	cp	r30, r22
    458c:	f7 07       	cpc	r31, r23
    458e:	d9 f7       	brne	.-10     	; 0x4586 <twiTransmit+0x68>
    4590:	88 ef       	ldi	r24, 0xF8	; 248
    4592:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    4596:	85 ea       	ldi	r24, 0xA5	; 165
    4598:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    459c:	84 e0       	ldi	r24, 0x04	; 4
    459e:	05 c0       	rjmp	.+10     	; 0x45aa <twiTransmit+0x8c>
    45a0:	86 e0       	ldi	r24, 0x06	; 6
    45a2:	03 c0       	rjmp	.+6      	; 0x45aa <twiTransmit+0x8c>
    45a4:	87 e0       	ldi	r24, 0x07	; 7
    45a6:	01 c0       	rjmp	.+2      	; 0x45aa <twiTransmit+0x8c>
    45a8:	82 e0       	ldi	r24, 0x02	; 2
    45aa:	df 91       	pop	r29
    45ac:	cf 91       	pop	r28
    45ae:	1f 91       	pop	r17
    45b0:	0f 91       	pop	r16
    45b2:	ff 90       	pop	r15
    45b4:	08 95       	ret

000045b6 <twiReceive>:
    45b6:	1f 93       	push	r17
    45b8:	cf 93       	push	r28
    45ba:	df 93       	push	r29
    45bc:	00 97       	sbiw	r24, 0x00	; 0
    45be:	29 f1       	breq	.+74     	; 0x460a <twiReceive+0x54>
    45c0:	6b 30       	cpi	r22, 0x0B	; 11
    45c2:	28 f5       	brcc	.+74     	; 0x460e <twiReceive+0x58>
    45c4:	16 2f       	mov	r17, r22
    45c6:	ec 01       	movw	r28, r24
    45c8:	a6 df       	rcall	.-180    	; 0x4516 <twiIsBusy>
    45ca:	81 11       	cpse	r24, r1
    45cc:	22 c0       	rjmp	.+68     	; 0x4612 <twiReceive+0x5c>
    45ce:	80 91 f4 09 	lds	r24, 0x09F4	; 0x8009f4 <_twiCurrentHandler>
    45d2:	90 91 f5 09 	lds	r25, 0x09F5	; 0x8009f5 <_twiCurrentHandler+0x1>
    45d6:	c8 17       	cp	r28, r24
    45d8:	d9 07       	cpc	r29, r25
    45da:	41 f0       	breq	.+16     	; 0x45ec <twiReceive+0x36>
    45dc:	3e df       	rcall	.-388    	; 0x445a <_initTwiInterface>
    45de:	89 81       	ldd	r24, Y+1	; 0x01
    45e0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    45e4:	d0 93 f5 09 	sts	0x09F5, r29	; 0x8009f5 <_twiCurrentHandler+0x1>
    45e8:	c0 93 f4 09 	sts	0x09F4, r28	; 0x8009f4 <_twiCurrentHandler>
    45ec:	10 93 f6 09 	sts	0x09F6, r17	; 0x8009f6 <_twiMessageLen>
    45f0:	88 81       	ld	r24, Y
    45f2:	88 0f       	add	r24, r24
    45f4:	81 60       	ori	r24, 0x01	; 1
    45f6:	80 93 f7 09 	sts	0x09F7, r24	; 0x8009f7 <_twiMessageBuffer>
    45fa:	88 ef       	ldi	r24, 0xF8	; 248
    45fc:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    4600:	85 ea       	ldi	r24, 0xA5	; 165
    4602:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4606:	85 e0       	ldi	r24, 0x05	; 5
    4608:	05 c0       	rjmp	.+10     	; 0x4614 <twiReceive+0x5e>
    460a:	86 e0       	ldi	r24, 0x06	; 6
    460c:	03 c0       	rjmp	.+6      	; 0x4614 <twiReceive+0x5e>
    460e:	87 e0       	ldi	r24, 0x07	; 7
    4610:	01 c0       	rjmp	.+2      	; 0x4614 <twiReceive+0x5e>
    4612:	82 e0       	ldi	r24, 0x02	; 2
    4614:	df 91       	pop	r29
    4616:	cf 91       	pop	r28
    4618:	1f 91       	pop	r17
    461a:	08 95       	ret

0000461c <__vector_39>:
    461c:	1f 92       	push	r1
    461e:	0f 92       	push	r0
    4620:	0f b6       	in	r0, 0x3f	; 63
    4622:	0f 92       	push	r0
    4624:	11 24       	eor	r1, r1
    4626:	0b b6       	in	r0, 0x3b	; 59
    4628:	0f 92       	push	r0
    462a:	2f 93       	push	r18
    462c:	3f 93       	push	r19
    462e:	4f 93       	push	r20
    4630:	5f 93       	push	r21
    4632:	6f 93       	push	r22
    4634:	7f 93       	push	r23
    4636:	8f 93       	push	r24
    4638:	9f 93       	push	r25
    463a:	af 93       	push	r26
    463c:	bf 93       	push	r27
    463e:	ef 93       	push	r30
    4640:	ff 93       	push	r31
    4642:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4646:	8e 2f       	mov	r24, r30
    4648:	90 e0       	ldi	r25, 0x00	; 0
    464a:	fc 01       	movw	r30, r24
    464c:	38 97       	sbiw	r30, 0x08	; 8
    464e:	e1 35       	cpi	r30, 0x51	; 81
    4650:	f1 05       	cpc	r31, r1
    4652:	08 f0       	brcs	.+2      	; 0x4656 <__vector_39+0x3a>
    4654:	75 c0       	rjmp	.+234    	; 0x4740 <__vector_39+0x124>
    4656:	88 27       	eor	r24, r24
    4658:	e4 58       	subi	r30, 0x84	; 132
    465a:	ff 4f       	sbci	r31, 0xFF	; 255
    465c:	8f 4f       	sbci	r24, 0xFF	; 255
    465e:	82 c2       	rjmp	.+1284   	; 0x4b64 <__tablejump2__>
    4660:	10 92 f3 09 	sts	0x09F3, r1	; 0x8009f3 <_index.1885>
    4664:	e0 91 f3 09 	lds	r30, 0x09F3	; 0x8009f3 <_index.1885>
    4668:	80 91 f6 09 	lds	r24, 0x09F6	; 0x8009f6 <_twiMessageLen>
    466c:	e8 17       	cp	r30, r24
    466e:	70 f4       	brcc	.+28     	; 0x468c <__vector_39+0x70>
    4670:	81 e0       	ldi	r24, 0x01	; 1
    4672:	8e 0f       	add	r24, r30
    4674:	80 93 f3 09 	sts	0x09F3, r24	; 0x8009f3 <_index.1885>
    4678:	f0 e0       	ldi	r31, 0x00	; 0
    467a:	e9 50       	subi	r30, 0x09	; 9
    467c:	f6 4f       	sbci	r31, 0xF6	; 246
    467e:	80 81       	ld	r24, Z
    4680:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4684:	85 e8       	ldi	r24, 0x85	; 133
    4686:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    468a:	72 c0       	rjmp	.+228    	; 0x4770 <__vector_39+0x154>
    468c:	84 e9       	ldi	r24, 0x94	; 148
    468e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4692:	80 91 f4 09 	lds	r24, 0x09F4	; 0x8009f4 <_twiCurrentHandler>
    4696:	90 91 f5 09 	lds	r25, 0x09F5	; 0x8009f5 <_twiCurrentHandler+0x1>
    469a:	dc 01       	movw	r26, r24
    469c:	12 96       	adiw	r26, 0x02	; 2
    469e:	ed 91       	ld	r30, X+
    46a0:	fc 91       	ld	r31, X
    46a2:	13 97       	sbiw	r26, 0x03	; 3
    46a4:	30 97       	sbiw	r30, 0x00	; 0
    46a6:	09 f4       	brne	.+2      	; 0x46aa <__vector_39+0x8e>
    46a8:	63 c0       	rjmp	.+198    	; 0x4770 <__vector_39+0x154>
    46aa:	20 e0       	ldi	r18, 0x00	; 0
    46ac:	40 e0       	ldi	r20, 0x00	; 0
    46ae:	50 e0       	ldi	r21, 0x00	; 0
    46b0:	64 e0       	ldi	r22, 0x04	; 4
    46b2:	19 95       	eicall
    46b4:	5d c0       	rjmp	.+186    	; 0x4770 <__vector_39+0x154>
    46b6:	e0 91 f3 09 	lds	r30, 0x09F3	; 0x8009f3 <_index.1885>
    46ba:	81 e0       	ldi	r24, 0x01	; 1
    46bc:	8e 0f       	add	r24, r30
    46be:	80 93 f3 09 	sts	0x09F3, r24	; 0x8009f3 <_index.1885>
    46c2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    46c6:	f0 e0       	ldi	r31, 0x00	; 0
    46c8:	e9 50       	subi	r30, 0x09	; 9
    46ca:	f6 4f       	sbci	r31, 0xF6	; 246
    46cc:	80 83       	st	Z, r24
    46ce:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    46d2:	80 34       	cpi	r24, 0x40	; 64
    46d4:	11 f4       	brne	.+4      	; 0x46da <__vector_39+0xbe>
    46d6:	10 92 f3 09 	sts	0x09F3, r1	; 0x8009f3 <_index.1885>
    46da:	20 91 f3 09 	lds	r18, 0x09F3	; 0x8009f3 <_index.1885>
    46de:	30 e0       	ldi	r19, 0x00	; 0
    46e0:	80 91 f6 09 	lds	r24, 0x09F6	; 0x8009f6 <_twiMessageLen>
    46e4:	90 e0       	ldi	r25, 0x00	; 0
    46e6:	01 97       	sbiw	r24, 0x01	; 1
    46e8:	28 17       	cp	r18, r24
    46ea:	39 07       	cpc	r19, r25
    46ec:	24 f4       	brge	.+8      	; 0x46f6 <__vector_39+0xda>
    46ee:	85 ec       	ldi	r24, 0xC5	; 197
    46f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    46f4:	3d c0       	rjmp	.+122    	; 0x4770 <__vector_39+0x154>
    46f6:	85 e8       	ldi	r24, 0x85	; 133
    46f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    46fc:	39 c0       	rjmp	.+114    	; 0x4770 <__vector_39+0x154>
    46fe:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4702:	e0 91 f3 09 	lds	r30, 0x09F3	; 0x8009f3 <_index.1885>
    4706:	f0 e0       	ldi	r31, 0x00	; 0
    4708:	e9 50       	subi	r30, 0x09	; 9
    470a:	f6 4f       	sbci	r31, 0xF6	; 246
    470c:	80 83       	st	Z, r24
    470e:	84 e9       	ldi	r24, 0x94	; 148
    4710:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4714:	80 91 f4 09 	lds	r24, 0x09F4	; 0x8009f4 <_twiCurrentHandler>
    4718:	90 91 f5 09 	lds	r25, 0x09F5	; 0x8009f5 <_twiCurrentHandler+0x1>
    471c:	dc 01       	movw	r26, r24
    471e:	12 96       	adiw	r26, 0x02	; 2
    4720:	ed 91       	ld	r30, X+
    4722:	fc 91       	ld	r31, X
    4724:	13 97       	sbiw	r26, 0x03	; 3
    4726:	30 97       	sbiw	r30, 0x00	; 0
    4728:	19 f1       	breq	.+70     	; 0x4770 <__vector_39+0x154>
    472a:	20 91 f6 09 	lds	r18, 0x09F6	; 0x8009f6 <_twiMessageLen>
    472e:	47 ef       	ldi	r20, 0xF7	; 247
    4730:	59 e0       	ldi	r21, 0x09	; 9
    4732:	65 e0       	ldi	r22, 0x05	; 5
    4734:	19 95       	eicall
    4736:	1c c0       	rjmp	.+56     	; 0x4770 <__vector_39+0x154>
    4738:	85 ea       	ldi	r24, 0xA5	; 165
    473a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    473e:	18 c0       	rjmp	.+48     	; 0x4770 <__vector_39+0x154>
    4740:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4744:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    4748:	84 e0       	ldi	r24, 0x04	; 4
    474a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    474e:	80 91 f4 09 	lds	r24, 0x09F4	; 0x8009f4 <_twiCurrentHandler>
    4752:	90 91 f5 09 	lds	r25, 0x09F5	; 0x8009f5 <_twiCurrentHandler+0x1>
    4756:	dc 01       	movw	r26, r24
    4758:	12 96       	adiw	r26, 0x02	; 2
    475a:	ed 91       	ld	r30, X+
    475c:	fc 91       	ld	r31, X
    475e:	13 97       	sbiw	r26, 0x03	; 3
    4760:	30 97       	sbiw	r30, 0x00	; 0
    4762:	31 f0       	breq	.+12     	; 0x4770 <__vector_39+0x154>
    4764:	20 e0       	ldi	r18, 0x00	; 0
    4766:	40 e0       	ldi	r20, 0x00	; 0
    4768:	50 e0       	ldi	r21, 0x00	; 0
    476a:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    476e:	19 95       	eicall
    4770:	ff 91       	pop	r31
    4772:	ef 91       	pop	r30
    4774:	bf 91       	pop	r27
    4776:	af 91       	pop	r26
    4778:	9f 91       	pop	r25
    477a:	8f 91       	pop	r24
    477c:	7f 91       	pop	r23
    477e:	6f 91       	pop	r22
    4780:	5f 91       	pop	r21
    4782:	4f 91       	pop	r20
    4784:	3f 91       	pop	r19
    4786:	2f 91       	pop	r18
    4788:	0f 90       	pop	r0
    478a:	0b be       	out	0x3b, r0	; 59
    478c:	0f 90       	pop	r0
    478e:	0f be       	out	0x3f, r0	; 63
    4790:	0f 90       	pop	r0
    4792:	1f 90       	pop	r1
    4794:	18 95       	reti

00004796 <__subsf3>:
    4796:	50 58       	subi	r21, 0x80	; 128

00004798 <__addsf3>:
    4798:	bb 27       	eor	r27, r27
    479a:	aa 27       	eor	r26, r26
    479c:	0e d0       	rcall	.+28     	; 0x47ba <__addsf3x>
    479e:	21 c1       	rjmp	.+578    	; 0x49e2 <__fp_round>
    47a0:	12 d1       	rcall	.+548    	; 0x49c6 <__fp_pscA>
    47a2:	30 f0       	brcs	.+12     	; 0x47b0 <__addsf3+0x18>
    47a4:	17 d1       	rcall	.+558    	; 0x49d4 <__fp_pscB>
    47a6:	20 f0       	brcs	.+8      	; 0x47b0 <__addsf3+0x18>
    47a8:	31 f4       	brne	.+12     	; 0x47b6 <__addsf3+0x1e>
    47aa:	9f 3f       	cpi	r25, 0xFF	; 255
    47ac:	11 f4       	brne	.+4      	; 0x47b2 <__addsf3+0x1a>
    47ae:	1e f4       	brtc	.+6      	; 0x47b6 <__addsf3+0x1e>
    47b0:	07 c1       	rjmp	.+526    	; 0x49c0 <__fp_nan>
    47b2:	0e f4       	brtc	.+2      	; 0x47b6 <__addsf3+0x1e>
    47b4:	e0 95       	com	r30
    47b6:	e7 fb       	bst	r30, 7
    47b8:	fd c0       	rjmp	.+506    	; 0x49b4 <__fp_inf>

000047ba <__addsf3x>:
    47ba:	e9 2f       	mov	r30, r25
    47bc:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fp_split3>
    47c0:	78 f3       	brcs	.-34     	; 0x47a0 <__addsf3+0x8>
    47c2:	ba 17       	cp	r27, r26
    47c4:	62 07       	cpc	r22, r18
    47c6:	73 07       	cpc	r23, r19
    47c8:	84 07       	cpc	r24, r20
    47ca:	95 07       	cpc	r25, r21
    47cc:	20 f0       	brcs	.+8      	; 0x47d6 <__addsf3x+0x1c>
    47ce:	79 f4       	brne	.+30     	; 0x47ee <__addsf3x+0x34>
    47d0:	a6 f5       	brtc	.+104    	; 0x483a <__addsf3x+0x80>
    47d2:	0c 94 b1 15 	jmp	0x2b62	; 0x2b62 <__fp_zero>
    47d6:	0e f4       	brtc	.+2      	; 0x47da <__addsf3x+0x20>
    47d8:	e0 95       	com	r30
    47da:	0b 2e       	mov	r0, r27
    47dc:	ba 2f       	mov	r27, r26
    47de:	a0 2d       	mov	r26, r0
    47e0:	0b 01       	movw	r0, r22
    47e2:	b9 01       	movw	r22, r18
    47e4:	90 01       	movw	r18, r0
    47e6:	0c 01       	movw	r0, r24
    47e8:	ca 01       	movw	r24, r20
    47ea:	a0 01       	movw	r20, r0
    47ec:	11 24       	eor	r1, r1
    47ee:	ff 27       	eor	r31, r31
    47f0:	59 1b       	sub	r21, r25
    47f2:	99 f0       	breq	.+38     	; 0x481a <__addsf3x+0x60>
    47f4:	59 3f       	cpi	r21, 0xF9	; 249
    47f6:	50 f4       	brcc	.+20     	; 0x480c <__addsf3x+0x52>
    47f8:	50 3e       	cpi	r21, 0xE0	; 224
    47fa:	68 f1       	brcs	.+90     	; 0x4856 <__addsf3x+0x9c>
    47fc:	1a 16       	cp	r1, r26
    47fe:	f0 40       	sbci	r31, 0x00	; 0
    4800:	a2 2f       	mov	r26, r18
    4802:	23 2f       	mov	r18, r19
    4804:	34 2f       	mov	r19, r20
    4806:	44 27       	eor	r20, r20
    4808:	58 5f       	subi	r21, 0xF8	; 248
    480a:	f3 cf       	rjmp	.-26     	; 0x47f2 <__addsf3x+0x38>
    480c:	46 95       	lsr	r20
    480e:	37 95       	ror	r19
    4810:	27 95       	ror	r18
    4812:	a7 95       	ror	r26
    4814:	f0 40       	sbci	r31, 0x00	; 0
    4816:	53 95       	inc	r21
    4818:	c9 f7       	brne	.-14     	; 0x480c <__addsf3x+0x52>
    481a:	7e f4       	brtc	.+30     	; 0x483a <__addsf3x+0x80>
    481c:	1f 16       	cp	r1, r31
    481e:	ba 0b       	sbc	r27, r26
    4820:	62 0b       	sbc	r22, r18
    4822:	73 0b       	sbc	r23, r19
    4824:	84 0b       	sbc	r24, r20
    4826:	ba f0       	brmi	.+46     	; 0x4856 <__addsf3x+0x9c>
    4828:	91 50       	subi	r25, 0x01	; 1
    482a:	a1 f0       	breq	.+40     	; 0x4854 <__addsf3x+0x9a>
    482c:	ff 0f       	add	r31, r31
    482e:	bb 1f       	adc	r27, r27
    4830:	66 1f       	adc	r22, r22
    4832:	77 1f       	adc	r23, r23
    4834:	88 1f       	adc	r24, r24
    4836:	c2 f7       	brpl	.-16     	; 0x4828 <__addsf3x+0x6e>
    4838:	0e c0       	rjmp	.+28     	; 0x4856 <__addsf3x+0x9c>
    483a:	ba 0f       	add	r27, r26
    483c:	62 1f       	adc	r22, r18
    483e:	73 1f       	adc	r23, r19
    4840:	84 1f       	adc	r24, r20
    4842:	48 f4       	brcc	.+18     	; 0x4856 <__addsf3x+0x9c>
    4844:	87 95       	ror	r24
    4846:	77 95       	ror	r23
    4848:	67 95       	ror	r22
    484a:	b7 95       	ror	r27
    484c:	f7 95       	ror	r31
    484e:	9e 3f       	cpi	r25, 0xFE	; 254
    4850:	08 f0       	brcs	.+2      	; 0x4854 <__addsf3x+0x9a>
    4852:	b1 cf       	rjmp	.-158    	; 0x47b6 <__addsf3+0x1e>
    4854:	93 95       	inc	r25
    4856:	88 0f       	add	r24, r24
    4858:	08 f0       	brcs	.+2      	; 0x485c <__addsf3x+0xa2>
    485a:	99 27       	eor	r25, r25
    485c:	ee 0f       	add	r30, r30
    485e:	97 95       	ror	r25
    4860:	87 95       	ror	r24
    4862:	08 95       	ret

00004864 <__divsf3>:
    4864:	0d d0       	rcall	.+26     	; 0x4880 <__divsf3x>
    4866:	bd c0       	rjmp	.+378    	; 0x49e2 <__fp_round>
    4868:	b5 d0       	rcall	.+362    	; 0x49d4 <__fp_pscB>
    486a:	48 f0       	brcs	.+18     	; 0x487e <__divsf3+0x1a>
    486c:	ac d0       	rcall	.+344    	; 0x49c6 <__fp_pscA>
    486e:	38 f0       	brcs	.+14     	; 0x487e <__divsf3+0x1a>
    4870:	21 f4       	brne	.+8      	; 0x487a <__divsf3+0x16>
    4872:	5f 3f       	cpi	r21, 0xFF	; 255
    4874:	21 f0       	breq	.+8      	; 0x487e <__divsf3+0x1a>
    4876:	9e c0       	rjmp	.+316    	; 0x49b4 <__fp_inf>
    4878:	51 11       	cpse	r21, r1
    487a:	0c 94 b2 15 	jmp	0x2b64	; 0x2b64 <__fp_szero>
    487e:	a0 c0       	rjmp	.+320    	; 0x49c0 <__fp_nan>

00004880 <__divsf3x>:
    4880:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fp_split3>
    4884:	88 f3       	brcs	.-30     	; 0x4868 <__divsf3+0x4>

00004886 <__divsf3_pse>:
    4886:	99 23       	and	r25, r25
    4888:	b9 f3       	breq	.-18     	; 0x4878 <__divsf3+0x14>
    488a:	55 23       	and	r21, r21
    488c:	a1 f3       	breq	.-24     	; 0x4876 <__divsf3+0x12>
    488e:	95 1b       	sub	r25, r21
    4890:	55 0b       	sbc	r21, r21
    4892:	bb 27       	eor	r27, r27
    4894:	aa 27       	eor	r26, r26
    4896:	62 17       	cp	r22, r18
    4898:	73 07       	cpc	r23, r19
    489a:	84 07       	cpc	r24, r20
    489c:	38 f0       	brcs	.+14     	; 0x48ac <__divsf3_pse+0x26>
    489e:	9f 5f       	subi	r25, 0xFF	; 255
    48a0:	5f 4f       	sbci	r21, 0xFF	; 255
    48a2:	22 0f       	add	r18, r18
    48a4:	33 1f       	adc	r19, r19
    48a6:	44 1f       	adc	r20, r20
    48a8:	aa 1f       	adc	r26, r26
    48aa:	a9 f3       	breq	.-22     	; 0x4896 <__divsf3_pse+0x10>
    48ac:	34 d0       	rcall	.+104    	; 0x4916 <__divsf3_pse+0x90>
    48ae:	0e 2e       	mov	r0, r30
    48b0:	3a f0       	brmi	.+14     	; 0x48c0 <__divsf3_pse+0x3a>
    48b2:	e0 e8       	ldi	r30, 0x80	; 128
    48b4:	31 d0       	rcall	.+98     	; 0x4918 <__divsf3_pse+0x92>
    48b6:	91 50       	subi	r25, 0x01	; 1
    48b8:	50 40       	sbci	r21, 0x00	; 0
    48ba:	e6 95       	lsr	r30
    48bc:	00 1c       	adc	r0, r0
    48be:	ca f7       	brpl	.-14     	; 0x48b2 <__divsf3_pse+0x2c>
    48c0:	2a d0       	rcall	.+84     	; 0x4916 <__divsf3_pse+0x90>
    48c2:	fe 2f       	mov	r31, r30
    48c4:	28 d0       	rcall	.+80     	; 0x4916 <__divsf3_pse+0x90>
    48c6:	66 0f       	add	r22, r22
    48c8:	77 1f       	adc	r23, r23
    48ca:	88 1f       	adc	r24, r24
    48cc:	bb 1f       	adc	r27, r27
    48ce:	26 17       	cp	r18, r22
    48d0:	37 07       	cpc	r19, r23
    48d2:	48 07       	cpc	r20, r24
    48d4:	ab 07       	cpc	r26, r27
    48d6:	b0 e8       	ldi	r27, 0x80	; 128
    48d8:	09 f0       	breq	.+2      	; 0x48dc <__divsf3_pse+0x56>
    48da:	bb 0b       	sbc	r27, r27
    48dc:	80 2d       	mov	r24, r0
    48de:	bf 01       	movw	r22, r30
    48e0:	ff 27       	eor	r31, r31
    48e2:	93 58       	subi	r25, 0x83	; 131
    48e4:	5f 4f       	sbci	r21, 0xFF	; 255
    48e6:	32 f0       	brmi	.+12     	; 0x48f4 <__divsf3_pse+0x6e>
    48e8:	9e 3f       	cpi	r25, 0xFE	; 254
    48ea:	51 05       	cpc	r21, r1
    48ec:	70 f0       	brcs	.+28     	; 0x490a <__divsf3_pse+0x84>
    48ee:	62 c0       	rjmp	.+196    	; 0x49b4 <__fp_inf>
    48f0:	0c 94 b2 15 	jmp	0x2b64	; 0x2b64 <__fp_szero>
    48f4:	5f 3f       	cpi	r21, 0xFF	; 255
    48f6:	e4 f3       	brlt	.-8      	; 0x48f0 <__divsf3_pse+0x6a>
    48f8:	98 3e       	cpi	r25, 0xE8	; 232
    48fa:	d4 f3       	brlt	.-12     	; 0x48f0 <__divsf3_pse+0x6a>
    48fc:	86 95       	lsr	r24
    48fe:	77 95       	ror	r23
    4900:	67 95       	ror	r22
    4902:	b7 95       	ror	r27
    4904:	f7 95       	ror	r31
    4906:	9f 5f       	subi	r25, 0xFF	; 255
    4908:	c9 f7       	brne	.-14     	; 0x48fc <__divsf3_pse+0x76>
    490a:	88 0f       	add	r24, r24
    490c:	91 1d       	adc	r25, r1
    490e:	96 95       	lsr	r25
    4910:	87 95       	ror	r24
    4912:	97 f9       	bld	r25, 7
    4914:	08 95       	ret
    4916:	e1 e0       	ldi	r30, 0x01	; 1
    4918:	66 0f       	add	r22, r22
    491a:	77 1f       	adc	r23, r23
    491c:	88 1f       	adc	r24, r24
    491e:	bb 1f       	adc	r27, r27
    4920:	62 17       	cp	r22, r18
    4922:	73 07       	cpc	r23, r19
    4924:	84 07       	cpc	r24, r20
    4926:	ba 07       	cpc	r27, r26
    4928:	20 f0       	brcs	.+8      	; 0x4932 <__divsf3_pse+0xac>
    492a:	62 1b       	sub	r22, r18
    492c:	73 0b       	sbc	r23, r19
    492e:	84 0b       	sbc	r24, r20
    4930:	ba 0b       	sbc	r27, r26
    4932:	ee 1f       	adc	r30, r30
    4934:	88 f7       	brcc	.-30     	; 0x4918 <__divsf3_pse+0x92>
    4936:	e0 95       	com	r30
    4938:	08 95       	ret

0000493a <__floatunsisf>:
    493a:	e8 94       	clt
    493c:	09 c0       	rjmp	.+18     	; 0x4950 <__floatsisf+0x12>

0000493e <__floatsisf>:
    493e:	97 fb       	bst	r25, 7
    4940:	3e f4       	brtc	.+14     	; 0x4950 <__floatsisf+0x12>
    4942:	90 95       	com	r25
    4944:	80 95       	com	r24
    4946:	70 95       	com	r23
    4948:	61 95       	neg	r22
    494a:	7f 4f       	sbci	r23, 0xFF	; 255
    494c:	8f 4f       	sbci	r24, 0xFF	; 255
    494e:	9f 4f       	sbci	r25, 0xFF	; 255
    4950:	99 23       	and	r25, r25
    4952:	a9 f0       	breq	.+42     	; 0x497e <__floatsisf+0x40>
    4954:	f9 2f       	mov	r31, r25
    4956:	96 e9       	ldi	r25, 0x96	; 150
    4958:	bb 27       	eor	r27, r27
    495a:	93 95       	inc	r25
    495c:	f6 95       	lsr	r31
    495e:	87 95       	ror	r24
    4960:	77 95       	ror	r23
    4962:	67 95       	ror	r22
    4964:	b7 95       	ror	r27
    4966:	f1 11       	cpse	r31, r1
    4968:	f8 cf       	rjmp	.-16     	; 0x495a <__floatsisf+0x1c>
    496a:	fa f4       	brpl	.+62     	; 0x49aa <__floatsisf+0x6c>
    496c:	bb 0f       	add	r27, r27
    496e:	11 f4       	brne	.+4      	; 0x4974 <__floatsisf+0x36>
    4970:	60 ff       	sbrs	r22, 0
    4972:	1b c0       	rjmp	.+54     	; 0x49aa <__floatsisf+0x6c>
    4974:	6f 5f       	subi	r22, 0xFF	; 255
    4976:	7f 4f       	sbci	r23, 0xFF	; 255
    4978:	8f 4f       	sbci	r24, 0xFF	; 255
    497a:	9f 4f       	sbci	r25, 0xFF	; 255
    497c:	16 c0       	rjmp	.+44     	; 0x49aa <__floatsisf+0x6c>
    497e:	88 23       	and	r24, r24
    4980:	11 f0       	breq	.+4      	; 0x4986 <__floatsisf+0x48>
    4982:	96 e9       	ldi	r25, 0x96	; 150
    4984:	11 c0       	rjmp	.+34     	; 0x49a8 <__floatsisf+0x6a>
    4986:	77 23       	and	r23, r23
    4988:	21 f0       	breq	.+8      	; 0x4992 <__floatsisf+0x54>
    498a:	9e e8       	ldi	r25, 0x8E	; 142
    498c:	87 2f       	mov	r24, r23
    498e:	76 2f       	mov	r23, r22
    4990:	05 c0       	rjmp	.+10     	; 0x499c <__floatsisf+0x5e>
    4992:	66 23       	and	r22, r22
    4994:	71 f0       	breq	.+28     	; 0x49b2 <__floatsisf+0x74>
    4996:	96 e8       	ldi	r25, 0x86	; 134
    4998:	86 2f       	mov	r24, r22
    499a:	70 e0       	ldi	r23, 0x00	; 0
    499c:	60 e0       	ldi	r22, 0x00	; 0
    499e:	2a f0       	brmi	.+10     	; 0x49aa <__floatsisf+0x6c>
    49a0:	9a 95       	dec	r25
    49a2:	66 0f       	add	r22, r22
    49a4:	77 1f       	adc	r23, r23
    49a6:	88 1f       	adc	r24, r24
    49a8:	da f7       	brpl	.-10     	; 0x49a0 <__floatsisf+0x62>
    49aa:	88 0f       	add	r24, r24
    49ac:	96 95       	lsr	r25
    49ae:	87 95       	ror	r24
    49b0:	97 f9       	bld	r25, 7
    49b2:	08 95       	ret

000049b4 <__fp_inf>:
    49b4:	97 f9       	bld	r25, 7
    49b6:	9f 67       	ori	r25, 0x7F	; 127
    49b8:	80 e8       	ldi	r24, 0x80	; 128
    49ba:	70 e0       	ldi	r23, 0x00	; 0
    49bc:	60 e0       	ldi	r22, 0x00	; 0
    49be:	08 95       	ret

000049c0 <__fp_nan>:
    49c0:	9f ef       	ldi	r25, 0xFF	; 255
    49c2:	80 ec       	ldi	r24, 0xC0	; 192
    49c4:	08 95       	ret

000049c6 <__fp_pscA>:
    49c6:	00 24       	eor	r0, r0
    49c8:	0a 94       	dec	r0
    49ca:	16 16       	cp	r1, r22
    49cc:	17 06       	cpc	r1, r23
    49ce:	18 06       	cpc	r1, r24
    49d0:	09 06       	cpc	r0, r25
    49d2:	08 95       	ret

000049d4 <__fp_pscB>:
    49d4:	00 24       	eor	r0, r0
    49d6:	0a 94       	dec	r0
    49d8:	12 16       	cp	r1, r18
    49da:	13 06       	cpc	r1, r19
    49dc:	14 06       	cpc	r1, r20
    49de:	05 06       	cpc	r0, r21
    49e0:	08 95       	ret

000049e2 <__fp_round>:
    49e2:	09 2e       	mov	r0, r25
    49e4:	03 94       	inc	r0
    49e6:	00 0c       	add	r0, r0
    49e8:	11 f4       	brne	.+4      	; 0x49ee <__fp_round+0xc>
    49ea:	88 23       	and	r24, r24
    49ec:	52 f0       	brmi	.+20     	; 0x4a02 <__fp_round+0x20>
    49ee:	bb 0f       	add	r27, r27
    49f0:	40 f4       	brcc	.+16     	; 0x4a02 <__fp_round+0x20>
    49f2:	bf 2b       	or	r27, r31
    49f4:	11 f4       	brne	.+4      	; 0x49fa <__fp_round+0x18>
    49f6:	60 ff       	sbrs	r22, 0
    49f8:	04 c0       	rjmp	.+8      	; 0x4a02 <__fp_round+0x20>
    49fa:	6f 5f       	subi	r22, 0xFF	; 255
    49fc:	7f 4f       	sbci	r23, 0xFF	; 255
    49fe:	8f 4f       	sbci	r24, 0xFF	; 255
    4a00:	9f 4f       	sbci	r25, 0xFF	; 255
    4a02:	08 95       	ret

00004a04 <__gesf2>:
    4a04:	69 d0       	rcall	.+210    	; 0x4ad8 <__fp_cmp>
    4a06:	08 f4       	brcc	.+2      	; 0x4a0a <__gesf2+0x6>
    4a08:	8f ef       	ldi	r24, 0xFF	; 255
    4a0a:	08 95       	ret

00004a0c <__mulsf3>:
    4a0c:	0c d0       	rcall	.+24     	; 0x4a26 <__mulsf3x>
    4a0e:	e9 cf       	rjmp	.-46     	; 0x49e2 <__fp_round>
    4a10:	da df       	rcall	.-76     	; 0x49c6 <__fp_pscA>
    4a12:	28 f0       	brcs	.+10     	; 0x4a1e <__mulsf3+0x12>
    4a14:	df df       	rcall	.-66     	; 0x49d4 <__fp_pscB>
    4a16:	18 f0       	brcs	.+6      	; 0x4a1e <__mulsf3+0x12>
    4a18:	95 23       	and	r25, r21
    4a1a:	09 f0       	breq	.+2      	; 0x4a1e <__mulsf3+0x12>
    4a1c:	cb cf       	rjmp	.-106    	; 0x49b4 <__fp_inf>
    4a1e:	d0 cf       	rjmp	.-96     	; 0x49c0 <__fp_nan>
    4a20:	11 24       	eor	r1, r1
    4a22:	0c 94 b2 15 	jmp	0x2b64	; 0x2b64 <__fp_szero>

00004a26 <__mulsf3x>:
    4a26:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fp_split3>
    4a2a:	90 f3       	brcs	.-28     	; 0x4a10 <__mulsf3+0x4>

00004a2c <__mulsf3_pse>:
    4a2c:	95 9f       	mul	r25, r21
    4a2e:	c1 f3       	breq	.-16     	; 0x4a20 <__mulsf3+0x14>
    4a30:	95 0f       	add	r25, r21
    4a32:	50 e0       	ldi	r21, 0x00	; 0
    4a34:	55 1f       	adc	r21, r21
    4a36:	62 9f       	mul	r22, r18
    4a38:	f0 01       	movw	r30, r0
    4a3a:	72 9f       	mul	r23, r18
    4a3c:	bb 27       	eor	r27, r27
    4a3e:	f0 0d       	add	r31, r0
    4a40:	b1 1d       	adc	r27, r1
    4a42:	63 9f       	mul	r22, r19
    4a44:	aa 27       	eor	r26, r26
    4a46:	f0 0d       	add	r31, r0
    4a48:	b1 1d       	adc	r27, r1
    4a4a:	aa 1f       	adc	r26, r26
    4a4c:	64 9f       	mul	r22, r20
    4a4e:	66 27       	eor	r22, r22
    4a50:	b0 0d       	add	r27, r0
    4a52:	a1 1d       	adc	r26, r1
    4a54:	66 1f       	adc	r22, r22
    4a56:	82 9f       	mul	r24, r18
    4a58:	22 27       	eor	r18, r18
    4a5a:	b0 0d       	add	r27, r0
    4a5c:	a1 1d       	adc	r26, r1
    4a5e:	62 1f       	adc	r22, r18
    4a60:	73 9f       	mul	r23, r19
    4a62:	b0 0d       	add	r27, r0
    4a64:	a1 1d       	adc	r26, r1
    4a66:	62 1f       	adc	r22, r18
    4a68:	83 9f       	mul	r24, r19
    4a6a:	a0 0d       	add	r26, r0
    4a6c:	61 1d       	adc	r22, r1
    4a6e:	22 1f       	adc	r18, r18
    4a70:	74 9f       	mul	r23, r20
    4a72:	33 27       	eor	r19, r19
    4a74:	a0 0d       	add	r26, r0
    4a76:	61 1d       	adc	r22, r1
    4a78:	23 1f       	adc	r18, r19
    4a7a:	84 9f       	mul	r24, r20
    4a7c:	60 0d       	add	r22, r0
    4a7e:	21 1d       	adc	r18, r1
    4a80:	82 2f       	mov	r24, r18
    4a82:	76 2f       	mov	r23, r22
    4a84:	6a 2f       	mov	r22, r26
    4a86:	11 24       	eor	r1, r1
    4a88:	9f 57       	subi	r25, 0x7F	; 127
    4a8a:	50 40       	sbci	r21, 0x00	; 0
    4a8c:	92 f0       	brmi	.+36     	; 0x4ab2 <__mulsf3_pse+0x86>
    4a8e:	e9 f0       	breq	.+58     	; 0x4aca <__mulsf3_pse+0x9e>
    4a90:	88 23       	and	r24, r24
    4a92:	4a f0       	brmi	.+18     	; 0x4aa6 <__mulsf3_pse+0x7a>
    4a94:	ee 0f       	add	r30, r30
    4a96:	ff 1f       	adc	r31, r31
    4a98:	bb 1f       	adc	r27, r27
    4a9a:	66 1f       	adc	r22, r22
    4a9c:	77 1f       	adc	r23, r23
    4a9e:	88 1f       	adc	r24, r24
    4aa0:	91 50       	subi	r25, 0x01	; 1
    4aa2:	50 40       	sbci	r21, 0x00	; 0
    4aa4:	a9 f7       	brne	.-22     	; 0x4a90 <__mulsf3_pse+0x64>
    4aa6:	9e 3f       	cpi	r25, 0xFE	; 254
    4aa8:	51 05       	cpc	r21, r1
    4aaa:	78 f0       	brcs	.+30     	; 0x4aca <__mulsf3_pse+0x9e>
    4aac:	83 cf       	rjmp	.-250    	; 0x49b4 <__fp_inf>
    4aae:	0c 94 b2 15 	jmp	0x2b64	; 0x2b64 <__fp_szero>
    4ab2:	5f 3f       	cpi	r21, 0xFF	; 255
    4ab4:	e4 f3       	brlt	.-8      	; 0x4aae <__mulsf3_pse+0x82>
    4ab6:	98 3e       	cpi	r25, 0xE8	; 232
    4ab8:	d4 f3       	brlt	.-12     	; 0x4aae <__mulsf3_pse+0x82>
    4aba:	86 95       	lsr	r24
    4abc:	77 95       	ror	r23
    4abe:	67 95       	ror	r22
    4ac0:	b7 95       	ror	r27
    4ac2:	f7 95       	ror	r31
    4ac4:	e7 95       	ror	r30
    4ac6:	9f 5f       	subi	r25, 0xFF	; 255
    4ac8:	c1 f7       	brne	.-16     	; 0x4aba <__mulsf3_pse+0x8e>
    4aca:	fe 2b       	or	r31, r30
    4acc:	88 0f       	add	r24, r24
    4ace:	91 1d       	adc	r25, r1
    4ad0:	96 95       	lsr	r25
    4ad2:	87 95       	ror	r24
    4ad4:	97 f9       	bld	r25, 7
    4ad6:	08 95       	ret

00004ad8 <__fp_cmp>:
    4ad8:	99 0f       	add	r25, r25
    4ada:	00 08       	sbc	r0, r0
    4adc:	55 0f       	add	r21, r21
    4ade:	aa 0b       	sbc	r26, r26
    4ae0:	e0 e8       	ldi	r30, 0x80	; 128
    4ae2:	fe ef       	ldi	r31, 0xFE	; 254
    4ae4:	16 16       	cp	r1, r22
    4ae6:	17 06       	cpc	r1, r23
    4ae8:	e8 07       	cpc	r30, r24
    4aea:	f9 07       	cpc	r31, r25
    4aec:	c0 f0       	brcs	.+48     	; 0x4b1e <__fp_cmp+0x46>
    4aee:	12 16       	cp	r1, r18
    4af0:	13 06       	cpc	r1, r19
    4af2:	e4 07       	cpc	r30, r20
    4af4:	f5 07       	cpc	r31, r21
    4af6:	98 f0       	brcs	.+38     	; 0x4b1e <__fp_cmp+0x46>
    4af8:	62 1b       	sub	r22, r18
    4afa:	73 0b       	sbc	r23, r19
    4afc:	84 0b       	sbc	r24, r20
    4afe:	95 0b       	sbc	r25, r21
    4b00:	39 f4       	brne	.+14     	; 0x4b10 <__fp_cmp+0x38>
    4b02:	0a 26       	eor	r0, r26
    4b04:	61 f0       	breq	.+24     	; 0x4b1e <__fp_cmp+0x46>
    4b06:	23 2b       	or	r18, r19
    4b08:	24 2b       	or	r18, r20
    4b0a:	25 2b       	or	r18, r21
    4b0c:	21 f4       	brne	.+8      	; 0x4b16 <__fp_cmp+0x3e>
    4b0e:	08 95       	ret
    4b10:	0a 26       	eor	r0, r26
    4b12:	09 f4       	brne	.+2      	; 0x4b16 <__fp_cmp+0x3e>
    4b14:	a1 40       	sbci	r26, 0x01	; 1
    4b16:	a6 95       	lsr	r26
    4b18:	8f ef       	ldi	r24, 0xFF	; 255
    4b1a:	81 1d       	adc	r24, r1
    4b1c:	81 1d       	adc	r24, r1
    4b1e:	08 95       	ret

00004b20 <__udivmodsi4>:
    4b20:	a1 e2       	ldi	r26, 0x21	; 33
    4b22:	1a 2e       	mov	r1, r26
    4b24:	aa 1b       	sub	r26, r26
    4b26:	bb 1b       	sub	r27, r27
    4b28:	fd 01       	movw	r30, r26
    4b2a:	0d c0       	rjmp	.+26     	; 0x4b46 <__udivmodsi4_ep>

00004b2c <__udivmodsi4_loop>:
    4b2c:	aa 1f       	adc	r26, r26
    4b2e:	bb 1f       	adc	r27, r27
    4b30:	ee 1f       	adc	r30, r30
    4b32:	ff 1f       	adc	r31, r31
    4b34:	a2 17       	cp	r26, r18
    4b36:	b3 07       	cpc	r27, r19
    4b38:	e4 07       	cpc	r30, r20
    4b3a:	f5 07       	cpc	r31, r21
    4b3c:	20 f0       	brcs	.+8      	; 0x4b46 <__udivmodsi4_ep>
    4b3e:	a2 1b       	sub	r26, r18
    4b40:	b3 0b       	sbc	r27, r19
    4b42:	e4 0b       	sbc	r30, r20
    4b44:	f5 0b       	sbc	r31, r21

00004b46 <__udivmodsi4_ep>:
    4b46:	66 1f       	adc	r22, r22
    4b48:	77 1f       	adc	r23, r23
    4b4a:	88 1f       	adc	r24, r24
    4b4c:	99 1f       	adc	r25, r25
    4b4e:	1a 94       	dec	r1
    4b50:	69 f7       	brne	.-38     	; 0x4b2c <__udivmodsi4_loop>
    4b52:	60 95       	com	r22
    4b54:	70 95       	com	r23
    4b56:	80 95       	com	r24
    4b58:	90 95       	com	r25
    4b5a:	9b 01       	movw	r18, r22
    4b5c:	ac 01       	movw	r20, r24
    4b5e:	bd 01       	movw	r22, r26
    4b60:	cf 01       	movw	r24, r30
    4b62:	08 95       	ret

00004b64 <__tablejump2__>:
    4b64:	ee 0f       	add	r30, r30
    4b66:	ff 1f       	adc	r31, r31
    4b68:	88 1f       	adc	r24, r24
    4b6a:	8b bf       	out	0x3b, r24	; 59
    4b6c:	07 90       	elpm	r0, Z+
    4b6e:	f6 91       	elpm	r31, Z
    4b70:	e0 2d       	mov	r30, r0
    4b72:	19 94       	eijmp

00004b74 <calloc>:
    4b74:	0f 93       	push	r16
    4b76:	1f 93       	push	r17
    4b78:	cf 93       	push	r28
    4b7a:	df 93       	push	r29
    4b7c:	86 9f       	mul	r24, r22
    4b7e:	80 01       	movw	r16, r0
    4b80:	87 9f       	mul	r24, r23
    4b82:	10 0d       	add	r17, r0
    4b84:	96 9f       	mul	r25, r22
    4b86:	10 0d       	add	r17, r0
    4b88:	11 24       	eor	r1, r1
    4b8a:	c8 01       	movw	r24, r16
    4b8c:	0d d0       	rcall	.+26     	; 0x4ba8 <malloc>
    4b8e:	ec 01       	movw	r28, r24
    4b90:	00 97       	sbiw	r24, 0x00	; 0
    4b92:	21 f0       	breq	.+8      	; 0x4b9c <calloc+0x28>
    4b94:	a8 01       	movw	r20, r16
    4b96:	60 e0       	ldi	r22, 0x00	; 0
    4b98:	70 e0       	ldi	r23, 0x00	; 0
    4b9a:	34 d1       	rcall	.+616    	; 0x4e04 <memset>
    4b9c:	ce 01       	movw	r24, r28
    4b9e:	df 91       	pop	r29
    4ba0:	cf 91       	pop	r28
    4ba2:	1f 91       	pop	r17
    4ba4:	0f 91       	pop	r16
    4ba6:	08 95       	ret

00004ba8 <malloc>:
    4ba8:	0f 93       	push	r16
    4baa:	1f 93       	push	r17
    4bac:	cf 93       	push	r28
    4bae:	df 93       	push	r29
    4bb0:	82 30       	cpi	r24, 0x02	; 2
    4bb2:	91 05       	cpc	r25, r1
    4bb4:	10 f4       	brcc	.+4      	; 0x4bba <malloc+0x12>
    4bb6:	82 e0       	ldi	r24, 0x02	; 2
    4bb8:	90 e0       	ldi	r25, 0x00	; 0
    4bba:	e0 91 8c 0a 	lds	r30, 0x0A8C	; 0x800a8c <__flp>
    4bbe:	f0 91 8d 0a 	lds	r31, 0x0A8D	; 0x800a8d <__flp+0x1>
    4bc2:	20 e0       	ldi	r18, 0x00	; 0
    4bc4:	30 e0       	ldi	r19, 0x00	; 0
    4bc6:	a0 e0       	ldi	r26, 0x00	; 0
    4bc8:	b0 e0       	ldi	r27, 0x00	; 0
    4bca:	30 97       	sbiw	r30, 0x00	; 0
    4bcc:	19 f1       	breq	.+70     	; 0x4c14 <malloc+0x6c>
    4bce:	40 81       	ld	r20, Z
    4bd0:	51 81       	ldd	r21, Z+1	; 0x01
    4bd2:	02 81       	ldd	r16, Z+2	; 0x02
    4bd4:	13 81       	ldd	r17, Z+3	; 0x03
    4bd6:	48 17       	cp	r20, r24
    4bd8:	59 07       	cpc	r21, r25
    4bda:	c8 f0       	brcs	.+50     	; 0x4c0e <malloc+0x66>
    4bdc:	84 17       	cp	r24, r20
    4bde:	95 07       	cpc	r25, r21
    4be0:	69 f4       	brne	.+26     	; 0x4bfc <malloc+0x54>
    4be2:	10 97       	sbiw	r26, 0x00	; 0
    4be4:	31 f0       	breq	.+12     	; 0x4bf2 <malloc+0x4a>
    4be6:	12 96       	adiw	r26, 0x02	; 2
    4be8:	0c 93       	st	X, r16
    4bea:	12 97       	sbiw	r26, 0x02	; 2
    4bec:	13 96       	adiw	r26, 0x03	; 3
    4bee:	1c 93       	st	X, r17
    4bf0:	27 c0       	rjmp	.+78     	; 0x4c40 <malloc+0x98>
    4bf2:	00 93 8c 0a 	sts	0x0A8C, r16	; 0x800a8c <__flp>
    4bf6:	10 93 8d 0a 	sts	0x0A8D, r17	; 0x800a8d <__flp+0x1>
    4bfa:	22 c0       	rjmp	.+68     	; 0x4c40 <malloc+0x98>
    4bfc:	21 15       	cp	r18, r1
    4bfe:	31 05       	cpc	r19, r1
    4c00:	19 f0       	breq	.+6      	; 0x4c08 <malloc+0x60>
    4c02:	42 17       	cp	r20, r18
    4c04:	53 07       	cpc	r21, r19
    4c06:	18 f4       	brcc	.+6      	; 0x4c0e <malloc+0x66>
    4c08:	9a 01       	movw	r18, r20
    4c0a:	bd 01       	movw	r22, r26
    4c0c:	ef 01       	movw	r28, r30
    4c0e:	df 01       	movw	r26, r30
    4c10:	f8 01       	movw	r30, r16
    4c12:	db cf       	rjmp	.-74     	; 0x4bca <malloc+0x22>
    4c14:	21 15       	cp	r18, r1
    4c16:	31 05       	cpc	r19, r1
    4c18:	f9 f0       	breq	.+62     	; 0x4c58 <malloc+0xb0>
    4c1a:	28 1b       	sub	r18, r24
    4c1c:	39 0b       	sbc	r19, r25
    4c1e:	24 30       	cpi	r18, 0x04	; 4
    4c20:	31 05       	cpc	r19, r1
    4c22:	80 f4       	brcc	.+32     	; 0x4c44 <malloc+0x9c>
    4c24:	8a 81       	ldd	r24, Y+2	; 0x02
    4c26:	9b 81       	ldd	r25, Y+3	; 0x03
    4c28:	61 15       	cp	r22, r1
    4c2a:	71 05       	cpc	r23, r1
    4c2c:	21 f0       	breq	.+8      	; 0x4c36 <malloc+0x8e>
    4c2e:	fb 01       	movw	r30, r22
    4c30:	93 83       	std	Z+3, r25	; 0x03
    4c32:	82 83       	std	Z+2, r24	; 0x02
    4c34:	04 c0       	rjmp	.+8      	; 0x4c3e <malloc+0x96>
    4c36:	90 93 8d 0a 	sts	0x0A8D, r25	; 0x800a8d <__flp+0x1>
    4c3a:	80 93 8c 0a 	sts	0x0A8C, r24	; 0x800a8c <__flp>
    4c3e:	fe 01       	movw	r30, r28
    4c40:	32 96       	adiw	r30, 0x02	; 2
    4c42:	44 c0       	rjmp	.+136    	; 0x4ccc <malloc+0x124>
    4c44:	fe 01       	movw	r30, r28
    4c46:	e2 0f       	add	r30, r18
    4c48:	f3 1f       	adc	r31, r19
    4c4a:	81 93       	st	Z+, r24
    4c4c:	91 93       	st	Z+, r25
    4c4e:	22 50       	subi	r18, 0x02	; 2
    4c50:	31 09       	sbc	r19, r1
    4c52:	39 83       	std	Y+1, r19	; 0x01
    4c54:	28 83       	st	Y, r18
    4c56:	3a c0       	rjmp	.+116    	; 0x4ccc <malloc+0x124>
    4c58:	20 91 8a 0a 	lds	r18, 0x0A8A	; 0x800a8a <__brkval>
    4c5c:	30 91 8b 0a 	lds	r19, 0x0A8B	; 0x800a8b <__brkval+0x1>
    4c60:	23 2b       	or	r18, r19
    4c62:	41 f4       	brne	.+16     	; 0x4c74 <malloc+0xcc>
    4c64:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    4c68:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    4c6c:	30 93 8b 0a 	sts	0x0A8B, r19	; 0x800a8b <__brkval+0x1>
    4c70:	20 93 8a 0a 	sts	0x0A8A, r18	; 0x800a8a <__brkval>
    4c74:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    4c78:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    4c7c:	21 15       	cp	r18, r1
    4c7e:	31 05       	cpc	r19, r1
    4c80:	41 f4       	brne	.+16     	; 0x4c92 <malloc+0xea>
    4c82:	2d b7       	in	r18, 0x3d	; 61
    4c84:	3e b7       	in	r19, 0x3e	; 62
    4c86:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4c8a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4c8e:	24 1b       	sub	r18, r20
    4c90:	35 0b       	sbc	r19, r21
    4c92:	e0 91 8a 0a 	lds	r30, 0x0A8A	; 0x800a8a <__brkval>
    4c96:	f0 91 8b 0a 	lds	r31, 0x0A8B	; 0x800a8b <__brkval+0x1>
    4c9a:	e2 17       	cp	r30, r18
    4c9c:	f3 07       	cpc	r31, r19
    4c9e:	a0 f4       	brcc	.+40     	; 0x4cc8 <malloc+0x120>
    4ca0:	2e 1b       	sub	r18, r30
    4ca2:	3f 0b       	sbc	r19, r31
    4ca4:	28 17       	cp	r18, r24
    4ca6:	39 07       	cpc	r19, r25
    4ca8:	78 f0       	brcs	.+30     	; 0x4cc8 <malloc+0x120>
    4caa:	ac 01       	movw	r20, r24
    4cac:	4e 5f       	subi	r20, 0xFE	; 254
    4cae:	5f 4f       	sbci	r21, 0xFF	; 255
    4cb0:	24 17       	cp	r18, r20
    4cb2:	35 07       	cpc	r19, r21
    4cb4:	48 f0       	brcs	.+18     	; 0x4cc8 <malloc+0x120>
    4cb6:	4e 0f       	add	r20, r30
    4cb8:	5f 1f       	adc	r21, r31
    4cba:	50 93 8b 0a 	sts	0x0A8B, r21	; 0x800a8b <__brkval+0x1>
    4cbe:	40 93 8a 0a 	sts	0x0A8A, r20	; 0x800a8a <__brkval>
    4cc2:	81 93       	st	Z+, r24
    4cc4:	91 93       	st	Z+, r25
    4cc6:	02 c0       	rjmp	.+4      	; 0x4ccc <malloc+0x124>
    4cc8:	e0 e0       	ldi	r30, 0x00	; 0
    4cca:	f0 e0       	ldi	r31, 0x00	; 0
    4ccc:	cf 01       	movw	r24, r30
    4cce:	df 91       	pop	r29
    4cd0:	cf 91       	pop	r28
    4cd2:	1f 91       	pop	r17
    4cd4:	0f 91       	pop	r16
    4cd6:	08 95       	ret

00004cd8 <free>:
    4cd8:	cf 93       	push	r28
    4cda:	df 93       	push	r29
    4cdc:	00 97       	sbiw	r24, 0x00	; 0
    4cde:	09 f4       	brne	.+2      	; 0x4ce2 <free+0xa>
    4ce0:	81 c0       	rjmp	.+258    	; 0x4de4 <free+0x10c>
    4ce2:	fc 01       	movw	r30, r24
    4ce4:	32 97       	sbiw	r30, 0x02	; 2
    4ce6:	13 82       	std	Z+3, r1	; 0x03
    4ce8:	12 82       	std	Z+2, r1	; 0x02
    4cea:	a0 91 8c 0a 	lds	r26, 0x0A8C	; 0x800a8c <__flp>
    4cee:	b0 91 8d 0a 	lds	r27, 0x0A8D	; 0x800a8d <__flp+0x1>
    4cf2:	10 97       	sbiw	r26, 0x00	; 0
    4cf4:	81 f4       	brne	.+32     	; 0x4d16 <free+0x3e>
    4cf6:	20 81       	ld	r18, Z
    4cf8:	31 81       	ldd	r19, Z+1	; 0x01
    4cfa:	82 0f       	add	r24, r18
    4cfc:	93 1f       	adc	r25, r19
    4cfe:	20 91 8a 0a 	lds	r18, 0x0A8A	; 0x800a8a <__brkval>
    4d02:	30 91 8b 0a 	lds	r19, 0x0A8B	; 0x800a8b <__brkval+0x1>
    4d06:	28 17       	cp	r18, r24
    4d08:	39 07       	cpc	r19, r25
    4d0a:	51 f5       	brne	.+84     	; 0x4d60 <free+0x88>
    4d0c:	f0 93 8b 0a 	sts	0x0A8B, r31	; 0x800a8b <__brkval+0x1>
    4d10:	e0 93 8a 0a 	sts	0x0A8A, r30	; 0x800a8a <__brkval>
    4d14:	67 c0       	rjmp	.+206    	; 0x4de4 <free+0x10c>
    4d16:	ed 01       	movw	r28, r26
    4d18:	20 e0       	ldi	r18, 0x00	; 0
    4d1a:	30 e0       	ldi	r19, 0x00	; 0
    4d1c:	ce 17       	cp	r28, r30
    4d1e:	df 07       	cpc	r29, r31
    4d20:	40 f4       	brcc	.+16     	; 0x4d32 <free+0x5a>
    4d22:	4a 81       	ldd	r20, Y+2	; 0x02
    4d24:	5b 81       	ldd	r21, Y+3	; 0x03
    4d26:	9e 01       	movw	r18, r28
    4d28:	41 15       	cp	r20, r1
    4d2a:	51 05       	cpc	r21, r1
    4d2c:	f1 f0       	breq	.+60     	; 0x4d6a <free+0x92>
    4d2e:	ea 01       	movw	r28, r20
    4d30:	f5 cf       	rjmp	.-22     	; 0x4d1c <free+0x44>
    4d32:	d3 83       	std	Z+3, r29	; 0x03
    4d34:	c2 83       	std	Z+2, r28	; 0x02
    4d36:	40 81       	ld	r20, Z
    4d38:	51 81       	ldd	r21, Z+1	; 0x01
    4d3a:	84 0f       	add	r24, r20
    4d3c:	95 1f       	adc	r25, r21
    4d3e:	c8 17       	cp	r28, r24
    4d40:	d9 07       	cpc	r29, r25
    4d42:	59 f4       	brne	.+22     	; 0x4d5a <free+0x82>
    4d44:	88 81       	ld	r24, Y
    4d46:	99 81       	ldd	r25, Y+1	; 0x01
    4d48:	84 0f       	add	r24, r20
    4d4a:	95 1f       	adc	r25, r21
    4d4c:	02 96       	adiw	r24, 0x02	; 2
    4d4e:	91 83       	std	Z+1, r25	; 0x01
    4d50:	80 83       	st	Z, r24
    4d52:	8a 81       	ldd	r24, Y+2	; 0x02
    4d54:	9b 81       	ldd	r25, Y+3	; 0x03
    4d56:	93 83       	std	Z+3, r25	; 0x03
    4d58:	82 83       	std	Z+2, r24	; 0x02
    4d5a:	21 15       	cp	r18, r1
    4d5c:	31 05       	cpc	r19, r1
    4d5e:	29 f4       	brne	.+10     	; 0x4d6a <free+0x92>
    4d60:	f0 93 8d 0a 	sts	0x0A8D, r31	; 0x800a8d <__flp+0x1>
    4d64:	e0 93 8c 0a 	sts	0x0A8C, r30	; 0x800a8c <__flp>
    4d68:	3d c0       	rjmp	.+122    	; 0x4de4 <free+0x10c>
    4d6a:	e9 01       	movw	r28, r18
    4d6c:	fb 83       	std	Y+3, r31	; 0x03
    4d6e:	ea 83       	std	Y+2, r30	; 0x02
    4d70:	49 91       	ld	r20, Y+
    4d72:	59 91       	ld	r21, Y+
    4d74:	c4 0f       	add	r28, r20
    4d76:	d5 1f       	adc	r29, r21
    4d78:	ec 17       	cp	r30, r28
    4d7a:	fd 07       	cpc	r31, r29
    4d7c:	61 f4       	brne	.+24     	; 0x4d96 <free+0xbe>
    4d7e:	80 81       	ld	r24, Z
    4d80:	91 81       	ldd	r25, Z+1	; 0x01
    4d82:	84 0f       	add	r24, r20
    4d84:	95 1f       	adc	r25, r21
    4d86:	02 96       	adiw	r24, 0x02	; 2
    4d88:	e9 01       	movw	r28, r18
    4d8a:	99 83       	std	Y+1, r25	; 0x01
    4d8c:	88 83       	st	Y, r24
    4d8e:	82 81       	ldd	r24, Z+2	; 0x02
    4d90:	93 81       	ldd	r25, Z+3	; 0x03
    4d92:	9b 83       	std	Y+3, r25	; 0x03
    4d94:	8a 83       	std	Y+2, r24	; 0x02
    4d96:	e0 e0       	ldi	r30, 0x00	; 0
    4d98:	f0 e0       	ldi	r31, 0x00	; 0
    4d9a:	12 96       	adiw	r26, 0x02	; 2
    4d9c:	8d 91       	ld	r24, X+
    4d9e:	9c 91       	ld	r25, X
    4da0:	13 97       	sbiw	r26, 0x03	; 3
    4da2:	00 97       	sbiw	r24, 0x00	; 0
    4da4:	19 f0       	breq	.+6      	; 0x4dac <free+0xd4>
    4da6:	fd 01       	movw	r30, r26
    4da8:	dc 01       	movw	r26, r24
    4daa:	f7 cf       	rjmp	.-18     	; 0x4d9a <free+0xc2>
    4dac:	8d 91       	ld	r24, X+
    4dae:	9c 91       	ld	r25, X
    4db0:	11 97       	sbiw	r26, 0x01	; 1
    4db2:	9d 01       	movw	r18, r26
    4db4:	2e 5f       	subi	r18, 0xFE	; 254
    4db6:	3f 4f       	sbci	r19, 0xFF	; 255
    4db8:	82 0f       	add	r24, r18
    4dba:	93 1f       	adc	r25, r19
    4dbc:	20 91 8a 0a 	lds	r18, 0x0A8A	; 0x800a8a <__brkval>
    4dc0:	30 91 8b 0a 	lds	r19, 0x0A8B	; 0x800a8b <__brkval+0x1>
    4dc4:	28 17       	cp	r18, r24
    4dc6:	39 07       	cpc	r19, r25
    4dc8:	69 f4       	brne	.+26     	; 0x4de4 <free+0x10c>
    4dca:	30 97       	sbiw	r30, 0x00	; 0
    4dcc:	29 f4       	brne	.+10     	; 0x4dd8 <free+0x100>
    4dce:	10 92 8d 0a 	sts	0x0A8D, r1	; 0x800a8d <__flp+0x1>
    4dd2:	10 92 8c 0a 	sts	0x0A8C, r1	; 0x800a8c <__flp>
    4dd6:	02 c0       	rjmp	.+4      	; 0x4ddc <free+0x104>
    4dd8:	13 82       	std	Z+3, r1	; 0x03
    4dda:	12 82       	std	Z+2, r1	; 0x02
    4ddc:	b0 93 8b 0a 	sts	0x0A8B, r27	; 0x800a8b <__brkval+0x1>
    4de0:	a0 93 8a 0a 	sts	0x0A8A, r26	; 0x800a8a <__brkval>
    4de4:	df 91       	pop	r29
    4de6:	cf 91       	pop	r28
    4de8:	08 95       	ret

00004dea <abort>:
    4dea:	81 e0       	ldi	r24, 0x01	; 1
    4dec:	90 e0       	ldi	r25, 0x00	; 0
    4dee:	f8 94       	cli
    4df0:	58 c3       	rjmp	.+1712   	; 0x54a2 <_exit>

00004df2 <memcpy>:
    4df2:	fb 01       	movw	r30, r22
    4df4:	dc 01       	movw	r26, r24
    4df6:	02 c0       	rjmp	.+4      	; 0x4dfc <memcpy+0xa>
    4df8:	01 90       	ld	r0, Z+
    4dfa:	0d 92       	st	X+, r0
    4dfc:	41 50       	subi	r20, 0x01	; 1
    4dfe:	50 40       	sbci	r21, 0x00	; 0
    4e00:	d8 f7       	brcc	.-10     	; 0x4df8 <memcpy+0x6>
    4e02:	08 95       	ret

00004e04 <memset>:
    4e04:	dc 01       	movw	r26, r24
    4e06:	01 c0       	rjmp	.+2      	; 0x4e0a <memset+0x6>
    4e08:	6d 93       	st	X+, r22
    4e0a:	41 50       	subi	r20, 0x01	; 1
    4e0c:	50 40       	sbci	r21, 0x00	; 0
    4e0e:	e0 f7       	brcc	.-8      	; 0x4e08 <memset+0x4>
    4e10:	08 95       	ret

00004e12 <strcat>:
    4e12:	fb 01       	movw	r30, r22
    4e14:	dc 01       	movw	r26, r24
    4e16:	0d 90       	ld	r0, X+
    4e18:	00 20       	and	r0, r0
    4e1a:	e9 f7       	brne	.-6      	; 0x4e16 <strcat+0x4>
    4e1c:	11 97       	sbiw	r26, 0x01	; 1
    4e1e:	01 90       	ld	r0, Z+
    4e20:	0d 92       	st	X+, r0
    4e22:	00 20       	and	r0, r0
    4e24:	e1 f7       	brne	.-8      	; 0x4e1e <strcat+0xc>
    4e26:	08 95       	ret

00004e28 <strcpy>:
    4e28:	fb 01       	movw	r30, r22
    4e2a:	dc 01       	movw	r26, r24
    4e2c:	01 90       	ld	r0, Z+
    4e2e:	0d 92       	st	X+, r0
    4e30:	00 20       	and	r0, r0
    4e32:	e1 f7       	brne	.-8      	; 0x4e2c <strcpy+0x4>
    4e34:	08 95       	ret

00004e36 <strncasecmp>:
    4e36:	fb 01       	movw	r30, r22
    4e38:	dc 01       	movw	r26, r24
    4e3a:	41 50       	subi	r20, 0x01	; 1
    4e3c:	50 40       	sbci	r21, 0x00	; 0
    4e3e:	88 f0       	brcs	.+34     	; 0x4e62 <strncasecmp+0x2c>
    4e40:	8d 91       	ld	r24, X+
    4e42:	81 34       	cpi	r24, 0x41	; 65
    4e44:	1c f0       	brlt	.+6      	; 0x4e4c <strncasecmp+0x16>
    4e46:	8b 35       	cpi	r24, 0x5B	; 91
    4e48:	0c f4       	brge	.+2      	; 0x4e4c <strncasecmp+0x16>
    4e4a:	80 5e       	subi	r24, 0xE0	; 224
    4e4c:	61 91       	ld	r22, Z+
    4e4e:	61 34       	cpi	r22, 0x41	; 65
    4e50:	1c f0       	brlt	.+6      	; 0x4e58 <strncasecmp+0x22>
    4e52:	6b 35       	cpi	r22, 0x5B	; 91
    4e54:	0c f4       	brge	.+2      	; 0x4e58 <strncasecmp+0x22>
    4e56:	60 5e       	subi	r22, 0xE0	; 224
    4e58:	86 1b       	sub	r24, r22
    4e5a:	61 11       	cpse	r22, r1
    4e5c:	71 f3       	breq	.-36     	; 0x4e3a <strncasecmp+0x4>
    4e5e:	99 0b       	sbc	r25, r25
    4e60:	08 95       	ret
    4e62:	88 1b       	sub	r24, r24
    4e64:	fc cf       	rjmp	.-8      	; 0x4e5e <strncasecmp+0x28>

00004e66 <printf>:
    4e66:	cf 93       	push	r28
    4e68:	df 93       	push	r29
    4e6a:	cd b7       	in	r28, 0x3d	; 61
    4e6c:	de b7       	in	r29, 0x3e	; 62
    4e6e:	ae 01       	movw	r20, r28
    4e70:	4a 5f       	subi	r20, 0xFA	; 250
    4e72:	5f 4f       	sbci	r21, 0xFF	; 255
    4e74:	fa 01       	movw	r30, r20
    4e76:	61 91       	ld	r22, Z+
    4e78:	71 91       	ld	r23, Z+
    4e7a:	af 01       	movw	r20, r30
    4e7c:	80 91 90 0a 	lds	r24, 0x0A90	; 0x800a90 <__iob+0x2>
    4e80:	90 91 91 0a 	lds	r25, 0x0A91	; 0x800a91 <__iob+0x3>
    4e84:	61 d0       	rcall	.+194    	; 0x4f48 <vfprintf>
    4e86:	df 91       	pop	r29
    4e88:	cf 91       	pop	r28
    4e8a:	08 95       	ret

00004e8c <puts>:
    4e8c:	0f 93       	push	r16
    4e8e:	1f 93       	push	r17
    4e90:	cf 93       	push	r28
    4e92:	df 93       	push	r29
    4e94:	e0 91 90 0a 	lds	r30, 0x0A90	; 0x800a90 <__iob+0x2>
    4e98:	f0 91 91 0a 	lds	r31, 0x0A91	; 0x800a91 <__iob+0x3>
    4e9c:	23 81       	ldd	r18, Z+3	; 0x03
    4e9e:	21 ff       	sbrs	r18, 1
    4ea0:	1b c0       	rjmp	.+54     	; 0x4ed8 <puts+0x4c>
    4ea2:	8c 01       	movw	r16, r24
    4ea4:	d0 e0       	ldi	r29, 0x00	; 0
    4ea6:	c0 e0       	ldi	r28, 0x00	; 0
    4ea8:	f8 01       	movw	r30, r16
    4eaa:	81 91       	ld	r24, Z+
    4eac:	8f 01       	movw	r16, r30
    4eae:	60 91 90 0a 	lds	r22, 0x0A90	; 0x800a90 <__iob+0x2>
    4eb2:	70 91 91 0a 	lds	r23, 0x0A91	; 0x800a91 <__iob+0x3>
    4eb6:	db 01       	movw	r26, r22
    4eb8:	18 96       	adiw	r26, 0x08	; 8
    4eba:	ed 91       	ld	r30, X+
    4ebc:	fc 91       	ld	r31, X
    4ebe:	19 97       	sbiw	r26, 0x09	; 9
    4ec0:	88 23       	and	r24, r24
    4ec2:	31 f0       	breq	.+12     	; 0x4ed0 <puts+0x44>
    4ec4:	19 95       	eicall
    4ec6:	89 2b       	or	r24, r25
    4ec8:	79 f3       	breq	.-34     	; 0x4ea8 <puts+0x1c>
    4eca:	df ef       	ldi	r29, 0xFF	; 255
    4ecc:	cf ef       	ldi	r28, 0xFF	; 255
    4ece:	ec cf       	rjmp	.-40     	; 0x4ea8 <puts+0x1c>
    4ed0:	8a e0       	ldi	r24, 0x0A	; 10
    4ed2:	19 95       	eicall
    4ed4:	89 2b       	or	r24, r25
    4ed6:	19 f0       	breq	.+6      	; 0x4ede <puts+0x52>
    4ed8:	8f ef       	ldi	r24, 0xFF	; 255
    4eda:	9f ef       	ldi	r25, 0xFF	; 255
    4edc:	02 c0       	rjmp	.+4      	; 0x4ee2 <puts+0x56>
    4ede:	8d 2f       	mov	r24, r29
    4ee0:	9c 2f       	mov	r25, r28
    4ee2:	df 91       	pop	r29
    4ee4:	cf 91       	pop	r28
    4ee6:	1f 91       	pop	r17
    4ee8:	0f 91       	pop	r16
    4eea:	08 95       	ret

00004eec <sprintf>:
    4eec:	0f 93       	push	r16
    4eee:	1f 93       	push	r17
    4ef0:	cf 93       	push	r28
    4ef2:	df 93       	push	r29
    4ef4:	cd b7       	in	r28, 0x3d	; 61
    4ef6:	de b7       	in	r29, 0x3e	; 62
    4ef8:	2e 97       	sbiw	r28, 0x0e	; 14
    4efa:	0f b6       	in	r0, 0x3f	; 63
    4efc:	f8 94       	cli
    4efe:	de bf       	out	0x3e, r29	; 62
    4f00:	0f be       	out	0x3f, r0	; 63
    4f02:	cd bf       	out	0x3d, r28	; 61
    4f04:	0e 89       	ldd	r16, Y+22	; 0x16
    4f06:	1f 89       	ldd	r17, Y+23	; 0x17
    4f08:	86 e0       	ldi	r24, 0x06	; 6
    4f0a:	8c 83       	std	Y+4, r24	; 0x04
    4f0c:	1a 83       	std	Y+2, r17	; 0x02
    4f0e:	09 83       	std	Y+1, r16	; 0x01
    4f10:	8f ef       	ldi	r24, 0xFF	; 255
    4f12:	9f e7       	ldi	r25, 0x7F	; 127
    4f14:	9e 83       	std	Y+6, r25	; 0x06
    4f16:	8d 83       	std	Y+5, r24	; 0x05
    4f18:	ae 01       	movw	r20, r28
    4f1a:	46 5e       	subi	r20, 0xE6	; 230
    4f1c:	5f 4f       	sbci	r21, 0xFF	; 255
    4f1e:	68 8d       	ldd	r22, Y+24	; 0x18
    4f20:	79 8d       	ldd	r23, Y+25	; 0x19
    4f22:	ce 01       	movw	r24, r28
    4f24:	01 96       	adiw	r24, 0x01	; 1
    4f26:	10 d0       	rcall	.+32     	; 0x4f48 <vfprintf>
    4f28:	ef 81       	ldd	r30, Y+7	; 0x07
    4f2a:	f8 85       	ldd	r31, Y+8	; 0x08
    4f2c:	e0 0f       	add	r30, r16
    4f2e:	f1 1f       	adc	r31, r17
    4f30:	10 82       	st	Z, r1
    4f32:	2e 96       	adiw	r28, 0x0e	; 14
    4f34:	0f b6       	in	r0, 0x3f	; 63
    4f36:	f8 94       	cli
    4f38:	de bf       	out	0x3e, r29	; 62
    4f3a:	0f be       	out	0x3f, r0	; 63
    4f3c:	cd bf       	out	0x3d, r28	; 61
    4f3e:	df 91       	pop	r29
    4f40:	cf 91       	pop	r28
    4f42:	1f 91       	pop	r17
    4f44:	0f 91       	pop	r16
    4f46:	08 95       	ret

00004f48 <vfprintf>:
    4f48:	2f 92       	push	r2
    4f4a:	3f 92       	push	r3
    4f4c:	4f 92       	push	r4
    4f4e:	5f 92       	push	r5
    4f50:	6f 92       	push	r6
    4f52:	7f 92       	push	r7
    4f54:	8f 92       	push	r8
    4f56:	9f 92       	push	r9
    4f58:	af 92       	push	r10
    4f5a:	bf 92       	push	r11
    4f5c:	cf 92       	push	r12
    4f5e:	df 92       	push	r13
    4f60:	ef 92       	push	r14
    4f62:	ff 92       	push	r15
    4f64:	0f 93       	push	r16
    4f66:	1f 93       	push	r17
    4f68:	cf 93       	push	r28
    4f6a:	df 93       	push	r29
    4f6c:	cd b7       	in	r28, 0x3d	; 61
    4f6e:	de b7       	in	r29, 0x3e	; 62
    4f70:	2b 97       	sbiw	r28, 0x0b	; 11
    4f72:	0f b6       	in	r0, 0x3f	; 63
    4f74:	f8 94       	cli
    4f76:	de bf       	out	0x3e, r29	; 62
    4f78:	0f be       	out	0x3f, r0	; 63
    4f7a:	cd bf       	out	0x3d, r28	; 61
    4f7c:	6c 01       	movw	r12, r24
    4f7e:	7b 01       	movw	r14, r22
    4f80:	8a 01       	movw	r16, r20
    4f82:	fc 01       	movw	r30, r24
    4f84:	17 82       	std	Z+7, r1	; 0x07
    4f86:	16 82       	std	Z+6, r1	; 0x06
    4f88:	83 81       	ldd	r24, Z+3	; 0x03
    4f8a:	81 ff       	sbrs	r24, 1
    4f8c:	bf c1       	rjmp	.+894    	; 0x530c <vfprintf+0x3c4>
    4f8e:	ce 01       	movw	r24, r28
    4f90:	01 96       	adiw	r24, 0x01	; 1
    4f92:	3c 01       	movw	r6, r24
    4f94:	f6 01       	movw	r30, r12
    4f96:	93 81       	ldd	r25, Z+3	; 0x03
    4f98:	f7 01       	movw	r30, r14
    4f9a:	93 fd       	sbrc	r25, 3
    4f9c:	85 91       	lpm	r24, Z+
    4f9e:	93 ff       	sbrs	r25, 3
    4fa0:	81 91       	ld	r24, Z+
    4fa2:	7f 01       	movw	r14, r30
    4fa4:	88 23       	and	r24, r24
    4fa6:	09 f4       	brne	.+2      	; 0x4faa <vfprintf+0x62>
    4fa8:	ad c1       	rjmp	.+858    	; 0x5304 <vfprintf+0x3bc>
    4faa:	85 32       	cpi	r24, 0x25	; 37
    4fac:	39 f4       	brne	.+14     	; 0x4fbc <vfprintf+0x74>
    4fae:	93 fd       	sbrc	r25, 3
    4fb0:	85 91       	lpm	r24, Z+
    4fb2:	93 ff       	sbrs	r25, 3
    4fb4:	81 91       	ld	r24, Z+
    4fb6:	7f 01       	movw	r14, r30
    4fb8:	85 32       	cpi	r24, 0x25	; 37
    4fba:	21 f4       	brne	.+8      	; 0x4fc4 <vfprintf+0x7c>
    4fbc:	b6 01       	movw	r22, r12
    4fbe:	90 e0       	ldi	r25, 0x00	; 0
    4fc0:	d6 d1       	rcall	.+940    	; 0x536e <fputc>
    4fc2:	e8 cf       	rjmp	.-48     	; 0x4f94 <vfprintf+0x4c>
    4fc4:	91 2c       	mov	r9, r1
    4fc6:	21 2c       	mov	r2, r1
    4fc8:	31 2c       	mov	r3, r1
    4fca:	ff e1       	ldi	r31, 0x1F	; 31
    4fcc:	f3 15       	cp	r31, r3
    4fce:	d8 f0       	brcs	.+54     	; 0x5006 <vfprintf+0xbe>
    4fd0:	8b 32       	cpi	r24, 0x2B	; 43
    4fd2:	79 f0       	breq	.+30     	; 0x4ff2 <vfprintf+0xaa>
    4fd4:	38 f4       	brcc	.+14     	; 0x4fe4 <vfprintf+0x9c>
    4fd6:	80 32       	cpi	r24, 0x20	; 32
    4fd8:	79 f0       	breq	.+30     	; 0x4ff8 <vfprintf+0xb0>
    4fda:	83 32       	cpi	r24, 0x23	; 35
    4fdc:	a1 f4       	brne	.+40     	; 0x5006 <vfprintf+0xbe>
    4fde:	23 2d       	mov	r18, r3
    4fe0:	20 61       	ori	r18, 0x10	; 16
    4fe2:	1d c0       	rjmp	.+58     	; 0x501e <vfprintf+0xd6>
    4fe4:	8d 32       	cpi	r24, 0x2D	; 45
    4fe6:	61 f0       	breq	.+24     	; 0x5000 <vfprintf+0xb8>
    4fe8:	80 33       	cpi	r24, 0x30	; 48
    4fea:	69 f4       	brne	.+26     	; 0x5006 <vfprintf+0xbe>
    4fec:	23 2d       	mov	r18, r3
    4fee:	21 60       	ori	r18, 0x01	; 1
    4ff0:	16 c0       	rjmp	.+44     	; 0x501e <vfprintf+0xd6>
    4ff2:	83 2d       	mov	r24, r3
    4ff4:	82 60       	ori	r24, 0x02	; 2
    4ff6:	38 2e       	mov	r3, r24
    4ff8:	e3 2d       	mov	r30, r3
    4ffa:	e4 60       	ori	r30, 0x04	; 4
    4ffc:	3e 2e       	mov	r3, r30
    4ffe:	2a c0       	rjmp	.+84     	; 0x5054 <vfprintf+0x10c>
    5000:	f3 2d       	mov	r31, r3
    5002:	f8 60       	ori	r31, 0x08	; 8
    5004:	1d c0       	rjmp	.+58     	; 0x5040 <vfprintf+0xf8>
    5006:	37 fc       	sbrc	r3, 7
    5008:	2d c0       	rjmp	.+90     	; 0x5064 <vfprintf+0x11c>
    500a:	20 ed       	ldi	r18, 0xD0	; 208
    500c:	28 0f       	add	r18, r24
    500e:	2a 30       	cpi	r18, 0x0A	; 10
    5010:	40 f0       	brcs	.+16     	; 0x5022 <vfprintf+0xda>
    5012:	8e 32       	cpi	r24, 0x2E	; 46
    5014:	b9 f4       	brne	.+46     	; 0x5044 <vfprintf+0xfc>
    5016:	36 fc       	sbrc	r3, 6
    5018:	75 c1       	rjmp	.+746    	; 0x5304 <vfprintf+0x3bc>
    501a:	23 2d       	mov	r18, r3
    501c:	20 64       	ori	r18, 0x40	; 64
    501e:	32 2e       	mov	r3, r18
    5020:	19 c0       	rjmp	.+50     	; 0x5054 <vfprintf+0x10c>
    5022:	36 fe       	sbrs	r3, 6
    5024:	06 c0       	rjmp	.+12     	; 0x5032 <vfprintf+0xea>
    5026:	8a e0       	ldi	r24, 0x0A	; 10
    5028:	98 9e       	mul	r9, r24
    502a:	20 0d       	add	r18, r0
    502c:	11 24       	eor	r1, r1
    502e:	92 2e       	mov	r9, r18
    5030:	11 c0       	rjmp	.+34     	; 0x5054 <vfprintf+0x10c>
    5032:	ea e0       	ldi	r30, 0x0A	; 10
    5034:	2e 9e       	mul	r2, r30
    5036:	20 0d       	add	r18, r0
    5038:	11 24       	eor	r1, r1
    503a:	22 2e       	mov	r2, r18
    503c:	f3 2d       	mov	r31, r3
    503e:	f0 62       	ori	r31, 0x20	; 32
    5040:	3f 2e       	mov	r3, r31
    5042:	08 c0       	rjmp	.+16     	; 0x5054 <vfprintf+0x10c>
    5044:	8c 36       	cpi	r24, 0x6C	; 108
    5046:	21 f4       	brne	.+8      	; 0x5050 <vfprintf+0x108>
    5048:	83 2d       	mov	r24, r3
    504a:	80 68       	ori	r24, 0x80	; 128
    504c:	38 2e       	mov	r3, r24
    504e:	02 c0       	rjmp	.+4      	; 0x5054 <vfprintf+0x10c>
    5050:	88 36       	cpi	r24, 0x68	; 104
    5052:	41 f4       	brne	.+16     	; 0x5064 <vfprintf+0x11c>
    5054:	f7 01       	movw	r30, r14
    5056:	93 fd       	sbrc	r25, 3
    5058:	85 91       	lpm	r24, Z+
    505a:	93 ff       	sbrs	r25, 3
    505c:	81 91       	ld	r24, Z+
    505e:	7f 01       	movw	r14, r30
    5060:	81 11       	cpse	r24, r1
    5062:	b3 cf       	rjmp	.-154    	; 0x4fca <vfprintf+0x82>
    5064:	98 2f       	mov	r25, r24
    5066:	9f 7d       	andi	r25, 0xDF	; 223
    5068:	95 54       	subi	r25, 0x45	; 69
    506a:	93 30       	cpi	r25, 0x03	; 3
    506c:	28 f4       	brcc	.+10     	; 0x5078 <vfprintf+0x130>
    506e:	0c 5f       	subi	r16, 0xFC	; 252
    5070:	1f 4f       	sbci	r17, 0xFF	; 255
    5072:	9f e3       	ldi	r25, 0x3F	; 63
    5074:	99 83       	std	Y+1, r25	; 0x01
    5076:	0d c0       	rjmp	.+26     	; 0x5092 <vfprintf+0x14a>
    5078:	83 36       	cpi	r24, 0x63	; 99
    507a:	31 f0       	breq	.+12     	; 0x5088 <vfprintf+0x140>
    507c:	83 37       	cpi	r24, 0x73	; 115
    507e:	71 f0       	breq	.+28     	; 0x509c <vfprintf+0x154>
    5080:	83 35       	cpi	r24, 0x53	; 83
    5082:	09 f0       	breq	.+2      	; 0x5086 <vfprintf+0x13e>
    5084:	55 c0       	rjmp	.+170    	; 0x5130 <vfprintf+0x1e8>
    5086:	20 c0       	rjmp	.+64     	; 0x50c8 <vfprintf+0x180>
    5088:	f8 01       	movw	r30, r16
    508a:	80 81       	ld	r24, Z
    508c:	89 83       	std	Y+1, r24	; 0x01
    508e:	0e 5f       	subi	r16, 0xFE	; 254
    5090:	1f 4f       	sbci	r17, 0xFF	; 255
    5092:	88 24       	eor	r8, r8
    5094:	83 94       	inc	r8
    5096:	91 2c       	mov	r9, r1
    5098:	53 01       	movw	r10, r6
    509a:	12 c0       	rjmp	.+36     	; 0x50c0 <vfprintf+0x178>
    509c:	28 01       	movw	r4, r16
    509e:	f2 e0       	ldi	r31, 0x02	; 2
    50a0:	4f 0e       	add	r4, r31
    50a2:	51 1c       	adc	r5, r1
    50a4:	f8 01       	movw	r30, r16
    50a6:	a0 80       	ld	r10, Z
    50a8:	b1 80       	ldd	r11, Z+1	; 0x01
    50aa:	36 fe       	sbrs	r3, 6
    50ac:	03 c0       	rjmp	.+6      	; 0x50b4 <vfprintf+0x16c>
    50ae:	69 2d       	mov	r22, r9
    50b0:	70 e0       	ldi	r23, 0x00	; 0
    50b2:	02 c0       	rjmp	.+4      	; 0x50b8 <vfprintf+0x170>
    50b4:	6f ef       	ldi	r22, 0xFF	; 255
    50b6:	7f ef       	ldi	r23, 0xFF	; 255
    50b8:	c5 01       	movw	r24, r10
    50ba:	4e d1       	rcall	.+668    	; 0x5358 <strnlen>
    50bc:	4c 01       	movw	r8, r24
    50be:	82 01       	movw	r16, r4
    50c0:	f3 2d       	mov	r31, r3
    50c2:	ff 77       	andi	r31, 0x7F	; 127
    50c4:	3f 2e       	mov	r3, r31
    50c6:	15 c0       	rjmp	.+42     	; 0x50f2 <vfprintf+0x1aa>
    50c8:	28 01       	movw	r4, r16
    50ca:	22 e0       	ldi	r18, 0x02	; 2
    50cc:	42 0e       	add	r4, r18
    50ce:	51 1c       	adc	r5, r1
    50d0:	f8 01       	movw	r30, r16
    50d2:	a0 80       	ld	r10, Z
    50d4:	b1 80       	ldd	r11, Z+1	; 0x01
    50d6:	36 fe       	sbrs	r3, 6
    50d8:	03 c0       	rjmp	.+6      	; 0x50e0 <vfprintf+0x198>
    50da:	69 2d       	mov	r22, r9
    50dc:	70 e0       	ldi	r23, 0x00	; 0
    50de:	02 c0       	rjmp	.+4      	; 0x50e4 <vfprintf+0x19c>
    50e0:	6f ef       	ldi	r22, 0xFF	; 255
    50e2:	7f ef       	ldi	r23, 0xFF	; 255
    50e4:	c5 01       	movw	r24, r10
    50e6:	2d d1       	rcall	.+602    	; 0x5342 <strnlen_P>
    50e8:	4c 01       	movw	r8, r24
    50ea:	f3 2d       	mov	r31, r3
    50ec:	f0 68       	ori	r31, 0x80	; 128
    50ee:	3f 2e       	mov	r3, r31
    50f0:	82 01       	movw	r16, r4
    50f2:	33 fc       	sbrc	r3, 3
    50f4:	19 c0       	rjmp	.+50     	; 0x5128 <vfprintf+0x1e0>
    50f6:	82 2d       	mov	r24, r2
    50f8:	90 e0       	ldi	r25, 0x00	; 0
    50fa:	88 16       	cp	r8, r24
    50fc:	99 06       	cpc	r9, r25
    50fe:	a0 f4       	brcc	.+40     	; 0x5128 <vfprintf+0x1e0>
    5100:	b6 01       	movw	r22, r12
    5102:	80 e2       	ldi	r24, 0x20	; 32
    5104:	90 e0       	ldi	r25, 0x00	; 0
    5106:	33 d1       	rcall	.+614    	; 0x536e <fputc>
    5108:	2a 94       	dec	r2
    510a:	f5 cf       	rjmp	.-22     	; 0x50f6 <vfprintf+0x1ae>
    510c:	f5 01       	movw	r30, r10
    510e:	37 fc       	sbrc	r3, 7
    5110:	85 91       	lpm	r24, Z+
    5112:	37 fe       	sbrs	r3, 7
    5114:	81 91       	ld	r24, Z+
    5116:	5f 01       	movw	r10, r30
    5118:	b6 01       	movw	r22, r12
    511a:	90 e0       	ldi	r25, 0x00	; 0
    511c:	28 d1       	rcall	.+592    	; 0x536e <fputc>
    511e:	21 10       	cpse	r2, r1
    5120:	2a 94       	dec	r2
    5122:	21 e0       	ldi	r18, 0x01	; 1
    5124:	82 1a       	sub	r8, r18
    5126:	91 08       	sbc	r9, r1
    5128:	81 14       	cp	r8, r1
    512a:	91 04       	cpc	r9, r1
    512c:	79 f7       	brne	.-34     	; 0x510c <vfprintf+0x1c4>
    512e:	e1 c0       	rjmp	.+450    	; 0x52f2 <vfprintf+0x3aa>
    5130:	84 36       	cpi	r24, 0x64	; 100
    5132:	11 f0       	breq	.+4      	; 0x5138 <vfprintf+0x1f0>
    5134:	89 36       	cpi	r24, 0x69	; 105
    5136:	39 f5       	brne	.+78     	; 0x5186 <vfprintf+0x23e>
    5138:	f8 01       	movw	r30, r16
    513a:	37 fe       	sbrs	r3, 7
    513c:	07 c0       	rjmp	.+14     	; 0x514c <vfprintf+0x204>
    513e:	60 81       	ld	r22, Z
    5140:	71 81       	ldd	r23, Z+1	; 0x01
    5142:	82 81       	ldd	r24, Z+2	; 0x02
    5144:	93 81       	ldd	r25, Z+3	; 0x03
    5146:	0c 5f       	subi	r16, 0xFC	; 252
    5148:	1f 4f       	sbci	r17, 0xFF	; 255
    514a:	08 c0       	rjmp	.+16     	; 0x515c <vfprintf+0x214>
    514c:	60 81       	ld	r22, Z
    514e:	71 81       	ldd	r23, Z+1	; 0x01
    5150:	07 2e       	mov	r0, r23
    5152:	00 0c       	add	r0, r0
    5154:	88 0b       	sbc	r24, r24
    5156:	99 0b       	sbc	r25, r25
    5158:	0e 5f       	subi	r16, 0xFE	; 254
    515a:	1f 4f       	sbci	r17, 0xFF	; 255
    515c:	f3 2d       	mov	r31, r3
    515e:	ff 76       	andi	r31, 0x6F	; 111
    5160:	3f 2e       	mov	r3, r31
    5162:	97 ff       	sbrs	r25, 7
    5164:	09 c0       	rjmp	.+18     	; 0x5178 <vfprintf+0x230>
    5166:	90 95       	com	r25
    5168:	80 95       	com	r24
    516a:	70 95       	com	r23
    516c:	61 95       	neg	r22
    516e:	7f 4f       	sbci	r23, 0xFF	; 255
    5170:	8f 4f       	sbci	r24, 0xFF	; 255
    5172:	9f 4f       	sbci	r25, 0xFF	; 255
    5174:	f0 68       	ori	r31, 0x80	; 128
    5176:	3f 2e       	mov	r3, r31
    5178:	2a e0       	ldi	r18, 0x0A	; 10
    517a:	30 e0       	ldi	r19, 0x00	; 0
    517c:	a3 01       	movw	r20, r6
    517e:	33 d1       	rcall	.+614    	; 0x53e6 <__ultoa_invert>
    5180:	88 2e       	mov	r8, r24
    5182:	86 18       	sub	r8, r6
    5184:	44 c0       	rjmp	.+136    	; 0x520e <vfprintf+0x2c6>
    5186:	85 37       	cpi	r24, 0x75	; 117
    5188:	31 f4       	brne	.+12     	; 0x5196 <vfprintf+0x24e>
    518a:	23 2d       	mov	r18, r3
    518c:	2f 7e       	andi	r18, 0xEF	; 239
    518e:	b2 2e       	mov	r11, r18
    5190:	2a e0       	ldi	r18, 0x0A	; 10
    5192:	30 e0       	ldi	r19, 0x00	; 0
    5194:	25 c0       	rjmp	.+74     	; 0x51e0 <vfprintf+0x298>
    5196:	93 2d       	mov	r25, r3
    5198:	99 7f       	andi	r25, 0xF9	; 249
    519a:	b9 2e       	mov	r11, r25
    519c:	8f 36       	cpi	r24, 0x6F	; 111
    519e:	c1 f0       	breq	.+48     	; 0x51d0 <vfprintf+0x288>
    51a0:	18 f4       	brcc	.+6      	; 0x51a8 <vfprintf+0x260>
    51a2:	88 35       	cpi	r24, 0x58	; 88
    51a4:	79 f0       	breq	.+30     	; 0x51c4 <vfprintf+0x27c>
    51a6:	ae c0       	rjmp	.+348    	; 0x5304 <vfprintf+0x3bc>
    51a8:	80 37       	cpi	r24, 0x70	; 112
    51aa:	19 f0       	breq	.+6      	; 0x51b2 <vfprintf+0x26a>
    51ac:	88 37       	cpi	r24, 0x78	; 120
    51ae:	21 f0       	breq	.+8      	; 0x51b8 <vfprintf+0x270>
    51b0:	a9 c0       	rjmp	.+338    	; 0x5304 <vfprintf+0x3bc>
    51b2:	e9 2f       	mov	r30, r25
    51b4:	e0 61       	ori	r30, 0x10	; 16
    51b6:	be 2e       	mov	r11, r30
    51b8:	b4 fe       	sbrs	r11, 4
    51ba:	0d c0       	rjmp	.+26     	; 0x51d6 <vfprintf+0x28e>
    51bc:	fb 2d       	mov	r31, r11
    51be:	f4 60       	ori	r31, 0x04	; 4
    51c0:	bf 2e       	mov	r11, r31
    51c2:	09 c0       	rjmp	.+18     	; 0x51d6 <vfprintf+0x28e>
    51c4:	34 fe       	sbrs	r3, 4
    51c6:	0a c0       	rjmp	.+20     	; 0x51dc <vfprintf+0x294>
    51c8:	29 2f       	mov	r18, r25
    51ca:	26 60       	ori	r18, 0x06	; 6
    51cc:	b2 2e       	mov	r11, r18
    51ce:	06 c0       	rjmp	.+12     	; 0x51dc <vfprintf+0x294>
    51d0:	28 e0       	ldi	r18, 0x08	; 8
    51d2:	30 e0       	ldi	r19, 0x00	; 0
    51d4:	05 c0       	rjmp	.+10     	; 0x51e0 <vfprintf+0x298>
    51d6:	20 e1       	ldi	r18, 0x10	; 16
    51d8:	30 e0       	ldi	r19, 0x00	; 0
    51da:	02 c0       	rjmp	.+4      	; 0x51e0 <vfprintf+0x298>
    51dc:	20 e1       	ldi	r18, 0x10	; 16
    51de:	32 e0       	ldi	r19, 0x02	; 2
    51e0:	f8 01       	movw	r30, r16
    51e2:	b7 fe       	sbrs	r11, 7
    51e4:	07 c0       	rjmp	.+14     	; 0x51f4 <vfprintf+0x2ac>
    51e6:	60 81       	ld	r22, Z
    51e8:	71 81       	ldd	r23, Z+1	; 0x01
    51ea:	82 81       	ldd	r24, Z+2	; 0x02
    51ec:	93 81       	ldd	r25, Z+3	; 0x03
    51ee:	0c 5f       	subi	r16, 0xFC	; 252
    51f0:	1f 4f       	sbci	r17, 0xFF	; 255
    51f2:	06 c0       	rjmp	.+12     	; 0x5200 <vfprintf+0x2b8>
    51f4:	60 81       	ld	r22, Z
    51f6:	71 81       	ldd	r23, Z+1	; 0x01
    51f8:	80 e0       	ldi	r24, 0x00	; 0
    51fa:	90 e0       	ldi	r25, 0x00	; 0
    51fc:	0e 5f       	subi	r16, 0xFE	; 254
    51fe:	1f 4f       	sbci	r17, 0xFF	; 255
    5200:	a3 01       	movw	r20, r6
    5202:	f1 d0       	rcall	.+482    	; 0x53e6 <__ultoa_invert>
    5204:	88 2e       	mov	r8, r24
    5206:	86 18       	sub	r8, r6
    5208:	fb 2d       	mov	r31, r11
    520a:	ff 77       	andi	r31, 0x7F	; 127
    520c:	3f 2e       	mov	r3, r31
    520e:	36 fe       	sbrs	r3, 6
    5210:	0d c0       	rjmp	.+26     	; 0x522c <vfprintf+0x2e4>
    5212:	23 2d       	mov	r18, r3
    5214:	2e 7f       	andi	r18, 0xFE	; 254
    5216:	a2 2e       	mov	r10, r18
    5218:	89 14       	cp	r8, r9
    521a:	58 f4       	brcc	.+22     	; 0x5232 <vfprintf+0x2ea>
    521c:	34 fe       	sbrs	r3, 4
    521e:	0b c0       	rjmp	.+22     	; 0x5236 <vfprintf+0x2ee>
    5220:	32 fc       	sbrc	r3, 2
    5222:	09 c0       	rjmp	.+18     	; 0x5236 <vfprintf+0x2ee>
    5224:	83 2d       	mov	r24, r3
    5226:	8e 7e       	andi	r24, 0xEE	; 238
    5228:	a8 2e       	mov	r10, r24
    522a:	05 c0       	rjmp	.+10     	; 0x5236 <vfprintf+0x2ee>
    522c:	b8 2c       	mov	r11, r8
    522e:	a3 2c       	mov	r10, r3
    5230:	03 c0       	rjmp	.+6      	; 0x5238 <vfprintf+0x2f0>
    5232:	b8 2c       	mov	r11, r8
    5234:	01 c0       	rjmp	.+2      	; 0x5238 <vfprintf+0x2f0>
    5236:	b9 2c       	mov	r11, r9
    5238:	a4 fe       	sbrs	r10, 4
    523a:	0f c0       	rjmp	.+30     	; 0x525a <vfprintf+0x312>
    523c:	fe 01       	movw	r30, r28
    523e:	e8 0d       	add	r30, r8
    5240:	f1 1d       	adc	r31, r1
    5242:	80 81       	ld	r24, Z
    5244:	80 33       	cpi	r24, 0x30	; 48
    5246:	21 f4       	brne	.+8      	; 0x5250 <vfprintf+0x308>
    5248:	9a 2d       	mov	r25, r10
    524a:	99 7e       	andi	r25, 0xE9	; 233
    524c:	a9 2e       	mov	r10, r25
    524e:	09 c0       	rjmp	.+18     	; 0x5262 <vfprintf+0x31a>
    5250:	a2 fe       	sbrs	r10, 2
    5252:	06 c0       	rjmp	.+12     	; 0x5260 <vfprintf+0x318>
    5254:	b3 94       	inc	r11
    5256:	b3 94       	inc	r11
    5258:	04 c0       	rjmp	.+8      	; 0x5262 <vfprintf+0x31a>
    525a:	8a 2d       	mov	r24, r10
    525c:	86 78       	andi	r24, 0x86	; 134
    525e:	09 f0       	breq	.+2      	; 0x5262 <vfprintf+0x31a>
    5260:	b3 94       	inc	r11
    5262:	a3 fc       	sbrc	r10, 3
    5264:	10 c0       	rjmp	.+32     	; 0x5286 <vfprintf+0x33e>
    5266:	a0 fe       	sbrs	r10, 0
    5268:	06 c0       	rjmp	.+12     	; 0x5276 <vfprintf+0x32e>
    526a:	b2 14       	cp	r11, r2
    526c:	80 f4       	brcc	.+32     	; 0x528e <vfprintf+0x346>
    526e:	28 0c       	add	r2, r8
    5270:	92 2c       	mov	r9, r2
    5272:	9b 18       	sub	r9, r11
    5274:	0d c0       	rjmp	.+26     	; 0x5290 <vfprintf+0x348>
    5276:	b2 14       	cp	r11, r2
    5278:	58 f4       	brcc	.+22     	; 0x5290 <vfprintf+0x348>
    527a:	b6 01       	movw	r22, r12
    527c:	80 e2       	ldi	r24, 0x20	; 32
    527e:	90 e0       	ldi	r25, 0x00	; 0
    5280:	76 d0       	rcall	.+236    	; 0x536e <fputc>
    5282:	b3 94       	inc	r11
    5284:	f8 cf       	rjmp	.-16     	; 0x5276 <vfprintf+0x32e>
    5286:	b2 14       	cp	r11, r2
    5288:	18 f4       	brcc	.+6      	; 0x5290 <vfprintf+0x348>
    528a:	2b 18       	sub	r2, r11
    528c:	02 c0       	rjmp	.+4      	; 0x5292 <vfprintf+0x34a>
    528e:	98 2c       	mov	r9, r8
    5290:	21 2c       	mov	r2, r1
    5292:	a4 fe       	sbrs	r10, 4
    5294:	0f c0       	rjmp	.+30     	; 0x52b4 <vfprintf+0x36c>
    5296:	b6 01       	movw	r22, r12
    5298:	80 e3       	ldi	r24, 0x30	; 48
    529a:	90 e0       	ldi	r25, 0x00	; 0
    529c:	68 d0       	rcall	.+208    	; 0x536e <fputc>
    529e:	a2 fe       	sbrs	r10, 2
    52a0:	16 c0       	rjmp	.+44     	; 0x52ce <vfprintf+0x386>
    52a2:	a1 fc       	sbrc	r10, 1
    52a4:	03 c0       	rjmp	.+6      	; 0x52ac <vfprintf+0x364>
    52a6:	88 e7       	ldi	r24, 0x78	; 120
    52a8:	90 e0       	ldi	r25, 0x00	; 0
    52aa:	02 c0       	rjmp	.+4      	; 0x52b0 <vfprintf+0x368>
    52ac:	88 e5       	ldi	r24, 0x58	; 88
    52ae:	90 e0       	ldi	r25, 0x00	; 0
    52b0:	b6 01       	movw	r22, r12
    52b2:	0c c0       	rjmp	.+24     	; 0x52cc <vfprintf+0x384>
    52b4:	8a 2d       	mov	r24, r10
    52b6:	86 78       	andi	r24, 0x86	; 134
    52b8:	51 f0       	breq	.+20     	; 0x52ce <vfprintf+0x386>
    52ba:	a1 fe       	sbrs	r10, 1
    52bc:	02 c0       	rjmp	.+4      	; 0x52c2 <vfprintf+0x37a>
    52be:	8b e2       	ldi	r24, 0x2B	; 43
    52c0:	01 c0       	rjmp	.+2      	; 0x52c4 <vfprintf+0x37c>
    52c2:	80 e2       	ldi	r24, 0x20	; 32
    52c4:	a7 fc       	sbrc	r10, 7
    52c6:	8d e2       	ldi	r24, 0x2D	; 45
    52c8:	b6 01       	movw	r22, r12
    52ca:	90 e0       	ldi	r25, 0x00	; 0
    52cc:	50 d0       	rcall	.+160    	; 0x536e <fputc>
    52ce:	89 14       	cp	r8, r9
    52d0:	30 f4       	brcc	.+12     	; 0x52de <vfprintf+0x396>
    52d2:	b6 01       	movw	r22, r12
    52d4:	80 e3       	ldi	r24, 0x30	; 48
    52d6:	90 e0       	ldi	r25, 0x00	; 0
    52d8:	4a d0       	rcall	.+148    	; 0x536e <fputc>
    52da:	9a 94       	dec	r9
    52dc:	f8 cf       	rjmp	.-16     	; 0x52ce <vfprintf+0x386>
    52de:	8a 94       	dec	r8
    52e0:	f3 01       	movw	r30, r6
    52e2:	e8 0d       	add	r30, r8
    52e4:	f1 1d       	adc	r31, r1
    52e6:	80 81       	ld	r24, Z
    52e8:	b6 01       	movw	r22, r12
    52ea:	90 e0       	ldi	r25, 0x00	; 0
    52ec:	40 d0       	rcall	.+128    	; 0x536e <fputc>
    52ee:	81 10       	cpse	r8, r1
    52f0:	f6 cf       	rjmp	.-20     	; 0x52de <vfprintf+0x396>
    52f2:	22 20       	and	r2, r2
    52f4:	09 f4       	brne	.+2      	; 0x52f8 <vfprintf+0x3b0>
    52f6:	4e ce       	rjmp	.-868    	; 0x4f94 <vfprintf+0x4c>
    52f8:	b6 01       	movw	r22, r12
    52fa:	80 e2       	ldi	r24, 0x20	; 32
    52fc:	90 e0       	ldi	r25, 0x00	; 0
    52fe:	37 d0       	rcall	.+110    	; 0x536e <fputc>
    5300:	2a 94       	dec	r2
    5302:	f7 cf       	rjmp	.-18     	; 0x52f2 <vfprintf+0x3aa>
    5304:	f6 01       	movw	r30, r12
    5306:	86 81       	ldd	r24, Z+6	; 0x06
    5308:	97 81       	ldd	r25, Z+7	; 0x07
    530a:	02 c0       	rjmp	.+4      	; 0x5310 <vfprintf+0x3c8>
    530c:	8f ef       	ldi	r24, 0xFF	; 255
    530e:	9f ef       	ldi	r25, 0xFF	; 255
    5310:	2b 96       	adiw	r28, 0x0b	; 11
    5312:	0f b6       	in	r0, 0x3f	; 63
    5314:	f8 94       	cli
    5316:	de bf       	out	0x3e, r29	; 62
    5318:	0f be       	out	0x3f, r0	; 63
    531a:	cd bf       	out	0x3d, r28	; 61
    531c:	df 91       	pop	r29
    531e:	cf 91       	pop	r28
    5320:	1f 91       	pop	r17
    5322:	0f 91       	pop	r16
    5324:	ff 90       	pop	r15
    5326:	ef 90       	pop	r14
    5328:	df 90       	pop	r13
    532a:	cf 90       	pop	r12
    532c:	bf 90       	pop	r11
    532e:	af 90       	pop	r10
    5330:	9f 90       	pop	r9
    5332:	8f 90       	pop	r8
    5334:	7f 90       	pop	r7
    5336:	6f 90       	pop	r6
    5338:	5f 90       	pop	r5
    533a:	4f 90       	pop	r4
    533c:	3f 90       	pop	r3
    533e:	2f 90       	pop	r2
    5340:	08 95       	ret

00005342 <strnlen_P>:
    5342:	fc 01       	movw	r30, r24
    5344:	05 90       	lpm	r0, Z+
    5346:	61 50       	subi	r22, 0x01	; 1
    5348:	70 40       	sbci	r23, 0x00	; 0
    534a:	01 10       	cpse	r0, r1
    534c:	d8 f7       	brcc	.-10     	; 0x5344 <strnlen_P+0x2>
    534e:	80 95       	com	r24
    5350:	90 95       	com	r25
    5352:	8e 0f       	add	r24, r30
    5354:	9f 1f       	adc	r25, r31
    5356:	08 95       	ret

00005358 <strnlen>:
    5358:	fc 01       	movw	r30, r24
    535a:	61 50       	subi	r22, 0x01	; 1
    535c:	70 40       	sbci	r23, 0x00	; 0
    535e:	01 90       	ld	r0, Z+
    5360:	01 10       	cpse	r0, r1
    5362:	d8 f7       	brcc	.-10     	; 0x535a <strnlen+0x2>
    5364:	80 95       	com	r24
    5366:	90 95       	com	r25
    5368:	8e 0f       	add	r24, r30
    536a:	9f 1f       	adc	r25, r31
    536c:	08 95       	ret

0000536e <fputc>:
    536e:	0f 93       	push	r16
    5370:	1f 93       	push	r17
    5372:	cf 93       	push	r28
    5374:	df 93       	push	r29
    5376:	fb 01       	movw	r30, r22
    5378:	23 81       	ldd	r18, Z+3	; 0x03
    537a:	21 fd       	sbrc	r18, 1
    537c:	03 c0       	rjmp	.+6      	; 0x5384 <fputc+0x16>
    537e:	8f ef       	ldi	r24, 0xFF	; 255
    5380:	9f ef       	ldi	r25, 0xFF	; 255
    5382:	2c c0       	rjmp	.+88     	; 0x53dc <fputc+0x6e>
    5384:	22 ff       	sbrs	r18, 2
    5386:	16 c0       	rjmp	.+44     	; 0x53b4 <fputc+0x46>
    5388:	46 81       	ldd	r20, Z+6	; 0x06
    538a:	57 81       	ldd	r21, Z+7	; 0x07
    538c:	24 81       	ldd	r18, Z+4	; 0x04
    538e:	35 81       	ldd	r19, Z+5	; 0x05
    5390:	42 17       	cp	r20, r18
    5392:	53 07       	cpc	r21, r19
    5394:	44 f4       	brge	.+16     	; 0x53a6 <fputc+0x38>
    5396:	a0 81       	ld	r26, Z
    5398:	b1 81       	ldd	r27, Z+1	; 0x01
    539a:	9d 01       	movw	r18, r26
    539c:	2f 5f       	subi	r18, 0xFF	; 255
    539e:	3f 4f       	sbci	r19, 0xFF	; 255
    53a0:	31 83       	std	Z+1, r19	; 0x01
    53a2:	20 83       	st	Z, r18
    53a4:	8c 93       	st	X, r24
    53a6:	26 81       	ldd	r18, Z+6	; 0x06
    53a8:	37 81       	ldd	r19, Z+7	; 0x07
    53aa:	2f 5f       	subi	r18, 0xFF	; 255
    53ac:	3f 4f       	sbci	r19, 0xFF	; 255
    53ae:	37 83       	std	Z+7, r19	; 0x07
    53b0:	26 83       	std	Z+6, r18	; 0x06
    53b2:	14 c0       	rjmp	.+40     	; 0x53dc <fputc+0x6e>
    53b4:	8b 01       	movw	r16, r22
    53b6:	ec 01       	movw	r28, r24
    53b8:	fb 01       	movw	r30, r22
    53ba:	00 84       	ldd	r0, Z+8	; 0x08
    53bc:	f1 85       	ldd	r31, Z+9	; 0x09
    53be:	e0 2d       	mov	r30, r0
    53c0:	19 95       	eicall
    53c2:	89 2b       	or	r24, r25
    53c4:	e1 f6       	brne	.-72     	; 0x537e <fputc+0x10>
    53c6:	d8 01       	movw	r26, r16
    53c8:	16 96       	adiw	r26, 0x06	; 6
    53ca:	8d 91       	ld	r24, X+
    53cc:	9c 91       	ld	r25, X
    53ce:	17 97       	sbiw	r26, 0x07	; 7
    53d0:	01 96       	adiw	r24, 0x01	; 1
    53d2:	17 96       	adiw	r26, 0x07	; 7
    53d4:	9c 93       	st	X, r25
    53d6:	8e 93       	st	-X, r24
    53d8:	16 97       	sbiw	r26, 0x06	; 6
    53da:	ce 01       	movw	r24, r28
    53dc:	df 91       	pop	r29
    53de:	cf 91       	pop	r28
    53e0:	1f 91       	pop	r17
    53e2:	0f 91       	pop	r16
    53e4:	08 95       	ret

000053e6 <__ultoa_invert>:
    53e6:	fa 01       	movw	r30, r20
    53e8:	aa 27       	eor	r26, r26
    53ea:	28 30       	cpi	r18, 0x08	; 8
    53ec:	51 f1       	breq	.+84     	; 0x5442 <__ultoa_invert+0x5c>
    53ee:	20 31       	cpi	r18, 0x10	; 16
    53f0:	81 f1       	breq	.+96     	; 0x5452 <__ultoa_invert+0x6c>
    53f2:	e8 94       	clt
    53f4:	6f 93       	push	r22
    53f6:	6e 7f       	andi	r22, 0xFE	; 254
    53f8:	6e 5f       	subi	r22, 0xFE	; 254
    53fa:	7f 4f       	sbci	r23, 0xFF	; 255
    53fc:	8f 4f       	sbci	r24, 0xFF	; 255
    53fe:	9f 4f       	sbci	r25, 0xFF	; 255
    5400:	af 4f       	sbci	r26, 0xFF	; 255
    5402:	b1 e0       	ldi	r27, 0x01	; 1
    5404:	3e d0       	rcall	.+124    	; 0x5482 <__ultoa_invert+0x9c>
    5406:	b4 e0       	ldi	r27, 0x04	; 4
    5408:	3c d0       	rcall	.+120    	; 0x5482 <__ultoa_invert+0x9c>
    540a:	67 0f       	add	r22, r23
    540c:	78 1f       	adc	r23, r24
    540e:	89 1f       	adc	r24, r25
    5410:	9a 1f       	adc	r25, r26
    5412:	a1 1d       	adc	r26, r1
    5414:	68 0f       	add	r22, r24
    5416:	79 1f       	adc	r23, r25
    5418:	8a 1f       	adc	r24, r26
    541a:	91 1d       	adc	r25, r1
    541c:	a1 1d       	adc	r26, r1
    541e:	6a 0f       	add	r22, r26
    5420:	71 1d       	adc	r23, r1
    5422:	81 1d       	adc	r24, r1
    5424:	91 1d       	adc	r25, r1
    5426:	a1 1d       	adc	r26, r1
    5428:	20 d0       	rcall	.+64     	; 0x546a <__ultoa_invert+0x84>
    542a:	09 f4       	brne	.+2      	; 0x542e <__ultoa_invert+0x48>
    542c:	68 94       	set
    542e:	3f 91       	pop	r19
    5430:	2a e0       	ldi	r18, 0x0A	; 10
    5432:	26 9f       	mul	r18, r22
    5434:	11 24       	eor	r1, r1
    5436:	30 19       	sub	r19, r0
    5438:	30 5d       	subi	r19, 0xD0	; 208
    543a:	31 93       	st	Z+, r19
    543c:	de f6       	brtc	.-74     	; 0x53f4 <__ultoa_invert+0xe>
    543e:	cf 01       	movw	r24, r30
    5440:	08 95       	ret
    5442:	46 2f       	mov	r20, r22
    5444:	47 70       	andi	r20, 0x07	; 7
    5446:	40 5d       	subi	r20, 0xD0	; 208
    5448:	41 93       	st	Z+, r20
    544a:	b3 e0       	ldi	r27, 0x03	; 3
    544c:	0f d0       	rcall	.+30     	; 0x546c <__ultoa_invert+0x86>
    544e:	c9 f7       	brne	.-14     	; 0x5442 <__ultoa_invert+0x5c>
    5450:	f6 cf       	rjmp	.-20     	; 0x543e <__ultoa_invert+0x58>
    5452:	46 2f       	mov	r20, r22
    5454:	4f 70       	andi	r20, 0x0F	; 15
    5456:	40 5d       	subi	r20, 0xD0	; 208
    5458:	4a 33       	cpi	r20, 0x3A	; 58
    545a:	18 f0       	brcs	.+6      	; 0x5462 <__ultoa_invert+0x7c>
    545c:	49 5d       	subi	r20, 0xD9	; 217
    545e:	31 fd       	sbrc	r19, 1
    5460:	40 52       	subi	r20, 0x20	; 32
    5462:	41 93       	st	Z+, r20
    5464:	02 d0       	rcall	.+4      	; 0x546a <__ultoa_invert+0x84>
    5466:	a9 f7       	brne	.-22     	; 0x5452 <__ultoa_invert+0x6c>
    5468:	ea cf       	rjmp	.-44     	; 0x543e <__ultoa_invert+0x58>
    546a:	b4 e0       	ldi	r27, 0x04	; 4
    546c:	a6 95       	lsr	r26
    546e:	97 95       	ror	r25
    5470:	87 95       	ror	r24
    5472:	77 95       	ror	r23
    5474:	67 95       	ror	r22
    5476:	ba 95       	dec	r27
    5478:	c9 f7       	brne	.-14     	; 0x546c <__ultoa_invert+0x86>
    547a:	00 97       	sbiw	r24, 0x00	; 0
    547c:	61 05       	cpc	r22, r1
    547e:	71 05       	cpc	r23, r1
    5480:	08 95       	ret
    5482:	9b 01       	movw	r18, r22
    5484:	ac 01       	movw	r20, r24
    5486:	0a 2e       	mov	r0, r26
    5488:	06 94       	lsr	r0
    548a:	57 95       	ror	r21
    548c:	47 95       	ror	r20
    548e:	37 95       	ror	r19
    5490:	27 95       	ror	r18
    5492:	ba 95       	dec	r27
    5494:	c9 f7       	brne	.-14     	; 0x5488 <__ultoa_invert+0xa2>
    5496:	62 0f       	add	r22, r18
    5498:	73 1f       	adc	r23, r19
    549a:	84 1f       	adc	r24, r20
    549c:	95 1f       	adc	r25, r21
    549e:	a0 1d       	adc	r26, r0
    54a0:	08 95       	ret

000054a2 <_exit>:
    54a2:	f8 94       	cli

000054a4 <__stop_program>:
    54a4:	ff cf       	rjmp	.-2      	; 0x54a4 <__stop_program>
